// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_gcmessages_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CSODOTAGameAccountClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTAGameAccountClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSODOTAPartyMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTAPartyMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSODOTAParty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTAParty_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSODOTAParty_State_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CSODOTAPartyInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTAPartyInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSODOTAPartyInvite_PartyMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTAPartyInvite_PartyMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSODOTALobbyInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTALobbyInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSODOTALobbyInvite_LobbyMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTALobbyInvite_LobbyMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientHardwareSpecs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientHardwareSpecs_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTASaveGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTASaveGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTASaveGame_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTASaveGame_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTASaveGame_SaveInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTASaveGame_SaveInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTASaveGame_SaveInstance_PlayerPositions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTASaveGame_SaveInstance_PlayerPositions_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLeaverState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLeaverState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTALobbyMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTALobbyMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTALobbyMember_CDOTALobbyMemberXPBonus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTALobbyMember_CDOTALobbyMemberXPBonus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLobbyTeamDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLobbyTeamDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLobbyTimedRewardDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLobbyTimedRewardDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLobbyBroadcastChannelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLobbyBroadcastChannelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSODOTALobby_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTALobby_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSODOTALobby_CExtraMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTALobby_CExtraMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSODOTALobby_State_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CSODOTALobby_LobbyType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgLobbyEventPoints_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLobbyEventPoints_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLobbyEventPoints_AccountPoints_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLobbyEventPoints_AccountPoints_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGenericResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGenericResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTABroadcastNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTABroadcastNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAPCBangTimedReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAPCBangTimedReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAttribute_String_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAttribute_String_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAttribute_ItemDynamicRecipeComponent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAttribute_ItemDynamicRecipeComponent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProtoItemHeroStatue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProtoItemHeroStatue_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProtoItemTeamShowcase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProtoItemTeamShowcase_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProtoItemSocket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProtoItemSocket_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProtoItemSocket_Empty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProtoItemSocket_Empty_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProtoItemSocket_Effect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProtoItemSocket_Effect_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProtoItemSocket_Color_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProtoItemSocket_Color_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProtoItemSocket_Strange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProtoItemSocket_Strange_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProtoItemSocket_Spectator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProtoItemSocket_Spectator_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProtoItemSocket_AssetModifier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProtoItemSocket_AssetModifier_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProtoItemSocket_Autograph_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProtoItemSocket_Autograph_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProtoItemSocket_StaticVisuals_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProtoItemSocket_StaticVisuals_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMatchPlayerAbilityUpgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMatchPlayerAbilityUpgrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMatchAdditionalUnitInventory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMatchAdditionalUnitInventory_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMatchHeroSelectEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMatchHeroSelectEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAProcessFantasyScheduledEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAProcessFantasyScheduledEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAHasItemQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAHasItemQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAHasItemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAHasItemResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAHasItemDefsQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAHasItemDefsQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAHasItemDefsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAHasItemDefsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAConsumeFantasyTicket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAConsumeFantasyTicket_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAConsumeFantasyTicketFailure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAConsumeFantasyTicketFailure_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCFantasySetMatchLeague_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCFantasySetMatchLeague_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSODOTAMapLocationState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTAMapLocationState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgNexonPartnerUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgNexonPartnerUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgMakeOffering_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgMakeOffering_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRequestOfferings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRequestOfferings_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRequestOfferingsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRequestOfferingsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRequestOfferingsResponse_NewYearsOffering_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRequestOfferingsResponse_NewYearsOffering_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLeagueAdminList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLeagueAdminList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPerfectWorldUserLookupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPerfectWorldUserLookupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPerfectWorldUserLookupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPerfectWorldUserLookupResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgPerfectWorldUserLookupResponse_EResultCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CCompendiumTimestampedData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCompendiumTimestampedData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCompendiumGameTimeline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCompendiumGameTimeline_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCompendiumGameList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCompendiumGameList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAdditionalEquipSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAdditionalEquipSlot_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARedeemItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARedeemItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARedeemItemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARedeemItemResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTACombatLogEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTACombatLogEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAProfileCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAProfileCard_Slot_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_Trophy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAProfileCard_Slot_Trophy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_Stat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAProfileCard_Slot_Stat_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAProfileCard_Slot_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_Hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAProfileCard_Slot_Hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_Emoticon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAProfileCard_Slot_Emoticon_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAProfileCard_EStatID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToClientNewBloomTimingUpdated_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToClientNewBloomTimingUpdated_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSODOTAPlayerChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTAPlayerChallenge_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSODOTAPlayerChallenge_EFlags_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientToGCRerollPlayerChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientToGCRerollPlayerChallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCRerollPlayerChallengeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCRerollPlayerChallengeResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgGCRerollPlayerChallengeResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCTopCustomGamesList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCTopCustomGamesList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_TeamDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_TeamDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_ItemDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_ItemDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_AbilityDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_AbilityDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_HeroToHeroStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_HeroToHeroStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_AbilityList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_AbilityList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_PlayerDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_PlayerDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_BuildingDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_BuildingDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_KillDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_KillDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_BroadcasterDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_BroadcasterDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_PickBanDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_PickBanDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_MatchDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_MatchDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_GraphData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_GraphData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_GraphData_LocationStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_GraphData_LocationStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStatsTerse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse_TeamDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStatsTerse_TeamDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse_PlayerDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStatsTerse_PlayerDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse_BuildingDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStatsTerse_BuildingDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse_MatchDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStatsTerse_MatchDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse_GraphData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStatsTerse_GraphData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EDOTAGCMsg_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_GameMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_GameState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_GC_TEAM_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_CM_PICK_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTAConnectionState_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTALeaverStatus_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTALowPriorityBanType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTALobbyReadyState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTAGameVersion_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTAJoinLobbyResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTAMatchVote_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_LobbyMemberXPBonus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTALobbyVisibility_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDOTAPlayerMMRType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MatchType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTABotDifficulty_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MatchLanguages_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETournamentTemplate_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETournamentType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EEvent_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LobbyDotaTVDelay_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMatchOutcome_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDOTAGCSessionNeed_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Fantasy_Roles_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Fantasy_Team_Slots_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Fantasy_Selection_Mode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_TournamentEvents_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_COMBATLOG_TYPES_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto() {
  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dota_gcmessages_common.proto");
  GOOGLE_CHECK(file != NULL);
  CSODOTAGameAccountClient_descriptor_ = file->message_type(0);
  static const int CSODOTAGameAccountClient_offsets_[46] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, losses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, xp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, initial_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, leaver_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, secondary_leaver_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, low_priority_until_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, prevent_text_chat_until_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, prevent_voice_until_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, last_abandoned_game_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, last_secondary_abandoned_game_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, leaver_penalty_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, completed_game_streak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, teaching_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, leadership_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, friendly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, forgiving_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, account_disabled_until_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, account_disabled_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, showcase_hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, match_disabled_until_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, match_disabled_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, partner_account_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, partner_account_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, shutdownlawterminatetimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, low_priority_games_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, competitive_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, calibration_games_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, solo_competitive_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, solo_calibration_games_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, competitive_1v1_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, competitive_1v1_calibration_games_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, recruitment_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, has_new_notifications_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, is_league_admin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, casual_games_played_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, solo_competitive_games_played_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, party_competitive_games_played_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, casual_1v1_games_played_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, competitive_team_games_played_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, curr_all_hero_challenge_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, play_time_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, account_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, play_time_level_),
  };
  CSODOTAGameAccountClient_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSODOTAGameAccountClient_descriptor_,
      CSODOTAGameAccountClient::default_instance_,
      CSODOTAGameAccountClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, _has_bits_[0]),
      -1,
      -1,
      sizeof(CSODOTAGameAccountClient),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, _internal_metadata_),
      -1);
  CSODOTAPartyMember_descriptor_ = file->message_type(1);
  static const int CSODOTAPartyMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, partner_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, is_coach_),
  };
  CSODOTAPartyMember_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSODOTAPartyMember_descriptor_,
      CSODOTAPartyMember::default_instance_,
      CSODOTAPartyMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, _has_bits_[0]),
      -1,
      -1,
      sizeof(CSODOTAPartyMember),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, _internal_metadata_),
      -1);
  CSODOTAParty_descriptor_ = file->message_type(2);
  static const int CSODOTAParty_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, member_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, game_modes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, effective_started_matchmaking_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, raw_started_matchmaking_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, attempt_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, attempt_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, matchgroups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, low_priority_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, match_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, bot_difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, match_disabled_until_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, match_disabled_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, matchmaking_max_range_minutes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, matchlanguages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, map_preference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, open_guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, common_guilds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, low_priority_games_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, min_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, max_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, active_ingame_events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, open_for_join_requests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, sent_invites_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, recv_invites_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, account_flags_),
  };
  CSODOTAParty_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSODOTAParty_descriptor_,
      CSODOTAParty::default_instance_,
      CSODOTAParty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, _has_bits_[0]),
      -1,
      -1,
      sizeof(CSODOTAParty),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, _internal_metadata_),
      -1);
  CSODOTAParty_State_descriptor_ = CSODOTAParty_descriptor_->enum_type(0);
  CSODOTAPartyInvite_descriptor_ = file->message_type(3);
  static const int CSODOTAPartyInvite_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, sender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, sender_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, low_priority_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, as_coach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, invite_gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, engine_),
  };
  CSODOTAPartyInvite_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSODOTAPartyInvite_descriptor_,
      CSODOTAPartyInvite::default_instance_,
      CSODOTAPartyInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, _has_bits_[0]),
      -1,
      -1,
      sizeof(CSODOTAPartyInvite),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, _internal_metadata_),
      -1);
  CSODOTAPartyInvite_PartyMember_descriptor_ = CSODOTAPartyInvite_descriptor_->nested_type(0);
  static const int CSODOTAPartyInvite_PartyMember_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite_PartyMember, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite_PartyMember, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite_PartyMember, is_coach_),
  };
  CSODOTAPartyInvite_PartyMember_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSODOTAPartyInvite_PartyMember_descriptor_,
      CSODOTAPartyInvite_PartyMember::default_instance_,
      CSODOTAPartyInvite_PartyMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite_PartyMember, _has_bits_[0]),
      -1,
      -1,
      sizeof(CSODOTAPartyInvite_PartyMember),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite_PartyMember, _internal_metadata_),
      -1);
  CSODOTALobbyInvite_descriptor_ = file->message_type(4);
  static const int CSODOTALobbyInvite_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, sender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, sender_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, custom_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, invite_gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, custom_game_crc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, custom_game_timestamp_),
  };
  CSODOTALobbyInvite_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSODOTALobbyInvite_descriptor_,
      CSODOTALobbyInvite::default_instance_,
      CSODOTALobbyInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, _has_bits_[0]),
      -1,
      -1,
      sizeof(CSODOTALobbyInvite),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, _internal_metadata_),
      -1);
  CSODOTALobbyInvite_LobbyMember_descriptor_ = CSODOTALobbyInvite_descriptor_->nested_type(0);
  static const int CSODOTALobbyInvite_LobbyMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite_LobbyMember, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite_LobbyMember, steam_id_),
  };
  CSODOTALobbyInvite_LobbyMember_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSODOTALobbyInvite_LobbyMember_descriptor_,
      CSODOTALobbyInvite_LobbyMember::default_instance_,
      CSODOTALobbyInvite_LobbyMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite_LobbyMember, _has_bits_[0]),
      -1,
      -1,
      sizeof(CSODOTALobbyInvite_LobbyMember),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite_LobbyMember, _internal_metadata_),
      -1);
  CDOTAClientHardwareSpecs_descriptor_ = file->message_type(5);
  static const int CDOTAClientHardwareSpecs_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientHardwareSpecs, logical_processors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientHardwareSpecs, cpu_cycles_per_second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientHardwareSpecs, total_physical_memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientHardwareSpecs, is_64_bit_os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientHardwareSpecs, upload_measurement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientHardwareSpecs, prefer_not_host_),
  };
  CDOTAClientHardwareSpecs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientHardwareSpecs_descriptor_,
      CDOTAClientHardwareSpecs::default_instance_,
      CDOTAClientHardwareSpecs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientHardwareSpecs, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientHardwareSpecs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientHardwareSpecs, _internal_metadata_),
      -1);
  CDOTASaveGame_descriptor_ = file->message_type(6);
  static const int CDOTASaveGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame, save_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame, save_instances_),
  };
  CDOTASaveGame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTASaveGame_descriptor_,
      CDOTASaveGame::default_instance_,
      CDOTASaveGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTASaveGame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame, _internal_metadata_),
      -1);
  CDOTASaveGame_Player_descriptor_ = CDOTASaveGame_descriptor_->nested_type(0);
  static const int CDOTASaveGame_Player_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_Player, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_Player, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_Player, hero_),
  };
  CDOTASaveGame_Player_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTASaveGame_Player_descriptor_,
      CDOTASaveGame_Player::default_instance_,
      CDOTASaveGame_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_Player, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTASaveGame_Player),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_Player, _internal_metadata_),
      -1);
  CDOTASaveGame_SaveInstance_descriptor_ = CDOTASaveGame_descriptor_->nested_type(1);
  static const int CDOTASaveGame_SaveInstance_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, game_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, team1_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, team2_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, player_positions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, save_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, save_time_),
  };
  CDOTASaveGame_SaveInstance_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTASaveGame_SaveInstance_descriptor_,
      CDOTASaveGame_SaveInstance::default_instance_,
      CDOTASaveGame_SaveInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTASaveGame_SaveInstance),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, _internal_metadata_),
      -1);
  CDOTASaveGame_SaveInstance_PlayerPositions_descriptor_ = CDOTASaveGame_SaveInstance_descriptor_->nested_type(0);
  static const int CDOTASaveGame_SaveInstance_PlayerPositions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance_PlayerPositions, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance_PlayerPositions, y_),
  };
  CDOTASaveGame_SaveInstance_PlayerPositions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTASaveGame_SaveInstance_PlayerPositions_descriptor_,
      CDOTASaveGame_SaveInstance_PlayerPositions::default_instance_,
      CDOTASaveGame_SaveInstance_PlayerPositions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance_PlayerPositions, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTASaveGame_SaveInstance_PlayerPositions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance_PlayerPositions, _internal_metadata_),
      -1);
  CMsgLeaverState_descriptor_ = file->message_type(7);
  static const int CMsgLeaverState_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, lobby_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, game_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, leaver_detected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, first_blood_happened_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, discard_match_results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, mass_disconnect_),
  };
  CMsgLeaverState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgLeaverState_descriptor_,
      CMsgLeaverState::default_instance_,
      CMsgLeaverState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgLeaverState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, _internal_metadata_),
      -1);
  CDOTALobbyMember_descriptor_ = file->message_type(8);
  static const int CDOTALobbyMember_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, meta_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, meta_xp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, meta_xp_awarded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, leaver_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, leaver_actions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, prize_def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, disabled_hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, partner_account_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, enabled_hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, coach_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, nexon_pc_bang_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, nexon_pc_bang_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, xp_bonuses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, rank_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, cameraman_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, custom_game_product_ids_),
  };
  CDOTALobbyMember_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTALobbyMember_descriptor_,
      CDOTALobbyMember::default_instance_,
      CDOTALobbyMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTALobbyMember),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, _internal_metadata_),
      -1);
  CDOTALobbyMember_CDOTALobbyMemberXPBonus_descriptor_ = CDOTALobbyMember_descriptor_->nested_type(0);
  static const int CDOTALobbyMember_CDOTALobbyMemberXPBonus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember_CDOTALobbyMemberXPBonus, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember_CDOTALobbyMemberXPBonus, xp_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember_CDOTALobbyMemberXPBonus, source_key_),
  };
  CDOTALobbyMember_CDOTALobbyMemberXPBonus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTALobbyMember_CDOTALobbyMemberXPBonus_descriptor_,
      CDOTALobbyMember_CDOTALobbyMemberXPBonus::default_instance_,
      CDOTALobbyMember_CDOTALobbyMemberXPBonus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember_CDOTALobbyMemberXPBonus, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTALobbyMember_CDOTALobbyMemberXPBonus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember_CDOTALobbyMemberXPBonus, _internal_metadata_),
      -1);
  CLobbyTeamDetails_descriptor_ = file->message_type(9);
  static const int CLobbyTeamDetails_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_base_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_banner_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_complete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, guild_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, guild_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, guild_base_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, guild_banner_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, rank_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, is_home_team_),
  };
  CLobbyTeamDetails_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CLobbyTeamDetails_descriptor_,
      CLobbyTeamDetails::default_instance_,
      CLobbyTeamDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, _has_bits_[0]),
      -1,
      -1,
      sizeof(CLobbyTeamDetails),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, _internal_metadata_),
      -1);
  CLobbyTimedRewardDetails_descriptor_ = file->message_type(10);
  static const int CLobbyTimedRewardDetails_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, item_def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, is_supply_crate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, is_timed_drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, origin_),
  };
  CLobbyTimedRewardDetails_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CLobbyTimedRewardDetails_descriptor_,
      CLobbyTimedRewardDetails::default_instance_,
      CLobbyTimedRewardDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, _has_bits_[0]),
      -1,
      -1,
      sizeof(CLobbyTimedRewardDetails),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, _internal_metadata_),
      -1);
  CLobbyBroadcastChannelInfo_descriptor_ = file->message_type(11);
  static const int CLobbyBroadcastChannelInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyBroadcastChannelInfo, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyBroadcastChannelInfo, country_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyBroadcastChannelInfo, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyBroadcastChannelInfo, language_code_),
  };
  CLobbyBroadcastChannelInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CLobbyBroadcastChannelInfo_descriptor_,
      CLobbyBroadcastChannelInfo::default_instance_,
      CLobbyBroadcastChannelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyBroadcastChannelInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(CLobbyBroadcastChannelInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyBroadcastChannelInfo, _internal_metadata_),
      -1);
  CSODOTALobby_descriptor_ = file->message_type(12);
  static const int CSODOTALobby_offsets_[66] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, left_members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, pending_invites_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, connect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, lobby_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, allow_cheats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, fill_with_bots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, intro_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, game_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, team_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, tutorial_lesson_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, tournament_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, tournament_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, server_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, game_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, num_spectators_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, matchgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, cm_pick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, allow_spectating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, bot_difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, game_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, timed_reward_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, pass_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, bot_slot_difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, leagueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, penalty_level_radiant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, penalty_level_dire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, load_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, series_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, radiant_series_wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, dire_series_wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, loot_generated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, loot_awarded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, allchat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, dota_tv_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_map_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, lan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, broadcast_channel_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, first_leaver_accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, series_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, low_priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, extra_messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, save_game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, first_blood_happened_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, match_outcome_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, mass_disconnect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, active_ingame_events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_min_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_max_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, partner_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, lan_host_ping_to_server_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, visibility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_game_crc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_game_auto_created_lobby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, league_series_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, league_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_game_timestamp_),
  };
  CSODOTALobby_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSODOTALobby_descriptor_,
      CSODOTALobby::default_instance_,
      CSODOTALobby_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, _has_bits_[0]),
      -1,
      -1,
      sizeof(CSODOTALobby),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, _internal_metadata_),
      -1);
  CSODOTALobby_CExtraMsg_descriptor_ = CSODOTALobby_descriptor_->nested_type(0);
  static const int CSODOTALobby_CExtraMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby_CExtraMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby_CExtraMsg, contents_),
  };
  CSODOTALobby_CExtraMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSODOTALobby_CExtraMsg_descriptor_,
      CSODOTALobby_CExtraMsg::default_instance_,
      CSODOTALobby_CExtraMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby_CExtraMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(CSODOTALobby_CExtraMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby_CExtraMsg, _internal_metadata_),
      -1);
  CSODOTALobby_State_descriptor_ = CSODOTALobby_descriptor_->enum_type(0);
  CSODOTALobby_LobbyType_descriptor_ = CSODOTALobby_descriptor_->enum_type(1);
  CMsgLobbyEventPoints_descriptor_ = file->message_type(13);
  static const int CMsgLobbyEventPoints_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints, account_points_),
  };
  CMsgLobbyEventPoints_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgLobbyEventPoints_descriptor_,
      CMsgLobbyEventPoints::default_instance_,
      CMsgLobbyEventPoints_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgLobbyEventPoints),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints, _internal_metadata_),
      -1);
  CMsgLobbyEventPoints_AccountPoints_descriptor_ = CMsgLobbyEventPoints_descriptor_->nested_type(0);
  static const int CMsgLobbyEventPoints_AccountPoints_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, normal_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, premium_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, owned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, favorite_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, favorite_team_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, points_held_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, premium_points_held_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, favorite_team_foil_level_),
  };
  CMsgLobbyEventPoints_AccountPoints_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgLobbyEventPoints_AccountPoints_descriptor_,
      CMsgLobbyEventPoints_AccountPoints::default_instance_,
      CMsgLobbyEventPoints_AccountPoints_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgLobbyEventPoints_AccountPoints),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, _internal_metadata_),
      -1);
  CMsgDOTAGenericResult_descriptor_ = file->message_type(14);
  static const int CMsgDOTAGenericResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenericResult, eresult_),
  };
  CMsgDOTAGenericResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAGenericResult_descriptor_,
      CMsgDOTAGenericResult::default_instance_,
      CMsgDOTAGenericResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenericResult, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAGenericResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenericResult, _internal_metadata_),
      -1);
  CMsgDOTABroadcastNotification_descriptor_ = file->message_type(15);
  static const int CMsgDOTABroadcastNotification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABroadcastNotification, message_),
  };
  CMsgDOTABroadcastNotification_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTABroadcastNotification_descriptor_,
      CMsgDOTABroadcastNotification::default_instance_,
      CMsgDOTABroadcastNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABroadcastNotification, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTABroadcastNotification),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABroadcastNotification, _internal_metadata_),
      -1);
  CMsgDOTAPCBangTimedReward_descriptor_ = file->message_type(16);
  static const int CMsgDOTAPCBangTimedReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPCBangTimedReward, persona_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPCBangTimedReward, itemdef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPCBangTimedReward, pcbangname_),
  };
  CMsgDOTAPCBangTimedReward_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAPCBangTimedReward_descriptor_,
      CMsgDOTAPCBangTimedReward::default_instance_,
      CMsgDOTAPCBangTimedReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPCBangTimedReward, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAPCBangTimedReward),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPCBangTimedReward, _internal_metadata_),
      -1);
  CAttribute_String_descriptor_ = file->message_type(17);
  static const int CAttribute_String_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_String, value_),
  };
  CAttribute_String_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CAttribute_String_descriptor_,
      CAttribute_String::default_instance_,
      CAttribute_String_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_String, _has_bits_[0]),
      -1,
      -1,
      sizeof(CAttribute_String),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_String, _internal_metadata_),
      -1);
  CAttribute_ItemDynamicRecipeComponent_descriptor_ = file->message_type(18);
  static const int CAttribute_ItemDynamicRecipeComponent_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_ItemDynamicRecipeComponent, item_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_ItemDynamicRecipeComponent, item_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_ItemDynamicRecipeComponent, item_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_ItemDynamicRecipeComponent, attributes_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_ItemDynamicRecipeComponent, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_ItemDynamicRecipeComponent, items_fulfilled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_ItemDynamicRecipeComponent, item_rarity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_ItemDynamicRecipeComponent, lootlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_ItemDynamicRecipeComponent, fulfilled_item_id_),
  };
  CAttribute_ItemDynamicRecipeComponent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CAttribute_ItemDynamicRecipeComponent_descriptor_,
      CAttribute_ItemDynamicRecipeComponent::default_instance_,
      CAttribute_ItemDynamicRecipeComponent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_ItemDynamicRecipeComponent, _has_bits_[0]),
      -1,
      -1,
      sizeof(CAttribute_ItemDynamicRecipeComponent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_ItemDynamicRecipeComponent, _internal_metadata_),
      -1);
  CProtoItemHeroStatue_descriptor_ = file->message_type(19);
  static const int CProtoItemHeroStatue_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, status_effect_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, sequence_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, cycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, wearable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, inscription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, tournament_drop_),
  };
  CProtoItemHeroStatue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CProtoItemHeroStatue_descriptor_,
      CProtoItemHeroStatue::default_instance_,
      CProtoItemHeroStatue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, _has_bits_[0]),
      -1,
      -1,
      sizeof(CProtoItemHeroStatue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, _internal_metadata_),
      -1);
  CProtoItemTeamShowcase_descriptor_ = file->message_type(20);
  static const int CProtoItemTeamShowcase_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemTeamShowcase, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemTeamShowcase, status_effect_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemTeamShowcase, sequence_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemTeamShowcase, cycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemTeamShowcase, wearable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemTeamShowcase, inscription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemTeamShowcase, style_),
  };
  CProtoItemTeamShowcase_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CProtoItemTeamShowcase_descriptor_,
      CProtoItemTeamShowcase::default_instance_,
      CProtoItemTeamShowcase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemTeamShowcase, _has_bits_[0]),
      -1,
      -1,
      sizeof(CProtoItemTeamShowcase),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemTeamShowcase, _internal_metadata_),
      -1);
  CProtoItemSocket_descriptor_ = file->message_type(21);
  static const int CProtoItemSocket_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket, attr_def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket, required_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket, required_hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket, gem_def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket, not_tradable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket, required_item_slot_),
  };
  CProtoItemSocket_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CProtoItemSocket_descriptor_,
      CProtoItemSocket::default_instance_,
      CProtoItemSocket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket, _has_bits_[0]),
      -1,
      -1,
      sizeof(CProtoItemSocket),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket, _internal_metadata_),
      -1);
  CProtoItemSocket_Empty_descriptor_ = file->message_type(22);
  static const int CProtoItemSocket_Empty_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Empty, socket_),
  };
  CProtoItemSocket_Empty_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CProtoItemSocket_Empty_descriptor_,
      CProtoItemSocket_Empty::default_instance_,
      CProtoItemSocket_Empty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Empty, _has_bits_[0]),
      -1,
      -1,
      sizeof(CProtoItemSocket_Empty),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Empty, _internal_metadata_),
      -1);
  CProtoItemSocket_Effect_descriptor_ = file->message_type(23);
  static const int CProtoItemSocket_Effect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Effect, socket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Effect, effect_),
  };
  CProtoItemSocket_Effect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CProtoItemSocket_Effect_descriptor_,
      CProtoItemSocket_Effect::default_instance_,
      CProtoItemSocket_Effect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Effect, _has_bits_[0]),
      -1,
      -1,
      sizeof(CProtoItemSocket_Effect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Effect, _internal_metadata_),
      -1);
  CProtoItemSocket_Color_descriptor_ = file->message_type(24);
  static const int CProtoItemSocket_Color_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Color, socket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Color, red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Color, green_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Color, blue_),
  };
  CProtoItemSocket_Color_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CProtoItemSocket_Color_descriptor_,
      CProtoItemSocket_Color::default_instance_,
      CProtoItemSocket_Color_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Color, _has_bits_[0]),
      -1,
      -1,
      sizeof(CProtoItemSocket_Color),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Color, _internal_metadata_),
      -1);
  CProtoItemSocket_Strange_descriptor_ = file->message_type(25);
  static const int CProtoItemSocket_Strange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Strange, socket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Strange, strange_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Strange, strange_value_),
  };
  CProtoItemSocket_Strange_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CProtoItemSocket_Strange_descriptor_,
      CProtoItemSocket_Strange::default_instance_,
      CProtoItemSocket_Strange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Strange, _has_bits_[0]),
      -1,
      -1,
      sizeof(CProtoItemSocket_Strange),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Strange, _internal_metadata_),
      -1);
  CProtoItemSocket_Spectator_descriptor_ = file->message_type(26);
  static const int CProtoItemSocket_Spectator_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Spectator, socket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Spectator, games_viewed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Spectator, corporation_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Spectator, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Spectator, team_id_),
  };
  CProtoItemSocket_Spectator_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CProtoItemSocket_Spectator_descriptor_,
      CProtoItemSocket_Spectator::default_instance_,
      CProtoItemSocket_Spectator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Spectator, _has_bits_[0]),
      -1,
      -1,
      sizeof(CProtoItemSocket_Spectator),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Spectator, _internal_metadata_),
      -1);
  CProtoItemSocket_AssetModifier_descriptor_ = file->message_type(27);
  static const int CProtoItemSocket_AssetModifier_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_AssetModifier, socket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_AssetModifier, asset_modifier_),
  };
  CProtoItemSocket_AssetModifier_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CProtoItemSocket_AssetModifier_descriptor_,
      CProtoItemSocket_AssetModifier::default_instance_,
      CProtoItemSocket_AssetModifier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_AssetModifier, _has_bits_[0]),
      -1,
      -1,
      sizeof(CProtoItemSocket_AssetModifier),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_AssetModifier, _internal_metadata_),
      -1);
  CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY_descriptor_ = file->message_type(28);
  static const int CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY, socket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY, asset_modifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY, anim_modifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY, ability_effect_),
  };
  CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY_descriptor_,
      CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::default_instance_,
      CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY, _has_bits_[0]),
      -1,
      -1,
      sizeof(CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY, _internal_metadata_),
      -1);
  CProtoItemSocket_Autograph_descriptor_ = file->message_type(29);
  static const int CProtoItemSocket_Autograph_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Autograph, socket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Autograph, autograph_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Autograph, autograph_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Autograph, autograph_score_),
  };
  CProtoItemSocket_Autograph_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CProtoItemSocket_Autograph_descriptor_,
      CProtoItemSocket_Autograph::default_instance_,
      CProtoItemSocket_Autograph_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Autograph, _has_bits_[0]),
      -1,
      -1,
      sizeof(CProtoItemSocket_Autograph),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Autograph, _internal_metadata_),
      -1);
  CProtoItemSocket_StaticVisuals_descriptor_ = file->message_type(30);
  static const int CProtoItemSocket_StaticVisuals_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_StaticVisuals, socket_),
  };
  CProtoItemSocket_StaticVisuals_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CProtoItemSocket_StaticVisuals_descriptor_,
      CProtoItemSocket_StaticVisuals::default_instance_,
      CProtoItemSocket_StaticVisuals_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_StaticVisuals, _has_bits_[0]),
      -1,
      -1,
      sizeof(CProtoItemSocket_StaticVisuals),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_StaticVisuals, _internal_metadata_),
      -1);
  CMatchPlayerAbilityUpgrade_descriptor_ = file->message_type(31);
  static const int CMatchPlayerAbilityUpgrade_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchPlayerAbilityUpgrade, ability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchPlayerAbilityUpgrade, time_),
  };
  CMatchPlayerAbilityUpgrade_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMatchPlayerAbilityUpgrade_descriptor_,
      CMatchPlayerAbilityUpgrade::default_instance_,
      CMatchPlayerAbilityUpgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchPlayerAbilityUpgrade, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMatchPlayerAbilityUpgrade),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchPlayerAbilityUpgrade, _internal_metadata_),
      -1);
  CMatchAdditionalUnitInventory_descriptor_ = file->message_type(32);
  static const int CMatchAdditionalUnitInventory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchAdditionalUnitInventory, unit_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchAdditionalUnitInventory, items_),
  };
  CMatchAdditionalUnitInventory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMatchAdditionalUnitInventory_descriptor_,
      CMatchAdditionalUnitInventory::default_instance_,
      CMatchAdditionalUnitInventory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchAdditionalUnitInventory, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMatchAdditionalUnitInventory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchAdditionalUnitInventory, _internal_metadata_),
      -1);
  CMatchHeroSelectEvent_descriptor_ = file->message_type(33);
  static const int CMatchHeroSelectEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchHeroSelectEvent, is_pick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchHeroSelectEvent, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchHeroSelectEvent, hero_id_),
  };
  CMatchHeroSelectEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMatchHeroSelectEvent_descriptor_,
      CMatchHeroSelectEvent::default_instance_,
      CMatchHeroSelectEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchHeroSelectEvent, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMatchHeroSelectEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchHeroSelectEvent, _internal_metadata_),
      -1);
  CMsgDOTAProcessFantasyScheduledEvent_descriptor_ = file->message_type(34);
  static const int CMsgDOTAProcessFantasyScheduledEvent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, reference_data_),
  };
  CMsgDOTAProcessFantasyScheduledEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAProcessFantasyScheduledEvent_descriptor_,
      CMsgDOTAProcessFantasyScheduledEvent::default_instance_,
      CMsgDOTAProcessFantasyScheduledEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAProcessFantasyScheduledEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, _internal_metadata_),
      -1);
  CMsgDOTAHasItemQuery_descriptor_ = file->message_type(35);
  static const int CMsgDOTAHasItemQuery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemQuery, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemQuery, item_id_),
  };
  CMsgDOTAHasItemQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAHasItemQuery_descriptor_,
      CMsgDOTAHasItemQuery::default_instance_,
      CMsgDOTAHasItemQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemQuery, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAHasItemQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemQuery, _internal_metadata_),
      -1);
  CMsgDOTAHasItemResponse_descriptor_ = file->message_type(36);
  static const int CMsgDOTAHasItemResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemResponse, has_item_),
  };
  CMsgDOTAHasItemResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAHasItemResponse_descriptor_,
      CMsgDOTAHasItemResponse::default_instance_,
      CMsgDOTAHasItemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAHasItemResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemResponse, _internal_metadata_),
      -1);
  CMsgDOTAHasItemDefsQuery_descriptor_ = file->message_type(37);
  static const int CMsgDOTAHasItemDefsQuery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemDefsQuery, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemDefsQuery, itemdef_ids_),
  };
  CMsgDOTAHasItemDefsQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAHasItemDefsQuery_descriptor_,
      CMsgDOTAHasItemDefsQuery::default_instance_,
      CMsgDOTAHasItemDefsQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemDefsQuery, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAHasItemDefsQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemDefsQuery, _internal_metadata_),
      -1);
  CMsgDOTAHasItemDefsResponse_descriptor_ = file->message_type(38);
  static const int CMsgDOTAHasItemDefsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemDefsResponse, has_items_),
  };
  CMsgDOTAHasItemDefsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAHasItemDefsResponse_descriptor_,
      CMsgDOTAHasItemDefsResponse::default_instance_,
      CMsgDOTAHasItemDefsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemDefsResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAHasItemDefsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemDefsResponse, _internal_metadata_),
      -1);
  CMsgDOTAConsumeFantasyTicket_descriptor_ = file->message_type(39);
  static const int CMsgDOTAConsumeFantasyTicket_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAConsumeFantasyTicket, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAConsumeFantasyTicket, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAConsumeFantasyTicket, fantasy_league_id_),
  };
  CMsgDOTAConsumeFantasyTicket_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAConsumeFantasyTicket_descriptor_,
      CMsgDOTAConsumeFantasyTicket::default_instance_,
      CMsgDOTAConsumeFantasyTicket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAConsumeFantasyTicket, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAConsumeFantasyTicket),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAConsumeFantasyTicket, _internal_metadata_),
      -1);
  CMsgDOTAConsumeFantasyTicketFailure_descriptor_ = file->message_type(40);
  static const int CMsgDOTAConsumeFantasyTicketFailure_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAConsumeFantasyTicketFailure, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAConsumeFantasyTicketFailure, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAConsumeFantasyTicketFailure, fantasy_league_id_),
  };
  CMsgDOTAConsumeFantasyTicketFailure_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAConsumeFantasyTicketFailure_descriptor_,
      CMsgDOTAConsumeFantasyTicketFailure::default_instance_,
      CMsgDOTAConsumeFantasyTicketFailure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAConsumeFantasyTicketFailure, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAConsumeFantasyTicketFailure),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAConsumeFantasyTicketFailure, _internal_metadata_),
      -1);
  CMsgGCToGCFantasySetMatchLeague_descriptor_ = file->message_type(41);
  static const int CMsgGCToGCFantasySetMatchLeague_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCFantasySetMatchLeague, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCFantasySetMatchLeague, league_id_),
  };
  CMsgGCToGCFantasySetMatchLeague_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgGCToGCFantasySetMatchLeague_descriptor_,
      CMsgGCToGCFantasySetMatchLeague::default_instance_,
      CMsgGCToGCFantasySetMatchLeague_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCFantasySetMatchLeague, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgGCToGCFantasySetMatchLeague),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCFantasySetMatchLeague, _internal_metadata_),
      -1);
  CSODOTAMapLocationState_descriptor_ = file->message_type(42);
  static const int CSODOTAMapLocationState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAMapLocationState, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAMapLocationState, location_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAMapLocationState, completed_),
  };
  CSODOTAMapLocationState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSODOTAMapLocationState_descriptor_,
      CSODOTAMapLocationState::default_instance_,
      CSODOTAMapLocationState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAMapLocationState, _has_bits_[0]),
      -1,
      -1,
      sizeof(CSODOTAMapLocationState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAMapLocationState, _internal_metadata_),
      -1);
  CMsgNexonPartnerUpdate_descriptor_ = file->message_type(43);
  static const int CMsgNexonPartnerUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNexonPartnerUpdate, messagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNexonPartnerUpdate, timeremaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNexonPartnerUpdate, terminate_),
  };
  CMsgNexonPartnerUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgNexonPartnerUpdate_descriptor_,
      CMsgNexonPartnerUpdate::default_instance_,
      CMsgNexonPartnerUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNexonPartnerUpdate, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgNexonPartnerUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNexonPartnerUpdate, _internal_metadata_),
      -1);
  CMsgMakeOffering_descriptor_ = file->message_type(44);
  static const int CMsgMakeOffering_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMakeOffering, item_id_),
  };
  CMsgMakeOffering_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgMakeOffering_descriptor_,
      CMsgMakeOffering::default_instance_,
      CMsgMakeOffering_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMakeOffering, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgMakeOffering),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMakeOffering, _internal_metadata_),
      -1);
  CMsgRequestOfferings_descriptor_ = file->message_type(45);
  static const int CMsgRequestOfferings_offsets_[1] = {
  };
  CMsgRequestOfferings_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgRequestOfferings_descriptor_,
      CMsgRequestOfferings::default_instance_,
      CMsgRequestOfferings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestOfferings, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgRequestOfferings),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestOfferings, _internal_metadata_),
      -1);
  CMsgRequestOfferingsResponse_descriptor_ = file->message_type(46);
  static const int CMsgRequestOfferingsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestOfferingsResponse, offerings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestOfferingsResponse, completed_),
  };
  CMsgRequestOfferingsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgRequestOfferingsResponse_descriptor_,
      CMsgRequestOfferingsResponse::default_instance_,
      CMsgRequestOfferingsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestOfferingsResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgRequestOfferingsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestOfferingsResponse, _internal_metadata_),
      -1);
  CMsgRequestOfferingsResponse_NewYearsOffering_descriptor_ = CMsgRequestOfferingsResponse_descriptor_->nested_type(0);
  static const int CMsgRequestOfferingsResponse_NewYearsOffering_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestOfferingsResponse_NewYearsOffering, def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestOfferingsResponse_NewYearsOffering, item_id_),
  };
  CMsgRequestOfferingsResponse_NewYearsOffering_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgRequestOfferingsResponse_NewYearsOffering_descriptor_,
      CMsgRequestOfferingsResponse_NewYearsOffering::default_instance_,
      CMsgRequestOfferingsResponse_NewYearsOffering_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestOfferingsResponse_NewYearsOffering, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgRequestOfferingsResponse_NewYearsOffering),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestOfferingsResponse_NewYearsOffering, _internal_metadata_),
      -1);
  CMsgLeagueAdminList_descriptor_ = file->message_type(47);
  static const int CMsgLeagueAdminList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeagueAdminList, account_ids_),
  };
  CMsgLeagueAdminList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgLeagueAdminList_descriptor_,
      CMsgLeagueAdminList::default_instance_,
      CMsgLeagueAdminList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeagueAdminList, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgLeagueAdminList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeagueAdminList, _internal_metadata_),
      -1);
  CMsgPerfectWorldUserLookupRequest_descriptor_ = file->message_type(48);
  static const int CMsgPerfectWorldUserLookupRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPerfectWorldUserLookupRequest, user_name_),
  };
  CMsgPerfectWorldUserLookupRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgPerfectWorldUserLookupRequest_descriptor_,
      CMsgPerfectWorldUserLookupRequest::default_instance_,
      CMsgPerfectWorldUserLookupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPerfectWorldUserLookupRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgPerfectWorldUserLookupRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPerfectWorldUserLookupRequest, _internal_metadata_),
      -1);
  CMsgPerfectWorldUserLookupResponse_descriptor_ = file->message_type(49);
  static const int CMsgPerfectWorldUserLookupResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPerfectWorldUserLookupResponse, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPerfectWorldUserLookupResponse, account_id_),
  };
  CMsgPerfectWorldUserLookupResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgPerfectWorldUserLookupResponse_descriptor_,
      CMsgPerfectWorldUserLookupResponse::default_instance_,
      CMsgPerfectWorldUserLookupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPerfectWorldUserLookupResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgPerfectWorldUserLookupResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPerfectWorldUserLookupResponse, _internal_metadata_),
      -1);
  CMsgPerfectWorldUserLookupResponse_EResultCode_descriptor_ = CMsgPerfectWorldUserLookupResponse_descriptor_->enum_type(0);
  CCompendiumTimestampedData_descriptor_ = file->message_type(50);
  static const int CCompendiumTimestampedData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumTimestampedData, game_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumTimestampedData, gpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumTimestampedData, xpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumTimestampedData, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumTimestampedData, deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumTimestampedData, item_purchases_),
  };
  CCompendiumTimestampedData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CCompendiumTimestampedData_descriptor_,
      CCompendiumTimestampedData::default_instance_,
      CCompendiumTimestampedData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumTimestampedData, _has_bits_[0]),
      -1,
      -1,
      sizeof(CCompendiumTimestampedData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumTimestampedData, _internal_metadata_),
      -1);
  CCompendiumGameTimeline_descriptor_ = file->message_type(51);
  static const int CCompendiumGameTimeline_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumGameTimeline, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumGameTimeline, tags_),
  };
  CCompendiumGameTimeline_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CCompendiumGameTimeline_descriptor_,
      CCompendiumGameTimeline::default_instance_,
      CCompendiumGameTimeline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumGameTimeline, _has_bits_[0]),
      -1,
      -1,
      sizeof(CCompendiumGameTimeline),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumGameTimeline, _internal_metadata_),
      -1);
  CCompendiumGameList_descriptor_ = file->message_type(52);
  static const int CCompendiumGameList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumGameList, games_),
  };
  CCompendiumGameList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CCompendiumGameList_descriptor_,
      CCompendiumGameList::default_instance_,
      CCompendiumGameList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumGameList, _has_bits_[0]),
      -1,
      -1,
      sizeof(CCompendiumGameList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumGameList, _internal_metadata_),
      -1);
  CAdditionalEquipSlot_descriptor_ = file->message_type(53);
  static const int CAdditionalEquipSlot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlot, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlot, slot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlot, def_index_),
  };
  CAdditionalEquipSlot_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CAdditionalEquipSlot_descriptor_,
      CAdditionalEquipSlot::default_instance_,
      CAdditionalEquipSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlot, _has_bits_[0]),
      -1,
      -1,
      sizeof(CAdditionalEquipSlot),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlot, _internal_metadata_),
      -1);
  CMsgDOTARedeemItem_descriptor_ = file->message_type(54);
  static const int CMsgDOTARedeemItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARedeemItem, currency_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARedeemItem, purchase_def_),
  };
  CMsgDOTARedeemItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTARedeemItem_descriptor_,
      CMsgDOTARedeemItem::default_instance_,
      CMsgDOTARedeemItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARedeemItem, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTARedeemItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARedeemItem, _internal_metadata_),
      -1);
  CMsgDOTARedeemItemResponse_descriptor_ = file->message_type(55);
  static const int CMsgDOTARedeemItemResponse_offsets_[1] = {
  };
  CMsgDOTARedeemItemResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTARedeemItemResponse_descriptor_,
      CMsgDOTARedeemItemResponse::default_instance_,
      CMsgDOTARedeemItemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARedeemItemResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTARedeemItemResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARedeemItemResponse, _internal_metadata_),
      -1);
  CMsgDOTACombatLogEntry_descriptor_ = file->message_type(56);
  static const int CMsgDOTACombatLogEntry_offsets_[39] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, target_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, target_source_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, attacker_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, damage_source_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, inflictor_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_attacker_illusion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_attacker_hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_target_illusion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_target_hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_visible_radiant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_visible_dire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, stun_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, slow_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_ability_toggle_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_ability_toggle_off_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, ability_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, location_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, location_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, gold_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, timestamp_raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, modifier_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, xp_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, last_hits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, attacker_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, target_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, obs_wards_placed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, assist_player0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, assist_player1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, assist_player2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, assist_player3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, stack_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, hidden_modifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_target_building_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, neutral_camp_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, rune_type_),
  };
  CMsgDOTACombatLogEntry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTACombatLogEntry_descriptor_,
      CMsgDOTACombatLogEntry::default_instance_,
      CMsgDOTACombatLogEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTACombatLogEntry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, _internal_metadata_),
      -1);
  CMsgDOTAProfileCard_descriptor_ = file->message_type(57);
  static const int CMsgDOTAProfileCard_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard, background_def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard, slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard, badge_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard, event_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard, event_id_),
  };
  CMsgDOTAProfileCard_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAProfileCard_descriptor_,
      CMsgDOTAProfileCard::default_instance_,
      CMsgDOTAProfileCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAProfileCard),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard, _internal_metadata_),
      -1);
  CMsgDOTAProfileCard_Slot_descriptor_ = CMsgDOTAProfileCard_descriptor_->nested_type(0);
  static const int CMsgDOTAProfileCard_Slot_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, slot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, trophy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, emoticon_),
  };
  CMsgDOTAProfileCard_Slot_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAProfileCard_Slot_descriptor_,
      CMsgDOTAProfileCard_Slot::default_instance_,
      CMsgDOTAProfileCard_Slot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAProfileCard_Slot),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, _internal_metadata_),
      -1);
  CMsgDOTAProfileCard_Slot_Trophy_descriptor_ = CMsgDOTAProfileCard_Slot_descriptor_->nested_type(0);
  static const int CMsgDOTAProfileCard_Slot_Trophy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Trophy, trophy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Trophy, trophy_score_),
  };
  CMsgDOTAProfileCard_Slot_Trophy_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAProfileCard_Slot_Trophy_descriptor_,
      CMsgDOTAProfileCard_Slot_Trophy::default_instance_,
      CMsgDOTAProfileCard_Slot_Trophy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Trophy, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAProfileCard_Slot_Trophy),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Trophy, _internal_metadata_),
      -1);
  CMsgDOTAProfileCard_Slot_Stat_descriptor_ = CMsgDOTAProfileCard_Slot_descriptor_->nested_type(1);
  static const int CMsgDOTAProfileCard_Slot_Stat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Stat, stat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Stat, stat_score_),
  };
  CMsgDOTAProfileCard_Slot_Stat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAProfileCard_Slot_Stat_descriptor_,
      CMsgDOTAProfileCard_Slot_Stat::default_instance_,
      CMsgDOTAProfileCard_Slot_Stat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Stat, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAProfileCard_Slot_Stat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Stat, _internal_metadata_),
      -1);
  CMsgDOTAProfileCard_Slot_Item_descriptor_ = CMsgDOTAProfileCard_Slot_descriptor_->nested_type(2);
  static const int CMsgDOTAProfileCard_Slot_Item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Item, serialized_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Item, item_id_),
  };
  CMsgDOTAProfileCard_Slot_Item_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAProfileCard_Slot_Item_descriptor_,
      CMsgDOTAProfileCard_Slot_Item::default_instance_,
      CMsgDOTAProfileCard_Slot_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Item, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAProfileCard_Slot_Item),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Item, _internal_metadata_),
      -1);
  CMsgDOTAProfileCard_Slot_Hero_descriptor_ = CMsgDOTAProfileCard_Slot_descriptor_->nested_type(3);
  static const int CMsgDOTAProfileCard_Slot_Hero_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Hero, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Hero, hero_wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Hero, hero_losses_),
  };
  CMsgDOTAProfileCard_Slot_Hero_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAProfileCard_Slot_Hero_descriptor_,
      CMsgDOTAProfileCard_Slot_Hero::default_instance_,
      CMsgDOTAProfileCard_Slot_Hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Hero, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAProfileCard_Slot_Hero),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Hero, _internal_metadata_),
      -1);
  CMsgDOTAProfileCard_Slot_Emoticon_descriptor_ = CMsgDOTAProfileCard_Slot_descriptor_->nested_type(4);
  static const int CMsgDOTAProfileCard_Slot_Emoticon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Emoticon, emoticon_id_),
  };
  CMsgDOTAProfileCard_Slot_Emoticon_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAProfileCard_Slot_Emoticon_descriptor_,
      CMsgDOTAProfileCard_Slot_Emoticon::default_instance_,
      CMsgDOTAProfileCard_Slot_Emoticon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Emoticon, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAProfileCard_Slot_Emoticon),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Emoticon, _internal_metadata_),
      -1);
  CMsgDOTAProfileCard_EStatID_descriptor_ = CMsgDOTAProfileCard_descriptor_->enum_type(0);
  CMsgGCToClientNewBloomTimingUpdated_descriptor_ = file->message_type(58);
  static const int CMsgGCToClientNewBloomTimingUpdated_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientNewBloomTimingUpdated, is_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientNewBloomTimingUpdated, next_transition_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientNewBloomTimingUpdated, bonus_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientNewBloomTimingUpdated, standby_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientNewBloomTimingUpdated, transition_time_),
  };
  CMsgGCToClientNewBloomTimingUpdated_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgGCToClientNewBloomTimingUpdated_descriptor_,
      CMsgGCToClientNewBloomTimingUpdated::default_instance_,
      CMsgGCToClientNewBloomTimingUpdated_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientNewBloomTimingUpdated, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgGCToClientNewBloomTimingUpdated),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientNewBloomTimingUpdated, _internal_metadata_),
      -1);
  CSODOTAPlayerChallenge_descriptor_ = file->message_type(59);
  static const int CSODOTAPlayerChallenge_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, slot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, challenge_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, int_param_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, int_param_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, created_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, completed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, sequence_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, challenge_tier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, flags_),
  };
  CSODOTAPlayerChallenge_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSODOTAPlayerChallenge_descriptor_,
      CSODOTAPlayerChallenge::default_instance_,
      CSODOTAPlayerChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, _has_bits_[0]),
      -1,
      -1,
      sizeof(CSODOTAPlayerChallenge),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, _internal_metadata_),
      -1);
  CSODOTAPlayerChallenge_EFlags_descriptor_ = CSODOTAPlayerChallenge_descriptor_->enum_type(0);
  CMsgClientToGCRerollPlayerChallenge_descriptor_ = file->message_type(60);
  static const int CMsgClientToGCRerollPlayerChallenge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCRerollPlayerChallenge, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCRerollPlayerChallenge, sequence_id_),
  };
  CMsgClientToGCRerollPlayerChallenge_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgClientToGCRerollPlayerChallenge_descriptor_,
      CMsgClientToGCRerollPlayerChallenge::default_instance_,
      CMsgClientToGCRerollPlayerChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCRerollPlayerChallenge, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgClientToGCRerollPlayerChallenge),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCRerollPlayerChallenge, _internal_metadata_),
      -1);
  CMsgGCRerollPlayerChallengeResponse_descriptor_ = file->message_type(61);
  static const int CMsgGCRerollPlayerChallengeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRerollPlayerChallengeResponse, result_),
  };
  CMsgGCRerollPlayerChallengeResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgGCRerollPlayerChallengeResponse_descriptor_,
      CMsgGCRerollPlayerChallengeResponse::default_instance_,
      CMsgGCRerollPlayerChallengeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRerollPlayerChallengeResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgGCRerollPlayerChallengeResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRerollPlayerChallengeResponse, _internal_metadata_),
      -1);
  CMsgGCRerollPlayerChallengeResponse_EResult_descriptor_ = CMsgGCRerollPlayerChallengeResponse_descriptor_->enum_type(0);
  CMsgGCTopCustomGamesList_descriptor_ = file->message_type(62);
  static const int CMsgGCTopCustomGamesList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCTopCustomGamesList, top_custom_games_),
  };
  CMsgGCTopCustomGamesList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgGCTopCustomGamesList_descriptor_,
      CMsgGCTopCustomGamesList::default_instance_,
      CMsgGCTopCustomGamesList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCTopCustomGamesList, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgGCTopCustomGamesList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCTopCustomGamesList, _internal_metadata_),
      -1);
  CMsgDOTARealtimeGameStats_descriptor_ = file->message_type(63);
  static const int CMsgDOTARealtimeGameStats_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats, match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats, teams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats, buildings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats, graph_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats, delta_frame_),
  };
  CMsgDOTARealtimeGameStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_descriptor_,
      CMsgDOTARealtimeGameStats::default_instance_,
      CMsgDOTARealtimeGameStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTARealtimeGameStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats, _internal_metadata_),
      -1);
  CMsgDOTARealtimeGameStats_TeamDetails_descriptor_ = CMsgDOTARealtimeGameStats_descriptor_->nested_type(0);
  static const int CMsgDOTARealtimeGameStats_TeamDetails_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, team_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, team_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, only_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, cheers_),
  };
  CMsgDOTARealtimeGameStats_TeamDetails_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_TeamDetails_descriptor_,
      CMsgDOTARealtimeGameStats_TeamDetails::default_instance_,
      CMsgDOTARealtimeGameStats_TeamDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTARealtimeGameStats_TeamDetails),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, _internal_metadata_),
      -1);
  CMsgDOTARealtimeGameStats_ItemDetails_descriptor_ = CMsgDOTARealtimeGameStats_descriptor_->nested_type(1);
  static const int CMsgDOTARealtimeGameStats_ItemDetails_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_ItemDetails, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_ItemDetails, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_ItemDetails, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_ItemDetails, sold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_ItemDetails, stackcount_),
  };
  CMsgDOTARealtimeGameStats_ItemDetails_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_ItemDetails_descriptor_,
      CMsgDOTARealtimeGameStats_ItemDetails::default_instance_,
      CMsgDOTARealtimeGameStats_ItemDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_ItemDetails, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTARealtimeGameStats_ItemDetails),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_ItemDetails, _internal_metadata_),
      -1);
  CMsgDOTARealtimeGameStats_AbilityDetails_descriptor_ = CMsgDOTARealtimeGameStats_descriptor_->nested_type(2);
  static const int CMsgDOTARealtimeGameStats_AbilityDetails_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityDetails, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityDetails, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityDetails, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityDetails, cooldown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityDetails, cooldown_max_),
  };
  CMsgDOTARealtimeGameStats_AbilityDetails_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_AbilityDetails_descriptor_,
      CMsgDOTARealtimeGameStats_AbilityDetails::default_instance_,
      CMsgDOTARealtimeGameStats_AbilityDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityDetails, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTARealtimeGameStats_AbilityDetails),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityDetails, _internal_metadata_),
      -1);
  CMsgDOTARealtimeGameStats_HeroToHeroStats_descriptor_ = CMsgDOTARealtimeGameStats_descriptor_->nested_type(3);
  static const int CMsgDOTARealtimeGameStats_HeroToHeroStats_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_HeroToHeroStats, victimid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_HeroToHeroStats, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_HeroToHeroStats, assists_),
  };
  CMsgDOTARealtimeGameStats_HeroToHeroStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_HeroToHeroStats_descriptor_,
      CMsgDOTARealtimeGameStats_HeroToHeroStats::default_instance_,
      CMsgDOTARealtimeGameStats_HeroToHeroStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_HeroToHeroStats, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTARealtimeGameStats_HeroToHeroStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_HeroToHeroStats, _internal_metadata_),
      -1);
  CMsgDOTARealtimeGameStats_AbilityList_descriptor_ = CMsgDOTARealtimeGameStats_descriptor_->nested_type(4);
  static const int CMsgDOTARealtimeGameStats_AbilityList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityList, id_),
  };
  CMsgDOTARealtimeGameStats_AbilityList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_AbilityList_descriptor_,
      CMsgDOTARealtimeGameStats_AbilityList::default_instance_,
      CMsgDOTARealtimeGameStats_AbilityList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityList, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTARealtimeGameStats_AbilityList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityList, _internal_metadata_),
      -1);
  CMsgDOTARealtimeGameStats_PlayerDetails_descriptor_ = CMsgDOTARealtimeGameStats_descriptor_->nested_type(5);
  static const int CMsgDOTARealtimeGameStats_PlayerDetails_offsets_[49] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, healthpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, maxhealthpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, healthregenrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, manapoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, maxmanapoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, manaregenrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, base_strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, base_agility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, base_intelligence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, base_armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, base_movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, base_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, agility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, intelligence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, hero_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, tower_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, abilities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, kill_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, death_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, assists_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, denies_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, lh_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, hero_healing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, gold_per_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, xp_per_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, net_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, respawn_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, ultimate_cooldown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, has_buyback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, stashitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, itemshoppinglist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, levelpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, hero_to_hero_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, has_ultimate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, has_ultimate_mana_),
  };
  CMsgDOTARealtimeGameStats_PlayerDetails_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_PlayerDetails_descriptor_,
      CMsgDOTARealtimeGameStats_PlayerDetails::default_instance_,
      CMsgDOTARealtimeGameStats_PlayerDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTARealtimeGameStats_PlayerDetails),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, _internal_metadata_),
      -1);
  CMsgDOTARealtimeGameStats_BuildingDetails_descriptor_ = CMsgDOTARealtimeGameStats_descriptor_->nested_type(6);
  static const int CMsgDOTARealtimeGameStats_BuildingDetails_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, tier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, y_),
  };
  CMsgDOTARealtimeGameStats_BuildingDetails_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_BuildingDetails_descriptor_,
      CMsgDOTARealtimeGameStats_BuildingDetails::default_instance_,
      CMsgDOTARealtimeGameStats_BuildingDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTARealtimeGameStats_BuildingDetails),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, _internal_metadata_),
      -1);
  CMsgDOTARealtimeGameStats_KillDetails_descriptor_ = CMsgDOTARealtimeGameStats_descriptor_->nested_type(7);
  static const int CMsgDOTARealtimeGameStats_KillDetails_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_KillDetails, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_KillDetails, death_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_KillDetails, killer_player_id_),
  };
  CMsgDOTARealtimeGameStats_KillDetails_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_KillDetails_descriptor_,
      CMsgDOTARealtimeGameStats_KillDetails::default_instance_,
      CMsgDOTARealtimeGameStats_KillDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_KillDetails, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTARealtimeGameStats_KillDetails),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_KillDetails, _internal_metadata_),
      -1);
  CMsgDOTARealtimeGameStats_BroadcasterDetails_descriptor_ = CMsgDOTARealtimeGameStats_descriptor_->nested_type(8);
  static const int CMsgDOTARealtimeGameStats_BroadcasterDetails_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BroadcasterDetails, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BroadcasterDetails, selected_hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BroadcasterDetails, selected_graph_),
  };
  CMsgDOTARealtimeGameStats_BroadcasterDetails_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_BroadcasterDetails_descriptor_,
      CMsgDOTARealtimeGameStats_BroadcasterDetails::default_instance_,
      CMsgDOTARealtimeGameStats_BroadcasterDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BroadcasterDetails, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTARealtimeGameStats_BroadcasterDetails),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BroadcasterDetails, _internal_metadata_),
      -1);
  CMsgDOTARealtimeGameStats_PickBanDetails_descriptor_ = CMsgDOTARealtimeGameStats_descriptor_->nested_type(9);
  static const int CMsgDOTARealtimeGameStats_PickBanDetails_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PickBanDetails, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PickBanDetails, team_),
  };
  CMsgDOTARealtimeGameStats_PickBanDetails_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_PickBanDetails_descriptor_,
      CMsgDOTARealtimeGameStats_PickBanDetails::default_instance_,
      CMsgDOTARealtimeGameStats_PickBanDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PickBanDetails, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTARealtimeGameStats_PickBanDetails),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PickBanDetails, _internal_metadata_),
      -1);
  CMsgDOTARealtimeGameStats_MatchDetails_descriptor_ = CMsgDOTARealtimeGameStats_descriptor_->nested_type(10);
  static const int CMsgDOTARealtimeGameStats_MatchDetails_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, server_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, time_of_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, is_nightstalker_night_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, game_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, teamid_radiant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, teamid_dire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, picks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, bans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, broadcasters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, single_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, cheers_peak_),
  };
  CMsgDOTARealtimeGameStats_MatchDetails_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_MatchDetails_descriptor_,
      CMsgDOTARealtimeGameStats_MatchDetails::default_instance_,
      CMsgDOTARealtimeGameStats_MatchDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTARealtimeGameStats_MatchDetails),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, _internal_metadata_),
      -1);
  CMsgDOTARealtimeGameStats_GraphData_descriptor_ = CMsgDOTARealtimeGameStats_descriptor_->nested_type(11);
  static const int CMsgDOTARealtimeGameStats_GraphData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData, graph_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData, graph_xp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData, graph_kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData, graph_tower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData, graph_rax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData, team_loc_stats_),
  };
  CMsgDOTARealtimeGameStats_GraphData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_GraphData_descriptor_,
      CMsgDOTARealtimeGameStats_GraphData::default_instance_,
      CMsgDOTARealtimeGameStats_GraphData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTARealtimeGameStats_GraphData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData, _internal_metadata_),
      -1);
  CMsgDOTARealtimeGameStats_GraphData_LocationStats_descriptor_ = CMsgDOTARealtimeGameStats_GraphData_descriptor_->nested_type(0);
  static const int CMsgDOTARealtimeGameStats_GraphData_LocationStats_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData_LocationStats, stats_),
  };
  CMsgDOTARealtimeGameStats_GraphData_LocationStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_GraphData_LocationStats_descriptor_,
      CMsgDOTARealtimeGameStats_GraphData_LocationStats::default_instance_,
      CMsgDOTARealtimeGameStats_GraphData_LocationStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData_LocationStats, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTARealtimeGameStats_GraphData_LocationStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData_LocationStats, _internal_metadata_),
      -1);
  CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_descriptor_ = CMsgDOTARealtimeGameStats_GraphData_descriptor_->nested_type(1);
  static const int CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats, loc_stats_),
  };
  CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_descriptor_,
      CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::default_instance_,
      CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats, _internal_metadata_),
      -1);
  CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor_ = CMsgDOTARealtimeGameStats_GraphData_descriptor_->enum_type(0);
  CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor_ = CMsgDOTARealtimeGameStats_GraphData_descriptor_->enum_type(1);
  CMsgDOTARealtimeGameStatsTerse_descriptor_ = file->message_type(64);
  static const int CMsgDOTARealtimeGameStatsTerse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse, match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse, teams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse, buildings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse, graph_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse, delta_frame_),
  };
  CMsgDOTARealtimeGameStatsTerse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTARealtimeGameStatsTerse_descriptor_,
      CMsgDOTARealtimeGameStatsTerse::default_instance_,
      CMsgDOTARealtimeGameStatsTerse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTARealtimeGameStatsTerse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse, _internal_metadata_),
      -1);
  CMsgDOTARealtimeGameStatsTerse_TeamDetails_descriptor_ = CMsgDOTARealtimeGameStatsTerse_descriptor_->nested_type(0);
  static const int CMsgDOTARealtimeGameStatsTerse_TeamDetails_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_TeamDetails, team_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_TeamDetails, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_TeamDetails, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_TeamDetails, team_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_TeamDetails, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_TeamDetails, players_),
  };
  CMsgDOTARealtimeGameStatsTerse_TeamDetails_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTARealtimeGameStatsTerse_TeamDetails_descriptor_,
      CMsgDOTARealtimeGameStatsTerse_TeamDetails::default_instance_,
      CMsgDOTARealtimeGameStatsTerse_TeamDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_TeamDetails, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTARealtimeGameStatsTerse_TeamDetails),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_TeamDetails, _internal_metadata_),
      -1);
  CMsgDOTARealtimeGameStatsTerse_PlayerDetails_descriptor_ = CMsgDOTARealtimeGameStatsTerse_descriptor_->nested_type(1);
  static const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, kill_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, death_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, assists_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, denies_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, lh_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, y_),
  };
  CMsgDOTARealtimeGameStatsTerse_PlayerDetails_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTARealtimeGameStatsTerse_PlayerDetails_descriptor_,
      CMsgDOTARealtimeGameStatsTerse_PlayerDetails::default_instance_,
      CMsgDOTARealtimeGameStatsTerse_PlayerDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTARealtimeGameStatsTerse_PlayerDetails),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, _internal_metadata_),
      -1);
  CMsgDOTARealtimeGameStatsTerse_BuildingDetails_descriptor_ = CMsgDOTARealtimeGameStatsTerse_descriptor_->nested_type(2);
  static const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, tier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, y_),
  };
  CMsgDOTARealtimeGameStatsTerse_BuildingDetails_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTARealtimeGameStatsTerse_BuildingDetails_descriptor_,
      CMsgDOTARealtimeGameStatsTerse_BuildingDetails::default_instance_,
      CMsgDOTARealtimeGameStatsTerse_BuildingDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTARealtimeGameStatsTerse_BuildingDetails),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, _internal_metadata_),
      -1);
  CMsgDOTARealtimeGameStatsTerse_MatchDetails_descriptor_ = CMsgDOTARealtimeGameStatsTerse_descriptor_->nested_type(3);
  static const int CMsgDOTARealtimeGameStatsTerse_MatchDetails_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, server_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, game_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, steam_broadcaster_account_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, league_id_),
  };
  CMsgDOTARealtimeGameStatsTerse_MatchDetails_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTARealtimeGameStatsTerse_MatchDetails_descriptor_,
      CMsgDOTARealtimeGameStatsTerse_MatchDetails::default_instance_,
      CMsgDOTARealtimeGameStatsTerse_MatchDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTARealtimeGameStatsTerse_MatchDetails),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, _internal_metadata_),
      -1);
  CMsgDOTARealtimeGameStatsTerse_GraphData_descriptor_ = CMsgDOTARealtimeGameStatsTerse_descriptor_->nested_type(4);
  static const int CMsgDOTARealtimeGameStatsTerse_GraphData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_GraphData, graph_gold_),
  };
  CMsgDOTARealtimeGameStatsTerse_GraphData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTARealtimeGameStatsTerse_GraphData_descriptor_,
      CMsgDOTARealtimeGameStatsTerse_GraphData::default_instance_,
      CMsgDOTARealtimeGameStatsTerse_GraphData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_GraphData, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTARealtimeGameStatsTerse_GraphData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_GraphData, _internal_metadata_),
      -1);
  EDOTAGCMsg_descriptor_ = file->enum_type(0);
  DOTA_GameMode_descriptor_ = file->enum_type(1);
  DOTA_GameState_descriptor_ = file->enum_type(2);
  DOTA_GC_TEAM_descriptor_ = file->enum_type(3);
  DOTA_CM_PICK_descriptor_ = file->enum_type(4);
  DOTAConnectionState_t_descriptor_ = file->enum_type(5);
  DOTALeaverStatus_t_descriptor_ = file->enum_type(6);
  DOTALowPriorityBanType_descriptor_ = file->enum_type(7);
  DOTALobbyReadyState_descriptor_ = file->enum_type(8);
  DOTAGameVersion_descriptor_ = file->enum_type(9);
  DOTAJoinLobbyResult_descriptor_ = file->enum_type(10);
  DOTAMatchVote_descriptor_ = file->enum_type(11);
  DOTA_LobbyMemberXPBonus_descriptor_ = file->enum_type(12);
  DOTALobbyVisibility_descriptor_ = file->enum_type(13);
  EDOTAPlayerMMRType_descriptor_ = file->enum_type(14);
  MatchType_descriptor_ = file->enum_type(15);
  DOTABotDifficulty_descriptor_ = file->enum_type(16);
  MatchLanguages_descriptor_ = file->enum_type(17);
  ETournamentTemplate_descriptor_ = file->enum_type(18);
  ETournamentType_descriptor_ = file->enum_type(19);
  EEvent_descriptor_ = file->enum_type(20);
  LobbyDotaTVDelay_descriptor_ = file->enum_type(21);
  EMatchOutcome_descriptor_ = file->enum_type(22);
  EDOTAGCSessionNeed_descriptor_ = file->enum_type(23);
  Fantasy_Roles_descriptor_ = file->enum_type(24);
  Fantasy_Team_Slots_descriptor_ = file->enum_type(25);
  Fantasy_Selection_Mode_descriptor_ = file->enum_type(26);
  DOTA_TournamentEvents_descriptor_ = file->enum_type(27);
  DOTA_COMBATLOG_TYPES_descriptor_ = file->enum_type(28);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSODOTAGameAccountClient_descriptor_, &CSODOTAGameAccountClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSODOTAPartyMember_descriptor_, &CSODOTAPartyMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSODOTAParty_descriptor_, &CSODOTAParty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSODOTAPartyInvite_descriptor_, &CSODOTAPartyInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSODOTAPartyInvite_PartyMember_descriptor_, &CSODOTAPartyInvite_PartyMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSODOTALobbyInvite_descriptor_, &CSODOTALobbyInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSODOTALobbyInvite_LobbyMember_descriptor_, &CSODOTALobbyInvite_LobbyMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientHardwareSpecs_descriptor_, &CDOTAClientHardwareSpecs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTASaveGame_descriptor_, &CDOTASaveGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTASaveGame_Player_descriptor_, &CDOTASaveGame_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTASaveGame_SaveInstance_descriptor_, &CDOTASaveGame_SaveInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTASaveGame_SaveInstance_PlayerPositions_descriptor_, &CDOTASaveGame_SaveInstance_PlayerPositions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgLeaverState_descriptor_, &CMsgLeaverState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTALobbyMember_descriptor_, &CDOTALobbyMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTALobbyMember_CDOTALobbyMemberXPBonus_descriptor_, &CDOTALobbyMember_CDOTALobbyMemberXPBonus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CLobbyTeamDetails_descriptor_, &CLobbyTeamDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CLobbyTimedRewardDetails_descriptor_, &CLobbyTimedRewardDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CLobbyBroadcastChannelInfo_descriptor_, &CLobbyBroadcastChannelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSODOTALobby_descriptor_, &CSODOTALobby::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSODOTALobby_CExtraMsg_descriptor_, &CSODOTALobby_CExtraMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgLobbyEventPoints_descriptor_, &CMsgLobbyEventPoints::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgLobbyEventPoints_AccountPoints_descriptor_, &CMsgLobbyEventPoints_AccountPoints::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAGenericResult_descriptor_, &CMsgDOTAGenericResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTABroadcastNotification_descriptor_, &CMsgDOTABroadcastNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAPCBangTimedReward_descriptor_, &CMsgDOTAPCBangTimedReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CAttribute_String_descriptor_, &CAttribute_String::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CAttribute_ItemDynamicRecipeComponent_descriptor_, &CAttribute_ItemDynamicRecipeComponent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CProtoItemHeroStatue_descriptor_, &CProtoItemHeroStatue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CProtoItemTeamShowcase_descriptor_, &CProtoItemTeamShowcase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CProtoItemSocket_descriptor_, &CProtoItemSocket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CProtoItemSocket_Empty_descriptor_, &CProtoItemSocket_Empty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CProtoItemSocket_Effect_descriptor_, &CProtoItemSocket_Effect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CProtoItemSocket_Color_descriptor_, &CProtoItemSocket_Color::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CProtoItemSocket_Strange_descriptor_, &CProtoItemSocket_Strange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CProtoItemSocket_Spectator_descriptor_, &CProtoItemSocket_Spectator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CProtoItemSocket_AssetModifier_descriptor_, &CProtoItemSocket_AssetModifier::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY_descriptor_, &CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CProtoItemSocket_Autograph_descriptor_, &CProtoItemSocket_Autograph::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CProtoItemSocket_StaticVisuals_descriptor_, &CProtoItemSocket_StaticVisuals::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMatchPlayerAbilityUpgrade_descriptor_, &CMatchPlayerAbilityUpgrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMatchAdditionalUnitInventory_descriptor_, &CMatchAdditionalUnitInventory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMatchHeroSelectEvent_descriptor_, &CMatchHeroSelectEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAProcessFantasyScheduledEvent_descriptor_, &CMsgDOTAProcessFantasyScheduledEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAHasItemQuery_descriptor_, &CMsgDOTAHasItemQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAHasItemResponse_descriptor_, &CMsgDOTAHasItemResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAHasItemDefsQuery_descriptor_, &CMsgDOTAHasItemDefsQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAHasItemDefsResponse_descriptor_, &CMsgDOTAHasItemDefsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAConsumeFantasyTicket_descriptor_, &CMsgDOTAConsumeFantasyTicket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAConsumeFantasyTicketFailure_descriptor_, &CMsgDOTAConsumeFantasyTicketFailure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgGCToGCFantasySetMatchLeague_descriptor_, &CMsgGCToGCFantasySetMatchLeague::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSODOTAMapLocationState_descriptor_, &CSODOTAMapLocationState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgNexonPartnerUpdate_descriptor_, &CMsgNexonPartnerUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgMakeOffering_descriptor_, &CMsgMakeOffering::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgRequestOfferings_descriptor_, &CMsgRequestOfferings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgRequestOfferingsResponse_descriptor_, &CMsgRequestOfferingsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgRequestOfferingsResponse_NewYearsOffering_descriptor_, &CMsgRequestOfferingsResponse_NewYearsOffering::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgLeagueAdminList_descriptor_, &CMsgLeagueAdminList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgPerfectWorldUserLookupRequest_descriptor_, &CMsgPerfectWorldUserLookupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgPerfectWorldUserLookupResponse_descriptor_, &CMsgPerfectWorldUserLookupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CCompendiumTimestampedData_descriptor_, &CCompendiumTimestampedData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CCompendiumGameTimeline_descriptor_, &CCompendiumGameTimeline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CCompendiumGameList_descriptor_, &CCompendiumGameList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CAdditionalEquipSlot_descriptor_, &CAdditionalEquipSlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTARedeemItem_descriptor_, &CMsgDOTARedeemItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTARedeemItemResponse_descriptor_, &CMsgDOTARedeemItemResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTACombatLogEntry_descriptor_, &CMsgDOTACombatLogEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAProfileCard_descriptor_, &CMsgDOTAProfileCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAProfileCard_Slot_descriptor_, &CMsgDOTAProfileCard_Slot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAProfileCard_Slot_Trophy_descriptor_, &CMsgDOTAProfileCard_Slot_Trophy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAProfileCard_Slot_Stat_descriptor_, &CMsgDOTAProfileCard_Slot_Stat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAProfileCard_Slot_Item_descriptor_, &CMsgDOTAProfileCard_Slot_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAProfileCard_Slot_Hero_descriptor_, &CMsgDOTAProfileCard_Slot_Hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAProfileCard_Slot_Emoticon_descriptor_, &CMsgDOTAProfileCard_Slot_Emoticon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgGCToClientNewBloomTimingUpdated_descriptor_, &CMsgGCToClientNewBloomTimingUpdated::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSODOTAPlayerChallenge_descriptor_, &CSODOTAPlayerChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgClientToGCRerollPlayerChallenge_descriptor_, &CMsgClientToGCRerollPlayerChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgGCRerollPlayerChallengeResponse_descriptor_, &CMsgGCRerollPlayerChallengeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgGCTopCustomGamesList_descriptor_, &CMsgGCTopCustomGamesList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTARealtimeGameStats_descriptor_, &CMsgDOTARealtimeGameStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTARealtimeGameStats_TeamDetails_descriptor_, &CMsgDOTARealtimeGameStats_TeamDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTARealtimeGameStats_ItemDetails_descriptor_, &CMsgDOTARealtimeGameStats_ItemDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTARealtimeGameStats_AbilityDetails_descriptor_, &CMsgDOTARealtimeGameStats_AbilityDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTARealtimeGameStats_HeroToHeroStats_descriptor_, &CMsgDOTARealtimeGameStats_HeroToHeroStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTARealtimeGameStats_AbilityList_descriptor_, &CMsgDOTARealtimeGameStats_AbilityList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTARealtimeGameStats_PlayerDetails_descriptor_, &CMsgDOTARealtimeGameStats_PlayerDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTARealtimeGameStats_BuildingDetails_descriptor_, &CMsgDOTARealtimeGameStats_BuildingDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTARealtimeGameStats_KillDetails_descriptor_, &CMsgDOTARealtimeGameStats_KillDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTARealtimeGameStats_BroadcasterDetails_descriptor_, &CMsgDOTARealtimeGameStats_BroadcasterDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTARealtimeGameStats_PickBanDetails_descriptor_, &CMsgDOTARealtimeGameStats_PickBanDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTARealtimeGameStats_MatchDetails_descriptor_, &CMsgDOTARealtimeGameStats_MatchDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTARealtimeGameStats_GraphData_descriptor_, &CMsgDOTARealtimeGameStats_GraphData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTARealtimeGameStats_GraphData_LocationStats_descriptor_, &CMsgDOTARealtimeGameStats_GraphData_LocationStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_descriptor_, &CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTARealtimeGameStatsTerse_descriptor_, &CMsgDOTARealtimeGameStatsTerse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTARealtimeGameStatsTerse_TeamDetails_descriptor_, &CMsgDOTARealtimeGameStatsTerse_TeamDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTARealtimeGameStatsTerse_PlayerDetails_descriptor_, &CMsgDOTARealtimeGameStatsTerse_PlayerDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTARealtimeGameStatsTerse_BuildingDetails_descriptor_, &CMsgDOTARealtimeGameStatsTerse_BuildingDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTARealtimeGameStatsTerse_MatchDetails_descriptor_, &CMsgDOTARealtimeGameStatsTerse_MatchDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTARealtimeGameStatsTerse_GraphData_descriptor_, &CMsgDOTARealtimeGameStatsTerse_GraphData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto() {
  delete CSODOTAGameAccountClient::default_instance_;
  delete CSODOTAGameAccountClient_reflection_;
  delete CSODOTAPartyMember::default_instance_;
  delete CSODOTAPartyMember_reflection_;
  delete CSODOTAParty::default_instance_;
  delete CSODOTAParty_reflection_;
  delete CSODOTAPartyInvite::default_instance_;
  delete CSODOTAPartyInvite_reflection_;
  delete CSODOTAPartyInvite_PartyMember::default_instance_;
  delete CSODOTAPartyInvite_PartyMember_reflection_;
  delete CSODOTALobbyInvite::default_instance_;
  delete CSODOTALobbyInvite_reflection_;
  delete CSODOTALobbyInvite_LobbyMember::default_instance_;
  delete CSODOTALobbyInvite_LobbyMember_reflection_;
  delete CDOTAClientHardwareSpecs::default_instance_;
  delete CDOTAClientHardwareSpecs_reflection_;
  delete CDOTASaveGame::default_instance_;
  delete CDOTASaveGame_reflection_;
  delete CDOTASaveGame_Player::default_instance_;
  delete CDOTASaveGame_Player_reflection_;
  delete CDOTASaveGame_SaveInstance::default_instance_;
  delete CDOTASaveGame_SaveInstance_reflection_;
  delete CDOTASaveGame_SaveInstance_PlayerPositions::default_instance_;
  delete CDOTASaveGame_SaveInstance_PlayerPositions_reflection_;
  delete CMsgLeaverState::default_instance_;
  delete CMsgLeaverState_reflection_;
  delete CDOTALobbyMember::default_instance_;
  delete CDOTALobbyMember_reflection_;
  delete CDOTALobbyMember_CDOTALobbyMemberXPBonus::default_instance_;
  delete CDOTALobbyMember_CDOTALobbyMemberXPBonus_reflection_;
  delete CLobbyTeamDetails::default_instance_;
  delete CLobbyTeamDetails_reflection_;
  delete CLobbyTimedRewardDetails::default_instance_;
  delete CLobbyTimedRewardDetails_reflection_;
  delete CLobbyBroadcastChannelInfo::default_instance_;
  delete CLobbyBroadcastChannelInfo_reflection_;
  delete CSODOTALobby::default_instance_;
  delete CSODOTALobby_reflection_;
  delete CSODOTALobby_CExtraMsg::default_instance_;
  delete CSODOTALobby_CExtraMsg_reflection_;
  delete CMsgLobbyEventPoints::default_instance_;
  delete CMsgLobbyEventPoints_reflection_;
  delete CMsgLobbyEventPoints_AccountPoints::default_instance_;
  delete CMsgLobbyEventPoints_AccountPoints_reflection_;
  delete CMsgDOTAGenericResult::default_instance_;
  delete CMsgDOTAGenericResult_reflection_;
  delete CMsgDOTABroadcastNotification::default_instance_;
  delete CMsgDOTABroadcastNotification_reflection_;
  delete CMsgDOTAPCBangTimedReward::default_instance_;
  delete CMsgDOTAPCBangTimedReward_reflection_;
  delete CAttribute_String::default_instance_;
  delete CAttribute_String_reflection_;
  delete CAttribute_ItemDynamicRecipeComponent::default_instance_;
  delete CAttribute_ItemDynamicRecipeComponent_reflection_;
  delete CProtoItemHeroStatue::default_instance_;
  delete CProtoItemHeroStatue_reflection_;
  delete CProtoItemTeamShowcase::default_instance_;
  delete CProtoItemTeamShowcase_reflection_;
  delete CProtoItemSocket::default_instance_;
  delete CProtoItemSocket_reflection_;
  delete CProtoItemSocket_Empty::default_instance_;
  delete CProtoItemSocket_Empty_reflection_;
  delete CProtoItemSocket_Effect::default_instance_;
  delete CProtoItemSocket_Effect_reflection_;
  delete CProtoItemSocket_Color::default_instance_;
  delete CProtoItemSocket_Color_reflection_;
  delete CProtoItemSocket_Strange::default_instance_;
  delete CProtoItemSocket_Strange_reflection_;
  delete CProtoItemSocket_Spectator::default_instance_;
  delete CProtoItemSocket_Spectator_reflection_;
  delete CProtoItemSocket_AssetModifier::default_instance_;
  delete CProtoItemSocket_AssetModifier_reflection_;
  delete CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::default_instance_;
  delete CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY_reflection_;
  delete CProtoItemSocket_Autograph::default_instance_;
  delete CProtoItemSocket_Autograph_reflection_;
  delete CProtoItemSocket_StaticVisuals::default_instance_;
  delete CProtoItemSocket_StaticVisuals_reflection_;
  delete CMatchPlayerAbilityUpgrade::default_instance_;
  delete CMatchPlayerAbilityUpgrade_reflection_;
  delete CMatchAdditionalUnitInventory::default_instance_;
  delete CMatchAdditionalUnitInventory_reflection_;
  delete CMatchHeroSelectEvent::default_instance_;
  delete CMatchHeroSelectEvent_reflection_;
  delete CMsgDOTAProcessFantasyScheduledEvent::default_instance_;
  delete CMsgDOTAProcessFantasyScheduledEvent_reflection_;
  delete CMsgDOTAHasItemQuery::default_instance_;
  delete CMsgDOTAHasItemQuery_reflection_;
  delete CMsgDOTAHasItemResponse::default_instance_;
  delete CMsgDOTAHasItemResponse_reflection_;
  delete CMsgDOTAHasItemDefsQuery::default_instance_;
  delete CMsgDOTAHasItemDefsQuery_reflection_;
  delete CMsgDOTAHasItemDefsResponse::default_instance_;
  delete CMsgDOTAHasItemDefsResponse_reflection_;
  delete CMsgDOTAConsumeFantasyTicket::default_instance_;
  delete CMsgDOTAConsumeFantasyTicket_reflection_;
  delete CMsgDOTAConsumeFantasyTicketFailure::default_instance_;
  delete CMsgDOTAConsumeFantasyTicketFailure_reflection_;
  delete CMsgGCToGCFantasySetMatchLeague::default_instance_;
  delete CMsgGCToGCFantasySetMatchLeague_reflection_;
  delete CSODOTAMapLocationState::default_instance_;
  delete CSODOTAMapLocationState_reflection_;
  delete CMsgNexonPartnerUpdate::default_instance_;
  delete CMsgNexonPartnerUpdate_reflection_;
  delete CMsgMakeOffering::default_instance_;
  delete CMsgMakeOffering_reflection_;
  delete CMsgRequestOfferings::default_instance_;
  delete CMsgRequestOfferings_reflection_;
  delete CMsgRequestOfferingsResponse::default_instance_;
  delete CMsgRequestOfferingsResponse_reflection_;
  delete CMsgRequestOfferingsResponse_NewYearsOffering::default_instance_;
  delete CMsgRequestOfferingsResponse_NewYearsOffering_reflection_;
  delete CMsgLeagueAdminList::default_instance_;
  delete CMsgLeagueAdminList_reflection_;
  delete CMsgPerfectWorldUserLookupRequest::default_instance_;
  delete CMsgPerfectWorldUserLookupRequest_reflection_;
  delete CMsgPerfectWorldUserLookupResponse::default_instance_;
  delete CMsgPerfectWorldUserLookupResponse_reflection_;
  delete CCompendiumTimestampedData::default_instance_;
  delete CCompendiumTimestampedData_reflection_;
  delete CCompendiumGameTimeline::default_instance_;
  delete CCompendiumGameTimeline_reflection_;
  delete CCompendiumGameList::default_instance_;
  delete CCompendiumGameList_reflection_;
  delete CAdditionalEquipSlot::default_instance_;
  delete CAdditionalEquipSlot_reflection_;
  delete CMsgDOTARedeemItem::default_instance_;
  delete CMsgDOTARedeemItem_reflection_;
  delete CMsgDOTARedeemItemResponse::default_instance_;
  delete CMsgDOTARedeemItemResponse_reflection_;
  delete CMsgDOTACombatLogEntry::default_instance_;
  delete CMsgDOTACombatLogEntry_reflection_;
  delete CMsgDOTAProfileCard::default_instance_;
  delete CMsgDOTAProfileCard_reflection_;
  delete CMsgDOTAProfileCard_Slot::default_instance_;
  delete CMsgDOTAProfileCard_Slot_reflection_;
  delete CMsgDOTAProfileCard_Slot_Trophy::default_instance_;
  delete CMsgDOTAProfileCard_Slot_Trophy_reflection_;
  delete CMsgDOTAProfileCard_Slot_Stat::default_instance_;
  delete CMsgDOTAProfileCard_Slot_Stat_reflection_;
  delete CMsgDOTAProfileCard_Slot_Item::default_instance_;
  delete CMsgDOTAProfileCard_Slot_Item_reflection_;
  delete CMsgDOTAProfileCard_Slot_Hero::default_instance_;
  delete CMsgDOTAProfileCard_Slot_Hero_reflection_;
  delete CMsgDOTAProfileCard_Slot_Emoticon::default_instance_;
  delete CMsgDOTAProfileCard_Slot_Emoticon_reflection_;
  delete CMsgGCToClientNewBloomTimingUpdated::default_instance_;
  delete CMsgGCToClientNewBloomTimingUpdated_reflection_;
  delete CSODOTAPlayerChallenge::default_instance_;
  delete CSODOTAPlayerChallenge_reflection_;
  delete CMsgClientToGCRerollPlayerChallenge::default_instance_;
  delete CMsgClientToGCRerollPlayerChallenge_reflection_;
  delete CMsgGCRerollPlayerChallengeResponse::default_instance_;
  delete CMsgGCRerollPlayerChallengeResponse_reflection_;
  delete CMsgGCTopCustomGamesList::default_instance_;
  delete CMsgGCTopCustomGamesList_reflection_;
  delete CMsgDOTARealtimeGameStats::default_instance_;
  delete CMsgDOTARealtimeGameStats_reflection_;
  delete CMsgDOTARealtimeGameStats_TeamDetails::default_instance_;
  delete CMsgDOTARealtimeGameStats_TeamDetails_reflection_;
  delete CMsgDOTARealtimeGameStats_ItemDetails::default_instance_;
  delete CMsgDOTARealtimeGameStats_ItemDetails_reflection_;
  delete CMsgDOTARealtimeGameStats_AbilityDetails::default_instance_;
  delete CMsgDOTARealtimeGameStats_AbilityDetails_reflection_;
  delete CMsgDOTARealtimeGameStats_HeroToHeroStats::default_instance_;
  delete CMsgDOTARealtimeGameStats_HeroToHeroStats_reflection_;
  delete CMsgDOTARealtimeGameStats_AbilityList::default_instance_;
  delete CMsgDOTARealtimeGameStats_AbilityList_reflection_;
  delete CMsgDOTARealtimeGameStats_PlayerDetails::default_instance_;
  delete CMsgDOTARealtimeGameStats_PlayerDetails_reflection_;
  delete CMsgDOTARealtimeGameStats_BuildingDetails::default_instance_;
  delete CMsgDOTARealtimeGameStats_BuildingDetails_reflection_;
  delete CMsgDOTARealtimeGameStats_KillDetails::default_instance_;
  delete CMsgDOTARealtimeGameStats_KillDetails_reflection_;
  delete CMsgDOTARealtimeGameStats_BroadcasterDetails::default_instance_;
  delete CMsgDOTARealtimeGameStats_BroadcasterDetails_reflection_;
  delete CMsgDOTARealtimeGameStats_PickBanDetails::default_instance_;
  delete CMsgDOTARealtimeGameStats_PickBanDetails_reflection_;
  delete CMsgDOTARealtimeGameStats_MatchDetails::default_instance_;
  delete CMsgDOTARealtimeGameStats_MatchDetails_reflection_;
  delete CMsgDOTARealtimeGameStats_GraphData::default_instance_;
  delete CMsgDOTARealtimeGameStats_GraphData_reflection_;
  delete CMsgDOTARealtimeGameStats_GraphData_LocationStats::default_instance_;
  delete CMsgDOTARealtimeGameStats_GraphData_LocationStats_reflection_;
  delete CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::default_instance_;
  delete CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_reflection_;
  delete CMsgDOTARealtimeGameStatsTerse::default_instance_;
  delete CMsgDOTARealtimeGameStatsTerse_reflection_;
  delete CMsgDOTARealtimeGameStatsTerse_TeamDetails::default_instance_;
  delete CMsgDOTARealtimeGameStatsTerse_TeamDetails_reflection_;
  delete CMsgDOTARealtimeGameStatsTerse_PlayerDetails::default_instance_;
  delete CMsgDOTARealtimeGameStatsTerse_PlayerDetails_reflection_;
  delete CMsgDOTARealtimeGameStatsTerse_BuildingDetails::default_instance_;
  delete CMsgDOTARealtimeGameStatsTerse_BuildingDetails_reflection_;
  delete CMsgDOTARealtimeGameStatsTerse_MatchDetails::default_instance_;
  delete CMsgDOTARealtimeGameStatsTerse_MatchDetails_reflection_;
  delete CMsgDOTARealtimeGameStatsTerse_GraphData::default_instance_;
  delete CMsgDOTARealtimeGameStatsTerse_GraphData_reflection_;
}

void protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_steammessages_2eproto();
  ::protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034dota_gcmessages_common.proto\032\023steammes"
    "sages.proto\032\026gcsdk_gcmessages.proto\"\226\013\n\030"
    "CSODOTAGameAccountClient\022\030\n\naccount_id\030\001"
    " \001(\rB\004\200\246\035\001\022\014\n\004wins\030\003 \001(\r\022\016\n\006losses\030\004 \001(\r"
    "\022\n\n\002xp\030\014 \001(\r\022\r\n\005level\030\r \001(\r\022\025\n\rinitial_s"
    "kill\030\016 \001(\r\022\024\n\014leaver_count\030\017 \001(\r\022\036\n\026seco"
    "ndary_leaver_count\030: \001(\r\022\037\n\027low_priority"
    "_until_date\030\022 \001(\r\022$\n\034prevent_text_chat_u"
    "ntil_date\030\024 \001(\r\022 \n\030prevent_voice_until_d"
    "ate\030\025 \001(\r\022 \n\030last_abandoned_game_date\030\026 "
    "\001(\r\022*\n\"last_secondary_abandoned_game_dat"
    "e\030; \001(\r\022\034\n\024leaver_penalty_count\030\027 \001(\r\022\035\n"
    "\025completed_game_streak\030\030 \001(\r\022\020\n\010teaching"
    "\030\034 \001(\r\022\022\n\nleadership\030\035 \001(\r\022\020\n\010friendly\030\036"
    " \001(\r\022\021\n\tforgiving\030\037 \001(\r\022#\n\033account_disab"
    "led_until_date\030& \001(\r\022\036\n\026account_disabled"
    "_count\030\' \001(\r\022\030\n\020showcase_hero_id\030( \001(\r\022!"
    "\n\031match_disabled_until_date\030) \001(\r\022\034\n\024mat"
    "ch_disabled_count\030* \001(\r\022\?\n\024partner_accou"
    "nt_type\030, \001(\0162\023.PartnerAccountType:\014PART"
    "NER_NONE\022\035\n\025partner_account_state\030- \001(\r\022"
    "%\n\035shutdownlawterminatetimestamp\030/ \001(\r\022$"
    "\n\034low_priority_games_remaining\0300 \001(\r\022\030\n\020"
    "competitive_rank\0301 \001(\r\022#\n\033calibration_ga"
    "mes_remaining\0303 \001(\r\022\035\n\025solo_competitive_"
    "rank\0304 \001(\r\022(\n solo_calibration_games_rem"
    "aining\0306 \001(\r\022\034\n\024competitive_1v1_rank\030\? \001"
    "(\r\0223\n+competitive_1v1_calibration_games_"
    "remaining\030@ \001(\r\022\031\n\021recruitment_level\0307 \001"
    "(\r\022\035\n\025has_new_notifications\0308 \001(\010\022\027\n\017is_"
    "league_admin\0309 \001(\010\022\033\n\023casual_games_playe"
    "d\030< \001(\r\022%\n\035solo_competitive_games_played"
    "\030= \001(\r\022&\n\036party_competitive_games_played"
    "\030> \001(\r\022\037\n\027casual_1v1_games_played\030A \001(\r\022"
    "%\n\035competitive_team_games_played\030B \001(\r\022\""
    "\n\032curr_all_hero_challenge_id\030C \001(\r\022\030\n\020pl"
    "ay_time_points\030D \001(\r\022\025\n\raccount_flags\030E "
    "\001(\r\022\027\n\017play_time_level\030F \001(\r\"_\n\022CSODOTAP"
    "artyMember\0227\n\014partner_type\030\001 \001(\0162\023.Partn"
    "erAccountType:\014PARTNER_NONE\022\020\n\010is_coach\030"
    "\002 \001(\010\"\355\007\n\014CSODOTAParty\022\026\n\010party_id\030\001 \001(\004"
    "B\004\200\246\035\001\022\021\n\tleader_id\030\002 \001(\006\022\022\n\nmember_ids\030"
    "\003 \003(\006\022\022\n\ngame_modes\030\004 \001(\r\022&\n\005state\030\006 \001(\016"
    "2\023.CSODOTAParty.State:\002UI\022*\n\"effective_s"
    "tarted_matchmaking_time\030\007 \001(\r\022$\n\034raw_sta"
    "rted_matchmaking_time\030  \001(\r\022\032\n\022attempt_s"
    "tart_time\030! \001(\r\022\023\n\013attempt_num\030\" \001(\r\022\023\n\013"
    "matchgroups\030\013 \001(\r\022\037\n\027low_priority_accoun"
    "t_id\030\023 \001(\r\0221\n\nmatch_type\030\025 \001(\0162\n.MatchTy"
    "pe:\021MATCH_TYPE_CASUAL\022B\n\016bot_difficulty\030"
    "\026 \001(\0162\022.DOTABotDifficulty:\026BOT_DIFFICULT"
    "Y_PASSIVE\022\017\n\007team_id\030\027 \001(\r\022!\n\031match_disa"
    "bled_until_date\030\030 \001(\r\022!\n\031match_disabled_"
    "account_id\030\031 \001(\r\022%\n\035matchmaking_max_rang"
    "e_minutes\030\032 \001(\r\022\026\n\016matchlanguages\030\033 \001(\r\022"
    "\026\n\016map_preference\030& \001(\r\022$\n\007members\030\035 \003(\013"
    "2\023.CSODOTAPartyMember\022\025\n\ropen_guild_id\030\036"
    " \001(\r\022\025\n\rcommon_guilds\030\037 \003(\r\022$\n\034low_prior"
    "ity_games_remaining\030# \001(\r\022\021\n\tmin_level\030$"
    " \001(\r\022\021\n\tmax_level\030% \001(\r\022%\n\024active_ingame"
    "_events\030\' \003(\0162\007.EEvent\022\036\n\026open_for_join_"
    "requests\030( \001(\010\022)\n\014sent_invites\030) \003(\0132\023.C"
    "SODOTAPartyInvite\022)\n\014recv_invites\030* \003(\0132"
    "\023.CSODOTAPartyInvite\022\025\n\raccount_flags\030+ "
    "\001(\r\"0\n\005State\022\006\n\002UI\020\000\022\021\n\rFINDING_MATCH\020\001\022"
    "\014\n\010IN_MATCH\020\002\"\253\002\n\022CSODOTAPartyInvite\022\026\n\010"
    "group_id\030\001 \001(\004B\004\200\246\035\001\022\021\n\tsender_id\030\002 \001(\006\022"
    "\023\n\013sender_name\030\003 \001(\t\0220\n\007members\030\004 \003(\0132\037."
    "CSODOTAPartyInvite.PartyMember\022\017\n\007team_i"
    "d\030\005 \001(\r\022\033\n\023low_priority_status\030\006 \001(\010\022\020\n\010"
    "as_coach\030\007 \001(\010\022\022\n\ninvite_gid\030\010 \001(\006\022\016\n\006en"
    "gine\030\t \001(\r\032\?\n\013PartyMember\022\014\n\004name\030\001 \001(\t\022"
    "\020\n\010steam_id\030\002 \001(\006\022\020\n\010is_coach\030\004 \001(\010\"\231\002\n\022"
    "CSODOTALobbyInvite\022\026\n\010group_id\030\001 \001(\004B\004\200\246"
    "\035\001\022\021\n\tsender_id\030\002 \001(\006\022\023\n\013sender_name\030\003 \001"
    "(\t\0220\n\007members\030\004 \003(\0132\037.CSODOTALobbyInvite"
    ".LobbyMember\022\026\n\016custom_game_id\030\005 \001(\004\022\022\n\n"
    "invite_gid\030\006 \001(\006\022\027\n\017custom_game_crc\030\007 \001("
    "\006\022\035\n\025custom_game_timestamp\030\010 \001(\007\032-\n\013Lobb"
    "yMember\022\014\n\004name\030\001 \001(\t\022\020\n\010steam_id\030\002 \001(\006\""
    "\277\001\n\030CDOTAClientHardwareSpecs\022\032\n\022logical_"
    "processors\030\001 \001(\r\022\035\n\025cpu_cycles_per_secon"
    "d\030\002 \001(\006\022\035\n\025total_physical_memory\030\003 \001(\006\022\024"
    "\n\014is_64_bit_os\030\004 \001(\010\022\032\n\022upload_measureme"
    "nt\030\005 \001(\004\022\027\n\017prefer_not_host\030\006 \001(\010\"\316\003\n\rCD"
    "OTASaveGame\022\020\n\010match_id\030\005 \001(\004\022\021\n\tsave_ti"
    "me\030\002 \001(\r\022&\n\007players\030\003 \003(\0132\025.CDOTASaveGam"
    "e.Player\0223\n\016save_instances\030\004 \003(\0132\033.CDOTA"
    "SaveGame.SaveInstance\032Y\n\006Player\0223\n\004team\030"
    "\001 \001(\0162\r.DOTA_GC_TEAM:\026DOTA_GC_TEAM_GOOD_"
    "GUYS\022\014\n\004name\030\002 \001(\t\022\014\n\004hero\030\003 \001(\t\032\337\001\n\014Sav"
    "eInstance\022\021\n\tgame_time\030\002 \001(\r\022\023\n\013team1_sc"
    "ore\030\003 \001(\r\022\023\n\013team2_score\030\004 \001(\r\022E\n\020player"
    "_positions\030\005 \003(\0132+.CDOTASaveGame.SaveIns"
    "tance.PlayerPositions\022\017\n\007save_id\030\006 \001(\r\022\021"
    "\n\tsave_time\030\007 \001(\r\032\'\n\017PlayerPositions\022\t\n\001"
    "x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"\325\001\n\017CMsgLeaverState\022\023"
    "\n\013lobby_state\030\001 \001(\r\022>\n\ngame_state\030\002 \001(\0162"
    "\017.DOTA_GameState:\031DOTA_GAMERULES_STATE_I"
    "NIT\022\027\n\017leaver_detected\030\003 \001(\010\022\034\n\024first_bl"
    "ood_happened\030\004 \001(\010\022\035\n\025discard_match_resu"
    "lts\030\005 \001(\010\022\027\n\017mass_disconnect\030\006 \001(\010\"\222\006\n\020C"
    "DOTALobbyMember\022\020\n\002id\030\001 \001(\006B\004\200\246\035\001\022\017\n\007her"
    "o_id\030\002 \001(\r\0223\n\004team\030\003 \001(\0162\r.DOTA_GC_TEAM:"
    "\026DOTA_GC_TEAM_GOOD_GUYS\022\014\n\004name\030\006 \001(\t\022\014\n"
    "\004slot\030\007 \001(\r\022\020\n\010party_id\030\014 \001(\004\022\022\n\nmeta_le"
    "vel\030\r \001(\r\022\017\n\007meta_xp\030\016 \001(\r\022\027\n\017meta_xp_aw"
    "arded\030\017 \001(\r\022<\n\rleaver_status\030\020 \001(\0162\023.DOT"
    "ALeaverStatus_t:\020DOTA_LEAVER_NONE\022\026\n\016lea"
    "ver_actions\030\034 \001(\r\022\017\n\007channel\030\021 \001(\r\022\027\n\017pr"
    "ize_def_index\030\022 \001(\r\022\030\n\020disabled_hero_id\030"
    "\024 \003(\r\022\?\n\024partner_account_type\030\025 \001(\0162\023.Pa"
    "rtnerAccountType:\014PARTNER_NONE\022\027\n\017enable"
    "d_hero_id\030\026 \003(\r\0229\n\ncoach_team\030\027 \001(\0162\r.DO"
    "TA_GC_TEAM:\026DOTA_GC_TEAM_GOOD_GUYS\022\030\n\020ne"
    "xon_pc_bang_no\030\030 \001(\r\022\032\n\022nexon_pc_bang_na"
    "me\030\031 \001(\t\022=\n\nxp_bonuses\030\033 \003(\0132).CDOTALobb"
    "yMember.CDOTALobbyMemberXPBonus\022\023\n\013rank_"
    "change\030\035 \001(\021\022\021\n\tcameraman\030\036 \001(\010\022\037\n\027custo"
    "m_game_product_ids\030\037 \003(\r\032M\n\027CDOTALobbyMe"
    "mberXPBonus\022\014\n\004type\030\001 \001(\r\022\020\n\010xp_bonus\030\002 "
    "\001(\002\022\022\n\nsource_key\030\003 \001(\004\"\337\002\n\021CLobbyTeamDe"
    "tails\022\021\n\tteam_name\030\001 \001(\t\022\020\n\010team_tag\030\003 \001"
    "(\t\022\017\n\007team_id\030\004 \001(\r\022\021\n\tteam_logo\030\005 \001(\004\022\026"
    "\n\016team_base_logo\030\006 \001(\004\022\030\n\020team_banner_lo"
    "go\030\007 \001(\004\022\025\n\rteam_complete\030\010 \001(\010\022\022\n\nguild"
    "_name\030\t \001(\t\022\021\n\tguild_tag\030\n \001(\t\022\020\n\010guild_"
    "id\030\013 \001(\r\022\022\n\nguild_logo\030\014 \001(\004\022\027\n\017guild_ba"
    "se_logo\030\r \001(\004\022\031\n\021guild_banner_logo\030\016 \001(\004"
    "\022\014\n\004rank\030\017 \001(\r\022\023\n\013rank_change\030\020 \001(\021\022\024\n\014i"
    "s_home_team\030\021 \001(\010\"\206\001\n\030CLobbyTimedRewardD"
    "etails\022\026\n\016item_def_index\030\002 \001(\r\022\027\n\017is_sup"
    "ply_crate\030\003 \001(\010\022\025\n\ris_timed_drop\030\004 \001(\010\022\022"
    "\n\naccount_id\030\005 \001(\r\022\016\n\006origin\030\006 \001(\r\"r\n\032CL"
    "obbyBroadcastChannelInfo\022\022\n\nchannel_id\030\001"
    " \001(\r\022\024\n\014country_code\030\002 \001(\t\022\023\n\013descriptio"
    "n\030\003 \001(\t\022\025\n\rlanguage_code\030\004 \001(\t\"\372\023\n\014CSODO"
    "TALobby\022\026\n\010lobby_id\030\001 \001(\004B\004\200\246\035\001\022\"\n\007membe"
    "rs\030\002 \003(\0132\021.CDOTALobbyMember\022\'\n\014left_memb"
    "ers\030\007 \003(\0132\021.CDOTALobbyMember\022\021\n\tleader_i"
    "d\030\013 \001(\006\022\024\n\tserver_id\030\006 \001(\006:\0010\022\021\n\tgame_mo"
    "de\030\003 \001(\r\022\027\n\017pending_invites\030\n \003(\006\022&\n\005sta"
    "te\030\004 \001(\0162\023.CSODOTALobby.State:\002UI\022\017\n\007con"
    "nect\030\005 \001(\t\0224\n\nlobby_type\030\014 \001(\0162\027.CSODOTA"
    "Lobby.LobbyType:\007INVALID\022\024\n\014allow_cheats"
    "\030\r \001(\010\022\026\n\016fill_with_bots\030\016 \001(\010\022\022\n\nintro_"
    "mode\030\017 \001(\010\022\021\n\tgame_name\030\020 \001(\t\022(\n\014team_de"
    "tails\030\021 \003(\0132\022.CLobbyTeamDetails\022\027\n\017tutor"
    "ial_lesson\030\022 \001(\r\022\025\n\rtournament_id\030\023 \001(\r\022"
    "\032\n\022tournament_game_id\030\024 \001(\r\022\030\n\rserver_re"
    "gion\030\025 \001(\r:\0010\022>\n\ngame_state\030\026 \001(\0162\017.DOTA"
    "_GameState:\031DOTA_GAMERULES_STATE_INIT\022\026\n"
    "\016num_spectators\030\027 \001(\r\022\022\n\nmatchgroup\030\031 \001("
    "\r\022.\n\007cm_pick\030\034 \001(\0162\r.DOTA_CM_PICK:\016DOTA_"
    "CM_RANDOM\022\020\n\010match_id\030\036 \001(\004\022\036\n\020allow_spe"
    "ctating\030\037 \001(\010:\004true\022\?\n\016bot_difficulty\030$ "
    "\001(\0162\022.DOTABotDifficulty:\023BOT_DIFFICULTY_"
    "HARD\022<\n\014game_version\030% \001(\0162\020.DOTAGameVer"
    "sion:\024GAME_VERSION_CURRENT\0227\n\024timed_rewa"
    "rd_details\030& \003(\0132\031.CLobbyTimedRewardDeta"
    "ils\022\020\n\010pass_key\030\' \001(\t\022/\n\023bot_slot_diffic"
    "ulty\030) \003(\0162\022.DOTABotDifficulty\022\020\n\010league"
    "id\030* \001(\r\022 \n\025penalty_level_radiant\030+ \001(\r:"
    "\0010\022\035\n\022penalty_level_dire\030, \001(\r:\0010\022\024\n\014loa"
    "d_game_id\030- \001(\r\022\023\n\013series_type\030. \001(\r\022\033\n\023"
    "radiant_series_wins\030/ \001(\r\022\030\n\020dire_series"
    "_wins\0300 \001(\r\022\026\n\016loot_generated\0301 \001(\r\022\024\n\014l"
    "oot_awarded\0302 \001(\r\022\026\n\007allchat\0303 \001(\010:\005fals"
    "e\0228\n\rdota_tv_delay\0305 \001(\0162\021.LobbyDotaTVDe"
    "lay:\016LobbyDotaTV_10\022\030\n\020custom_game_mode\030"
    "6 \001(\t\022\027\n\017custom_map_name\0307 \001(\t\022\031\n\021custom"
    "_difficulty\0308 \001(\r\022\013\n\003lan\0309 \001(\010\022;\n\026broadc"
    "ast_channel_info\030: \003(\0132\033.CLobbyBroadcast"
    "ChannelInfo\022\036\n\026first_leaver_accountid\030; "
    "\001(\r\022\021\n\tseries_id\030< \001(\r\022\024\n\014low_priority\030="
    " \001(\010\022/\n\016extra_messages\030> \003(\0132\027.CSODOTALo"
    "bby.CExtraMsg\022!\n\tsave_game\030\? \001(\0132\016.CDOTA"
    "SaveGame\022\034\n\024first_blood_happened\030A \001(\010\022>"
    "\n\rmatch_outcome\030F \001(\0162\016.EMatchOutcome:\027k"
    "_EMatchOutcome_Unknown\022\027\n\017mass_disconnec"
    "t\030C \001(\010\022\026\n\016custom_game_id\030D \001(\004\022%\n\024activ"
    "e_ingame_events\030E \003(\0162\007.EEvent\022\032\n\022custom"
    "_min_players\030G \001(\r\022\032\n\022custom_max_players"
    "\030H \001(\r\0227\n\014partner_type\030I \001(\0162\023.PartnerAc"
    "countType:\014PARTNER_NONE\022&\n\036lan_host_ping"
    "_to_server_region\030J \001(\r\022D\n\nvisibility\030K "
    "\001(\0162\024.DOTALobbyVisibility:\032DOTALobbyVisi"
    "bility_Public\022\027\n\017custom_game_crc\030L \001(\006\022&"
    "\n\036custom_game_auto_created_lobby\030M \001(\010\022\030"
    "\n\020league_series_id\030N \001(\r\022\026\n\016league_game_"
    "id\030O \001(\r\022\035\n\025custom_game_timestamp\030P \001(\007\032"
    ")\n\tCExtraMsg\022\n\n\002id\030\001 \001(\r\022\020\n\010contents\030\002 \001"
    "(\014\"d\n\005State\022\006\n\002UI\020\000\022\013\n\007READYUP\020\004\022\017\n\013SERV"
    "ERSETUP\020\001\022\007\n\003RUN\020\002\022\014\n\010POSTGAME\020\003\022\014\n\010NOTR"
    "EADY\020\005\022\020\n\014SERVERASSIGN\020\006\"\360\001\n\tLobbyType\022\024"
    "\n\007INVALID\020\377\377\377\377\377\377\377\377\377\001\022\020\n\014CASUAL_MATCH\020\000\022\014"
    "\n\010PRACTICE\020\001\022\016\n\nTOURNAMENT\020\002\022\022\n\016COOP_BOT"
    "_MATCH\020\004\022\025\n\021LEGACY_TEAM_MATCH\020\005\022\033\n\027LEGAC"
    "Y_SOLO_QUEUE_MATCH\020\006\022\025\n\021COMPETITIVE_MATC"
    "H\020\007\022\024\n\020CASUAL_1V1_MATCH\020\010\022\023\n\017WEEKEND_TOU"
    "RNEY\020\t\022\023\n\017LOCAL_BOT_MATCH\020\n\"\321\002\n\024CMsgLobb"
    "yEventPoints\022\020\n\010event_id\030\001 \001(\r\022;\n\016accoun"
    "t_points\030\002 \003(\0132#.CMsgLobbyEventPoints.Ac"
    "countPoints\032\351\001\n\rAccountPoints\022\022\n\naccount"
    "_id\030\001 \001(\r\022\025\n\rnormal_points\030\002 \001(\r\022\026\n\016prem"
    "ium_points\030\003 \001(\r\022\r\n\005owned\030\004 \001(\010\022\025\n\rfavor"
    "ite_team\030\005 \001(\r\022\033\n\023favorite_team_level\030\006 "
    "\001(\r\022\023\n\013points_held\030\007 \001(\r\022\033\n\023premium_poin"
    "ts_held\030\010 \001(\r\022 \n\030favorite_team_foil_leve"
    "l\030\t \001(\r\"+\n\025CMsgDOTAGenericResult\022\022\n\007eres"
    "ult\030\001 \001(\r:\0012\"0\n\035CMsgDOTABroadcastNotific"
    "ation\022\017\n\007message\030\001 \001(\t\"Q\n\031CMsgDOTAPCBang"
    "TimedReward\022\017\n\007persona\030\001 \001(\t\022\017\n\007itemdef\030"
    "\002 \001(\r\022\022\n\npcbangname\030\003 \001(\t\"\"\n\021CAttribute_"
    "String\022\r\n\005value\030\001 \001(\t\"\355\001\n%CAttribute_Ite"
    "mDynamicRecipeComponent\022\020\n\010item_def\030\001 \001("
    "\r\022\024\n\014item_quality\030\002 \001(\r\022\022\n\nitem_flags\030\003 "
    "\001(\r\022\031\n\021attributes_string\030\004 \001(\t\022\022\n\nitem_c"
    "ount\030\005 \001(\r\022\027\n\017items_fulfilled\030\006 \001(\r\022\023\n\013i"
    "tem_rarity\030\007 \001(\r\022\020\n\010lootlist\030\010 \001(\t\022\031\n\021fu"
    "lfilled_item_id\030\t \001(\004\"\271\001\n\024CProtoItemHero"
    "Statue\022\017\n\007hero_id\030\001 \001(\r\022\033\n\023status_effect"
    "_index\030\002 \001(\r\022\025\n\rsequence_name\030\003 \001(\t\022\r\n\005c"
    "ycle\030\004 \001(\002\022\020\n\010wearable\030\005 \003(\r\022\023\n\013inscript"
    "ion\030\006 \001(\t\022\r\n\005style\030\007 \003(\r\022\027\n\017tournament_d"
    "rop\030\010 \001(\010\"\242\001\n\026CProtoItemTeamShowcase\022\017\n\007"
    "hero_id\030\001 \001(\r\022\033\n\023status_effect_index\030\002 \001"
    "(\r\022\025\n\rsequence_name\030\003 \001(\t\022\r\n\005cycle\030\004 \001(\002"
    "\022\020\n\010wearable\030\005 \003(\r\022\023\n\013inscription\030\006 \001(\t\022"
    "\r\n\005style\030\007 \003(\r\"\262\001\n\020CProtoItemSocket\022\017\n\007i"
    "tem_id\030\001 \001(\004\022\026\n\016attr_def_index\030\002 \001(\r\022\025\n\r"
    "required_type\030\003 \001(\r\022\025\n\rrequired_hero\030\004 \001"
    "(\t\022\025\n\rgem_def_index\030\005 \001(\r\022\024\n\014not_tradabl"
    "e\030\006 \001(\010\022\032\n\022required_item_slot\030\007 \001(\t\";\n\026C"
    "ProtoItemSocket_Empty\022!\n\006socket\030\001 \001(\0132\021."
    "CProtoItemSocket\"L\n\027CProtoItemSocket_Eff"
    "ect\022!\n\006socket\030\001 \001(\0132\021.CProtoItemSocket\022\016"
    "\n\006effect\030\002 \001(\r\"e\n\026CProtoItemSocket_Color"
    "\022!\n\006socket\030\001 \001(\0132\021.CProtoItemSocket\022\013\n\003r"
    "ed\030\002 \001(\r\022\r\n\005green\030\003 \001(\r\022\014\n\004blue\030\004 \001(\r\"j\n"
    "\030CProtoItemSocket_Strange\022!\n\006socket\030\001 \001("
    "\0132\021.CProtoItemSocket\022\024\n\014strange_type\030\002 \001"
    "(\r\022\025\n\rstrange_value\030\003 \001(\r\"\221\001\n\032CProtoItem"
    "Socket_Spectator\022!\n\006socket\030\001 \001(\0132\021.CProt"
    "oItemSocket\022\024\n\014games_viewed\030\002 \001(\r\022\026\n\016cor"
    "poration_id\030\003 \001(\r\022\021\n\tleague_id\030\004 \001(\r\022\017\n\007"
    "team_id\030\005 \001(\r\"[\n\036CProtoItemSocket_AssetM"
    "odifier\022!\n\006socket\030\001 \001(\0132\021.CProtoItemSock"
    "et\022\026\n\016asset_modifier\030\002 \001(\r\"\247\001\n;CProtoIte"
    "mSocket_AssetModifier_DESERIALIZE_FROM_S"
    "TRING_ONLY\022!\n\006socket\030\001 \001(\0132\021.CProtoItemS"
    "ocket\022\026\n\016asset_modifier\030\002 \001(\r\022\025\n\ranim_mo"
    "difier\030\003 \001(\r\022\026\n\016ability_effect\030\004 \001(\r\"\201\001\n"
    "\032CProtoItemSocket_Autograph\022!\n\006socket\030\001 "
    "\001(\0132\021.CProtoItemSocket\022\021\n\tautograph\030\002 \001("
    "\t\022\024\n\014autograph_id\030\003 \001(\r\022\027\n\017autograph_sco"
    "re\030\004 \001(\r\"C\n\036CProtoItemSocket_StaticVisua"
    "ls\022!\n\006socket\030\001 \001(\0132\021.CProtoItemSocket\";\n"
    "\032CMatchPlayerAbilityUpgrade\022\017\n\007ability\030\001"
    " \001(\r\022\014\n\004time\030\002 \001(\r\"A\n\035CMatchAdditionalUn"
    "itInventory\022\021\n\tunit_name\030\001 \001(\t\022\r\n\005items\030"
    "\002 \003(\r\"G\n\025CMatchHeroSelectEvent\022\017\n\007is_pic"
    "k\030\001 \001(\010\022\014\n\004team\030\002 \001(\r\022\017\n\007hero_id\030\003 \001(\r\"\213"
    "\001\n$CMsgDOTAProcessFantasyScheduledEvent\022"
    "\r\n\005event\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\r\022\031\n\021fan"
    "tasy_league_id\030\003 \001(\r\022\016\n\006season\030\004 \001(\r\022\026\n\016"
    "reference_data\030\005 \001(\r\";\n\024CMsgDOTAHasItemQ"
    "uery\022\022\n\naccount_id\030\001 \001(\r\022\017\n\007item_id\030\002 \001("
    "\004\"+\n\027CMsgDOTAHasItemResponse\022\020\n\010has_item"
    "\030\001 \001(\010\"C\n\030CMsgDOTAHasItemDefsQuery\022\022\n\nac"
    "count_id\030\001 \001(\r\022\023\n\013itemdef_ids\030\002 \003(\r\"0\n\033C"
    "MsgDOTAHasItemDefsResponse\022\021\n\thas_items\030"
    "\001 \001(\010\"^\n\034CMsgDOTAConsumeFantasyTicket\022\022\n"
    "\naccount_id\030\001 \001(\r\022\017\n\007item_id\030\002 \001(\004\022\031\n\021fa"
    "ntasy_league_id\030\003 \001(\r\"e\n#CMsgDOTAConsume"
    "FantasyTicketFailure\022\022\n\naccount_id\030\001 \001(\r"
    "\022\017\n\007item_id\030\002 \001(\004\022\031\n\021fantasy_league_id\030\003"
    " \001(\r\"F\n\037CMsgGCToGCFantasySetMatchLeague\022"
    "\020\n\010match_id\030\001 \001(\004\022\021\n\tleague_id\030\002 \001(\r\"a\n\027"
    "CSODOTAMapLocationState\022\030\n\naccount_id\030\001 "
    "\001(\rB\004\200\246\035\001\022\031\n\013location_id\030\002 \001(\005B\004\200\246\035\001\022\021\n\t"
    "completed\030\003 \001(\010\"W\n\026CMsgNexonPartnerUpdat"
    "e\022\023\n\013messagetype\030\001 \001(\r\022\025\n\rtimeremaining\030"
    "\002 \001(\r\022\021\n\tterminate\030\003 \001(\010\"#\n\020CMsgMakeOffe"
    "ring\022\017\n\007item_id\030\001 \001(\004\"\026\n\024CMsgRequestOffe"
    "rings\"\254\001\n\034CMsgRequestOfferingsResponse\022A"
    "\n\tofferings\030\001 \003(\0132..CMsgRequestOfferings"
    "Response.NewYearsOffering\022\021\n\tcompleted\030\002"
    " \001(\010\0326\n\020NewYearsOffering\022\021\n\tdef_index\030\001 "
    "\001(\r\022\017\n\007item_id\030\002 \001(\004\"*\n\023CMsgLeagueAdminL"
    "ist\022\023\n\013account_ids\030\001 \003(\r\"6\n!CMsgPerfectW"
    "orldUserLookupRequest\022\021\n\tuser_name\030\001 \001(\t"
    "\"\310\002\n\"CMsgPerfectWorldUserLookupResponse\022"
    "[\n\013result_code\030\001 \001(\0162/.CMsgPerfectWorldU"
    "serLookupResponse.EResultCode:\025SUCCESS_A"
    "CCOUNT_FOUND\022\022\n\naccount_id\030\002 \001(\r\"\260\001\n\013ERe"
    "sultCode\022\031\n\025SUCCESS_ACCOUNT_FOUND\020\000\022\021\n\rE"
    "RROR_UNKNOWN\020\001\022 \n\034ERROR_USER_NAME_WRONG_"
    "FORMAT\020\002\022(\n$ERROR_NO_PERFECT_WORLD_ACCOU"
    "NT_FOUND\020\003\022\'\n#ERROR_NO_LINKED_STEAM_ACCO"
    "UNT_FOUND\020\004\"\200\001\n\032CCompendiumTimestampedDa"
    "ta\022\021\n\tgame_time\030\001 \001(\r\022\013\n\003gpm\030\002 \001(\r\022\013\n\003xp"
    "m\030\003 \001(\r\022\r\n\005kills\030\004 \001(\r\022\016\n\006deaths\030\005 \001(\r\022\026"
    "\n\016item_purchases\030\006 \003(\r\"R\n\027CCompendiumGam"
    "eTimeline\022)\n\004data\030\001 \003(\0132\033.CCompendiumTim"
    "estampedData\022\014\n\004tags\030\002 \003(\t\">\n\023CCompendiu"
    "mGameList\022\'\n\005games\030\001 \003(\0132\030.CCompendiumGa"
    "meTimeline\"L\n\024CAdditionalEquipSlot\022\020\n\010cl"
    "ass_id\030\001 \001(\r\022\017\n\007slot_id\030\002 \001(\r\022\021\n\tdef_ind"
    "ex\030\003 \001(\r\"\?\n\022CMsgDOTARedeemItem\022\023\n\013curren"
    "cy_id\030\001 \001(\004\022\024\n\014purchase_def\030\002 \001(\r\"\034\n\032CMs"
    "gDOTARedeemItemResponse\"\330\007\n\026CMsgDOTAComb"
    "atLogEntry\022:\n\004type\030\001 \001(\0162\025.DOTA_COMBATLO"
    "G_TYPES:\025DOTA_COMBATLOG_DAMAGE\022\023\n\013target"
    "_name\030\002 \001(\r\022\032\n\022target_source_name\030\003 \001(\r\022"
    "\025\n\rattacker_name\030\004 \001(\r\022\032\n\022damage_source_"
    "name\030\005 \001(\r\022\026\n\016inflictor_name\030\006 \001(\r\022\034\n\024is"
    "_attacker_illusion\030\007 \001(\010\022\030\n\020is_attacker_"
    "hero\030\010 \001(\010\022\032\n\022is_target_illusion\030\t \001(\010\022\026"
    "\n\016is_target_hero\030\n \001(\010\022\032\n\022is_visible_rad"
    "iant\030\013 \001(\010\022\027\n\017is_visible_dire\030\014 \001(\010\022\r\n\005v"
    "alue\030\r \001(\r\022\016\n\006health\030\016 \001(\005\022\021\n\ttimestamp\030"
    "\017 \001(\002\022\025\n\rstun_duration\030\020 \001(\002\022\025\n\rslow_dur"
    "ation\030\021 \001(\002\022\034\n\024is_ability_toggle_on\030\022 \001("
    "\010\022\035\n\025is_ability_toggle_off\030\023 \001(\010\022\025\n\rabil"
    "ity_level\030\024 \001(\r\022\022\n\nlocation_x\030\025 \001(\002\022\022\n\nl"
    "ocation_y\030\026 \001(\002\022\023\n\013gold_reason\030\027 \001(\r\022\025\n\r"
    "timestamp_raw\030\030 \001(\002\022\031\n\021modifier_duration"
    "\030\031 \001(\002\022\021\n\txp_reason\030\032 \001(\r\022\021\n\tlast_hits\030\033"
    " \001(\r\022\025\n\rattacker_team\030\034 \001(\r\022\023\n\013target_te"
    "am\030\035 \001(\r\022\030\n\020obs_wards_placed\030\036 \001(\r\022\026\n\016as"
    "sist_player0\030\037 \001(\r\022\026\n\016assist_player1\030  \001"
    "(\r\022\026\n\016assist_player2\030! \001(\r\022\026\n\016assist_pla"
    "yer3\030\" \001(\r\022\023\n\013stack_count\030# \001(\r\022\027\n\017hidde"
    "n_modifier\030$ \001(\010\022\032\n\022is_target_building\030%"
    " \001(\010\022\031\n\021neutral_camp_type\030& \001(\r\022\021\n\trune_"
    "type\030\' \001(\r\"\365\006\n\023CMsgDOTAProfileCard\022\022\n\nac"
    "count_id\030\001 \001(\r\022\034\n\024background_def_index\030\002"
    " \001(\r\022(\n\005slots\030\003 \003(\0132\031.CMsgDOTAProfileCar"
    "d.Slot\022\024\n\014badge_points\030\004 \001(\r\022\024\n\014event_po"
    "ints\030\005 \001(\r\022\020\n\010event_id\030\006 \001(\r\032\255\004\n\004Slot\022\017\n"
    "\007slot_id\030\001 \001(\r\0220\n\006trophy\030\002 \001(\0132 .CMsgDOT"
    "AProfileCard.Slot.Trophy\022,\n\004stat\030\003 \001(\0132\036"
    ".CMsgDOTAProfileCard.Slot.Stat\022,\n\004item\030\004"
    " \001(\0132\036.CMsgDOTAProfileCard.Slot.Item\022,\n\004"
    "hero\030\005 \001(\0132\036.CMsgDOTAProfileCard.Slot.He"
    "ro\0224\n\010emoticon\030\006 \001(\0132\".CMsgDOTAProfileCa"
    "rd.Slot.Emoticon\0321\n\006Trophy\022\021\n\ttrophy_id\030"
    "\001 \001(\r\022\024\n\014trophy_score\030\002 \001(\r\032[\n\004Stat\022\?\n\007s"
    "tat_id\030\001 \001(\0162\034.CMsgDOTAProfileCard.EStat"
    "ID:\020k_eStat_SoloRank\022\022\n\nstat_score\030\002 \001(\r"
    "\0320\n\004Item\022\027\n\017serialized_item\030\001 \001(\014\022\017\n\007ite"
    "m_id\030\002 \001(\004\032\?\n\004Hero\022\017\n\007hero_id\030\001 \001(\r\022\021\n\th"
    "ero_wins\030\002 \001(\r\022\023\n\013hero_losses\030\003 \001(\r\032\037\n\010E"
    "moticon\022\023\n\013emoticon_id\030\001 \001(\r\"\223\001\n\007EStatID"
    "\022\024\n\020k_eStat_SoloRank\020\001\022\025\n\021k_eStat_PartyR"
    "ank\020\002\022\020\n\014k_eStat_Wins\020\003\022\024\n\020k_eStat_Comme"
    "nds\020\004\022\027\n\023k_eStat_GamesPlayed\020\005\022\032\n\026k_eSta"
    "t_FirstMatchDate\020\006\"\237\001\n#CMsgGCToClientNew"
    "BloomTimingUpdated\022\021\n\tis_active\030\001 \001(\010\022\034\n"
    "\024next_transition_time\030\002 \001(\r\022\024\n\014bonus_amo"
    "unt\030\003 \001(\r\022\030\n\020standby_duration\030\004 \001(\r\022\027\n\017t"
    "ransition_time\030\005 \001(\r\"\266\002\n\026CSODOTAPlayerCh"
    "allenge\022\030\n\naccount_id\030\001 \001(\rB\004\200\246\035\001\022\026\n\010eve"
    "nt_id\030\002 \001(\rB\004\200\246\035\001\022\025\n\007slot_id\030\003 \001(\rB\004\200\246\035\001"
    "\022\026\n\016challenge_type\030\004 \001(\r\022\023\n\013int_param_0\030"
    "\005 \001(\r\022\023\n\013int_param_1\030\006 \001(\r\022\024\n\014created_ti"
    "me\030\007 \001(\r\022\021\n\tcompleted\030\010 \001(\r\022\023\n\013sequence_"
    "id\030\t \001(\r\022\026\n\016challenge_tier\030\n \001(\r\022\r\n\005flag"
    "s\030\013 \001(\r\",\n\006EFlags\022\"\n\036eFlag_InstantReroll"
    "Uncompleted\020\001\"L\n#CMsgClientToGCRerollPla"
    "yerChallenge\022\020\n\010event_id\030\001 \001(\r\022\023\n\013sequen"
    "ce_id\030\003 \001(\r\"\360\001\n#CMsgGCRerollPlayerChalle"
    "ngeResponse\022M\n\006result\030\001 \001(\0162,.CMsgGCRero"
    "llPlayerChallengeResponse.EResult:\017eResu"
    "lt_Success\"z\n\007EResult\022\023\n\017eResult_Success"
    "\020\000\022\023\n\017eResult_Dropped\020\001\022\024\n\020eResult_NotFo"
    "und\020\002\022\026\n\022eResult_CantReroll\020\003\022\027\n\023eResult"
    "_ServerError\020\004\"4\n\030CMsgGCTopCustomGamesLi"
    "st\022\030\n\020top_custom_games\030\001 \003(\004\"\240\032\n\031CMsgDOT"
    "ARealtimeGameStats\0226\n\005match\030\001 \001(\0132\'.CMsg"
    "DOTARealtimeGameStats.MatchDetails\0225\n\005te"
    "ams\030\002 \003(\0132&.CMsgDOTARealtimeGameStats.Te"
    "amDetails\022=\n\tbuildings\030\003 \003(\0132*.CMsgDOTAR"
    "ealtimeGameStats.BuildingDetails\0228\n\ngrap"
    "h_data\030\004 \001(\0132$.CMsgDOTARealtimeGameStats"
    ".GraphData\022\023\n\013delta_frame\030\005 \001(\010\032\306\001\n\013Team"
    "Details\022\023\n\013team_number\030\001 \001(\r\022\017\n\007team_id\030"
    "\002 \001(\r\022\021\n\tteam_name\030\003 \001(\t\022\021\n\tteam_logo\030\004 "
    "\001(\006\022\r\n\005score\030\005 \001(\r\0229\n\007players\030\006 \003(\0132(.CM"
    "sgDOTARealtimeGameStats.PlayerDetails\022\021\n"
    "\tonly_team\030\007 \001(\010\022\016\n\006cheers\030\010 \001(\r\032W\n\013Item"
    "Details\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\014\n\004tim"
    "e\030\003 \001(\005\022\014\n\004sold\030\004 \001(\010\022\022\n\nstackcount\030\005 \001("
    "\r\032a\n\016AbilityDetails\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030"
    "\002 \001(\t\022\r\n\005level\030\003 \001(\r\022\020\n\010cooldown\030\004 \001(\002\022\024"
    "\n\014cooldown_max\030\005 \001(\002\032C\n\017HeroToHeroStats\022"
    "\020\n\010victimid\030\001 \001(\r\022\r\n\005kills\030\002 \001(\r\022\017\n\007assi"
    "sts\030\003 \001(\r\032\031\n\013AbilityList\022\n\n\002id\030\001 \003(\r\032\345\t\n"
    "\rPlayerDetails\022\021\n\taccountid\030\001 \001(\r\022\020\n\010pla"
    "yerid\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\014\n\004team\030\004 \001(\r\022"
    "\016\n\006heroid\030\005 \001(\r\022\024\n\014healthpoints\030\006 \001(\r\022\027\n"
    "\017maxhealthpoints\030\007 \001(\r\022\027\n\017healthregenrat"
    "e\030\010 \001(\002\022\022\n\nmanapoints\030\t \001(\r\022\025\n\rmaxmanapo"
    "ints\030\n \001(\r\022\025\n\rmanaregenrate\030\013 \001(\002\022\025\n\rbas"
    "e_strength\030\014 \001(\r\022\024\n\014base_agility\030\r \001(\r\022\031"
    "\n\021base_intelligence\030\016 \001(\r\022\022\n\nbase_armor\030"
    "\017 \001(\005\022\026\n\016base_movespeed\030\020 \001(\r\022\023\n\013base_da"
    "mage\030\021 \001(\r\022\020\n\010strength\030\022 \001(\r\022\017\n\007agility\030"
    "\023 \001(\r\022\024\n\014intelligence\030\024 \001(\r\022\r\n\005armor\030\025 \001"
    "(\005\022\021\n\tmovespeed\030\026 \001(\r\022\016\n\006damage\030\027 \001(\r\022\023\n"
    "\013hero_damage\030\030 \001(\r\022\024\n\014tower_damage\030\031 \001(\r"
    "\022<\n\tabilities\030\032 \003(\0132).CMsgDOTARealtimeGa"
    "meStats.AbilityDetails\022\r\n\005level\030\033 \001(\r\022\022\n"
    "\nkill_count\030\034 \001(\r\022\023\n\013death_count\030\035 \001(\r\022\025"
    "\n\rassists_count\030\036 \001(\r\022\024\n\014denies_count\030\037 "
    "\001(\r\022\020\n\010lh_count\030  \001(\r\022\024\n\014hero_healing\030! "
    "\001(\r\022\024\n\014gold_per_min\030\" \001(\r\022\022\n\nxp_per_min\030"
    "# \001(\r\022\020\n\010net_gold\030$ \001(\r\022\014\n\004gold\030% \001(\r\022\t\n"
    "\001x\030& \001(\002\022\t\n\001y\030\' \001(\002\022\024\n\014respawn_time\030( \001("
    "\005\022\031\n\021ultimate_cooldown\030) \001(\r\022\023\n\013has_buyb"
    "ack\030* \001(\010\0225\n\005items\030+ \003(\0132&.CMsgDOTARealt"
    "imeGameStats.ItemDetails\022:\n\nstashitems\030,"
    " \003(\0132&.CMsgDOTARealtimeGameStats.ItemDet"
    "ails\022@\n\020itemshoppinglist\030- \003(\0132&.CMsgDOT"
    "ARealtimeGameStats.ItemDetails\022;\n\013levelp"
    "oints\030. \003(\0132&.CMsgDOTARealtimeGameStats."
    "AbilityList\022F\n\022hero_to_hero_stats\030/ \003(\0132"
    "*.CMsgDOTARealtimeGameStats.HeroToHeroSt"
    "ats\022\024\n\014has_ultimate\0300 \001(\010\022\031\n\021has_ultimat"
    "e_mana\0301 \001(\010\032p\n\017BuildingDetails\022\014\n\004team\030"
    "\002 \001(\r\022\017\n\007heading\030\003 \001(\002\022\014\n\004lane\030\004 \001(\r\022\014\n\004"
    "tier\030\005 \001(\r\022\014\n\004type\030\006 \001(\r\022\t\n\001x\030\007 \001(\002\022\t\n\001y"
    "\030\010 \001(\002\032N\n\013KillDetails\022\021\n\tplayer_id\030\001 \001(\r"
    "\022\022\n\ndeath_time\030\002 \001(\005\022\030\n\020killer_player_id"
    "\030\003 \001(\r\032V\n\022BroadcasterDetails\022\021\n\tplayer_i"
    "d\030\001 \001(\r\022\025\n\rselected_hero\030\002 \001(\r\022\026\n\016select"
    "ed_graph\030\003 \001(\r\032,\n\016PickBanDetails\022\014\n\004hero"
    "\030\001 \001(\r\022\014\n\004team\030\002 \001(\r\032\376\003\n\014MatchDetails\022\027\n"
    "\017server_steam_id\030\001 \001(\006\022\017\n\007matchid\030\002 \001(\004\022"
    "\021\n\ttimestamp\030\003 \001(\r\022\023\n\013time_of_day\030\004 \001(\002\022"
    "\035\n\025is_nightstalker_night\030\005 \001(\010\022\021\n\tgame_t"
    "ime\030\006 \001(\005\022\026\n\016teamid_radiant\030\010 \001(\r\022\023\n\013tea"
    "mid_dire\030\t \001(\r\0228\n\005picks\030\n \003(\0132).CMsgDOTA"
    "RealtimeGameStats.PickBanDetails\0227\n\004bans"
    "\030\013 \003(\0132).CMsgDOTARealtimeGameStats.PickB"
    "anDetails\0225\n\005kills\030\014 \003(\0132&.CMsgDOTARealt"
    "imeGameStats.KillDetails\022C\n\014broadcasters"
    "\030\r \003(\0132-.CMsgDOTARealtimeGameStats.Broad"
    "casterDetails\022\021\n\tgame_mode\030\016 \001(\r\022\021\n\tleag"
    "ue_id\030\017 \001(\r\022\023\n\013single_team\030\020 \001(\010\022\023\n\013chee"
    "rs_peak\030\021 \001(\r\032\357\003\n\tGraphData\022\022\n\ngraph_gol"
    "d\030\001 \003(\005\022\020\n\010graph_xp\030\002 \003(\005\022\022\n\ngraph_kill\030"
    "\003 \003(\005\022\023\n\013graph_tower\030\004 \003(\005\022\021\n\tgraph_rax\030"
    "\005 \003(\005\022N\n\016team_loc_stats\030\006 \003(\01326.CMsgDOTA"
    "RealtimeGameStats.GraphData.TeamLocation"
    "Stats\032\036\n\rLocationStats\022\r\n\005stats\030\001 \003(\005\032Z\n"
    "\021TeamLocationStats\022E\n\tloc_stats\030\001 \003(\01322."
    "CMsgDOTARealtimeGameStats.GraphData.Loca"
    "tionStats\"[\n\005eStat\022\023\n\017CreepGoldEarned\020\000\022"
    "\022\n\016KillGoldEarned\020\001\022\033\n\027DeathAndBuybackGo"
    "ldLost\020\002\022\014\n\010XPEarned\020\003\"W\n\teLocation\022\013\n\007B"
    "otLane\020\000\022\013\n\007MidLane\020\001\022\013\n\007TopLane\020\002\022\n\n\006Ju"
    "ngle\020\003\022\014\n\010Ancients\020\004\022\t\n\005Other\020\005\"\233\010\n\036CMsg"
    "DOTARealtimeGameStatsTerse\022;\n\005match\030\001 \001("
    "\0132,.CMsgDOTARealtimeGameStatsTerse.Match"
    "Details\022:\n\005teams\030\002 \003(\0132+.CMsgDOTARealtim"
    "eGameStatsTerse.TeamDetails\022B\n\tbuildings"
    "\030\003 \003(\0132/.CMsgDOTARealtimeGameStatsTerse."
    "BuildingDetails\022=\n\ngraph_data\030\004 \001(\0132).CM"
    "sgDOTARealtimeGameStatsTerse.GraphData\022\023"
    "\n\013delta_frame\030\005 \001(\010\032\250\001\n\013TeamDetails\022\023\n\013t"
    "eam_number\030\001 \001(\r\022\017\n\007team_id\030\002 \001(\r\022\021\n\ttea"
    "m_name\030\003 \001(\t\022\021\n\tteam_logo\030\004 \001(\006\022\r\n\005score"
    "\030\005 \001(\r\022>\n\007players\030\006 \003(\0132-.CMsgDOTARealti"
    "meGameStatsTerse.PlayerDetails\032\373\001\n\rPlaye"
    "rDetails\022\021\n\taccountid\030\001 \001(\r\022\020\n\010playerid\030"
    "\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\014\n\004team\030\004 \001(\r\022\016\n\006her"
    "oid\030\005 \001(\r\022\r\n\005level\030\006 \001(\r\022\022\n\nkill_count\030\007"
    " \001(\r\022\023\n\013death_count\030\010 \001(\r\022\025\n\rassists_cou"
    "nt\030\t \001(\r\022\024\n\014denies_count\030\n \001(\r\022\020\n\010lh_cou"
    "nt\030\013 \001(\r\022\014\n\004gold\030\014 \001(\r\022\t\n\001x\030\r \001(\002\022\t\n\001y\030\016"
    " \001(\002\032p\n\017BuildingDetails\022\014\n\004team\030\001 \001(\r\022\017\n"
    "\007heading\030\002 \001(\002\022\014\n\004type\030\003 \001(\r\022\014\n\004lane\030\004 \001"
    "(\r\022\014\n\004tier\030\005 \001(\r\022\t\n\001x\030\006 \001(\002\022\t\n\001y\030\007 \001(\002\032\253"
    "\001\n\014MatchDetails\022\027\n\017server_steam_id\030\001 \001(\006"
    "\022\017\n\007matchid\030\002 \001(\004\022\021\n\ttimestamp\030\003 \001(\r\022\021\n\t"
    "game_time\030\004 \001(\005\022%\n\035steam_broadcaster_acc"
    "ount_ids\030\006 \003(\r\022\021\n\tgame_mode\030\007 \001(\r\022\021\n\tlea"
    "gue_id\030\010 \001(\r\032\037\n\tGraphData\022\022\n\ngraph_gold\030"
    "\001 \003(\005*\323\262\001\n\nEDOTAGCMsg\022\025\n\020k_EMsgGCDOTABas"
    "e\020\3306\022\034\n\027k_EMsgGCGeneralResponse\020\3316\022\035\n\030k_"
    "EMsgGCGameMatchSignOut\020\3346\022%\n k_EMsgGCGam"
    "eMatchSignOutResponse\020\3356\022\034\n\027k_EMsgGCJoin"
    "ChatChannel\020\3416\022$\n\037k_EMsgGCJoinChatChanne"
    "lResponse\020\3426\022\037\n\032k_EMsgGCOtherJoinedChann"
    "el\020\3456\022\035\n\030k_EMsgGCOtherLeftChannel\020\3466\022\035\n\030"
    "k_EMsgGCMatchHistoryList\020\3516\022\"\n\035k_EMsgSer"
    "verToGCRequestStatus\020\3626\022\035\n\030k_EMsgGCGetRe"
    "centMatches\020\3636\022\"\n\035k_EMsgGCRecentMatchesR"
    "esponse\020\3646\022\036\n\031k_EMsgGCFindSourceTVGames\020"
    "\3676\022\"\n\035k_EMsgGCSourceTVGamesResponse\020\3706\022\036"
    "\n\031k_EMsgGCStartFindingMatch\020\3716\022\035\n\030k_EMsg"
    "GCConnectedPlayers\020\3726\022\037\n\032k_EMsgGCAbandon"
    "CurrentGame\020\3736\022\035\n\030k_EMsgGCStopFindingMat"
    "ch\020\3746\022 \n\033k_EMsgGCPracticeLobbyCreate\020\3766\022"
    "\037\n\032k_EMsgGCPracticeLobbyLeave\020\2007\022 \n\033k_EM"
    "sgGCPracticeLobbyLaunch\020\2017\022\036\n\031k_EMsgGCPr"
    "acticeLobbyList\020\2027\022&\n!k_EMsgGCPracticeLo"
    "bbyListResponse\020\2037\022\036\n\031k_EMsgGCPracticeLo"
    "bbyJoin\020\2047\022$\n\037k_EMsgGCPracticeLobbySetDe"
    "tails\020\2067\022%\n k_EMsgGCPracticeLobbySetTeam"
    "Slot\020\2077\022)\n$k_EMsgGCInitialQuestionnaireR"
    "esponse\020\2117\022\036\n\031k_EMsgGCTournamentRequest\020"
    "\2137\022\037\n\032k_EMsgGCTournamentResponse\020\2147\022\"\n\035k"
    "_EMsgGCPracticeLobbyResponse\020\2177\022\"\n\035k_EMs"
    "gGCBroadcastNotification\020\2207\022!\n\034k_EMsgGCL"
    "iveScoreboardUpdate\020\2217\022#\n\036k_EMsgGCReques"
    "tChatChannelList\020\2247\022+\n&k_EMsgGCRequestCh"
    "atChannelListResponse\020\2257\022\033\n\026k_EMsgGCRequ"
    "estMatches\020\2307\022#\n\036k_EMsgGCRequestMatchesR"
    "esponse\020\2317\022#\n\036k_EMsgGCRequestPlayerResou"
    "rces\020\2347\022+\n&k_EMsgGCRequestPlayerResource"
    "sResponse\020\2357\022\024\n\017k_EMsgGCReadyUp\020\2367\022\'\n\"k_"
    "EMsgGCKickedFromMatchmakingQueue\020\2377\022\033\n\026k"
    "_EMsgGCLeaverDetected\020\2407\022\037\n\032k_EMsgGCSpec"
    "tateFriendGame\020\2417\022\'\n\"k_EMsgGCSpectateFri"
    "endGameResponse\020\2427\022\032\n\025k_EMsgGCPlayerRepo"
    "rts\020\2437\022$\n\037k_EMsgGCReportsRemainingReques"
    "t\020\2447\022%\n k_EMsgGCReportsRemainingResponse"
    "\020\2457\022\037\n\032k_EMsgGCSubmitPlayerReport\020\2467\022\'\n\""
    "k_EMsgGCSubmitPlayerReportResponse\020\2477\022\030\n"
    "\023k_EMsgGCGameChatLog\020\2507\022\036\n\031k_EMsgGCPract"
    "iceLobbyKick\020\2517\022 \n\033k_EMsgGCReportCountsR"
    "equest\020\2527\022!\n\034k_EMsgGCReportCountsRespons"
    "e\020\2537\022\035\n\030k_EMsgGCRequestSaveGames\020\2547\022#\n\036k"
    "_EMsgGCRequestSaveGamesServer\020\2557\022%\n k_EM"
    "sgGCRequestSaveGamesResponse\020\2567\022#\n\036k_EMs"
    "gGCLeaverDetectedResponse\020\2577\022\"\n\035k_EMsgGC"
    "PlayerFailedToConnect\020\2607\022\035\n\030k_EMsgGCGCTo"
    "RelayConnect\020\2617\022%\n k_EMsgGCGCToRelayConn"
    "ectresponse\020\2627\022\026\n\021k_EMsgGCWatchGame\020\2637\022\036"
    "\n\031k_EMsgGCWatchGameResponse\020\2647\022\035\n\030k_EMsg"
    "GCBanStatusRequest\020\2657\022\036\n\031k_EMsgGCBanStat"
    "usResponse\020\2667\022 \n\033k_EMsgGCMatchDetailsReq"
    "uest\020\2677\022!\n\034k_EMsgGCMatchDetailsResponse\020"
    "\2707\022\034\n\027k_EMsgGCCancelWatchGame\020\2717\022\033\n\026k_EM"
    "sgGCProfileRequest\020\2727\022\034\n\027k_EMsgGCProfile"
    "Response\020\2737\022\022\n\rk_EMsgGCPopup\020\2767\022,\n\'k_EMs"
    "gGCDOTAClearNotifySuccessfulReport\020\3007\022\032\n"
    "\025k_EMsgGCGenericResult\020\3047\022+\n&k_EMsgGCFri"
    "endPracticeLobbyListRequest\020\3077\022,\n\'k_EMsg"
    "GCFriendPracticeLobbyListResponse\020\3107\022&\n!"
    "k_EMsgGCPracticeLobbyJoinResponse\020\3117\022%\n "
    "k_EMsgClientEconNotification_Job\020\3127\022\027\n\022k"
    "_EMsgGCCreateTeam\020\3137\022\037\n\032k_EMsgGCCreateTe"
    "amResponse\020\3147\022\030\n\023k_EMsgGCDisbandTeam\020\3157\022"
    " \n\033k_EMsgGCDisbandTeamResponse\020\3167\022\034\n\027k_E"
    "MsgGCRequestTeamData\020\3177\022$\n\037k_EMsgGCReque"
    "stTeamDataResponse\020\3207\022\025\n\020k_EMsgGCTeamDat"
    "a\020\3217\022#\n\036k_EMsgGCTeamInvite_InviterToGC\020\322"
    "7\0224\n/k_EMsgGCTeamInvite_GCImmediateRespo"
    "nseToInviter\020\3237\022*\n%k_EMsgGCTeamInvite_GC"
    "RequestToInvitee\020\3247\022+\n&k_EMsgGCTeamInvit"
    "e_InviteeResponseToGC\020\3257\022+\n&k_EMsgGCTeam"
    "Invite_GCResponseToInviter\020\3267\022+\n&k_EMsgG"
    "CTeamInvite_GCResponseToInvitee\020\3277\022\033\n\026k_"
    "EMsgGCKickTeamMember\020\3307\022#\n\036k_EMsgGCKickT"
    "eamMemberResponse\020\3317\022\026\n\021k_EMsgGCLeaveTea"
    "m\020\3327\022\036\n\031k_EMsgGCLeaveTeamResponse\020\3337\022#\n\036"
    "k_EMsgGCSuggestTeamMatchmaking\020\3347\022%\n k_E"
    "MsgGCPlayerHeroesFavoritesAdd\020\3357\022(\n#k_EM"
    "sgGCPlayerHeroesFavoritesRemove\020\3367\022\031\n\024k_"
    "EMsgGCEditTeamLogo\020\3437\022!\n\034k_EMsgGCEditTea"
    "mLogoResponse\020\3447\022\034\n\027k_EMsgGCSetShowcaseH"
    "ero\020\3457\022%\n k_EMsgGCApplyTeamToPracticeLob"
    "by\020\3467\022+\n&k_EMsgGCRequestInternatinalTick"
    "etEmail\020\3477\022\036\n\031k_EMsgGCTransferTeamAdmin\020"
    "\3507\022 \n\033k_EMsgGCClearTournamentGame\020\3517\022\034\n\027"
    "k_EMsgRequestLeagueInfo\020\3537\022\035\n\030k_EMsgResp"
    "onseLeagueInfo\020\3547\022.\n)k_EMsgGCPracticeLob"
    "byJoinBroadcastChannel\020\3557\022!\n\034k_EMsgGC_To"
    "urnamentItemEvent\020\3567\022)\n$k_EMsgGC_Tournam"
    "entItemEventResponse\020\3577\022\030\n\023k_EMsgCastMat"
    "chVote\020\3607\022 \n\033k_EMsgCastMatchVoteResponse"
    "\020\3617\022\034\n\027k_EMsgRetrieveMatchVote\020\3627\022$\n\037k_E"
    "MsgRetrieveMatchVoteResponse\020\3637\022\026\n\021k_EMs"
    "gTeamFanfare\020\3647\022\036\n\031k_EMsgResponseTeamFan"
    "fare\020\3657\022&\n!k_EMsgGC_GameServerUploadSave"
    "Game\020\3667\022&\n!k_EMsgGC_GameServerSaveGameRe"
    "sult\020\3677\022#\n\036k_EMsgGC_GameServerGetLoadGam"
    "e\020\3707\022)\n$k_EMsgGC_GameServerGetLoadGameRe"
    "sult\020\3717\022\037\n\032k_EMsgGCTeamProfileRequest\020\3747"
    "\022 \n\033k_EMsgGCTeamProfileResponse\020\3757\022\034\n\027k_"
    "EMsgGCEditTeamDetails\020\3767\022$\n\037k_EMsgGCEdit"
    "TeamDetailsResponse\020\3777\022\037\n\032k_EMsgGCProTea"
    "mListRequest\020\2008\022 \n\033k_EMsgGCProTeamListRe"
    "sponse\020\2018\022\032\n\025k_EMsgGCReadyUpStatus\020\2028\022\027\n"
    "\022k_EMsgGCHallOfFame\020\2038\022\036\n\031k_EMsgGCHallOf"
    "FameRequest\020\2048\022\037\n\032k_EMsgGCHallOfFameResp"
    "onse\020\2058\022&\n!k_EMsgGCGenerateDiretidePrize"
    "List\020\2068\022!\n\034k_EMsgGCRewardDiretidePrizes\020"
    "\2108\022+\n&k_EMsgGCDiretidePrizesRewardedResp"
    "onse\020\2118\022&\n!k_EMsgGCHalloweenHighScoreReq"
    "uest\020\2128\022\'\n\"k_EMsgGCHalloweenHighScoreRes"
    "ponse\020\2138\022.\n)k_EMsgGCGenerateDiretidePriz"
    "eListResponse\020\2148\022#\n\036k_EMsgGCStorePromoPa"
    "gesRequest\020\2168\022$\n\037k_EMsgGCStorePromoPages"
    "Response\020\2178\022\035\n\030k_EMsgGCSpawnLootGreevil\020"
    "\2208\022\037\n\032k_EMsgGCDismissLootGreevil\020\2218\022\037\n\032k"
    "_EMsgGCToGCMatchCompleted\020\2228\022\'\n\"k_EMsgGC"
    "DismissLootGreevilResponse\020\2238\022!\n\034k_EMsgG"
    "CBalancedShuffleLobby\020\2248\022&\n!k_EMsgGCToGC"
    "CheckLeaguePermission\020\2258\022.\n)k_EMsgGCToGC"
    "CheckLeaguePermissionResponse\020\2268\022\"\n\035k_EM"
    "sgGCLeagueScheduleRequest\020\2278\022#\n\036k_EMsgGC"
    "LeagueScheduleResponse\020\2308\022\037\n\032k_EMsgGCLea"
    "gueScheduleEdit\020\2318\022\'\n\"k_EMsgGCLeagueSche"
    "duleEditResponse\020\2328\022\"\n\035k_EMsgGCLeaguesIn"
    "MonthRequest\020\2338\022#\n\036k_EMsgGCLeaguesInMont"
    "hResponse\020\2348\022$\n\037k_EMsgGCMatchmakingStats"
    "Request\020\2358\022%\n k_EMsgGCMatchmakingStatsRe"
    "sponse\020\2368\022\032\n\025k_EMsgGCBotGameCreate\020\2378\022\"\n"
    "\035k_EMsgGCSetMatchHistoryAccess\020\2408\022*\n%k_E"
    "MsgGCSetMatchHistoryAccessResponse\020\2418\022\034\n"
    "\027k_EMsgUpgradeLeagueItem\020\2438\022$\n\037k_EMsgUpg"
    "radeLeagueItemResponse\020\2448\022%\n k_EMsgGCTea"
    "mMemberProfileRequest\020\2458\022\"\n\035k_EMsgGCWatc"
    "hDownloadedReplay\020\2468\022 \n\033k_EMsgGCSetMapLo"
    "cationState\020\2478\022(\n#k_EMsgGCSetMapLocation"
    "StateResponse\020\2508\022\036\n\031k_EMsgGCResetMapLoca"
    "tions\020\2518\022&\n!k_EMsgGCResetMapLocationsRes"
    "ponse\020\2528\022\032\n\025k_EMsgGCTeamOnProfile\020\2538\022\035\n\030"
    "k_EMsgGCSetFeaturedItems\020\2548\022\032\n\025k_EMsgGCF"
    "eaturedItems\020\2578\022$\n\037k_EMsgRefreshPartnerA"
    "ccountLink\020\2608\022$\n\037k_EMsgClientsRejoinChat"
    "Channels\020\2618\022 \n\033k_EMsgGCToGCGetUserChatIn"
    "fo\020\2628\022(\n#k_EMsgGCToGCGetUserChatInfoResp"
    "onse\020\2638\022%\n k_EMsgGCToGCLeaveAllChatChann"
    "els\020\2648\022%\n k_EMsgGCToGCUpdateAccountChatB"
    "an\020\2658\022\037\n\032k_EMsgGCGuildCreateRequest\020\2668\022 "
    "\n\033k_EMsgGCGuildCreateResponse\020\2678\022\'\n\"k_EM"
    "sgGCGuildSetAccountRoleRequest\020\2708\022(\n#k_E"
    "MsgGCGuildSetAccountRoleResponse\020\2718\022\035\n\030k"
    "_EMsgGCRequestGuildData\020\2728\022\026\n\021k_EMsgGCGu"
    "ildData\020\2738\022&\n!k_EMsgGCGuildInviteAccount"
    "Request\020\2748\022\'\n\"k_EMsgGCGuildInviteAccount"
    "Response\020\2758\022%\n k_EMsgGCGuildCancelInvite"
    "Request\020\2768\022&\n!k_EMsgGCGuildCancelInviteR"
    "esponse\020\2778\022&\n!k_EMsgGCGuildUpdateDetails"
    "Request\020\3008\022\'\n\"k_EMsgGCGuildUpdateDetails"
    "Response\020\3018\022\036\n\031k_EMsgGCToGCCanInviteUser"
    "\020\3028\022&\n!k_EMsgGCToGCCanInviteUserResponse"
    "\020\3038\022\034\n\027k_EMsgGCToGCGetUserRank\020\3048\022$\n\037k_E"
    "MsgGCToGCGetUserRankResponse\020\3058\022 \n\033k_EMs"
    "gGCToGCUpdateTeamStats\020\3108\022\034\n\027k_EMsgGCToG"
    "CGetTeamRank\020\3118\022$\n\037k_EMsgGCToGCGetTeamRa"
    "nkResponse\020\3128\022 \n\033k_EMsgGCTeamIDByNameReq"
    "uest\020\3158\022!\n\034k_EMsgGCTeamIDByNameResponse\020"
    "\3168\022\025\n\020k_EMsgGCEditTeam\020\3178\022 \n\033k_EMsgGCPas"
    "sportDataRequest\020\3208\022!\n\034k_EMsgGCPassportD"
    "ataResponse\020\3218\022\033\n\026k_EMsgGCNotInGuildData"
    "\020\3238\022\034\n\027k_EMsgGCGuildInviteData\020\3268\022\037\n\032k_E"
    "MsgGCToGCGetLeagueAdmin\020\3278\022\'\n\"k_EMsgGCTo"
    "GCGetLeagueAdminResponse\020\3308\022#\n\036k_EMsgGCR"
    "equestLeaguePrizePool\020\3328\022+\n&k_EMsgGCRequ"
    "estLeaguePrizePoolResponse\020\3338\022,\n\'k_EMsgG"
    "CToGCUpdateOpenGuildPartyRequest\020\3358\022-\n(k"
    "_EMsgGCToGCUpdateOpenGuildPartyResponse\020"
    "\3368\022-\n(k_EMsgGCToGCDestroyOpenGuildPartyR"
    "equest\020\3378\022.\n)k_EMsgGCToGCDestroyOpenGuil"
    "dPartyResponse\020\3408\022\037\n\032k_EMsgGCGuildUpdate"
    "Message\020\3418\022%\n k_EMsgGCPartySetOpenGuildR"
    "equest\020\3428\022&\n!k_EMsgGCPartySetOpenGuildRe"
    "sponse\020\3438\022\"\n\035k_EMsgGCGuildOpenPartyRefre"
    "sh\020\3448\022&\n!k_EMsgGCJoinOpenGuildPartyReque"
    "st\020\3458\022\'\n\"k_EMsgGCJoinOpenGuildPartyRespo"
    "nse\020\3468\022\035\n\030k_EMsgGCLeaveChatChannel\020\3508\022\030\n"
    "\023k_EMsgGCChatMessage\020\3518\022\035\n\030k_EMsgGCGetHe"
    "roStandings\020\3528\022%\n k_EMsgGCGetHeroStandin"
    "gsResponse\020\3538\022!\n\034k_EMsgGCGuildEditLogoRe"
    "quest\020\3578\022\"\n\035k_EMsgGCGuildEditLogoRespons"
    "e\020\3608\022.\n)k_EMsgGCGuildmatePracticeLobbyLi"
    "stRequest\020\3618\022/\n*k_EMsgGCGuildmatePractic"
    "eLobbyListResponse\020\3628\022*\n%k_EMsgGCItemEdi"
    "torReservationsRequest\020\3638\022+\n&k_EMsgGCIte"
    "mEditorReservationsResponse\020\3648\022%\n k_EMsg"
    "GCItemEditorReserveItemDef\020\3658\022-\n(k_EMsgG"
    "CItemEditorReserveItemDefResponse\020\3668\022)\n$"
    "k_EMsgGCItemEditorReleaseReservation\020\3678\022"
    "1\n,k_EMsgGCItemEditorReleaseReservationR"
    "esponse\020\3708\022!\n\034k_EMsgGCRewardTutorialPriz"
    "es\020\3718\022*\n%k_EMsgGCLastHitChallengeHighSco"
    "rePost\020\3728\022-\n(k_EMsgGCLastHitChallengeHig"
    "hScoreRequest\020\3738\022.\n)k_EMsgGCLastHitChall"
    "engeHighScoreResponse\020\3748\022\'\n\"k_EMsgGCCrea"
    "teFantasyLeagueRequest\020\3758\022(\n#k_EMsgGCCre"
    "ateFantasyLeagueResponse\020\3768\022%\n k_EMsgGCF"
    "antasyLeagueInfoRequest\020\2019\022&\n!k_EMsgGCFa"
    "ntasyLeagueInfoResponse\020\2029\022\036\n\031k_EMsgGCFa"
    "ntasyLeagueInfo\020\2039\022%\n k_EMsgGCCreateFant"
    "asyTeamRequest\020\2049\022&\n!k_EMsgGCCreateFanta"
    "syTeamResponse\020\2059\022#\n\036k_EMsgGCEditFantasy"
    "TeamRequest\020\2069\022$\n\037k_EMsgGCEditFantasyTea"
    "mResponse\020\2079\0224\n/k_EMsgGCFantasyTeamInfoR"
    "equestByFantasyLeagueID\020\2109\0223\n.k_EMsgGCFa"
    "ntasyTeamInfoRequestByOwnerAccountID\020\2119\022"
    "$\n\037k_EMsgGCFantasyTeamInfoResponse\020\2129\022\034\n"
    "\027k_EMsgGCFantasyTeamInfo\020\2139\022#\n\036k_EMsgGCF"
    "antasyLivePlayerStats\020\2149\022$\n\037k_EMsgGCFant"
    "asyFinalPlayerStats\020\2159\022\031\n\024k_EMsgGCFantas"
    "yMatch\020\2169\022\037\n\032k_EMsgGCToGCReloadVersions\020"
    "\2179\022$\n\037k_EMsgGCFantasyTeamScoreRequest\020\2209"
    "\022%\n k_EMsgGCFantasyTeamScoreResponse\020\2219\022"
    "(\n#k_EMsgGCFantasyTeamStandingsRequest\020\222"
    "9\022)\n$k_EMsgGCFantasyTeamStandingsRespons"
    "e\020\2239\022&\n!k_EMsgGCFantasyPlayerScoreReques"
    "t\020\2249\022\'\n\"k_EMsgGCFantasyPlayerScoreRespon"
    "se\020\2259\022*\n%k_EMsgGCFantasyPlayerStandingsR"
    "equest\020\2269\022+\n&k_EMsgGCFantasyPlayerStandi"
    "ngsResponse\020\2279\022\033\n\026k_EMsgGCFlipLobbyTeams"
    "\020\2309\022\035\n\030k_EMsgGCCustomGameCreate\020\2319\022%\n k_"
    "EMsgGCFantasyPlayerInfoRequest\020\2329\022&\n!k_E"
    "MsgGCFantasyPlayerInfoResponse\020\2339\022-\n(k_E"
    "MsgGCToGCProcessPlayerReportForTarget\020\2349"
    "\022%\n k_EMsgGCToGCProcessReportSuccess\020\2359\022"
    "%\n k_EMsgGCNotifyAccountFlagsChange\020\2369\022\036"
    "\n\031k_EMsgGCSetProfilePrivacy\020\2379\022&\n!k_EMsg"
    "GCSetProfilePrivacyResponse\020\2409\022 \n\033k_EMsg"
    "GCSteamProfileRequest\020\2419\022(\n#k_EMsgGCStea"
    "mProfileRequestResponse\020\2429\022+\n&k_EMsgGCFa"
    "ntasyLeagueCreateInfoRequest\020\2439\022,\n\'k_EMs"
    "gGCFantasyLeagueCreateInfoResponse\020\2449\022+\n"
    "&k_EMsgGCFantasyLeagueInviteInfoRequest\020"
    "\2459\022,\n\'k_EMsgGCFantasyLeagueInviteInfoRes"
    "ponse\020\2469\022\036\n\031k_EMsgGCClientIgnoredUser\020\2479"
    "\022\'\n\"k_EMsgGCFantasyLeagueCreateRequest\020\250"
    "9\022(\n#k_EMsgGCFantasyLeagueCreateResponse"
    "\020\2519\022%\n k_EMsgGCFantasyTeamCreateRequest\020"
    "\2529\022&\n!k_EMsgGCFantasyTeamCreateResponse\020"
    "\2539\022/\n*k_EMsgGCFantasyLeagueFriendJoinLis"
    "tRequest\020\2549\0220\n+k_EMsgGCFantasyLeagueFrie"
    "ndJoinListResponse\020\2559\022\034\n\027k_EMsgGCClientS"
    "uspended\020\2569\022 \n\033k_EMsgGCPartyMemberSetCoa"
    "ch\020\2579\022,\n\'k_EMsgGCFantasyLeagueEditInvite"
    "sRequest\020\2609\022-\n(k_EMsgGCFantasyLeagueEdit"
    "InvitesResponse\020\2619\022\"\n\035k_EMsgGCPracticeLo"
    "bbySetCoach\020\2629\022)\n$k_EMsgGCFantasyLeagueE"
    "ditInfoRequest\020\2639\022*\n%k_EMsgGCFantasyLeag"
    "ueEditInfoResponse\020\2649\022,\n\'k_EMsgGCFantasy"
    "LeagueDraftStatusRequest\020\2659\022%\n k_EMsgGCF"
    "antasyLeagueDraftStatus\020\2669\022,\n\'k_EMsgGCFa"
    "ntasyLeagueDraftPlayerRequest\020\2679\022-\n(k_EM"
    "sgGCFantasyLeagueDraftPlayerResponse\020\2709\022"
    ")\n$k_EMsgGCFantasyLeagueMatchupsRequest\020"
    "\2719\022*\n%k_EMsgGCFantasyLeagueMatchupsRespo"
    "nse\020\2729\022)\n$k_EMsgGCFantasyTeamRosterSwapR"
    "equest\020\2739\022*\n%k_EMsgGCFantasyTeamRosterSw"
    "apResponse\020\2749\022%\n k_EMsgGCFantasyTeamRost"
    "erRequest\020\2759\022&\n!k_EMsgGCFantasyTeamRoste"
    "rResponse\020\2769\022\037\n\032k_EMsgGCNexonPartnerUpda"
    "te\020\2779\022*\n%k_EMsgGCToGCProcessPCBangReward"
    "Points\020\3009\022,\n\'k_EMsgGCFantasyTeamRosterAd"
    "dDropRequest\020\3019\022-\n(k_EMsgGCFantasyTeamRo"
    "sterAddDropResponse\020\3029\022&\n!k_EMsgPresente"
    "dClientTerminateDlg\020\3039\022/\n*k_EMsgGCFantas"
    "yPlayerHisoricalStatsRequest\020\3049\0220\n+k_EMs"
    "gGCFantasyPlayerHisoricalStatsResponse\020\305"
    "9\022%\n k_EMsgGCPCBangTimedRewardMessage\020\3069"
    "\022,\n\'k_EMsgGCLobbyUpdateBroadcastChannelI"
    "nfo\020\3079\022%\n k_EMsgGCFantasyTeamTradesReque"
    "st\020\3109\022&\n!k_EMsgGCFantasyTeamTradesRespon"
    "se\020\3119\022*\n%k_EMsgGCFantasyTeamTradeCancelR"
    "equest\020\3129\022+\n&k_EMsgGCFantasyTeamTradeCan"
    "celResponse\020\3139\022$\n\037k_EMsgGCToGCGrantTourn"
    "amentItem\020\3149\022)\n$k_EMsgGCProcessFantasySc"
    "heduledEvent\020\3159\022&\n!k_EMsgGCToGCGrantPCBa"
    "ngRewardItem\020\3169\022)\n$k_EMsgGCToGCUpgradeTw"
    "itchViewerItems\020\3179\022\'\n\"k_EMsgGCToGCGetLiv"
    "eMatchAffiliates\020\3209\022/\n*k_EMsgGCToGCGetLi"
    "veMatchAffiliatesResponse\020\3219\022*\n%k_EMsgGC"
    "ToGCUpdatePlayerPennantCounts\020\3229\022\'\n\"k_EM"
    "sgGCToGCGetPlayerPennantCounts\020\3239\022/\n*k_E"
    "MsgGCToGCGetPlayerPennantCountsResponse\020"
    "\3249\022.\n)k_EMsgGCGameMatchSignOutPermission"
    "Request\020\3259\022/\n*k_EMsgGCGameMatchSignOutPe"
    "rmissionResponse\020\3269\022&\n!k_EMsgDOTAChatCha"
    "nnelMemberUpdate\020\3279\022\037\n\032k_EMsgDOTAAwardEv"
    "entPoints\020\3309\022\037\n\032k_EMsgDOTARedeemEventPri"
    "ze\020\3319\022\'\n\"k_EMsgDOTARedeemEventPrizeRespo"
    "nse\020\3329\022\035\n\030k_EMsgDOTAGetEventPoints\020\3339\022%\n"
    " k_EMsgDOTAGetEventPointsResponse\020\3349\022(\n#"
    "k_EMsgGCToGCSignoutAwardEventPoints\020\3369\022!"
    "\n\034k_EMsgDOTASendFriendRecruits\020\3419\022$\n\037k_E"
    "MsgDOTAFriendRecruitsRequest\020\3429\022%\n k_EMs"
    "gDOTAFriendRecruitsResponse\020\3439\022/\n*k_EMsg"
    "DOTAFriendRecruitInviteAcceptDecline\020\3449\022"
    "\'\n\"k_EMsgGCPartyLeaderWatchGamePrompt\020\3459"
    "\022#\n\036k_EMsgDOTAFrostivusTimeElapsed\020\3469\022#\n"
    "\036k_EMsgGCToGCGrantEarnedLicense\020\3479\022#\n\036k_"
    "EMsgDOTALiveLeagueGameUpdate\020\3529\022\036\n\031k_EMs"
    "gDOTAChatGetUserList\020\3539\022&\n!k_EMsgDOTACha"
    "tGetUserListResponse\020\3549\022#\n\036k_EMsgGCCompe"
    "ndiumSetSelection\020\3559\022\"\n\035k_EMsgGCCompendi"
    "umDataRequest\020\3569\022#\n\036k_EMsgGCCompendiumDa"
    "taResponse\020\3579\022$\n\037k_EMsgDOTAGetPlayerMatc"
    "hHistory\020\3609\022,\n\'k_EMsgDOTAGetPlayerMatchH"
    "istoryResponse\020\3619\022$\n\037k_EMsgGCToGCMatchma"
    "kingAddParty\020\3629\022\'\n\"k_EMsgGCToGCMatchmaki"
    "ngRemoveParty\020\3639\022,\n\'k_EMsgGCToGCMatchmak"
    "ingRemoveAllParties\020\3649\022&\n!k_EMsgGCToGCMa"
    "tchmakingMatchFound\020\3659\022+\n&k_EMsgGCToGCUp"
    "dateMatchManagementStats\020\3669\022\'\n\"k_EMsgGCT"
    "oGCUpdateMatchmakingStats\020\3679\022 \n\033k_EMsgGC"
    "ToServerPingRequest\020\3709\022!\n\034k_EMsgGCToServ"
    "erPingResponse\020\3719\022#\n\036k_EMsgGCToServerCon"
    "soleCommand\020\3729\022)\n$k_EMsgGCToGCUpdateLive"
    "LeagueGameInfo\020\3749\022\031\n\024k_EMsgGCMakeOfferin"
    "g\020\3779\022\035\n\030k_EMsgGCRequestOfferings\020\200:\022%\n k"
    "_EMsgGCRequestOfferingsResponse\020\201:\022#\n\036k_"
    "EMsgGCToGCProcessMatchLeaver\020\202:\022!\n\034k_EMs"
    "gGCNotificationsRequest\020\203:\022\"\n\035k_EMsgGCNo"
    "tificationsResponse\020\204:\022#\n\036k_EMsgGCToGCMo"
    "difyNotification\020\205:\022$\n\037k_EMsgGCToGCSetNe"
    "wNotifications\020\206:\022!\n\034k_EMsgGCToGCSetIsLe"
    "agueAdmin\020\207:\022\035\n\030k_EMsgGCLeagueAdminState"
    "\020\210:\022%\n k_EMsgGCToGCSendLeagueAdminState\020"
    "\211:\022\034\n\027k_EMsgGCLeagueAdminList\020\212:\022)\n$k_EM"
    "sgGCNotificationsMarkReadRequest\020\213:\022\036\n\031k"
    "_EMsgGCFantasyMessageAdd\020\214:\022#\n\036k_EMsgGCF"
    "antasyMessagesRequest\020\215:\022$\n\037k_EMsgGCFant"
    "asyMessagesResponse\020\216:\022+\n&k_EMsgGCFantas"
    "yScheduledMatchesRequest\020\217:\022,\n\'k_EMsgGCF"
    "antasyScheduledMatchesResponse\020\220:\022\"\n\035k_E"
    "MsgGCToGCGrantLeagueAccess\020\221:\022\034\n\027k_EMsgG"
    "CEventGameCreate\020\223:\022*\n%k_EMsgGCPerfectWo"
    "rldUserLookupRequest\020\224:\022+\n&k_EMsgGCPerfe"
    "ctWorldUserLookupResponse\020\225:\022(\n#k_EMsgGC"
    "ToGCIncrementRecruitmentSDO\020\226:\022*\n%k_EMsg"
    "GCToGCIncrementRecruitmentLevel\020\227:\022\037\n\032k_"
    "EMsgGCFantasyRemoveOwner\020\230:\022\'\n\"k_EMsgGCF"
    "antasyRemoveOwnerResponse\020\231:\022(\n#k_EMsgGC"
    "RequestBatchPlayerResources\020\232:\0220\n+k_EMsg"
    "GCRequestBatchPlayerResourcesResponse\020\233:"
    "\022\"\n\035k_EMsgGCToGCSendUpdateLeagues\020\234:\022+\n&"
    "k_EMsgGCCompendiumSetSelectionResponse\020\235"
    ":\022\036\n\031k_EMsgGCPlayerInfoRequest\020\236:\022\027\n\022k_E"
    "MsgGCPlayerInfo\020\237:\022\035\n\030k_EMsgGCPlayerInfo"
    "Submit\020\240:\022%\n k_EMsgGCPlayerInfoSubmitRes"
    "ponse\020\241:\022 \n\033k_EMsgGCToGCGetAccountLevel\020"
    "\242:\022(\n#k_EMsgGCToGCGetAccountLevelRespons"
    "e\020\243:\022\"\n\035k_EMsgGCToGCGetAccountPartner\020\244:"
    "\022*\n%k_EMsgGCToGCGetAccountPartnerRespons"
    "e\020\245:\022\"\n\035k_EMsgGCToGCGetAccountProfile\020\246:"
    "\022*\n%k_EMsgGCToGCGetAccountProfileRespons"
    "e\020\247:\022(\n#k_EMsgDOTAGetWeekendTourneySched"
    "ule\020\250:\022%\n k_EMsgDOTAWeekendTourneySchedu"
    "le\020\251:\022+\n&k_EMsgGCJoinableCustomGameModes"
    "Request\020\252:\022,\n\'k_EMsgGCJoinableCustomGame"
    "ModesResponse\020\253:\022)\n$k_EMsgGCJoinableCust"
    "omLobbiesRequest\020\254:\022*\n%k_EMsgGCJoinableC"
    "ustomLobbiesResponse\020\255:\022!\n\034k_EMsgGCQuick"
    "JoinCustomLobby\020\256:\022)\n$k_EMsgGCQuickJoinC"
    "ustomLobbyResponse\020\257:\022&\n!k_EMsgGCToGCGra"
    "ntEventPointAction\020\260:\022\037\n\032k_EMsgServerGet"
    "EventPoints\020\261:\022\'\n\"k_EMsgServerGetEventPo"
    "intsResponse\020\262:\022&\n!k_EMsgServerGrantSurv"
    "eyPermission\020\263:\022.\n)k_EMsgServerGrantSurv"
    "eyPermissionResponse\020\264:\022$\n\037k_EMsgClientP"
    "rovideSurveyResult\020\265:\022\'\n\"k_EMsgGCToGCSet"
    "CompendiumSelection\020\266:\022#\n\036k_EMsgGCToGCUp"
    "dateTI4HeroQuest\020\270:\022\"\n\035k_EMsgGCCompendiu"
    "mDataChanged\020\271:\022\'\n\"k_EMsgDOTAFantasyLeag"
    "ueFindRequest\020\272:\022(\n#k_EMsgDOTAFantasyLea"
    "gueFindResponse\020\273:\022\031\n\024k_EMsgGCHasItemQue"
    "ry\020\274:\022\034\n\027k_EMsgGCHasItemResponse\020\275:\022!\n\034k"
    "_EMsgGCConsumeFantasyTicket\020\276:\022(\n#k_EMsg"
    "GCConsumeFantasyTicketFailure\020\277:\022)\n$k_EM"
    "sgGCToGCGrantEventPointActionMsg\020\300:\022&\n!k"
    "_EMsgClientToGCTrackDialogResult\020\301:\022&\n!k"
    "_EMsgGCFantasyLeaveLeagueRequest\020\302:\022\'\n\"k"
    "_EMsgGCFantasyLeaveLeagueResponse\020\303:\022(\n#"
    "k_EMsgGCToGCGetCompendiumSelections\020\304:\0220"
    "\n+k_EMsgGCToGCGetCompendiumSelectionsRes"
    "ponse\020\305:\022)\n$k_EMsgServerToGCMatchConnect"
    "ionStats\020\306:\022\'\n\"k_EMsgGCToClientTournamen"
    "tItemDrop\020\307:\022$\n\037k_EMsgSQLDelayedGrantLea"
    "gueDrop\020\310:\022\'\n\"k_EMsgServerGCUpdateSpecta"
    "torCount\020\311:\022-\n(k_EMsgDOTAStartDailyHeroC"
    "hallengeRequest\020\312:\022-\n(k_EMsgGCFantasyPla"
    "yerScoreDetailsRequest\020\313:\022.\n)k_EMsgGCFan"
    "tasyPlayerScoreDetailsResponse\020\314:\022\037\n\032k_E"
    "MsgGCToGCEmoticonUnlock\020\315:\022\033\n\026k_EMsgSign"
    "OutDraftInfo\020\316:\022(\n#k_EMsgClientToGCEmoti"
    "conDataRequest\020\317:\022!\n\034k_EMsgGCToClientEmo"
    "ticonData\020\320:\022\?\n:k_EMsgGCPracticeLobbyTog"
    "gleBroadcastChannelCameramanStatus\020\321:\022,\n"
    "\'k_EMsgGCToGCCreateWeekendTourneyRequest"
    "\020\322:\022-\n(k_EMsgGCToGCCreateWeekendTourneyR"
    "esponse\020\323:\022*\n%k_EMsgGCToGCCreateGenericT"
    "eamsRequest\020\326:\022+\n&k_EMsgGCToGCCreateGene"
    "ricTeamsResponse\020\327:\022%\n k_EMsgSQLLaunchOn"
    "eWeekendTourney\020\330:\022(\n#k_EMsgClientToGCSe"
    "tAdditionalEquips\020\331:\022(\n#k_EMsgClientToGC"
    "GetAdditionalEquips\020\332:\0220\n+k_EMsgClientTo"
    "GCGetAdditionalEquipsResponse\020\333:\022(\n#k_EM"
    "sgServerToGCGetAdditionalEquips\020\334:\0220\n+k_"
    "EMsgServerToGCGetAdditionalEquipsRespons"
    "e\020\335:\022\031\n\024k_EMsgDOTARedeemItem\020\336:\022!\n\034k_EMs"
    "gDOTARedeemItemResponse\020\337:\022(\n#k_EMsgSQLG"
    "CToGCGrantAllHeroProgress\020\340:\022\'\n\"k_EMsgCl"
    "ientToGCGetAllHeroProgress\020\341:\022/\n*k_EMsgC"
    "lientToGCGetAllHeroProgressResponse\020\342:\022#"
    "\n\036k_EMsgGCToGCGetServerForClient\020\343:\022+\n&k"
    "_EMsgGCToGCGetServerForClientResponse\020\344:"
    "\022*\n%k_EMsgSQLProcessTournamentGameOutcom"
    "e\020\345:\022\"\n\035k_EMsgSQLGrantTrophyToAccount\020\346:"
    "\022\"\n\035k_EMsgClientToGCGetTrophyList\020\347:\022*\n%"
    "k_EMsgClientToGCGetTrophyListResponse\020\350:"
    "\022\"\n\035k_EMsgGCToClientTrophyAwarded\020\351:\022 \n\033"
    "k_EMsgGCGameBotMatchSignOut\020\352:\0221\n,k_EMsg"
    "GCGameBotMatchSignOutPermissionRequest\020\353"
    ":\022\031\n\024k_EMsgSignOutBotInfo\020\354:\022#\n\036k_EMsgGC"
    "ToGCUpdateProfileCards\020\355:\022#\n\036k_EMsgClien"
    "tToGCGetProfileCard\020\356:\022+\n&k_EMsgClientTo"
    "GCGetProfileCardResponse\020\357:\022#\n\036k_EMsgSer"
    "verToGCGetProfileCard\020\360:\022+\n&k_EMsgServer"
    "ToGCGetProfileCardResponse\020\361:\022(\n#k_EMsgC"
    "lientToGCSetProfileCardSlots\020\362:\022\'\n\"k_EMs"
    "gGCToClientProfileCardUpdated\020\363:\022\'\n\"k_EM"
    "sgServerToGCVictoryPredictions\020\364:\022-\n(k_E"
    "MsgClientToGCMarkNotificationListRead\020\366:"
    "\022)\n$k_EMsgGCToClientNewNotificationAdded"
    "\020\367:\022\'\n\"k_EMsgServerToGCSuspiciousActivit"
    "y\020\370:\022&\n!k_EMsgSignOutCommunicationSummar"
    "y\020\371:\022+\n&k_EMsgServerToGCRequestStatus_Re"
    "sponse\020\372:\022%\n k_EMsgClientToGCCreateHeroS"
    "tatue\020\373:\022+\n&k_EMsgGCToClientHeroStatueCr"
    "eateResult\020\374:\022&\n!k_EMsgGCGCToLANServerRe"
    "layConnect\020\375:\022&\n!k_EMsgSignOutAssassinMi"
    "niGameInfo\020\376:\022\'\n\"k_EMsgServerToGCGetInga"
    "meEventData\020\377:\022/\n*k_EMsgGCToGCUpdateInga"
    "meEventDataBroadcast\020\200;\022-\n(k_EMsgGCToSer"
    "verIngameEventData_OraclePA\020\201;\022(\n#k_EMsg"
    "ServerToGCReportKillSummaries\020\202;\022$\n\037k_EM"
    "sgGCToGCReportKillSummaries\020\203;\022\'\n\"k_EMsg"
    "GCToGCUpdateAssassinMinigame\020\204;\022&\n!k_EMs"
    "gGCToGCFantasySetMatchLeague\020\205;\022*\n%k_EMs"
    "gClientToGCRecordCompendiumStats\020\206;\022(\n#k"
    "_EMsgGCItemEditorRequestLeagueInfo\020\207;\022)\n"
    "$k_EMsgGCItemEditorLeagueInfoResponse\020\210;"
    "\022(\n#k_EMsgGCToGCUpdatePlayerPredictions\020"
    "\211;\022%\n k_EMsgGCToServerPredictionResult\020\212"
    ";\0220\n+k_EMsgServerToGCSignoutAwardAdditio"
    "nalDrops\020\213;\022,\n\'k_EMsgGCToGCSignoutAwardA"
    "dditionalDrops\020\214;\022\'\n\"k_EMsgGCToClientEve"
    "ntStatusChanged\020\215;\022\035\n\030k_EMsgGCHasItemDef"
    "sQuery\020\216;\022 \n\033k_EMsgGCHasItemDefsResponse"
    "\020\217;\022,\n\'k_EMsgGCToGCReplayMonitorValidate"
    "Replay\020\221;\022-\n(k_EMsgClientToGCExchangeIte"
    "msForOffering\020\222;\0225\n0k_EMsgClientToGCExch"
    "angeItemsForOfferingResponse\020\223;\022\033\n\026k_EMs"
    "gLobbyEventPoints\020\224;\022%\n k_EMsgGCToGCGetC"
    "ustomGameTickets\020\225;\022-\n(k_EMsgGCToGCGetCu"
    "stomGameTicketsResponse\020\226;\022*\n%k_EMsgGCTo"
    "ClientNewBloomTimingUpdated\020\227;\022!\n\034k_EMsg"
    "GCToGCCustomGamePlayed\020\230;\022\'\n\"k_EMsgGCToG"
    "CGrantEventPointsToUser\020\231;\022)\n$k_EMsgGCTo"
    "GCSetEventMMPanicFlushTime\020\232;\022 \n\033k_EMsgG"
    "ameserverCrashReport\020\233;\022(\n#k_EMsgGameser"
    "verCrashReportResponse\020\234;\022(\n#k_EMsgGCToC"
    "lientSteamDatagramTicket\020\235;\022$\n\037k_EMsgGCT"
    "oGCGrantEventOwnership\020\236;\022(\n#k_EMsgGCToG"
    "CSendAccountsEventPoints\020\237;\022*\n%k_EMsgCli"
    "entToGCRerollPlayerChallenge\020\240;\022*\n%k_EMs"
    "gServerToGCRerollPlayerChallenge\020\241;\022*\n%k"
    "_EMsgGCRerollPlayerChallengeResponse\020\242;\022"
    "\'\n\"k_EMsgSignOutUpdatePlayerChallenge\020\243;"
    "\022#\n\036k_EMsgClientToGCSetPartyLeader\020\244;\022\'\n"
    "\"k_EMsgClientToGCCancelPartyInvites\020\245;\022$"
    "\n\037k_EMsgGCToGCMasterReloadAccount\020\246;\022&\n!"
    "k_EMsgSQLGCToGCGrantBackpackSlots\020\247;\022-\n("
    "k_EMsgSQLGrantLeagueMatchToTicketHolders"
    "\020\250;\0220\n+k_EMsgClientToGCSetAdditionalEqui"
    "psResponse\020\251;\022)\n$k_EMsgGCToGCEmoticonUnl"
    "ockNoRollback\020\252;\022%\n k_EMsgGCToGCGetCompe"
    "ndiumFanfare\020\253;\022$\n\037k_EMsgServerToGCHoldE"
    "ventPoints\020\254;\022(\n#k_EMsgSignOutReleaseEve"
    "ntPointHolds\020\255;\022#\n\036k_EMsgGCToGCChatNewUs"
    "erSession\020\256;\022$\n\037k_EMsgClientToGCGetLeagu"
    "eSeries\020\257;\022,\n\'k_EMsgClientToGCGetLeagueS"
    "eriesResponse\020\260;\022/\n*k_EMsgSQLGCToGCSigno"
    "utUpdateLeagueSchedule\020\261;\022*\n%k_EMsgGCToS"
    "erverUpdateBroadcastCheers\020\262;\022%\n k_EMsgC"
    "lientToGCApplyGemCombiner\020\263;\022\'\n\"k_EMsgCl"
    "ientToGCCreateStaticRecipe\020\264;\022/\n*k_EMsgC"
    "lientToGCCreateStaticRecipeResponse\020\265;\022$"
    "\n\037k_EMsgClientToGCGetAllHeroOrder\020\266;\022,\n\'"
    "k_EMsgClientToGCGetAllHeroOrderResponse\020"
    "\267;\022$\n\037k_EMsgSQLGCToGCGrantBadgePoints\020\270;"
    "\022\035\n\030k_EMsgGCDev_GrantWarKill\020\301>\022\'\n\"k_EMs"
    "gClientToGCCreateTeamShowcase\020\302>\022-\n(k_EM"
    "sgGCToClientTeamShowcaseCreateResult\020\303>\022"
    "%\n k_EMsgServerToGCLockCharmTrading\020\304>\022%"
    "\n k_EMsgDOTACNY2015EventPointUsage\020\305>\022\'\n"
    "\"k_EMsgClientToGCPlayerStatsRequest\020\306>\022("
    "\n#k_EMsgGCToClientPlayerStatsResponse\020\307>"
    "\022#\n\036k_EMsgGCClearPracticeLobbyTeam\020\310>\022)\n"
    "$k_EMsgClientToGCFindTopSourceTVGames\020\311>"
    "\0221\n,k_EMsgGCToClientFindTopSourceTVGames"
    "Response\020\312>\022\026\n\021k_EMsgGCLobbyList\020\313>\022\036\n\031k"
    "_EMsgGCLobbyListResponse\020\314>\022$\n\037k_EMsgGCP"
    "layerStatsMatchSignOut\020\315>\0221\n,k_EMsgClien"
    "tToGCCustomGamePlayerCountRequest\020\316>\0222\n-"
    "k_EMsgGCToClientCustomGamePlayerCountRes"
    "ponse\020\317>\0221\n,k_EMsgClientToGCSocialFeedPo"
    "stCommentRequest\020\320>\0222\n-k_EMsgGCToClientS"
    "ocialFeedPostCommentResponse\020\321>\0224\n/k_EMs"
    "gClientToGCCustomGamesFriendsPlayedReque"
    "st\020\322>\0225\n0k_EMsgGCToClientCustomGamesFrie"
    "ndsPlayedResponse\020\323>\0223\n.k_EMsgClientToGC"
    "FriendsPlayedCustomGameRequest\020\324>\0224\n/k_E"
    "MsgGCToClientFriendsPlayedCustomGameResp"
    "onse\020\325>\022*\n%k_EMsgClientToGCFeaturedHeroe"
    "sRequest\020\326>\022+\n&k_EMsgGCToClientFeaturedH"
    "eroesResponse\020\327>\022\037\n\032k_EMsgGCTopCustomGam"
    "esList\020\330>\0222\n-k_EMsgClientToGCSocialMatch"
    "PostCommentRequest\020\331>\0223\n.k_EMsgGCToClien"
    "tSocialMatchPostCommentResponse\020\332>\022.\n)k_"
    "EMsgClientToGCSocialMatchDetailsRequest\020"
    "\333>\022/\n*k_EMsgGCToClientSocialMatchDetails"
    "Response\020\334>\022!\n\034k_EMsgClientToGCSetPartyO"
    "pen\020\335>\022%\n k_EMsgClientToGCMergePartyInvi"
    "te\020\336>\022*\n%k_EMsgGCToClientMergeGroupInvit"
    "eReply\020\337>\022\'\n\"k_EMsgClientToGCMergePartyR"
    "esponse\020\340>\022,\n\'k_EMsgGCToClientMergeParty"
    "ResponseReply\020\341>\022(\n#k_EMsgClientToGCGetP"
    "rofileCardStats\020\342>\0220\n+k_EMsgClientToGCGe"
    "tProfileCardStatsResponse\020\343>\022,\n\'k_EMsgCl"
    "ientToGCTopLeagueMatchesRequest\020\344>\022,\n\'k_"
    "EMsgClientToGCTopFriendMatchesRequest\020\345>"
    "\022\'\n\"k_EMsgGCToClientTopMatchesResponse\020\346"
    ">\022,\n\'k_EMsgGCToClientProfileCardStatsUpd"
    "ated\020\350>\022\"\n\035k_EMsgServerToGCRealtimeStats"
    "\020\351>\022+\n&k_EMsgGCToServerRealtimeStatsStar"
    "tStop\020\352>\022%\n k_EMsgGCToGCGetServersForCli"
    "ents\020\355>\022-\n(k_EMsgGCToGCGetServersForClie"
    "ntsResponse\020\356>\022&\n!k_EMsgGCPracticeLobbyK"
    "ickFromTeam\020\357>\022!\n\034k_EMsgDOTAChatGetMembe"
    "rCount\020\360>\022)\n$k_EMsgDOTAChatGetMemberCoun"
    "tResponse\020\361>\0221\n,k_EMsgClientToGCSocialFe"
    "edPostMessageRequest\020\362>\0222\n-k_EMsgGCToCli"
    "entSocialFeedPostMessageResponse\020\363>\022/\n*k"
    "_EMsgCustomGameListenServerStartedLoadin"
    "g\020\364>\022*\n%k_EMsgCustomGameClientFinishedLo"
    "ading\020\365>\022/\n*k_EMsgGCPracticeLobbyCloseBr"
    "oadcastChannel\020\366>\022&\n!k_EMsgGCStartFindin"
    "gMatchResponse\020\367>\022!\n\034k_EMsgSQLGCToGCUpda"
    "teHeroMMR\020\370>\022$\n\037k_EMsgSQLGCToGCGrantAcco"
    "untFlag\020\371>\022 \n\033k_EMsgGCToGCGetAccountFlag"
    "s\020\372>\022(\n#k_EMsgGCToGCGetAccountFlagsRespo"
    "nse\020\373>\022\034\n\027k_EMsgSignOutWagerStats\020\374>*\300\004\n"
    "\rDOTA_GameMode\022\026\n\022DOTA_GAMEMODE_NONE\020\000\022\024"
    "\n\020DOTA_GAMEMODE_AP\020\001\022\024\n\020DOTA_GAMEMODE_CM"
    "\020\002\022\024\n\020DOTA_GAMEMODE_RD\020\003\022\024\n\020DOTA_GAMEMOD"
    "E_SD\020\004\022\024\n\020DOTA_GAMEMODE_AR\020\005\022\027\n\023DOTA_GAM"
    "EMODE_INTRO\020\006\022\024\n\020DOTA_GAMEMODE_HW\020\007\022\034\n\030D"
    "OTA_GAMEMODE_REVERSE_CM\020\010\022\026\n\022DOTA_GAMEMO"
    "DE_XMAS\020\t\022\032\n\026DOTA_GAMEMODE_TUTORIAL\020\n\022\024\n"
    "\020DOTA_GAMEMODE_MO\020\013\022\024\n\020DOTA_GAMEMODE_LP\020"
    "\014\022\027\n\023DOTA_GAMEMODE_POOL1\020\r\022\024\n\020DOTA_GAMEM"
    "ODE_FH\020\016\022\030\n\024DOTA_GAMEMODE_CUSTOM\020\017\022\024\n\020DO"
    "TA_GAMEMODE_CD\020\020\022\024\n\020DOTA_GAMEMODE_BD\020\021\022\037"
    "\n\033DOTA_GAMEMODE_ABILITY_DRAFT\020\022\022\027\n\023DOTA_"
    "GAMEMODE_EVENT\020\023\022\026\n\022DOTA_GAMEMODE_ARDM\020\024"
    "\022\030\n\024DOTA_GAMEMODE_1V1MID\020\025\022\033\n\027DOTA_GAMEM"
    "ODE_ALL_DRAFT\020\026*\275\003\n\016DOTA_GameState\022\035\n\031DO"
    "TA_GAMERULES_STATE_INIT\020\000\0221\n-DOTA_GAMERU"
    "LES_STATE_WAIT_FOR_PLAYERS_TO_LOAD\020\001\022\'\n#"
    "DOTA_GAMERULES_STATE_HERO_SELECTION\020\002\022&\n"
    "\"DOTA_GAMERULES_STATE_STRATEGY_TIME\020\003\022!\n"
    "\035DOTA_GAMERULES_STATE_PRE_GAME\020\004\022)\n%DOTA"
    "_GAMERULES_STATE_GAME_IN_PROGRESS\020\005\022\"\n\036D"
    "OTA_GAMERULES_STATE_POST_GAME\020\006\022#\n\037DOTA_"
    "GAMERULES_STATE_DISCONNECT\020\007\022&\n\"DOTA_GAM"
    "ERULES_STATE_TEAM_SHOWCASE\020\010\022*\n&DOTA_GAM"
    "ERULES_STATE_CUSTOM_GAME_SETUP\020\t\022\035\n\031DOTA"
    "_GAMERULES_STATE_LAST\020\n*\266\001\n\014DOTA_GC_TEAM"
    "\022\032\n\026DOTA_GC_TEAM_GOOD_GUYS\020\000\022\031\n\025DOTA_GC_"
    "TEAM_BAD_GUYS\020\001\022\034\n\030DOTA_GC_TEAM_BROADCAS"
    "TER\020\002\022\032\n\026DOTA_GC_TEAM_SPECTATOR\020\003\022\034\n\030DOT"
    "A_GC_TEAM_PLAYER_POOL\020\004\022\027\n\023DOTA_GC_TEAM_"
    "NOTEAM\020\005*O\n\014DOTA_CM_PICK\022\022\n\016DOTA_CM_RAND"
    "OM\020\000\022\025\n\021DOTA_CM_GOOD_GUYS\020\001\022\024\n\020DOTA_CM_B"
    "AD_GUYS\020\002*\236\002\n\025DOTAConnectionState_t\022!\n\035D"
    "OTA_CONNECTION_STATE_UNKNOWN\020\000\022+\n\'DOTA_C"
    "ONNECTION_STATE_NOT_YET_CONNECTED\020\001\022#\n\037D"
    "OTA_CONNECTION_STATE_CONNECTED\020\002\022&\n\"DOTA"
    "_CONNECTION_STATE_DISCONNECTED\020\003\022#\n\037DOTA"
    "_CONNECTION_STATE_ABANDONED\020\004\022!\n\035DOTA_CO"
    "NNECTION_STATE_LOADING\020\005\022 \n\034DOTA_CONNECT"
    "ION_STATE_FAILED\020\006*\250\002\n\022DOTALeaverStatus_"
    "t\022\024\n\020DOTA_LEAVER_NONE\020\000\022\034\n\030DOTA_LEAVER_D"
    "ISCONNECTED\020\001\022%\n!DOTA_LEAVER_DISCONNECTE"
    "D_TOO_LONG\020\002\022\031\n\025DOTA_LEAVER_ABANDONED\020\003\022"
    "\023\n\017DOTA_LEAVER_AFK\020\004\022\037\n\033DOTA_LEAVER_NEVE"
    "R_CONNECTED\020\005\022(\n$DOTA_LEAVER_NEVER_CONNE"
    "CTED_TOO_LONG\020\006\022\"\n\036DOTA_LEAVER_FAILED_TO"
    "_READY_UP\020\007\022\030\n\024DOTA_LEAVER_DECLINED\020\010*\213\001"
    "\n\026DOTALowPriorityBanType\022!\n\035DOTA_LOW_PRI"
    "ORITY_BAN_ABANDON\020\000\022!\n\035DOTA_LOW_PRIORITY"
    "_BAN_REPORTS\020\001\022+\n\'DOTA_LOW_PRIORITY_BAN_"
    "SECONDARY_ABANDON\020\002*}\n\023DOTALobbyReadySta"
    "te\022\"\n\036DOTALobbyReadyState_UNDECLARED\020\000\022 "
    "\n\034DOTALobbyReadyState_ACCEPTED\020\001\022 \n\034DOTA"
    "LobbyReadyState_DECLINED\020\002*D\n\017DOTAGameVe"
    "rsion\022\030\n\024GAME_VERSION_CURRENT\020\000\022\027\n\023GAME_"
    "VERSION_STABLE\020\001*\264\003\n\023DOTAJoinLobbyResult"
    "\022\034\n\030DOTA_JOIN_RESULT_SUCCESS\020\000\022$\n DOTA_J"
    "OIN_RESULT_ALREADY_IN_GAME\020\001\022\"\n\036DOTA_JOI"
    "N_RESULT_INVALID_LOBBY\020\002\022\'\n#DOTA_JOIN_RE"
    "SULT_INCORRECT_PASSWORD\020\003\022\"\n\036DOTA_JOIN_R"
    "ESULT_ACCESS_DENIED\020\004\022\"\n\036DOTA_JOIN_RESUL"
    "T_GENERIC_ERROR\020\005\022&\n\"DOTA_JOIN_RESULT_IN"
    "CORRECT_VERSION\020\006\022\"\n\036DOTA_JOIN_RESULT_IN"
    "_TEAM_PARTY\020\007\022#\n\037DOTA_JOIN_RESULT_NO_LOB"
    "BY_FOUND\020\010\022\037\n\033DOTA_JOIN_RESULT_LOBBY_FUL"
    "L\020\t\0222\n.DOTA_JOIN_RESULT_CUSTOM_GAME_INCO"
    "RRECT_VERSION\020\n*b\n\rDOTAMatchVote\022\031\n\025DOTA"
    "MatchVote_INVALID\020\000\022\032\n\026DOTAMatchVote_POS"
    "ITIVE\020\001\022\032\n\026DOTAMatchVote_NEGATIVE\020\002*\203\002\n\027"
    "DOTA_LobbyMemberXPBonus\022#\n\037DOTA_LobbyMem"
    "berXPBonus_DEFAULT\020\000\022*\n&DOTA_LobbyMember"
    "XPBonus_BATTLE_BOOSTER\020\001\022\'\n#DOTA_LobbyMe"
    "mberXPBonus_SHARE_BONUS\020\002\022!\n\035DOTA_LobbyM"
    "emberXPBonus_PARTY\020\003\022\'\n#DOTA_LobbyMember"
    "XPBonus_RECRUITMENT\020\004\022\"\n\036DOTA_LobbyMembe"
    "rXPBonus_PCBANG\020\005*x\n\023DOTALobbyVisibility"
    "\022\036\n\032DOTALobbyVisibility_Public\020\000\022\037\n\033DOTA"
    "LobbyVisibility_Friends\020\001\022 \n\034DOTALobbyVi"
    "sibility_Unlisted\020\002*\203\002\n\022EDOTAPlayerMMRTy"
    "pe\022 \n\034k_EDOTAPlayerMMRType_Invalid\020\000\022&\n\""
    "k_EDOTAPlayerMMRType_GeneralHidden\020\001\022#\n\037"
    "k_EDOTAPlayerMMRType_SoloHidden\020\002\022+\n\'k_E"
    "DOTAPlayerMMRType_GeneralCompetitive\020\003\022("
    "\n$k_EDOTAPlayerMMRType_SoloCompetitive\020\004"
    "\022\'\n#k_EDOTAPlayerMMRType_1v1Competitive\020"
    "\005*\347\001\n\tMatchType\022\025\n\021MATCH_TYPE_CASUAL\020\000\022\030"
    "\n\024MATCH_TYPE_COOP_BOTS\020\001\022\032\n\026MATCH_TYPE_T"
    "EAM_RANKED\020\002\022 \n\034MATCH_TYPE_LEGACY_SOLO_Q"
    "UEUE\020\003\022\032\n\026MATCH_TYPE_COMPETITIVE\020\004\022\036\n\032MA"
    "TCH_TYPE_WEEKEND_TOURNEY\020\005\022\031\n\025MATCH_TYPE"
    "_CASUAL_1V1\020\006\022\024\n\020MATCH_TYPE_EVENT\020\007*\204\002\n\021"
    "DOTABotDifficulty\022\032\n\026BOT_DIFFICULTY_PASS"
    "IVE\020\000\022\027\n\023BOT_DIFFICULTY_EASY\020\001\022\031\n\025BOT_DI"
    "FFICULTY_MEDIUM\020\002\022\027\n\023BOT_DIFFICULTY_HARD"
    "\020\003\022\031\n\025BOT_DIFFICULTY_UNFAIR\020\004\022\032\n\026BOT_DIF"
    "FICULTY_INVALID\020\005\022\031\n\025BOT_DIFFICULTY_EXTR"
    "A1\020\006\022\031\n\025BOT_DIFFICULTY_EXTRA2\020\007\022\031\n\025BOT_D"
    "IFFICULTY_EXTRA3\020\010*\363\001\n\016MatchLanguages\022\032\n"
    "\026MATCH_LANGUAGE_INVALID\020\000\022\032\n\026MATCH_LANGU"
    "AGE_ENGLISH\020\001\022\032\n\026MATCH_LANGUAGE_RUSSIAN\020"
    "\002\022\032\n\026MATCH_LANGUAGE_CHINESE\020\003\022\031\n\025MATCH_L"
    "ANGUAGE_KOREAN\020\004\022\032\n\026MATCH_LANGUAGE_SPANI"
    "SH\020\005\022\035\n\031MATCH_LANGUAGE_PORTUGUESE\020\006\022\033\n\027M"
    "ATCH_LANGUAGE_ENGLISH2\020\007*b\n\023ETournamentT"
    "emplate\022\036\n\032k_ETournamentTemplate_None\020\000\022"
    "+\n\'k_ETournamentTemplate_SingleEliminati"
    "on\020\001*V\n\017ETournamentType\022\035\n\031k_ETournament"
    "Type_Unknown\020\000\022$\n k_ETournamentType_Week"
    "lyDivision\020\001*\365\002\n\006EEvent\022\021\n\rEVENT_ID_NONE"
    "\020\000\022\025\n\021EVENT_ID_DIRETIDE\020\001\022\034\n\030EVENT_ID_SP"
    "RING_FESTIVAL\020\002\022\033\n\027EVENT_ID_FROSTIVUS_20"
    "13\020\003\022\034\n\030EVENT_ID_COMPENDIUM_2014\020\004\022\032\n\026EV"
    "ENT_ID_NEXON_PC_BANG\020\005\022\032\n\026EVENT_ID_PWRD_"
    "DAC_2015\020\006\022\033\n\027EVENT_ID_NEW_BLOOM_2015\020\007\022"
    "\037\n\033EVENT_ID_INTERNATIONAL_2015\020\010\022\034\n\030EVEN"
    "T_ID_FALL_MAJOR_2015\020\t\022\026\n\022EVENT_ID_ORACL"
    "E_PA\020\n\022$\n EVENT_ID_NEW_BLOOM_2015_PREBEA"
    "ST\020\013\022\026\n\022EVENT_ID_FROSTIVUS\020\014*P\n\020LobbyDot"
    "aTVDelay\022\022\n\016LobbyDotaTV_10\020\000\022\023\n\017LobbyDot"
    "aTV_120\020\001\022\023\n\017LobbyDotaTV_300\020\002*\237\002\n\rEMatc"
    "hOutcome\022\033\n\027k_EMatchOutcome_Unknown\020\000\022\036\n"
    "\032k_EMatchOutcome_RadVictory\020\002\022\037\n\033k_EMatc"
    "hOutcome_DireVictory\020\003\0223\n/k_EMatchOutcom"
    "e_NotScored_PoorNetworkConditions\020@\022$\n k"
    "_EMatchOutcome_NotScored_Leaver\020A\022)\n%k_E"
    "MatchOutcome_NotScored_ServerCrash\020B\022*\n&"
    "k_EMatchOutcome_NotScored_NeverStarted\020C"
    "*\236\004\n\022EDOTAGCSessionNeed\022 \n\034k_EDOTAGCSess"
    "ionNeed_Unknown\020\000\022,\n(k_EDOTAGCSessionNee"
    "d_UserNoSessionNeeded\020d\022)\n%k_EDOTAGCSess"
    "ionNeed_UserInOnlineGame\020e\022(\n$k_EDOTAGCS"
    "essionNeed_UserInLocalGame\020f\022-\n)k_EDOTAG"
    "CSessionNeed_UserInUIWasConnected\020g\022/\n+k"
    "_EDOTAGCSessionNeed_UserInUINeverConnect"
    "ed\020h\022&\n\"k_EDOTAGCSessionNeed_UserTutoria"
    "ls\020i\022*\n%k_EDOTAGCSessionNeed_GameServerO"
    "nline\020\310\001\022)\n$k_EDOTAGCSessionNeed_GameSer"
    "verLocal\020\311\001\022(\n#k_EDOTAGCSessionNeed_Game"
    "ServerIdle\020\312\001\022)\n$k_EDOTAGCSessionNeed_Ga"
    "meServerRelay\020\313\001\022/\n*k_EDOTAGCSessionNeed"
    "_GameServerLocalUpload\020\314\001*\\\n\rFantasy_Rol"
    "es\022\032\n\026FANTASY_ROLE_UNDEFINED\020\000\022\025\n\021FANTAS"
    "Y_ROLE_CORE\020\001\022\030\n\024FANTASY_ROLE_SUPPORT\020\002*"
    "\212\001\n\022Fantasy_Team_Slots\022\025\n\021FANTASY_SLOT_N"
    "ONE\020\000\022\025\n\021FANTASY_SLOT_CORE\020\001\022\030\n\024FANTASY_"
    "SLOT_SUPPORT\020\002\022\024\n\020FANTASY_SLOT_ANY\020\003\022\026\n\022"
    "FANTASY_SLOT_BENCH\020\004*\273\002\n\026Fantasy_Selecti"
    "on_Mode\022\035\n\031FANTASY_SELECTION_INVALID\020\000\022\034"
    "\n\030FANTASY_SELECTION_LOCKED\020\001\022\035\n\031FANTASY_"
    "SELECTION_SHUFFLE\020\002\022\037\n\033FANTASY_SELECTION"
    "_FREE_PICK\020\003\022\033\n\027FANTASY_SELECTION_ENDED\020"
    "\004\022 \n\034FANTASY_SELECTION_PRE_SEASON\020\005\022\037\n\033F"
    "ANTASY_SELECTION_PRE_DRAFT\020\006\022\036\n\032FANTASY_"
    "SELECTION_DRAFTING\020\007\022$\n FANTASY_SELECTIO"
    "N_REGULAR_SEASON\020\010*\366\001\n\025DOTA_TournamentEv"
    "ents\022\022\n\016TE_FIRST_BLOOD\020\000\022\017\n\013TE_GAME_END\020"
    "\001\022\021\n\rTE_MULTI_KILL\020\002\022\020\n\014TE_HERO_DENY\020\003\022\021"
    "\n\rTE_AEGIS_DENY\020\004\022\023\n\017TE_AEGIS_STOLEN\020\005\022\016"
    "\n\nTE_GODLIKE\020\006\022\023\n\017TE_COURIER_KILL\020\007\022\017\n\013T"
    "E_ECHOSLAM\020\010\022\r\n\tTE_RAPIER\020\t\022\023\n\017TE_EARLY_"
    "ROSHAN\020\n\022\021\n\rTE_BLACK_HOLE\020\013*\267\005\n\024DOTA_COM"
    "BATLOG_TYPES\022\031\n\025DOTA_COMBATLOG_DAMAGE\020\000\022"
    "\027\n\023DOTA_COMBATLOG_HEAL\020\001\022\037\n\033DOTA_COMBATL"
    "OG_MODIFIER_ADD\020\002\022\"\n\036DOTA_COMBATLOG_MODI"
    "FIER_REMOVE\020\003\022\030\n\024DOTA_COMBATLOG_DEATH\020\004\022"
    "\032\n\026DOTA_COMBATLOG_ABILITY\020\005\022\027\n\023DOTA_COMB"
    "ATLOG_ITEM\020\006\022\033\n\027DOTA_COMBATLOG_LOCATION\020"
    "\007\022\027\n\023DOTA_COMBATLOG_GOLD\020\010\022\035\n\031DOTA_COMBA"
    "TLOG_GAME_STATE\020\t\022\025\n\021DOTA_COMBATLOG_XP\020\n"
    "\022\033\n\027DOTA_COMBATLOG_PURCHASE\020\013\022\032\n\026DOTA_CO"
    "MBATLOG_BUYBACK\020\014\022\"\n\036DOTA_COMBATLOG_ABIL"
    "ITY_TRIGGER\020\r\022\036\n\032DOTA_COMBATLOG_PLAYERST"
    "ATS\020\016\022\034\n\030DOTA_COMBATLOG_MULTIKILL\020\017\022\035\n\031D"
    "OTA_COMBATLOG_KILLSTREAK\020\020\022%\n!DOTA_COMBA"
    "TLOG_TEAM_BUILDING_KILL\020\021\022\036\n\032DOTA_COMBAT"
    "LOG_FIRST_BLOOD\020\022\022#\n\037DOTA_COMBATLOG_MODI"
    "FIER_REFRESH\020\023\022%\n!DOTA_COMBATLOG_NEUTRAL"
    "_CAMP_STACK\020\024\022\036\n\032DOTA_COMBATLOG_PICKUP_R"
    "UNE\020\025B\005H\001\200\001\000", 49612);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_gcmessages_common.proto", &protobuf_RegisterTypes);
  CSODOTAGameAccountClient::default_instance_ = new CSODOTAGameAccountClient();
  CSODOTAPartyMember::default_instance_ = new CSODOTAPartyMember();
  CSODOTAParty::default_instance_ = new CSODOTAParty();
  CSODOTAPartyInvite::default_instance_ = new CSODOTAPartyInvite();
  CSODOTAPartyInvite_PartyMember::default_instance_ = new CSODOTAPartyInvite_PartyMember();
  CSODOTALobbyInvite::default_instance_ = new CSODOTALobbyInvite();
  CSODOTALobbyInvite_LobbyMember::default_instance_ = new CSODOTALobbyInvite_LobbyMember();
  CDOTAClientHardwareSpecs::default_instance_ = new CDOTAClientHardwareSpecs();
  CDOTASaveGame::default_instance_ = new CDOTASaveGame();
  CDOTASaveGame_Player::default_instance_ = new CDOTASaveGame_Player();
  CDOTASaveGame_SaveInstance::default_instance_ = new CDOTASaveGame_SaveInstance();
  CDOTASaveGame_SaveInstance_PlayerPositions::default_instance_ = new CDOTASaveGame_SaveInstance_PlayerPositions();
  CMsgLeaverState::default_instance_ = new CMsgLeaverState();
  CDOTALobbyMember::default_instance_ = new CDOTALobbyMember();
  CDOTALobbyMember_CDOTALobbyMemberXPBonus::default_instance_ = new CDOTALobbyMember_CDOTALobbyMemberXPBonus();
  CLobbyTeamDetails::default_instance_ = new CLobbyTeamDetails();
  CLobbyTimedRewardDetails::default_instance_ = new CLobbyTimedRewardDetails();
  CLobbyBroadcastChannelInfo::default_instance_ = new CLobbyBroadcastChannelInfo();
  CSODOTALobby::default_instance_ = new CSODOTALobby();
  CSODOTALobby_CExtraMsg::default_instance_ = new CSODOTALobby_CExtraMsg();
  CMsgLobbyEventPoints::default_instance_ = new CMsgLobbyEventPoints();
  CMsgLobbyEventPoints_AccountPoints::default_instance_ = new CMsgLobbyEventPoints_AccountPoints();
  CMsgDOTAGenericResult::default_instance_ = new CMsgDOTAGenericResult();
  CMsgDOTABroadcastNotification::default_instance_ = new CMsgDOTABroadcastNotification();
  CMsgDOTAPCBangTimedReward::default_instance_ = new CMsgDOTAPCBangTimedReward();
  CAttribute_String::default_instance_ = new CAttribute_String();
  CAttribute_ItemDynamicRecipeComponent::default_instance_ = new CAttribute_ItemDynamicRecipeComponent();
  CProtoItemHeroStatue::default_instance_ = new CProtoItemHeroStatue();
  CProtoItemTeamShowcase::default_instance_ = new CProtoItemTeamShowcase();
  CProtoItemSocket::default_instance_ = new CProtoItemSocket();
  CProtoItemSocket_Empty::default_instance_ = new CProtoItemSocket_Empty();
  CProtoItemSocket_Effect::default_instance_ = new CProtoItemSocket_Effect();
  CProtoItemSocket_Color::default_instance_ = new CProtoItemSocket_Color();
  CProtoItemSocket_Strange::default_instance_ = new CProtoItemSocket_Strange();
  CProtoItemSocket_Spectator::default_instance_ = new CProtoItemSocket_Spectator();
  CProtoItemSocket_AssetModifier::default_instance_ = new CProtoItemSocket_AssetModifier();
  CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::default_instance_ = new CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY();
  CProtoItemSocket_Autograph::default_instance_ = new CProtoItemSocket_Autograph();
  CProtoItemSocket_StaticVisuals::default_instance_ = new CProtoItemSocket_StaticVisuals();
  CMatchPlayerAbilityUpgrade::default_instance_ = new CMatchPlayerAbilityUpgrade();
  CMatchAdditionalUnitInventory::default_instance_ = new CMatchAdditionalUnitInventory();
  CMatchHeroSelectEvent::default_instance_ = new CMatchHeroSelectEvent();
  CMsgDOTAProcessFantasyScheduledEvent::default_instance_ = new CMsgDOTAProcessFantasyScheduledEvent();
  CMsgDOTAHasItemQuery::default_instance_ = new CMsgDOTAHasItemQuery();
  CMsgDOTAHasItemResponse::default_instance_ = new CMsgDOTAHasItemResponse();
  CMsgDOTAHasItemDefsQuery::default_instance_ = new CMsgDOTAHasItemDefsQuery();
  CMsgDOTAHasItemDefsResponse::default_instance_ = new CMsgDOTAHasItemDefsResponse();
  CMsgDOTAConsumeFantasyTicket::default_instance_ = new CMsgDOTAConsumeFantasyTicket();
  CMsgDOTAConsumeFantasyTicketFailure::default_instance_ = new CMsgDOTAConsumeFantasyTicketFailure();
  CMsgGCToGCFantasySetMatchLeague::default_instance_ = new CMsgGCToGCFantasySetMatchLeague();
  CSODOTAMapLocationState::default_instance_ = new CSODOTAMapLocationState();
  CMsgNexonPartnerUpdate::default_instance_ = new CMsgNexonPartnerUpdate();
  CMsgMakeOffering::default_instance_ = new CMsgMakeOffering();
  CMsgRequestOfferings::default_instance_ = new CMsgRequestOfferings();
  CMsgRequestOfferingsResponse::default_instance_ = new CMsgRequestOfferingsResponse();
  CMsgRequestOfferingsResponse_NewYearsOffering::default_instance_ = new CMsgRequestOfferingsResponse_NewYearsOffering();
  CMsgLeagueAdminList::default_instance_ = new CMsgLeagueAdminList();
  CMsgPerfectWorldUserLookupRequest::default_instance_ = new CMsgPerfectWorldUserLookupRequest();
  CMsgPerfectWorldUserLookupResponse::default_instance_ = new CMsgPerfectWorldUserLookupResponse();
  CCompendiumTimestampedData::default_instance_ = new CCompendiumTimestampedData();
  CCompendiumGameTimeline::default_instance_ = new CCompendiumGameTimeline();
  CCompendiumGameList::default_instance_ = new CCompendiumGameList();
  CAdditionalEquipSlot::default_instance_ = new CAdditionalEquipSlot();
  CMsgDOTARedeemItem::default_instance_ = new CMsgDOTARedeemItem();
  CMsgDOTARedeemItemResponse::default_instance_ = new CMsgDOTARedeemItemResponse();
  CMsgDOTACombatLogEntry::default_instance_ = new CMsgDOTACombatLogEntry();
  CMsgDOTAProfileCard::default_instance_ = new CMsgDOTAProfileCard();
  CMsgDOTAProfileCard_Slot::default_instance_ = new CMsgDOTAProfileCard_Slot();
  CMsgDOTAProfileCard_Slot_Trophy::default_instance_ = new CMsgDOTAProfileCard_Slot_Trophy();
  CMsgDOTAProfileCard_Slot_Stat::default_instance_ = new CMsgDOTAProfileCard_Slot_Stat();
  CMsgDOTAProfileCard_Slot_Item::default_instance_ = new CMsgDOTAProfileCard_Slot_Item();
  CMsgDOTAProfileCard_Slot_Hero::default_instance_ = new CMsgDOTAProfileCard_Slot_Hero();
  CMsgDOTAProfileCard_Slot_Emoticon::default_instance_ = new CMsgDOTAProfileCard_Slot_Emoticon();
  CMsgGCToClientNewBloomTimingUpdated::default_instance_ = new CMsgGCToClientNewBloomTimingUpdated();
  CSODOTAPlayerChallenge::default_instance_ = new CSODOTAPlayerChallenge();
  CMsgClientToGCRerollPlayerChallenge::default_instance_ = new CMsgClientToGCRerollPlayerChallenge();
  CMsgGCRerollPlayerChallengeResponse::default_instance_ = new CMsgGCRerollPlayerChallengeResponse();
  CMsgGCTopCustomGamesList::default_instance_ = new CMsgGCTopCustomGamesList();
  CMsgDOTARealtimeGameStats::default_instance_ = new CMsgDOTARealtimeGameStats();
  CMsgDOTARealtimeGameStats_TeamDetails::default_instance_ = new CMsgDOTARealtimeGameStats_TeamDetails();
  CMsgDOTARealtimeGameStats_ItemDetails::default_instance_ = new CMsgDOTARealtimeGameStats_ItemDetails();
  CMsgDOTARealtimeGameStats_AbilityDetails::default_instance_ = new CMsgDOTARealtimeGameStats_AbilityDetails();
  CMsgDOTARealtimeGameStats_HeroToHeroStats::default_instance_ = new CMsgDOTARealtimeGameStats_HeroToHeroStats();
  CMsgDOTARealtimeGameStats_AbilityList::default_instance_ = new CMsgDOTARealtimeGameStats_AbilityList();
  CMsgDOTARealtimeGameStats_PlayerDetails::default_instance_ = new CMsgDOTARealtimeGameStats_PlayerDetails();
  CMsgDOTARealtimeGameStats_BuildingDetails::default_instance_ = new CMsgDOTARealtimeGameStats_BuildingDetails();
  CMsgDOTARealtimeGameStats_KillDetails::default_instance_ = new CMsgDOTARealtimeGameStats_KillDetails();
  CMsgDOTARealtimeGameStats_BroadcasterDetails::default_instance_ = new CMsgDOTARealtimeGameStats_BroadcasterDetails();
  CMsgDOTARealtimeGameStats_PickBanDetails::default_instance_ = new CMsgDOTARealtimeGameStats_PickBanDetails();
  CMsgDOTARealtimeGameStats_MatchDetails::default_instance_ = new CMsgDOTARealtimeGameStats_MatchDetails();
  CMsgDOTARealtimeGameStats_GraphData::default_instance_ = new CMsgDOTARealtimeGameStats_GraphData();
  CMsgDOTARealtimeGameStats_GraphData_LocationStats::default_instance_ = new CMsgDOTARealtimeGameStats_GraphData_LocationStats();
  CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::default_instance_ = new CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats();
  CMsgDOTARealtimeGameStatsTerse::default_instance_ = new CMsgDOTARealtimeGameStatsTerse();
  CMsgDOTARealtimeGameStatsTerse_TeamDetails::default_instance_ = new CMsgDOTARealtimeGameStatsTerse_TeamDetails();
  CMsgDOTARealtimeGameStatsTerse_PlayerDetails::default_instance_ = new CMsgDOTARealtimeGameStatsTerse_PlayerDetails();
  CMsgDOTARealtimeGameStatsTerse_BuildingDetails::default_instance_ = new CMsgDOTARealtimeGameStatsTerse_BuildingDetails();
  CMsgDOTARealtimeGameStatsTerse_MatchDetails::default_instance_ = new CMsgDOTARealtimeGameStatsTerse_MatchDetails();
  CMsgDOTARealtimeGameStatsTerse_GraphData::default_instance_ = new CMsgDOTARealtimeGameStatsTerse_GraphData();
  CSODOTAGameAccountClient::default_instance_->InitAsDefaultInstance();
  CSODOTAPartyMember::default_instance_->InitAsDefaultInstance();
  CSODOTAParty::default_instance_->InitAsDefaultInstance();
  CSODOTAPartyInvite::default_instance_->InitAsDefaultInstance();
  CSODOTAPartyInvite_PartyMember::default_instance_->InitAsDefaultInstance();
  CSODOTALobbyInvite::default_instance_->InitAsDefaultInstance();
  CSODOTALobbyInvite_LobbyMember::default_instance_->InitAsDefaultInstance();
  CDOTAClientHardwareSpecs::default_instance_->InitAsDefaultInstance();
  CDOTASaveGame::default_instance_->InitAsDefaultInstance();
  CDOTASaveGame_Player::default_instance_->InitAsDefaultInstance();
  CDOTASaveGame_SaveInstance::default_instance_->InitAsDefaultInstance();
  CDOTASaveGame_SaveInstance_PlayerPositions::default_instance_->InitAsDefaultInstance();
  CMsgLeaverState::default_instance_->InitAsDefaultInstance();
  CDOTALobbyMember::default_instance_->InitAsDefaultInstance();
  CDOTALobbyMember_CDOTALobbyMemberXPBonus::default_instance_->InitAsDefaultInstance();
  CLobbyTeamDetails::default_instance_->InitAsDefaultInstance();
  CLobbyTimedRewardDetails::default_instance_->InitAsDefaultInstance();
  CLobbyBroadcastChannelInfo::default_instance_->InitAsDefaultInstance();
  CSODOTALobby::default_instance_->InitAsDefaultInstance();
  CSODOTALobby_CExtraMsg::default_instance_->InitAsDefaultInstance();
  CMsgLobbyEventPoints::default_instance_->InitAsDefaultInstance();
  CMsgLobbyEventPoints_AccountPoints::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGenericResult::default_instance_->InitAsDefaultInstance();
  CMsgDOTABroadcastNotification::default_instance_->InitAsDefaultInstance();
  CMsgDOTAPCBangTimedReward::default_instance_->InitAsDefaultInstance();
  CAttribute_String::default_instance_->InitAsDefaultInstance();
  CAttribute_ItemDynamicRecipeComponent::default_instance_->InitAsDefaultInstance();
  CProtoItemHeroStatue::default_instance_->InitAsDefaultInstance();
  CProtoItemTeamShowcase::default_instance_->InitAsDefaultInstance();
  CProtoItemSocket::default_instance_->InitAsDefaultInstance();
  CProtoItemSocket_Empty::default_instance_->InitAsDefaultInstance();
  CProtoItemSocket_Effect::default_instance_->InitAsDefaultInstance();
  CProtoItemSocket_Color::default_instance_->InitAsDefaultInstance();
  CProtoItemSocket_Strange::default_instance_->InitAsDefaultInstance();
  CProtoItemSocket_Spectator::default_instance_->InitAsDefaultInstance();
  CProtoItemSocket_AssetModifier::default_instance_->InitAsDefaultInstance();
  CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::default_instance_->InitAsDefaultInstance();
  CProtoItemSocket_Autograph::default_instance_->InitAsDefaultInstance();
  CProtoItemSocket_StaticVisuals::default_instance_->InitAsDefaultInstance();
  CMatchPlayerAbilityUpgrade::default_instance_->InitAsDefaultInstance();
  CMatchAdditionalUnitInventory::default_instance_->InitAsDefaultInstance();
  CMatchHeroSelectEvent::default_instance_->InitAsDefaultInstance();
  CMsgDOTAProcessFantasyScheduledEvent::default_instance_->InitAsDefaultInstance();
  CMsgDOTAHasItemQuery::default_instance_->InitAsDefaultInstance();
  CMsgDOTAHasItemResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAHasItemDefsQuery::default_instance_->InitAsDefaultInstance();
  CMsgDOTAHasItemDefsResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAConsumeFantasyTicket::default_instance_->InitAsDefaultInstance();
  CMsgDOTAConsumeFantasyTicketFailure::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCFantasySetMatchLeague::default_instance_->InitAsDefaultInstance();
  CSODOTAMapLocationState::default_instance_->InitAsDefaultInstance();
  CMsgNexonPartnerUpdate::default_instance_->InitAsDefaultInstance();
  CMsgMakeOffering::default_instance_->InitAsDefaultInstance();
  CMsgRequestOfferings::default_instance_->InitAsDefaultInstance();
  CMsgRequestOfferingsResponse::default_instance_->InitAsDefaultInstance();
  CMsgRequestOfferingsResponse_NewYearsOffering::default_instance_->InitAsDefaultInstance();
  CMsgLeagueAdminList::default_instance_->InitAsDefaultInstance();
  CMsgPerfectWorldUserLookupRequest::default_instance_->InitAsDefaultInstance();
  CMsgPerfectWorldUserLookupResponse::default_instance_->InitAsDefaultInstance();
  CCompendiumTimestampedData::default_instance_->InitAsDefaultInstance();
  CCompendiumGameTimeline::default_instance_->InitAsDefaultInstance();
  CCompendiumGameList::default_instance_->InitAsDefaultInstance();
  CAdditionalEquipSlot::default_instance_->InitAsDefaultInstance();
  CMsgDOTARedeemItem::default_instance_->InitAsDefaultInstance();
  CMsgDOTARedeemItemResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTACombatLogEntry::default_instance_->InitAsDefaultInstance();
  CMsgDOTAProfileCard::default_instance_->InitAsDefaultInstance();
  CMsgDOTAProfileCard_Slot::default_instance_->InitAsDefaultInstance();
  CMsgDOTAProfileCard_Slot_Trophy::default_instance_->InitAsDefaultInstance();
  CMsgDOTAProfileCard_Slot_Stat::default_instance_->InitAsDefaultInstance();
  CMsgDOTAProfileCard_Slot_Item::default_instance_->InitAsDefaultInstance();
  CMsgDOTAProfileCard_Slot_Hero::default_instance_->InitAsDefaultInstance();
  CMsgDOTAProfileCard_Slot_Emoticon::default_instance_->InitAsDefaultInstance();
  CMsgGCToClientNewBloomTimingUpdated::default_instance_->InitAsDefaultInstance();
  CSODOTAPlayerChallenge::default_instance_->InitAsDefaultInstance();
  CMsgClientToGCRerollPlayerChallenge::default_instance_->InitAsDefaultInstance();
  CMsgGCRerollPlayerChallengeResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCTopCustomGamesList::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_TeamDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_ItemDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_AbilityDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_HeroToHeroStats::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_AbilityList::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_PlayerDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_BuildingDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_KillDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_BroadcasterDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_PickBanDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_MatchDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_GraphData::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_GraphData_LocationStats::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStatsTerse::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStatsTerse_TeamDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStatsTerse_PlayerDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStatsTerse_BuildingDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStatsTerse_MatchDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStatsTerse_GraphData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dota_5fgcmessages_5fcommon_2eproto {
  StaticDescriptorInitializer_dota_5fgcmessages_5fcommon_2eproto() {
    protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  }
} static_descriptor_initializer_dota_5fgcmessages_5fcommon_2eproto_;
const ::google::protobuf::EnumDescriptor* EDOTAGCMsg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDOTAGCMsg_descriptor_;
}
bool EDOTAGCMsg_IsValid(int value) {
  switch(value) {
    case 7000:
    case 7001:
    case 7004:
    case 7005:
    case 7009:
    case 7010:
    case 7013:
    case 7014:
    case 7017:
    case 7026:
    case 7027:
    case 7028:
    case 7031:
    case 7032:
    case 7033:
    case 7034:
    case 7035:
    case 7036:
    case 7038:
    case 7040:
    case 7041:
    case 7042:
    case 7043:
    case 7044:
    case 7046:
    case 7047:
    case 7049:
    case 7051:
    case 7052:
    case 7055:
    case 7056:
    case 7057:
    case 7060:
    case 7061:
    case 7064:
    case 7065:
    case 7068:
    case 7069:
    case 7070:
    case 7071:
    case 7072:
    case 7073:
    case 7074:
    case 7075:
    case 7076:
    case 7077:
    case 7078:
    case 7079:
    case 7080:
    case 7081:
    case 7082:
    case 7083:
    case 7084:
    case 7085:
    case 7086:
    case 7087:
    case 7088:
    case 7089:
    case 7090:
    case 7091:
    case 7092:
    case 7093:
    case 7094:
    case 7095:
    case 7096:
    case 7097:
    case 7098:
    case 7099:
    case 7102:
    case 7104:
    case 7108:
    case 7111:
    case 7112:
    case 7113:
    case 7114:
    case 7115:
    case 7116:
    case 7117:
    case 7118:
    case 7119:
    case 7120:
    case 7121:
    case 7122:
    case 7123:
    case 7124:
    case 7125:
    case 7126:
    case 7127:
    case 7128:
    case 7129:
    case 7130:
    case 7131:
    case 7132:
    case 7133:
    case 7134:
    case 7139:
    case 7140:
    case 7141:
    case 7142:
    case 7143:
    case 7144:
    case 7145:
    case 7147:
    case 7148:
    case 7149:
    case 7150:
    case 7151:
    case 7152:
    case 7153:
    case 7154:
    case 7155:
    case 7156:
    case 7157:
    case 7158:
    case 7159:
    case 7160:
    case 7161:
    case 7164:
    case 7165:
    case 7166:
    case 7167:
    case 7168:
    case 7169:
    case 7170:
    case 7171:
    case 7172:
    case 7173:
    case 7174:
    case 7176:
    case 7177:
    case 7178:
    case 7179:
    case 7180:
    case 7182:
    case 7183:
    case 7184:
    case 7185:
    case 7186:
    case 7187:
    case 7188:
    case 7189:
    case 7190:
    case 7191:
    case 7192:
    case 7193:
    case 7194:
    case 7195:
    case 7196:
    case 7197:
    case 7198:
    case 7199:
    case 7200:
    case 7201:
    case 7203:
    case 7204:
    case 7205:
    case 7206:
    case 7207:
    case 7208:
    case 7209:
    case 7210:
    case 7211:
    case 7212:
    case 7215:
    case 7216:
    case 7217:
    case 7218:
    case 7219:
    case 7220:
    case 7221:
    case 7222:
    case 7223:
    case 7224:
    case 7225:
    case 7226:
    case 7227:
    case 7228:
    case 7229:
    case 7230:
    case 7231:
    case 7232:
    case 7233:
    case 7234:
    case 7235:
    case 7236:
    case 7237:
    case 7240:
    case 7241:
    case 7242:
    case 7245:
    case 7246:
    case 7247:
    case 7248:
    case 7249:
    case 7251:
    case 7254:
    case 7255:
    case 7256:
    case 7258:
    case 7259:
    case 7261:
    case 7262:
    case 7263:
    case 7264:
    case 7265:
    case 7266:
    case 7267:
    case 7268:
    case 7269:
    case 7270:
    case 7272:
    case 7273:
    case 7274:
    case 7275:
    case 7279:
    case 7280:
    case 7281:
    case 7282:
    case 7283:
    case 7284:
    case 7285:
    case 7286:
    case 7287:
    case 7288:
    case 7289:
    case 7290:
    case 7291:
    case 7292:
    case 7293:
    case 7294:
    case 7297:
    case 7298:
    case 7299:
    case 7300:
    case 7301:
    case 7302:
    case 7303:
    case 7304:
    case 7305:
    case 7306:
    case 7307:
    case 7308:
    case 7309:
    case 7310:
    case 7311:
    case 7312:
    case 7313:
    case 7314:
    case 7315:
    case 7316:
    case 7317:
    case 7318:
    case 7319:
    case 7320:
    case 7321:
    case 7322:
    case 7323:
    case 7324:
    case 7325:
    case 7326:
    case 7327:
    case 7328:
    case 7329:
    case 7330:
    case 7331:
    case 7332:
    case 7333:
    case 7334:
    case 7335:
    case 7336:
    case 7337:
    case 7338:
    case 7339:
    case 7340:
    case 7341:
    case 7342:
    case 7343:
    case 7344:
    case 7345:
    case 7346:
    case 7347:
    case 7348:
    case 7349:
    case 7350:
    case 7351:
    case 7352:
    case 7353:
    case 7354:
    case 7355:
    case 7356:
    case 7357:
    case 7358:
    case 7359:
    case 7360:
    case 7361:
    case 7362:
    case 7363:
    case 7364:
    case 7365:
    case 7366:
    case 7367:
    case 7368:
    case 7369:
    case 7370:
    case 7371:
    case 7372:
    case 7373:
    case 7374:
    case 7375:
    case 7376:
    case 7377:
    case 7378:
    case 7379:
    case 7380:
    case 7381:
    case 7382:
    case 7383:
    case 7384:
    case 7385:
    case 7386:
    case 7387:
    case 7388:
    case 7390:
    case 7393:
    case 7394:
    case 7395:
    case 7396:
    case 7397:
    case 7398:
    case 7399:
    case 7402:
    case 7403:
    case 7404:
    case 7405:
    case 7406:
    case 7407:
    case 7408:
    case 7409:
    case 7410:
    case 7411:
    case 7412:
    case 7413:
    case 7414:
    case 7415:
    case 7416:
    case 7417:
    case 7418:
    case 7420:
    case 7423:
    case 7424:
    case 7425:
    case 7426:
    case 7427:
    case 7428:
    case 7429:
    case 7430:
    case 7431:
    case 7432:
    case 7433:
    case 7434:
    case 7435:
    case 7436:
    case 7437:
    case 7438:
    case 7439:
    case 7440:
    case 7441:
    case 7443:
    case 7444:
    case 7445:
    case 7446:
    case 7447:
    case 7448:
    case 7449:
    case 7450:
    case 7451:
    case 7452:
    case 7453:
    case 7454:
    case 7455:
    case 7456:
    case 7457:
    case 7458:
    case 7459:
    case 7460:
    case 7461:
    case 7462:
    case 7463:
    case 7464:
    case 7465:
    case 7466:
    case 7467:
    case 7468:
    case 7469:
    case 7470:
    case 7471:
    case 7472:
    case 7473:
    case 7474:
    case 7475:
    case 7476:
    case 7477:
    case 7478:
    case 7480:
    case 7481:
    case 7482:
    case 7483:
    case 7484:
    case 7485:
    case 7486:
    case 7487:
    case 7488:
    case 7489:
    case 7490:
    case 7491:
    case 7492:
    case 7493:
    case 7494:
    case 7495:
    case 7496:
    case 7497:
    case 7498:
    case 7499:
    case 7500:
    case 7501:
    case 7502:
    case 7503:
    case 7504:
    case 7505:
    case 7506:
    case 7507:
    case 7510:
    case 7511:
    case 7512:
    case 7513:
    case 7514:
    case 7515:
    case 7516:
    case 7517:
    case 7518:
    case 7519:
    case 7520:
    case 7521:
    case 7522:
    case 7523:
    case 7524:
    case 7525:
    case 7526:
    case 7527:
    case 7528:
    case 7529:
    case 7530:
    case 7531:
    case 7532:
    case 7533:
    case 7534:
    case 7535:
    case 7536:
    case 7537:
    case 7538:
    case 7539:
    case 7540:
    case 7542:
    case 7543:
    case 7544:
    case 7545:
    case 7546:
    case 7547:
    case 7548:
    case 7549:
    case 7550:
    case 7551:
    case 7552:
    case 7553:
    case 7554:
    case 7555:
    case 7556:
    case 7557:
    case 7558:
    case 7559:
    case 7560:
    case 7561:
    case 7562:
    case 7563:
    case 7564:
    case 7565:
    case 7566:
    case 7567:
    case 7569:
    case 7570:
    case 7571:
    case 7572:
    case 7573:
    case 7574:
    case 7575:
    case 7576:
    case 7577:
    case 7578:
    case 7579:
    case 7580:
    case 7581:
    case 7582:
    case 7583:
    case 7584:
    case 7585:
    case 7586:
    case 7587:
    case 7588:
    case 7589:
    case 7590:
    case 7591:
    case 7592:
    case 7593:
    case 7594:
    case 7595:
    case 7596:
    case 7597:
    case 7598:
    case 7599:
    case 7600:
    case 7601:
    case 7602:
    case 7603:
    case 7604:
    case 7605:
    case 7606:
    case 7607:
    case 7608:
    case 8001:
    case 8002:
    case 8003:
    case 8004:
    case 8005:
    case 8006:
    case 8007:
    case 8008:
    case 8009:
    case 8010:
    case 8011:
    case 8012:
    case 8013:
    case 8014:
    case 8015:
    case 8016:
    case 8017:
    case 8018:
    case 8019:
    case 8020:
    case 8021:
    case 8022:
    case 8023:
    case 8024:
    case 8025:
    case 8026:
    case 8027:
    case 8028:
    case 8029:
    case 8030:
    case 8031:
    case 8032:
    case 8033:
    case 8034:
    case 8035:
    case 8036:
    case 8037:
    case 8038:
    case 8040:
    case 8041:
    case 8042:
    case 8045:
    case 8046:
    case 8047:
    case 8048:
    case 8049:
    case 8050:
    case 8051:
    case 8052:
    case 8053:
    case 8054:
    case 8055:
    case 8056:
    case 8057:
    case 8058:
    case 8059:
    case 8060:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_GameMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_GameMode_descriptor_;
}
bool DOTA_GameMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_GameState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_GameState_descriptor_;
}
bool DOTA_GameState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_GC_TEAM_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_GC_TEAM_descriptor_;
}
bool DOTA_GC_TEAM_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_CM_PICK_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_CM_PICK_descriptor_;
}
bool DOTA_CM_PICK_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTAConnectionState_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTAConnectionState_t_descriptor_;
}
bool DOTAConnectionState_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTALeaverStatus_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTALeaverStatus_t_descriptor_;
}
bool DOTALeaverStatus_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTALowPriorityBanType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTALowPriorityBanType_descriptor_;
}
bool DOTALowPriorityBanType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTALobbyReadyState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTALobbyReadyState_descriptor_;
}
bool DOTALobbyReadyState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTAGameVersion_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTAGameVersion_descriptor_;
}
bool DOTAGameVersion_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTAJoinLobbyResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTAJoinLobbyResult_descriptor_;
}
bool DOTAJoinLobbyResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTAMatchVote_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTAMatchVote_descriptor_;
}
bool DOTAMatchVote_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_LobbyMemberXPBonus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_LobbyMemberXPBonus_descriptor_;
}
bool DOTA_LobbyMemberXPBonus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTALobbyVisibility_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTALobbyVisibility_descriptor_;
}
bool DOTALobbyVisibility_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDOTAPlayerMMRType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDOTAPlayerMMRType_descriptor_;
}
bool EDOTAPlayerMMRType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MatchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchType_descriptor_;
}
bool MatchType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTABotDifficulty_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTABotDifficulty_descriptor_;
}
bool DOTABotDifficulty_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MatchLanguages_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchLanguages_descriptor_;
}
bool MatchLanguages_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETournamentTemplate_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETournamentTemplate_descriptor_;
}
bool ETournamentTemplate_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETournamentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETournamentType_descriptor_;
}
bool ETournamentType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EEvent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EEvent_descriptor_;
}
bool EEvent_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LobbyDotaTVDelay_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LobbyDotaTVDelay_descriptor_;
}
bool LobbyDotaTVDelay_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMatchOutcome_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMatchOutcome_descriptor_;
}
bool EMatchOutcome_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
    case 3:
    case 64:
    case 65:
    case 66:
    case 67:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDOTAGCSessionNeed_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDOTAGCSessionNeed_descriptor_;
}
bool EDOTAGCSessionNeed_IsValid(int value) {
  switch(value) {
    case 0:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Fantasy_Roles_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fantasy_Roles_descriptor_;
}
bool Fantasy_Roles_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Fantasy_Team_Slots_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fantasy_Team_Slots_descriptor_;
}
bool Fantasy_Team_Slots_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Fantasy_Selection_Mode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fantasy_Selection_Mode_descriptor_;
}
bool Fantasy_Selection_Mode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_TournamentEvents_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_TournamentEvents_descriptor_;
}
bool DOTA_TournamentEvents_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_COMBATLOG_TYPES_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_COMBATLOG_TYPES_descriptor_;
}
bool DOTA_COMBATLOG_TYPES_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int CSODOTAGameAccountClient::kAccountIdFieldNumber;
const int CSODOTAGameAccountClient::kWinsFieldNumber;
const int CSODOTAGameAccountClient::kLossesFieldNumber;
const int CSODOTAGameAccountClient::kXpFieldNumber;
const int CSODOTAGameAccountClient::kLevelFieldNumber;
const int CSODOTAGameAccountClient::kInitialSkillFieldNumber;
const int CSODOTAGameAccountClient::kLeaverCountFieldNumber;
const int CSODOTAGameAccountClient::kSecondaryLeaverCountFieldNumber;
const int CSODOTAGameAccountClient::kLowPriorityUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kPreventTextChatUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kPreventVoiceUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kLastAbandonedGameDateFieldNumber;
const int CSODOTAGameAccountClient::kLastSecondaryAbandonedGameDateFieldNumber;
const int CSODOTAGameAccountClient::kLeaverPenaltyCountFieldNumber;
const int CSODOTAGameAccountClient::kCompletedGameStreakFieldNumber;
const int CSODOTAGameAccountClient::kTeachingFieldNumber;
const int CSODOTAGameAccountClient::kLeadershipFieldNumber;
const int CSODOTAGameAccountClient::kFriendlyFieldNumber;
const int CSODOTAGameAccountClient::kForgivingFieldNumber;
const int CSODOTAGameAccountClient::kAccountDisabledUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kAccountDisabledCountFieldNumber;
const int CSODOTAGameAccountClient::kShowcaseHeroIdFieldNumber;
const int CSODOTAGameAccountClient::kMatchDisabledUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kMatchDisabledCountFieldNumber;
const int CSODOTAGameAccountClient::kPartnerAccountTypeFieldNumber;
const int CSODOTAGameAccountClient::kPartnerAccountStateFieldNumber;
const int CSODOTAGameAccountClient::kShutdownlawterminatetimestampFieldNumber;
const int CSODOTAGameAccountClient::kLowPriorityGamesRemainingFieldNumber;
const int CSODOTAGameAccountClient::kCompetitiveRankFieldNumber;
const int CSODOTAGameAccountClient::kCalibrationGamesRemainingFieldNumber;
const int CSODOTAGameAccountClient::kSoloCompetitiveRankFieldNumber;
const int CSODOTAGameAccountClient::kSoloCalibrationGamesRemainingFieldNumber;
const int CSODOTAGameAccountClient::kCompetitive1V1RankFieldNumber;
const int CSODOTAGameAccountClient::kCompetitive1V1CalibrationGamesRemainingFieldNumber;
const int CSODOTAGameAccountClient::kRecruitmentLevelFieldNumber;
const int CSODOTAGameAccountClient::kHasNewNotificationsFieldNumber;
const int CSODOTAGameAccountClient::kIsLeagueAdminFieldNumber;
const int CSODOTAGameAccountClient::kCasualGamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kSoloCompetitiveGamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kPartyCompetitiveGamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kCasual1V1GamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kCompetitiveTeamGamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kCurrAllHeroChallengeIdFieldNumber;
const int CSODOTAGameAccountClient::kPlayTimePointsFieldNumber;
const int CSODOTAGameAccountClient::kAccountFlagsFieldNumber;
const int CSODOTAGameAccountClient::kPlayTimeLevelFieldNumber;
#endif  // !_MSC_VER

CSODOTAGameAccountClient::CSODOTAGameAccountClient()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSODOTAGameAccountClient)
}

void CSODOTAGameAccountClient::InitAsDefaultInstance() {
}

CSODOTAGameAccountClient::CSODOTAGameAccountClient(const CSODOTAGameAccountClient& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSODOTAGameAccountClient)
}

void CSODOTAGameAccountClient::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  wins_ = 0u;
  losses_ = 0u;
  xp_ = 0u;
  level_ = 0u;
  initial_skill_ = 0u;
  leaver_count_ = 0u;
  secondary_leaver_count_ = 0u;
  low_priority_until_date_ = 0u;
  prevent_text_chat_until_date_ = 0u;
  prevent_voice_until_date_ = 0u;
  last_abandoned_game_date_ = 0u;
  last_secondary_abandoned_game_date_ = 0u;
  leaver_penalty_count_ = 0u;
  completed_game_streak_ = 0u;
  teaching_ = 0u;
  leadership_ = 0u;
  friendly_ = 0u;
  forgiving_ = 0u;
  account_disabled_until_date_ = 0u;
  account_disabled_count_ = 0u;
  showcase_hero_id_ = 0u;
  match_disabled_until_date_ = 0u;
  match_disabled_count_ = 0u;
  partner_account_type_ = 0;
  partner_account_state_ = 0u;
  shutdownlawterminatetimestamp_ = 0u;
  low_priority_games_remaining_ = 0u;
  competitive_rank_ = 0u;
  calibration_games_remaining_ = 0u;
  solo_competitive_rank_ = 0u;
  solo_calibration_games_remaining_ = 0u;
  competitive_1v1_rank_ = 0u;
  competitive_1v1_calibration_games_remaining_ = 0u;
  recruitment_level_ = 0u;
  has_new_notifications_ = false;
  is_league_admin_ = false;
  casual_games_played_ = 0u;
  solo_competitive_games_played_ = 0u;
  party_competitive_games_played_ = 0u;
  casual_1v1_games_played_ = 0u;
  competitive_team_games_played_ = 0u;
  curr_all_hero_challenge_id_ = 0u;
  play_time_points_ = 0u;
  account_flags_ = 0u;
  play_time_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTAGameAccountClient::~CSODOTAGameAccountClient() {
  // @@protoc_insertion_point(destructor:CSODOTAGameAccountClient)
  SharedDtor();
}

void CSODOTAGameAccountClient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSODOTAGameAccountClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTAGameAccountClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTAGameAccountClient_descriptor_;
}

const CSODOTAGameAccountClient& CSODOTAGameAccountClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CSODOTAGameAccountClient* CSODOTAGameAccountClient::default_instance_ = NULL;

CSODOTAGameAccountClient* CSODOTAGameAccountClient::New(::google::protobuf::Arena* arena) const {
  CSODOTAGameAccountClient* n = new CSODOTAGameAccountClient;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSODOTAGameAccountClient::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CSODOTAGameAccountClient*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(account_id_, secondary_leaver_count_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(low_priority_until_date_, teaching_);
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(leadership_, match_disabled_count_);
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ZR_(partner_account_type_, solo_calibration_games_remaining_);
  }
  if (_has_bits_[32 / 32] & 255u) {
    ZR_(competitive_1v1_rank_, party_competitive_games_played_);
  }
  if (_has_bits_[40 / 32] & 16128u) {
    ZR_(casual_1v1_games_played_, play_time_level_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CSODOTAGameAccountClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSODOTAGameAccountClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_wins;
        break;
      }

      // optional uint32 wins = 3;
      case 3: {
        if (tag == 24) {
         parse_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wins_)));
          set_has_wins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_losses;
        break;
      }

      // optional uint32 losses = 4;
      case 4: {
        if (tag == 32) {
         parse_losses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losses_)));
          set_has_losses();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_xp;
        break;
      }

      // optional uint32 xp = 12;
      case 12: {
        if (tag == 96) {
         parse_xp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_)));
          set_has_xp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_level;
        break;
      }

      // optional uint32 level = 13;
      case 13: {
        if (tag == 104) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_initial_skill;
        break;
      }

      // optional uint32 initial_skill = 14;
      case 14: {
        if (tag == 112) {
         parse_initial_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_skill_)));
          set_has_initial_skill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_leaver_count;
        break;
      }

      // optional uint32 leaver_count = 15;
      case 15: {
        if (tag == 120) {
         parse_leaver_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaver_count_)));
          set_has_leaver_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_low_priority_until_date;
        break;
      }

      // optional uint32 low_priority_until_date = 18;
      case 18: {
        if (tag == 144) {
         parse_low_priority_until_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_priority_until_date_)));
          set_has_low_priority_until_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_prevent_text_chat_until_date;
        break;
      }

      // optional uint32 prevent_text_chat_until_date = 20;
      case 20: {
        if (tag == 160) {
         parse_prevent_text_chat_until_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prevent_text_chat_until_date_)));
          set_has_prevent_text_chat_until_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_prevent_voice_until_date;
        break;
      }

      // optional uint32 prevent_voice_until_date = 21;
      case 21: {
        if (tag == 168) {
         parse_prevent_voice_until_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prevent_voice_until_date_)));
          set_has_prevent_voice_until_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_last_abandoned_game_date;
        break;
      }

      // optional uint32 last_abandoned_game_date = 22;
      case 22: {
        if (tag == 176) {
         parse_last_abandoned_game_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_abandoned_game_date_)));
          set_has_last_abandoned_game_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_leaver_penalty_count;
        break;
      }

      // optional uint32 leaver_penalty_count = 23;
      case 23: {
        if (tag == 184) {
         parse_leaver_penalty_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaver_penalty_count_)));
          set_has_leaver_penalty_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_completed_game_streak;
        break;
      }

      // optional uint32 completed_game_streak = 24;
      case 24: {
        if (tag == 192) {
         parse_completed_game_streak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &completed_game_streak_)));
          set_has_completed_game_streak();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_teaching;
        break;
      }

      // optional uint32 teaching = 28;
      case 28: {
        if (tag == 224) {
         parse_teaching:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teaching_)));
          set_has_teaching();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_leadership;
        break;
      }

      // optional uint32 leadership = 29;
      case 29: {
        if (tag == 232) {
         parse_leadership:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leadership_)));
          set_has_leadership();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_friendly;
        break;
      }

      // optional uint32 friendly = 30;
      case 30: {
        if (tag == 240) {
         parse_friendly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendly_)));
          set_has_friendly();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_forgiving;
        break;
      }

      // optional uint32 forgiving = 31;
      case 31: {
        if (tag == 248) {
         parse_forgiving:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forgiving_)));
          set_has_forgiving();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_account_disabled_until_date;
        break;
      }

      // optional uint32 account_disabled_until_date = 38;
      case 38: {
        if (tag == 304) {
         parse_account_disabled_until_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_disabled_until_date_)));
          set_has_account_disabled_until_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_account_disabled_count;
        break;
      }

      // optional uint32 account_disabled_count = 39;
      case 39: {
        if (tag == 312) {
         parse_account_disabled_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_disabled_count_)));
          set_has_account_disabled_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_showcase_hero_id;
        break;
      }

      // optional uint32 showcase_hero_id = 40;
      case 40: {
        if (tag == 320) {
         parse_showcase_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &showcase_hero_id_)));
          set_has_showcase_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_match_disabled_until_date;
        break;
      }

      // optional uint32 match_disabled_until_date = 41;
      case 41: {
        if (tag == 328) {
         parse_match_disabled_until_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_disabled_until_date_)));
          set_has_match_disabled_until_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_match_disabled_count;
        break;
      }

      // optional uint32 match_disabled_count = 42;
      case 42: {
        if (tag == 336) {
         parse_match_disabled_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_disabled_count_)));
          set_has_match_disabled_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_partner_account_type;
        break;
      }

      // optional .PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
      case 44: {
        if (tag == 352) {
         parse_partner_account_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PartnerAccountType_IsValid(value)) {
            set_partner_account_type(static_cast< ::PartnerAccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(44, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_partner_account_state;
        break;
      }

      // optional uint32 partner_account_state = 45;
      case 45: {
        if (tag == 360) {
         parse_partner_account_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partner_account_state_)));
          set_has_partner_account_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_shutdownlawterminatetimestamp;
        break;
      }

      // optional uint32 shutdownlawterminatetimestamp = 47;
      case 47: {
        if (tag == 376) {
         parse_shutdownlawterminatetimestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shutdownlawterminatetimestamp_)));
          set_has_shutdownlawterminatetimestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_low_priority_games_remaining;
        break;
      }

      // optional uint32 low_priority_games_remaining = 48;
      case 48: {
        if (tag == 384) {
         parse_low_priority_games_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_priority_games_remaining_)));
          set_has_low_priority_games_remaining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_competitive_rank;
        break;
      }

      // optional uint32 competitive_rank = 49;
      case 49: {
        if (tag == 392) {
         parse_competitive_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &competitive_rank_)));
          set_has_competitive_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_calibration_games_remaining;
        break;
      }

      // optional uint32 calibration_games_remaining = 51;
      case 51: {
        if (tag == 408) {
         parse_calibration_games_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calibration_games_remaining_)));
          set_has_calibration_games_remaining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_solo_competitive_rank;
        break;
      }

      // optional uint32 solo_competitive_rank = 52;
      case 52: {
        if (tag == 416) {
         parse_solo_competitive_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo_competitive_rank_)));
          set_has_solo_competitive_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_solo_calibration_games_remaining;
        break;
      }

      // optional uint32 solo_calibration_games_remaining = 54;
      case 54: {
        if (tag == 432) {
         parse_solo_calibration_games_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo_calibration_games_remaining_)));
          set_has_solo_calibration_games_remaining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_recruitment_level;
        break;
      }

      // optional uint32 recruitment_level = 55;
      case 55: {
        if (tag == 440) {
         parse_recruitment_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recruitment_level_)));
          set_has_recruitment_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_has_new_notifications;
        break;
      }

      // optional bool has_new_notifications = 56;
      case 56: {
        if (tag == 448) {
         parse_has_new_notifications:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_new_notifications_)));
          set_has_has_new_notifications();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(456)) goto parse_is_league_admin;
        break;
      }

      // optional bool is_league_admin = 57;
      case 57: {
        if (tag == 456) {
         parse_is_league_admin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_league_admin_)));
          set_has_is_league_admin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(464)) goto parse_secondary_leaver_count;
        break;
      }

      // optional uint32 secondary_leaver_count = 58;
      case 58: {
        if (tag == 464) {
         parse_secondary_leaver_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondary_leaver_count_)));
          set_has_secondary_leaver_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(472)) goto parse_last_secondary_abandoned_game_date;
        break;
      }

      // optional uint32 last_secondary_abandoned_game_date = 59;
      case 59: {
        if (tag == 472) {
         parse_last_secondary_abandoned_game_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_secondary_abandoned_game_date_)));
          set_has_last_secondary_abandoned_game_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_casual_games_played;
        break;
      }

      // optional uint32 casual_games_played = 60;
      case 60: {
        if (tag == 480) {
         parse_casual_games_played:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &casual_games_played_)));
          set_has_casual_games_played();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_solo_competitive_games_played;
        break;
      }

      // optional uint32 solo_competitive_games_played = 61;
      case 61: {
        if (tag == 488) {
         parse_solo_competitive_games_played:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo_competitive_games_played_)));
          set_has_solo_competitive_games_played();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(496)) goto parse_party_competitive_games_played;
        break;
      }

      // optional uint32 party_competitive_games_played = 62;
      case 62: {
        if (tag == 496) {
         parse_party_competitive_games_played:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &party_competitive_games_played_)));
          set_has_party_competitive_games_played();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(504)) goto parse_competitive_1v1_rank;
        break;
      }

      // optional uint32 competitive_1v1_rank = 63;
      case 63: {
        if (tag == 504) {
         parse_competitive_1v1_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &competitive_1v1_rank_)));
          set_has_competitive_1v1_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(512)) goto parse_competitive_1v1_calibration_games_remaining;
        break;
      }

      // optional uint32 competitive_1v1_calibration_games_remaining = 64;
      case 64: {
        if (tag == 512) {
         parse_competitive_1v1_calibration_games_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &competitive_1v1_calibration_games_remaining_)));
          set_has_competitive_1v1_calibration_games_remaining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(520)) goto parse_casual_1v1_games_played;
        break;
      }

      // optional uint32 casual_1v1_games_played = 65;
      case 65: {
        if (tag == 520) {
         parse_casual_1v1_games_played:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &casual_1v1_games_played_)));
          set_has_casual_1v1_games_played();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(528)) goto parse_competitive_team_games_played;
        break;
      }

      // optional uint32 competitive_team_games_played = 66;
      case 66: {
        if (tag == 528) {
         parse_competitive_team_games_played:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &competitive_team_games_played_)));
          set_has_competitive_team_games_played();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(536)) goto parse_curr_all_hero_challenge_id;
        break;
      }

      // optional uint32 curr_all_hero_challenge_id = 67;
      case 67: {
        if (tag == 536) {
         parse_curr_all_hero_challenge_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curr_all_hero_challenge_id_)));
          set_has_curr_all_hero_challenge_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(544)) goto parse_play_time_points;
        break;
      }

      // optional uint32 play_time_points = 68;
      case 68: {
        if (tag == 544) {
         parse_play_time_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_time_points_)));
          set_has_play_time_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(552)) goto parse_account_flags;
        break;
      }

      // optional uint32 account_flags = 69;
      case 69: {
        if (tag == 552) {
         parse_account_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_flags_)));
          set_has_account_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(560)) goto parse_play_time_level;
        break;
      }

      // optional uint32 play_time_level = 70;
      case 70: {
        if (tag == 560) {
         parse_play_time_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_time_level_)));
          set_has_play_time_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSODOTAGameAccountClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSODOTAGameAccountClient)
  return false;
#undef DO_
}

void CSODOTAGameAccountClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSODOTAGameAccountClient)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 wins = 3;
  if (has_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wins(), output);
  }

  // optional uint32 losses = 4;
  if (has_losses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->losses(), output);
  }

  // optional uint32 xp = 12;
  if (has_xp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->xp(), output);
  }

  // optional uint32 level = 13;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->level(), output);
  }

  // optional uint32 initial_skill = 14;
  if (has_initial_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->initial_skill(), output);
  }

  // optional uint32 leaver_count = 15;
  if (has_leaver_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->leaver_count(), output);
  }

  // optional uint32 low_priority_until_date = 18;
  if (has_low_priority_until_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->low_priority_until_date(), output);
  }

  // optional uint32 prevent_text_chat_until_date = 20;
  if (has_prevent_text_chat_until_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->prevent_text_chat_until_date(), output);
  }

  // optional uint32 prevent_voice_until_date = 21;
  if (has_prevent_voice_until_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->prevent_voice_until_date(), output);
  }

  // optional uint32 last_abandoned_game_date = 22;
  if (has_last_abandoned_game_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->last_abandoned_game_date(), output);
  }

  // optional uint32 leaver_penalty_count = 23;
  if (has_leaver_penalty_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->leaver_penalty_count(), output);
  }

  // optional uint32 completed_game_streak = 24;
  if (has_completed_game_streak()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->completed_game_streak(), output);
  }

  // optional uint32 teaching = 28;
  if (has_teaching()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->teaching(), output);
  }

  // optional uint32 leadership = 29;
  if (has_leadership()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->leadership(), output);
  }

  // optional uint32 friendly = 30;
  if (has_friendly()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->friendly(), output);
  }

  // optional uint32 forgiving = 31;
  if (has_forgiving()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->forgiving(), output);
  }

  // optional uint32 account_disabled_until_date = 38;
  if (has_account_disabled_until_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->account_disabled_until_date(), output);
  }

  // optional uint32 account_disabled_count = 39;
  if (has_account_disabled_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->account_disabled_count(), output);
  }

  // optional uint32 showcase_hero_id = 40;
  if (has_showcase_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->showcase_hero_id(), output);
  }

  // optional uint32 match_disabled_until_date = 41;
  if (has_match_disabled_until_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->match_disabled_until_date(), output);
  }

  // optional uint32 match_disabled_count = 42;
  if (has_match_disabled_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->match_disabled_count(), output);
  }

  // optional .PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
  if (has_partner_account_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      44, this->partner_account_type(), output);
  }

  // optional uint32 partner_account_state = 45;
  if (has_partner_account_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->partner_account_state(), output);
  }

  // optional uint32 shutdownlawterminatetimestamp = 47;
  if (has_shutdownlawterminatetimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->shutdownlawterminatetimestamp(), output);
  }

  // optional uint32 low_priority_games_remaining = 48;
  if (has_low_priority_games_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->low_priority_games_remaining(), output);
  }

  // optional uint32 competitive_rank = 49;
  if (has_competitive_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->competitive_rank(), output);
  }

  // optional uint32 calibration_games_remaining = 51;
  if (has_calibration_games_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->calibration_games_remaining(), output);
  }

  // optional uint32 solo_competitive_rank = 52;
  if (has_solo_competitive_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->solo_competitive_rank(), output);
  }

  // optional uint32 solo_calibration_games_remaining = 54;
  if (has_solo_calibration_games_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->solo_calibration_games_remaining(), output);
  }

  // optional uint32 recruitment_level = 55;
  if (has_recruitment_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->recruitment_level(), output);
  }

  // optional bool has_new_notifications = 56;
  if (has_has_new_notifications()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(56, this->has_new_notifications(), output);
  }

  // optional bool is_league_admin = 57;
  if (has_is_league_admin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(57, this->is_league_admin(), output);
  }

  // optional uint32 secondary_leaver_count = 58;
  if (has_secondary_leaver_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->secondary_leaver_count(), output);
  }

  // optional uint32 last_secondary_abandoned_game_date = 59;
  if (has_last_secondary_abandoned_game_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(59, this->last_secondary_abandoned_game_date(), output);
  }

  // optional uint32 casual_games_played = 60;
  if (has_casual_games_played()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->casual_games_played(), output);
  }

  // optional uint32 solo_competitive_games_played = 61;
  if (has_solo_competitive_games_played()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->solo_competitive_games_played(), output);
  }

  // optional uint32 party_competitive_games_played = 62;
  if (has_party_competitive_games_played()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->party_competitive_games_played(), output);
  }

  // optional uint32 competitive_1v1_rank = 63;
  if (has_competitive_1v1_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(63, this->competitive_1v1_rank(), output);
  }

  // optional uint32 competitive_1v1_calibration_games_remaining = 64;
  if (has_competitive_1v1_calibration_games_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(64, this->competitive_1v1_calibration_games_remaining(), output);
  }

  // optional uint32 casual_1v1_games_played = 65;
  if (has_casual_1v1_games_played()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(65, this->casual_1v1_games_played(), output);
  }

  // optional uint32 competitive_team_games_played = 66;
  if (has_competitive_team_games_played()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(66, this->competitive_team_games_played(), output);
  }

  // optional uint32 curr_all_hero_challenge_id = 67;
  if (has_curr_all_hero_challenge_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(67, this->curr_all_hero_challenge_id(), output);
  }

  // optional uint32 play_time_points = 68;
  if (has_play_time_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(68, this->play_time_points(), output);
  }

  // optional uint32 account_flags = 69;
  if (has_account_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(69, this->account_flags(), output);
  }

  // optional uint32 play_time_level = 70;
  if (has_play_time_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->play_time_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSODOTAGameAccountClient)
}

::google::protobuf::uint8* CSODOTAGameAccountClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAGameAccountClient)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 wins = 3;
  if (has_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->wins(), target);
  }

  // optional uint32 losses = 4;
  if (has_losses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->losses(), target);
  }

  // optional uint32 xp = 12;
  if (has_xp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->xp(), target);
  }

  // optional uint32 level = 13;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->level(), target);
  }

  // optional uint32 initial_skill = 14;
  if (has_initial_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->initial_skill(), target);
  }

  // optional uint32 leaver_count = 15;
  if (has_leaver_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->leaver_count(), target);
  }

  // optional uint32 low_priority_until_date = 18;
  if (has_low_priority_until_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->low_priority_until_date(), target);
  }

  // optional uint32 prevent_text_chat_until_date = 20;
  if (has_prevent_text_chat_until_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->prevent_text_chat_until_date(), target);
  }

  // optional uint32 prevent_voice_until_date = 21;
  if (has_prevent_voice_until_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->prevent_voice_until_date(), target);
  }

  // optional uint32 last_abandoned_game_date = 22;
  if (has_last_abandoned_game_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->last_abandoned_game_date(), target);
  }

  // optional uint32 leaver_penalty_count = 23;
  if (has_leaver_penalty_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->leaver_penalty_count(), target);
  }

  // optional uint32 completed_game_streak = 24;
  if (has_completed_game_streak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->completed_game_streak(), target);
  }

  // optional uint32 teaching = 28;
  if (has_teaching()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->teaching(), target);
  }

  // optional uint32 leadership = 29;
  if (has_leadership()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->leadership(), target);
  }

  // optional uint32 friendly = 30;
  if (has_friendly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->friendly(), target);
  }

  // optional uint32 forgiving = 31;
  if (has_forgiving()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->forgiving(), target);
  }

  // optional uint32 account_disabled_until_date = 38;
  if (has_account_disabled_until_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->account_disabled_until_date(), target);
  }

  // optional uint32 account_disabled_count = 39;
  if (has_account_disabled_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->account_disabled_count(), target);
  }

  // optional uint32 showcase_hero_id = 40;
  if (has_showcase_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->showcase_hero_id(), target);
  }

  // optional uint32 match_disabled_until_date = 41;
  if (has_match_disabled_until_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->match_disabled_until_date(), target);
  }

  // optional uint32 match_disabled_count = 42;
  if (has_match_disabled_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->match_disabled_count(), target);
  }

  // optional .PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
  if (has_partner_account_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      44, this->partner_account_type(), target);
  }

  // optional uint32 partner_account_state = 45;
  if (has_partner_account_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->partner_account_state(), target);
  }

  // optional uint32 shutdownlawterminatetimestamp = 47;
  if (has_shutdownlawterminatetimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->shutdownlawterminatetimestamp(), target);
  }

  // optional uint32 low_priority_games_remaining = 48;
  if (has_low_priority_games_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->low_priority_games_remaining(), target);
  }

  // optional uint32 competitive_rank = 49;
  if (has_competitive_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->competitive_rank(), target);
  }

  // optional uint32 calibration_games_remaining = 51;
  if (has_calibration_games_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->calibration_games_remaining(), target);
  }

  // optional uint32 solo_competitive_rank = 52;
  if (has_solo_competitive_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->solo_competitive_rank(), target);
  }

  // optional uint32 solo_calibration_games_remaining = 54;
  if (has_solo_calibration_games_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->solo_calibration_games_remaining(), target);
  }

  // optional uint32 recruitment_level = 55;
  if (has_recruitment_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(55, this->recruitment_level(), target);
  }

  // optional bool has_new_notifications = 56;
  if (has_has_new_notifications()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(56, this->has_new_notifications(), target);
  }

  // optional bool is_league_admin = 57;
  if (has_is_league_admin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(57, this->is_league_admin(), target);
  }

  // optional uint32 secondary_leaver_count = 58;
  if (has_secondary_leaver_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(58, this->secondary_leaver_count(), target);
  }

  // optional uint32 last_secondary_abandoned_game_date = 59;
  if (has_last_secondary_abandoned_game_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(59, this->last_secondary_abandoned_game_date(), target);
  }

  // optional uint32 casual_games_played = 60;
  if (has_casual_games_played()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->casual_games_played(), target);
  }

  // optional uint32 solo_competitive_games_played = 61;
  if (has_solo_competitive_games_played()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->solo_competitive_games_played(), target);
  }

  // optional uint32 party_competitive_games_played = 62;
  if (has_party_competitive_games_played()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(62, this->party_competitive_games_played(), target);
  }

  // optional uint32 competitive_1v1_rank = 63;
  if (has_competitive_1v1_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(63, this->competitive_1v1_rank(), target);
  }

  // optional uint32 competitive_1v1_calibration_games_remaining = 64;
  if (has_competitive_1v1_calibration_games_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(64, this->competitive_1v1_calibration_games_remaining(), target);
  }

  // optional uint32 casual_1v1_games_played = 65;
  if (has_casual_1v1_games_played()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(65, this->casual_1v1_games_played(), target);
  }

  // optional uint32 competitive_team_games_played = 66;
  if (has_competitive_team_games_played()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(66, this->competitive_team_games_played(), target);
  }

  // optional uint32 curr_all_hero_challenge_id = 67;
  if (has_curr_all_hero_challenge_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(67, this->curr_all_hero_challenge_id(), target);
  }

  // optional uint32 play_time_points = 68;
  if (has_play_time_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(68, this->play_time_points(), target);
  }

  // optional uint32 account_flags = 69;
  if (has_account_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(69, this->account_flags(), target);
  }

  // optional uint32 play_time_level = 70;
  if (has_play_time_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(70, this->play_time_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAGameAccountClient)
  return target;
}

int CSODOTAGameAccountClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 wins = 3;
    if (has_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wins());
    }

    // optional uint32 losses = 4;
    if (has_losses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losses());
    }

    // optional uint32 xp = 12;
    if (has_xp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp());
    }

    // optional uint32 level = 13;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 initial_skill = 14;
    if (has_initial_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_skill());
    }

    // optional uint32 leaver_count = 15;
    if (has_leaver_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaver_count());
    }

    // optional uint32 secondary_leaver_count = 58;
    if (has_secondary_leaver_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondary_leaver_count());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 low_priority_until_date = 18;
    if (has_low_priority_until_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_priority_until_date());
    }

    // optional uint32 prevent_text_chat_until_date = 20;
    if (has_prevent_text_chat_until_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prevent_text_chat_until_date());
    }

    // optional uint32 prevent_voice_until_date = 21;
    if (has_prevent_voice_until_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prevent_voice_until_date());
    }

    // optional uint32 last_abandoned_game_date = 22;
    if (has_last_abandoned_game_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_abandoned_game_date());
    }

    // optional uint32 last_secondary_abandoned_game_date = 59;
    if (has_last_secondary_abandoned_game_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_secondary_abandoned_game_date());
    }

    // optional uint32 leaver_penalty_count = 23;
    if (has_leaver_penalty_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaver_penalty_count());
    }

    // optional uint32 completed_game_streak = 24;
    if (has_completed_game_streak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->completed_game_streak());
    }

    // optional uint32 teaching = 28;
    if (has_teaching()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teaching());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 leadership = 29;
    if (has_leadership()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leadership());
    }

    // optional uint32 friendly = 30;
    if (has_friendly()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friendly());
    }

    // optional uint32 forgiving = 31;
    if (has_forgiving()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forgiving());
    }

    // optional uint32 account_disabled_until_date = 38;
    if (has_account_disabled_until_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_disabled_until_date());
    }

    // optional uint32 account_disabled_count = 39;
    if (has_account_disabled_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_disabled_count());
    }

    // optional uint32 showcase_hero_id = 40;
    if (has_showcase_hero_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->showcase_hero_id());
    }

    // optional uint32 match_disabled_until_date = 41;
    if (has_match_disabled_until_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_disabled_until_date());
    }

    // optional uint32 match_disabled_count = 42;
    if (has_match_disabled_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_disabled_count());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional .PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
    if (has_partner_account_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->partner_account_type());
    }

    // optional uint32 partner_account_state = 45;
    if (has_partner_account_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partner_account_state());
    }

    // optional uint32 shutdownlawterminatetimestamp = 47;
    if (has_shutdownlawterminatetimestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shutdownlawterminatetimestamp());
    }

    // optional uint32 low_priority_games_remaining = 48;
    if (has_low_priority_games_remaining()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_priority_games_remaining());
    }

    // optional uint32 competitive_rank = 49;
    if (has_competitive_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->competitive_rank());
    }

    // optional uint32 calibration_games_remaining = 51;
    if (has_calibration_games_remaining()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->calibration_games_remaining());
    }

    // optional uint32 solo_competitive_rank = 52;
    if (has_solo_competitive_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo_competitive_rank());
    }

    // optional uint32 solo_calibration_games_remaining = 54;
    if (has_solo_calibration_games_remaining()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo_calibration_games_remaining());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional uint32 competitive_1v1_rank = 63;
    if (has_competitive_1v1_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->competitive_1v1_rank());
    }

    // optional uint32 competitive_1v1_calibration_games_remaining = 64;
    if (has_competitive_1v1_calibration_games_remaining()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->competitive_1v1_calibration_games_remaining());
    }

    // optional uint32 recruitment_level = 55;
    if (has_recruitment_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recruitment_level());
    }

    // optional bool has_new_notifications = 56;
    if (has_has_new_notifications()) {
      total_size += 2 + 1;
    }

    // optional bool is_league_admin = 57;
    if (has_is_league_admin()) {
      total_size += 2 + 1;
    }

    // optional uint32 casual_games_played = 60;
    if (has_casual_games_played()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->casual_games_played());
    }

    // optional uint32 solo_competitive_games_played = 61;
    if (has_solo_competitive_games_played()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo_competitive_games_played());
    }

    // optional uint32 party_competitive_games_played = 62;
    if (has_party_competitive_games_played()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->party_competitive_games_played());
    }

  }
  if (_has_bits_[40 / 32] & 16128u) {
    // optional uint32 casual_1v1_games_played = 65;
    if (has_casual_1v1_games_played()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->casual_1v1_games_played());
    }

    // optional uint32 competitive_team_games_played = 66;
    if (has_competitive_team_games_played()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->competitive_team_games_played());
    }

    // optional uint32 curr_all_hero_challenge_id = 67;
    if (has_curr_all_hero_challenge_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curr_all_hero_challenge_id());
    }

    // optional uint32 play_time_points = 68;
    if (has_play_time_points()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->play_time_points());
    }

    // optional uint32 account_flags = 69;
    if (has_account_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_flags());
    }

    // optional uint32 play_time_level = 70;
    if (has_play_time_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->play_time_level());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTAGameAccountClient::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CSODOTAGameAccountClient* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSODOTAGameAccountClient>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTAGameAccountClient::MergeFrom(const CSODOTAGameAccountClient& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_wins()) {
      set_wins(from.wins());
    }
    if (from.has_losses()) {
      set_losses(from.losses());
    }
    if (from.has_xp()) {
      set_xp(from.xp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_initial_skill()) {
      set_initial_skill(from.initial_skill());
    }
    if (from.has_leaver_count()) {
      set_leaver_count(from.leaver_count());
    }
    if (from.has_secondary_leaver_count()) {
      set_secondary_leaver_count(from.secondary_leaver_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_low_priority_until_date()) {
      set_low_priority_until_date(from.low_priority_until_date());
    }
    if (from.has_prevent_text_chat_until_date()) {
      set_prevent_text_chat_until_date(from.prevent_text_chat_until_date());
    }
    if (from.has_prevent_voice_until_date()) {
      set_prevent_voice_until_date(from.prevent_voice_until_date());
    }
    if (from.has_last_abandoned_game_date()) {
      set_last_abandoned_game_date(from.last_abandoned_game_date());
    }
    if (from.has_last_secondary_abandoned_game_date()) {
      set_last_secondary_abandoned_game_date(from.last_secondary_abandoned_game_date());
    }
    if (from.has_leaver_penalty_count()) {
      set_leaver_penalty_count(from.leaver_penalty_count());
    }
    if (from.has_completed_game_streak()) {
      set_completed_game_streak(from.completed_game_streak());
    }
    if (from.has_teaching()) {
      set_teaching(from.teaching());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_leadership()) {
      set_leadership(from.leadership());
    }
    if (from.has_friendly()) {
      set_friendly(from.friendly());
    }
    if (from.has_forgiving()) {
      set_forgiving(from.forgiving());
    }
    if (from.has_account_disabled_until_date()) {
      set_account_disabled_until_date(from.account_disabled_until_date());
    }
    if (from.has_account_disabled_count()) {
      set_account_disabled_count(from.account_disabled_count());
    }
    if (from.has_showcase_hero_id()) {
      set_showcase_hero_id(from.showcase_hero_id());
    }
    if (from.has_match_disabled_until_date()) {
      set_match_disabled_until_date(from.match_disabled_until_date());
    }
    if (from.has_match_disabled_count()) {
      set_match_disabled_count(from.match_disabled_count());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_partner_account_type()) {
      set_partner_account_type(from.partner_account_type());
    }
    if (from.has_partner_account_state()) {
      set_partner_account_state(from.partner_account_state());
    }
    if (from.has_shutdownlawterminatetimestamp()) {
      set_shutdownlawterminatetimestamp(from.shutdownlawterminatetimestamp());
    }
    if (from.has_low_priority_games_remaining()) {
      set_low_priority_games_remaining(from.low_priority_games_remaining());
    }
    if (from.has_competitive_rank()) {
      set_competitive_rank(from.competitive_rank());
    }
    if (from.has_calibration_games_remaining()) {
      set_calibration_games_remaining(from.calibration_games_remaining());
    }
    if (from.has_solo_competitive_rank()) {
      set_solo_competitive_rank(from.solo_competitive_rank());
    }
    if (from.has_solo_calibration_games_remaining()) {
      set_solo_calibration_games_remaining(from.solo_calibration_games_remaining());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_competitive_1v1_rank()) {
      set_competitive_1v1_rank(from.competitive_1v1_rank());
    }
    if (from.has_competitive_1v1_calibration_games_remaining()) {
      set_competitive_1v1_calibration_games_remaining(from.competitive_1v1_calibration_games_remaining());
    }
    if (from.has_recruitment_level()) {
      set_recruitment_level(from.recruitment_level());
    }
    if (from.has_has_new_notifications()) {
      set_has_new_notifications(from.has_new_notifications());
    }
    if (from.has_is_league_admin()) {
      set_is_league_admin(from.is_league_admin());
    }
    if (from.has_casual_games_played()) {
      set_casual_games_played(from.casual_games_played());
    }
    if (from.has_solo_competitive_games_played()) {
      set_solo_competitive_games_played(from.solo_competitive_games_played());
    }
    if (from.has_party_competitive_games_played()) {
      set_party_competitive_games_played(from.party_competitive_games_played());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_casual_1v1_games_played()) {
      set_casual_1v1_games_played(from.casual_1v1_games_played());
    }
    if (from.has_competitive_team_games_played()) {
      set_competitive_team_games_played(from.competitive_team_games_played());
    }
    if (from.has_curr_all_hero_challenge_id()) {
      set_curr_all_hero_challenge_id(from.curr_all_hero_challenge_id());
    }
    if (from.has_play_time_points()) {
      set_play_time_points(from.play_time_points());
    }
    if (from.has_account_flags()) {
      set_account_flags(from.account_flags());
    }
    if (from.has_play_time_level()) {
      set_play_time_level(from.play_time_level());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CSODOTAGameAccountClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAGameAccountClient::CopyFrom(const CSODOTAGameAccountClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAGameAccountClient::IsInitialized() const {

  return true;
}

void CSODOTAGameAccountClient::Swap(CSODOTAGameAccountClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTAGameAccountClient::InternalSwap(CSODOTAGameAccountClient* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(wins_, other->wins_);
  std::swap(losses_, other->losses_);
  std::swap(xp_, other->xp_);
  std::swap(level_, other->level_);
  std::swap(initial_skill_, other->initial_skill_);
  std::swap(leaver_count_, other->leaver_count_);
  std::swap(secondary_leaver_count_, other->secondary_leaver_count_);
  std::swap(low_priority_until_date_, other->low_priority_until_date_);
  std::swap(prevent_text_chat_until_date_, other->prevent_text_chat_until_date_);
  std::swap(prevent_voice_until_date_, other->prevent_voice_until_date_);
  std::swap(last_abandoned_game_date_, other->last_abandoned_game_date_);
  std::swap(last_secondary_abandoned_game_date_, other->last_secondary_abandoned_game_date_);
  std::swap(leaver_penalty_count_, other->leaver_penalty_count_);
  std::swap(completed_game_streak_, other->completed_game_streak_);
  std::swap(teaching_, other->teaching_);
  std::swap(leadership_, other->leadership_);
  std::swap(friendly_, other->friendly_);
  std::swap(forgiving_, other->forgiving_);
  std::swap(account_disabled_until_date_, other->account_disabled_until_date_);
  std::swap(account_disabled_count_, other->account_disabled_count_);
  std::swap(showcase_hero_id_, other->showcase_hero_id_);
  std::swap(match_disabled_until_date_, other->match_disabled_until_date_);
  std::swap(match_disabled_count_, other->match_disabled_count_);
  std::swap(partner_account_type_, other->partner_account_type_);
  std::swap(partner_account_state_, other->partner_account_state_);
  std::swap(shutdownlawterminatetimestamp_, other->shutdownlawterminatetimestamp_);
  std::swap(low_priority_games_remaining_, other->low_priority_games_remaining_);
  std::swap(competitive_rank_, other->competitive_rank_);
  std::swap(calibration_games_remaining_, other->calibration_games_remaining_);
  std::swap(solo_competitive_rank_, other->solo_competitive_rank_);
  std::swap(solo_calibration_games_remaining_, other->solo_calibration_games_remaining_);
  std::swap(competitive_1v1_rank_, other->competitive_1v1_rank_);
  std::swap(competitive_1v1_calibration_games_remaining_, other->competitive_1v1_calibration_games_remaining_);
  std::swap(recruitment_level_, other->recruitment_level_);
  std::swap(has_new_notifications_, other->has_new_notifications_);
  std::swap(is_league_admin_, other->is_league_admin_);
  std::swap(casual_games_played_, other->casual_games_played_);
  std::swap(solo_competitive_games_played_, other->solo_competitive_games_played_);
  std::swap(party_competitive_games_played_, other->party_competitive_games_played_);
  std::swap(casual_1v1_games_played_, other->casual_1v1_games_played_);
  std::swap(competitive_team_games_played_, other->competitive_team_games_played_);
  std::swap(curr_all_hero_challenge_id_, other->curr_all_hero_challenge_id_);
  std::swap(play_time_points_, other->play_time_points_);
  std::swap(account_flags_, other->account_flags_);
  std::swap(play_time_level_, other->play_time_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSODOTAGameAccountClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTAGameAccountClient_descriptor_;
  metadata.reflection = CSODOTAGameAccountClient_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSODOTAGameAccountClient

// optional uint32 account_id = 1;
bool CSODOTAGameAccountClient::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSODOTAGameAccountClient::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CSODOTAGameAccountClient::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSODOTAGameAccountClient::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.account_id)
  return account_id_;
}
 void CSODOTAGameAccountClient::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.account_id)
}

// optional uint32 wins = 3;
bool CSODOTAGameAccountClient::has_wins() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSODOTAGameAccountClient::set_has_wins() {
  _has_bits_[0] |= 0x00000002u;
}
void CSODOTAGameAccountClient::clear_has_wins() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSODOTAGameAccountClient::clear_wins() {
  wins_ = 0u;
  clear_has_wins();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::wins() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.wins)
  return wins_;
}
 void CSODOTAGameAccountClient::set_wins(::google::protobuf::uint32 value) {
  set_has_wins();
  wins_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.wins)
}

// optional uint32 losses = 4;
bool CSODOTAGameAccountClient::has_losses() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSODOTAGameAccountClient::set_has_losses() {
  _has_bits_[0] |= 0x00000004u;
}
void CSODOTAGameAccountClient::clear_has_losses() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSODOTAGameAccountClient::clear_losses() {
  losses_ = 0u;
  clear_has_losses();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::losses() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.losses)
  return losses_;
}
 void CSODOTAGameAccountClient::set_losses(::google::protobuf::uint32 value) {
  set_has_losses();
  losses_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.losses)
}

// optional uint32 xp = 12;
bool CSODOTAGameAccountClient::has_xp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSODOTAGameAccountClient::set_has_xp() {
  _has_bits_[0] |= 0x00000008u;
}
void CSODOTAGameAccountClient::clear_has_xp() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSODOTAGameAccountClient::clear_xp() {
  xp_ = 0u;
  clear_has_xp();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::xp() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.xp)
  return xp_;
}
 void CSODOTAGameAccountClient::set_xp(::google::protobuf::uint32 value) {
  set_has_xp();
  xp_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.xp)
}

// optional uint32 level = 13;
bool CSODOTAGameAccountClient::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSODOTAGameAccountClient::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
void CSODOTAGameAccountClient::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSODOTAGameAccountClient::clear_level() {
  level_ = 0u;
  clear_has_level();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::level() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.level)
  return level_;
}
 void CSODOTAGameAccountClient::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.level)
}

// optional uint32 initial_skill = 14;
bool CSODOTAGameAccountClient::has_initial_skill() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSODOTAGameAccountClient::set_has_initial_skill() {
  _has_bits_[0] |= 0x00000020u;
}
void CSODOTAGameAccountClient::clear_has_initial_skill() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSODOTAGameAccountClient::clear_initial_skill() {
  initial_skill_ = 0u;
  clear_has_initial_skill();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::initial_skill() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.initial_skill)
  return initial_skill_;
}
 void CSODOTAGameAccountClient::set_initial_skill(::google::protobuf::uint32 value) {
  set_has_initial_skill();
  initial_skill_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.initial_skill)
}

// optional uint32 leaver_count = 15;
bool CSODOTAGameAccountClient::has_leaver_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CSODOTAGameAccountClient::set_has_leaver_count() {
  _has_bits_[0] |= 0x00000040u;
}
void CSODOTAGameAccountClient::clear_has_leaver_count() {
  _has_bits_[0] &= ~0x00000040u;
}
void CSODOTAGameAccountClient::clear_leaver_count() {
  leaver_count_ = 0u;
  clear_has_leaver_count();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::leaver_count() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.leaver_count)
  return leaver_count_;
}
 void CSODOTAGameAccountClient::set_leaver_count(::google::protobuf::uint32 value) {
  set_has_leaver_count();
  leaver_count_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.leaver_count)
}

// optional uint32 secondary_leaver_count = 58;
bool CSODOTAGameAccountClient::has_secondary_leaver_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CSODOTAGameAccountClient::set_has_secondary_leaver_count() {
  _has_bits_[0] |= 0x00000080u;
}
void CSODOTAGameAccountClient::clear_has_secondary_leaver_count() {
  _has_bits_[0] &= ~0x00000080u;
}
void CSODOTAGameAccountClient::clear_secondary_leaver_count() {
  secondary_leaver_count_ = 0u;
  clear_has_secondary_leaver_count();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::secondary_leaver_count() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.secondary_leaver_count)
  return secondary_leaver_count_;
}
 void CSODOTAGameAccountClient::set_secondary_leaver_count(::google::protobuf::uint32 value) {
  set_has_secondary_leaver_count();
  secondary_leaver_count_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.secondary_leaver_count)
}

// optional uint32 low_priority_until_date = 18;
bool CSODOTAGameAccountClient::has_low_priority_until_date() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CSODOTAGameAccountClient::set_has_low_priority_until_date() {
  _has_bits_[0] |= 0x00000100u;
}
void CSODOTAGameAccountClient::clear_has_low_priority_until_date() {
  _has_bits_[0] &= ~0x00000100u;
}
void CSODOTAGameAccountClient::clear_low_priority_until_date() {
  low_priority_until_date_ = 0u;
  clear_has_low_priority_until_date();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::low_priority_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.low_priority_until_date)
  return low_priority_until_date_;
}
 void CSODOTAGameAccountClient::set_low_priority_until_date(::google::protobuf::uint32 value) {
  set_has_low_priority_until_date();
  low_priority_until_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.low_priority_until_date)
}

// optional uint32 prevent_text_chat_until_date = 20;
bool CSODOTAGameAccountClient::has_prevent_text_chat_until_date() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CSODOTAGameAccountClient::set_has_prevent_text_chat_until_date() {
  _has_bits_[0] |= 0x00000200u;
}
void CSODOTAGameAccountClient::clear_has_prevent_text_chat_until_date() {
  _has_bits_[0] &= ~0x00000200u;
}
void CSODOTAGameAccountClient::clear_prevent_text_chat_until_date() {
  prevent_text_chat_until_date_ = 0u;
  clear_has_prevent_text_chat_until_date();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::prevent_text_chat_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.prevent_text_chat_until_date)
  return prevent_text_chat_until_date_;
}
 void CSODOTAGameAccountClient::set_prevent_text_chat_until_date(::google::protobuf::uint32 value) {
  set_has_prevent_text_chat_until_date();
  prevent_text_chat_until_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.prevent_text_chat_until_date)
}

// optional uint32 prevent_voice_until_date = 21;
bool CSODOTAGameAccountClient::has_prevent_voice_until_date() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CSODOTAGameAccountClient::set_has_prevent_voice_until_date() {
  _has_bits_[0] |= 0x00000400u;
}
void CSODOTAGameAccountClient::clear_has_prevent_voice_until_date() {
  _has_bits_[0] &= ~0x00000400u;
}
void CSODOTAGameAccountClient::clear_prevent_voice_until_date() {
  prevent_voice_until_date_ = 0u;
  clear_has_prevent_voice_until_date();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::prevent_voice_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.prevent_voice_until_date)
  return prevent_voice_until_date_;
}
 void CSODOTAGameAccountClient::set_prevent_voice_until_date(::google::protobuf::uint32 value) {
  set_has_prevent_voice_until_date();
  prevent_voice_until_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.prevent_voice_until_date)
}

// optional uint32 last_abandoned_game_date = 22;
bool CSODOTAGameAccountClient::has_last_abandoned_game_date() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CSODOTAGameAccountClient::set_has_last_abandoned_game_date() {
  _has_bits_[0] |= 0x00000800u;
}
void CSODOTAGameAccountClient::clear_has_last_abandoned_game_date() {
  _has_bits_[0] &= ~0x00000800u;
}
void CSODOTAGameAccountClient::clear_last_abandoned_game_date() {
  last_abandoned_game_date_ = 0u;
  clear_has_last_abandoned_game_date();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::last_abandoned_game_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.last_abandoned_game_date)
  return last_abandoned_game_date_;
}
 void CSODOTAGameAccountClient::set_last_abandoned_game_date(::google::protobuf::uint32 value) {
  set_has_last_abandoned_game_date();
  last_abandoned_game_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.last_abandoned_game_date)
}

// optional uint32 last_secondary_abandoned_game_date = 59;
bool CSODOTAGameAccountClient::has_last_secondary_abandoned_game_date() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CSODOTAGameAccountClient::set_has_last_secondary_abandoned_game_date() {
  _has_bits_[0] |= 0x00001000u;
}
void CSODOTAGameAccountClient::clear_has_last_secondary_abandoned_game_date() {
  _has_bits_[0] &= ~0x00001000u;
}
void CSODOTAGameAccountClient::clear_last_secondary_abandoned_game_date() {
  last_secondary_abandoned_game_date_ = 0u;
  clear_has_last_secondary_abandoned_game_date();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::last_secondary_abandoned_game_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.last_secondary_abandoned_game_date)
  return last_secondary_abandoned_game_date_;
}
 void CSODOTAGameAccountClient::set_last_secondary_abandoned_game_date(::google::protobuf::uint32 value) {
  set_has_last_secondary_abandoned_game_date();
  last_secondary_abandoned_game_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.last_secondary_abandoned_game_date)
}

// optional uint32 leaver_penalty_count = 23;
bool CSODOTAGameAccountClient::has_leaver_penalty_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CSODOTAGameAccountClient::set_has_leaver_penalty_count() {
  _has_bits_[0] |= 0x00002000u;
}
void CSODOTAGameAccountClient::clear_has_leaver_penalty_count() {
  _has_bits_[0] &= ~0x00002000u;
}
void CSODOTAGameAccountClient::clear_leaver_penalty_count() {
  leaver_penalty_count_ = 0u;
  clear_has_leaver_penalty_count();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::leaver_penalty_count() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.leaver_penalty_count)
  return leaver_penalty_count_;
}
 void CSODOTAGameAccountClient::set_leaver_penalty_count(::google::protobuf::uint32 value) {
  set_has_leaver_penalty_count();
  leaver_penalty_count_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.leaver_penalty_count)
}

// optional uint32 completed_game_streak = 24;
bool CSODOTAGameAccountClient::has_completed_game_streak() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CSODOTAGameAccountClient::set_has_completed_game_streak() {
  _has_bits_[0] |= 0x00004000u;
}
void CSODOTAGameAccountClient::clear_has_completed_game_streak() {
  _has_bits_[0] &= ~0x00004000u;
}
void CSODOTAGameAccountClient::clear_completed_game_streak() {
  completed_game_streak_ = 0u;
  clear_has_completed_game_streak();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::completed_game_streak() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.completed_game_streak)
  return completed_game_streak_;
}
 void CSODOTAGameAccountClient::set_completed_game_streak(::google::protobuf::uint32 value) {
  set_has_completed_game_streak();
  completed_game_streak_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.completed_game_streak)
}

// optional uint32 teaching = 28;
bool CSODOTAGameAccountClient::has_teaching() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CSODOTAGameAccountClient::set_has_teaching() {
  _has_bits_[0] |= 0x00008000u;
}
void CSODOTAGameAccountClient::clear_has_teaching() {
  _has_bits_[0] &= ~0x00008000u;
}
void CSODOTAGameAccountClient::clear_teaching() {
  teaching_ = 0u;
  clear_has_teaching();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::teaching() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.teaching)
  return teaching_;
}
 void CSODOTAGameAccountClient::set_teaching(::google::protobuf::uint32 value) {
  set_has_teaching();
  teaching_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.teaching)
}

// optional uint32 leadership = 29;
bool CSODOTAGameAccountClient::has_leadership() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CSODOTAGameAccountClient::set_has_leadership() {
  _has_bits_[0] |= 0x00010000u;
}
void CSODOTAGameAccountClient::clear_has_leadership() {
  _has_bits_[0] &= ~0x00010000u;
}
void CSODOTAGameAccountClient::clear_leadership() {
  leadership_ = 0u;
  clear_has_leadership();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::leadership() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.leadership)
  return leadership_;
}
 void CSODOTAGameAccountClient::set_leadership(::google::protobuf::uint32 value) {
  set_has_leadership();
  leadership_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.leadership)
}

// optional uint32 friendly = 30;
bool CSODOTAGameAccountClient::has_friendly() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CSODOTAGameAccountClient::set_has_friendly() {
  _has_bits_[0] |= 0x00020000u;
}
void CSODOTAGameAccountClient::clear_has_friendly() {
  _has_bits_[0] &= ~0x00020000u;
}
void CSODOTAGameAccountClient::clear_friendly() {
  friendly_ = 0u;
  clear_has_friendly();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::friendly() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.friendly)
  return friendly_;
}
 void CSODOTAGameAccountClient::set_friendly(::google::protobuf::uint32 value) {
  set_has_friendly();
  friendly_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.friendly)
}

// optional uint32 forgiving = 31;
bool CSODOTAGameAccountClient::has_forgiving() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CSODOTAGameAccountClient::set_has_forgiving() {
  _has_bits_[0] |= 0x00040000u;
}
void CSODOTAGameAccountClient::clear_has_forgiving() {
  _has_bits_[0] &= ~0x00040000u;
}
void CSODOTAGameAccountClient::clear_forgiving() {
  forgiving_ = 0u;
  clear_has_forgiving();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::forgiving() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.forgiving)
  return forgiving_;
}
 void CSODOTAGameAccountClient::set_forgiving(::google::protobuf::uint32 value) {
  set_has_forgiving();
  forgiving_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.forgiving)
}

// optional uint32 account_disabled_until_date = 38;
bool CSODOTAGameAccountClient::has_account_disabled_until_date() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CSODOTAGameAccountClient::set_has_account_disabled_until_date() {
  _has_bits_[0] |= 0x00080000u;
}
void CSODOTAGameAccountClient::clear_has_account_disabled_until_date() {
  _has_bits_[0] &= ~0x00080000u;
}
void CSODOTAGameAccountClient::clear_account_disabled_until_date() {
  account_disabled_until_date_ = 0u;
  clear_has_account_disabled_until_date();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::account_disabled_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.account_disabled_until_date)
  return account_disabled_until_date_;
}
 void CSODOTAGameAccountClient::set_account_disabled_until_date(::google::protobuf::uint32 value) {
  set_has_account_disabled_until_date();
  account_disabled_until_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.account_disabled_until_date)
}

// optional uint32 account_disabled_count = 39;
bool CSODOTAGameAccountClient::has_account_disabled_count() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CSODOTAGameAccountClient::set_has_account_disabled_count() {
  _has_bits_[0] |= 0x00100000u;
}
void CSODOTAGameAccountClient::clear_has_account_disabled_count() {
  _has_bits_[0] &= ~0x00100000u;
}
void CSODOTAGameAccountClient::clear_account_disabled_count() {
  account_disabled_count_ = 0u;
  clear_has_account_disabled_count();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::account_disabled_count() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.account_disabled_count)
  return account_disabled_count_;
}
 void CSODOTAGameAccountClient::set_account_disabled_count(::google::protobuf::uint32 value) {
  set_has_account_disabled_count();
  account_disabled_count_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.account_disabled_count)
}

// optional uint32 showcase_hero_id = 40;
bool CSODOTAGameAccountClient::has_showcase_hero_id() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CSODOTAGameAccountClient::set_has_showcase_hero_id() {
  _has_bits_[0] |= 0x00200000u;
}
void CSODOTAGameAccountClient::clear_has_showcase_hero_id() {
  _has_bits_[0] &= ~0x00200000u;
}
void CSODOTAGameAccountClient::clear_showcase_hero_id() {
  showcase_hero_id_ = 0u;
  clear_has_showcase_hero_id();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::showcase_hero_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.showcase_hero_id)
  return showcase_hero_id_;
}
 void CSODOTAGameAccountClient::set_showcase_hero_id(::google::protobuf::uint32 value) {
  set_has_showcase_hero_id();
  showcase_hero_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.showcase_hero_id)
}

// optional uint32 match_disabled_until_date = 41;
bool CSODOTAGameAccountClient::has_match_disabled_until_date() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CSODOTAGameAccountClient::set_has_match_disabled_until_date() {
  _has_bits_[0] |= 0x00400000u;
}
void CSODOTAGameAccountClient::clear_has_match_disabled_until_date() {
  _has_bits_[0] &= ~0x00400000u;
}
void CSODOTAGameAccountClient::clear_match_disabled_until_date() {
  match_disabled_until_date_ = 0u;
  clear_has_match_disabled_until_date();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::match_disabled_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.match_disabled_until_date)
  return match_disabled_until_date_;
}
 void CSODOTAGameAccountClient::set_match_disabled_until_date(::google::protobuf::uint32 value) {
  set_has_match_disabled_until_date();
  match_disabled_until_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.match_disabled_until_date)
}

// optional uint32 match_disabled_count = 42;
bool CSODOTAGameAccountClient::has_match_disabled_count() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void CSODOTAGameAccountClient::set_has_match_disabled_count() {
  _has_bits_[0] |= 0x00800000u;
}
void CSODOTAGameAccountClient::clear_has_match_disabled_count() {
  _has_bits_[0] &= ~0x00800000u;
}
void CSODOTAGameAccountClient::clear_match_disabled_count() {
  match_disabled_count_ = 0u;
  clear_has_match_disabled_count();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::match_disabled_count() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.match_disabled_count)
  return match_disabled_count_;
}
 void CSODOTAGameAccountClient::set_match_disabled_count(::google::protobuf::uint32 value) {
  set_has_match_disabled_count();
  match_disabled_count_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.match_disabled_count)
}

// optional .PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
bool CSODOTAGameAccountClient::has_partner_account_type() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void CSODOTAGameAccountClient::set_has_partner_account_type() {
  _has_bits_[0] |= 0x01000000u;
}
void CSODOTAGameAccountClient::clear_has_partner_account_type() {
  _has_bits_[0] &= ~0x01000000u;
}
void CSODOTAGameAccountClient::clear_partner_account_type() {
  partner_account_type_ = 0;
  clear_has_partner_account_type();
}
 ::PartnerAccountType CSODOTAGameAccountClient::partner_account_type() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.partner_account_type)
  return static_cast< ::PartnerAccountType >(partner_account_type_);
}
 void CSODOTAGameAccountClient::set_partner_account_type(::PartnerAccountType value) {
  assert(::PartnerAccountType_IsValid(value));
  set_has_partner_account_type();
  partner_account_type_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.partner_account_type)
}

// optional uint32 partner_account_state = 45;
bool CSODOTAGameAccountClient::has_partner_account_state() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void CSODOTAGameAccountClient::set_has_partner_account_state() {
  _has_bits_[0] |= 0x02000000u;
}
void CSODOTAGameAccountClient::clear_has_partner_account_state() {
  _has_bits_[0] &= ~0x02000000u;
}
void CSODOTAGameAccountClient::clear_partner_account_state() {
  partner_account_state_ = 0u;
  clear_has_partner_account_state();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::partner_account_state() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.partner_account_state)
  return partner_account_state_;
}
 void CSODOTAGameAccountClient::set_partner_account_state(::google::protobuf::uint32 value) {
  set_has_partner_account_state();
  partner_account_state_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.partner_account_state)
}

// optional uint32 shutdownlawterminatetimestamp = 47;
bool CSODOTAGameAccountClient::has_shutdownlawterminatetimestamp() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void CSODOTAGameAccountClient::set_has_shutdownlawterminatetimestamp() {
  _has_bits_[0] |= 0x04000000u;
}
void CSODOTAGameAccountClient::clear_has_shutdownlawterminatetimestamp() {
  _has_bits_[0] &= ~0x04000000u;
}
void CSODOTAGameAccountClient::clear_shutdownlawterminatetimestamp() {
  shutdownlawterminatetimestamp_ = 0u;
  clear_has_shutdownlawterminatetimestamp();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::shutdownlawterminatetimestamp() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.shutdownlawterminatetimestamp)
  return shutdownlawterminatetimestamp_;
}
 void CSODOTAGameAccountClient::set_shutdownlawterminatetimestamp(::google::protobuf::uint32 value) {
  set_has_shutdownlawterminatetimestamp();
  shutdownlawterminatetimestamp_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.shutdownlawterminatetimestamp)
}

// optional uint32 low_priority_games_remaining = 48;
bool CSODOTAGameAccountClient::has_low_priority_games_remaining() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void CSODOTAGameAccountClient::set_has_low_priority_games_remaining() {
  _has_bits_[0] |= 0x08000000u;
}
void CSODOTAGameAccountClient::clear_has_low_priority_games_remaining() {
  _has_bits_[0] &= ~0x08000000u;
}
void CSODOTAGameAccountClient::clear_low_priority_games_remaining() {
  low_priority_games_remaining_ = 0u;
  clear_has_low_priority_games_remaining();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::low_priority_games_remaining() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.low_priority_games_remaining)
  return low_priority_games_remaining_;
}
 void CSODOTAGameAccountClient::set_low_priority_games_remaining(::google::protobuf::uint32 value) {
  set_has_low_priority_games_remaining();
  low_priority_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.low_priority_games_remaining)
}

// optional uint32 competitive_rank = 49;
bool CSODOTAGameAccountClient::has_competitive_rank() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void CSODOTAGameAccountClient::set_has_competitive_rank() {
  _has_bits_[0] |= 0x10000000u;
}
void CSODOTAGameAccountClient::clear_has_competitive_rank() {
  _has_bits_[0] &= ~0x10000000u;
}
void CSODOTAGameAccountClient::clear_competitive_rank() {
  competitive_rank_ = 0u;
  clear_has_competitive_rank();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::competitive_rank() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.competitive_rank)
  return competitive_rank_;
}
 void CSODOTAGameAccountClient::set_competitive_rank(::google::protobuf::uint32 value) {
  set_has_competitive_rank();
  competitive_rank_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.competitive_rank)
}

// optional uint32 calibration_games_remaining = 51;
bool CSODOTAGameAccountClient::has_calibration_games_remaining() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void CSODOTAGameAccountClient::set_has_calibration_games_remaining() {
  _has_bits_[0] |= 0x20000000u;
}
void CSODOTAGameAccountClient::clear_has_calibration_games_remaining() {
  _has_bits_[0] &= ~0x20000000u;
}
void CSODOTAGameAccountClient::clear_calibration_games_remaining() {
  calibration_games_remaining_ = 0u;
  clear_has_calibration_games_remaining();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::calibration_games_remaining() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.calibration_games_remaining)
  return calibration_games_remaining_;
}
 void CSODOTAGameAccountClient::set_calibration_games_remaining(::google::protobuf::uint32 value) {
  set_has_calibration_games_remaining();
  calibration_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.calibration_games_remaining)
}

// optional uint32 solo_competitive_rank = 52;
bool CSODOTAGameAccountClient::has_solo_competitive_rank() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void CSODOTAGameAccountClient::set_has_solo_competitive_rank() {
  _has_bits_[0] |= 0x40000000u;
}
void CSODOTAGameAccountClient::clear_has_solo_competitive_rank() {
  _has_bits_[0] &= ~0x40000000u;
}
void CSODOTAGameAccountClient::clear_solo_competitive_rank() {
  solo_competitive_rank_ = 0u;
  clear_has_solo_competitive_rank();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::solo_competitive_rank() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.solo_competitive_rank)
  return solo_competitive_rank_;
}
 void CSODOTAGameAccountClient::set_solo_competitive_rank(::google::protobuf::uint32 value) {
  set_has_solo_competitive_rank();
  solo_competitive_rank_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.solo_competitive_rank)
}

// optional uint32 solo_calibration_games_remaining = 54;
bool CSODOTAGameAccountClient::has_solo_calibration_games_remaining() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void CSODOTAGameAccountClient::set_has_solo_calibration_games_remaining() {
  _has_bits_[0] |= 0x80000000u;
}
void CSODOTAGameAccountClient::clear_has_solo_calibration_games_remaining() {
  _has_bits_[0] &= ~0x80000000u;
}
void CSODOTAGameAccountClient::clear_solo_calibration_games_remaining() {
  solo_calibration_games_remaining_ = 0u;
  clear_has_solo_calibration_games_remaining();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::solo_calibration_games_remaining() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.solo_calibration_games_remaining)
  return solo_calibration_games_remaining_;
}
 void CSODOTAGameAccountClient::set_solo_calibration_games_remaining(::google::protobuf::uint32 value) {
  set_has_solo_calibration_games_remaining();
  solo_calibration_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.solo_calibration_games_remaining)
}

// optional uint32 competitive_1v1_rank = 63;
bool CSODOTAGameAccountClient::has_competitive_1v1_rank() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void CSODOTAGameAccountClient::set_has_competitive_1v1_rank() {
  _has_bits_[1] |= 0x00000001u;
}
void CSODOTAGameAccountClient::clear_has_competitive_1v1_rank() {
  _has_bits_[1] &= ~0x00000001u;
}
void CSODOTAGameAccountClient::clear_competitive_1v1_rank() {
  competitive_1v1_rank_ = 0u;
  clear_has_competitive_1v1_rank();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::competitive_1v1_rank() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.competitive_1v1_rank)
  return competitive_1v1_rank_;
}
 void CSODOTAGameAccountClient::set_competitive_1v1_rank(::google::protobuf::uint32 value) {
  set_has_competitive_1v1_rank();
  competitive_1v1_rank_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.competitive_1v1_rank)
}

// optional uint32 competitive_1v1_calibration_games_remaining = 64;
bool CSODOTAGameAccountClient::has_competitive_1v1_calibration_games_remaining() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void CSODOTAGameAccountClient::set_has_competitive_1v1_calibration_games_remaining() {
  _has_bits_[1] |= 0x00000002u;
}
void CSODOTAGameAccountClient::clear_has_competitive_1v1_calibration_games_remaining() {
  _has_bits_[1] &= ~0x00000002u;
}
void CSODOTAGameAccountClient::clear_competitive_1v1_calibration_games_remaining() {
  competitive_1v1_calibration_games_remaining_ = 0u;
  clear_has_competitive_1v1_calibration_games_remaining();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::competitive_1v1_calibration_games_remaining() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.competitive_1v1_calibration_games_remaining)
  return competitive_1v1_calibration_games_remaining_;
}
 void CSODOTAGameAccountClient::set_competitive_1v1_calibration_games_remaining(::google::protobuf::uint32 value) {
  set_has_competitive_1v1_calibration_games_remaining();
  competitive_1v1_calibration_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.competitive_1v1_calibration_games_remaining)
}

// optional uint32 recruitment_level = 55;
bool CSODOTAGameAccountClient::has_recruitment_level() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void CSODOTAGameAccountClient::set_has_recruitment_level() {
  _has_bits_[1] |= 0x00000004u;
}
void CSODOTAGameAccountClient::clear_has_recruitment_level() {
  _has_bits_[1] &= ~0x00000004u;
}
void CSODOTAGameAccountClient::clear_recruitment_level() {
  recruitment_level_ = 0u;
  clear_has_recruitment_level();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::recruitment_level() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.recruitment_level)
  return recruitment_level_;
}
 void CSODOTAGameAccountClient::set_recruitment_level(::google::protobuf::uint32 value) {
  set_has_recruitment_level();
  recruitment_level_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.recruitment_level)
}

// optional bool has_new_notifications = 56;
bool CSODOTAGameAccountClient::has_has_new_notifications() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void CSODOTAGameAccountClient::set_has_has_new_notifications() {
  _has_bits_[1] |= 0x00000008u;
}
void CSODOTAGameAccountClient::clear_has_has_new_notifications() {
  _has_bits_[1] &= ~0x00000008u;
}
void CSODOTAGameAccountClient::clear_has_new_notifications() {
  has_new_notifications_ = false;
  clear_has_has_new_notifications();
}
 bool CSODOTAGameAccountClient::has_new_notifications() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.has_new_notifications)
  return has_new_notifications_;
}
 void CSODOTAGameAccountClient::set_has_new_notifications(bool value) {
  set_has_has_new_notifications();
  has_new_notifications_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.has_new_notifications)
}

// optional bool is_league_admin = 57;
bool CSODOTAGameAccountClient::has_is_league_admin() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void CSODOTAGameAccountClient::set_has_is_league_admin() {
  _has_bits_[1] |= 0x00000010u;
}
void CSODOTAGameAccountClient::clear_has_is_league_admin() {
  _has_bits_[1] &= ~0x00000010u;
}
void CSODOTAGameAccountClient::clear_is_league_admin() {
  is_league_admin_ = false;
  clear_has_is_league_admin();
}
 bool CSODOTAGameAccountClient::is_league_admin() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.is_league_admin)
  return is_league_admin_;
}
 void CSODOTAGameAccountClient::set_is_league_admin(bool value) {
  set_has_is_league_admin();
  is_league_admin_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.is_league_admin)
}

// optional uint32 casual_games_played = 60;
bool CSODOTAGameAccountClient::has_casual_games_played() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void CSODOTAGameAccountClient::set_has_casual_games_played() {
  _has_bits_[1] |= 0x00000020u;
}
void CSODOTAGameAccountClient::clear_has_casual_games_played() {
  _has_bits_[1] &= ~0x00000020u;
}
void CSODOTAGameAccountClient::clear_casual_games_played() {
  casual_games_played_ = 0u;
  clear_has_casual_games_played();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::casual_games_played() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.casual_games_played)
  return casual_games_played_;
}
 void CSODOTAGameAccountClient::set_casual_games_played(::google::protobuf::uint32 value) {
  set_has_casual_games_played();
  casual_games_played_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.casual_games_played)
}

// optional uint32 solo_competitive_games_played = 61;
bool CSODOTAGameAccountClient::has_solo_competitive_games_played() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void CSODOTAGameAccountClient::set_has_solo_competitive_games_played() {
  _has_bits_[1] |= 0x00000040u;
}
void CSODOTAGameAccountClient::clear_has_solo_competitive_games_played() {
  _has_bits_[1] &= ~0x00000040u;
}
void CSODOTAGameAccountClient::clear_solo_competitive_games_played() {
  solo_competitive_games_played_ = 0u;
  clear_has_solo_competitive_games_played();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::solo_competitive_games_played() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.solo_competitive_games_played)
  return solo_competitive_games_played_;
}
 void CSODOTAGameAccountClient::set_solo_competitive_games_played(::google::protobuf::uint32 value) {
  set_has_solo_competitive_games_played();
  solo_competitive_games_played_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.solo_competitive_games_played)
}

// optional uint32 party_competitive_games_played = 62;
bool CSODOTAGameAccountClient::has_party_competitive_games_played() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void CSODOTAGameAccountClient::set_has_party_competitive_games_played() {
  _has_bits_[1] |= 0x00000080u;
}
void CSODOTAGameAccountClient::clear_has_party_competitive_games_played() {
  _has_bits_[1] &= ~0x00000080u;
}
void CSODOTAGameAccountClient::clear_party_competitive_games_played() {
  party_competitive_games_played_ = 0u;
  clear_has_party_competitive_games_played();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::party_competitive_games_played() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.party_competitive_games_played)
  return party_competitive_games_played_;
}
 void CSODOTAGameAccountClient::set_party_competitive_games_played(::google::protobuf::uint32 value) {
  set_has_party_competitive_games_played();
  party_competitive_games_played_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.party_competitive_games_played)
}

// optional uint32 casual_1v1_games_played = 65;
bool CSODOTAGameAccountClient::has_casual_1v1_games_played() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void CSODOTAGameAccountClient::set_has_casual_1v1_games_played() {
  _has_bits_[1] |= 0x00000100u;
}
void CSODOTAGameAccountClient::clear_has_casual_1v1_games_played() {
  _has_bits_[1] &= ~0x00000100u;
}
void CSODOTAGameAccountClient::clear_casual_1v1_games_played() {
  casual_1v1_games_played_ = 0u;
  clear_has_casual_1v1_games_played();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::casual_1v1_games_played() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.casual_1v1_games_played)
  return casual_1v1_games_played_;
}
 void CSODOTAGameAccountClient::set_casual_1v1_games_played(::google::protobuf::uint32 value) {
  set_has_casual_1v1_games_played();
  casual_1v1_games_played_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.casual_1v1_games_played)
}

// optional uint32 competitive_team_games_played = 66;
bool CSODOTAGameAccountClient::has_competitive_team_games_played() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void CSODOTAGameAccountClient::set_has_competitive_team_games_played() {
  _has_bits_[1] |= 0x00000200u;
}
void CSODOTAGameAccountClient::clear_has_competitive_team_games_played() {
  _has_bits_[1] &= ~0x00000200u;
}
void CSODOTAGameAccountClient::clear_competitive_team_games_played() {
  competitive_team_games_played_ = 0u;
  clear_has_competitive_team_games_played();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::competitive_team_games_played() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.competitive_team_games_played)
  return competitive_team_games_played_;
}
 void CSODOTAGameAccountClient::set_competitive_team_games_played(::google::protobuf::uint32 value) {
  set_has_competitive_team_games_played();
  competitive_team_games_played_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.competitive_team_games_played)
}

// optional uint32 curr_all_hero_challenge_id = 67;
bool CSODOTAGameAccountClient::has_curr_all_hero_challenge_id() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void CSODOTAGameAccountClient::set_has_curr_all_hero_challenge_id() {
  _has_bits_[1] |= 0x00000400u;
}
void CSODOTAGameAccountClient::clear_has_curr_all_hero_challenge_id() {
  _has_bits_[1] &= ~0x00000400u;
}
void CSODOTAGameAccountClient::clear_curr_all_hero_challenge_id() {
  curr_all_hero_challenge_id_ = 0u;
  clear_has_curr_all_hero_challenge_id();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::curr_all_hero_challenge_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.curr_all_hero_challenge_id)
  return curr_all_hero_challenge_id_;
}
 void CSODOTAGameAccountClient::set_curr_all_hero_challenge_id(::google::protobuf::uint32 value) {
  set_has_curr_all_hero_challenge_id();
  curr_all_hero_challenge_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.curr_all_hero_challenge_id)
}

// optional uint32 play_time_points = 68;
bool CSODOTAGameAccountClient::has_play_time_points() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void CSODOTAGameAccountClient::set_has_play_time_points() {
  _has_bits_[1] |= 0x00000800u;
}
void CSODOTAGameAccountClient::clear_has_play_time_points() {
  _has_bits_[1] &= ~0x00000800u;
}
void CSODOTAGameAccountClient::clear_play_time_points() {
  play_time_points_ = 0u;
  clear_has_play_time_points();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::play_time_points() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.play_time_points)
  return play_time_points_;
}
 void CSODOTAGameAccountClient::set_play_time_points(::google::protobuf::uint32 value) {
  set_has_play_time_points();
  play_time_points_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.play_time_points)
}

// optional uint32 account_flags = 69;
bool CSODOTAGameAccountClient::has_account_flags() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void CSODOTAGameAccountClient::set_has_account_flags() {
  _has_bits_[1] |= 0x00001000u;
}
void CSODOTAGameAccountClient::clear_has_account_flags() {
  _has_bits_[1] &= ~0x00001000u;
}
void CSODOTAGameAccountClient::clear_account_flags() {
  account_flags_ = 0u;
  clear_has_account_flags();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::account_flags() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.account_flags)
  return account_flags_;
}
 void CSODOTAGameAccountClient::set_account_flags(::google::protobuf::uint32 value) {
  set_has_account_flags();
  account_flags_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.account_flags)
}

// optional uint32 play_time_level = 70;
bool CSODOTAGameAccountClient::has_play_time_level() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void CSODOTAGameAccountClient::set_has_play_time_level() {
  _has_bits_[1] |= 0x00002000u;
}
void CSODOTAGameAccountClient::clear_has_play_time_level() {
  _has_bits_[1] &= ~0x00002000u;
}
void CSODOTAGameAccountClient::clear_play_time_level() {
  play_time_level_ = 0u;
  clear_has_play_time_level();
}
 ::google::protobuf::uint32 CSODOTAGameAccountClient::play_time_level() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.play_time_level)
  return play_time_level_;
}
 void CSODOTAGameAccountClient::set_play_time_level(::google::protobuf::uint32 value) {
  set_has_play_time_level();
  play_time_level_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.play_time_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CSODOTAPartyMember::kPartnerTypeFieldNumber;
const int CSODOTAPartyMember::kIsCoachFieldNumber;
#endif  // !_MSC_VER

CSODOTAPartyMember::CSODOTAPartyMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSODOTAPartyMember)
}

void CSODOTAPartyMember::InitAsDefaultInstance() {
}

CSODOTAPartyMember::CSODOTAPartyMember(const CSODOTAPartyMember& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSODOTAPartyMember)
}

void CSODOTAPartyMember::SharedCtor() {
  _cached_size_ = 0;
  partner_type_ = 0;
  is_coach_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTAPartyMember::~CSODOTAPartyMember() {
  // @@protoc_insertion_point(destructor:CSODOTAPartyMember)
  SharedDtor();
}

void CSODOTAPartyMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSODOTAPartyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTAPartyMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTAPartyMember_descriptor_;
}

const CSODOTAPartyMember& CSODOTAPartyMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CSODOTAPartyMember* CSODOTAPartyMember::default_instance_ = NULL;

CSODOTAPartyMember* CSODOTAPartyMember::New(::google::protobuf::Arena* arena) const {
  CSODOTAPartyMember* n = new CSODOTAPartyMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSODOTAPartyMember::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CSODOTAPartyMember*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(partner_type_, is_coach_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CSODOTAPartyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSODOTAPartyMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PartnerAccountType_IsValid(value)) {
            set_partner_type(static_cast< ::PartnerAccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_coach;
        break;
      }

      // optional bool is_coach = 2;
      case 2: {
        if (tag == 16) {
         parse_is_coach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_coach_)));
          set_has_is_coach();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSODOTAPartyMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSODOTAPartyMember)
  return false;
#undef DO_
}

void CSODOTAPartyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSODOTAPartyMember)
  // optional .PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
  if (has_partner_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->partner_type(), output);
  }

  // optional bool is_coach = 2;
  if (has_is_coach()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_coach(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSODOTAPartyMember)
}

::google::protobuf::uint8* CSODOTAPartyMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAPartyMember)
  // optional .PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
  if (has_partner_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->partner_type(), target);
  }

  // optional bool is_coach = 2;
  if (has_is_coach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_coach(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAPartyMember)
  return target;
}

int CSODOTAPartyMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
    if (has_partner_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->partner_type());
    }

    // optional bool is_coach = 2;
    if (has_is_coach()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTAPartyMember::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CSODOTAPartyMember* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSODOTAPartyMember>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTAPartyMember::MergeFrom(const CSODOTAPartyMember& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partner_type()) {
      set_partner_type(from.partner_type());
    }
    if (from.has_is_coach()) {
      set_is_coach(from.is_coach());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CSODOTAPartyMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAPartyMember::CopyFrom(const CSODOTAPartyMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAPartyMember::IsInitialized() const {

  return true;
}

void CSODOTAPartyMember::Swap(CSODOTAPartyMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTAPartyMember::InternalSwap(CSODOTAPartyMember* other) {
  std::swap(partner_type_, other->partner_type_);
  std::swap(is_coach_, other->is_coach_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSODOTAPartyMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTAPartyMember_descriptor_;
  metadata.reflection = CSODOTAPartyMember_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSODOTAPartyMember

// optional .PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
bool CSODOTAPartyMember::has_partner_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSODOTAPartyMember::set_has_partner_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CSODOTAPartyMember::clear_has_partner_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSODOTAPartyMember::clear_partner_type() {
  partner_type_ = 0;
  clear_has_partner_type();
}
 ::PartnerAccountType CSODOTAPartyMember::partner_type() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.partner_type)
  return static_cast< ::PartnerAccountType >(partner_type_);
}
 void CSODOTAPartyMember::set_partner_type(::PartnerAccountType value) {
  assert(::PartnerAccountType_IsValid(value));
  set_has_partner_type();
  partner_type_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.partner_type)
}

// optional bool is_coach = 2;
bool CSODOTAPartyMember::has_is_coach() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSODOTAPartyMember::set_has_is_coach() {
  _has_bits_[0] |= 0x00000002u;
}
void CSODOTAPartyMember::clear_has_is_coach() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSODOTAPartyMember::clear_is_coach() {
  is_coach_ = false;
  clear_has_is_coach();
}
 bool CSODOTAPartyMember::is_coach() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.is_coach)
  return is_coach_;
}
 void CSODOTAPartyMember::set_is_coach(bool value) {
  set_has_is_coach();
  is_coach_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.is_coach)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CSODOTAParty_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTAParty_State_descriptor_;
}
bool CSODOTAParty_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CSODOTAParty_State CSODOTAParty::UI;
const CSODOTAParty_State CSODOTAParty::FINDING_MATCH;
const CSODOTAParty_State CSODOTAParty::IN_MATCH;
const CSODOTAParty_State CSODOTAParty::State_MIN;
const CSODOTAParty_State CSODOTAParty::State_MAX;
const int CSODOTAParty::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CSODOTAParty::kPartyIdFieldNumber;
const int CSODOTAParty::kLeaderIdFieldNumber;
const int CSODOTAParty::kMemberIdsFieldNumber;
const int CSODOTAParty::kGameModesFieldNumber;
const int CSODOTAParty::kStateFieldNumber;
const int CSODOTAParty::kEffectiveStartedMatchmakingTimeFieldNumber;
const int CSODOTAParty::kRawStartedMatchmakingTimeFieldNumber;
const int CSODOTAParty::kAttemptStartTimeFieldNumber;
const int CSODOTAParty::kAttemptNumFieldNumber;
const int CSODOTAParty::kMatchgroupsFieldNumber;
const int CSODOTAParty::kLowPriorityAccountIdFieldNumber;
const int CSODOTAParty::kMatchTypeFieldNumber;
const int CSODOTAParty::kBotDifficultyFieldNumber;
const int CSODOTAParty::kTeamIdFieldNumber;
const int CSODOTAParty::kMatchDisabledUntilDateFieldNumber;
const int CSODOTAParty::kMatchDisabledAccountIdFieldNumber;
const int CSODOTAParty::kMatchmakingMaxRangeMinutesFieldNumber;
const int CSODOTAParty::kMatchlanguagesFieldNumber;
const int CSODOTAParty::kMapPreferenceFieldNumber;
const int CSODOTAParty::kMembersFieldNumber;
const int CSODOTAParty::kOpenGuildIdFieldNumber;
const int CSODOTAParty::kCommonGuildsFieldNumber;
const int CSODOTAParty::kLowPriorityGamesRemainingFieldNumber;
const int CSODOTAParty::kMinLevelFieldNumber;
const int CSODOTAParty::kMaxLevelFieldNumber;
const int CSODOTAParty::kActiveIngameEventsFieldNumber;
const int CSODOTAParty::kOpenForJoinRequestsFieldNumber;
const int CSODOTAParty::kSentInvitesFieldNumber;
const int CSODOTAParty::kRecvInvitesFieldNumber;
const int CSODOTAParty::kAccountFlagsFieldNumber;
#endif  // !_MSC_VER

CSODOTAParty::CSODOTAParty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSODOTAParty)
}

void CSODOTAParty::InitAsDefaultInstance() {
}

CSODOTAParty::CSODOTAParty(const CSODOTAParty& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSODOTAParty)
}

void CSODOTAParty::SharedCtor() {
  _cached_size_ = 0;
  party_id_ = GOOGLE_ULONGLONG(0);
  leader_id_ = GOOGLE_ULONGLONG(0);
  game_modes_ = 0u;
  state_ = 0;
  effective_started_matchmaking_time_ = 0u;
  raw_started_matchmaking_time_ = 0u;
  attempt_start_time_ = 0u;
  attempt_num_ = 0u;
  matchgroups_ = 0u;
  low_priority_account_id_ = 0u;
  match_type_ = 0;
  bot_difficulty_ = 0;
  team_id_ = 0u;
  match_disabled_until_date_ = 0u;
  match_disabled_account_id_ = 0u;
  matchmaking_max_range_minutes_ = 0u;
  matchlanguages_ = 0u;
  map_preference_ = 0u;
  open_guild_id_ = 0u;
  low_priority_games_remaining_ = 0u;
  min_level_ = 0u;
  max_level_ = 0u;
  open_for_join_requests_ = false;
  account_flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTAParty::~CSODOTAParty() {
  // @@protoc_insertion_point(destructor:CSODOTAParty)
  SharedDtor();
}

void CSODOTAParty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSODOTAParty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTAParty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTAParty_descriptor_;
}

const CSODOTAParty& CSODOTAParty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CSODOTAParty* CSODOTAParty::default_instance_ = NULL;

CSODOTAParty* CSODOTAParty::New(::google::protobuf::Arena* arena) const {
  CSODOTAParty* n = new CSODOTAParty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSODOTAParty::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CSODOTAParty*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 251u) {
    ZR_(party_id_, leader_id_);
    ZR_(game_modes_, attempt_start_time_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(attempt_num_, match_disabled_account_id_);
  }
  if (_has_bits_[16 / 32] & 14090240u) {
    ZR_(matchmaking_max_range_minutes_, map_preference_);
    ZR_(open_guild_id_, min_level_);
  }
  if (_has_bits_[24 / 32] & 620756992u) {
    ZR_(open_for_join_requests_, account_flags_);
    max_level_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  member_ids_.Clear();
  members_.Clear();
  common_guilds_.Clear();
  active_ingame_events_.Clear();
  sent_invites_.Clear();
  recv_invites_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CSODOTAParty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSODOTAParty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 party_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
          set_has_party_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_leader_id;
        break;
      }

      // optional fixed64 leader_id = 2;
      case 2: {
        if (tag == 17) {
         parse_leader_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &leader_id_)));
          set_has_leader_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_member_ids;
        break;
      }

      // repeated fixed64 member_ids = 3;
      case 3: {
        if (tag == 25) {
         parse_member_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25, input, this->mutable_member_ids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_member_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_member_ids;
        if (input->ExpectTag(32)) goto parse_game_modes;
        break;
      }

      // optional uint32 game_modes = 4;
      case 4: {
        if (tag == 32) {
         parse_game_modes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_modes_)));
          set_has_game_modes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // optional .CSODOTAParty.State state = 6 [default = UI];
      case 6: {
        if (tag == 48) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSODOTAParty_State_IsValid(value)) {
            set_state(static_cast< ::CSODOTAParty_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_effective_started_matchmaking_time;
        break;
      }

      // optional uint32 effective_started_matchmaking_time = 7;
      case 7: {
        if (tag == 56) {
         parse_effective_started_matchmaking_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effective_started_matchmaking_time_)));
          set_has_effective_started_matchmaking_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_matchgroups;
        break;
      }

      // optional uint32 matchgroups = 11;
      case 11: {
        if (tag == 88) {
         parse_matchgroups:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchgroups_)));
          set_has_matchgroups();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_low_priority_account_id;
        break;
      }

      // optional uint32 low_priority_account_id = 19;
      case 19: {
        if (tag == 152) {
         parse_low_priority_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_priority_account_id_)));
          set_has_low_priority_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_match_type;
        break;
      }

      // optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
      case 21: {
        if (tag == 168) {
         parse_match_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MatchType_IsValid(value)) {
            set_match_type(static_cast< ::MatchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_bot_difficulty;
        break;
      }

      // optional .DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
      case 22: {
        if (tag == 176) {
         parse_bot_difficulty:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty(static_cast< ::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 23;
      case 23: {
        if (tag == 184) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_match_disabled_until_date;
        break;
      }

      // optional uint32 match_disabled_until_date = 24;
      case 24: {
        if (tag == 192) {
         parse_match_disabled_until_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_disabled_until_date_)));
          set_has_match_disabled_until_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_match_disabled_account_id;
        break;
      }

      // optional uint32 match_disabled_account_id = 25;
      case 25: {
        if (tag == 200) {
         parse_match_disabled_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_disabled_account_id_)));
          set_has_match_disabled_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_matchmaking_max_range_minutes;
        break;
      }

      // optional uint32 matchmaking_max_range_minutes = 26;
      case 26: {
        if (tag == 208) {
         parse_matchmaking_max_range_minutes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchmaking_max_range_minutes_)));
          set_has_matchmaking_max_range_minutes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_matchlanguages;
        break;
      }

      // optional uint32 matchlanguages = 27;
      case 27: {
        if (tag == 216) {
         parse_matchlanguages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchlanguages_)));
          set_has_matchlanguages();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_members;
        break;
      }

      // repeated .CSODOTAPartyMember members = 29;
      case 29: {
        if (tag == 234) {
         parse_members:
          DO_(input->IncrementRecursionDepth());
         parse_loop_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_loop_members;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(240)) goto parse_open_guild_id;
        break;
      }

      // optional uint32 open_guild_id = 30;
      case 30: {
        if (tag == 240) {
         parse_open_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_guild_id_)));
          set_has_open_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_common_guilds;
        break;
      }

      // repeated uint32 common_guilds = 31;
      case 31: {
        if (tag == 248) {
         parse_common_guilds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 248, input, this->mutable_common_guilds())));
        } else if (tag == 250) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_common_guilds())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_common_guilds;
        if (input->ExpectTag(256)) goto parse_raw_started_matchmaking_time;
        break;
      }

      // optional uint32 raw_started_matchmaking_time = 32;
      case 32: {
        if (tag == 256) {
         parse_raw_started_matchmaking_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_started_matchmaking_time_)));
          set_has_raw_started_matchmaking_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_attempt_start_time;
        break;
      }

      // optional uint32 attempt_start_time = 33;
      case 33: {
        if (tag == 264) {
         parse_attempt_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attempt_start_time_)));
          set_has_attempt_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_attempt_num;
        break;
      }

      // optional uint32 attempt_num = 34;
      case 34: {
        if (tag == 272) {
         parse_attempt_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attempt_num_)));
          set_has_attempt_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_low_priority_games_remaining;
        break;
      }

      // optional uint32 low_priority_games_remaining = 35;
      case 35: {
        if (tag == 280) {
         parse_low_priority_games_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_priority_games_remaining_)));
          set_has_low_priority_games_remaining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_min_level;
        break;
      }

      // optional uint32 min_level = 36;
      case 36: {
        if (tag == 288) {
         parse_min_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_level_)));
          set_has_min_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_max_level;
        break;
      }

      // optional uint32 max_level = 37;
      case 37: {
        if (tag == 296) {
         parse_max_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_level_)));
          set_has_max_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_map_preference;
        break;
      }

      // optional uint32 map_preference = 38;
      case 38: {
        if (tag == 304) {
         parse_map_preference:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_preference_)));
          set_has_map_preference();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_active_ingame_events;
        break;
      }

      // repeated .EEvent active_ingame_events = 39;
      case 39: {
        if (tag == 312) {
         parse_active_ingame_events:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EEvent_IsValid(value)) {
            add_active_ingame_events(static_cast< ::EEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(39, value);
          }
        } else if (tag == 314) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 39,
                 ::EEvent_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_active_ingame_events())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_active_ingame_events;
        if (input->ExpectTag(320)) goto parse_open_for_join_requests;
        break;
      }

      // optional bool open_for_join_requests = 40;
      case 40: {
        if (tag == 320) {
         parse_open_for_join_requests:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_for_join_requests_)));
          set_has_open_for_join_requests();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(330)) goto parse_sent_invites;
        break;
      }

      // repeated .CSODOTAPartyInvite sent_invites = 41;
      case 41: {
        if (tag == 330) {
         parse_sent_invites:
          DO_(input->IncrementRecursionDepth());
         parse_loop_sent_invites:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sent_invites()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(330)) goto parse_loop_sent_invites;
        if (input->ExpectTag(338)) goto parse_loop_recv_invites;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .CSODOTAPartyInvite recv_invites = 42;
      case 42: {
        if (tag == 338) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_recv_invites:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_recv_invites()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_loop_recv_invites;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(344)) goto parse_account_flags;
        break;
      }

      // optional uint32 account_flags = 43;
      case 43: {
        if (tag == 344) {
         parse_account_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_flags_)));
          set_has_account_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSODOTAParty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSODOTAParty)
  return false;
#undef DO_
}

void CSODOTAParty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSODOTAParty)
  // optional uint64 party_id = 1;
  if (has_party_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->party_id(), output);
  }

  // optional fixed64 leader_id = 2;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->leader_id(), output);
  }

  // repeated fixed64 member_ids = 3;
  for (int i = 0; i < this->member_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->member_ids(i), output);
  }

  // optional uint32 game_modes = 4;
  if (has_game_modes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_modes(), output);
  }

  // optional .CSODOTAParty.State state = 6 [default = UI];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->state(), output);
  }

  // optional uint32 effective_started_matchmaking_time = 7;
  if (has_effective_started_matchmaking_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->effective_started_matchmaking_time(), output);
  }

  // optional uint32 matchgroups = 11;
  if (has_matchgroups()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->matchgroups(), output);
  }

  // optional uint32 low_priority_account_id = 19;
  if (has_low_priority_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->low_priority_account_id(), output);
  }

  // optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
  if (has_match_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->match_type(), output);
  }

  // optional .DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
  if (has_bot_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->bot_difficulty(), output);
  }

  // optional uint32 team_id = 23;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->team_id(), output);
  }

  // optional uint32 match_disabled_until_date = 24;
  if (has_match_disabled_until_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->match_disabled_until_date(), output);
  }

  // optional uint32 match_disabled_account_id = 25;
  if (has_match_disabled_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->match_disabled_account_id(), output);
  }

  // optional uint32 matchmaking_max_range_minutes = 26;
  if (has_matchmaking_max_range_minutes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->matchmaking_max_range_minutes(), output);
  }

  // optional uint32 matchlanguages = 27;
  if (has_matchlanguages()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->matchlanguages(), output);
  }

  // repeated .CSODOTAPartyMember members = 29;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->members(i), output);
  }

  // optional uint32 open_guild_id = 30;
  if (has_open_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->open_guild_id(), output);
  }

  // repeated uint32 common_guilds = 31;
  for (int i = 0; i < this->common_guilds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      31, this->common_guilds(i), output);
  }

  // optional uint32 raw_started_matchmaking_time = 32;
  if (has_raw_started_matchmaking_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->raw_started_matchmaking_time(), output);
  }

  // optional uint32 attempt_start_time = 33;
  if (has_attempt_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->attempt_start_time(), output);
  }

  // optional uint32 attempt_num = 34;
  if (has_attempt_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->attempt_num(), output);
  }

  // optional uint32 low_priority_games_remaining = 35;
  if (has_low_priority_games_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->low_priority_games_remaining(), output);
  }

  // optional uint32 min_level = 36;
  if (has_min_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->min_level(), output);
  }

  // optional uint32 max_level = 37;
  if (has_max_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->max_level(), output);
  }

  // optional uint32 map_preference = 38;
  if (has_map_preference()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->map_preference(), output);
  }

  // repeated .EEvent active_ingame_events = 39;
  for (int i = 0; i < this->active_ingame_events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      39, this->active_ingame_events(i), output);
  }

  // optional bool open_for_join_requests = 40;
  if (has_open_for_join_requests()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->open_for_join_requests(), output);
  }

  // repeated .CSODOTAPartyInvite sent_invites = 41;
  for (unsigned int i = 0, n = this->sent_invites_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->sent_invites(i), output);
  }

  // repeated .CSODOTAPartyInvite recv_invites = 42;
  for (unsigned int i = 0, n = this->recv_invites_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->recv_invites(i), output);
  }

  // optional uint32 account_flags = 43;
  if (has_account_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->account_flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSODOTAParty)
}

::google::protobuf::uint8* CSODOTAParty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAParty)
  // optional uint64 party_id = 1;
  if (has_party_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->party_id(), target);
  }

  // optional fixed64 leader_id = 2;
  if (has_leader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->leader_id(), target);
  }

  // repeated fixed64 member_ids = 3;
  for (int i = 0; i < this->member_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(3, this->member_ids(i), target);
  }

  // optional uint32 game_modes = 4;
  if (has_game_modes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_modes(), target);
  }

  // optional .CSODOTAParty.State state = 6 [default = UI];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->state(), target);
  }

  // optional uint32 effective_started_matchmaking_time = 7;
  if (has_effective_started_matchmaking_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->effective_started_matchmaking_time(), target);
  }

  // optional uint32 matchgroups = 11;
  if (has_matchgroups()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->matchgroups(), target);
  }

  // optional uint32 low_priority_account_id = 19;
  if (has_low_priority_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->low_priority_account_id(), target);
  }

  // optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
  if (has_match_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->match_type(), target);
  }

  // optional .DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
  if (has_bot_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->bot_difficulty(), target);
  }

  // optional uint32 team_id = 23;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->team_id(), target);
  }

  // optional uint32 match_disabled_until_date = 24;
  if (has_match_disabled_until_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->match_disabled_until_date(), target);
  }

  // optional uint32 match_disabled_account_id = 25;
  if (has_match_disabled_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->match_disabled_account_id(), target);
  }

  // optional uint32 matchmaking_max_range_minutes = 26;
  if (has_matchmaking_max_range_minutes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->matchmaking_max_range_minutes(), target);
  }

  // optional uint32 matchlanguages = 27;
  if (has_matchlanguages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->matchlanguages(), target);
  }

  // repeated .CSODOTAPartyMember members = 29;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->members(i), target);
  }

  // optional uint32 open_guild_id = 30;
  if (has_open_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->open_guild_id(), target);
  }

  // repeated uint32 common_guilds = 31;
  for (int i = 0; i < this->common_guilds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(31, this->common_guilds(i), target);
  }

  // optional uint32 raw_started_matchmaking_time = 32;
  if (has_raw_started_matchmaking_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->raw_started_matchmaking_time(), target);
  }

  // optional uint32 attempt_start_time = 33;
  if (has_attempt_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->attempt_start_time(), target);
  }

  // optional uint32 attempt_num = 34;
  if (has_attempt_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->attempt_num(), target);
  }

  // optional uint32 low_priority_games_remaining = 35;
  if (has_low_priority_games_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->low_priority_games_remaining(), target);
  }

  // optional uint32 min_level = 36;
  if (has_min_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->min_level(), target);
  }

  // optional uint32 max_level = 37;
  if (has_max_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->max_level(), target);
  }

  // optional uint32 map_preference = 38;
  if (has_map_preference()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->map_preference(), target);
  }

  // repeated .EEvent active_ingame_events = 39;
  for (int i = 0; i < this->active_ingame_events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      39, this->active_ingame_events(i), target);
  }

  // optional bool open_for_join_requests = 40;
  if (has_open_for_join_requests()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->open_for_join_requests(), target);
  }

  // repeated .CSODOTAPartyInvite sent_invites = 41;
  for (unsigned int i = 0, n = this->sent_invites_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->sent_invites(i), target);
  }

  // repeated .CSODOTAPartyInvite recv_invites = 42;
  for (unsigned int i = 0, n = this->recv_invites_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->recv_invites(i), target);
  }

  // optional uint32 account_flags = 43;
  if (has_account_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->account_flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAParty)
  return target;
}

int CSODOTAParty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 251u) {
    // optional uint64 party_id = 1;
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }

    // optional fixed64 leader_id = 2;
    if (has_leader_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 game_modes = 4;
    if (has_game_modes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_modes());
    }

    // optional .CSODOTAParty.State state = 6 [default = UI];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 effective_started_matchmaking_time = 7;
    if (has_effective_started_matchmaking_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effective_started_matchmaking_time());
    }

    // optional uint32 raw_started_matchmaking_time = 32;
    if (has_raw_started_matchmaking_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_started_matchmaking_time());
    }

    // optional uint32 attempt_start_time = 33;
    if (has_attempt_start_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attempt_start_time());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 attempt_num = 34;
    if (has_attempt_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attempt_num());
    }

    // optional uint32 matchgroups = 11;
    if (has_matchgroups()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchgroups());
    }

    // optional uint32 low_priority_account_id = 19;
    if (has_low_priority_account_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_priority_account_id());
    }

    // optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
    if (has_match_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_type());
    }

    // optional .DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
    if (has_bot_difficulty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty());
    }

    // optional uint32 team_id = 23;
    if (has_team_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint32 match_disabled_until_date = 24;
    if (has_match_disabled_until_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_disabled_until_date());
    }

    // optional uint32 match_disabled_account_id = 25;
    if (has_match_disabled_account_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_disabled_account_id());
    }

  }
  if (_has_bits_[16 / 32] & 14090240u) {
    // optional uint32 matchmaking_max_range_minutes = 26;
    if (has_matchmaking_max_range_minutes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchmaking_max_range_minutes());
    }

    // optional uint32 matchlanguages = 27;
    if (has_matchlanguages()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchlanguages());
    }

    // optional uint32 map_preference = 38;
    if (has_map_preference()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_preference());
    }

    // optional uint32 open_guild_id = 30;
    if (has_open_guild_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_guild_id());
    }

    // optional uint32 low_priority_games_remaining = 35;
    if (has_low_priority_games_remaining()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_priority_games_remaining());
    }

    // optional uint32 min_level = 36;
    if (has_min_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_level());
    }

  }
  if (_has_bits_[24 / 32] & 620756992u) {
    // optional uint32 max_level = 37;
    if (has_max_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_level());
    }

    // optional bool open_for_join_requests = 40;
    if (has_open_for_join_requests()) {
      total_size += 2 + 1;
    }

    // optional uint32 account_flags = 43;
    if (has_account_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_flags());
    }

  }
  // repeated fixed64 member_ids = 3;
  {
    int data_size = 0;
    data_size = 8 * this->member_ids_size();
    total_size += 1 * this->member_ids_size() + data_size;
  }

  // repeated .CSODOTAPartyMember members = 29;
  total_size += 2 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  // repeated uint32 common_guilds = 31;
  {
    int data_size = 0;
    for (int i = 0; i < this->common_guilds_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->common_guilds(i));
    }
    total_size += 2 * this->common_guilds_size() + data_size;
  }

  // repeated .EEvent active_ingame_events = 39;
  {
    int data_size = 0;
    for (int i = 0; i < this->active_ingame_events_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->active_ingame_events(i));
    }
    total_size += 2 * this->active_ingame_events_size() + data_size;
  }

  // repeated .CSODOTAPartyInvite sent_invites = 41;
  total_size += 2 * this->sent_invites_size();
  for (int i = 0; i < this->sent_invites_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sent_invites(i));
  }

  // repeated .CSODOTAPartyInvite recv_invites = 42;
  total_size += 2 * this->recv_invites_size();
  for (int i = 0; i < this->recv_invites_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recv_invites(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTAParty::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CSODOTAParty* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSODOTAParty>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTAParty::MergeFrom(const CSODOTAParty& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  member_ids_.MergeFrom(from.member_ids_);
  members_.MergeFrom(from.members_);
  common_guilds_.MergeFrom(from.common_guilds_);
  active_ingame_events_.MergeFrom(from.active_ingame_events_);
  sent_invites_.MergeFrom(from.sent_invites_);
  recv_invites_.MergeFrom(from.recv_invites_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_party_id()) {
      set_party_id(from.party_id());
    }
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_game_modes()) {
      set_game_modes(from.game_modes());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_effective_started_matchmaking_time()) {
      set_effective_started_matchmaking_time(from.effective_started_matchmaking_time());
    }
    if (from.has_raw_started_matchmaking_time()) {
      set_raw_started_matchmaking_time(from.raw_started_matchmaking_time());
    }
    if (from.has_attempt_start_time()) {
      set_attempt_start_time(from.attempt_start_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attempt_num()) {
      set_attempt_num(from.attempt_num());
    }
    if (from.has_matchgroups()) {
      set_matchgroups(from.matchgroups());
    }
    if (from.has_low_priority_account_id()) {
      set_low_priority_account_id(from.low_priority_account_id());
    }
    if (from.has_match_type()) {
      set_match_type(from.match_type());
    }
    if (from.has_bot_difficulty()) {
      set_bot_difficulty(from.bot_difficulty());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_match_disabled_until_date()) {
      set_match_disabled_until_date(from.match_disabled_until_date());
    }
    if (from.has_match_disabled_account_id()) {
      set_match_disabled_account_id(from.match_disabled_account_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_matchmaking_max_range_minutes()) {
      set_matchmaking_max_range_minutes(from.matchmaking_max_range_minutes());
    }
    if (from.has_matchlanguages()) {
      set_matchlanguages(from.matchlanguages());
    }
    if (from.has_map_preference()) {
      set_map_preference(from.map_preference());
    }
    if (from.has_open_guild_id()) {
      set_open_guild_id(from.open_guild_id());
    }
    if (from.has_low_priority_games_remaining()) {
      set_low_priority_games_remaining(from.low_priority_games_remaining());
    }
    if (from.has_min_level()) {
      set_min_level(from.min_level());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_max_level()) {
      set_max_level(from.max_level());
    }
    if (from.has_open_for_join_requests()) {
      set_open_for_join_requests(from.open_for_join_requests());
    }
    if (from.has_account_flags()) {
      set_account_flags(from.account_flags());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CSODOTAParty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAParty::CopyFrom(const CSODOTAParty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAParty::IsInitialized() const {

  return true;
}

void CSODOTAParty::Swap(CSODOTAParty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTAParty::InternalSwap(CSODOTAParty* other) {
  std::swap(party_id_, other->party_id_);
  std::swap(leader_id_, other->leader_id_);
  member_ids_.UnsafeArenaSwap(&other->member_ids_);
  std::swap(game_modes_, other->game_modes_);
  std::swap(state_, other->state_);
  std::swap(effective_started_matchmaking_time_, other->effective_started_matchmaking_time_);
  std::swap(raw_started_matchmaking_time_, other->raw_started_matchmaking_time_);
  std::swap(attempt_start_time_, other->attempt_start_time_);
  std::swap(attempt_num_, other->attempt_num_);
  std::swap(matchgroups_, other->matchgroups_);
  std::swap(low_priority_account_id_, other->low_priority_account_id_);
  std::swap(match_type_, other->match_type_);
  std::swap(bot_difficulty_, other->bot_difficulty_);
  std::swap(team_id_, other->team_id_);
  std::swap(match_disabled_until_date_, other->match_disabled_until_date_);
  std::swap(match_disabled_account_id_, other->match_disabled_account_id_);
  std::swap(matchmaking_max_range_minutes_, other->matchmaking_max_range_minutes_);
  std::swap(matchlanguages_, other->matchlanguages_);
  std::swap(map_preference_, other->map_preference_);
  members_.UnsafeArenaSwap(&other->members_);
  std::swap(open_guild_id_, other->open_guild_id_);
  common_guilds_.UnsafeArenaSwap(&other->common_guilds_);
  std::swap(low_priority_games_remaining_, other->low_priority_games_remaining_);
  std::swap(min_level_, other->min_level_);
  std::swap(max_level_, other->max_level_);
  active_ingame_events_.UnsafeArenaSwap(&other->active_ingame_events_);
  std::swap(open_for_join_requests_, other->open_for_join_requests_);
  sent_invites_.UnsafeArenaSwap(&other->sent_invites_);
  recv_invites_.UnsafeArenaSwap(&other->recv_invites_);
  std::swap(account_flags_, other->account_flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSODOTAParty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTAParty_descriptor_;
  metadata.reflection = CSODOTAParty_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSODOTAParty

// optional uint64 party_id = 1;
bool CSODOTAParty::has_party_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSODOTAParty::set_has_party_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CSODOTAParty::clear_has_party_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSODOTAParty::clear_party_id() {
  party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_party_id();
}
 ::google::protobuf::uint64 CSODOTAParty::party_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.party_id)
  return party_id_;
}
 void CSODOTAParty::set_party_id(::google::protobuf::uint64 value) {
  set_has_party_id();
  party_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.party_id)
}

// optional fixed64 leader_id = 2;
bool CSODOTAParty::has_leader_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSODOTAParty::set_has_leader_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CSODOTAParty::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSODOTAParty::clear_leader_id() {
  leader_id_ = GOOGLE_ULONGLONG(0);
  clear_has_leader_id();
}
 ::google::protobuf::uint64 CSODOTAParty::leader_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.leader_id)
  return leader_id_;
}
 void CSODOTAParty::set_leader_id(::google::protobuf::uint64 value) {
  set_has_leader_id();
  leader_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.leader_id)
}

// repeated fixed64 member_ids = 3;
int CSODOTAParty::member_ids_size() const {
  return member_ids_.size();
}
void CSODOTAParty::clear_member_ids() {
  member_ids_.Clear();
}
 ::google::protobuf::uint64 CSODOTAParty::member_ids(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.member_ids)
  return member_ids_.Get(index);
}
 void CSODOTAParty::set_member_ids(int index, ::google::protobuf::uint64 value) {
  member_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.member_ids)
}
 void CSODOTAParty::add_member_ids(::google::protobuf::uint64 value) {
  member_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CSODOTAParty.member_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CSODOTAParty::member_ids() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.member_ids)
  return member_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CSODOTAParty::mutable_member_ids() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.member_ids)
  return &member_ids_;
}

// optional uint32 game_modes = 4;
bool CSODOTAParty::has_game_modes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSODOTAParty::set_has_game_modes() {
  _has_bits_[0] |= 0x00000008u;
}
void CSODOTAParty::clear_has_game_modes() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSODOTAParty::clear_game_modes() {
  game_modes_ = 0u;
  clear_has_game_modes();
}
 ::google::protobuf::uint32 CSODOTAParty::game_modes() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.game_modes)
  return game_modes_;
}
 void CSODOTAParty::set_game_modes(::google::protobuf::uint32 value) {
  set_has_game_modes();
  game_modes_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.game_modes)
}

// optional .CSODOTAParty.State state = 6 [default = UI];
bool CSODOTAParty::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSODOTAParty::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
void CSODOTAParty::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSODOTAParty::clear_state() {
  state_ = 0;
  clear_has_state();
}
 ::CSODOTAParty_State CSODOTAParty::state() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.state)
  return static_cast< ::CSODOTAParty_State >(state_);
}
 void CSODOTAParty::set_state(::CSODOTAParty_State value) {
  assert(::CSODOTAParty_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.state)
}

// optional uint32 effective_started_matchmaking_time = 7;
bool CSODOTAParty::has_effective_started_matchmaking_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSODOTAParty::set_has_effective_started_matchmaking_time() {
  _has_bits_[0] |= 0x00000020u;
}
void CSODOTAParty::clear_has_effective_started_matchmaking_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSODOTAParty::clear_effective_started_matchmaking_time() {
  effective_started_matchmaking_time_ = 0u;
  clear_has_effective_started_matchmaking_time();
}
 ::google::protobuf::uint32 CSODOTAParty::effective_started_matchmaking_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.effective_started_matchmaking_time)
  return effective_started_matchmaking_time_;
}
 void CSODOTAParty::set_effective_started_matchmaking_time(::google::protobuf::uint32 value) {
  set_has_effective_started_matchmaking_time();
  effective_started_matchmaking_time_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.effective_started_matchmaking_time)
}

// optional uint32 raw_started_matchmaking_time = 32;
bool CSODOTAParty::has_raw_started_matchmaking_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CSODOTAParty::set_has_raw_started_matchmaking_time() {
  _has_bits_[0] |= 0x00000040u;
}
void CSODOTAParty::clear_has_raw_started_matchmaking_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void CSODOTAParty::clear_raw_started_matchmaking_time() {
  raw_started_matchmaking_time_ = 0u;
  clear_has_raw_started_matchmaking_time();
}
 ::google::protobuf::uint32 CSODOTAParty::raw_started_matchmaking_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.raw_started_matchmaking_time)
  return raw_started_matchmaking_time_;
}
 void CSODOTAParty::set_raw_started_matchmaking_time(::google::protobuf::uint32 value) {
  set_has_raw_started_matchmaking_time();
  raw_started_matchmaking_time_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.raw_started_matchmaking_time)
}

// optional uint32 attempt_start_time = 33;
bool CSODOTAParty::has_attempt_start_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CSODOTAParty::set_has_attempt_start_time() {
  _has_bits_[0] |= 0x00000080u;
}
void CSODOTAParty::clear_has_attempt_start_time() {
  _has_bits_[0] &= ~0x00000080u;
}
void CSODOTAParty::clear_attempt_start_time() {
  attempt_start_time_ = 0u;
  clear_has_attempt_start_time();
}
 ::google::protobuf::uint32 CSODOTAParty::attempt_start_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.attempt_start_time)
  return attempt_start_time_;
}
 void CSODOTAParty::set_attempt_start_time(::google::protobuf::uint32 value) {
  set_has_attempt_start_time();
  attempt_start_time_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.attempt_start_time)
}

// optional uint32 attempt_num = 34;
bool CSODOTAParty::has_attempt_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CSODOTAParty::set_has_attempt_num() {
  _has_bits_[0] |= 0x00000100u;
}
void CSODOTAParty::clear_has_attempt_num() {
  _has_bits_[0] &= ~0x00000100u;
}
void CSODOTAParty::clear_attempt_num() {
  attempt_num_ = 0u;
  clear_has_attempt_num();
}
 ::google::protobuf::uint32 CSODOTAParty::attempt_num() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.attempt_num)
  return attempt_num_;
}
 void CSODOTAParty::set_attempt_num(::google::protobuf::uint32 value) {
  set_has_attempt_num();
  attempt_num_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.attempt_num)
}

// optional uint32 matchgroups = 11;
bool CSODOTAParty::has_matchgroups() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CSODOTAParty::set_has_matchgroups() {
  _has_bits_[0] |= 0x00000200u;
}
void CSODOTAParty::clear_has_matchgroups() {
  _has_bits_[0] &= ~0x00000200u;
}
void CSODOTAParty::clear_matchgroups() {
  matchgroups_ = 0u;
  clear_has_matchgroups();
}
 ::google::protobuf::uint32 CSODOTAParty::matchgroups() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.matchgroups)
  return matchgroups_;
}
 void CSODOTAParty::set_matchgroups(::google::protobuf::uint32 value) {
  set_has_matchgroups();
  matchgroups_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.matchgroups)
}

// optional uint32 low_priority_account_id = 19;
bool CSODOTAParty::has_low_priority_account_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CSODOTAParty::set_has_low_priority_account_id() {
  _has_bits_[0] |= 0x00000400u;
}
void CSODOTAParty::clear_has_low_priority_account_id() {
  _has_bits_[0] &= ~0x00000400u;
}
void CSODOTAParty::clear_low_priority_account_id() {
  low_priority_account_id_ = 0u;
  clear_has_low_priority_account_id();
}
 ::google::protobuf::uint32 CSODOTAParty::low_priority_account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.low_priority_account_id)
  return low_priority_account_id_;
}
 void CSODOTAParty::set_low_priority_account_id(::google::protobuf::uint32 value) {
  set_has_low_priority_account_id();
  low_priority_account_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.low_priority_account_id)
}

// optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
bool CSODOTAParty::has_match_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CSODOTAParty::set_has_match_type() {
  _has_bits_[0] |= 0x00000800u;
}
void CSODOTAParty::clear_has_match_type() {
  _has_bits_[0] &= ~0x00000800u;
}
void CSODOTAParty::clear_match_type() {
  match_type_ = 0;
  clear_has_match_type();
}
 ::MatchType CSODOTAParty::match_type() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.match_type)
  return static_cast< ::MatchType >(match_type_);
}
 void CSODOTAParty::set_match_type(::MatchType value) {
  assert(::MatchType_IsValid(value));
  set_has_match_type();
  match_type_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.match_type)
}

// optional .DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
bool CSODOTAParty::has_bot_difficulty() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CSODOTAParty::set_has_bot_difficulty() {
  _has_bits_[0] |= 0x00001000u;
}
void CSODOTAParty::clear_has_bot_difficulty() {
  _has_bits_[0] &= ~0x00001000u;
}
void CSODOTAParty::clear_bot_difficulty() {
  bot_difficulty_ = 0;
  clear_has_bot_difficulty();
}
 ::DOTABotDifficulty CSODOTAParty::bot_difficulty() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.bot_difficulty)
  return static_cast< ::DOTABotDifficulty >(bot_difficulty_);
}
 void CSODOTAParty::set_bot_difficulty(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty();
  bot_difficulty_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.bot_difficulty)
}

// optional uint32 team_id = 23;
bool CSODOTAParty::has_team_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CSODOTAParty::set_has_team_id() {
  _has_bits_[0] |= 0x00002000u;
}
void CSODOTAParty::clear_has_team_id() {
  _has_bits_[0] &= ~0x00002000u;
}
void CSODOTAParty::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
 ::google::protobuf::uint32 CSODOTAParty::team_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.team_id)
  return team_id_;
}
 void CSODOTAParty::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.team_id)
}

// optional uint32 match_disabled_until_date = 24;
bool CSODOTAParty::has_match_disabled_until_date() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CSODOTAParty::set_has_match_disabled_until_date() {
  _has_bits_[0] |= 0x00004000u;
}
void CSODOTAParty::clear_has_match_disabled_until_date() {
  _has_bits_[0] &= ~0x00004000u;
}
void CSODOTAParty::clear_match_disabled_until_date() {
  match_disabled_until_date_ = 0u;
  clear_has_match_disabled_until_date();
}
 ::google::protobuf::uint32 CSODOTAParty::match_disabled_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.match_disabled_until_date)
  return match_disabled_until_date_;
}
 void CSODOTAParty::set_match_disabled_until_date(::google::protobuf::uint32 value) {
  set_has_match_disabled_until_date();
  match_disabled_until_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.match_disabled_until_date)
}

// optional uint32 match_disabled_account_id = 25;
bool CSODOTAParty::has_match_disabled_account_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CSODOTAParty::set_has_match_disabled_account_id() {
  _has_bits_[0] |= 0x00008000u;
}
void CSODOTAParty::clear_has_match_disabled_account_id() {
  _has_bits_[0] &= ~0x00008000u;
}
void CSODOTAParty::clear_match_disabled_account_id() {
  match_disabled_account_id_ = 0u;
  clear_has_match_disabled_account_id();
}
 ::google::protobuf::uint32 CSODOTAParty::match_disabled_account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.match_disabled_account_id)
  return match_disabled_account_id_;
}
 void CSODOTAParty::set_match_disabled_account_id(::google::protobuf::uint32 value) {
  set_has_match_disabled_account_id();
  match_disabled_account_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.match_disabled_account_id)
}

// optional uint32 matchmaking_max_range_minutes = 26;
bool CSODOTAParty::has_matchmaking_max_range_minutes() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CSODOTAParty::set_has_matchmaking_max_range_minutes() {
  _has_bits_[0] |= 0x00010000u;
}
void CSODOTAParty::clear_has_matchmaking_max_range_minutes() {
  _has_bits_[0] &= ~0x00010000u;
}
void CSODOTAParty::clear_matchmaking_max_range_minutes() {
  matchmaking_max_range_minutes_ = 0u;
  clear_has_matchmaking_max_range_minutes();
}
 ::google::protobuf::uint32 CSODOTAParty::matchmaking_max_range_minutes() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.matchmaking_max_range_minutes)
  return matchmaking_max_range_minutes_;
}
 void CSODOTAParty::set_matchmaking_max_range_minutes(::google::protobuf::uint32 value) {
  set_has_matchmaking_max_range_minutes();
  matchmaking_max_range_minutes_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.matchmaking_max_range_minutes)
}

// optional uint32 matchlanguages = 27;
bool CSODOTAParty::has_matchlanguages() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CSODOTAParty::set_has_matchlanguages() {
  _has_bits_[0] |= 0x00020000u;
}
void CSODOTAParty::clear_has_matchlanguages() {
  _has_bits_[0] &= ~0x00020000u;
}
void CSODOTAParty::clear_matchlanguages() {
  matchlanguages_ = 0u;
  clear_has_matchlanguages();
}
 ::google::protobuf::uint32 CSODOTAParty::matchlanguages() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.matchlanguages)
  return matchlanguages_;
}
 void CSODOTAParty::set_matchlanguages(::google::protobuf::uint32 value) {
  set_has_matchlanguages();
  matchlanguages_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.matchlanguages)
}

// optional uint32 map_preference = 38;
bool CSODOTAParty::has_map_preference() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CSODOTAParty::set_has_map_preference() {
  _has_bits_[0] |= 0x00040000u;
}
void CSODOTAParty::clear_has_map_preference() {
  _has_bits_[0] &= ~0x00040000u;
}
void CSODOTAParty::clear_map_preference() {
  map_preference_ = 0u;
  clear_has_map_preference();
}
 ::google::protobuf::uint32 CSODOTAParty::map_preference() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.map_preference)
  return map_preference_;
}
 void CSODOTAParty::set_map_preference(::google::protobuf::uint32 value) {
  set_has_map_preference();
  map_preference_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.map_preference)
}

// repeated .CSODOTAPartyMember members = 29;
int CSODOTAParty::members_size() const {
  return members_.size();
}
void CSODOTAParty::clear_members() {
  members_.Clear();
}
const ::CSODOTAPartyMember& CSODOTAParty::members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.members)
  return members_.Get(index);
}
::CSODOTAPartyMember* CSODOTAParty::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTAParty.members)
  return members_.Mutable(index);
}
::CSODOTAPartyMember* CSODOTAParty::add_members() {
  // @@protoc_insertion_point(field_add:CSODOTAParty.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::CSODOTAPartyMember >*
CSODOTAParty::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyMember >&
CSODOTAParty::members() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.members)
  return members_;
}

// optional uint32 open_guild_id = 30;
bool CSODOTAParty::has_open_guild_id() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CSODOTAParty::set_has_open_guild_id() {
  _has_bits_[0] |= 0x00100000u;
}
void CSODOTAParty::clear_has_open_guild_id() {
  _has_bits_[0] &= ~0x00100000u;
}
void CSODOTAParty::clear_open_guild_id() {
  open_guild_id_ = 0u;
  clear_has_open_guild_id();
}
 ::google::protobuf::uint32 CSODOTAParty::open_guild_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.open_guild_id)
  return open_guild_id_;
}
 void CSODOTAParty::set_open_guild_id(::google::protobuf::uint32 value) {
  set_has_open_guild_id();
  open_guild_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.open_guild_id)
}

// repeated uint32 common_guilds = 31;
int CSODOTAParty::common_guilds_size() const {
  return common_guilds_.size();
}
void CSODOTAParty::clear_common_guilds() {
  common_guilds_.Clear();
}
 ::google::protobuf::uint32 CSODOTAParty::common_guilds(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.common_guilds)
  return common_guilds_.Get(index);
}
 void CSODOTAParty::set_common_guilds(int index, ::google::protobuf::uint32 value) {
  common_guilds_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.common_guilds)
}
 void CSODOTAParty::add_common_guilds(::google::protobuf::uint32 value) {
  common_guilds_.Add(value);
  // @@protoc_insertion_point(field_add:CSODOTAParty.common_guilds)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CSODOTAParty::common_guilds() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.common_guilds)
  return common_guilds_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CSODOTAParty::mutable_common_guilds() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.common_guilds)
  return &common_guilds_;
}

// optional uint32 low_priority_games_remaining = 35;
bool CSODOTAParty::has_low_priority_games_remaining() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CSODOTAParty::set_has_low_priority_games_remaining() {
  _has_bits_[0] |= 0x00400000u;
}
void CSODOTAParty::clear_has_low_priority_games_remaining() {
  _has_bits_[0] &= ~0x00400000u;
}
void CSODOTAParty::clear_low_priority_games_remaining() {
  low_priority_games_remaining_ = 0u;
  clear_has_low_priority_games_remaining();
}
 ::google::protobuf::uint32 CSODOTAParty::low_priority_games_remaining() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.low_priority_games_remaining)
  return low_priority_games_remaining_;
}
 void CSODOTAParty::set_low_priority_games_remaining(::google::protobuf::uint32 value) {
  set_has_low_priority_games_remaining();
  low_priority_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.low_priority_games_remaining)
}

// optional uint32 min_level = 36;
bool CSODOTAParty::has_min_level() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void CSODOTAParty::set_has_min_level() {
  _has_bits_[0] |= 0x00800000u;
}
void CSODOTAParty::clear_has_min_level() {
  _has_bits_[0] &= ~0x00800000u;
}
void CSODOTAParty::clear_min_level() {
  min_level_ = 0u;
  clear_has_min_level();
}
 ::google::protobuf::uint32 CSODOTAParty::min_level() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.min_level)
  return min_level_;
}
 void CSODOTAParty::set_min_level(::google::protobuf::uint32 value) {
  set_has_min_level();
  min_level_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.min_level)
}

// optional uint32 max_level = 37;
bool CSODOTAParty::has_max_level() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void CSODOTAParty::set_has_max_level() {
  _has_bits_[0] |= 0x01000000u;
}
void CSODOTAParty::clear_has_max_level() {
  _has_bits_[0] &= ~0x01000000u;
}
void CSODOTAParty::clear_max_level() {
  max_level_ = 0u;
  clear_has_max_level();
}
 ::google::protobuf::uint32 CSODOTAParty::max_level() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.max_level)
  return max_level_;
}
 void CSODOTAParty::set_max_level(::google::protobuf::uint32 value) {
  set_has_max_level();
  max_level_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.max_level)
}

// repeated .EEvent active_ingame_events = 39;
int CSODOTAParty::active_ingame_events_size() const {
  return active_ingame_events_.size();
}
void CSODOTAParty::clear_active_ingame_events() {
  active_ingame_events_.Clear();
}
 ::EEvent CSODOTAParty::active_ingame_events(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.active_ingame_events)
  return static_cast< ::EEvent >(active_ingame_events_.Get(index));
}
 void CSODOTAParty::set_active_ingame_events(int index, ::EEvent value) {
  assert(::EEvent_IsValid(value));
  active_ingame_events_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.active_ingame_events)
}
 void CSODOTAParty::add_active_ingame_events(::EEvent value) {
  assert(::EEvent_IsValid(value));
  active_ingame_events_.Add(value);
  // @@protoc_insertion_point(field_add:CSODOTAParty.active_ingame_events)
}
 const ::google::protobuf::RepeatedField<int>&
CSODOTAParty::active_ingame_events() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.active_ingame_events)
  return active_ingame_events_;
}
 ::google::protobuf::RepeatedField<int>*
CSODOTAParty::mutable_active_ingame_events() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.active_ingame_events)
  return &active_ingame_events_;
}

// optional bool open_for_join_requests = 40;
bool CSODOTAParty::has_open_for_join_requests() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void CSODOTAParty::set_has_open_for_join_requests() {
  _has_bits_[0] |= 0x04000000u;
}
void CSODOTAParty::clear_has_open_for_join_requests() {
  _has_bits_[0] &= ~0x04000000u;
}
void CSODOTAParty::clear_open_for_join_requests() {
  open_for_join_requests_ = false;
  clear_has_open_for_join_requests();
}
 bool CSODOTAParty::open_for_join_requests() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.open_for_join_requests)
  return open_for_join_requests_;
}
 void CSODOTAParty::set_open_for_join_requests(bool value) {
  set_has_open_for_join_requests();
  open_for_join_requests_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.open_for_join_requests)
}

// repeated .CSODOTAPartyInvite sent_invites = 41;
int CSODOTAParty::sent_invites_size() const {
  return sent_invites_.size();
}
void CSODOTAParty::clear_sent_invites() {
  sent_invites_.Clear();
}
const ::CSODOTAPartyInvite& CSODOTAParty::sent_invites(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.sent_invites)
  return sent_invites_.Get(index);
}
::CSODOTAPartyInvite* CSODOTAParty::mutable_sent_invites(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTAParty.sent_invites)
  return sent_invites_.Mutable(index);
}
::CSODOTAPartyInvite* CSODOTAParty::add_sent_invites() {
  // @@protoc_insertion_point(field_add:CSODOTAParty.sent_invites)
  return sent_invites_.Add();
}
::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite >*
CSODOTAParty::mutable_sent_invites() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.sent_invites)
  return &sent_invites_;
}
const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite >&
CSODOTAParty::sent_invites() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.sent_invites)
  return sent_invites_;
}

// repeated .CSODOTAPartyInvite recv_invites = 42;
int CSODOTAParty::recv_invites_size() const {
  return recv_invites_.size();
}
void CSODOTAParty::clear_recv_invites() {
  recv_invites_.Clear();
}
const ::CSODOTAPartyInvite& CSODOTAParty::recv_invites(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.recv_invites)
  return recv_invites_.Get(index);
}
::CSODOTAPartyInvite* CSODOTAParty::mutable_recv_invites(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTAParty.recv_invites)
  return recv_invites_.Mutable(index);
}
::CSODOTAPartyInvite* CSODOTAParty::add_recv_invites() {
  // @@protoc_insertion_point(field_add:CSODOTAParty.recv_invites)
  return recv_invites_.Add();
}
::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite >*
CSODOTAParty::mutable_recv_invites() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.recv_invites)
  return &recv_invites_;
}
const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite >&
CSODOTAParty::recv_invites() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.recv_invites)
  return recv_invites_;
}

// optional uint32 account_flags = 43;
bool CSODOTAParty::has_account_flags() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void CSODOTAParty::set_has_account_flags() {
  _has_bits_[0] |= 0x20000000u;
}
void CSODOTAParty::clear_has_account_flags() {
  _has_bits_[0] &= ~0x20000000u;
}
void CSODOTAParty::clear_account_flags() {
  account_flags_ = 0u;
  clear_has_account_flags();
}
 ::google::protobuf::uint32 CSODOTAParty::account_flags() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.account_flags)
  return account_flags_;
}
 void CSODOTAParty::set_account_flags(::google::protobuf::uint32 value) {
  set_has_account_flags();
  account_flags_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.account_flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CSODOTAPartyInvite_PartyMember::kNameFieldNumber;
const int CSODOTAPartyInvite_PartyMember::kSteamIdFieldNumber;
const int CSODOTAPartyInvite_PartyMember::kIsCoachFieldNumber;
#endif  // !_MSC_VER

CSODOTAPartyInvite_PartyMember::CSODOTAPartyInvite_PartyMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSODOTAPartyInvite.PartyMember)
}

void CSODOTAPartyInvite_PartyMember::InitAsDefaultInstance() {
}

CSODOTAPartyInvite_PartyMember::CSODOTAPartyInvite_PartyMember(const CSODOTAPartyInvite_PartyMember& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSODOTAPartyInvite.PartyMember)
}

void CSODOTAPartyInvite_PartyMember::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_ = GOOGLE_ULONGLONG(0);
  is_coach_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTAPartyInvite_PartyMember::~CSODOTAPartyInvite_PartyMember() {
  // @@protoc_insertion_point(destructor:CSODOTAPartyInvite.PartyMember)
  SharedDtor();
}

void CSODOTAPartyInvite_PartyMember::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CSODOTAPartyInvite_PartyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTAPartyInvite_PartyMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTAPartyInvite_PartyMember_descriptor_;
}

const CSODOTAPartyInvite_PartyMember& CSODOTAPartyInvite_PartyMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CSODOTAPartyInvite_PartyMember* CSODOTAPartyInvite_PartyMember::default_instance_ = NULL;

CSODOTAPartyInvite_PartyMember* CSODOTAPartyInvite_PartyMember::New(::google::protobuf::Arena* arena) const {
  CSODOTAPartyInvite_PartyMember* n = new CSODOTAPartyInvite_PartyMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSODOTAPartyInvite_PartyMember::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CSODOTAPartyInvite_PartyMember*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(steam_id_, is_coach_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CSODOTAPartyInvite_PartyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSODOTAPartyInvite.PartyMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSODOTAPartyInvite.PartyMember.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_steam_id;
        break;
      }

      // optional fixed64 steam_id = 2;
      case 2: {
        if (tag == 17) {
         parse_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_coach;
        break;
      }

      // optional bool is_coach = 4;
      case 4: {
        if (tag == 32) {
         parse_is_coach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_coach_)));
          set_has_is_coach();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSODOTAPartyInvite.PartyMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSODOTAPartyInvite.PartyMember)
  return false;
#undef DO_
}

void CSODOTAPartyInvite_PartyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSODOTAPartyInvite.PartyMember)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSODOTAPartyInvite.PartyMember.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional fixed64 steam_id = 2;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id(), output);
  }

  // optional bool is_coach = 4;
  if (has_is_coach()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_coach(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSODOTAPartyInvite.PartyMember)
}

::google::protobuf::uint8* CSODOTAPartyInvite_PartyMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAPartyInvite.PartyMember)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSODOTAPartyInvite.PartyMember.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional fixed64 steam_id = 2;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id(), target);
  }

  // optional bool is_coach = 4;
  if (has_is_coach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_coach(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAPartyInvite.PartyMember)
  return target;
}

int CSODOTAPartyInvite_PartyMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional fixed64 steam_id = 2;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional bool is_coach = 4;
    if (has_is_coach()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTAPartyInvite_PartyMember::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CSODOTAPartyInvite_PartyMember* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSODOTAPartyInvite_PartyMember>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTAPartyInvite_PartyMember::MergeFrom(const CSODOTAPartyInvite_PartyMember& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_is_coach()) {
      set_is_coach(from.is_coach());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CSODOTAPartyInvite_PartyMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAPartyInvite_PartyMember::CopyFrom(const CSODOTAPartyInvite_PartyMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAPartyInvite_PartyMember::IsInitialized() const {

  return true;
}

void CSODOTAPartyInvite_PartyMember::Swap(CSODOTAPartyInvite_PartyMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTAPartyInvite_PartyMember::InternalSwap(CSODOTAPartyInvite_PartyMember* other) {
  name_.Swap(&other->name_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(is_coach_, other->is_coach_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSODOTAPartyInvite_PartyMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTAPartyInvite_PartyMember_descriptor_;
  metadata.reflection = CSODOTAPartyInvite_PartyMember_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSODOTAPartyInvite::kGroupIdFieldNumber;
const int CSODOTAPartyInvite::kSenderIdFieldNumber;
const int CSODOTAPartyInvite::kSenderNameFieldNumber;
const int CSODOTAPartyInvite::kMembersFieldNumber;
const int CSODOTAPartyInvite::kTeamIdFieldNumber;
const int CSODOTAPartyInvite::kLowPriorityStatusFieldNumber;
const int CSODOTAPartyInvite::kAsCoachFieldNumber;
const int CSODOTAPartyInvite::kInviteGidFieldNumber;
const int CSODOTAPartyInvite::kEngineFieldNumber;
#endif  // !_MSC_VER

CSODOTAPartyInvite::CSODOTAPartyInvite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSODOTAPartyInvite)
}

void CSODOTAPartyInvite::InitAsDefaultInstance() {
}

CSODOTAPartyInvite::CSODOTAPartyInvite(const CSODOTAPartyInvite& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSODOTAPartyInvite)
}

void CSODOTAPartyInvite::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  sender_id_ = GOOGLE_ULONGLONG(0);
  sender_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_id_ = 0u;
  low_priority_status_ = false;
  as_coach_ = false;
  invite_gid_ = GOOGLE_ULONGLONG(0);
  engine_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTAPartyInvite::~CSODOTAPartyInvite() {
  // @@protoc_insertion_point(destructor:CSODOTAPartyInvite)
  SharedDtor();
}

void CSODOTAPartyInvite::SharedDtor() {
  sender_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CSODOTAPartyInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTAPartyInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTAPartyInvite_descriptor_;
}

const CSODOTAPartyInvite& CSODOTAPartyInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CSODOTAPartyInvite* CSODOTAPartyInvite::default_instance_ = NULL;

CSODOTAPartyInvite* CSODOTAPartyInvite::New(::google::protobuf::Arena* arena) const {
  CSODOTAPartyInvite* n = new CSODOTAPartyInvite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSODOTAPartyInvite::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CSODOTAPartyInvite*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 247u) {
    ZR_(group_id_, sender_id_);
    ZR_(team_id_, invite_gid_);
    if (has_sender_name()) {
      sender_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  engine_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CSODOTAPartyInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSODOTAPartyInvite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_sender_id;
        break;
      }

      // optional fixed64 sender_id = 2;
      case 2: {
        if (tag == 17) {
         parse_sender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sender_id_)));
          set_has_sender_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sender_name;
        break;
      }

      // optional string sender_name = 3;
      case 3: {
        if (tag == 26) {
         parse_sender_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender_name().data(), this->sender_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSODOTAPartyInvite.sender_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_members;
        break;
      }

      // repeated .CSODOTAPartyInvite.PartyMember members = 4;
      case 4: {
        if (tag == 34) {
         parse_members:
          DO_(input->IncrementRecursionDepth());
         parse_loop_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_members;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 5;
      case 5: {
        if (tag == 40) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_low_priority_status;
        break;
      }

      // optional bool low_priority_status = 6;
      case 6: {
        if (tag == 48) {
         parse_low_priority_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_priority_status_)));
          set_has_low_priority_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_as_coach;
        break;
      }

      // optional bool as_coach = 7;
      case 7: {
        if (tag == 56) {
         parse_as_coach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &as_coach_)));
          set_has_as_coach();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_invite_gid;
        break;
      }

      // optional fixed64 invite_gid = 8;
      case 8: {
        if (tag == 65) {
         parse_invite_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &invite_gid_)));
          set_has_invite_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_engine;
        break;
      }

      // optional uint32 engine = 9;
      case 9: {
        if (tag == 72) {
         parse_engine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &engine_)));
          set_has_engine();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSODOTAPartyInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSODOTAPartyInvite)
  return false;
#undef DO_
}

void CSODOTAPartyInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSODOTAPartyInvite)
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }

  // optional fixed64 sender_id = 2;
  if (has_sender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->sender_id(), output);
  }

  // optional string sender_name = 3;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSODOTAPartyInvite.sender_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sender_name(), output);
  }

  // repeated .CSODOTAPartyInvite.PartyMember members = 4;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->members(i), output);
  }

  // optional uint32 team_id = 5;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_id(), output);
  }

  // optional bool low_priority_status = 6;
  if (has_low_priority_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->low_priority_status(), output);
  }

  // optional bool as_coach = 7;
  if (has_as_coach()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->as_coach(), output);
  }

  // optional fixed64 invite_gid = 8;
  if (has_invite_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->invite_gid(), output);
  }

  // optional uint32 engine = 9;
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSODOTAPartyInvite)
}

::google::protobuf::uint8* CSODOTAPartyInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAPartyInvite)
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }

  // optional fixed64 sender_id = 2;
  if (has_sender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->sender_id(), target);
  }

  // optional string sender_name = 3;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSODOTAPartyInvite.sender_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sender_name(), target);
  }

  // repeated .CSODOTAPartyInvite.PartyMember members = 4;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->members(i), target);
  }

  // optional uint32 team_id = 5;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_id(), target);
  }

  // optional bool low_priority_status = 6;
  if (has_low_priority_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->low_priority_status(), target);
  }

  // optional bool as_coach = 7;
  if (has_as_coach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->as_coach(), target);
  }

  // optional fixed64 invite_gid = 8;
  if (has_invite_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->invite_gid(), target);
  }

  // optional uint32 engine = 9;
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAPartyInvite)
  return target;
}

int CSODOTAPartyInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 247u) {
    // optional uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional fixed64 sender_id = 2;
    if (has_sender_id()) {
      total_size += 1 + 8;
    }

    // optional string sender_name = 3;
    if (has_sender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_name());
    }

    // optional uint32 team_id = 5;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional bool low_priority_status = 6;
    if (has_low_priority_status()) {
      total_size += 1 + 1;
    }

    // optional bool as_coach = 7;
    if (has_as_coach()) {
      total_size += 1 + 1;
    }

    // optional fixed64 invite_gid = 8;
    if (has_invite_gid()) {
      total_size += 1 + 8;
    }

  }
  // optional uint32 engine = 9;
  if (has_engine()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->engine());
  }

  // repeated .CSODOTAPartyInvite.PartyMember members = 4;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTAPartyInvite::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CSODOTAPartyInvite* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSODOTAPartyInvite>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTAPartyInvite::MergeFrom(const CSODOTAPartyInvite& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_sender_id()) {
      set_sender_id(from.sender_id());
    }
    if (from.has_sender_name()) {
      set_has_sender_name();
      sender_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_name_);
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_low_priority_status()) {
      set_low_priority_status(from.low_priority_status());
    }
    if (from.has_as_coach()) {
      set_as_coach(from.as_coach());
    }
    if (from.has_invite_gid()) {
      set_invite_gid(from.invite_gid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CSODOTAPartyInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAPartyInvite::CopyFrom(const CSODOTAPartyInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAPartyInvite::IsInitialized() const {

  return true;
}

void CSODOTAPartyInvite::Swap(CSODOTAPartyInvite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTAPartyInvite::InternalSwap(CSODOTAPartyInvite* other) {
  std::swap(group_id_, other->group_id_);
  std::swap(sender_id_, other->sender_id_);
  sender_name_.Swap(&other->sender_name_);
  members_.UnsafeArenaSwap(&other->members_);
  std::swap(team_id_, other->team_id_);
  std::swap(low_priority_status_, other->low_priority_status_);
  std::swap(as_coach_, other->as_coach_);
  std::swap(invite_gid_, other->invite_gid_);
  std::swap(engine_, other->engine_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSODOTAPartyInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTAPartyInvite_descriptor_;
  metadata.reflection = CSODOTAPartyInvite_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSODOTAPartyInvite_PartyMember

// optional string name = 1;
bool CSODOTAPartyInvite_PartyMember::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSODOTAPartyInvite_PartyMember::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CSODOTAPartyInvite_PartyMember::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSODOTAPartyInvite_PartyMember::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& CSODOTAPartyInvite_PartyMember::name() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.PartyMember.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSODOTAPartyInvite_PartyMember::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.PartyMember.name)
}
 void CSODOTAPartyInvite_PartyMember::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSODOTAPartyInvite.PartyMember.name)
}
 void CSODOTAPartyInvite_PartyMember::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSODOTAPartyInvite.PartyMember.name)
}
 ::std::string* CSODOTAPartyInvite_PartyMember::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CSODOTAPartyInvite.PartyMember.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CSODOTAPartyInvite_PartyMember::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSODOTAPartyInvite_PartyMember::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CSODOTAPartyInvite.PartyMember.name)
}

// optional fixed64 steam_id = 2;
bool CSODOTAPartyInvite_PartyMember::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSODOTAPartyInvite_PartyMember::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CSODOTAPartyInvite_PartyMember::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSODOTAPartyInvite_PartyMember::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
 ::google::protobuf::uint64 CSODOTAPartyInvite_PartyMember::steam_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.PartyMember.steam_id)
  return steam_id_;
}
 void CSODOTAPartyInvite_PartyMember::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.PartyMember.steam_id)
}

// optional bool is_coach = 4;
bool CSODOTAPartyInvite_PartyMember::has_is_coach() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSODOTAPartyInvite_PartyMember::set_has_is_coach() {
  _has_bits_[0] |= 0x00000004u;
}
void CSODOTAPartyInvite_PartyMember::clear_has_is_coach() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSODOTAPartyInvite_PartyMember::clear_is_coach() {
  is_coach_ = false;
  clear_has_is_coach();
}
 bool CSODOTAPartyInvite_PartyMember::is_coach() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.PartyMember.is_coach)
  return is_coach_;
}
 void CSODOTAPartyInvite_PartyMember::set_is_coach(bool value) {
  set_has_is_coach();
  is_coach_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.PartyMember.is_coach)
}

// -------------------------------------------------------------------

// CSODOTAPartyInvite

// optional uint64 group_id = 1;
bool CSODOTAPartyInvite::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSODOTAPartyInvite::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CSODOTAPartyInvite::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSODOTAPartyInvite::clear_group_id() {
  group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_group_id();
}
 ::google::protobuf::uint64 CSODOTAPartyInvite::group_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.group_id)
  return group_id_;
}
 void CSODOTAPartyInvite::set_group_id(::google::protobuf::uint64 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.group_id)
}

// optional fixed64 sender_id = 2;
bool CSODOTAPartyInvite::has_sender_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSODOTAPartyInvite::set_has_sender_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CSODOTAPartyInvite::clear_has_sender_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSODOTAPartyInvite::clear_sender_id() {
  sender_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sender_id();
}
 ::google::protobuf::uint64 CSODOTAPartyInvite::sender_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.sender_id)
  return sender_id_;
}
 void CSODOTAPartyInvite::set_sender_id(::google::protobuf::uint64 value) {
  set_has_sender_id();
  sender_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.sender_id)
}

// optional string sender_name = 3;
bool CSODOTAPartyInvite::has_sender_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSODOTAPartyInvite::set_has_sender_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CSODOTAPartyInvite::clear_has_sender_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSODOTAPartyInvite::clear_sender_name() {
  sender_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sender_name();
}
 const ::std::string& CSODOTAPartyInvite::sender_name() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.sender_name)
  return sender_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSODOTAPartyInvite::set_sender_name(const ::std::string& value) {
  set_has_sender_name();
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.sender_name)
}
 void CSODOTAPartyInvite::set_sender_name(const char* value) {
  set_has_sender_name();
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSODOTAPartyInvite.sender_name)
}
 void CSODOTAPartyInvite::set_sender_name(const char* value, size_t size) {
  set_has_sender_name();
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSODOTAPartyInvite.sender_name)
}
 ::std::string* CSODOTAPartyInvite::mutable_sender_name() {
  set_has_sender_name();
  // @@protoc_insertion_point(field_mutable:CSODOTAPartyInvite.sender_name)
  return sender_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CSODOTAPartyInvite::release_sender_name() {
  clear_has_sender_name();
  return sender_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSODOTAPartyInvite::set_allocated_sender_name(::std::string* sender_name) {
  if (sender_name != NULL) {
    set_has_sender_name();
  } else {
    clear_has_sender_name();
  }
  sender_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_name);
  // @@protoc_insertion_point(field_set_allocated:CSODOTAPartyInvite.sender_name)
}

// repeated .CSODOTAPartyInvite.PartyMember members = 4;
int CSODOTAPartyInvite::members_size() const {
  return members_.size();
}
void CSODOTAPartyInvite::clear_members() {
  members_.Clear();
}
const ::CSODOTAPartyInvite_PartyMember& CSODOTAPartyInvite::members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.members)
  return members_.Get(index);
}
::CSODOTAPartyInvite_PartyMember* CSODOTAPartyInvite::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTAPartyInvite.members)
  return members_.Mutable(index);
}
::CSODOTAPartyInvite_PartyMember* CSODOTAPartyInvite::add_members() {
  // @@protoc_insertion_point(field_add:CSODOTAPartyInvite.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember >*
CSODOTAPartyInvite::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAPartyInvite.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember >&
CSODOTAPartyInvite::members() const {
  // @@protoc_insertion_point(field_list:CSODOTAPartyInvite.members)
  return members_;
}

// optional uint32 team_id = 5;
bool CSODOTAPartyInvite::has_team_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSODOTAPartyInvite::set_has_team_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CSODOTAPartyInvite::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSODOTAPartyInvite::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
 ::google::protobuf::uint32 CSODOTAPartyInvite::team_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.team_id)
  return team_id_;
}
 void CSODOTAPartyInvite::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.team_id)
}

// optional bool low_priority_status = 6;
bool CSODOTAPartyInvite::has_low_priority_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSODOTAPartyInvite::set_has_low_priority_status() {
  _has_bits_[0] |= 0x00000020u;
}
void CSODOTAPartyInvite::clear_has_low_priority_status() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSODOTAPartyInvite::clear_low_priority_status() {
  low_priority_status_ = false;
  clear_has_low_priority_status();
}
 bool CSODOTAPartyInvite::low_priority_status() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.low_priority_status)
  return low_priority_status_;
}
 void CSODOTAPartyInvite::set_low_priority_status(bool value) {
  set_has_low_priority_status();
  low_priority_status_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.low_priority_status)
}

// optional bool as_coach = 7;
bool CSODOTAPartyInvite::has_as_coach() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CSODOTAPartyInvite::set_has_as_coach() {
  _has_bits_[0] |= 0x00000040u;
}
void CSODOTAPartyInvite::clear_has_as_coach() {
  _has_bits_[0] &= ~0x00000040u;
}
void CSODOTAPartyInvite::clear_as_coach() {
  as_coach_ = false;
  clear_has_as_coach();
}
 bool CSODOTAPartyInvite::as_coach() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.as_coach)
  return as_coach_;
}
 void CSODOTAPartyInvite::set_as_coach(bool value) {
  set_has_as_coach();
  as_coach_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.as_coach)
}

// optional fixed64 invite_gid = 8;
bool CSODOTAPartyInvite::has_invite_gid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CSODOTAPartyInvite::set_has_invite_gid() {
  _has_bits_[0] |= 0x00000080u;
}
void CSODOTAPartyInvite::clear_has_invite_gid() {
  _has_bits_[0] &= ~0x00000080u;
}
void CSODOTAPartyInvite::clear_invite_gid() {
  invite_gid_ = GOOGLE_ULONGLONG(0);
  clear_has_invite_gid();
}
 ::google::protobuf::uint64 CSODOTAPartyInvite::invite_gid() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.invite_gid)
  return invite_gid_;
}
 void CSODOTAPartyInvite::set_invite_gid(::google::protobuf::uint64 value) {
  set_has_invite_gid();
  invite_gid_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.invite_gid)
}

// optional uint32 engine = 9;
bool CSODOTAPartyInvite::has_engine() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CSODOTAPartyInvite::set_has_engine() {
  _has_bits_[0] |= 0x00000100u;
}
void CSODOTAPartyInvite::clear_has_engine() {
  _has_bits_[0] &= ~0x00000100u;
}
void CSODOTAPartyInvite::clear_engine() {
  engine_ = 0u;
  clear_has_engine();
}
 ::google::protobuf::uint32 CSODOTAPartyInvite::engine() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.engine)
  return engine_;
}
 void CSODOTAPartyInvite::set_engine(::google::protobuf::uint32 value) {
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.engine)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CSODOTALobbyInvite_LobbyMember::kNameFieldNumber;
const int CSODOTALobbyInvite_LobbyMember::kSteamIdFieldNumber;
#endif  // !_MSC_VER

CSODOTALobbyInvite_LobbyMember::CSODOTALobbyInvite_LobbyMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSODOTALobbyInvite.LobbyMember)
}

void CSODOTALobbyInvite_LobbyMember::InitAsDefaultInstance() {
}

CSODOTALobbyInvite_LobbyMember::CSODOTALobbyInvite_LobbyMember(const CSODOTALobbyInvite_LobbyMember& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSODOTALobbyInvite.LobbyMember)
}

void CSODOTALobbyInvite_LobbyMember::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTALobbyInvite_LobbyMember::~CSODOTALobbyInvite_LobbyMember() {
  // @@protoc_insertion_point(destructor:CSODOTALobbyInvite.LobbyMember)
  SharedDtor();
}

void CSODOTALobbyInvite_LobbyMember::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CSODOTALobbyInvite_LobbyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTALobbyInvite_LobbyMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTALobbyInvite_LobbyMember_descriptor_;
}

const CSODOTALobbyInvite_LobbyMember& CSODOTALobbyInvite_LobbyMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CSODOTALobbyInvite_LobbyMember* CSODOTALobbyInvite_LobbyMember::default_instance_ = NULL;

CSODOTALobbyInvite_LobbyMember* CSODOTALobbyInvite_LobbyMember::New(::google::protobuf::Arena* arena) const {
  CSODOTALobbyInvite_LobbyMember* n = new CSODOTALobbyInvite_LobbyMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSODOTALobbyInvite_LobbyMember::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    steam_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CSODOTALobbyInvite_LobbyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSODOTALobbyInvite.LobbyMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSODOTALobbyInvite.LobbyMember.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_steam_id;
        break;
      }

      // optional fixed64 steam_id = 2;
      case 2: {
        if (tag == 17) {
         parse_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSODOTALobbyInvite.LobbyMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSODOTALobbyInvite.LobbyMember)
  return false;
#undef DO_
}

void CSODOTALobbyInvite_LobbyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSODOTALobbyInvite.LobbyMember)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSODOTALobbyInvite.LobbyMember.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional fixed64 steam_id = 2;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSODOTALobbyInvite.LobbyMember)
}

::google::protobuf::uint8* CSODOTALobbyInvite_LobbyMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTALobbyInvite.LobbyMember)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSODOTALobbyInvite.LobbyMember.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional fixed64 steam_id = 2;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTALobbyInvite.LobbyMember)
  return target;
}

int CSODOTALobbyInvite_LobbyMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional fixed64 steam_id = 2;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTALobbyInvite_LobbyMember::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CSODOTALobbyInvite_LobbyMember* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSODOTALobbyInvite_LobbyMember>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTALobbyInvite_LobbyMember::MergeFrom(const CSODOTALobbyInvite_LobbyMember& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CSODOTALobbyInvite_LobbyMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTALobbyInvite_LobbyMember::CopyFrom(const CSODOTALobbyInvite_LobbyMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobbyInvite_LobbyMember::IsInitialized() const {

  return true;
}

void CSODOTALobbyInvite_LobbyMember::Swap(CSODOTALobbyInvite_LobbyMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTALobbyInvite_LobbyMember::InternalSwap(CSODOTALobbyInvite_LobbyMember* other) {
  name_.Swap(&other->name_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSODOTALobbyInvite_LobbyMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTALobbyInvite_LobbyMember_descriptor_;
  metadata.reflection = CSODOTALobbyInvite_LobbyMember_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSODOTALobbyInvite::kGroupIdFieldNumber;
const int CSODOTALobbyInvite::kSenderIdFieldNumber;
const int CSODOTALobbyInvite::kSenderNameFieldNumber;
const int CSODOTALobbyInvite::kMembersFieldNumber;
const int CSODOTALobbyInvite::kCustomGameIdFieldNumber;
const int CSODOTALobbyInvite::kInviteGidFieldNumber;
const int CSODOTALobbyInvite::kCustomGameCrcFieldNumber;
const int CSODOTALobbyInvite::kCustomGameTimestampFieldNumber;
#endif  // !_MSC_VER

CSODOTALobbyInvite::CSODOTALobbyInvite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSODOTALobbyInvite)
}

void CSODOTALobbyInvite::InitAsDefaultInstance() {
}

CSODOTALobbyInvite::CSODOTALobbyInvite(const CSODOTALobbyInvite& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSODOTALobbyInvite)
}

void CSODOTALobbyInvite::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  sender_id_ = GOOGLE_ULONGLONG(0);
  sender_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  invite_gid_ = GOOGLE_ULONGLONG(0);
  custom_game_crc_ = GOOGLE_ULONGLONG(0);
  custom_game_timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTALobbyInvite::~CSODOTALobbyInvite() {
  // @@protoc_insertion_point(destructor:CSODOTALobbyInvite)
  SharedDtor();
}

void CSODOTALobbyInvite::SharedDtor() {
  sender_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CSODOTALobbyInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTALobbyInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTALobbyInvite_descriptor_;
}

const CSODOTALobbyInvite& CSODOTALobbyInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CSODOTALobbyInvite* CSODOTALobbyInvite::default_instance_ = NULL;

CSODOTALobbyInvite* CSODOTALobbyInvite::New(::google::protobuf::Arena* arena) const {
  CSODOTALobbyInvite* n = new CSODOTALobbyInvite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSODOTALobbyInvite::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CSODOTALobbyInvite*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 247u) {
    ZR_(group_id_, sender_id_);
    ZR_(custom_game_id_, custom_game_timestamp_);
    if (has_sender_name()) {
      sender_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CSODOTALobbyInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSODOTALobbyInvite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_sender_id;
        break;
      }

      // optional fixed64 sender_id = 2;
      case 2: {
        if (tag == 17) {
         parse_sender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sender_id_)));
          set_has_sender_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sender_name;
        break;
      }

      // optional string sender_name = 3;
      case 3: {
        if (tag == 26) {
         parse_sender_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender_name().data(), this->sender_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSODOTALobbyInvite.sender_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_members;
        break;
      }

      // repeated .CSODOTALobbyInvite.LobbyMember members = 4;
      case 4: {
        if (tag == 34) {
         parse_members:
          DO_(input->IncrementRecursionDepth());
         parse_loop_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_members;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_custom_game_id;
        break;
      }

      // optional uint64 custom_game_id = 5;
      case 5: {
        if (tag == 40) {
         parse_custom_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
          set_has_custom_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_invite_gid;
        break;
      }

      // optional fixed64 invite_gid = 6;
      case 6: {
        if (tag == 49) {
         parse_invite_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &invite_gid_)));
          set_has_invite_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_custom_game_crc;
        break;
      }

      // optional fixed64 custom_game_crc = 7;
      case 7: {
        if (tag == 57) {
         parse_custom_game_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &custom_game_crc_)));
          set_has_custom_game_crc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_custom_game_timestamp;
        break;
      }

      // optional fixed32 custom_game_timestamp = 8;
      case 8: {
        if (tag == 69) {
         parse_custom_game_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_game_timestamp_)));
          set_has_custom_game_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSODOTALobbyInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSODOTALobbyInvite)
  return false;
#undef DO_
}

void CSODOTALobbyInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSODOTALobbyInvite)
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }

  // optional fixed64 sender_id = 2;
  if (has_sender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->sender_id(), output);
  }

  // optional string sender_name = 3;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSODOTALobbyInvite.sender_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sender_name(), output);
  }

  // repeated .CSODOTALobbyInvite.LobbyMember members = 4;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->members(i), output);
  }

  // optional uint64 custom_game_id = 5;
  if (has_custom_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->custom_game_id(), output);
  }

  // optional fixed64 invite_gid = 6;
  if (has_invite_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->invite_gid(), output);
  }

  // optional fixed64 custom_game_crc = 7;
  if (has_custom_game_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->custom_game_crc(), output);
  }

  // optional fixed32 custom_game_timestamp = 8;
  if (has_custom_game_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->custom_game_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSODOTALobbyInvite)
}

::google::protobuf::uint8* CSODOTALobbyInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTALobbyInvite)
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }

  // optional fixed64 sender_id = 2;
  if (has_sender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->sender_id(), target);
  }

  // optional string sender_name = 3;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSODOTALobbyInvite.sender_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sender_name(), target);
  }

  // repeated .CSODOTALobbyInvite.LobbyMember members = 4;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->members(i), target);
  }

  // optional uint64 custom_game_id = 5;
  if (has_custom_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->custom_game_id(), target);
  }

  // optional fixed64 invite_gid = 6;
  if (has_invite_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->invite_gid(), target);
  }

  // optional fixed64 custom_game_crc = 7;
  if (has_custom_game_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->custom_game_crc(), target);
  }

  // optional fixed32 custom_game_timestamp = 8;
  if (has_custom_game_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->custom_game_timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTALobbyInvite)
  return target;
}

int CSODOTALobbyInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 247u) {
    // optional uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional fixed64 sender_id = 2;
    if (has_sender_id()) {
      total_size += 1 + 8;
    }

    // optional string sender_name = 3;
    if (has_sender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_name());
    }

    // optional uint64 custom_game_id = 5;
    if (has_custom_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

    // optional fixed64 invite_gid = 6;
    if (has_invite_gid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 custom_game_crc = 7;
    if (has_custom_game_crc()) {
      total_size += 1 + 8;
    }

    // optional fixed32 custom_game_timestamp = 8;
    if (has_custom_game_timestamp()) {
      total_size += 1 + 4;
    }

  }
  // repeated .CSODOTALobbyInvite.LobbyMember members = 4;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTALobbyInvite::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CSODOTALobbyInvite* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSODOTALobbyInvite>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTALobbyInvite::MergeFrom(const CSODOTALobbyInvite& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_sender_id()) {
      set_sender_id(from.sender_id());
    }
    if (from.has_sender_name()) {
      set_has_sender_name();
      sender_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_name_);
    }
    if (from.has_custom_game_id()) {
      set_custom_game_id(from.custom_game_id());
    }
    if (from.has_invite_gid()) {
      set_invite_gid(from.invite_gid());
    }
    if (from.has_custom_game_crc()) {
      set_custom_game_crc(from.custom_game_crc());
    }
    if (from.has_custom_game_timestamp()) {
      set_custom_game_timestamp(from.custom_game_timestamp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CSODOTALobbyInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTALobbyInvite::CopyFrom(const CSODOTALobbyInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobbyInvite::IsInitialized() const {

  return true;
}

void CSODOTALobbyInvite::Swap(CSODOTALobbyInvite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTALobbyInvite::InternalSwap(CSODOTALobbyInvite* other) {
  std::swap(group_id_, other->group_id_);
  std::swap(sender_id_, other->sender_id_);
  sender_name_.Swap(&other->sender_name_);
  members_.UnsafeArenaSwap(&other->members_);
  std::swap(custom_game_id_, other->custom_game_id_);
  std::swap(invite_gid_, other->invite_gid_);
  std::swap(custom_game_crc_, other->custom_game_crc_);
  std::swap(custom_game_timestamp_, other->custom_game_timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSODOTALobbyInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTALobbyInvite_descriptor_;
  metadata.reflection = CSODOTALobbyInvite_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSODOTALobbyInvite_LobbyMember

// optional string name = 1;
bool CSODOTALobbyInvite_LobbyMember::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSODOTALobbyInvite_LobbyMember::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CSODOTALobbyInvite_LobbyMember::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSODOTALobbyInvite_LobbyMember::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& CSODOTALobbyInvite_LobbyMember::name() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.LobbyMember.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSODOTALobbyInvite_LobbyMember::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.LobbyMember.name)
}
 void CSODOTALobbyInvite_LobbyMember::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSODOTALobbyInvite.LobbyMember.name)
}
 void CSODOTALobbyInvite_LobbyMember::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobbyInvite.LobbyMember.name)
}
 ::std::string* CSODOTALobbyInvite_LobbyMember::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CSODOTALobbyInvite.LobbyMember.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CSODOTALobbyInvite_LobbyMember::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSODOTALobbyInvite_LobbyMember::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobbyInvite.LobbyMember.name)
}

// optional fixed64 steam_id = 2;
bool CSODOTALobbyInvite_LobbyMember::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSODOTALobbyInvite_LobbyMember::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CSODOTALobbyInvite_LobbyMember::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSODOTALobbyInvite_LobbyMember::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
 ::google::protobuf::uint64 CSODOTALobbyInvite_LobbyMember::steam_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.LobbyMember.steam_id)
  return steam_id_;
}
 void CSODOTALobbyInvite_LobbyMember::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.LobbyMember.steam_id)
}

// -------------------------------------------------------------------

// CSODOTALobbyInvite

// optional uint64 group_id = 1;
bool CSODOTALobbyInvite::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSODOTALobbyInvite::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CSODOTALobbyInvite::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSODOTALobbyInvite::clear_group_id() {
  group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_group_id();
}
 ::google::protobuf::uint64 CSODOTALobbyInvite::group_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.group_id)
  return group_id_;
}
 void CSODOTALobbyInvite::set_group_id(::google::protobuf::uint64 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.group_id)
}

// optional fixed64 sender_id = 2;
bool CSODOTALobbyInvite::has_sender_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSODOTALobbyInvite::set_has_sender_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CSODOTALobbyInvite::clear_has_sender_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSODOTALobbyInvite::clear_sender_id() {
  sender_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sender_id();
}
 ::google::protobuf::uint64 CSODOTALobbyInvite::sender_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.sender_id)
  return sender_id_;
}
 void CSODOTALobbyInvite::set_sender_id(::google::protobuf::uint64 value) {
  set_has_sender_id();
  sender_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.sender_id)
}

// optional string sender_name = 3;
bool CSODOTALobbyInvite::has_sender_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSODOTALobbyInvite::set_has_sender_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CSODOTALobbyInvite::clear_has_sender_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSODOTALobbyInvite::clear_sender_name() {
  sender_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sender_name();
}
 const ::std::string& CSODOTALobbyInvite::sender_name() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.sender_name)
  return sender_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSODOTALobbyInvite::set_sender_name(const ::std::string& value) {
  set_has_sender_name();
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.sender_name)
}
 void CSODOTALobbyInvite::set_sender_name(const char* value) {
  set_has_sender_name();
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSODOTALobbyInvite.sender_name)
}
 void CSODOTALobbyInvite::set_sender_name(const char* value, size_t size) {
  set_has_sender_name();
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobbyInvite.sender_name)
}
 ::std::string* CSODOTALobbyInvite::mutable_sender_name() {
  set_has_sender_name();
  // @@protoc_insertion_point(field_mutable:CSODOTALobbyInvite.sender_name)
  return sender_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CSODOTALobbyInvite::release_sender_name() {
  clear_has_sender_name();
  return sender_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSODOTALobbyInvite::set_allocated_sender_name(::std::string* sender_name) {
  if (sender_name != NULL) {
    set_has_sender_name();
  } else {
    clear_has_sender_name();
  }
  sender_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_name);
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobbyInvite.sender_name)
}

// repeated .CSODOTALobbyInvite.LobbyMember members = 4;
int CSODOTALobbyInvite::members_size() const {
  return members_.size();
}
void CSODOTALobbyInvite::clear_members() {
  members_.Clear();
}
const ::CSODOTALobbyInvite_LobbyMember& CSODOTALobbyInvite::members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.members)
  return members_.Get(index);
}
::CSODOTALobbyInvite_LobbyMember* CSODOTALobbyInvite::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobbyInvite.members)
  return members_.Mutable(index);
}
::CSODOTALobbyInvite_LobbyMember* CSODOTALobbyInvite::add_members() {
  // @@protoc_insertion_point(field_add:CSODOTALobbyInvite.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::CSODOTALobbyInvite_LobbyMember >*
CSODOTALobbyInvite::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobbyInvite.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::CSODOTALobbyInvite_LobbyMember >&
CSODOTALobbyInvite::members() const {
  // @@protoc_insertion_point(field_list:CSODOTALobbyInvite.members)
  return members_;
}

// optional uint64 custom_game_id = 5;
bool CSODOTALobbyInvite::has_custom_game_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSODOTALobbyInvite::set_has_custom_game_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CSODOTALobbyInvite::clear_has_custom_game_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSODOTALobbyInvite::clear_custom_game_id() {
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_id();
}
 ::google::protobuf::uint64 CSODOTALobbyInvite::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.custom_game_id)
  return custom_game_id_;
}
 void CSODOTALobbyInvite::set_custom_game_id(::google::protobuf::uint64 value) {
  set_has_custom_game_id();
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.custom_game_id)
}

// optional fixed64 invite_gid = 6;
bool CSODOTALobbyInvite::has_invite_gid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSODOTALobbyInvite::set_has_invite_gid() {
  _has_bits_[0] |= 0x00000020u;
}
void CSODOTALobbyInvite::clear_has_invite_gid() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSODOTALobbyInvite::clear_invite_gid() {
  invite_gid_ = GOOGLE_ULONGLONG(0);
  clear_has_invite_gid();
}
 ::google::protobuf::uint64 CSODOTALobbyInvite::invite_gid() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.invite_gid)
  return invite_gid_;
}
 void CSODOTALobbyInvite::set_invite_gid(::google::protobuf::uint64 value) {
  set_has_invite_gid();
  invite_gid_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.invite_gid)
}

// optional fixed64 custom_game_crc = 7;
bool CSODOTALobbyInvite::has_custom_game_crc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CSODOTALobbyInvite::set_has_custom_game_crc() {
  _has_bits_[0] |= 0x00000040u;
}
void CSODOTALobbyInvite::clear_has_custom_game_crc() {
  _has_bits_[0] &= ~0x00000040u;
}
void CSODOTALobbyInvite::clear_custom_game_crc() {
  custom_game_crc_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_crc();
}
 ::google::protobuf::uint64 CSODOTALobbyInvite::custom_game_crc() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.custom_game_crc)
  return custom_game_crc_;
}
 void CSODOTALobbyInvite::set_custom_game_crc(::google::protobuf::uint64 value) {
  set_has_custom_game_crc();
  custom_game_crc_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.custom_game_crc)
}

// optional fixed32 custom_game_timestamp = 8;
bool CSODOTALobbyInvite::has_custom_game_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CSODOTALobbyInvite::set_has_custom_game_timestamp() {
  _has_bits_[0] |= 0x00000080u;
}
void CSODOTALobbyInvite::clear_has_custom_game_timestamp() {
  _has_bits_[0] &= ~0x00000080u;
}
void CSODOTALobbyInvite::clear_custom_game_timestamp() {
  custom_game_timestamp_ = 0u;
  clear_has_custom_game_timestamp();
}
 ::google::protobuf::uint32 CSODOTALobbyInvite::custom_game_timestamp() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.custom_game_timestamp)
  return custom_game_timestamp_;
}
 void CSODOTALobbyInvite::set_custom_game_timestamp(::google::protobuf::uint32 value) {
  set_has_custom_game_timestamp();
  custom_game_timestamp_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.custom_game_timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientHardwareSpecs::kLogicalProcessorsFieldNumber;
const int CDOTAClientHardwareSpecs::kCpuCyclesPerSecondFieldNumber;
const int CDOTAClientHardwareSpecs::kTotalPhysicalMemoryFieldNumber;
const int CDOTAClientHardwareSpecs::kIs64BitOsFieldNumber;
const int CDOTAClientHardwareSpecs::kUploadMeasurementFieldNumber;
const int CDOTAClientHardwareSpecs::kPreferNotHostFieldNumber;
#endif  // !_MSC_VER

CDOTAClientHardwareSpecs::CDOTAClientHardwareSpecs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientHardwareSpecs)
}

void CDOTAClientHardwareSpecs::InitAsDefaultInstance() {
}

CDOTAClientHardwareSpecs::CDOTAClientHardwareSpecs(const CDOTAClientHardwareSpecs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientHardwareSpecs)
}

void CDOTAClientHardwareSpecs::SharedCtor() {
  _cached_size_ = 0;
  logical_processors_ = 0u;
  cpu_cycles_per_second_ = GOOGLE_ULONGLONG(0);
  total_physical_memory_ = GOOGLE_ULONGLONG(0);
  is_64_bit_os_ = false;
  upload_measurement_ = GOOGLE_ULONGLONG(0);
  prefer_not_host_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientHardwareSpecs::~CDOTAClientHardwareSpecs() {
  // @@protoc_insertion_point(destructor:CDOTAClientHardwareSpecs)
  SharedDtor();
}

void CDOTAClientHardwareSpecs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientHardwareSpecs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientHardwareSpecs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientHardwareSpecs_descriptor_;
}

const CDOTAClientHardwareSpecs& CDOTAClientHardwareSpecs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CDOTAClientHardwareSpecs* CDOTAClientHardwareSpecs::default_instance_ = NULL;

CDOTAClientHardwareSpecs* CDOTAClientHardwareSpecs::New(::google::protobuf::Arena* arena) const {
  CDOTAClientHardwareSpecs* n = new CDOTAClientHardwareSpecs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientHardwareSpecs::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CDOTAClientHardwareSpecs*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(cpu_cycles_per_second_, upload_measurement_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientHardwareSpecs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientHardwareSpecs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 logical_processors = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logical_processors_)));
          set_has_logical_processors();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_cpu_cycles_per_second;
        break;
      }

      // optional fixed64 cpu_cycles_per_second = 2;
      case 2: {
        if (tag == 17) {
         parse_cpu_cycles_per_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &cpu_cycles_per_second_)));
          set_has_cpu_cycles_per_second();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_total_physical_memory;
        break;
      }

      // optional fixed64 total_physical_memory = 3;
      case 3: {
        if (tag == 25) {
         parse_total_physical_memory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_physical_memory_)));
          set_has_total_physical_memory();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_64_bit_os;
        break;
      }

      // optional bool is_64_bit_os = 4;
      case 4: {
        if (tag == 32) {
         parse_is_64_bit_os:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_64_bit_os_)));
          set_has_is_64_bit_os();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_upload_measurement;
        break;
      }

      // optional uint64 upload_measurement = 5;
      case 5: {
        if (tag == 40) {
         parse_upload_measurement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &upload_measurement_)));
          set_has_upload_measurement();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_prefer_not_host;
        break;
      }

      // optional bool prefer_not_host = 6;
      case 6: {
        if (tag == 48) {
         parse_prefer_not_host:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prefer_not_host_)));
          set_has_prefer_not_host();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientHardwareSpecs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientHardwareSpecs)
  return false;
#undef DO_
}

void CDOTAClientHardwareSpecs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientHardwareSpecs)
  // optional uint32 logical_processors = 1;
  if (has_logical_processors()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logical_processors(), output);
  }

  // optional fixed64 cpu_cycles_per_second = 2;
  if (has_cpu_cycles_per_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->cpu_cycles_per_second(), output);
  }

  // optional fixed64 total_physical_memory = 3;
  if (has_total_physical_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->total_physical_memory(), output);
  }

  // optional bool is_64_bit_os = 4;
  if (has_is_64_bit_os()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_64_bit_os(), output);
  }

  // optional uint64 upload_measurement = 5;
  if (has_upload_measurement()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->upload_measurement(), output);
  }

  // optional bool prefer_not_host = 6;
  if (has_prefer_not_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->prefer_not_host(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientHardwareSpecs)
}

::google::protobuf::uint8* CDOTAClientHardwareSpecs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientHardwareSpecs)
  // optional uint32 logical_processors = 1;
  if (has_logical_processors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logical_processors(), target);
  }

  // optional fixed64 cpu_cycles_per_second = 2;
  if (has_cpu_cycles_per_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->cpu_cycles_per_second(), target);
  }

  // optional fixed64 total_physical_memory = 3;
  if (has_total_physical_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->total_physical_memory(), target);
  }

  // optional bool is_64_bit_os = 4;
  if (has_is_64_bit_os()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_64_bit_os(), target);
  }

  // optional uint64 upload_measurement = 5;
  if (has_upload_measurement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->upload_measurement(), target);
  }

  // optional bool prefer_not_host = 6;
  if (has_prefer_not_host()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->prefer_not_host(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientHardwareSpecs)
  return target;
}

int CDOTAClientHardwareSpecs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 logical_processors = 1;
    if (has_logical_processors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logical_processors());
    }

    // optional fixed64 cpu_cycles_per_second = 2;
    if (has_cpu_cycles_per_second()) {
      total_size += 1 + 8;
    }

    // optional fixed64 total_physical_memory = 3;
    if (has_total_physical_memory()) {
      total_size += 1 + 8;
    }

    // optional bool is_64_bit_os = 4;
    if (has_is_64_bit_os()) {
      total_size += 1 + 1;
    }

    // optional uint64 upload_measurement = 5;
    if (has_upload_measurement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->upload_measurement());
    }

    // optional bool prefer_not_host = 6;
    if (has_prefer_not_host()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientHardwareSpecs::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientHardwareSpecs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientHardwareSpecs>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientHardwareSpecs::MergeFrom(const CDOTAClientHardwareSpecs& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logical_processors()) {
      set_logical_processors(from.logical_processors());
    }
    if (from.has_cpu_cycles_per_second()) {
      set_cpu_cycles_per_second(from.cpu_cycles_per_second());
    }
    if (from.has_total_physical_memory()) {
      set_total_physical_memory(from.total_physical_memory());
    }
    if (from.has_is_64_bit_os()) {
      set_is_64_bit_os(from.is_64_bit_os());
    }
    if (from.has_upload_measurement()) {
      set_upload_measurement(from.upload_measurement());
    }
    if (from.has_prefer_not_host()) {
      set_prefer_not_host(from.prefer_not_host());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientHardwareSpecs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientHardwareSpecs::CopyFrom(const CDOTAClientHardwareSpecs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientHardwareSpecs::IsInitialized() const {

  return true;
}

void CDOTAClientHardwareSpecs::Swap(CDOTAClientHardwareSpecs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientHardwareSpecs::InternalSwap(CDOTAClientHardwareSpecs* other) {
  std::swap(logical_processors_, other->logical_processors_);
  std::swap(cpu_cycles_per_second_, other->cpu_cycles_per_second_);
  std::swap(total_physical_memory_, other->total_physical_memory_);
  std::swap(is_64_bit_os_, other->is_64_bit_os_);
  std::swap(upload_measurement_, other->upload_measurement_);
  std::swap(prefer_not_host_, other->prefer_not_host_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientHardwareSpecs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientHardwareSpecs_descriptor_;
  metadata.reflection = CDOTAClientHardwareSpecs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientHardwareSpecs

// optional uint32 logical_processors = 1;
bool CDOTAClientHardwareSpecs::has_logical_processors() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientHardwareSpecs::set_has_logical_processors() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientHardwareSpecs::clear_has_logical_processors() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientHardwareSpecs::clear_logical_processors() {
  logical_processors_ = 0u;
  clear_has_logical_processors();
}
 ::google::protobuf::uint32 CDOTAClientHardwareSpecs::logical_processors() const {
  // @@protoc_insertion_point(field_get:CDOTAClientHardwareSpecs.logical_processors)
  return logical_processors_;
}
 void CDOTAClientHardwareSpecs::set_logical_processors(::google::protobuf::uint32 value) {
  set_has_logical_processors();
  logical_processors_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientHardwareSpecs.logical_processors)
}

// optional fixed64 cpu_cycles_per_second = 2;
bool CDOTAClientHardwareSpecs::has_cpu_cycles_per_second() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientHardwareSpecs::set_has_cpu_cycles_per_second() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientHardwareSpecs::clear_has_cpu_cycles_per_second() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientHardwareSpecs::clear_cpu_cycles_per_second() {
  cpu_cycles_per_second_ = GOOGLE_ULONGLONG(0);
  clear_has_cpu_cycles_per_second();
}
 ::google::protobuf::uint64 CDOTAClientHardwareSpecs::cpu_cycles_per_second() const {
  // @@protoc_insertion_point(field_get:CDOTAClientHardwareSpecs.cpu_cycles_per_second)
  return cpu_cycles_per_second_;
}
 void CDOTAClientHardwareSpecs::set_cpu_cycles_per_second(::google::protobuf::uint64 value) {
  set_has_cpu_cycles_per_second();
  cpu_cycles_per_second_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientHardwareSpecs.cpu_cycles_per_second)
}

// optional fixed64 total_physical_memory = 3;
bool CDOTAClientHardwareSpecs::has_total_physical_memory() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAClientHardwareSpecs::set_has_total_physical_memory() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAClientHardwareSpecs::clear_has_total_physical_memory() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAClientHardwareSpecs::clear_total_physical_memory() {
  total_physical_memory_ = GOOGLE_ULONGLONG(0);
  clear_has_total_physical_memory();
}
 ::google::protobuf::uint64 CDOTAClientHardwareSpecs::total_physical_memory() const {
  // @@protoc_insertion_point(field_get:CDOTAClientHardwareSpecs.total_physical_memory)
  return total_physical_memory_;
}
 void CDOTAClientHardwareSpecs::set_total_physical_memory(::google::protobuf::uint64 value) {
  set_has_total_physical_memory();
  total_physical_memory_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientHardwareSpecs.total_physical_memory)
}

// optional bool is_64_bit_os = 4;
bool CDOTAClientHardwareSpecs::has_is_64_bit_os() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAClientHardwareSpecs::set_has_is_64_bit_os() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAClientHardwareSpecs::clear_has_is_64_bit_os() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAClientHardwareSpecs::clear_is_64_bit_os() {
  is_64_bit_os_ = false;
  clear_has_is_64_bit_os();
}
 bool CDOTAClientHardwareSpecs::is_64_bit_os() const {
  // @@protoc_insertion_point(field_get:CDOTAClientHardwareSpecs.is_64_bit_os)
  return is_64_bit_os_;
}
 void CDOTAClientHardwareSpecs::set_is_64_bit_os(bool value) {
  set_has_is_64_bit_os();
  is_64_bit_os_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientHardwareSpecs.is_64_bit_os)
}

// optional uint64 upload_measurement = 5;
bool CDOTAClientHardwareSpecs::has_upload_measurement() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAClientHardwareSpecs::set_has_upload_measurement() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAClientHardwareSpecs::clear_has_upload_measurement() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAClientHardwareSpecs::clear_upload_measurement() {
  upload_measurement_ = GOOGLE_ULONGLONG(0);
  clear_has_upload_measurement();
}
 ::google::protobuf::uint64 CDOTAClientHardwareSpecs::upload_measurement() const {
  // @@protoc_insertion_point(field_get:CDOTAClientHardwareSpecs.upload_measurement)
  return upload_measurement_;
}
 void CDOTAClientHardwareSpecs::set_upload_measurement(::google::protobuf::uint64 value) {
  set_has_upload_measurement();
  upload_measurement_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientHardwareSpecs.upload_measurement)
}

// optional bool prefer_not_host = 6;
bool CDOTAClientHardwareSpecs::has_prefer_not_host() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTAClientHardwareSpecs::set_has_prefer_not_host() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTAClientHardwareSpecs::clear_has_prefer_not_host() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTAClientHardwareSpecs::clear_prefer_not_host() {
  prefer_not_host_ = false;
  clear_has_prefer_not_host();
}
 bool CDOTAClientHardwareSpecs::prefer_not_host() const {
  // @@protoc_insertion_point(field_get:CDOTAClientHardwareSpecs.prefer_not_host)
  return prefer_not_host_;
}
 void CDOTAClientHardwareSpecs::set_prefer_not_host(bool value) {
  set_has_prefer_not_host();
  prefer_not_host_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientHardwareSpecs.prefer_not_host)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTASaveGame_Player::kTeamFieldNumber;
const int CDOTASaveGame_Player::kNameFieldNumber;
const int CDOTASaveGame_Player::kHeroFieldNumber;
#endif  // !_MSC_VER

CDOTASaveGame_Player::CDOTASaveGame_Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTASaveGame.Player)
}

void CDOTASaveGame_Player::InitAsDefaultInstance() {
}

CDOTASaveGame_Player::CDOTASaveGame_Player(const CDOTASaveGame_Player& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTASaveGame.Player)
}

void CDOTASaveGame_Player::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  team_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hero_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTASaveGame_Player::~CDOTASaveGame_Player() {
  // @@protoc_insertion_point(destructor:CDOTASaveGame.Player)
  SharedDtor();
}

void CDOTASaveGame_Player::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hero_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CDOTASaveGame_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTASaveGame_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTASaveGame_Player_descriptor_;
}

const CDOTASaveGame_Player& CDOTASaveGame_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CDOTASaveGame_Player* CDOTASaveGame_Player::default_instance_ = NULL;

CDOTASaveGame_Player* CDOTASaveGame_Player::New(::google::protobuf::Arena* arena) const {
  CDOTASaveGame_Player* n = new CDOTASaveGame_Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTASaveGame_Player::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    team_ = 0;
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_hero()) {
      hero_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTASaveGame_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTASaveGame.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_GC_TEAM_IsValid(value)) {
            set_team(static_cast< ::DOTA_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDOTASaveGame.Player.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hero;
        break;
      }

      // optional string hero = 3;
      case 3: {
        if (tag == 26) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hero().data(), this->hero().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDOTASaveGame.Player.hero");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTASaveGame.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTASaveGame.Player)
  return false;
#undef DO_
}

void CDOTASaveGame_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTASaveGame.Player)
  // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->team(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDOTASaveGame.Player.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string hero = 3;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero().data(), this->hero().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDOTASaveGame.Player.hero");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hero(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTASaveGame.Player)
}

::google::protobuf::uint8* CDOTASaveGame_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTASaveGame.Player)
  // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->team(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDOTASaveGame.Player.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string hero = 3;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero().data(), this->hero().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDOTASaveGame.Player.hero");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hero(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTASaveGame.Player)
  return target;
}

int CDOTASaveGame_Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string hero = 3;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTASaveGame_Player::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTASaveGame_Player* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTASaveGame_Player>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTASaveGame_Player::MergeFrom(const CDOTASaveGame_Player& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_hero()) {
      set_has_hero();
      hero_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTASaveGame_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTASaveGame_Player::CopyFrom(const CDOTASaveGame_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTASaveGame_Player::IsInitialized() const {

  return true;
}

void CDOTASaveGame_Player::Swap(CDOTASaveGame_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTASaveGame_Player::InternalSwap(CDOTASaveGame_Player* other) {
  std::swap(team_, other->team_);
  name_.Swap(&other->name_);
  hero_.Swap(&other->hero_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTASaveGame_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTASaveGame_Player_descriptor_;
  metadata.reflection = CDOTASaveGame_Player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTASaveGame_SaveInstance_PlayerPositions::kXFieldNumber;
const int CDOTASaveGame_SaveInstance_PlayerPositions::kYFieldNumber;
#endif  // !_MSC_VER

CDOTASaveGame_SaveInstance_PlayerPositions::CDOTASaveGame_SaveInstance_PlayerPositions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTASaveGame.SaveInstance.PlayerPositions)
}

void CDOTASaveGame_SaveInstance_PlayerPositions::InitAsDefaultInstance() {
}

CDOTASaveGame_SaveInstance_PlayerPositions::CDOTASaveGame_SaveInstance_PlayerPositions(const CDOTASaveGame_SaveInstance_PlayerPositions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTASaveGame.SaveInstance.PlayerPositions)
}

void CDOTASaveGame_SaveInstance_PlayerPositions::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTASaveGame_SaveInstance_PlayerPositions::~CDOTASaveGame_SaveInstance_PlayerPositions() {
  // @@protoc_insertion_point(destructor:CDOTASaveGame.SaveInstance.PlayerPositions)
  SharedDtor();
}

void CDOTASaveGame_SaveInstance_PlayerPositions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTASaveGame_SaveInstance_PlayerPositions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTASaveGame_SaveInstance_PlayerPositions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTASaveGame_SaveInstance_PlayerPositions_descriptor_;
}

const CDOTASaveGame_SaveInstance_PlayerPositions& CDOTASaveGame_SaveInstance_PlayerPositions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CDOTASaveGame_SaveInstance_PlayerPositions* CDOTASaveGame_SaveInstance_PlayerPositions::default_instance_ = NULL;

CDOTASaveGame_SaveInstance_PlayerPositions* CDOTASaveGame_SaveInstance_PlayerPositions::New(::google::protobuf::Arena* arena) const {
  CDOTASaveGame_SaveInstance_PlayerPositions* n = new CDOTASaveGame_SaveInstance_PlayerPositions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTASaveGame_SaveInstance_PlayerPositions::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CDOTASaveGame_SaveInstance_PlayerPositions*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTASaveGame_SaveInstance_PlayerPositions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTASaveGame.SaveInstance.PlayerPositions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTASaveGame.SaveInstance.PlayerPositions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTASaveGame.SaveInstance.PlayerPositions)
  return false;
#undef DO_
}

void CDOTASaveGame_SaveInstance_PlayerPositions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTASaveGame.SaveInstance.PlayerPositions)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTASaveGame.SaveInstance.PlayerPositions)
}

::google::protobuf::uint8* CDOTASaveGame_SaveInstance_PlayerPositions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTASaveGame.SaveInstance.PlayerPositions)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTASaveGame.SaveInstance.PlayerPositions)
  return target;
}

int CDOTASaveGame_SaveInstance_PlayerPositions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTASaveGame_SaveInstance_PlayerPositions::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTASaveGame_SaveInstance_PlayerPositions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTASaveGame_SaveInstance_PlayerPositions>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTASaveGame_SaveInstance_PlayerPositions::MergeFrom(const CDOTASaveGame_SaveInstance_PlayerPositions& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTASaveGame_SaveInstance_PlayerPositions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTASaveGame_SaveInstance_PlayerPositions::CopyFrom(const CDOTASaveGame_SaveInstance_PlayerPositions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTASaveGame_SaveInstance_PlayerPositions::IsInitialized() const {

  return true;
}

void CDOTASaveGame_SaveInstance_PlayerPositions::Swap(CDOTASaveGame_SaveInstance_PlayerPositions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTASaveGame_SaveInstance_PlayerPositions::InternalSwap(CDOTASaveGame_SaveInstance_PlayerPositions* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTASaveGame_SaveInstance_PlayerPositions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTASaveGame_SaveInstance_PlayerPositions_descriptor_;
  metadata.reflection = CDOTASaveGame_SaveInstance_PlayerPositions_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTASaveGame_SaveInstance::kGameTimeFieldNumber;
const int CDOTASaveGame_SaveInstance::kTeam1ScoreFieldNumber;
const int CDOTASaveGame_SaveInstance::kTeam2ScoreFieldNumber;
const int CDOTASaveGame_SaveInstance::kPlayerPositionsFieldNumber;
const int CDOTASaveGame_SaveInstance::kSaveIdFieldNumber;
const int CDOTASaveGame_SaveInstance::kSaveTimeFieldNumber;
#endif  // !_MSC_VER

CDOTASaveGame_SaveInstance::CDOTASaveGame_SaveInstance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTASaveGame.SaveInstance)
}

void CDOTASaveGame_SaveInstance::InitAsDefaultInstance() {
}

CDOTASaveGame_SaveInstance::CDOTASaveGame_SaveInstance(const CDOTASaveGame_SaveInstance& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTASaveGame.SaveInstance)
}

void CDOTASaveGame_SaveInstance::SharedCtor() {
  _cached_size_ = 0;
  game_time_ = 0u;
  team1_score_ = 0u;
  team2_score_ = 0u;
  save_id_ = 0u;
  save_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTASaveGame_SaveInstance::~CDOTASaveGame_SaveInstance() {
  // @@protoc_insertion_point(destructor:CDOTASaveGame.SaveInstance)
  SharedDtor();
}

void CDOTASaveGame_SaveInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTASaveGame_SaveInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTASaveGame_SaveInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTASaveGame_SaveInstance_descriptor_;
}

const CDOTASaveGame_SaveInstance& CDOTASaveGame_SaveInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CDOTASaveGame_SaveInstance* CDOTASaveGame_SaveInstance::default_instance_ = NULL;

CDOTASaveGame_SaveInstance* CDOTASaveGame_SaveInstance::New(::google::protobuf::Arena* arena) const {
  CDOTASaveGame_SaveInstance* n = new CDOTASaveGame_SaveInstance;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTASaveGame_SaveInstance::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CDOTASaveGame_SaveInstance*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 55u) {
    ZR_(game_time_, team1_score_);
    ZR_(team2_score_, save_time_);
  }

#undef ZR_HELPER_
#undef ZR_

  player_positions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTASaveGame_SaveInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTASaveGame.SaveInstance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_time = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_time_)));
          set_has_game_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_team1_score;
        break;
      }

      // optional uint32 team1_score = 3;
      case 3: {
        if (tag == 24) {
         parse_team1_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1_score_)));
          set_has_team1_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_team2_score;
        break;
      }

      // optional uint32 team2_score = 4;
      case 4: {
        if (tag == 32) {
         parse_team2_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2_score_)));
          set_has_team2_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_player_positions;
        break;
      }

      // repeated .CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
      case 5: {
        if (tag == 42) {
         parse_player_positions:
          DO_(input->IncrementRecursionDepth());
         parse_loop_player_positions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_player_positions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_player_positions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_save_id;
        break;
      }

      // optional uint32 save_id = 6;
      case 6: {
        if (tag == 48) {
         parse_save_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &save_id_)));
          set_has_save_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_save_time;
        break;
      }

      // optional uint32 save_time = 7;
      case 7: {
        if (tag == 56) {
         parse_save_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &save_time_)));
          set_has_save_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTASaveGame.SaveInstance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTASaveGame.SaveInstance)
  return false;
#undef DO_
}

void CDOTASaveGame_SaveInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTASaveGame.SaveInstance)
  // optional uint32 game_time = 2;
  if (has_game_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_time(), output);
  }

  // optional uint32 team1_score = 3;
  if (has_team1_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team1_score(), output);
  }

  // optional uint32 team2_score = 4;
  if (has_team2_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team2_score(), output);
  }

  // repeated .CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
  for (unsigned int i = 0, n = this->player_positions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->player_positions(i), output);
  }

  // optional uint32 save_id = 6;
  if (has_save_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->save_id(), output);
  }

  // optional uint32 save_time = 7;
  if (has_save_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->save_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTASaveGame.SaveInstance)
}

::google::protobuf::uint8* CDOTASaveGame_SaveInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTASaveGame.SaveInstance)
  // optional uint32 game_time = 2;
  if (has_game_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_time(), target);
  }

  // optional uint32 team1_score = 3;
  if (has_team1_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team1_score(), target);
  }

  // optional uint32 team2_score = 4;
  if (has_team2_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team2_score(), target);
  }

  // repeated .CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
  for (unsigned int i = 0, n = this->player_positions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->player_positions(i), target);
  }

  // optional uint32 save_id = 6;
  if (has_save_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->save_id(), target);
  }

  // optional uint32 save_time = 7;
  if (has_save_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->save_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTASaveGame.SaveInstance)
  return target;
}

int CDOTASaveGame_SaveInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 55u) {
    // optional uint32 game_time = 2;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_time());
    }

    // optional uint32 team1_score = 3;
    if (has_team1_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1_score());
    }

    // optional uint32 team2_score = 4;
    if (has_team2_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2_score());
    }

    // optional uint32 save_id = 6;
    if (has_save_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->save_id());
    }

    // optional uint32 save_time = 7;
    if (has_save_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->save_time());
    }

  }
  // repeated .CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
  total_size += 1 * this->player_positions_size();
  for (int i = 0; i < this->player_positions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_positions(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTASaveGame_SaveInstance::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTASaveGame_SaveInstance* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTASaveGame_SaveInstance>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTASaveGame_SaveInstance::MergeFrom(const CDOTASaveGame_SaveInstance& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  player_positions_.MergeFrom(from.player_positions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_time()) {
      set_game_time(from.game_time());
    }
    if (from.has_team1_score()) {
      set_team1_score(from.team1_score());
    }
    if (from.has_team2_score()) {
      set_team2_score(from.team2_score());
    }
    if (from.has_save_id()) {
      set_save_id(from.save_id());
    }
    if (from.has_save_time()) {
      set_save_time(from.save_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTASaveGame_SaveInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTASaveGame_SaveInstance::CopyFrom(const CDOTASaveGame_SaveInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTASaveGame_SaveInstance::IsInitialized() const {

  return true;
}

void CDOTASaveGame_SaveInstance::Swap(CDOTASaveGame_SaveInstance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTASaveGame_SaveInstance::InternalSwap(CDOTASaveGame_SaveInstance* other) {
  std::swap(game_time_, other->game_time_);
  std::swap(team1_score_, other->team1_score_);
  std::swap(team2_score_, other->team2_score_);
  player_positions_.UnsafeArenaSwap(&other->player_positions_);
  std::swap(save_id_, other->save_id_);
  std::swap(save_time_, other->save_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTASaveGame_SaveInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTASaveGame_SaveInstance_descriptor_;
  metadata.reflection = CDOTASaveGame_SaveInstance_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTASaveGame::kMatchIdFieldNumber;
const int CDOTASaveGame::kSaveTimeFieldNumber;
const int CDOTASaveGame::kPlayersFieldNumber;
const int CDOTASaveGame::kSaveInstancesFieldNumber;
#endif  // !_MSC_VER

CDOTASaveGame::CDOTASaveGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTASaveGame)
}

void CDOTASaveGame::InitAsDefaultInstance() {
}

CDOTASaveGame::CDOTASaveGame(const CDOTASaveGame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTASaveGame)
}

void CDOTASaveGame::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  save_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTASaveGame::~CDOTASaveGame() {
  // @@protoc_insertion_point(destructor:CDOTASaveGame)
  SharedDtor();
}

void CDOTASaveGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTASaveGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTASaveGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTASaveGame_descriptor_;
}

const CDOTASaveGame& CDOTASaveGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CDOTASaveGame* CDOTASaveGame::default_instance_ = NULL;

CDOTASaveGame* CDOTASaveGame::New(::google::protobuf::Arena* arena) const {
  CDOTASaveGame* n = new CDOTASaveGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTASaveGame::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    match_id_ = GOOGLE_ULONGLONG(0);
    save_time_ = 0u;
  }
  players_.Clear();
  save_instances_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTASaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTASaveGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 save_time = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &save_time_)));
          set_has_save_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_players;
        break;
      }

      // repeated .CDOTASaveGame.Player players = 3;
      case 3: {
        if (tag == 26) {
         parse_players:
          DO_(input->IncrementRecursionDepth());
         parse_loop_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_players;
        if (input->ExpectTag(34)) goto parse_loop_save_instances;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .CDOTASaveGame.SaveInstance save_instances = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_save_instances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_save_instances()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_save_instances;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 5;
      case 5: {
        if (tag == 40) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTASaveGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTASaveGame)
  return false;
#undef DO_
}

void CDOTASaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTASaveGame)
  // optional uint32 save_time = 2;
  if (has_save_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->save_time(), output);
  }

  // repeated .CDOTASaveGame.Player players = 3;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->players(i), output);
  }

  // repeated .CDOTASaveGame.SaveInstance save_instances = 4;
  for (unsigned int i = 0, n = this->save_instances_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->save_instances(i), output);
  }

  // optional uint64 match_id = 5;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->match_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTASaveGame)
}

::google::protobuf::uint8* CDOTASaveGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTASaveGame)
  // optional uint32 save_time = 2;
  if (has_save_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->save_time(), target);
  }

  // repeated .CDOTASaveGame.Player players = 3;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->players(i), target);
  }

  // repeated .CDOTASaveGame.SaveInstance save_instances = 4;
  for (unsigned int i = 0, n = this->save_instances_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->save_instances(i), target);
  }

  // optional uint64 match_id = 5;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->match_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTASaveGame)
  return target;
}

int CDOTASaveGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 match_id = 5;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 save_time = 2;
    if (has_save_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->save_time());
    }

  }
  // repeated .CDOTASaveGame.Player players = 3;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  // repeated .CDOTASaveGame.SaveInstance save_instances = 4;
  total_size += 1 * this->save_instances_size();
  for (int i = 0; i < this->save_instances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->save_instances(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTASaveGame::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTASaveGame* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTASaveGame>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTASaveGame::MergeFrom(const CDOTASaveGame& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  players_.MergeFrom(from.players_);
  save_instances_.MergeFrom(from.save_instances_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_save_time()) {
      set_save_time(from.save_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTASaveGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTASaveGame::CopyFrom(const CDOTASaveGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTASaveGame::IsInitialized() const {

  return true;
}

void CDOTASaveGame::Swap(CDOTASaveGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTASaveGame::InternalSwap(CDOTASaveGame* other) {
  std::swap(match_id_, other->match_id_);
  std::swap(save_time_, other->save_time_);
  players_.UnsafeArenaSwap(&other->players_);
  save_instances_.UnsafeArenaSwap(&other->save_instances_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTASaveGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTASaveGame_descriptor_;
  metadata.reflection = CDOTASaveGame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTASaveGame_Player

// optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
bool CDOTASaveGame_Player::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTASaveGame_Player::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTASaveGame_Player::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTASaveGame_Player::clear_team() {
  team_ = 0;
  clear_has_team();
}
 ::DOTA_GC_TEAM CDOTASaveGame_Player::team() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.Player.team)
  return static_cast< ::DOTA_GC_TEAM >(team_);
}
 void CDOTASaveGame_Player::set_team(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.Player.team)
}

// optional string name = 2;
bool CDOTASaveGame_Player::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTASaveGame_Player::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTASaveGame_Player::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTASaveGame_Player::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& CDOTASaveGame_Player::name() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.Player.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDOTASaveGame_Player::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDOTASaveGame.Player.name)
}
 void CDOTASaveGame_Player::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDOTASaveGame.Player.name)
}
 void CDOTASaveGame_Player::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDOTASaveGame.Player.name)
}
 ::std::string* CDOTASaveGame_Player::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CDOTASaveGame.Player.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDOTASaveGame_Player::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDOTASaveGame_Player::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CDOTASaveGame.Player.name)
}

// optional string hero = 3;
bool CDOTASaveGame_Player::has_hero() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTASaveGame_Player::set_has_hero() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTASaveGame_Player::clear_has_hero() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTASaveGame_Player::clear_hero() {
  hero_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hero();
}
 const ::std::string& CDOTASaveGame_Player::hero() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.Player.hero)
  return hero_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDOTASaveGame_Player::set_hero(const ::std::string& value) {
  set_has_hero();
  hero_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDOTASaveGame.Player.hero)
}
 void CDOTASaveGame_Player::set_hero(const char* value) {
  set_has_hero();
  hero_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDOTASaveGame.Player.hero)
}
 void CDOTASaveGame_Player::set_hero(const char* value, size_t size) {
  set_has_hero();
  hero_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDOTASaveGame.Player.hero)
}
 ::std::string* CDOTASaveGame_Player::mutable_hero() {
  set_has_hero();
  // @@protoc_insertion_point(field_mutable:CDOTASaveGame.Player.hero)
  return hero_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDOTASaveGame_Player::release_hero() {
  clear_has_hero();
  return hero_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDOTASaveGame_Player::set_allocated_hero(::std::string* hero) {
  if (hero != NULL) {
    set_has_hero();
  } else {
    clear_has_hero();
  }
  hero_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hero);
  // @@protoc_insertion_point(field_set_allocated:CDOTASaveGame.Player.hero)
}

// -------------------------------------------------------------------

// CDOTASaveGame_SaveInstance_PlayerPositions

// optional float x = 1;
bool CDOTASaveGame_SaveInstance_PlayerPositions::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTASaveGame_SaveInstance_PlayerPositions::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTASaveGame_SaveInstance_PlayerPositions::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTASaveGame_SaveInstance_PlayerPositions::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float CDOTASaveGame_SaveInstance_PlayerPositions::x() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.SaveInstance.PlayerPositions.x)
  return x_;
}
 void CDOTASaveGame_SaveInstance_PlayerPositions::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.SaveInstance.PlayerPositions.x)
}

// optional float y = 2;
bool CDOTASaveGame_SaveInstance_PlayerPositions::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTASaveGame_SaveInstance_PlayerPositions::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTASaveGame_SaveInstance_PlayerPositions::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTASaveGame_SaveInstance_PlayerPositions::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float CDOTASaveGame_SaveInstance_PlayerPositions::y() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.SaveInstance.PlayerPositions.y)
  return y_;
}
 void CDOTASaveGame_SaveInstance_PlayerPositions::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.SaveInstance.PlayerPositions.y)
}

// -------------------------------------------------------------------

// CDOTASaveGame_SaveInstance

// optional uint32 game_time = 2;
bool CDOTASaveGame_SaveInstance::has_game_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTASaveGame_SaveInstance::set_has_game_time() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTASaveGame_SaveInstance::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTASaveGame_SaveInstance::clear_game_time() {
  game_time_ = 0u;
  clear_has_game_time();
}
 ::google::protobuf::uint32 CDOTASaveGame_SaveInstance::game_time() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.SaveInstance.game_time)
  return game_time_;
}
 void CDOTASaveGame_SaveInstance::set_game_time(::google::protobuf::uint32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.SaveInstance.game_time)
}

// optional uint32 team1_score = 3;
bool CDOTASaveGame_SaveInstance::has_team1_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTASaveGame_SaveInstance::set_has_team1_score() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTASaveGame_SaveInstance::clear_has_team1_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTASaveGame_SaveInstance::clear_team1_score() {
  team1_score_ = 0u;
  clear_has_team1_score();
}
 ::google::protobuf::uint32 CDOTASaveGame_SaveInstance::team1_score() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.SaveInstance.team1_score)
  return team1_score_;
}
 void CDOTASaveGame_SaveInstance::set_team1_score(::google::protobuf::uint32 value) {
  set_has_team1_score();
  team1_score_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.SaveInstance.team1_score)
}

// optional uint32 team2_score = 4;
bool CDOTASaveGame_SaveInstance::has_team2_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTASaveGame_SaveInstance::set_has_team2_score() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTASaveGame_SaveInstance::clear_has_team2_score() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTASaveGame_SaveInstance::clear_team2_score() {
  team2_score_ = 0u;
  clear_has_team2_score();
}
 ::google::protobuf::uint32 CDOTASaveGame_SaveInstance::team2_score() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.SaveInstance.team2_score)
  return team2_score_;
}
 void CDOTASaveGame_SaveInstance::set_team2_score(::google::protobuf::uint32 value) {
  set_has_team2_score();
  team2_score_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.SaveInstance.team2_score)
}

// repeated .CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
int CDOTASaveGame_SaveInstance::player_positions_size() const {
  return player_positions_.size();
}
void CDOTASaveGame_SaveInstance::clear_player_positions() {
  player_positions_.Clear();
}
const ::CDOTASaveGame_SaveInstance_PlayerPositions& CDOTASaveGame_SaveInstance::player_positions(int index) const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.SaveInstance.player_positions)
  return player_positions_.Get(index);
}
::CDOTASaveGame_SaveInstance_PlayerPositions* CDOTASaveGame_SaveInstance::mutable_player_positions(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTASaveGame.SaveInstance.player_positions)
  return player_positions_.Mutable(index);
}
::CDOTASaveGame_SaveInstance_PlayerPositions* CDOTASaveGame_SaveInstance::add_player_positions() {
  // @@protoc_insertion_point(field_add:CDOTASaveGame.SaveInstance.player_positions)
  return player_positions_.Add();
}
::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance_PlayerPositions >*
CDOTASaveGame_SaveInstance::mutable_player_positions() {
  // @@protoc_insertion_point(field_mutable_list:CDOTASaveGame.SaveInstance.player_positions)
  return &player_positions_;
}
const ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance_PlayerPositions >&
CDOTASaveGame_SaveInstance::player_positions() const {
  // @@protoc_insertion_point(field_list:CDOTASaveGame.SaveInstance.player_positions)
  return player_positions_;
}

// optional uint32 save_id = 6;
bool CDOTASaveGame_SaveInstance::has_save_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTASaveGame_SaveInstance::set_has_save_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTASaveGame_SaveInstance::clear_has_save_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTASaveGame_SaveInstance::clear_save_id() {
  save_id_ = 0u;
  clear_has_save_id();
}
 ::google::protobuf::uint32 CDOTASaveGame_SaveInstance::save_id() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.SaveInstance.save_id)
  return save_id_;
}
 void CDOTASaveGame_SaveInstance::set_save_id(::google::protobuf::uint32 value) {
  set_has_save_id();
  save_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.SaveInstance.save_id)
}

// optional uint32 save_time = 7;
bool CDOTASaveGame_SaveInstance::has_save_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTASaveGame_SaveInstance::set_has_save_time() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTASaveGame_SaveInstance::clear_has_save_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTASaveGame_SaveInstance::clear_save_time() {
  save_time_ = 0u;
  clear_has_save_time();
}
 ::google::protobuf::uint32 CDOTASaveGame_SaveInstance::save_time() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.SaveInstance.save_time)
  return save_time_;
}
 void CDOTASaveGame_SaveInstance::set_save_time(::google::protobuf::uint32 value) {
  set_has_save_time();
  save_time_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.SaveInstance.save_time)
}

// -------------------------------------------------------------------

// CDOTASaveGame

// optional uint64 match_id = 5;
bool CDOTASaveGame::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTASaveGame::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTASaveGame::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTASaveGame::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
 ::google::protobuf::uint64 CDOTASaveGame::match_id() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.match_id)
  return match_id_;
}
 void CDOTASaveGame::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.match_id)
}

// optional uint32 save_time = 2;
bool CDOTASaveGame::has_save_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTASaveGame::set_has_save_time() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTASaveGame::clear_has_save_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTASaveGame::clear_save_time() {
  save_time_ = 0u;
  clear_has_save_time();
}
 ::google::protobuf::uint32 CDOTASaveGame::save_time() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.save_time)
  return save_time_;
}
 void CDOTASaveGame::set_save_time(::google::protobuf::uint32 value) {
  set_has_save_time();
  save_time_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.save_time)
}

// repeated .CDOTASaveGame.Player players = 3;
int CDOTASaveGame::players_size() const {
  return players_.size();
}
void CDOTASaveGame::clear_players() {
  players_.Clear();
}
const ::CDOTASaveGame_Player& CDOTASaveGame::players(int index) const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.players)
  return players_.Get(index);
}
::CDOTASaveGame_Player* CDOTASaveGame::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTASaveGame.players)
  return players_.Mutable(index);
}
::CDOTASaveGame_Player* CDOTASaveGame::add_players() {
  // @@protoc_insertion_point(field_add:CDOTASaveGame.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_Player >*
CDOTASaveGame::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CDOTASaveGame.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_Player >&
CDOTASaveGame::players() const {
  // @@protoc_insertion_point(field_list:CDOTASaveGame.players)
  return players_;
}

// repeated .CDOTASaveGame.SaveInstance save_instances = 4;
int CDOTASaveGame::save_instances_size() const {
  return save_instances_.size();
}
void CDOTASaveGame::clear_save_instances() {
  save_instances_.Clear();
}
const ::CDOTASaveGame_SaveInstance& CDOTASaveGame::save_instances(int index) const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.save_instances)
  return save_instances_.Get(index);
}
::CDOTASaveGame_SaveInstance* CDOTASaveGame::mutable_save_instances(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTASaveGame.save_instances)
  return save_instances_.Mutable(index);
}
::CDOTASaveGame_SaveInstance* CDOTASaveGame::add_save_instances() {
  // @@protoc_insertion_point(field_add:CDOTASaveGame.save_instances)
  return save_instances_.Add();
}
::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance >*
CDOTASaveGame::mutable_save_instances() {
  // @@protoc_insertion_point(field_mutable_list:CDOTASaveGame.save_instances)
  return &save_instances_;
}
const ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance >&
CDOTASaveGame::save_instances() const {
  // @@protoc_insertion_point(field_list:CDOTASaveGame.save_instances)
  return save_instances_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgLeaverState::kLobbyStateFieldNumber;
const int CMsgLeaverState::kGameStateFieldNumber;
const int CMsgLeaverState::kLeaverDetectedFieldNumber;
const int CMsgLeaverState::kFirstBloodHappenedFieldNumber;
const int CMsgLeaverState::kDiscardMatchResultsFieldNumber;
const int CMsgLeaverState::kMassDisconnectFieldNumber;
#endif  // !_MSC_VER

CMsgLeaverState::CMsgLeaverState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgLeaverState)
}

void CMsgLeaverState::InitAsDefaultInstance() {
}

CMsgLeaverState::CMsgLeaverState(const CMsgLeaverState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgLeaverState)
}

void CMsgLeaverState::SharedCtor() {
  _cached_size_ = 0;
  lobby_state_ = 0u;
  game_state_ = 0;
  leaver_detected_ = false;
  first_blood_happened_ = false;
  discard_match_results_ = false;
  mass_disconnect_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLeaverState::~CMsgLeaverState() {
  // @@protoc_insertion_point(destructor:CMsgLeaverState)
  SharedDtor();
}

void CMsgLeaverState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLeaverState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLeaverState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLeaverState_descriptor_;
}

const CMsgLeaverState& CMsgLeaverState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgLeaverState* CMsgLeaverState::default_instance_ = NULL;

CMsgLeaverState* CMsgLeaverState::New(::google::protobuf::Arena* arena) const {
  CMsgLeaverState* n = new CMsgLeaverState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgLeaverState::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgLeaverState*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(lobby_state_, mass_disconnect_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgLeaverState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgLeaverState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lobby_state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_state_)));
          set_has_lobby_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_game_state;
        break;
      }

      // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
      case 2: {
        if (tag == 16) {
         parse_game_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_GameState_IsValid(value)) {
            set_game_state(static_cast< ::DOTA_GameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_leaver_detected;
        break;
      }

      // optional bool leaver_detected = 3;
      case 3: {
        if (tag == 24) {
         parse_leaver_detected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leaver_detected_)));
          set_has_leaver_detected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_first_blood_happened;
        break;
      }

      // optional bool first_blood_happened = 4;
      case 4: {
        if (tag == 32) {
         parse_first_blood_happened:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_blood_happened_)));
          set_has_first_blood_happened();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_discard_match_results;
        break;
      }

      // optional bool discard_match_results = 5;
      case 5: {
        if (tag == 40) {
         parse_discard_match_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &discard_match_results_)));
          set_has_discard_match_results();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mass_disconnect;
        break;
      }

      // optional bool mass_disconnect = 6;
      case 6: {
        if (tag == 48) {
         parse_mass_disconnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mass_disconnect_)));
          set_has_mass_disconnect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgLeaverState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgLeaverState)
  return false;
#undef DO_
}

void CMsgLeaverState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgLeaverState)
  // optional uint32 lobby_state = 1;
  if (has_lobby_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lobby_state(), output);
  }

  // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  if (has_game_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->game_state(), output);
  }

  // optional bool leaver_detected = 3;
  if (has_leaver_detected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->leaver_detected(), output);
  }

  // optional bool first_blood_happened = 4;
  if (has_first_blood_happened()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->first_blood_happened(), output);
  }

  // optional bool discard_match_results = 5;
  if (has_discard_match_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->discard_match_results(), output);
  }

  // optional bool mass_disconnect = 6;
  if (has_mass_disconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mass_disconnect(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgLeaverState)
}

::google::protobuf::uint8* CMsgLeaverState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLeaverState)
  // optional uint32 lobby_state = 1;
  if (has_lobby_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lobby_state(), target);
  }

  // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  if (has_game_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->game_state(), target);
  }

  // optional bool leaver_detected = 3;
  if (has_leaver_detected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->leaver_detected(), target);
  }

  // optional bool first_blood_happened = 4;
  if (has_first_blood_happened()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->first_blood_happened(), target);
  }

  // optional bool discard_match_results = 5;
  if (has_discard_match_results()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->discard_match_results(), target);
  }

  // optional bool mass_disconnect = 6;
  if (has_mass_disconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mass_disconnect(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLeaverState)
  return target;
}

int CMsgLeaverState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 lobby_state = 1;
    if (has_lobby_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_state());
    }

    // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
    if (has_game_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_state());
    }

    // optional bool leaver_detected = 3;
    if (has_leaver_detected()) {
      total_size += 1 + 1;
    }

    // optional bool first_blood_happened = 4;
    if (has_first_blood_happened()) {
      total_size += 1 + 1;
    }

    // optional bool discard_match_results = 5;
    if (has_discard_match_results()) {
      total_size += 1 + 1;
    }

    // optional bool mass_disconnect = 6;
    if (has_mass_disconnect()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLeaverState::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgLeaverState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgLeaverState>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLeaverState::MergeFrom(const CMsgLeaverState& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lobby_state()) {
      set_lobby_state(from.lobby_state());
    }
    if (from.has_game_state()) {
      set_game_state(from.game_state());
    }
    if (from.has_leaver_detected()) {
      set_leaver_detected(from.leaver_detected());
    }
    if (from.has_first_blood_happened()) {
      set_first_blood_happened(from.first_blood_happened());
    }
    if (from.has_discard_match_results()) {
      set_discard_match_results(from.discard_match_results());
    }
    if (from.has_mass_disconnect()) {
      set_mass_disconnect(from.mass_disconnect());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgLeaverState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeaverState::CopyFrom(const CMsgLeaverState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaverState::IsInitialized() const {

  return true;
}

void CMsgLeaverState::Swap(CMsgLeaverState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLeaverState::InternalSwap(CMsgLeaverState* other) {
  std::swap(lobby_state_, other->lobby_state_);
  std::swap(game_state_, other->game_state_);
  std::swap(leaver_detected_, other->leaver_detected_);
  std::swap(first_blood_happened_, other->first_blood_happened_);
  std::swap(discard_match_results_, other->discard_match_results_);
  std::swap(mass_disconnect_, other->mass_disconnect_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgLeaverState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLeaverState_descriptor_;
  metadata.reflection = CMsgLeaverState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgLeaverState

// optional uint32 lobby_state = 1;
bool CMsgLeaverState::has_lobby_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgLeaverState::set_has_lobby_state() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgLeaverState::clear_has_lobby_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgLeaverState::clear_lobby_state() {
  lobby_state_ = 0u;
  clear_has_lobby_state();
}
 ::google::protobuf::uint32 CMsgLeaverState::lobby_state() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.lobby_state)
  return lobby_state_;
}
 void CMsgLeaverState::set_lobby_state(::google::protobuf::uint32 value) {
  set_has_lobby_state();
  lobby_state_ = value;
  // @@protoc_insertion_point(field_set:CMsgLeaverState.lobby_state)
}

// optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
bool CMsgLeaverState::has_game_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgLeaverState::set_has_game_state() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgLeaverState::clear_has_game_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgLeaverState::clear_game_state() {
  game_state_ = 0;
  clear_has_game_state();
}
 ::DOTA_GameState CMsgLeaverState::game_state() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.game_state)
  return static_cast< ::DOTA_GameState >(game_state_);
}
 void CMsgLeaverState::set_game_state(::DOTA_GameState value) {
  assert(::DOTA_GameState_IsValid(value));
  set_has_game_state();
  game_state_ = value;
  // @@protoc_insertion_point(field_set:CMsgLeaverState.game_state)
}

// optional bool leaver_detected = 3;
bool CMsgLeaverState::has_leaver_detected() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgLeaverState::set_has_leaver_detected() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgLeaverState::clear_has_leaver_detected() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgLeaverState::clear_leaver_detected() {
  leaver_detected_ = false;
  clear_has_leaver_detected();
}
 bool CMsgLeaverState::leaver_detected() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.leaver_detected)
  return leaver_detected_;
}
 void CMsgLeaverState::set_leaver_detected(bool value) {
  set_has_leaver_detected();
  leaver_detected_ = value;
  // @@protoc_insertion_point(field_set:CMsgLeaverState.leaver_detected)
}

// optional bool first_blood_happened = 4;
bool CMsgLeaverState::has_first_blood_happened() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgLeaverState::set_has_first_blood_happened() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgLeaverState::clear_has_first_blood_happened() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgLeaverState::clear_first_blood_happened() {
  first_blood_happened_ = false;
  clear_has_first_blood_happened();
}
 bool CMsgLeaverState::first_blood_happened() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.first_blood_happened)
  return first_blood_happened_;
}
 void CMsgLeaverState::set_first_blood_happened(bool value) {
  set_has_first_blood_happened();
  first_blood_happened_ = value;
  // @@protoc_insertion_point(field_set:CMsgLeaverState.first_blood_happened)
}

// optional bool discard_match_results = 5;
bool CMsgLeaverState::has_discard_match_results() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgLeaverState::set_has_discard_match_results() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgLeaverState::clear_has_discard_match_results() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgLeaverState::clear_discard_match_results() {
  discard_match_results_ = false;
  clear_has_discard_match_results();
}
 bool CMsgLeaverState::discard_match_results() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.discard_match_results)
  return discard_match_results_;
}
 void CMsgLeaverState::set_discard_match_results(bool value) {
  set_has_discard_match_results();
  discard_match_results_ = value;
  // @@protoc_insertion_point(field_set:CMsgLeaverState.discard_match_results)
}

// optional bool mass_disconnect = 6;
bool CMsgLeaverState::has_mass_disconnect() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgLeaverState::set_has_mass_disconnect() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgLeaverState::clear_has_mass_disconnect() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgLeaverState::clear_mass_disconnect() {
  mass_disconnect_ = false;
  clear_has_mass_disconnect();
}
 bool CMsgLeaverState::mass_disconnect() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.mass_disconnect)
  return mass_disconnect_;
}
 void CMsgLeaverState::set_mass_disconnect(bool value) {
  set_has_mass_disconnect();
  mass_disconnect_ = value;
  // @@protoc_insertion_point(field_set:CMsgLeaverState.mass_disconnect)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTALobbyMember_CDOTALobbyMemberXPBonus::kTypeFieldNumber;
const int CDOTALobbyMember_CDOTALobbyMemberXPBonus::kXpBonusFieldNumber;
const int CDOTALobbyMember_CDOTALobbyMemberXPBonus::kSourceKeyFieldNumber;
#endif  // !_MSC_VER

CDOTALobbyMember_CDOTALobbyMemberXPBonus::CDOTALobbyMember_CDOTALobbyMemberXPBonus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTALobbyMember.CDOTALobbyMemberXPBonus)
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::InitAsDefaultInstance() {
}

CDOTALobbyMember_CDOTALobbyMemberXPBonus::CDOTALobbyMember_CDOTALobbyMemberXPBonus(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTALobbyMember.CDOTALobbyMemberXPBonus)
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  xp_bonus_ = 0;
  source_key_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTALobbyMember_CDOTALobbyMemberXPBonus::~CDOTALobbyMember_CDOTALobbyMemberXPBonus() {
  // @@protoc_insertion_point(destructor:CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  SharedDtor();
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTALobbyMember_CDOTALobbyMemberXPBonus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTALobbyMember_CDOTALobbyMemberXPBonus_descriptor_;
}

const CDOTALobbyMember_CDOTALobbyMemberXPBonus& CDOTALobbyMember_CDOTALobbyMemberXPBonus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CDOTALobbyMember_CDOTALobbyMemberXPBonus* CDOTALobbyMember_CDOTALobbyMemberXPBonus::default_instance_ = NULL;

CDOTALobbyMember_CDOTALobbyMemberXPBonus* CDOTALobbyMember_CDOTALobbyMemberXPBonus::New(::google::protobuf::Arena* arena) const {
  CDOTALobbyMember_CDOTALobbyMemberXPBonus* n = new CDOTALobbyMember_CDOTALobbyMemberXPBonus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CDOTALobbyMember_CDOTALobbyMemberXPBonus*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, source_key_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTALobbyMember_CDOTALobbyMemberXPBonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_xp_bonus;
        break;
      }

      // optional float xp_bonus = 2;
      case 2: {
        if (tag == 21) {
         parse_xp_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xp_bonus_)));
          set_has_xp_bonus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_source_key;
        break;
      }

      // optional uint64 source_key = 3;
      case 3: {
        if (tag == 24) {
         parse_source_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &source_key_)));
          set_has_source_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  return false;
#undef DO_
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional float xp_bonus = 2;
  if (has_xp_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->xp_bonus(), output);
  }

  // optional uint64 source_key = 3;
  if (has_source_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->source_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTALobbyMember.CDOTALobbyMemberXPBonus)
}

::google::protobuf::uint8* CDOTALobbyMember_CDOTALobbyMemberXPBonus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional float xp_bonus = 2;
  if (has_xp_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->xp_bonus(), target);
  }

  // optional uint64 source_key = 3;
  if (has_source_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->source_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  return target;
}

int CDOTALobbyMember_CDOTALobbyMemberXPBonus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional float xp_bonus = 2;
    if (has_xp_bonus()) {
      total_size += 1 + 4;
    }

    // optional uint64 source_key = 3;
    if (has_source_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->source_key());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTALobbyMember_CDOTALobbyMemberXPBonus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTALobbyMember_CDOTALobbyMemberXPBonus>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::MergeFrom(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_xp_bonus()) {
      set_xp_bonus(from.xp_bonus());
    }
    if (from.has_source_key()) {
      set_source_key(from.source_key());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::CopyFrom(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTALobbyMember_CDOTALobbyMemberXPBonus::IsInitialized() const {

  return true;
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::Swap(CDOTALobbyMember_CDOTALobbyMemberXPBonus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTALobbyMember_CDOTALobbyMemberXPBonus::InternalSwap(CDOTALobbyMember_CDOTALobbyMemberXPBonus* other) {
  std::swap(type_, other->type_);
  std::swap(xp_bonus_, other->xp_bonus_);
  std::swap(source_key_, other->source_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTALobbyMember_CDOTALobbyMemberXPBonus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTALobbyMember_CDOTALobbyMemberXPBonus_descriptor_;
  metadata.reflection = CDOTALobbyMember_CDOTALobbyMemberXPBonus_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTALobbyMember::kIdFieldNumber;
const int CDOTALobbyMember::kHeroIdFieldNumber;
const int CDOTALobbyMember::kTeamFieldNumber;
const int CDOTALobbyMember::kNameFieldNumber;
const int CDOTALobbyMember::kSlotFieldNumber;
const int CDOTALobbyMember::kPartyIdFieldNumber;
const int CDOTALobbyMember::kMetaLevelFieldNumber;
const int CDOTALobbyMember::kMetaXpFieldNumber;
const int CDOTALobbyMember::kMetaXpAwardedFieldNumber;
const int CDOTALobbyMember::kLeaverStatusFieldNumber;
const int CDOTALobbyMember::kLeaverActionsFieldNumber;
const int CDOTALobbyMember::kChannelFieldNumber;
const int CDOTALobbyMember::kPrizeDefIndexFieldNumber;
const int CDOTALobbyMember::kDisabledHeroIdFieldNumber;
const int CDOTALobbyMember::kPartnerAccountTypeFieldNumber;
const int CDOTALobbyMember::kEnabledHeroIdFieldNumber;
const int CDOTALobbyMember::kCoachTeamFieldNumber;
const int CDOTALobbyMember::kNexonPcBangNoFieldNumber;
const int CDOTALobbyMember::kNexonPcBangNameFieldNumber;
const int CDOTALobbyMember::kXpBonusesFieldNumber;
const int CDOTALobbyMember::kRankChangeFieldNumber;
const int CDOTALobbyMember::kCameramanFieldNumber;
const int CDOTALobbyMember::kCustomGameProductIdsFieldNumber;
#endif  // !_MSC_VER

CDOTALobbyMember::CDOTALobbyMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTALobbyMember)
}

void CDOTALobbyMember::InitAsDefaultInstance() {
}

CDOTALobbyMember::CDOTALobbyMember(const CDOTALobbyMember& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTALobbyMember)
}

void CDOTALobbyMember::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  hero_id_ = 0u;
  team_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slot_ = 0u;
  party_id_ = GOOGLE_ULONGLONG(0);
  meta_level_ = 0u;
  meta_xp_ = 0u;
  meta_xp_awarded_ = 0u;
  leaver_status_ = 0;
  leaver_actions_ = 0u;
  channel_ = 0u;
  prize_def_index_ = 0u;
  partner_account_type_ = 0;
  coach_team_ = 0;
  nexon_pc_bang_no_ = 0u;
  nexon_pc_bang_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rank_change_ = 0;
  cameraman_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTALobbyMember::~CDOTALobbyMember() {
  // @@protoc_insertion_point(destructor:CDOTALobbyMember)
  SharedDtor();
}

void CDOTALobbyMember::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nexon_pc_bang_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CDOTALobbyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTALobbyMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTALobbyMember_descriptor_;
}

const CDOTALobbyMember& CDOTALobbyMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CDOTALobbyMember* CDOTALobbyMember::default_instance_ = NULL;

CDOTALobbyMember* CDOTALobbyMember::New(::google::protobuf::Arena* arena) const {
  CDOTALobbyMember* n = new CDOTALobbyMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTALobbyMember::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CDOTALobbyMember*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(id_, team_);
    ZR_(party_id_, meta_xp_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 24320u) {
    ZR_(meta_xp_awarded_, prize_def_index_);
    partner_account_type_ = 0;
  }
  if (_has_bits_[16 / 32] & 3604480u) {
    ZR_(nexon_pc_bang_no_, rank_change_);
    coach_team_ = 0;
    if (has_nexon_pc_bang_name()) {
      nexon_pc_bang_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    cameraman_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  disabled_hero_id_.Clear();
  enabled_hero_id_.Clear();
  xp_bonuses_.Clear();
  custom_game_product_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTALobbyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTALobbyMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint32 hero_id = 2;
      case 2: {
        if (tag == 16) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_team;
        break;
      }

      // optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 3: {
        if (tag == 24) {
         parse_team:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_GC_TEAM_IsValid(value)) {
            set_team(static_cast< ::DOTA_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (tag == 50) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDOTALobbyMember.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_slot;
        break;
      }

      // optional uint32 slot = 7;
      case 7: {
        if (tag == 56) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_party_id;
        break;
      }

      // optional uint64 party_id = 12;
      case 12: {
        if (tag == 96) {
         parse_party_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
          set_has_party_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_meta_level;
        break;
      }

      // optional uint32 meta_level = 13;
      case 13: {
        if (tag == 104) {
         parse_meta_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meta_level_)));
          set_has_meta_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_meta_xp;
        break;
      }

      // optional uint32 meta_xp = 14;
      case 14: {
        if (tag == 112) {
         parse_meta_xp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meta_xp_)));
          set_has_meta_xp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_meta_xp_awarded;
        break;
      }

      // optional uint32 meta_xp_awarded = 15;
      case 15: {
        if (tag == 120) {
         parse_meta_xp_awarded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meta_xp_awarded_)));
          set_has_meta_xp_awarded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_leaver_status;
        break;
      }

      // optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
      case 16: {
        if (tag == 128) {
         parse_leaver_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTALeaverStatus_t_IsValid(value)) {
            set_leaver_status(static_cast< ::DOTALeaverStatus_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_channel;
        break;
      }

      // optional uint32 channel = 17;
      case 17: {
        if (tag == 136) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_prize_def_index;
        break;
      }

      // optional uint32 prize_def_index = 18;
      case 18: {
        if (tag == 144) {
         parse_prize_def_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prize_def_index_)));
          set_has_prize_def_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_disabled_hero_id;
        break;
      }

      // repeated uint32 disabled_hero_id = 20;
      case 20: {
        if (tag == 160) {
         parse_disabled_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 160, input, this->mutable_disabled_hero_id())));
        } else if (tag == 162) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_disabled_hero_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_disabled_hero_id;
        if (input->ExpectTag(168)) goto parse_partner_account_type;
        break;
      }

      // optional .PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
      case 21: {
        if (tag == 168) {
         parse_partner_account_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PartnerAccountType_IsValid(value)) {
            set_partner_account_type(static_cast< ::PartnerAccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_enabled_hero_id;
        break;
      }

      // repeated uint32 enabled_hero_id = 22;
      case 22: {
        if (tag == 176) {
         parse_enabled_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 176, input, this->mutable_enabled_hero_id())));
        } else if (tag == 178) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_enabled_hero_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_enabled_hero_id;
        if (input->ExpectTag(184)) goto parse_coach_team;
        break;
      }

      // optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 23: {
        if (tag == 184) {
         parse_coach_team:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_GC_TEAM_IsValid(value)) {
            set_coach_team(static_cast< ::DOTA_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(23, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_nexon_pc_bang_no;
        break;
      }

      // optional uint32 nexon_pc_bang_no = 24;
      case 24: {
        if (tag == 192) {
         parse_nexon_pc_bang_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nexon_pc_bang_no_)));
          set_has_nexon_pc_bang_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_nexon_pc_bang_name;
        break;
      }

      // optional string nexon_pc_bang_name = 25;
      case 25: {
        if (tag == 202) {
         parse_nexon_pc_bang_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nexon_pc_bang_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nexon_pc_bang_name().data(), this->nexon_pc_bang_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDOTALobbyMember.nexon_pc_bang_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_xp_bonuses;
        break;
      }

      // repeated .CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
      case 27: {
        if (tag == 218) {
         parse_xp_bonuses:
          DO_(input->IncrementRecursionDepth());
         parse_loop_xp_bonuses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_xp_bonuses()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_loop_xp_bonuses;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(224)) goto parse_leaver_actions;
        break;
      }

      // optional uint32 leaver_actions = 28;
      case 28: {
        if (tag == 224) {
         parse_leaver_actions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaver_actions_)));
          set_has_leaver_actions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_rank_change;
        break;
      }

      // optional sint32 rank_change = 29;
      case 29: {
        if (tag == 232) {
         parse_rank_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rank_change_)));
          set_has_rank_change();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_cameraman;
        break;
      }

      // optional bool cameraman = 30;
      case 30: {
        if (tag == 240) {
         parse_cameraman:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cameraman_)));
          set_has_cameraman();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_custom_game_product_ids;
        break;
      }

      // repeated uint32 custom_game_product_ids = 31;
      case 31: {
        if (tag == 248) {
         parse_custom_game_product_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 248, input, this->mutable_custom_game_product_ids())));
        } else if (tag == 250) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_custom_game_product_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_custom_game_product_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTALobbyMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTALobbyMember)
  return false;
#undef DO_
}

void CDOTALobbyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTALobbyMember)
  // optional fixed64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->id(), output);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->team(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDOTALobbyMember.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // optional uint32 slot = 7;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->slot(), output);
  }

  // optional uint64 party_id = 12;
  if (has_party_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->party_id(), output);
  }

  // optional uint32 meta_level = 13;
  if (has_meta_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->meta_level(), output);
  }

  // optional uint32 meta_xp = 14;
  if (has_meta_xp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->meta_xp(), output);
  }

  // optional uint32 meta_xp_awarded = 15;
  if (has_meta_xp_awarded()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->meta_xp_awarded(), output);
  }

  // optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
  if (has_leaver_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->leaver_status(), output);
  }

  // optional uint32 channel = 17;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->channel(), output);
  }

  // optional uint32 prize_def_index = 18;
  if (has_prize_def_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->prize_def_index(), output);
  }

  // repeated uint32 disabled_hero_id = 20;
  for (int i = 0; i < this->disabled_hero_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      20, this->disabled_hero_id(i), output);
  }

  // optional .PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
  if (has_partner_account_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->partner_account_type(), output);
  }

  // repeated uint32 enabled_hero_id = 22;
  for (int i = 0; i < this->enabled_hero_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      22, this->enabled_hero_id(i), output);
  }

  // optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (has_coach_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->coach_team(), output);
  }

  // optional uint32 nexon_pc_bang_no = 24;
  if (has_nexon_pc_bang_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->nexon_pc_bang_no(), output);
  }

  // optional string nexon_pc_bang_name = 25;
  if (has_nexon_pc_bang_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nexon_pc_bang_name().data(), this->nexon_pc_bang_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDOTALobbyMember.nexon_pc_bang_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->nexon_pc_bang_name(), output);
  }

  // repeated .CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
  for (unsigned int i = 0, n = this->xp_bonuses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->xp_bonuses(i), output);
  }

  // optional uint32 leaver_actions = 28;
  if (has_leaver_actions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->leaver_actions(), output);
  }

  // optional sint32 rank_change = 29;
  if (has_rank_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(29, this->rank_change(), output);
  }

  // optional bool cameraman = 30;
  if (has_cameraman()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->cameraman(), output);
  }

  // repeated uint32 custom_game_product_ids = 31;
  for (int i = 0; i < this->custom_game_product_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      31, this->custom_game_product_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTALobbyMember)
}

::google::protobuf::uint8* CDOTALobbyMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTALobbyMember)
  // optional fixed64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->id(), target);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->team(), target);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDOTALobbyMember.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional uint32 slot = 7;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->slot(), target);
  }

  // optional uint64 party_id = 12;
  if (has_party_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->party_id(), target);
  }

  // optional uint32 meta_level = 13;
  if (has_meta_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->meta_level(), target);
  }

  // optional uint32 meta_xp = 14;
  if (has_meta_xp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->meta_xp(), target);
  }

  // optional uint32 meta_xp_awarded = 15;
  if (has_meta_xp_awarded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->meta_xp_awarded(), target);
  }

  // optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
  if (has_leaver_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->leaver_status(), target);
  }

  // optional uint32 channel = 17;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->channel(), target);
  }

  // optional uint32 prize_def_index = 18;
  if (has_prize_def_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->prize_def_index(), target);
  }

  // repeated uint32 disabled_hero_id = 20;
  for (int i = 0; i < this->disabled_hero_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(20, this->disabled_hero_id(i), target);
  }

  // optional .PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
  if (has_partner_account_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->partner_account_type(), target);
  }

  // repeated uint32 enabled_hero_id = 22;
  for (int i = 0; i < this->enabled_hero_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(22, this->enabled_hero_id(i), target);
  }

  // optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (has_coach_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->coach_team(), target);
  }

  // optional uint32 nexon_pc_bang_no = 24;
  if (has_nexon_pc_bang_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->nexon_pc_bang_no(), target);
  }

  // optional string nexon_pc_bang_name = 25;
  if (has_nexon_pc_bang_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nexon_pc_bang_name().data(), this->nexon_pc_bang_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDOTALobbyMember.nexon_pc_bang_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->nexon_pc_bang_name(), target);
  }

  // repeated .CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
  for (unsigned int i = 0, n = this->xp_bonuses_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->xp_bonuses(i), target);
  }

  // optional uint32 leaver_actions = 28;
  if (has_leaver_actions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->leaver_actions(), target);
  }

  // optional sint32 rank_change = 29;
  if (has_rank_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(29, this->rank_change(), target);
  }

  // optional bool cameraman = 30;
  if (has_cameraman()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->cameraman(), target);
  }

  // repeated uint32 custom_game_product_ids = 31;
  for (int i = 0; i < this->custom_game_product_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(31, this->custom_game_product_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTALobbyMember)
  return target;
}

int CDOTALobbyMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional fixed64 id = 1;
    if (has_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 slot = 7;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

    // optional uint64 party_id = 12;
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }

    // optional uint32 meta_level = 13;
    if (has_meta_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->meta_level());
    }

    // optional uint32 meta_xp = 14;
    if (has_meta_xp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->meta_xp());
    }

  }
  if (_has_bits_[8 / 32] & 24320u) {
    // optional uint32 meta_xp_awarded = 15;
    if (has_meta_xp_awarded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->meta_xp_awarded());
    }

    // optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
    if (has_leaver_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->leaver_status());
    }

    // optional uint32 leaver_actions = 28;
    if (has_leaver_actions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaver_actions());
    }

    // optional uint32 channel = 17;
    if (has_channel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional uint32 prize_def_index = 18;
    if (has_prize_def_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prize_def_index());
    }

    // optional .PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
    if (has_partner_account_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->partner_account_type());
    }

  }
  if (_has_bits_[16 / 32] & 3604480u) {
    // optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (has_coach_team()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->coach_team());
    }

    // optional uint32 nexon_pc_bang_no = 24;
    if (has_nexon_pc_bang_no()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nexon_pc_bang_no());
    }

    // optional string nexon_pc_bang_name = 25;
    if (has_nexon_pc_bang_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nexon_pc_bang_name());
    }

    // optional sint32 rank_change = 29;
    if (has_rank_change()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rank_change());
    }

    // optional bool cameraman = 30;
    if (has_cameraman()) {
      total_size += 2 + 1;
    }

  }
  // repeated uint32 disabled_hero_id = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->disabled_hero_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->disabled_hero_id(i));
    }
    total_size += 2 * this->disabled_hero_id_size() + data_size;
  }

  // repeated uint32 enabled_hero_id = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->enabled_hero_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->enabled_hero_id(i));
    }
    total_size += 2 * this->enabled_hero_id_size() + data_size;
  }

  // repeated .CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
  total_size += 2 * this->xp_bonuses_size();
  for (int i = 0; i < this->xp_bonuses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xp_bonuses(i));
  }

  // repeated uint32 custom_game_product_ids = 31;
  {
    int data_size = 0;
    for (int i = 0; i < this->custom_game_product_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->custom_game_product_ids(i));
    }
    total_size += 2 * this->custom_game_product_ids_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTALobbyMember::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTALobbyMember* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTALobbyMember>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTALobbyMember::MergeFrom(const CDOTALobbyMember& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  disabled_hero_id_.MergeFrom(from.disabled_hero_id_);
  enabled_hero_id_.MergeFrom(from.enabled_hero_id_);
  xp_bonuses_.MergeFrom(from.xp_bonuses_);
  custom_game_product_ids_.MergeFrom(from.custom_game_product_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_party_id()) {
      set_party_id(from.party_id());
    }
    if (from.has_meta_level()) {
      set_meta_level(from.meta_level());
    }
    if (from.has_meta_xp()) {
      set_meta_xp(from.meta_xp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_meta_xp_awarded()) {
      set_meta_xp_awarded(from.meta_xp_awarded());
    }
    if (from.has_leaver_status()) {
      set_leaver_status(from.leaver_status());
    }
    if (from.has_leaver_actions()) {
      set_leaver_actions(from.leaver_actions());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_prize_def_index()) {
      set_prize_def_index(from.prize_def_index());
    }
    if (from.has_partner_account_type()) {
      set_partner_account_type(from.partner_account_type());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_coach_team()) {
      set_coach_team(from.coach_team());
    }
    if (from.has_nexon_pc_bang_no()) {
      set_nexon_pc_bang_no(from.nexon_pc_bang_no());
    }
    if (from.has_nexon_pc_bang_name()) {
      set_has_nexon_pc_bang_name();
      nexon_pc_bang_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nexon_pc_bang_name_);
    }
    if (from.has_rank_change()) {
      set_rank_change(from.rank_change());
    }
    if (from.has_cameraman()) {
      set_cameraman(from.cameraman());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTALobbyMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTALobbyMember::CopyFrom(const CDOTALobbyMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTALobbyMember::IsInitialized() const {

  return true;
}

void CDOTALobbyMember::Swap(CDOTALobbyMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTALobbyMember::InternalSwap(CDOTALobbyMember* other) {
  std::swap(id_, other->id_);
  std::swap(hero_id_, other->hero_id_);
  std::swap(team_, other->team_);
  name_.Swap(&other->name_);
  std::swap(slot_, other->slot_);
  std::swap(party_id_, other->party_id_);
  std::swap(meta_level_, other->meta_level_);
  std::swap(meta_xp_, other->meta_xp_);
  std::swap(meta_xp_awarded_, other->meta_xp_awarded_);
  std::swap(leaver_status_, other->leaver_status_);
  std::swap(leaver_actions_, other->leaver_actions_);
  std::swap(channel_, other->channel_);
  std::swap(prize_def_index_, other->prize_def_index_);
  disabled_hero_id_.UnsafeArenaSwap(&other->disabled_hero_id_);
  std::swap(partner_account_type_, other->partner_account_type_);
  enabled_hero_id_.UnsafeArenaSwap(&other->enabled_hero_id_);
  std::swap(coach_team_, other->coach_team_);
  std::swap(nexon_pc_bang_no_, other->nexon_pc_bang_no_);
  nexon_pc_bang_name_.Swap(&other->nexon_pc_bang_name_);
  xp_bonuses_.UnsafeArenaSwap(&other->xp_bonuses_);
  std::swap(rank_change_, other->rank_change_);
  std::swap(cameraman_, other->cameraman_);
  custom_game_product_ids_.UnsafeArenaSwap(&other->custom_game_product_ids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTALobbyMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTALobbyMember_descriptor_;
  metadata.reflection = CDOTALobbyMember_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTALobbyMember_CDOTALobbyMemberXPBonus

// optional uint32 type = 1;
bool CDOTALobbyMember_CDOTALobbyMemberXPBonus::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_type() {
  type_ = 0u;
  clear_has_type();
}
 ::google::protobuf::uint32 CDOTALobbyMember_CDOTALobbyMemberXPBonus::type() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.CDOTALobbyMemberXPBonus.type)
  return type_;
}
 void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.CDOTALobbyMemberXPBonus.type)
}

// optional float xp_bonus = 2;
bool CDOTALobbyMember_CDOTALobbyMemberXPBonus::has_xp_bonus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_has_xp_bonus() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_has_xp_bonus() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_xp_bonus() {
  xp_bonus_ = 0;
  clear_has_xp_bonus();
}
 float CDOTALobbyMember_CDOTALobbyMemberXPBonus::xp_bonus() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.CDOTALobbyMemberXPBonus.xp_bonus)
  return xp_bonus_;
}
 void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_xp_bonus(float value) {
  set_has_xp_bonus();
  xp_bonus_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.CDOTALobbyMemberXPBonus.xp_bonus)
}

// optional uint64 source_key = 3;
bool CDOTALobbyMember_CDOTALobbyMemberXPBonus::has_source_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_has_source_key() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_has_source_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_source_key() {
  source_key_ = GOOGLE_ULONGLONG(0);
  clear_has_source_key();
}
 ::google::protobuf::uint64 CDOTALobbyMember_CDOTALobbyMemberXPBonus::source_key() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.CDOTALobbyMemberXPBonus.source_key)
  return source_key_;
}
 void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_source_key(::google::protobuf::uint64 value) {
  set_has_source_key();
  source_key_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.CDOTALobbyMemberXPBonus.source_key)
}

// -------------------------------------------------------------------

// CDOTALobbyMember

// optional fixed64 id = 1;
bool CDOTALobbyMember::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTALobbyMember::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTALobbyMember::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTALobbyMember::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 CDOTALobbyMember::id() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.id)
  return id_;
}
 void CDOTALobbyMember::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.id)
}

// optional uint32 hero_id = 2;
bool CDOTALobbyMember::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTALobbyMember::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTALobbyMember::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTALobbyMember::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
 ::google::protobuf::uint32 CDOTALobbyMember::hero_id() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.hero_id)
  return hero_id_;
}
 void CDOTALobbyMember::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.hero_id)
}

// optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
bool CDOTALobbyMember::has_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTALobbyMember::set_has_team() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTALobbyMember::clear_has_team() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTALobbyMember::clear_team() {
  team_ = 0;
  clear_has_team();
}
 ::DOTA_GC_TEAM CDOTALobbyMember::team() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.team)
  return static_cast< ::DOTA_GC_TEAM >(team_);
}
 void CDOTALobbyMember::set_team(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.team)
}

// optional string name = 6;
bool CDOTALobbyMember::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTALobbyMember::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTALobbyMember::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTALobbyMember::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& CDOTALobbyMember::name() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDOTALobbyMember::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.name)
}
 void CDOTALobbyMember::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDOTALobbyMember.name)
}
 void CDOTALobbyMember::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDOTALobbyMember.name)
}
 ::std::string* CDOTALobbyMember::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CDOTALobbyMember.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDOTALobbyMember::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDOTALobbyMember::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CDOTALobbyMember.name)
}

// optional uint32 slot = 7;
bool CDOTALobbyMember::has_slot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTALobbyMember::set_has_slot() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTALobbyMember::clear_has_slot() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTALobbyMember::clear_slot() {
  slot_ = 0u;
  clear_has_slot();
}
 ::google::protobuf::uint32 CDOTALobbyMember::slot() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.slot)
  return slot_;
}
 void CDOTALobbyMember::set_slot(::google::protobuf::uint32 value) {
  set_has_slot();
  slot_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.slot)
}

// optional uint64 party_id = 12;
bool CDOTALobbyMember::has_party_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTALobbyMember::set_has_party_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTALobbyMember::clear_has_party_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTALobbyMember::clear_party_id() {
  party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_party_id();
}
 ::google::protobuf::uint64 CDOTALobbyMember::party_id() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.party_id)
  return party_id_;
}
 void CDOTALobbyMember::set_party_id(::google::protobuf::uint64 value) {
  set_has_party_id();
  party_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.party_id)
}

// optional uint32 meta_level = 13;
bool CDOTALobbyMember::has_meta_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CDOTALobbyMember::set_has_meta_level() {
  _has_bits_[0] |= 0x00000040u;
}
void CDOTALobbyMember::clear_has_meta_level() {
  _has_bits_[0] &= ~0x00000040u;
}
void CDOTALobbyMember::clear_meta_level() {
  meta_level_ = 0u;
  clear_has_meta_level();
}
 ::google::protobuf::uint32 CDOTALobbyMember::meta_level() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.meta_level)
  return meta_level_;
}
 void CDOTALobbyMember::set_meta_level(::google::protobuf::uint32 value) {
  set_has_meta_level();
  meta_level_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.meta_level)
}

// optional uint32 meta_xp = 14;
bool CDOTALobbyMember::has_meta_xp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CDOTALobbyMember::set_has_meta_xp() {
  _has_bits_[0] |= 0x00000080u;
}
void CDOTALobbyMember::clear_has_meta_xp() {
  _has_bits_[0] &= ~0x00000080u;
}
void CDOTALobbyMember::clear_meta_xp() {
  meta_xp_ = 0u;
  clear_has_meta_xp();
}
 ::google::protobuf::uint32 CDOTALobbyMember::meta_xp() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.meta_xp)
  return meta_xp_;
}
 void CDOTALobbyMember::set_meta_xp(::google::protobuf::uint32 value) {
  set_has_meta_xp();
  meta_xp_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.meta_xp)
}

// optional uint32 meta_xp_awarded = 15;
bool CDOTALobbyMember::has_meta_xp_awarded() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CDOTALobbyMember::set_has_meta_xp_awarded() {
  _has_bits_[0] |= 0x00000100u;
}
void CDOTALobbyMember::clear_has_meta_xp_awarded() {
  _has_bits_[0] &= ~0x00000100u;
}
void CDOTALobbyMember::clear_meta_xp_awarded() {
  meta_xp_awarded_ = 0u;
  clear_has_meta_xp_awarded();
}
 ::google::protobuf::uint32 CDOTALobbyMember::meta_xp_awarded() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.meta_xp_awarded)
  return meta_xp_awarded_;
}
 void CDOTALobbyMember::set_meta_xp_awarded(::google::protobuf::uint32 value) {
  set_has_meta_xp_awarded();
  meta_xp_awarded_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.meta_xp_awarded)
}

// optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
bool CDOTALobbyMember::has_leaver_status() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CDOTALobbyMember::set_has_leaver_status() {
  _has_bits_[0] |= 0x00000200u;
}
void CDOTALobbyMember::clear_has_leaver_status() {
  _has_bits_[0] &= ~0x00000200u;
}
void CDOTALobbyMember::clear_leaver_status() {
  leaver_status_ = 0;
  clear_has_leaver_status();
}
 ::DOTALeaverStatus_t CDOTALobbyMember::leaver_status() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.leaver_status)
  return static_cast< ::DOTALeaverStatus_t >(leaver_status_);
}
 void CDOTALobbyMember::set_leaver_status(::DOTALeaverStatus_t value) {
  assert(::DOTALeaverStatus_t_IsValid(value));
  set_has_leaver_status();
  leaver_status_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.leaver_status)
}

// optional uint32 leaver_actions = 28;
bool CDOTALobbyMember::has_leaver_actions() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CDOTALobbyMember::set_has_leaver_actions() {
  _has_bits_[0] |= 0x00000400u;
}
void CDOTALobbyMember::clear_has_leaver_actions() {
  _has_bits_[0] &= ~0x00000400u;
}
void CDOTALobbyMember::clear_leaver_actions() {
  leaver_actions_ = 0u;
  clear_has_leaver_actions();
}
 ::google::protobuf::uint32 CDOTALobbyMember::leaver_actions() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.leaver_actions)
  return leaver_actions_;
}
 void CDOTALobbyMember::set_leaver_actions(::google::protobuf::uint32 value) {
  set_has_leaver_actions();
  leaver_actions_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.leaver_actions)
}

// optional uint32 channel = 17;
bool CDOTALobbyMember::has_channel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CDOTALobbyMember::set_has_channel() {
  _has_bits_[0] |= 0x00000800u;
}
void CDOTALobbyMember::clear_has_channel() {
  _has_bits_[0] &= ~0x00000800u;
}
void CDOTALobbyMember::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
 ::google::protobuf::uint32 CDOTALobbyMember::channel() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.channel)
  return channel_;
}
 void CDOTALobbyMember::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.channel)
}

// optional uint32 prize_def_index = 18;
bool CDOTALobbyMember::has_prize_def_index() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CDOTALobbyMember::set_has_prize_def_index() {
  _has_bits_[0] |= 0x00001000u;
}
void CDOTALobbyMember::clear_has_prize_def_index() {
  _has_bits_[0] &= ~0x00001000u;
}
void CDOTALobbyMember::clear_prize_def_index() {
  prize_def_index_ = 0u;
  clear_has_prize_def_index();
}
 ::google::protobuf::uint32 CDOTALobbyMember::prize_def_index() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.prize_def_index)
  return prize_def_index_;
}
 void CDOTALobbyMember::set_prize_def_index(::google::protobuf::uint32 value) {
  set_has_prize_def_index();
  prize_def_index_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.prize_def_index)
}

// repeated uint32 disabled_hero_id = 20;
int CDOTALobbyMember::disabled_hero_id_size() const {
  return disabled_hero_id_.size();
}
void CDOTALobbyMember::clear_disabled_hero_id() {
  disabled_hero_id_.Clear();
}
 ::google::protobuf::uint32 CDOTALobbyMember::disabled_hero_id(int index) const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.disabled_hero_id)
  return disabled_hero_id_.Get(index);
}
 void CDOTALobbyMember::set_disabled_hero_id(int index, ::google::protobuf::uint32 value) {
  disabled_hero_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.disabled_hero_id)
}
 void CDOTALobbyMember::add_disabled_hero_id(::google::protobuf::uint32 value) {
  disabled_hero_id_.Add(value);
  // @@protoc_insertion_point(field_add:CDOTALobbyMember.disabled_hero_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTALobbyMember::disabled_hero_id() const {
  // @@protoc_insertion_point(field_list:CDOTALobbyMember.disabled_hero_id)
  return disabled_hero_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTALobbyMember::mutable_disabled_hero_id() {
  // @@protoc_insertion_point(field_mutable_list:CDOTALobbyMember.disabled_hero_id)
  return &disabled_hero_id_;
}

// optional .PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
bool CDOTALobbyMember::has_partner_account_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CDOTALobbyMember::set_has_partner_account_type() {
  _has_bits_[0] |= 0x00004000u;
}
void CDOTALobbyMember::clear_has_partner_account_type() {
  _has_bits_[0] &= ~0x00004000u;
}
void CDOTALobbyMember::clear_partner_account_type() {
  partner_account_type_ = 0;
  clear_has_partner_account_type();
}
 ::PartnerAccountType CDOTALobbyMember::partner_account_type() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.partner_account_type)
  return static_cast< ::PartnerAccountType >(partner_account_type_);
}
 void CDOTALobbyMember::set_partner_account_type(::PartnerAccountType value) {
  assert(::PartnerAccountType_IsValid(value));
  set_has_partner_account_type();
  partner_account_type_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.partner_account_type)
}

// repeated uint32 enabled_hero_id = 22;
int CDOTALobbyMember::enabled_hero_id_size() const {
  return enabled_hero_id_.size();
}
void CDOTALobbyMember::clear_enabled_hero_id() {
  enabled_hero_id_.Clear();
}
 ::google::protobuf::uint32 CDOTALobbyMember::enabled_hero_id(int index) const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.enabled_hero_id)
  return enabled_hero_id_.Get(index);
}
 void CDOTALobbyMember::set_enabled_hero_id(int index, ::google::protobuf::uint32 value) {
  enabled_hero_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.enabled_hero_id)
}
 void CDOTALobbyMember::add_enabled_hero_id(::google::protobuf::uint32 value) {
  enabled_hero_id_.Add(value);
  // @@protoc_insertion_point(field_add:CDOTALobbyMember.enabled_hero_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTALobbyMember::enabled_hero_id() const {
  // @@protoc_insertion_point(field_list:CDOTALobbyMember.enabled_hero_id)
  return enabled_hero_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTALobbyMember::mutable_enabled_hero_id() {
  // @@protoc_insertion_point(field_mutable_list:CDOTALobbyMember.enabled_hero_id)
  return &enabled_hero_id_;
}

// optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_GOOD_GUYS];
bool CDOTALobbyMember::has_coach_team() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CDOTALobbyMember::set_has_coach_team() {
  _has_bits_[0] |= 0x00010000u;
}
void CDOTALobbyMember::clear_has_coach_team() {
  _has_bits_[0] &= ~0x00010000u;
}
void CDOTALobbyMember::clear_coach_team() {
  coach_team_ = 0;
  clear_has_coach_team();
}
 ::DOTA_GC_TEAM CDOTALobbyMember::coach_team() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.coach_team)
  return static_cast< ::DOTA_GC_TEAM >(coach_team_);
}
 void CDOTALobbyMember::set_coach_team(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  set_has_coach_team();
  coach_team_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.coach_team)
}

// optional uint32 nexon_pc_bang_no = 24;
bool CDOTALobbyMember::has_nexon_pc_bang_no() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CDOTALobbyMember::set_has_nexon_pc_bang_no() {
  _has_bits_[0] |= 0x00020000u;
}
void CDOTALobbyMember::clear_has_nexon_pc_bang_no() {
  _has_bits_[0] &= ~0x00020000u;
}
void CDOTALobbyMember::clear_nexon_pc_bang_no() {
  nexon_pc_bang_no_ = 0u;
  clear_has_nexon_pc_bang_no();
}
 ::google::protobuf::uint32 CDOTALobbyMember::nexon_pc_bang_no() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.nexon_pc_bang_no)
  return nexon_pc_bang_no_;
}
 void CDOTALobbyMember::set_nexon_pc_bang_no(::google::protobuf::uint32 value) {
  set_has_nexon_pc_bang_no();
  nexon_pc_bang_no_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.nexon_pc_bang_no)
}

// optional string nexon_pc_bang_name = 25;
bool CDOTALobbyMember::has_nexon_pc_bang_name() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CDOTALobbyMember::set_has_nexon_pc_bang_name() {
  _has_bits_[0] |= 0x00040000u;
}
void CDOTALobbyMember::clear_has_nexon_pc_bang_name() {
  _has_bits_[0] &= ~0x00040000u;
}
void CDOTALobbyMember::clear_nexon_pc_bang_name() {
  nexon_pc_bang_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nexon_pc_bang_name();
}
 const ::std::string& CDOTALobbyMember::nexon_pc_bang_name() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.nexon_pc_bang_name)
  return nexon_pc_bang_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDOTALobbyMember::set_nexon_pc_bang_name(const ::std::string& value) {
  set_has_nexon_pc_bang_name();
  nexon_pc_bang_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.nexon_pc_bang_name)
}
 void CDOTALobbyMember::set_nexon_pc_bang_name(const char* value) {
  set_has_nexon_pc_bang_name();
  nexon_pc_bang_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDOTALobbyMember.nexon_pc_bang_name)
}
 void CDOTALobbyMember::set_nexon_pc_bang_name(const char* value, size_t size) {
  set_has_nexon_pc_bang_name();
  nexon_pc_bang_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDOTALobbyMember.nexon_pc_bang_name)
}
 ::std::string* CDOTALobbyMember::mutable_nexon_pc_bang_name() {
  set_has_nexon_pc_bang_name();
  // @@protoc_insertion_point(field_mutable:CDOTALobbyMember.nexon_pc_bang_name)
  return nexon_pc_bang_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDOTALobbyMember::release_nexon_pc_bang_name() {
  clear_has_nexon_pc_bang_name();
  return nexon_pc_bang_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDOTALobbyMember::set_allocated_nexon_pc_bang_name(::std::string* nexon_pc_bang_name) {
  if (nexon_pc_bang_name != NULL) {
    set_has_nexon_pc_bang_name();
  } else {
    clear_has_nexon_pc_bang_name();
  }
  nexon_pc_bang_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nexon_pc_bang_name);
  // @@protoc_insertion_point(field_set_allocated:CDOTALobbyMember.nexon_pc_bang_name)
}

// repeated .CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
int CDOTALobbyMember::xp_bonuses_size() const {
  return xp_bonuses_.size();
}
void CDOTALobbyMember::clear_xp_bonuses() {
  xp_bonuses_.Clear();
}
const ::CDOTALobbyMember_CDOTALobbyMemberXPBonus& CDOTALobbyMember::xp_bonuses(int index) const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.xp_bonuses)
  return xp_bonuses_.Get(index);
}
::CDOTALobbyMember_CDOTALobbyMemberXPBonus* CDOTALobbyMember::mutable_xp_bonuses(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTALobbyMember.xp_bonuses)
  return xp_bonuses_.Mutable(index);
}
::CDOTALobbyMember_CDOTALobbyMemberXPBonus* CDOTALobbyMember::add_xp_bonuses() {
  // @@protoc_insertion_point(field_add:CDOTALobbyMember.xp_bonuses)
  return xp_bonuses_.Add();
}
::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember_CDOTALobbyMemberXPBonus >*
CDOTALobbyMember::mutable_xp_bonuses() {
  // @@protoc_insertion_point(field_mutable_list:CDOTALobbyMember.xp_bonuses)
  return &xp_bonuses_;
}
const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember_CDOTALobbyMemberXPBonus >&
CDOTALobbyMember::xp_bonuses() const {
  // @@protoc_insertion_point(field_list:CDOTALobbyMember.xp_bonuses)
  return xp_bonuses_;
}

// optional sint32 rank_change = 29;
bool CDOTALobbyMember::has_rank_change() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CDOTALobbyMember::set_has_rank_change() {
  _has_bits_[0] |= 0x00100000u;
}
void CDOTALobbyMember::clear_has_rank_change() {
  _has_bits_[0] &= ~0x00100000u;
}
void CDOTALobbyMember::clear_rank_change() {
  rank_change_ = 0;
  clear_has_rank_change();
}
 ::google::protobuf::int32 CDOTALobbyMember::rank_change() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.rank_change)
  return rank_change_;
}
 void CDOTALobbyMember::set_rank_change(::google::protobuf::int32 value) {
  set_has_rank_change();
  rank_change_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.rank_change)
}

// optional bool cameraman = 30;
bool CDOTALobbyMember::has_cameraman() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CDOTALobbyMember::set_has_cameraman() {
  _has_bits_[0] |= 0x00200000u;
}
void CDOTALobbyMember::clear_has_cameraman() {
  _has_bits_[0] &= ~0x00200000u;
}
void CDOTALobbyMember::clear_cameraman() {
  cameraman_ = false;
  clear_has_cameraman();
}
 bool CDOTALobbyMember::cameraman() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.cameraman)
  return cameraman_;
}
 void CDOTALobbyMember::set_cameraman(bool value) {
  set_has_cameraman();
  cameraman_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.cameraman)
}

// repeated uint32 custom_game_product_ids = 31;
int CDOTALobbyMember::custom_game_product_ids_size() const {
  return custom_game_product_ids_.size();
}
void CDOTALobbyMember::clear_custom_game_product_ids() {
  custom_game_product_ids_.Clear();
}
 ::google::protobuf::uint32 CDOTALobbyMember::custom_game_product_ids(int index) const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.custom_game_product_ids)
  return custom_game_product_ids_.Get(index);
}
 void CDOTALobbyMember::set_custom_game_product_ids(int index, ::google::protobuf::uint32 value) {
  custom_game_product_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.custom_game_product_ids)
}
 void CDOTALobbyMember::add_custom_game_product_ids(::google::protobuf::uint32 value) {
  custom_game_product_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CDOTALobbyMember.custom_game_product_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTALobbyMember::custom_game_product_ids() const {
  // @@protoc_insertion_point(field_list:CDOTALobbyMember.custom_game_product_ids)
  return custom_game_product_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTALobbyMember::mutable_custom_game_product_ids() {
  // @@protoc_insertion_point(field_mutable_list:CDOTALobbyMember.custom_game_product_ids)
  return &custom_game_product_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CLobbyTeamDetails::kTeamNameFieldNumber;
const int CLobbyTeamDetails::kTeamTagFieldNumber;
const int CLobbyTeamDetails::kTeamIdFieldNumber;
const int CLobbyTeamDetails::kTeamLogoFieldNumber;
const int CLobbyTeamDetails::kTeamBaseLogoFieldNumber;
const int CLobbyTeamDetails::kTeamBannerLogoFieldNumber;
const int CLobbyTeamDetails::kTeamCompleteFieldNumber;
const int CLobbyTeamDetails::kGuildNameFieldNumber;
const int CLobbyTeamDetails::kGuildTagFieldNumber;
const int CLobbyTeamDetails::kGuildIdFieldNumber;
const int CLobbyTeamDetails::kGuildLogoFieldNumber;
const int CLobbyTeamDetails::kGuildBaseLogoFieldNumber;
const int CLobbyTeamDetails::kGuildBannerLogoFieldNumber;
const int CLobbyTeamDetails::kRankFieldNumber;
const int CLobbyTeamDetails::kRankChangeFieldNumber;
const int CLobbyTeamDetails::kIsHomeTeamFieldNumber;
#endif  // !_MSC_VER

CLobbyTeamDetails::CLobbyTeamDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CLobbyTeamDetails)
}

void CLobbyTeamDetails::InitAsDefaultInstance() {
}

CLobbyTeamDetails::CLobbyTeamDetails(const CLobbyTeamDetails& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CLobbyTeamDetails)
}

void CLobbyTeamDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_id_ = 0u;
  team_logo_ = GOOGLE_ULONGLONG(0);
  team_base_logo_ = GOOGLE_ULONGLONG(0);
  team_banner_logo_ = GOOGLE_ULONGLONG(0);
  team_complete_ = false;
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_id_ = 0u;
  guild_logo_ = GOOGLE_ULONGLONG(0);
  guild_base_logo_ = GOOGLE_ULONGLONG(0);
  guild_banner_logo_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  rank_change_ = 0;
  is_home_team_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLobbyTeamDetails::~CLobbyTeamDetails() {
  // @@protoc_insertion_point(destructor:CLobbyTeamDetails)
  SharedDtor();
}

void CLobbyTeamDetails::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CLobbyTeamDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLobbyTeamDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLobbyTeamDetails_descriptor_;
}

const CLobbyTeamDetails& CLobbyTeamDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CLobbyTeamDetails* CLobbyTeamDetails::default_instance_ = NULL;

CLobbyTeamDetails* CLobbyTeamDetails::New(::google::protobuf::Arena* arena) const {
  CLobbyTeamDetails* n = new CLobbyTeamDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CLobbyTeamDetails::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CLobbyTeamDetails*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(team_logo_, team_id_);
    if (has_team_name()) {
      team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_team_tag()) {
      team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    team_complete_ = false;
    if (has_guild_name()) {
      guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(guild_logo_, guild_base_logo_);
    ZR_(is_home_team_, rank_change_);
    if (has_guild_tag()) {
      guild_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    guild_id_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CLobbyTeamDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CLobbyTeamDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string team_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CLobbyTeamDetails.team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_team_tag;
        break;
      }

      // optional string team_tag = 3;
      case 3: {
        if (tag == 26) {
         parse_team_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_tag().data(), this->team_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CLobbyTeamDetails.team_tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 4;
      case 4: {
        if (tag == 32) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_team_logo;
        break;
      }

      // optional uint64 team_logo = 5;
      case 5: {
        if (tag == 40) {
         parse_team_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_logo_)));
          set_has_team_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_team_base_logo;
        break;
      }

      // optional uint64 team_base_logo = 6;
      case 6: {
        if (tag == 48) {
         parse_team_base_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_base_logo_)));
          set_has_team_base_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_team_banner_logo;
        break;
      }

      // optional uint64 team_banner_logo = 7;
      case 7: {
        if (tag == 56) {
         parse_team_banner_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_banner_logo_)));
          set_has_team_banner_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_team_complete;
        break;
      }

      // optional bool team_complete = 8;
      case 8: {
        if (tag == 64) {
         parse_team_complete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &team_complete_)));
          set_has_team_complete();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_guild_name;
        break;
      }

      // optional string guild_name = 9;
      case 9: {
        if (tag == 74) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CLobbyTeamDetails.guild_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_guild_tag;
        break;
      }

      // optional string guild_tag = 10;
      case 10: {
        if (tag == 82) {
         parse_guild_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_tag().data(), this->guild_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CLobbyTeamDetails.guild_tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_guild_id;
        break;
      }

      // optional uint32 guild_id = 11;
      case 11: {
        if (tag == 88) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_guild_logo;
        break;
      }

      // optional uint64 guild_logo = 12;
      case 12: {
        if (tag == 96) {
         parse_guild_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_logo_)));
          set_has_guild_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_guild_base_logo;
        break;
      }

      // optional uint64 guild_base_logo = 13;
      case 13: {
        if (tag == 104) {
         parse_guild_base_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_base_logo_)));
          set_has_guild_base_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_guild_banner_logo;
        break;
      }

      // optional uint64 guild_banner_logo = 14;
      case 14: {
        if (tag == 112) {
         parse_guild_banner_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_banner_logo_)));
          set_has_guild_banner_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 15;
      case 15: {
        if (tag == 120) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_rank_change;
        break;
      }

      // optional sint32 rank_change = 16;
      case 16: {
        if (tag == 128) {
         parse_rank_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rank_change_)));
          set_has_rank_change();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_is_home_team;
        break;
      }

      // optional bool is_home_team = 17;
      case 17: {
        if (tag == 136) {
         parse_is_home_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_home_team_)));
          set_has_is_home_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CLobbyTeamDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CLobbyTeamDetails)
  return false;
#undef DO_
}

void CLobbyTeamDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CLobbyTeamDetails)
  // optional string team_name = 1;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CLobbyTeamDetails.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->team_name(), output);
  }

  // optional string team_tag = 3;
  if (has_team_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), this->team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CLobbyTeamDetails.team_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_tag(), output);
  }

  // optional uint32 team_id = 4;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team_id(), output);
  }

  // optional uint64 team_logo = 5;
  if (has_team_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->team_logo(), output);
  }

  // optional uint64 team_base_logo = 6;
  if (has_team_base_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->team_base_logo(), output);
  }

  // optional uint64 team_banner_logo = 7;
  if (has_team_banner_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->team_banner_logo(), output);
  }

  // optional bool team_complete = 8;
  if (has_team_complete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->team_complete(), output);
  }

  // optional string guild_name = 9;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CLobbyTeamDetails.guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->guild_name(), output);
  }

  // optional string guild_tag = 10;
  if (has_guild_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_tag().data(), this->guild_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CLobbyTeamDetails.guild_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->guild_tag(), output);
  }

  // optional uint32 guild_id = 11;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->guild_id(), output);
  }

  // optional uint64 guild_logo = 12;
  if (has_guild_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->guild_logo(), output);
  }

  // optional uint64 guild_base_logo = 13;
  if (has_guild_base_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->guild_base_logo(), output);
  }

  // optional uint64 guild_banner_logo = 14;
  if (has_guild_banner_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->guild_banner_logo(), output);
  }

  // optional uint32 rank = 15;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->rank(), output);
  }

  // optional sint32 rank_change = 16;
  if (has_rank_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(16, this->rank_change(), output);
  }

  // optional bool is_home_team = 17;
  if (has_is_home_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->is_home_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CLobbyTeamDetails)
}

::google::protobuf::uint8* CLobbyTeamDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLobbyTeamDetails)
  // optional string team_name = 1;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CLobbyTeamDetails.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->team_name(), target);
  }

  // optional string team_tag = 3;
  if (has_team_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), this->team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CLobbyTeamDetails.team_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_tag(), target);
  }

  // optional uint32 team_id = 4;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team_id(), target);
  }

  // optional uint64 team_logo = 5;
  if (has_team_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->team_logo(), target);
  }

  // optional uint64 team_base_logo = 6;
  if (has_team_base_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->team_base_logo(), target);
  }

  // optional uint64 team_banner_logo = 7;
  if (has_team_banner_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->team_banner_logo(), target);
  }

  // optional bool team_complete = 8;
  if (has_team_complete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->team_complete(), target);
  }

  // optional string guild_name = 9;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CLobbyTeamDetails.guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->guild_name(), target);
  }

  // optional string guild_tag = 10;
  if (has_guild_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_tag().data(), this->guild_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CLobbyTeamDetails.guild_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->guild_tag(), target);
  }

  // optional uint32 guild_id = 11;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->guild_id(), target);
  }

  // optional uint64 guild_logo = 12;
  if (has_guild_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->guild_logo(), target);
  }

  // optional uint64 guild_base_logo = 13;
  if (has_guild_base_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->guild_base_logo(), target);
  }

  // optional uint64 guild_banner_logo = 14;
  if (has_guild_banner_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->guild_banner_logo(), target);
  }

  // optional uint32 rank = 15;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->rank(), target);
  }

  // optional sint32 rank_change = 16;
  if (has_rank_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(16, this->rank_change(), target);
  }

  // optional bool is_home_team = 17;
  if (has_is_home_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->is_home_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLobbyTeamDetails)
  return target;
}

int CLobbyTeamDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string team_name = 1;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional string team_tag = 3;
    if (has_team_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_tag());
    }

    // optional uint32 team_id = 4;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint64 team_logo = 5;
    if (has_team_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_logo());
    }

    // optional uint64 team_base_logo = 6;
    if (has_team_base_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_base_logo());
    }

    // optional uint64 team_banner_logo = 7;
    if (has_team_banner_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_banner_logo());
    }

    // optional bool team_complete = 8;
    if (has_team_complete()) {
      total_size += 1 + 1;
    }

    // optional string guild_name = 9;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string guild_tag = 10;
    if (has_guild_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_tag());
    }

    // optional uint32 guild_id = 11;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional uint64 guild_logo = 12;
    if (has_guild_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_logo());
    }

    // optional uint64 guild_base_logo = 13;
    if (has_guild_base_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_base_logo());
    }

    // optional uint64 guild_banner_logo = 14;
    if (has_guild_banner_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_banner_logo());
    }

    // optional uint32 rank = 15;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional sint32 rank_change = 16;
    if (has_rank_change()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rank_change());
    }

    // optional bool is_home_team = 17;
    if (has_is_home_team()) {
      total_size += 2 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLobbyTeamDetails::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CLobbyTeamDetails* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CLobbyTeamDetails>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLobbyTeamDetails::MergeFrom(const CLobbyTeamDetails& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_name()) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (from.has_team_tag()) {
      set_has_team_tag();
      team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_tag_);
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_logo()) {
      set_team_logo(from.team_logo());
    }
    if (from.has_team_base_logo()) {
      set_team_base_logo(from.team_base_logo());
    }
    if (from.has_team_banner_logo()) {
      set_team_banner_logo(from.team_banner_logo());
    }
    if (from.has_team_complete()) {
      set_team_complete(from.team_complete());
    }
    if (from.has_guild_name()) {
      set_has_guild_name();
      guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_guild_tag()) {
      set_has_guild_tag();
      guild_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_tag_);
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_guild_logo()) {
      set_guild_logo(from.guild_logo());
    }
    if (from.has_guild_base_logo()) {
      set_guild_base_logo(from.guild_base_logo());
    }
    if (from.has_guild_banner_logo()) {
      set_guild_banner_logo(from.guild_banner_logo());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_rank_change()) {
      set_rank_change(from.rank_change());
    }
    if (from.has_is_home_team()) {
      set_is_home_team(from.is_home_team());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CLobbyTeamDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLobbyTeamDetails::CopyFrom(const CLobbyTeamDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyTeamDetails::IsInitialized() const {

  return true;
}

void CLobbyTeamDetails::Swap(CLobbyTeamDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CLobbyTeamDetails::InternalSwap(CLobbyTeamDetails* other) {
  team_name_.Swap(&other->team_name_);
  team_tag_.Swap(&other->team_tag_);
  std::swap(team_id_, other->team_id_);
  std::swap(team_logo_, other->team_logo_);
  std::swap(team_base_logo_, other->team_base_logo_);
  std::swap(team_banner_logo_, other->team_banner_logo_);
  std::swap(team_complete_, other->team_complete_);
  guild_name_.Swap(&other->guild_name_);
  guild_tag_.Swap(&other->guild_tag_);
  std::swap(guild_id_, other->guild_id_);
  std::swap(guild_logo_, other->guild_logo_);
  std::swap(guild_base_logo_, other->guild_base_logo_);
  std::swap(guild_banner_logo_, other->guild_banner_logo_);
  std::swap(rank_, other->rank_);
  std::swap(rank_change_, other->rank_change_);
  std::swap(is_home_team_, other->is_home_team_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CLobbyTeamDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLobbyTeamDetails_descriptor_;
  metadata.reflection = CLobbyTeamDetails_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CLobbyTeamDetails

// optional string team_name = 1;
bool CLobbyTeamDetails::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CLobbyTeamDetails::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CLobbyTeamDetails::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CLobbyTeamDetails::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
 const ::std::string& CLobbyTeamDetails::team_name() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_name)
  return team_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CLobbyTeamDetails::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_name)
}
 void CLobbyTeamDetails::set_team_name(const char* value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CLobbyTeamDetails.team_name)
}
 void CLobbyTeamDetails::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CLobbyTeamDetails.team_name)
}
 ::std::string* CLobbyTeamDetails::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:CLobbyTeamDetails.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CLobbyTeamDetails::release_team_name() {
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CLobbyTeamDetails::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:CLobbyTeamDetails.team_name)
}

// optional string team_tag = 3;
bool CLobbyTeamDetails::has_team_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CLobbyTeamDetails::set_has_team_tag() {
  _has_bits_[0] |= 0x00000002u;
}
void CLobbyTeamDetails::clear_has_team_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
void CLobbyTeamDetails::clear_team_tag() {
  team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_tag();
}
 const ::std::string& CLobbyTeamDetails::team_tag() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_tag)
  return team_tag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CLobbyTeamDetails::set_team_tag(const ::std::string& value) {
  set_has_team_tag();
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_tag)
}
 void CLobbyTeamDetails::set_team_tag(const char* value) {
  set_has_team_tag();
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CLobbyTeamDetails.team_tag)
}
 void CLobbyTeamDetails::set_team_tag(const char* value, size_t size) {
  set_has_team_tag();
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CLobbyTeamDetails.team_tag)
}
 ::std::string* CLobbyTeamDetails::mutable_team_tag() {
  set_has_team_tag();
  // @@protoc_insertion_point(field_mutable:CLobbyTeamDetails.team_tag)
  return team_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CLobbyTeamDetails::release_team_tag() {
  clear_has_team_tag();
  return team_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CLobbyTeamDetails::set_allocated_team_tag(::std::string* team_tag) {
  if (team_tag != NULL) {
    set_has_team_tag();
  } else {
    clear_has_team_tag();
  }
  team_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_tag);
  // @@protoc_insertion_point(field_set_allocated:CLobbyTeamDetails.team_tag)
}

// optional uint32 team_id = 4;
bool CLobbyTeamDetails::has_team_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CLobbyTeamDetails::set_has_team_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CLobbyTeamDetails::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CLobbyTeamDetails::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
 ::google::protobuf::uint32 CLobbyTeamDetails::team_id() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_id)
  return team_id_;
}
 void CLobbyTeamDetails::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_id)
}

// optional uint64 team_logo = 5;
bool CLobbyTeamDetails::has_team_logo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CLobbyTeamDetails::set_has_team_logo() {
  _has_bits_[0] |= 0x00000008u;
}
void CLobbyTeamDetails::clear_has_team_logo() {
  _has_bits_[0] &= ~0x00000008u;
}
void CLobbyTeamDetails::clear_team_logo() {
  team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo();
}
 ::google::protobuf::uint64 CLobbyTeamDetails::team_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_logo)
  return team_logo_;
}
 void CLobbyTeamDetails::set_team_logo(::google::protobuf::uint64 value) {
  set_has_team_logo();
  team_logo_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_logo)
}

// optional uint64 team_base_logo = 6;
bool CLobbyTeamDetails::has_team_base_logo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CLobbyTeamDetails::set_has_team_base_logo() {
  _has_bits_[0] |= 0x00000010u;
}
void CLobbyTeamDetails::clear_has_team_base_logo() {
  _has_bits_[0] &= ~0x00000010u;
}
void CLobbyTeamDetails::clear_team_base_logo() {
  team_base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_base_logo();
}
 ::google::protobuf::uint64 CLobbyTeamDetails::team_base_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_base_logo)
  return team_base_logo_;
}
 void CLobbyTeamDetails::set_team_base_logo(::google::protobuf::uint64 value) {
  set_has_team_base_logo();
  team_base_logo_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_base_logo)
}

// optional uint64 team_banner_logo = 7;
bool CLobbyTeamDetails::has_team_banner_logo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CLobbyTeamDetails::set_has_team_banner_logo() {
  _has_bits_[0] |= 0x00000020u;
}
void CLobbyTeamDetails::clear_has_team_banner_logo() {
  _has_bits_[0] &= ~0x00000020u;
}
void CLobbyTeamDetails::clear_team_banner_logo() {
  team_banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_banner_logo();
}
 ::google::protobuf::uint64 CLobbyTeamDetails::team_banner_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_banner_logo)
  return team_banner_logo_;
}
 void CLobbyTeamDetails::set_team_banner_logo(::google::protobuf::uint64 value) {
  set_has_team_banner_logo();
  team_banner_logo_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_banner_logo)
}

// optional bool team_complete = 8;
bool CLobbyTeamDetails::has_team_complete() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CLobbyTeamDetails::set_has_team_complete() {
  _has_bits_[0] |= 0x00000040u;
}
void CLobbyTeamDetails::clear_has_team_complete() {
  _has_bits_[0] &= ~0x00000040u;
}
void CLobbyTeamDetails::clear_team_complete() {
  team_complete_ = false;
  clear_has_team_complete();
}
 bool CLobbyTeamDetails::team_complete() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_complete)
  return team_complete_;
}
 void CLobbyTeamDetails::set_team_complete(bool value) {
  set_has_team_complete();
  team_complete_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_complete)
}

// optional string guild_name = 9;
bool CLobbyTeamDetails::has_guild_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CLobbyTeamDetails::set_has_guild_name() {
  _has_bits_[0] |= 0x00000080u;
}
void CLobbyTeamDetails::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000080u;
}
void CLobbyTeamDetails::clear_guild_name() {
  guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guild_name();
}
 const ::std::string& CLobbyTeamDetails::guild_name() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.guild_name)
  return guild_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CLobbyTeamDetails::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.guild_name)
}
 void CLobbyTeamDetails::set_guild_name(const char* value) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CLobbyTeamDetails.guild_name)
}
 void CLobbyTeamDetails::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CLobbyTeamDetails.guild_name)
}
 ::std::string* CLobbyTeamDetails::mutable_guild_name() {
  set_has_guild_name();
  // @@protoc_insertion_point(field_mutable:CLobbyTeamDetails.guild_name)
  return guild_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CLobbyTeamDetails::release_guild_name() {
  clear_has_guild_name();
  return guild_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CLobbyTeamDetails::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name != NULL) {
    set_has_guild_name();
  } else {
    clear_has_guild_name();
  }
  guild_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_name);
  // @@protoc_insertion_point(field_set_allocated:CLobbyTeamDetails.guild_name)
}

// optional string guild_tag = 10;
bool CLobbyTeamDetails::has_guild_tag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CLobbyTeamDetails::set_has_guild_tag() {
  _has_bits_[0] |= 0x00000100u;
}
void CLobbyTeamDetails::clear_has_guild_tag() {
  _has_bits_[0] &= ~0x00000100u;
}
void CLobbyTeamDetails::clear_guild_tag() {
  guild_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guild_tag();
}
 const ::std::string& CLobbyTeamDetails::guild_tag() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.guild_tag)
  return guild_tag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CLobbyTeamDetails::set_guild_tag(const ::std::string& value) {
  set_has_guild_tag();
  guild_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.guild_tag)
}
 void CLobbyTeamDetails::set_guild_tag(const char* value) {
  set_has_guild_tag();
  guild_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CLobbyTeamDetails.guild_tag)
}
 void CLobbyTeamDetails::set_guild_tag(const char* value, size_t size) {
  set_has_guild_tag();
  guild_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CLobbyTeamDetails.guild_tag)
}
 ::std::string* CLobbyTeamDetails::mutable_guild_tag() {
  set_has_guild_tag();
  // @@protoc_insertion_point(field_mutable:CLobbyTeamDetails.guild_tag)
  return guild_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CLobbyTeamDetails::release_guild_tag() {
  clear_has_guild_tag();
  return guild_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CLobbyTeamDetails::set_allocated_guild_tag(::std::string* guild_tag) {
  if (guild_tag != NULL) {
    set_has_guild_tag();
  } else {
    clear_has_guild_tag();
  }
  guild_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_tag);
  // @@protoc_insertion_point(field_set_allocated:CLobbyTeamDetails.guild_tag)
}

// optional uint32 guild_id = 11;
bool CLobbyTeamDetails::has_guild_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CLobbyTeamDetails::set_has_guild_id() {
  _has_bits_[0] |= 0x00000200u;
}
void CLobbyTeamDetails::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000200u;
}
void CLobbyTeamDetails::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
 ::google::protobuf::uint32 CLobbyTeamDetails::guild_id() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.guild_id)
  return guild_id_;
}
 void CLobbyTeamDetails::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.guild_id)
}

// optional uint64 guild_logo = 12;
bool CLobbyTeamDetails::has_guild_logo() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CLobbyTeamDetails::set_has_guild_logo() {
  _has_bits_[0] |= 0x00000400u;
}
void CLobbyTeamDetails::clear_has_guild_logo() {
  _has_bits_[0] &= ~0x00000400u;
}
void CLobbyTeamDetails::clear_guild_logo() {
  guild_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_logo();
}
 ::google::protobuf::uint64 CLobbyTeamDetails::guild_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.guild_logo)
  return guild_logo_;
}
 void CLobbyTeamDetails::set_guild_logo(::google::protobuf::uint64 value) {
  set_has_guild_logo();
  guild_logo_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.guild_logo)
}

// optional uint64 guild_base_logo = 13;
bool CLobbyTeamDetails::has_guild_base_logo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CLobbyTeamDetails::set_has_guild_base_logo() {
  _has_bits_[0] |= 0x00000800u;
}
void CLobbyTeamDetails::clear_has_guild_base_logo() {
  _has_bits_[0] &= ~0x00000800u;
}
void CLobbyTeamDetails::clear_guild_base_logo() {
  guild_base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_base_logo();
}
 ::google::protobuf::uint64 CLobbyTeamDetails::guild_base_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.guild_base_logo)
  return guild_base_logo_;
}
 void CLobbyTeamDetails::set_guild_base_logo(::google::protobuf::uint64 value) {
  set_has_guild_base_logo();
  guild_base_logo_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.guild_base_logo)
}

// optional uint64 guild_banner_logo = 14;
bool CLobbyTeamDetails::has_guild_banner_logo() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CLobbyTeamDetails::set_has_guild_banner_logo() {
  _has_bits_[0] |= 0x00001000u;
}
void CLobbyTeamDetails::clear_has_guild_banner_logo() {
  _has_bits_[0] &= ~0x00001000u;
}
void CLobbyTeamDetails::clear_guild_banner_logo() {
  guild_banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_banner_logo();
}
 ::google::protobuf::uint64 CLobbyTeamDetails::guild_banner_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.guild_banner_logo)
  return guild_banner_logo_;
}
 void CLobbyTeamDetails::set_guild_banner_logo(::google::protobuf::uint64 value) {
  set_has_guild_banner_logo();
  guild_banner_logo_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.guild_banner_logo)
}

// optional uint32 rank = 15;
bool CLobbyTeamDetails::has_rank() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CLobbyTeamDetails::set_has_rank() {
  _has_bits_[0] |= 0x00002000u;
}
void CLobbyTeamDetails::clear_has_rank() {
  _has_bits_[0] &= ~0x00002000u;
}
void CLobbyTeamDetails::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
 ::google::protobuf::uint32 CLobbyTeamDetails::rank() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.rank)
  return rank_;
}
 void CLobbyTeamDetails::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.rank)
}

// optional sint32 rank_change = 16;
bool CLobbyTeamDetails::has_rank_change() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CLobbyTeamDetails::set_has_rank_change() {
  _has_bits_[0] |= 0x00004000u;
}
void CLobbyTeamDetails::clear_has_rank_change() {
  _has_bits_[0] &= ~0x00004000u;
}
void CLobbyTeamDetails::clear_rank_change() {
  rank_change_ = 0;
  clear_has_rank_change();
}
 ::google::protobuf::int32 CLobbyTeamDetails::rank_change() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.rank_change)
  return rank_change_;
}
 void CLobbyTeamDetails::set_rank_change(::google::protobuf::int32 value) {
  set_has_rank_change();
  rank_change_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.rank_change)
}

// optional bool is_home_team = 17;
bool CLobbyTeamDetails::has_is_home_team() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CLobbyTeamDetails::set_has_is_home_team() {
  _has_bits_[0] |= 0x00008000u;
}
void CLobbyTeamDetails::clear_has_is_home_team() {
  _has_bits_[0] &= ~0x00008000u;
}
void CLobbyTeamDetails::clear_is_home_team() {
  is_home_team_ = false;
  clear_has_is_home_team();
}
 bool CLobbyTeamDetails::is_home_team() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.is_home_team)
  return is_home_team_;
}
 void CLobbyTeamDetails::set_is_home_team(bool value) {
  set_has_is_home_team();
  is_home_team_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.is_home_team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CLobbyTimedRewardDetails::kItemDefIndexFieldNumber;
const int CLobbyTimedRewardDetails::kIsSupplyCrateFieldNumber;
const int CLobbyTimedRewardDetails::kIsTimedDropFieldNumber;
const int CLobbyTimedRewardDetails::kAccountIdFieldNumber;
const int CLobbyTimedRewardDetails::kOriginFieldNumber;
#endif  // !_MSC_VER

CLobbyTimedRewardDetails::CLobbyTimedRewardDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CLobbyTimedRewardDetails)
}

void CLobbyTimedRewardDetails::InitAsDefaultInstance() {
}

CLobbyTimedRewardDetails::CLobbyTimedRewardDetails(const CLobbyTimedRewardDetails& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CLobbyTimedRewardDetails)
}

void CLobbyTimedRewardDetails::SharedCtor() {
  _cached_size_ = 0;
  item_def_index_ = 0u;
  is_supply_crate_ = false;
  is_timed_drop_ = false;
  account_id_ = 0u;
  origin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLobbyTimedRewardDetails::~CLobbyTimedRewardDetails() {
  // @@protoc_insertion_point(destructor:CLobbyTimedRewardDetails)
  SharedDtor();
}

void CLobbyTimedRewardDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLobbyTimedRewardDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLobbyTimedRewardDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLobbyTimedRewardDetails_descriptor_;
}

const CLobbyTimedRewardDetails& CLobbyTimedRewardDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CLobbyTimedRewardDetails* CLobbyTimedRewardDetails::default_instance_ = NULL;

CLobbyTimedRewardDetails* CLobbyTimedRewardDetails::New(::google::protobuf::Arena* arena) const {
  CLobbyTimedRewardDetails* n = new CLobbyTimedRewardDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CLobbyTimedRewardDetails::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CLobbyTimedRewardDetails*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(item_def_index_, origin_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CLobbyTimedRewardDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CLobbyTimedRewardDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_def_index = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_index_)));
          set_has_item_def_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_supply_crate;
        break;
      }

      // optional bool is_supply_crate = 3;
      case 3: {
        if (tag == 24) {
         parse_is_supply_crate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_supply_crate_)));
          set_has_is_supply_crate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_timed_drop;
        break;
      }

      // optional bool is_timed_drop = 4;
      case 4: {
        if (tag == 32) {
         parse_is_timed_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_timed_drop_)));
          set_has_is_timed_drop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_account_id;
        break;
      }

      // optional uint32 account_id = 5;
      case 5: {
        if (tag == 40) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_origin;
        break;
      }

      // optional uint32 origin = 6;
      case 6: {
        if (tag == 48) {
         parse_origin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &origin_)));
          set_has_origin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CLobbyTimedRewardDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CLobbyTimedRewardDetails)
  return false;
#undef DO_
}

void CLobbyTimedRewardDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CLobbyTimedRewardDetails)
  // optional uint32 item_def_index = 2;
  if (has_item_def_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_def_index(), output);
  }

  // optional bool is_supply_crate = 3;
  if (has_is_supply_crate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_supply_crate(), output);
  }

  // optional bool is_timed_drop = 4;
  if (has_is_timed_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_timed_drop(), output);
  }

  // optional uint32 account_id = 5;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->account_id(), output);
  }

  // optional uint32 origin = 6;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->origin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CLobbyTimedRewardDetails)
}

::google::protobuf::uint8* CLobbyTimedRewardDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLobbyTimedRewardDetails)
  // optional uint32 item_def_index = 2;
  if (has_item_def_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_def_index(), target);
  }

  // optional bool is_supply_crate = 3;
  if (has_is_supply_crate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_supply_crate(), target);
  }

  // optional bool is_timed_drop = 4;
  if (has_is_timed_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_timed_drop(), target);
  }

  // optional uint32 account_id = 5;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->account_id(), target);
  }

  // optional uint32 origin = 6;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->origin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLobbyTimedRewardDetails)
  return target;
}

int CLobbyTimedRewardDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 item_def_index = 2;
    if (has_item_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def_index());
    }

    // optional bool is_supply_crate = 3;
    if (has_is_supply_crate()) {
      total_size += 1 + 1;
    }

    // optional bool is_timed_drop = 4;
    if (has_is_timed_drop()) {
      total_size += 1 + 1;
    }

    // optional uint32 account_id = 5;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 origin = 6;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->origin());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLobbyTimedRewardDetails::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CLobbyTimedRewardDetails* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CLobbyTimedRewardDetails>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLobbyTimedRewardDetails::MergeFrom(const CLobbyTimedRewardDetails& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_def_index()) {
      set_item_def_index(from.item_def_index());
    }
    if (from.has_is_supply_crate()) {
      set_is_supply_crate(from.is_supply_crate());
    }
    if (from.has_is_timed_drop()) {
      set_is_timed_drop(from.is_timed_drop());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_origin()) {
      set_origin(from.origin());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CLobbyTimedRewardDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLobbyTimedRewardDetails::CopyFrom(const CLobbyTimedRewardDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyTimedRewardDetails::IsInitialized() const {

  return true;
}

void CLobbyTimedRewardDetails::Swap(CLobbyTimedRewardDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CLobbyTimedRewardDetails::InternalSwap(CLobbyTimedRewardDetails* other) {
  std::swap(item_def_index_, other->item_def_index_);
  std::swap(is_supply_crate_, other->is_supply_crate_);
  std::swap(is_timed_drop_, other->is_timed_drop_);
  std::swap(account_id_, other->account_id_);
  std::swap(origin_, other->origin_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CLobbyTimedRewardDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLobbyTimedRewardDetails_descriptor_;
  metadata.reflection = CLobbyTimedRewardDetails_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CLobbyTimedRewardDetails

// optional uint32 item_def_index = 2;
bool CLobbyTimedRewardDetails::has_item_def_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CLobbyTimedRewardDetails::set_has_item_def_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CLobbyTimedRewardDetails::clear_has_item_def_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CLobbyTimedRewardDetails::clear_item_def_index() {
  item_def_index_ = 0u;
  clear_has_item_def_index();
}
 ::google::protobuf::uint32 CLobbyTimedRewardDetails::item_def_index() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.item_def_index)
  return item_def_index_;
}
 void CLobbyTimedRewardDetails::set_item_def_index(::google::protobuf::uint32 value) {
  set_has_item_def_index();
  item_def_index_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.item_def_index)
}

// optional bool is_supply_crate = 3;
bool CLobbyTimedRewardDetails::has_is_supply_crate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CLobbyTimedRewardDetails::set_has_is_supply_crate() {
  _has_bits_[0] |= 0x00000002u;
}
void CLobbyTimedRewardDetails::clear_has_is_supply_crate() {
  _has_bits_[0] &= ~0x00000002u;
}
void CLobbyTimedRewardDetails::clear_is_supply_crate() {
  is_supply_crate_ = false;
  clear_has_is_supply_crate();
}
 bool CLobbyTimedRewardDetails::is_supply_crate() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.is_supply_crate)
  return is_supply_crate_;
}
 void CLobbyTimedRewardDetails::set_is_supply_crate(bool value) {
  set_has_is_supply_crate();
  is_supply_crate_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.is_supply_crate)
}

// optional bool is_timed_drop = 4;
bool CLobbyTimedRewardDetails::has_is_timed_drop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CLobbyTimedRewardDetails::set_has_is_timed_drop() {
  _has_bits_[0] |= 0x00000004u;
}
void CLobbyTimedRewardDetails::clear_has_is_timed_drop() {
  _has_bits_[0] &= ~0x00000004u;
}
void CLobbyTimedRewardDetails::clear_is_timed_drop() {
  is_timed_drop_ = false;
  clear_has_is_timed_drop();
}
 bool CLobbyTimedRewardDetails::is_timed_drop() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.is_timed_drop)
  return is_timed_drop_;
}
 void CLobbyTimedRewardDetails::set_is_timed_drop(bool value) {
  set_has_is_timed_drop();
  is_timed_drop_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.is_timed_drop)
}

// optional uint32 account_id = 5;
bool CLobbyTimedRewardDetails::has_account_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CLobbyTimedRewardDetails::set_has_account_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CLobbyTimedRewardDetails::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CLobbyTimedRewardDetails::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
 ::google::protobuf::uint32 CLobbyTimedRewardDetails::account_id() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.account_id)
  return account_id_;
}
 void CLobbyTimedRewardDetails::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.account_id)
}

// optional uint32 origin = 6;
bool CLobbyTimedRewardDetails::has_origin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CLobbyTimedRewardDetails::set_has_origin() {
  _has_bits_[0] |= 0x00000010u;
}
void CLobbyTimedRewardDetails::clear_has_origin() {
  _has_bits_[0] &= ~0x00000010u;
}
void CLobbyTimedRewardDetails::clear_origin() {
  origin_ = 0u;
  clear_has_origin();
}
 ::google::protobuf::uint32 CLobbyTimedRewardDetails::origin() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.origin)
  return origin_;
}
 void CLobbyTimedRewardDetails::set_origin(::google::protobuf::uint32 value) {
  set_has_origin();
  origin_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.origin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CLobbyBroadcastChannelInfo::kChannelIdFieldNumber;
const int CLobbyBroadcastChannelInfo::kCountryCodeFieldNumber;
const int CLobbyBroadcastChannelInfo::kDescriptionFieldNumber;
const int CLobbyBroadcastChannelInfo::kLanguageCodeFieldNumber;
#endif  // !_MSC_VER

CLobbyBroadcastChannelInfo::CLobbyBroadcastChannelInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CLobbyBroadcastChannelInfo)
}

void CLobbyBroadcastChannelInfo::InitAsDefaultInstance() {
}

CLobbyBroadcastChannelInfo::CLobbyBroadcastChannelInfo(const CLobbyBroadcastChannelInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CLobbyBroadcastChannelInfo)
}

void CLobbyBroadcastChannelInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_id_ = 0u;
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLobbyBroadcastChannelInfo::~CLobbyBroadcastChannelInfo() {
  // @@protoc_insertion_point(destructor:CLobbyBroadcastChannelInfo)
  SharedDtor();
}

void CLobbyBroadcastChannelInfo::SharedDtor() {
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CLobbyBroadcastChannelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLobbyBroadcastChannelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLobbyBroadcastChannelInfo_descriptor_;
}

const CLobbyBroadcastChannelInfo& CLobbyBroadcastChannelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CLobbyBroadcastChannelInfo* CLobbyBroadcastChannelInfo::default_instance_ = NULL;

CLobbyBroadcastChannelInfo* CLobbyBroadcastChannelInfo::New(::google::protobuf::Arena* arena) const {
  CLobbyBroadcastChannelInfo* n = new CLobbyBroadcastChannelInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CLobbyBroadcastChannelInfo::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    channel_id_ = 0u;
    if (has_country_code()) {
      country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_description()) {
      description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_language_code()) {
      language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CLobbyBroadcastChannelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CLobbyBroadcastChannelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_country_code;
        break;
      }

      // optional string country_code = 2;
      case 2: {
        if (tag == 18) {
         parse_country_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CLobbyBroadcastChannelInfo.country_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (tag == 26) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CLobbyBroadcastChannelInfo.description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_language_code;
        break;
      }

      // optional string language_code = 4;
      case 4: {
        if (tag == 34) {
         parse_language_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language_code().data(), this->language_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CLobbyBroadcastChannelInfo.language_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CLobbyBroadcastChannelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CLobbyBroadcastChannelInfo)
  return false;
#undef DO_
}

void CLobbyBroadcastChannelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CLobbyBroadcastChannelInfo)
  // optional uint32 channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_id(), output);
  }

  // optional string country_code = 2;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CLobbyBroadcastChannelInfo.country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->country_code(), output);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CLobbyBroadcastChannelInfo.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // optional string language_code = 4;
  if (has_language_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language_code().data(), this->language_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CLobbyBroadcastChannelInfo.language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->language_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CLobbyBroadcastChannelInfo)
}

::google::protobuf::uint8* CLobbyBroadcastChannelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLobbyBroadcastChannelInfo)
  // optional uint32 channel_id = 1;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel_id(), target);
  }

  // optional string country_code = 2;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CLobbyBroadcastChannelInfo.country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->country_code(), target);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CLobbyBroadcastChannelInfo.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // optional string language_code = 4;
  if (has_language_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language_code().data(), this->language_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CLobbyBroadcastChannelInfo.language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->language_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLobbyBroadcastChannelInfo)
  return target;
}

int CLobbyBroadcastChannelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional string country_code = 2;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string language_code = 4;
    if (has_language_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language_code());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLobbyBroadcastChannelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CLobbyBroadcastChannelInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CLobbyBroadcastChannelInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLobbyBroadcastChannelInfo::MergeFrom(const CLobbyBroadcastChannelInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_country_code()) {
      set_has_country_code();
      country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
    }
    if (from.has_description()) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (from.has_language_code()) {
      set_has_language_code();
      language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CLobbyBroadcastChannelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLobbyBroadcastChannelInfo::CopyFrom(const CLobbyBroadcastChannelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyBroadcastChannelInfo::IsInitialized() const {

  return true;
}

void CLobbyBroadcastChannelInfo::Swap(CLobbyBroadcastChannelInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CLobbyBroadcastChannelInfo::InternalSwap(CLobbyBroadcastChannelInfo* other) {
  std::swap(channel_id_, other->channel_id_);
  country_code_.Swap(&other->country_code_);
  description_.Swap(&other->description_);
  language_code_.Swap(&other->language_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CLobbyBroadcastChannelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLobbyBroadcastChannelInfo_descriptor_;
  metadata.reflection = CLobbyBroadcastChannelInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CLobbyBroadcastChannelInfo

// optional uint32 channel_id = 1;
bool CLobbyBroadcastChannelInfo::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CLobbyBroadcastChannelInfo::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CLobbyBroadcastChannelInfo::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CLobbyBroadcastChannelInfo::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
 ::google::protobuf::uint32 CLobbyBroadcastChannelInfo::channel_id() const {
  // @@protoc_insertion_point(field_get:CLobbyBroadcastChannelInfo.channel_id)
  return channel_id_;
}
 void CLobbyBroadcastChannelInfo::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:CLobbyBroadcastChannelInfo.channel_id)
}

// optional string country_code = 2;
bool CLobbyBroadcastChannelInfo::has_country_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CLobbyBroadcastChannelInfo::set_has_country_code() {
  _has_bits_[0] |= 0x00000002u;
}
void CLobbyBroadcastChannelInfo::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void CLobbyBroadcastChannelInfo::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_code();
}
 const ::std::string& CLobbyBroadcastChannelInfo::country_code() const {
  // @@protoc_insertion_point(field_get:CLobbyBroadcastChannelInfo.country_code)
  return country_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CLobbyBroadcastChannelInfo::set_country_code(const ::std::string& value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CLobbyBroadcastChannelInfo.country_code)
}
 void CLobbyBroadcastChannelInfo::set_country_code(const char* value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CLobbyBroadcastChannelInfo.country_code)
}
 void CLobbyBroadcastChannelInfo::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CLobbyBroadcastChannelInfo.country_code)
}
 ::std::string* CLobbyBroadcastChannelInfo::mutable_country_code() {
  set_has_country_code();
  // @@protoc_insertion_point(field_mutable:CLobbyBroadcastChannelInfo.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CLobbyBroadcastChannelInfo::release_country_code() {
  clear_has_country_code();
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CLobbyBroadcastChannelInfo::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    set_has_country_code();
  } else {
    clear_has_country_code();
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:CLobbyBroadcastChannelInfo.country_code)
}

// optional string description = 3;
bool CLobbyBroadcastChannelInfo::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CLobbyBroadcastChannelInfo::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
void CLobbyBroadcastChannelInfo::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
void CLobbyBroadcastChannelInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
 const ::std::string& CLobbyBroadcastChannelInfo::description() const {
  // @@protoc_insertion_point(field_get:CLobbyBroadcastChannelInfo.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CLobbyBroadcastChannelInfo::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CLobbyBroadcastChannelInfo.description)
}
 void CLobbyBroadcastChannelInfo::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CLobbyBroadcastChannelInfo.description)
}
 void CLobbyBroadcastChannelInfo::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CLobbyBroadcastChannelInfo.description)
}
 ::std::string* CLobbyBroadcastChannelInfo::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:CLobbyBroadcastChannelInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CLobbyBroadcastChannelInfo::release_description() {
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CLobbyBroadcastChannelInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:CLobbyBroadcastChannelInfo.description)
}

// optional string language_code = 4;
bool CLobbyBroadcastChannelInfo::has_language_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CLobbyBroadcastChannelInfo::set_has_language_code() {
  _has_bits_[0] |= 0x00000008u;
}
void CLobbyBroadcastChannelInfo::clear_has_language_code() {
  _has_bits_[0] &= ~0x00000008u;
}
void CLobbyBroadcastChannelInfo::clear_language_code() {
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language_code();
}
 const ::std::string& CLobbyBroadcastChannelInfo::language_code() const {
  // @@protoc_insertion_point(field_get:CLobbyBroadcastChannelInfo.language_code)
  return language_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CLobbyBroadcastChannelInfo::set_language_code(const ::std::string& value) {
  set_has_language_code();
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CLobbyBroadcastChannelInfo.language_code)
}
 void CLobbyBroadcastChannelInfo::set_language_code(const char* value) {
  set_has_language_code();
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CLobbyBroadcastChannelInfo.language_code)
}
 void CLobbyBroadcastChannelInfo::set_language_code(const char* value, size_t size) {
  set_has_language_code();
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CLobbyBroadcastChannelInfo.language_code)
}
 ::std::string* CLobbyBroadcastChannelInfo::mutable_language_code() {
  set_has_language_code();
  // @@protoc_insertion_point(field_mutable:CLobbyBroadcastChannelInfo.language_code)
  return language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CLobbyBroadcastChannelInfo::release_language_code() {
  clear_has_language_code();
  return language_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CLobbyBroadcastChannelInfo::set_allocated_language_code(::std::string* language_code) {
  if (language_code != NULL) {
    set_has_language_code();
  } else {
    clear_has_language_code();
  }
  language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language_code);
  // @@protoc_insertion_point(field_set_allocated:CLobbyBroadcastChannelInfo.language_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CSODOTALobby_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTALobby_State_descriptor_;
}
bool CSODOTALobby_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CSODOTALobby_State CSODOTALobby::UI;
const CSODOTALobby_State CSODOTALobby::READYUP;
const CSODOTALobby_State CSODOTALobby::SERVERSETUP;
const CSODOTALobby_State CSODOTALobby::RUN;
const CSODOTALobby_State CSODOTALobby::POSTGAME;
const CSODOTALobby_State CSODOTALobby::NOTREADY;
const CSODOTALobby_State CSODOTALobby::SERVERASSIGN;
const CSODOTALobby_State CSODOTALobby::State_MIN;
const CSODOTALobby_State CSODOTALobby::State_MAX;
const int CSODOTALobby::State_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CSODOTALobby_LobbyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTALobby_LobbyType_descriptor_;
}
bool CSODOTALobby_LobbyType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CSODOTALobby_LobbyType CSODOTALobby::INVALID;
const CSODOTALobby_LobbyType CSODOTALobby::CASUAL_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::PRACTICE;
const CSODOTALobby_LobbyType CSODOTALobby::TOURNAMENT;
const CSODOTALobby_LobbyType CSODOTALobby::COOP_BOT_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::LEGACY_TEAM_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::LEGACY_SOLO_QUEUE_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::COMPETITIVE_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::CASUAL_1V1_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::WEEKEND_TOURNEY;
const CSODOTALobby_LobbyType CSODOTALobby::LOCAL_BOT_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::LobbyType_MIN;
const CSODOTALobby_LobbyType CSODOTALobby::LobbyType_MAX;
const int CSODOTALobby::LobbyType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CSODOTALobby_CExtraMsg::kIdFieldNumber;
const int CSODOTALobby_CExtraMsg::kContentsFieldNumber;
#endif  // !_MSC_VER

CSODOTALobby_CExtraMsg::CSODOTALobby_CExtraMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSODOTALobby.CExtraMsg)
}

void CSODOTALobby_CExtraMsg::InitAsDefaultInstance() {
}

CSODOTALobby_CExtraMsg::CSODOTALobby_CExtraMsg(const CSODOTALobby_CExtraMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSODOTALobby.CExtraMsg)
}

void CSODOTALobby_CExtraMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  contents_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTALobby_CExtraMsg::~CSODOTALobby_CExtraMsg() {
  // @@protoc_insertion_point(destructor:CSODOTALobby.CExtraMsg)
  SharedDtor();
}

void CSODOTALobby_CExtraMsg::SharedDtor() {
  contents_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CSODOTALobby_CExtraMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTALobby_CExtraMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTALobby_CExtraMsg_descriptor_;
}

const CSODOTALobby_CExtraMsg& CSODOTALobby_CExtraMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CSODOTALobby_CExtraMsg* CSODOTALobby_CExtraMsg::default_instance_ = NULL;

CSODOTALobby_CExtraMsg* CSODOTALobby_CExtraMsg::New(::google::protobuf::Arena* arena) const {
  CSODOTALobby_CExtraMsg* n = new CSODOTALobby_CExtraMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSODOTALobby_CExtraMsg::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    id_ = 0u;
    if (has_contents()) {
      contents_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CSODOTALobby_CExtraMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSODOTALobby.CExtraMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contents;
        break;
      }

      // optional bytes contents = 2;
      case 2: {
        if (tag == 18) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSODOTALobby.CExtraMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSODOTALobby.CExtraMsg)
  return false;
#undef DO_
}

void CSODOTALobby_CExtraMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSODOTALobby.CExtraMsg)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bytes contents = 2;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->contents(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSODOTALobby.CExtraMsg)
}

::google::protobuf::uint8* CSODOTALobby_CExtraMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTALobby.CExtraMsg)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bytes contents = 2;
  if (has_contents()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->contents(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTALobby.CExtraMsg)
  return target;
}

int CSODOTALobby_CExtraMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bytes contents = 2;
    if (has_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contents());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTALobby_CExtraMsg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CSODOTALobby_CExtraMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSODOTALobby_CExtraMsg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTALobby_CExtraMsg::MergeFrom(const CSODOTALobby_CExtraMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_contents()) {
      set_has_contents();
      contents_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contents_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CSODOTALobby_CExtraMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTALobby_CExtraMsg::CopyFrom(const CSODOTALobby_CExtraMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobby_CExtraMsg::IsInitialized() const {

  return true;
}

void CSODOTALobby_CExtraMsg::Swap(CSODOTALobby_CExtraMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTALobby_CExtraMsg::InternalSwap(CSODOTALobby_CExtraMsg* other) {
  std::swap(id_, other->id_);
  contents_.Swap(&other->contents_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSODOTALobby_CExtraMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTALobby_CExtraMsg_descriptor_;
  metadata.reflection = CSODOTALobby_CExtraMsg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSODOTALobby::kLobbyIdFieldNumber;
const int CSODOTALobby::kMembersFieldNumber;
const int CSODOTALobby::kLeftMembersFieldNumber;
const int CSODOTALobby::kLeaderIdFieldNumber;
const int CSODOTALobby::kServerIdFieldNumber;
const int CSODOTALobby::kGameModeFieldNumber;
const int CSODOTALobby::kPendingInvitesFieldNumber;
const int CSODOTALobby::kStateFieldNumber;
const int CSODOTALobby::kConnectFieldNumber;
const int CSODOTALobby::kLobbyTypeFieldNumber;
const int CSODOTALobby::kAllowCheatsFieldNumber;
const int CSODOTALobby::kFillWithBotsFieldNumber;
const int CSODOTALobby::kIntroModeFieldNumber;
const int CSODOTALobby::kGameNameFieldNumber;
const int CSODOTALobby::kTeamDetailsFieldNumber;
const int CSODOTALobby::kTutorialLessonFieldNumber;
const int CSODOTALobby::kTournamentIdFieldNumber;
const int CSODOTALobby::kTournamentGameIdFieldNumber;
const int CSODOTALobby::kServerRegionFieldNumber;
const int CSODOTALobby::kGameStateFieldNumber;
const int CSODOTALobby::kNumSpectatorsFieldNumber;
const int CSODOTALobby::kMatchgroupFieldNumber;
const int CSODOTALobby::kCmPickFieldNumber;
const int CSODOTALobby::kMatchIdFieldNumber;
const int CSODOTALobby::kAllowSpectatingFieldNumber;
const int CSODOTALobby::kBotDifficultyFieldNumber;
const int CSODOTALobby::kGameVersionFieldNumber;
const int CSODOTALobby::kTimedRewardDetailsFieldNumber;
const int CSODOTALobby::kPassKeyFieldNumber;
const int CSODOTALobby::kBotSlotDifficultyFieldNumber;
const int CSODOTALobby::kLeagueidFieldNumber;
const int CSODOTALobby::kPenaltyLevelRadiantFieldNumber;
const int CSODOTALobby::kPenaltyLevelDireFieldNumber;
const int CSODOTALobby::kLoadGameIdFieldNumber;
const int CSODOTALobby::kSeriesTypeFieldNumber;
const int CSODOTALobby::kRadiantSeriesWinsFieldNumber;
const int CSODOTALobby::kDireSeriesWinsFieldNumber;
const int CSODOTALobby::kLootGeneratedFieldNumber;
const int CSODOTALobby::kLootAwardedFieldNumber;
const int CSODOTALobby::kAllchatFieldNumber;
const int CSODOTALobby::kDotaTvDelayFieldNumber;
const int CSODOTALobby::kCustomGameModeFieldNumber;
const int CSODOTALobby::kCustomMapNameFieldNumber;
const int CSODOTALobby::kCustomDifficultyFieldNumber;
const int CSODOTALobby::kLanFieldNumber;
const int CSODOTALobby::kBroadcastChannelInfoFieldNumber;
const int CSODOTALobby::kFirstLeaverAccountidFieldNumber;
const int CSODOTALobby::kSeriesIdFieldNumber;
const int CSODOTALobby::kLowPriorityFieldNumber;
const int CSODOTALobby::kExtraMessagesFieldNumber;
const int CSODOTALobby::kSaveGameFieldNumber;
const int CSODOTALobby::kFirstBloodHappenedFieldNumber;
const int CSODOTALobby::kMatchOutcomeFieldNumber;
const int CSODOTALobby::kMassDisconnectFieldNumber;
const int CSODOTALobby::kCustomGameIdFieldNumber;
const int CSODOTALobby::kActiveIngameEventsFieldNumber;
const int CSODOTALobby::kCustomMinPlayersFieldNumber;
const int CSODOTALobby::kCustomMaxPlayersFieldNumber;
const int CSODOTALobby::kPartnerTypeFieldNumber;
const int CSODOTALobby::kLanHostPingToServerRegionFieldNumber;
const int CSODOTALobby::kVisibilityFieldNumber;
const int CSODOTALobby::kCustomGameCrcFieldNumber;
const int CSODOTALobby::kCustomGameAutoCreatedLobbyFieldNumber;
const int CSODOTALobby::kLeagueSeriesIdFieldNumber;
const int CSODOTALobby::kLeagueGameIdFieldNumber;
const int CSODOTALobby::kCustomGameTimestampFieldNumber;
#endif  // !_MSC_VER

CSODOTALobby::CSODOTALobby()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSODOTALobby)
}

void CSODOTALobby::InitAsDefaultInstance() {
  save_game_ = const_cast< ::CDOTASaveGame*>(&::CDOTASaveGame::default_instance());
}

CSODOTALobby::CSODOTALobby(const CSODOTALobby& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSODOTALobby)
}

void CSODOTALobby::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lobby_id_ = GOOGLE_ULONGLONG(0);
  leader_id_ = GOOGLE_ULONGLONG(0);
  server_id_ = GOOGLE_ULONGLONG(0);
  game_mode_ = 0u;
  state_ = 0;
  connect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lobby_type_ = -1;
  allow_cheats_ = false;
  fill_with_bots_ = false;
  intro_mode_ = false;
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tutorial_lesson_ = 0u;
  tournament_id_ = 0u;
  tournament_game_id_ = 0u;
  server_region_ = 0u;
  game_state_ = 0;
  num_spectators_ = 0u;
  matchgroup_ = 0u;
  cm_pick_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  allow_spectating_ = true;
  bot_difficulty_ = 3;
  game_version_ = 0;
  pass_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leagueid_ = 0u;
  penalty_level_radiant_ = 0u;
  penalty_level_dire_ = 0u;
  load_game_id_ = 0u;
  series_type_ = 0u;
  radiant_series_wins_ = 0u;
  dire_series_wins_ = 0u;
  loot_generated_ = 0u;
  loot_awarded_ = 0u;
  allchat_ = false;
  dota_tv_delay_ = 0;
  custom_game_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_difficulty_ = 0u;
  lan_ = false;
  first_leaver_accountid_ = 0u;
  series_id_ = 0u;
  low_priority_ = false;
  save_game_ = NULL;
  first_blood_happened_ = false;
  match_outcome_ = 0;
  mass_disconnect_ = false;
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  custom_min_players_ = 0u;
  custom_max_players_ = 0u;
  partner_type_ = 0;
  lan_host_ping_to_server_region_ = 0u;
  visibility_ = 0;
  custom_game_crc_ = GOOGLE_ULONGLONG(0);
  custom_game_auto_created_lobby_ = false;
  league_series_id_ = 0u;
  league_game_id_ = 0u;
  custom_game_timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTALobby::~CSODOTALobby() {
  // @@protoc_insertion_point(destructor:CSODOTALobby)
  SharedDtor();
}

void CSODOTALobby::SharedDtor() {
  connect_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_game_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete save_game_;
  }
}

void CSODOTALobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTALobby::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTALobby_descriptor_;
}

const CSODOTALobby& CSODOTALobby::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CSODOTALobby* CSODOTALobby::default_instance_ = NULL;

CSODOTALobby* CSODOTALobby::New(::google::protobuf::Arena* arena) const {
  CSODOTALobby* n = new CSODOTALobby;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSODOTALobby::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CSODOTALobby*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 185u) {
    ZR_(leader_id_, server_id_);
    ZR_(game_mode_, state_);
    lobby_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 48896u) {
    ZR_(allow_cheats_, intro_mode_);
    if (has_connect()) {
      connect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    lobby_type_ = -1;
    if (has_game_name()) {
      game_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    tutorial_lesson_ = 0u;
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(tournament_id_, match_id_);
  }
  if (_has_bits_[24 / 32] & 3607101440u) {
    ZR_(leagueid_, penalty_level_radiant_);
    allow_spectating_ = true;
    bot_difficulty_ = 3;
    game_version_ = 0;
    if (has_pass_key()) {
      pass_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[32 / 32] & 255u) {
    ZR_(penalty_level_dire_, loot_awarded_);
    allchat_ = false;
  }
  if (_has_bits_[40 / 32] & 57088u) {
    ZR_(first_leaver_accountid_, series_id_);
    dota_tv_delay_ = 0;
    if (has_custom_game_mode()) {
      custom_game_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_custom_map_name()) {
      custom_map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    custom_difficulty_ = 0u;
    lan_ = false;
  }
  if (_has_bits_[48 / 32] & 8192000u) {
    ZR_(low_priority_, first_blood_happened_);
    ZR_(custom_game_id_, match_outcome_);
    if (has_save_game()) {
      if (save_game_ != NULL) save_game_->::CDOTASaveGame::Clear();
    }
    mass_disconnect_ = false;
  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    ZR_(custom_game_auto_created_lobby_, league_series_id_);
    custom_min_players_ = 0u;
    custom_max_players_ = 0u;
  }
  ZR_(league_game_id_, custom_game_timestamp_);

#undef ZR_HELPER_
#undef ZR_

  members_.Clear();
  left_members_.Clear();
  pending_invites_.Clear();
  team_details_.Clear();
  timed_reward_details_.Clear();
  bot_slot_difficulty_.Clear();
  broadcast_channel_info_.Clear();
  extra_messages_.Clear();
  active_ingame_events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CSODOTALobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSODOTALobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 lobby_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
          set_has_lobby_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_members;
        break;
      }

      // repeated .CDOTALobbyMember members = 2;
      case 2: {
        if (tag == 18) {
         parse_members:
          DO_(input->IncrementRecursionDepth());
         parse_loop_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_members;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_game_mode;
        break;
      }

      // optional uint32 game_mode = 3;
      case 3: {
        if (tag == 24) {
         parse_game_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
          set_has_game_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional .CSODOTALobby.State state = 4 [default = UI];
      case 4: {
        if (tag == 32) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSODOTALobby_State_IsValid(value)) {
            set_state(static_cast< ::CSODOTALobby_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_connect;
        break;
      }

      // optional string connect = 5;
      case 5: {
        if (tag == 42) {
         parse_connect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->connect().data(), this->connect().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSODOTALobby.connect");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_server_id;
        break;
      }

      // optional fixed64 server_id = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_left_members;
        break;
      }

      // repeated .CDOTALobbyMember left_members = 7;
      case 7: {
        if (tag == 58) {
         parse_left_members:
          DO_(input->IncrementRecursionDepth());
         parse_loop_left_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_left_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_left_members;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(81)) goto parse_pending_invites;
        break;
      }

      // repeated fixed64 pending_invites = 10;
      case 10: {
        if (tag == 81) {
         parse_pending_invites:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 81, input, this->mutable_pending_invites())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_pending_invites())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_pending_invites;
        if (input->ExpectTag(89)) goto parse_leader_id;
        break;
      }

      // optional fixed64 leader_id = 11;
      case 11: {
        if (tag == 89) {
         parse_leader_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &leader_id_)));
          set_has_leader_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_lobby_type;
        break;
      }

      // optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
      case 12: {
        if (tag == 96) {
         parse_lobby_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSODOTALobby_LobbyType_IsValid(value)) {
            set_lobby_type(static_cast< ::CSODOTALobby_LobbyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_allow_cheats;
        break;
      }

      // optional bool allow_cheats = 13;
      case 13: {
        if (tag == 104) {
         parse_allow_cheats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_cheats_)));
          set_has_allow_cheats();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_fill_with_bots;
        break;
      }

      // optional bool fill_with_bots = 14;
      case 14: {
        if (tag == 112) {
         parse_fill_with_bots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fill_with_bots_)));
          set_has_fill_with_bots();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_intro_mode;
        break;
      }

      // optional bool intro_mode = 15;
      case 15: {
        if (tag == 120) {
         parse_intro_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &intro_mode_)));
          set_has_intro_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_game_name;
        break;
      }

      // optional string game_name = 16;
      case 16: {
        if (tag == 130) {
         parse_game_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_name().data(), this->game_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSODOTALobby.game_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_team_details;
        break;
      }

      // repeated .CLobbyTeamDetails team_details = 17;
      case 17: {
        if (tag == 138) {
         parse_team_details:
          DO_(input->IncrementRecursionDepth());
         parse_loop_team_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_team_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_loop_team_details;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(144)) goto parse_tutorial_lesson;
        break;
      }

      // optional uint32 tutorial_lesson = 18;
      case 18: {
        if (tag == 144) {
         parse_tutorial_lesson:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tutorial_lesson_)));
          set_has_tutorial_lesson();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_tournament_id;
        break;
      }

      // optional uint32 tournament_id = 19;
      case 19: {
        if (tag == 152) {
         parse_tournament_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
          set_has_tournament_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_tournament_game_id;
        break;
      }

      // optional uint32 tournament_game_id = 20;
      case 20: {
        if (tag == 160) {
         parse_tournament_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_game_id_)));
          set_has_tournament_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_server_region;
        break;
      }

      // optional uint32 server_region = 21 [default = 0];
      case 21: {
        if (tag == 168) {
         parse_server_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
          set_has_server_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_game_state;
        break;
      }

      // optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
      case 22: {
        if (tag == 176) {
         parse_game_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_GameState_IsValid(value)) {
            set_game_state(static_cast< ::DOTA_GameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_num_spectators;
        break;
      }

      // optional uint32 num_spectators = 23;
      case 23: {
        if (tag == 184) {
         parse_num_spectators:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_spectators_)));
          set_has_num_spectators();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_matchgroup;
        break;
      }

      // optional uint32 matchgroup = 25;
      case 25: {
        if (tag == 200) {
         parse_matchgroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchgroup_)));
          set_has_matchgroup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_cm_pick;
        break;
      }

      // optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
      case 28: {
        if (tag == 224) {
         parse_cm_pick:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_CM_PICK_IsValid(value)) {
            set_cm_pick(static_cast< ::DOTA_CM_PICK >(value));
          } else {
            mutable_unknown_fields()->AddVarint(28, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 30;
      case 30: {
        if (tag == 240) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_allow_spectating;
        break;
      }

      // optional bool allow_spectating = 31 [default = true];
      case 31: {
        if (tag == 248) {
         parse_allow_spectating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_spectating_)));
          set_has_allow_spectating();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_bot_difficulty;
        break;
      }

      // optional .DOTABotDifficulty bot_difficulty = 36 [default = BOT_DIFFICULTY_HARD];
      case 36: {
        if (tag == 288) {
         parse_bot_difficulty:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty(static_cast< ::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(36, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_game_version;
        break;
      }

      // optional .DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
      case 37: {
        if (tag == 296) {
         parse_game_version:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTAGameVersion_IsValid(value)) {
            set_game_version(static_cast< ::DOTAGameVersion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(37, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_timed_reward_details;
        break;
      }

      // repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
      case 38: {
        if (tag == 306) {
         parse_timed_reward_details:
          DO_(input->IncrementRecursionDepth());
         parse_loop_timed_reward_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_timed_reward_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_loop_timed_reward_details;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(314)) goto parse_pass_key;
        break;
      }

      // optional string pass_key = 39;
      case 39: {
        if (tag == 314) {
         parse_pass_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass_key().data(), this->pass_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSODOTALobby.pass_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_bot_slot_difficulty;
        break;
      }

      // repeated .DOTABotDifficulty bot_slot_difficulty = 41;
      case 41: {
        if (tag == 328) {
         parse_bot_slot_difficulty:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTABotDifficulty_IsValid(value)) {
            add_bot_slot_difficulty(static_cast< ::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(41, value);
          }
        } else if (tag == 330) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 41,
                 ::DOTABotDifficulty_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_bot_slot_difficulty())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_bot_slot_difficulty;
        if (input->ExpectTag(336)) goto parse_leagueid;
        break;
      }

      // optional uint32 leagueid = 42;
      case 42: {
        if (tag == 336) {
         parse_leagueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leagueid_)));
          set_has_leagueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_penalty_level_radiant;
        break;
      }

      // optional uint32 penalty_level_radiant = 43 [default = 0];
      case 43: {
        if (tag == 344) {
         parse_penalty_level_radiant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penalty_level_radiant_)));
          set_has_penalty_level_radiant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_penalty_level_dire;
        break;
      }

      // optional uint32 penalty_level_dire = 44 [default = 0];
      case 44: {
        if (tag == 352) {
         parse_penalty_level_dire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penalty_level_dire_)));
          set_has_penalty_level_dire();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_load_game_id;
        break;
      }

      // optional uint32 load_game_id = 45;
      case 45: {
        if (tag == 360) {
         parse_load_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &load_game_id_)));
          set_has_load_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_series_type;
        break;
      }

      // optional uint32 series_type = 46;
      case 46: {
        if (tag == 368) {
         parse_series_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
          set_has_series_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_radiant_series_wins;
        break;
      }

      // optional uint32 radiant_series_wins = 47;
      case 47: {
        if (tag == 376) {
         parse_radiant_series_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_series_wins_)));
          set_has_radiant_series_wins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_dire_series_wins;
        break;
      }

      // optional uint32 dire_series_wins = 48;
      case 48: {
        if (tag == 384) {
         parse_dire_series_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_series_wins_)));
          set_has_dire_series_wins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_loot_generated;
        break;
      }

      // optional uint32 loot_generated = 49;
      case 49: {
        if (tag == 392) {
         parse_loot_generated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loot_generated_)));
          set_has_loot_generated();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_loot_awarded;
        break;
      }

      // optional uint32 loot_awarded = 50;
      case 50: {
        if (tag == 400) {
         parse_loot_awarded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loot_awarded_)));
          set_has_loot_awarded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_allchat;
        break;
      }

      // optional bool allchat = 51 [default = false];
      case 51: {
        if (tag == 408) {
         parse_allchat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allchat_)));
          set_has_allchat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_dota_tv_delay;
        break;
      }

      // optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
      case 53: {
        if (tag == 424) {
         parse_dota_tv_delay:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LobbyDotaTVDelay_IsValid(value)) {
            set_dota_tv_delay(static_cast< ::LobbyDotaTVDelay >(value));
          } else {
            mutable_unknown_fields()->AddVarint(53, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(434)) goto parse_custom_game_mode;
        break;
      }

      // optional string custom_game_mode = 54;
      case 54: {
        if (tag == 434) {
         parse_custom_game_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_game_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->custom_game_mode().data(), this->custom_game_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSODOTALobby.custom_game_mode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(442)) goto parse_custom_map_name;
        break;
      }

      // optional string custom_map_name = 55;
      case 55: {
        if (tag == 442) {
         parse_custom_map_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->custom_map_name().data(), this->custom_map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSODOTALobby.custom_map_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_custom_difficulty;
        break;
      }

      // optional uint32 custom_difficulty = 56;
      case 56: {
        if (tag == 448) {
         parse_custom_difficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_difficulty_)));
          set_has_custom_difficulty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(456)) goto parse_lan;
        break;
      }

      // optional bool lan = 57;
      case 57: {
        if (tag == 456) {
         parse_lan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lan_)));
          set_has_lan();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(466)) goto parse_broadcast_channel_info;
        break;
      }

      // repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
      case 58: {
        if (tag == 466) {
         parse_broadcast_channel_info:
          DO_(input->IncrementRecursionDepth());
         parse_loop_broadcast_channel_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_broadcast_channel_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(466)) goto parse_loop_broadcast_channel_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(472)) goto parse_first_leaver_accountid;
        break;
      }

      // optional uint32 first_leaver_accountid = 59;
      case 59: {
        if (tag == 472) {
         parse_first_leaver_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_leaver_accountid_)));
          set_has_first_leaver_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_series_id;
        break;
      }

      // optional uint32 series_id = 60;
      case 60: {
        if (tag == 480) {
         parse_series_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_id_)));
          set_has_series_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_low_priority;
        break;
      }

      // optional bool low_priority = 61;
      case 61: {
        if (tag == 488) {
         parse_low_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_priority_)));
          set_has_low_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(498)) goto parse_extra_messages;
        break;
      }

      // repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
      case 62: {
        if (tag == 498) {
         parse_extra_messages:
          DO_(input->IncrementRecursionDepth());
         parse_loop_extra_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_extra_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(498)) goto parse_loop_extra_messages;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(506)) goto parse_save_game;
        break;
      }

      // optional .CDOTASaveGame save_game = 63;
      case 63: {
        if (tag == 506) {
         parse_save_game:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_save_game()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(520)) goto parse_first_blood_happened;
        break;
      }

      // optional bool first_blood_happened = 65;
      case 65: {
        if (tag == 520) {
         parse_first_blood_happened:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_blood_happened_)));
          set_has_first_blood_happened();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(536)) goto parse_mass_disconnect;
        break;
      }

      // optional bool mass_disconnect = 67;
      case 67: {
        if (tag == 536) {
         parse_mass_disconnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mass_disconnect_)));
          set_has_mass_disconnect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(544)) goto parse_custom_game_id;
        break;
      }

      // optional uint64 custom_game_id = 68;
      case 68: {
        if (tag == 544) {
         parse_custom_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
          set_has_custom_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(552)) goto parse_active_ingame_events;
        break;
      }

      // repeated .EEvent active_ingame_events = 69;
      case 69: {
        if (tag == 552) {
         parse_active_ingame_events:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EEvent_IsValid(value)) {
            add_active_ingame_events(static_cast< ::EEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(69, value);
          }
        } else if (tag == 554) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 69,
                 ::EEvent_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_active_ingame_events())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(552)) goto parse_active_ingame_events;
        if (input->ExpectTag(560)) goto parse_match_outcome;
        break;
      }

      // optional .EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
      case 70: {
        if (tag == 560) {
         parse_match_outcome:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EMatchOutcome_IsValid(value)) {
            set_match_outcome(static_cast< ::EMatchOutcome >(value));
          } else {
            mutable_unknown_fields()->AddVarint(70, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(568)) goto parse_custom_min_players;
        break;
      }

      // optional uint32 custom_min_players = 71;
      case 71: {
        if (tag == 568) {
         parse_custom_min_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_min_players_)));
          set_has_custom_min_players();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(576)) goto parse_custom_max_players;
        break;
      }

      // optional uint32 custom_max_players = 72;
      case 72: {
        if (tag == 576) {
         parse_custom_max_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_max_players_)));
          set_has_custom_max_players();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(584)) goto parse_partner_type;
        break;
      }

      // optional .PartnerAccountType partner_type = 73 [default = PARTNER_NONE];
      case 73: {
        if (tag == 584) {
         parse_partner_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PartnerAccountType_IsValid(value)) {
            set_partner_type(static_cast< ::PartnerAccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(73, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(592)) goto parse_lan_host_ping_to_server_region;
        break;
      }

      // optional uint32 lan_host_ping_to_server_region = 74;
      case 74: {
        if (tag == 592) {
         parse_lan_host_ping_to_server_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lan_host_ping_to_server_region_)));
          set_has_lan_host_ping_to_server_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(600)) goto parse_visibility;
        break;
      }

      // optional .DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
      case 75: {
        if (tag == 600) {
         parse_visibility:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTALobbyVisibility_IsValid(value)) {
            set_visibility(static_cast< ::DOTALobbyVisibility >(value));
          } else {
            mutable_unknown_fields()->AddVarint(75, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(609)) goto parse_custom_game_crc;
        break;
      }

      // optional fixed64 custom_game_crc = 76;
      case 76: {
        if (tag == 609) {
         parse_custom_game_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &custom_game_crc_)));
          set_has_custom_game_crc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(616)) goto parse_custom_game_auto_created_lobby;
        break;
      }

      // optional bool custom_game_auto_created_lobby = 77;
      case 77: {
        if (tag == 616) {
         parse_custom_game_auto_created_lobby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &custom_game_auto_created_lobby_)));
          set_has_custom_game_auto_created_lobby();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(624)) goto parse_league_series_id;
        break;
      }

      // optional uint32 league_series_id = 78;
      case 78: {
        if (tag == 624) {
         parse_league_series_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_series_id_)));
          set_has_league_series_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(632)) goto parse_league_game_id;
        break;
      }

      // optional uint32 league_game_id = 79;
      case 79: {
        if (tag == 632) {
         parse_league_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_game_id_)));
          set_has_league_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(645)) goto parse_custom_game_timestamp;
        break;
      }

      // optional fixed32 custom_game_timestamp = 80;
      case 80: {
        if (tag == 645) {
         parse_custom_game_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_game_timestamp_)));
          set_has_custom_game_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSODOTALobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSODOTALobby)
  return false;
#undef DO_
}

void CSODOTALobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSODOTALobby)
  // optional uint64 lobby_id = 1;
  if (has_lobby_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lobby_id(), output);
  }

  // repeated .CDOTALobbyMember members = 2;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }

  // optional uint32 game_mode = 3;
  if (has_game_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_mode(), output);
  }

  // optional .CSODOTALobby.State state = 4 [default = UI];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  // optional string connect = 5;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connect().data(), this->connect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSODOTALobby.connect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->connect(), output);
  }

  // optional fixed64 server_id = 6 [default = 0];
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->server_id(), output);
  }

  // repeated .CDOTALobbyMember left_members = 7;
  for (unsigned int i = 0, n = this->left_members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->left_members(i), output);
  }

  // repeated fixed64 pending_invites = 10;
  for (int i = 0; i < this->pending_invites_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      10, this->pending_invites(i), output);
  }

  // optional fixed64 leader_id = 11;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->leader_id(), output);
  }

  // optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
  if (has_lobby_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->lobby_type(), output);
  }

  // optional bool allow_cheats = 13;
  if (has_allow_cheats()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->allow_cheats(), output);
  }

  // optional bool fill_with_bots = 14;
  if (has_fill_with_bots()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->fill_with_bots(), output);
  }

  // optional bool intro_mode = 15;
  if (has_intro_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->intro_mode(), output);
  }

  // optional string game_name = 16;
  if (has_game_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSODOTALobby.game_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->game_name(), output);
  }

  // repeated .CLobbyTeamDetails team_details = 17;
  for (unsigned int i = 0, n = this->team_details_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->team_details(i), output);
  }

  // optional uint32 tutorial_lesson = 18;
  if (has_tutorial_lesson()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->tutorial_lesson(), output);
  }

  // optional uint32 tournament_id = 19;
  if (has_tournament_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->tournament_id(), output);
  }

  // optional uint32 tournament_game_id = 20;
  if (has_tournament_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->tournament_game_id(), output);
  }

  // optional uint32 server_region = 21 [default = 0];
  if (has_server_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->server_region(), output);
  }

  // optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
  if (has_game_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->game_state(), output);
  }

  // optional uint32 num_spectators = 23;
  if (has_num_spectators()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->num_spectators(), output);
  }

  // optional uint32 matchgroup = 25;
  if (has_matchgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->matchgroup(), output);
  }

  // optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
  if (has_cm_pick()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      28, this->cm_pick(), output);
  }

  // optional uint64 match_id = 30;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->match_id(), output);
  }

  // optional bool allow_spectating = 31 [default = true];
  if (has_allow_spectating()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->allow_spectating(), output);
  }

  // optional .DOTABotDifficulty bot_difficulty = 36 [default = BOT_DIFFICULTY_HARD];
  if (has_bot_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      36, this->bot_difficulty(), output);
  }

  // optional .DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
  if (has_game_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      37, this->game_version(), output);
  }

  // repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
  for (unsigned int i = 0, n = this->timed_reward_details_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->timed_reward_details(i), output);
  }

  // optional string pass_key = 39;
  if (has_pass_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSODOTALobby.pass_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      39, this->pass_key(), output);
  }

  // repeated .DOTABotDifficulty bot_slot_difficulty = 41;
  for (int i = 0; i < this->bot_slot_difficulty_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      41, this->bot_slot_difficulty(i), output);
  }

  // optional uint32 leagueid = 42;
  if (has_leagueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->leagueid(), output);
  }

  // optional uint32 penalty_level_radiant = 43 [default = 0];
  if (has_penalty_level_radiant()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->penalty_level_radiant(), output);
  }

  // optional uint32 penalty_level_dire = 44 [default = 0];
  if (has_penalty_level_dire()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->penalty_level_dire(), output);
  }

  // optional uint32 load_game_id = 45;
  if (has_load_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->load_game_id(), output);
  }

  // optional uint32 series_type = 46;
  if (has_series_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->series_type(), output);
  }

  // optional uint32 radiant_series_wins = 47;
  if (has_radiant_series_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->radiant_series_wins(), output);
  }

  // optional uint32 dire_series_wins = 48;
  if (has_dire_series_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->dire_series_wins(), output);
  }

  // optional uint32 loot_generated = 49;
  if (has_loot_generated()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->loot_generated(), output);
  }

  // optional uint32 loot_awarded = 50;
  if (has_loot_awarded()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->loot_awarded(), output);
  }

  // optional bool allchat = 51 [default = false];
  if (has_allchat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(51, this->allchat(), output);
  }

  // optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
  if (has_dota_tv_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      53, this->dota_tv_delay(), output);
  }

  // optional string custom_game_mode = 54;
  if (has_custom_game_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_game_mode().data(), this->custom_game_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSODOTALobby.custom_game_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      54, this->custom_game_mode(), output);
  }

  // optional string custom_map_name = 55;
  if (has_custom_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_map_name().data(), this->custom_map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSODOTALobby.custom_map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      55, this->custom_map_name(), output);
  }

  // optional uint32 custom_difficulty = 56;
  if (has_custom_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->custom_difficulty(), output);
  }

  // optional bool lan = 57;
  if (has_lan()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(57, this->lan(), output);
  }

  // repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
  for (unsigned int i = 0, n = this->broadcast_channel_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, this->broadcast_channel_info(i), output);
  }

  // optional uint32 first_leaver_accountid = 59;
  if (has_first_leaver_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(59, this->first_leaver_accountid(), output);
  }

  // optional uint32 series_id = 60;
  if (has_series_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->series_id(), output);
  }

  // optional bool low_priority = 61;
  if (has_low_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(61, this->low_priority(), output);
  }

  // repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
  for (unsigned int i = 0, n = this->extra_messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->extra_messages(i), output);
  }

  // optional .CDOTASaveGame save_game = 63;
  if (has_save_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, *this->save_game_, output);
  }

  // optional bool first_blood_happened = 65;
  if (has_first_blood_happened()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(65, this->first_blood_happened(), output);
  }

  // optional bool mass_disconnect = 67;
  if (has_mass_disconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(67, this->mass_disconnect(), output);
  }

  // optional uint64 custom_game_id = 68;
  if (has_custom_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(68, this->custom_game_id(), output);
  }

  // repeated .EEvent active_ingame_events = 69;
  for (int i = 0; i < this->active_ingame_events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      69, this->active_ingame_events(i), output);
  }

  // optional .EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
  if (has_match_outcome()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      70, this->match_outcome(), output);
  }

  // optional uint32 custom_min_players = 71;
  if (has_custom_min_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(71, this->custom_min_players(), output);
  }

  // optional uint32 custom_max_players = 72;
  if (has_custom_max_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(72, this->custom_max_players(), output);
  }

  // optional .PartnerAccountType partner_type = 73 [default = PARTNER_NONE];
  if (has_partner_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      73, this->partner_type(), output);
  }

  // optional uint32 lan_host_ping_to_server_region = 74;
  if (has_lan_host_ping_to_server_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(74, this->lan_host_ping_to_server_region(), output);
  }

  // optional .DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
  if (has_visibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      75, this->visibility(), output);
  }

  // optional fixed64 custom_game_crc = 76;
  if (has_custom_game_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(76, this->custom_game_crc(), output);
  }

  // optional bool custom_game_auto_created_lobby = 77;
  if (has_custom_game_auto_created_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(77, this->custom_game_auto_created_lobby(), output);
  }

  // optional uint32 league_series_id = 78;
  if (has_league_series_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(78, this->league_series_id(), output);
  }

  // optional uint32 league_game_id = 79;
  if (has_league_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(79, this->league_game_id(), output);
  }

  // optional fixed32 custom_game_timestamp = 80;
  if (has_custom_game_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(80, this->custom_game_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSODOTALobby)
}

::google::protobuf::uint8* CSODOTALobby::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTALobby)
  // optional uint64 lobby_id = 1;
  if (has_lobby_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lobby_id(), target);
  }

  // repeated .CDOTALobbyMember members = 2;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->members(i), target);
  }

  // optional uint32 game_mode = 3;
  if (has_game_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_mode(), target);
  }

  // optional .CSODOTALobby.State state = 4 [default = UI];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  // optional string connect = 5;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connect().data(), this->connect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSODOTALobby.connect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->connect(), target);
  }

  // optional fixed64 server_id = 6 [default = 0];
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->server_id(), target);
  }

  // repeated .CDOTALobbyMember left_members = 7;
  for (unsigned int i = 0, n = this->left_members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->left_members(i), target);
  }

  // repeated fixed64 pending_invites = 10;
  for (int i = 0; i < this->pending_invites_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(10, this->pending_invites(i), target);
  }

  // optional fixed64 leader_id = 11;
  if (has_leader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->leader_id(), target);
  }

  // optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
  if (has_lobby_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->lobby_type(), target);
  }

  // optional bool allow_cheats = 13;
  if (has_allow_cheats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->allow_cheats(), target);
  }

  // optional bool fill_with_bots = 14;
  if (has_fill_with_bots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->fill_with_bots(), target);
  }

  // optional bool intro_mode = 15;
  if (has_intro_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->intro_mode(), target);
  }

  // optional string game_name = 16;
  if (has_game_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSODOTALobby.game_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->game_name(), target);
  }

  // repeated .CLobbyTeamDetails team_details = 17;
  for (unsigned int i = 0, n = this->team_details_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->team_details(i), target);
  }

  // optional uint32 tutorial_lesson = 18;
  if (has_tutorial_lesson()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->tutorial_lesson(), target);
  }

  // optional uint32 tournament_id = 19;
  if (has_tournament_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->tournament_id(), target);
  }

  // optional uint32 tournament_game_id = 20;
  if (has_tournament_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->tournament_game_id(), target);
  }

  // optional uint32 server_region = 21 [default = 0];
  if (has_server_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->server_region(), target);
  }

  // optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
  if (has_game_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->game_state(), target);
  }

  // optional uint32 num_spectators = 23;
  if (has_num_spectators()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->num_spectators(), target);
  }

  // optional uint32 matchgroup = 25;
  if (has_matchgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->matchgroup(), target);
  }

  // optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
  if (has_cm_pick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      28, this->cm_pick(), target);
  }

  // optional uint64 match_id = 30;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->match_id(), target);
  }

  // optional bool allow_spectating = 31 [default = true];
  if (has_allow_spectating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->allow_spectating(), target);
  }

  // optional .DOTABotDifficulty bot_difficulty = 36 [default = BOT_DIFFICULTY_HARD];
  if (has_bot_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      36, this->bot_difficulty(), target);
  }

  // optional .DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
  if (has_game_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      37, this->game_version(), target);
  }

  // repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
  for (unsigned int i = 0, n = this->timed_reward_details_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->timed_reward_details(i), target);
  }

  // optional string pass_key = 39;
  if (has_pass_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSODOTALobby.pass_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->pass_key(), target);
  }

  // repeated .DOTABotDifficulty bot_slot_difficulty = 41;
  for (int i = 0; i < this->bot_slot_difficulty_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      41, this->bot_slot_difficulty(i), target);
  }

  // optional uint32 leagueid = 42;
  if (has_leagueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->leagueid(), target);
  }

  // optional uint32 penalty_level_radiant = 43 [default = 0];
  if (has_penalty_level_radiant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->penalty_level_radiant(), target);
  }

  // optional uint32 penalty_level_dire = 44 [default = 0];
  if (has_penalty_level_dire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->penalty_level_dire(), target);
  }

  // optional uint32 load_game_id = 45;
  if (has_load_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->load_game_id(), target);
  }

  // optional uint32 series_type = 46;
  if (has_series_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->series_type(), target);
  }

  // optional uint32 radiant_series_wins = 47;
  if (has_radiant_series_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->radiant_series_wins(), target);
  }

  // optional uint32 dire_series_wins = 48;
  if (has_dire_series_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->dire_series_wins(), target);
  }

  // optional uint32 loot_generated = 49;
  if (has_loot_generated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->loot_generated(), target);
  }

  // optional uint32 loot_awarded = 50;
  if (has_loot_awarded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->loot_awarded(), target);
  }

  // optional bool allchat = 51 [default = false];
  if (has_allchat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(51, this->allchat(), target);
  }

  // optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
  if (has_dota_tv_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      53, this->dota_tv_delay(), target);
  }

  // optional string custom_game_mode = 54;
  if (has_custom_game_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_game_mode().data(), this->custom_game_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSODOTALobby.custom_game_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        54, this->custom_game_mode(), target);
  }

  // optional string custom_map_name = 55;
  if (has_custom_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_map_name().data(), this->custom_map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSODOTALobby.custom_map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        55, this->custom_map_name(), target);
  }

  // optional uint32 custom_difficulty = 56;
  if (has_custom_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->custom_difficulty(), target);
  }

  // optional bool lan = 57;
  if (has_lan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(57, this->lan(), target);
  }

  // repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
  for (unsigned int i = 0, n = this->broadcast_channel_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        58, this->broadcast_channel_info(i), target);
  }

  // optional uint32 first_leaver_accountid = 59;
  if (has_first_leaver_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(59, this->first_leaver_accountid(), target);
  }

  // optional uint32 series_id = 60;
  if (has_series_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->series_id(), target);
  }

  // optional bool low_priority = 61;
  if (has_low_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(61, this->low_priority(), target);
  }

  // repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
  for (unsigned int i = 0, n = this->extra_messages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, this->extra_messages(i), target);
  }

  // optional .CDOTASaveGame save_game = 63;
  if (has_save_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        63, *this->save_game_, target);
  }

  // optional bool first_blood_happened = 65;
  if (has_first_blood_happened()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(65, this->first_blood_happened(), target);
  }

  // optional bool mass_disconnect = 67;
  if (has_mass_disconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(67, this->mass_disconnect(), target);
  }

  // optional uint64 custom_game_id = 68;
  if (has_custom_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(68, this->custom_game_id(), target);
  }

  // repeated .EEvent active_ingame_events = 69;
  for (int i = 0; i < this->active_ingame_events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      69, this->active_ingame_events(i), target);
  }

  // optional .EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
  if (has_match_outcome()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      70, this->match_outcome(), target);
  }

  // optional uint32 custom_min_players = 71;
  if (has_custom_min_players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(71, this->custom_min_players(), target);
  }

  // optional uint32 custom_max_players = 72;
  if (has_custom_max_players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(72, this->custom_max_players(), target);
  }

  // optional .PartnerAccountType partner_type = 73 [default = PARTNER_NONE];
  if (has_partner_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      73, this->partner_type(), target);
  }

  // optional uint32 lan_host_ping_to_server_region = 74;
  if (has_lan_host_ping_to_server_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(74, this->lan_host_ping_to_server_region(), target);
  }

  // optional .DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
  if (has_visibility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      75, this->visibility(), target);
  }

  // optional fixed64 custom_game_crc = 76;
  if (has_custom_game_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(76, this->custom_game_crc(), target);
  }

  // optional bool custom_game_auto_created_lobby = 77;
  if (has_custom_game_auto_created_lobby()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(77, this->custom_game_auto_created_lobby(), target);
  }

  // optional uint32 league_series_id = 78;
  if (has_league_series_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(78, this->league_series_id(), target);
  }

  // optional uint32 league_game_id = 79;
  if (has_league_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(79, this->league_game_id(), target);
  }

  // optional fixed32 custom_game_timestamp = 80;
  if (has_custom_game_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(80, this->custom_game_timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTALobby)
  return target;
}

int CSODOTALobby::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 185u) {
    // optional uint64 lobby_id = 1;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

    // optional fixed64 leader_id = 11;
    if (has_leader_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 server_id = 6 [default = 0];
    if (has_server_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 game_mode = 3;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

    // optional .CSODOTALobby.State state = 4 [default = UI];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (_has_bits_[8 / 32] & 48896u) {
    // optional string connect = 5;
    if (has_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connect());
    }

    // optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
    if (has_lobby_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lobby_type());
    }

    // optional bool allow_cheats = 13;
    if (has_allow_cheats()) {
      total_size += 1 + 1;
    }

    // optional bool fill_with_bots = 14;
    if (has_fill_with_bots()) {
      total_size += 1 + 1;
    }

    // optional bool intro_mode = 15;
    if (has_intro_mode()) {
      total_size += 1 + 1;
    }

    // optional string game_name = 16;
    if (has_game_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_name());
    }

    // optional uint32 tutorial_lesson = 18;
    if (has_tutorial_lesson()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tutorial_lesson());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 tournament_id = 19;
    if (has_tournament_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 tournament_game_id = 20;
    if (has_tournament_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_game_id());
    }

    // optional uint32 server_region = 21 [default = 0];
    if (has_server_region()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

    // optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
    if (has_game_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_state());
    }

    // optional uint32 num_spectators = 23;
    if (has_num_spectators()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_spectators());
    }

    // optional uint32 matchgroup = 25;
    if (has_matchgroup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchgroup());
    }

    // optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
    if (has_cm_pick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cm_pick());
    }

    // optional uint64 match_id = 30;
    if (has_match_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

  }
  if (_has_bits_[24 / 32] & 3607101440u) {
    // optional bool allow_spectating = 31 [default = true];
    if (has_allow_spectating()) {
      total_size += 2 + 1;
    }

    // optional .DOTABotDifficulty bot_difficulty = 36 [default = BOT_DIFFICULTY_HARD];
    if (has_bot_difficulty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty());
    }

    // optional .DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
    if (has_game_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_version());
    }

    // optional string pass_key = 39;
    if (has_pass_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass_key());
    }

    // optional uint32 leagueid = 42;
    if (has_leagueid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leagueid());
    }

    // optional uint32 penalty_level_radiant = 43 [default = 0];
    if (has_penalty_level_radiant()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penalty_level_radiant());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional uint32 penalty_level_dire = 44 [default = 0];
    if (has_penalty_level_dire()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penalty_level_dire());
    }

    // optional uint32 load_game_id = 45;
    if (has_load_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->load_game_id());
    }

    // optional uint32 series_type = 46;
    if (has_series_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

    // optional uint32 radiant_series_wins = 47;
    if (has_radiant_series_wins()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_series_wins());
    }

    // optional uint32 dire_series_wins = 48;
    if (has_dire_series_wins()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_series_wins());
    }

    // optional uint32 loot_generated = 49;
    if (has_loot_generated()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loot_generated());
    }

    // optional uint32 loot_awarded = 50;
    if (has_loot_awarded()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loot_awarded());
    }

    // optional bool allchat = 51 [default = false];
    if (has_allchat()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[40 / 32] & 57088u) {
    // optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
    if (has_dota_tv_delay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dota_tv_delay());
    }

    // optional string custom_game_mode = 54;
    if (has_custom_game_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_game_mode());
    }

    // optional string custom_map_name = 55;
    if (has_custom_map_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_map_name());
    }

    // optional uint32 custom_difficulty = 56;
    if (has_custom_difficulty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_difficulty());
    }

    // optional bool lan = 57;
    if (has_lan()) {
      total_size += 2 + 1;
    }

    // optional uint32 first_leaver_accountid = 59;
    if (has_first_leaver_accountid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_leaver_accountid());
    }

    // optional uint32 series_id = 60;
    if (has_series_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_id());
    }

  }
  if (_has_bits_[48 / 32] & 8192000u) {
    // optional bool low_priority = 61;
    if (has_low_priority()) {
      total_size += 2 + 1;
    }

    // optional .CDOTASaveGame save_game = 63;
    if (has_save_game()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->save_game_);
    }

    // optional bool first_blood_happened = 65;
    if (has_first_blood_happened()) {
      total_size += 2 + 1;
    }

    // optional .EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
    if (has_match_outcome()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_outcome());
    }

    // optional bool mass_disconnect = 67;
    if (has_mass_disconnect()) {
      total_size += 2 + 1;
    }

    // optional uint64 custom_game_id = 68;
    if (has_custom_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    // optional uint32 custom_min_players = 71;
    if (has_custom_min_players()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_min_players());
    }

    // optional uint32 custom_max_players = 72;
    if (has_custom_max_players()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_max_players());
    }

    // optional .PartnerAccountType partner_type = 73 [default = PARTNER_NONE];
    if (has_partner_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->partner_type());
    }

    // optional uint32 lan_host_ping_to_server_region = 74;
    if (has_lan_host_ping_to_server_region()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lan_host_ping_to_server_region());
    }

    // optional .DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
    if (has_visibility()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->visibility());
    }

    // optional fixed64 custom_game_crc = 76;
    if (has_custom_game_crc()) {
      total_size += 2 + 8;
    }

    // optional bool custom_game_auto_created_lobby = 77;
    if (has_custom_game_auto_created_lobby()) {
      total_size += 2 + 1;
    }

    // optional uint32 league_series_id = 78;
    if (has_league_series_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_series_id());
    }

  }
  if (_has_bits_[64 / 32] & 3u) {
    // optional uint32 league_game_id = 79;
    if (has_league_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_game_id());
    }

    // optional fixed32 custom_game_timestamp = 80;
    if (has_custom_game_timestamp()) {
      total_size += 2 + 4;
    }

  }
  // repeated .CDOTALobbyMember members = 2;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  // repeated .CDOTALobbyMember left_members = 7;
  total_size += 1 * this->left_members_size();
  for (int i = 0; i < this->left_members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->left_members(i));
  }

  // repeated fixed64 pending_invites = 10;
  {
    int data_size = 0;
    data_size = 8 * this->pending_invites_size();
    total_size += 1 * this->pending_invites_size() + data_size;
  }

  // repeated .CLobbyTeamDetails team_details = 17;
  total_size += 2 * this->team_details_size();
  for (int i = 0; i < this->team_details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->team_details(i));
  }

  // repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
  total_size += 2 * this->timed_reward_details_size();
  for (int i = 0; i < this->timed_reward_details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timed_reward_details(i));
  }

  // repeated .DOTABotDifficulty bot_slot_difficulty = 41;
  {
    int data_size = 0;
    for (int i = 0; i < this->bot_slot_difficulty_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->bot_slot_difficulty(i));
    }
    total_size += 2 * this->bot_slot_difficulty_size() + data_size;
  }

  // repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
  total_size += 2 * this->broadcast_channel_info_size();
  for (int i = 0; i < this->broadcast_channel_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->broadcast_channel_info(i));
  }

  // repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
  total_size += 2 * this->extra_messages_size();
  for (int i = 0; i < this->extra_messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extra_messages(i));
  }

  // repeated .EEvent active_ingame_events = 69;
  {
    int data_size = 0;
    for (int i = 0; i < this->active_ingame_events_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->active_ingame_events(i));
    }
    total_size += 2 * this->active_ingame_events_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTALobby::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CSODOTALobby* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSODOTALobby>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTALobby::MergeFrom(const CSODOTALobby& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  members_.MergeFrom(from.members_);
  left_members_.MergeFrom(from.left_members_);
  pending_invites_.MergeFrom(from.pending_invites_);
  team_details_.MergeFrom(from.team_details_);
  timed_reward_details_.MergeFrom(from.timed_reward_details_);
  bot_slot_difficulty_.MergeFrom(from.bot_slot_difficulty_);
  broadcast_channel_info_.MergeFrom(from.broadcast_channel_info_);
  extra_messages_.MergeFrom(from.extra_messages_);
  active_ingame_events_.MergeFrom(from.active_ingame_events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lobby_id()) {
      set_lobby_id(from.lobby_id());
    }
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_game_mode()) {
      set_game_mode(from.game_mode());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_connect()) {
      set_has_connect();
      connect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connect_);
    }
    if (from.has_lobby_type()) {
      set_lobby_type(from.lobby_type());
    }
    if (from.has_allow_cheats()) {
      set_allow_cheats(from.allow_cheats());
    }
    if (from.has_fill_with_bots()) {
      set_fill_with_bots(from.fill_with_bots());
    }
    if (from.has_intro_mode()) {
      set_intro_mode(from.intro_mode());
    }
    if (from.has_game_name()) {
      set_has_game_name();
      game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
    }
    if (from.has_tutorial_lesson()) {
      set_tutorial_lesson(from.tutorial_lesson());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tournament_id()) {
      set_tournament_id(from.tournament_id());
    }
    if (from.has_tournament_game_id()) {
      set_tournament_game_id(from.tournament_game_id());
    }
    if (from.has_server_region()) {
      set_server_region(from.server_region());
    }
    if (from.has_game_state()) {
      set_game_state(from.game_state());
    }
    if (from.has_num_spectators()) {
      set_num_spectators(from.num_spectators());
    }
    if (from.has_matchgroup()) {
      set_matchgroup(from.matchgroup());
    }
    if (from.has_cm_pick()) {
      set_cm_pick(from.cm_pick());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_allow_spectating()) {
      set_allow_spectating(from.allow_spectating());
    }
    if (from.has_bot_difficulty()) {
      set_bot_difficulty(from.bot_difficulty());
    }
    if (from.has_game_version()) {
      set_game_version(from.game_version());
    }
    if (from.has_pass_key()) {
      set_has_pass_key();
      pass_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_key_);
    }
    if (from.has_leagueid()) {
      set_leagueid(from.leagueid());
    }
    if (from.has_penalty_level_radiant()) {
      set_penalty_level_radiant(from.penalty_level_radiant());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_penalty_level_dire()) {
      set_penalty_level_dire(from.penalty_level_dire());
    }
    if (from.has_load_game_id()) {
      set_load_game_id(from.load_game_id());
    }
    if (from.has_series_type()) {
      set_series_type(from.series_type());
    }
    if (from.has_radiant_series_wins()) {
      set_radiant_series_wins(from.radiant_series_wins());
    }
    if (from.has_dire_series_wins()) {
      set_dire_series_wins(from.dire_series_wins());
    }
    if (from.has_loot_generated()) {
      set_loot_generated(from.loot_generated());
    }
    if (from.has_loot_awarded()) {
      set_loot_awarded(from.loot_awarded());
    }
    if (from.has_allchat()) {
      set_allchat(from.allchat());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_dota_tv_delay()) {
      set_dota_tv_delay(from.dota_tv_delay());
    }
    if (from.has_custom_game_mode()) {
      set_has_custom_game_mode();
      custom_game_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_game_mode_);
    }
    if (from.has_custom_map_name()) {
      set_has_custom_map_name();
      custom_map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_map_name_);
    }
    if (from.has_custom_difficulty()) {
      set_custom_difficulty(from.custom_difficulty());
    }
    if (from.has_lan()) {
      set_lan(from.lan());
    }
    if (from.has_first_leaver_accountid()) {
      set_first_leaver_accountid(from.first_leaver_accountid());
    }
    if (from.has_series_id()) {
      set_series_id(from.series_id());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_low_priority()) {
      set_low_priority(from.low_priority());
    }
    if (from.has_save_game()) {
      mutable_save_game()->::CDOTASaveGame::MergeFrom(from.save_game());
    }
    if (from.has_first_blood_happened()) {
      set_first_blood_happened(from.first_blood_happened());
    }
    if (from.has_match_outcome()) {
      set_match_outcome(from.match_outcome());
    }
    if (from.has_mass_disconnect()) {
      set_mass_disconnect(from.mass_disconnect());
    }
    if (from.has_custom_game_id()) {
      set_custom_game_id(from.custom_game_id());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_custom_min_players()) {
      set_custom_min_players(from.custom_min_players());
    }
    if (from.has_custom_max_players()) {
      set_custom_max_players(from.custom_max_players());
    }
    if (from.has_partner_type()) {
      set_partner_type(from.partner_type());
    }
    if (from.has_lan_host_ping_to_server_region()) {
      set_lan_host_ping_to_server_region(from.lan_host_ping_to_server_region());
    }
    if (from.has_visibility()) {
      set_visibility(from.visibility());
    }
    if (from.has_custom_game_crc()) {
      set_custom_game_crc(from.custom_game_crc());
    }
    if (from.has_custom_game_auto_created_lobby()) {
      set_custom_game_auto_created_lobby(from.custom_game_auto_created_lobby());
    }
    if (from.has_league_series_id()) {
      set_league_series_id(from.league_series_id());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_league_game_id()) {
      set_league_game_id(from.league_game_id());
    }
    if (from.has_custom_game_timestamp()) {
      set_custom_game_timestamp(from.custom_game_timestamp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CSODOTALobby::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTALobby::CopyFrom(const CSODOTALobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobby::IsInitialized() const {

  return true;
}

void CSODOTALobby::Swap(CSODOTALobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTALobby::InternalSwap(CSODOTALobby* other) {
  std::swap(lobby_id_, other->lobby_id_);
  members_.UnsafeArenaSwap(&other->members_);
  left_members_.UnsafeArenaSwap(&other->left_members_);
  std::swap(leader_id_, other->leader_id_);
  std::swap(server_id_, other->server_id_);
  std::swap(game_mode_, other->game_mode_);
  pending_invites_.UnsafeArenaSwap(&other->pending_invites_);
  std::swap(state_, other->state_);
  connect_.Swap(&other->connect_);
  std::swap(lobby_type_, other->lobby_type_);
  std::swap(allow_cheats_, other->allow_cheats_);
  std::swap(fill_with_bots_, other->fill_with_bots_);
  std::swap(intro_mode_, other->intro_mode_);
  game_name_.Swap(&other->game_name_);
  team_details_.UnsafeArenaSwap(&other->team_details_);
  std::swap(tutorial_lesson_, other->tutorial_lesson_);
  std::swap(tournament_id_, other->tournament_id_);
  std::swap(tournament_game_id_, other->tournament_game_id_);
  std::swap(server_region_, other->server_region_);
  std::swap(game_state_, other->game_state_);
  std::swap(num_spectators_, other->num_spectators_);
  std::swap(matchgroup_, other->matchgroup_);
  std::swap(cm_pick_, other->cm_pick_);
  std::swap(match_id_, other->match_id_);
  std::swap(allow_spectating_, other->allow_spectating_);
  std::swap(bot_difficulty_, other->bot_difficulty_);
  std::swap(game_version_, other->game_version_);
  timed_reward_details_.UnsafeArenaSwap(&other->timed_reward_details_);
  pass_key_.Swap(&other->pass_key_);
  bot_slot_difficulty_.UnsafeArenaSwap(&other->bot_slot_difficulty_);
  std::swap(leagueid_, other->leagueid_);
  std::swap(penalty_level_radiant_, other->penalty_level_radiant_);
  std::swap(penalty_level_dire_, other->penalty_level_dire_);
  std::swap(load_game_id_, other->load_game_id_);
  std::swap(series_type_, other->series_type_);
  std::swap(radiant_series_wins_, other->radiant_series_wins_);
  std::swap(dire_series_wins_, other->dire_series_wins_);
  std::swap(loot_generated_, other->loot_generated_);
  std::swap(loot_awarded_, other->loot_awarded_);
  std::swap(allchat_, other->allchat_);
  std::swap(dota_tv_delay_, other->dota_tv_delay_);
  custom_game_mode_.Swap(&other->custom_game_mode_);
  custom_map_name_.Swap(&other->custom_map_name_);
  std::swap(custom_difficulty_, other->custom_difficulty_);
  std::swap(lan_, other->lan_);
  broadcast_channel_info_.UnsafeArenaSwap(&other->broadcast_channel_info_);
  std::swap(first_leaver_accountid_, other->first_leaver_accountid_);
  std::swap(series_id_, other->series_id_);
  std::swap(low_priority_, other->low_priority_);
  extra_messages_.UnsafeArenaSwap(&other->extra_messages_);
  std::swap(save_game_, other->save_game_);
  std::swap(first_blood_happened_, other->first_blood_happened_);
  std::swap(match_outcome_, other->match_outcome_);
  std::swap(mass_disconnect_, other->mass_disconnect_);
  std::swap(custom_game_id_, other->custom_game_id_);
  active_ingame_events_.UnsafeArenaSwap(&other->active_ingame_events_);
  std::swap(custom_min_players_, other->custom_min_players_);
  std::swap(custom_max_players_, other->custom_max_players_);
  std::swap(partner_type_, other->partner_type_);
  std::swap(lan_host_ping_to_server_region_, other->lan_host_ping_to_server_region_);
  std::swap(visibility_, other->visibility_);
  std::swap(custom_game_crc_, other->custom_game_crc_);
  std::swap(custom_game_auto_created_lobby_, other->custom_game_auto_created_lobby_);
  std::swap(league_series_id_, other->league_series_id_);
  std::swap(league_game_id_, other->league_game_id_);
  std::swap(custom_game_timestamp_, other->custom_game_timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  std::swap(_has_bits_[2], other->_has_bits_[2]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSODOTALobby::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTALobby_descriptor_;
  metadata.reflection = CSODOTALobby_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSODOTALobby_CExtraMsg

// optional uint32 id = 1;
bool CSODOTALobby_CExtraMsg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSODOTALobby_CExtraMsg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CSODOTALobby_CExtraMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSODOTALobby_CExtraMsg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 CSODOTALobby_CExtraMsg::id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.CExtraMsg.id)
  return id_;
}
 void CSODOTALobby_CExtraMsg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.CExtraMsg.id)
}

// optional bytes contents = 2;
bool CSODOTALobby_CExtraMsg::has_contents() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSODOTALobby_CExtraMsg::set_has_contents() {
  _has_bits_[0] |= 0x00000002u;
}
void CSODOTALobby_CExtraMsg::clear_has_contents() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSODOTALobby_CExtraMsg::clear_contents() {
  contents_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contents();
}
 const ::std::string& CSODOTALobby_CExtraMsg::contents() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.CExtraMsg.contents)
  return contents_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSODOTALobby_CExtraMsg::set_contents(const ::std::string& value) {
  set_has_contents();
  contents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.CExtraMsg.contents)
}
 void CSODOTALobby_CExtraMsg::set_contents(const char* value) {
  set_has_contents();
  contents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.CExtraMsg.contents)
}
 void CSODOTALobby_CExtraMsg::set_contents(const void* value, size_t size) {
  set_has_contents();
  contents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.CExtraMsg.contents)
}
 ::std::string* CSODOTALobby_CExtraMsg::mutable_contents() {
  set_has_contents();
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.CExtraMsg.contents)
  return contents_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CSODOTALobby_CExtraMsg::release_contents() {
  clear_has_contents();
  return contents_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSODOTALobby_CExtraMsg::set_allocated_contents(::std::string* contents) {
  if (contents != NULL) {
    set_has_contents();
  } else {
    clear_has_contents();
  }
  contents_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contents);
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.CExtraMsg.contents)
}

// -------------------------------------------------------------------

// CSODOTALobby

// optional uint64 lobby_id = 1;
bool CSODOTALobby::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSODOTALobby::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CSODOTALobby::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSODOTALobby::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
 ::google::protobuf::uint64 CSODOTALobby::lobby_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.lobby_id)
  return lobby_id_;
}
 void CSODOTALobby::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.lobby_id)
}

// repeated .CDOTALobbyMember members = 2;
int CSODOTALobby::members_size() const {
  return members_.size();
}
void CSODOTALobby::clear_members() {
  members_.Clear();
}
const ::CDOTALobbyMember& CSODOTALobby::members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.members)
  return members_.Get(index);
}
::CDOTALobbyMember* CSODOTALobby::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.members)
  return members_.Mutable(index);
}
::CDOTALobbyMember* CSODOTALobby::add_members() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >*
CSODOTALobby::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >&
CSODOTALobby::members() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.members)
  return members_;
}

// repeated .CDOTALobbyMember left_members = 7;
int CSODOTALobby::left_members_size() const {
  return left_members_.size();
}
void CSODOTALobby::clear_left_members() {
  left_members_.Clear();
}
const ::CDOTALobbyMember& CSODOTALobby::left_members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.left_members)
  return left_members_.Get(index);
}
::CDOTALobbyMember* CSODOTALobby::mutable_left_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.left_members)
  return left_members_.Mutable(index);
}
::CDOTALobbyMember* CSODOTALobby::add_left_members() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.left_members)
  return left_members_.Add();
}
::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >*
CSODOTALobby::mutable_left_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.left_members)
  return &left_members_;
}
const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >&
CSODOTALobby::left_members() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.left_members)
  return left_members_;
}

// optional fixed64 leader_id = 11;
bool CSODOTALobby::has_leader_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSODOTALobby::set_has_leader_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CSODOTALobby::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSODOTALobby::clear_leader_id() {
  leader_id_ = GOOGLE_ULONGLONG(0);
  clear_has_leader_id();
}
 ::google::protobuf::uint64 CSODOTALobby::leader_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.leader_id)
  return leader_id_;
}
 void CSODOTALobby::set_leader_id(::google::protobuf::uint64 value) {
  set_has_leader_id();
  leader_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.leader_id)
}

// optional fixed64 server_id = 6 [default = 0];
bool CSODOTALobby::has_server_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSODOTALobby::set_has_server_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CSODOTALobby::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSODOTALobby::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
 ::google::protobuf::uint64 CSODOTALobby::server_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.server_id)
  return server_id_;
}
 void CSODOTALobby::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.server_id)
}

// optional uint32 game_mode = 3;
bool CSODOTALobby::has_game_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSODOTALobby::set_has_game_mode() {
  _has_bits_[0] |= 0x00000020u;
}
void CSODOTALobby::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSODOTALobby::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
 ::google::protobuf::uint32 CSODOTALobby::game_mode() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.game_mode)
  return game_mode_;
}
 void CSODOTALobby::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.game_mode)
}

// repeated fixed64 pending_invites = 10;
int CSODOTALobby::pending_invites_size() const {
  return pending_invites_.size();
}
void CSODOTALobby::clear_pending_invites() {
  pending_invites_.Clear();
}
 ::google::protobuf::uint64 CSODOTALobby::pending_invites(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.pending_invites)
  return pending_invites_.Get(index);
}
 void CSODOTALobby::set_pending_invites(int index, ::google::protobuf::uint64 value) {
  pending_invites_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.pending_invites)
}
 void CSODOTALobby::add_pending_invites(::google::protobuf::uint64 value) {
  pending_invites_.Add(value);
  // @@protoc_insertion_point(field_add:CSODOTALobby.pending_invites)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CSODOTALobby::pending_invites() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.pending_invites)
  return pending_invites_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CSODOTALobby::mutable_pending_invites() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.pending_invites)
  return &pending_invites_;
}

// optional .CSODOTALobby.State state = 4 [default = UI];
bool CSODOTALobby::has_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CSODOTALobby::set_has_state() {
  _has_bits_[0] |= 0x00000080u;
}
void CSODOTALobby::clear_has_state() {
  _has_bits_[0] &= ~0x00000080u;
}
void CSODOTALobby::clear_state() {
  state_ = 0;
  clear_has_state();
}
 ::CSODOTALobby_State CSODOTALobby::state() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.state)
  return static_cast< ::CSODOTALobby_State >(state_);
}
 void CSODOTALobby::set_state(::CSODOTALobby_State value) {
  assert(::CSODOTALobby_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.state)
}

// optional string connect = 5;
bool CSODOTALobby::has_connect() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CSODOTALobby::set_has_connect() {
  _has_bits_[0] |= 0x00000100u;
}
void CSODOTALobby::clear_has_connect() {
  _has_bits_[0] &= ~0x00000100u;
}
void CSODOTALobby::clear_connect() {
  connect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_connect();
}
 const ::std::string& CSODOTALobby::connect() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.connect)
  return connect_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSODOTALobby::set_connect(const ::std::string& value) {
  set_has_connect();
  connect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.connect)
}
 void CSODOTALobby::set_connect(const char* value) {
  set_has_connect();
  connect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.connect)
}
 void CSODOTALobby::set_connect(const char* value, size_t size) {
  set_has_connect();
  connect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.connect)
}
 ::std::string* CSODOTALobby::mutable_connect() {
  set_has_connect();
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.connect)
  return connect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CSODOTALobby::release_connect() {
  clear_has_connect();
  return connect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSODOTALobby::set_allocated_connect(::std::string* connect) {
  if (connect != NULL) {
    set_has_connect();
  } else {
    clear_has_connect();
  }
  connect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connect);
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.connect)
}

// optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
bool CSODOTALobby::has_lobby_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CSODOTALobby::set_has_lobby_type() {
  _has_bits_[0] |= 0x00000200u;
}
void CSODOTALobby::clear_has_lobby_type() {
  _has_bits_[0] &= ~0x00000200u;
}
void CSODOTALobby::clear_lobby_type() {
  lobby_type_ = -1;
  clear_has_lobby_type();
}
 ::CSODOTALobby_LobbyType CSODOTALobby::lobby_type() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.lobby_type)
  return static_cast< ::CSODOTALobby_LobbyType >(lobby_type_);
}
 void CSODOTALobby::set_lobby_type(::CSODOTALobby_LobbyType value) {
  assert(::CSODOTALobby_LobbyType_IsValid(value));
  set_has_lobby_type();
  lobby_type_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.lobby_type)
}

// optional bool allow_cheats = 13;
bool CSODOTALobby::has_allow_cheats() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CSODOTALobby::set_has_allow_cheats() {
  _has_bits_[0] |= 0x00000400u;
}
void CSODOTALobby::clear_has_allow_cheats() {
  _has_bits_[0] &= ~0x00000400u;
}
void CSODOTALobby::clear_allow_cheats() {
  allow_cheats_ = false;
  clear_has_allow_cheats();
}
 bool CSODOTALobby::allow_cheats() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.allow_cheats)
  return allow_cheats_;
}
 void CSODOTALobby::set_allow_cheats(bool value) {
  set_has_allow_cheats();
  allow_cheats_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.allow_cheats)
}

// optional bool fill_with_bots = 14;
bool CSODOTALobby::has_fill_with_bots() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CSODOTALobby::set_has_fill_with_bots() {
  _has_bits_[0] |= 0x00000800u;
}
void CSODOTALobby::clear_has_fill_with_bots() {
  _has_bits_[0] &= ~0x00000800u;
}
void CSODOTALobby::clear_fill_with_bots() {
  fill_with_bots_ = false;
  clear_has_fill_with_bots();
}
 bool CSODOTALobby::fill_with_bots() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.fill_with_bots)
  return fill_with_bots_;
}
 void CSODOTALobby::set_fill_with_bots(bool value) {
  set_has_fill_with_bots();
  fill_with_bots_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.fill_with_bots)
}

// optional bool intro_mode = 15;
bool CSODOTALobby::has_intro_mode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CSODOTALobby::set_has_intro_mode() {
  _has_bits_[0] |= 0x00001000u;
}
void CSODOTALobby::clear_has_intro_mode() {
  _has_bits_[0] &= ~0x00001000u;
}
void CSODOTALobby::clear_intro_mode() {
  intro_mode_ = false;
  clear_has_intro_mode();
}
 bool CSODOTALobby::intro_mode() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.intro_mode)
  return intro_mode_;
}
 void CSODOTALobby::set_intro_mode(bool value) {
  set_has_intro_mode();
  intro_mode_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.intro_mode)
}

// optional string game_name = 16;
bool CSODOTALobby::has_game_name() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CSODOTALobby::set_has_game_name() {
  _has_bits_[0] |= 0x00002000u;
}
void CSODOTALobby::clear_has_game_name() {
  _has_bits_[0] &= ~0x00002000u;
}
void CSODOTALobby::clear_game_name() {
  game_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_name();
}
 const ::std::string& CSODOTALobby::game_name() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.game_name)
  return game_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSODOTALobby::set_game_name(const ::std::string& value) {
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.game_name)
}
 void CSODOTALobby::set_game_name(const char* value) {
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.game_name)
}
 void CSODOTALobby::set_game_name(const char* value, size_t size) {
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.game_name)
}
 ::std::string* CSODOTALobby::mutable_game_name() {
  set_has_game_name();
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.game_name)
  return game_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CSODOTALobby::release_game_name() {
  clear_has_game_name();
  return game_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSODOTALobby::set_allocated_game_name(::std::string* game_name) {
  if (game_name != NULL) {
    set_has_game_name();
  } else {
    clear_has_game_name();
  }
  game_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_name);
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.game_name)
}

// repeated .CLobbyTeamDetails team_details = 17;
int CSODOTALobby::team_details_size() const {
  return team_details_.size();
}
void CSODOTALobby::clear_team_details() {
  team_details_.Clear();
}
const ::CLobbyTeamDetails& CSODOTALobby::team_details(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.team_details)
  return team_details_.Get(index);
}
::CLobbyTeamDetails* CSODOTALobby::mutable_team_details(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.team_details)
  return team_details_.Mutable(index);
}
::CLobbyTeamDetails* CSODOTALobby::add_team_details() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.team_details)
  return team_details_.Add();
}
::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >*
CSODOTALobby::mutable_team_details() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.team_details)
  return &team_details_;
}
const ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >&
CSODOTALobby::team_details() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.team_details)
  return team_details_;
}

// optional uint32 tutorial_lesson = 18;
bool CSODOTALobby::has_tutorial_lesson() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CSODOTALobby::set_has_tutorial_lesson() {
  _has_bits_[0] |= 0x00008000u;
}
void CSODOTALobby::clear_has_tutorial_lesson() {
  _has_bits_[0] &= ~0x00008000u;
}
void CSODOTALobby::clear_tutorial_lesson() {
  tutorial_lesson_ = 0u;
  clear_has_tutorial_lesson();
}
 ::google::protobuf::uint32 CSODOTALobby::tutorial_lesson() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.tutorial_lesson)
  return tutorial_lesson_;
}
 void CSODOTALobby::set_tutorial_lesson(::google::protobuf::uint32 value) {
  set_has_tutorial_lesson();
  tutorial_lesson_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.tutorial_lesson)
}

// optional uint32 tournament_id = 19;
bool CSODOTALobby::has_tournament_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CSODOTALobby::set_has_tournament_id() {
  _has_bits_[0] |= 0x00010000u;
}
void CSODOTALobby::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00010000u;
}
void CSODOTALobby::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
 ::google::protobuf::uint32 CSODOTALobby::tournament_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.tournament_id)
  return tournament_id_;
}
 void CSODOTALobby::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.tournament_id)
}

// optional uint32 tournament_game_id = 20;
bool CSODOTALobby::has_tournament_game_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CSODOTALobby::set_has_tournament_game_id() {
  _has_bits_[0] |= 0x00020000u;
}
void CSODOTALobby::clear_has_tournament_game_id() {
  _has_bits_[0] &= ~0x00020000u;
}
void CSODOTALobby::clear_tournament_game_id() {
  tournament_game_id_ = 0u;
  clear_has_tournament_game_id();
}
 ::google::protobuf::uint32 CSODOTALobby::tournament_game_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.tournament_game_id)
  return tournament_game_id_;
}
 void CSODOTALobby::set_tournament_game_id(::google::protobuf::uint32 value) {
  set_has_tournament_game_id();
  tournament_game_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.tournament_game_id)
}

// optional uint32 server_region = 21 [default = 0];
bool CSODOTALobby::has_server_region() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CSODOTALobby::set_has_server_region() {
  _has_bits_[0] |= 0x00040000u;
}
void CSODOTALobby::clear_has_server_region() {
  _has_bits_[0] &= ~0x00040000u;
}
void CSODOTALobby::clear_server_region() {
  server_region_ = 0u;
  clear_has_server_region();
}
 ::google::protobuf::uint32 CSODOTALobby::server_region() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.server_region)
  return server_region_;
}
 void CSODOTALobby::set_server_region(::google::protobuf::uint32 value) {
  set_has_server_region();
  server_region_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.server_region)
}

// optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
bool CSODOTALobby::has_game_state() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CSODOTALobby::set_has_game_state() {
  _has_bits_[0] |= 0x00080000u;
}
void CSODOTALobby::clear_has_game_state() {
  _has_bits_[0] &= ~0x00080000u;
}
void CSODOTALobby::clear_game_state() {
  game_state_ = 0;
  clear_has_game_state();
}
 ::DOTA_GameState CSODOTALobby::game_state() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.game_state)
  return static_cast< ::DOTA_GameState >(game_state_);
}
 void CSODOTALobby::set_game_state(::DOTA_GameState value) {
  assert(::DOTA_GameState_IsValid(value));
  set_has_game_state();
  game_state_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.game_state)
}

// optional uint32 num_spectators = 23;
bool CSODOTALobby::has_num_spectators() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CSODOTALobby::set_has_num_spectators() {
  _has_bits_[0] |= 0x00100000u;
}
void CSODOTALobby::clear_has_num_spectators() {
  _has_bits_[0] &= ~0x00100000u;
}
void CSODOTALobby::clear_num_spectators() {
  num_spectators_ = 0u;
  clear_has_num_spectators();
}
 ::google::protobuf::uint32 CSODOTALobby::num_spectators() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.num_spectators)
  return num_spectators_;
}
 void CSODOTALobby::set_num_spectators(::google::protobuf::uint32 value) {
  set_has_num_spectators();
  num_spectators_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.num_spectators)
}

// optional uint32 matchgroup = 25;
bool CSODOTALobby::has_matchgroup() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CSODOTALobby::set_has_matchgroup() {
  _has_bits_[0] |= 0x00200000u;
}
void CSODOTALobby::clear_has_matchgroup() {
  _has_bits_[0] &= ~0x00200000u;
}
void CSODOTALobby::clear_matchgroup() {
  matchgroup_ = 0u;
  clear_has_matchgroup();
}
 ::google::protobuf::uint32 CSODOTALobby::matchgroup() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.matchgroup)
  return matchgroup_;
}
 void CSODOTALobby::set_matchgroup(::google::protobuf::uint32 value) {
  set_has_matchgroup();
  matchgroup_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.matchgroup)
}

// optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
bool CSODOTALobby::has_cm_pick() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CSODOTALobby::set_has_cm_pick() {
  _has_bits_[0] |= 0x00400000u;
}
void CSODOTALobby::clear_has_cm_pick() {
  _has_bits_[0] &= ~0x00400000u;
}
void CSODOTALobby::clear_cm_pick() {
  cm_pick_ = 0;
  clear_has_cm_pick();
}
 ::DOTA_CM_PICK CSODOTALobby::cm_pick() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.cm_pick)
  return static_cast< ::DOTA_CM_PICK >(cm_pick_);
}
 void CSODOTALobby::set_cm_pick(::DOTA_CM_PICK value) {
  assert(::DOTA_CM_PICK_IsValid(value));
  set_has_cm_pick();
  cm_pick_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.cm_pick)
}

// optional uint64 match_id = 30;
bool CSODOTALobby::has_match_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void CSODOTALobby::set_has_match_id() {
  _has_bits_[0] |= 0x00800000u;
}
void CSODOTALobby::clear_has_match_id() {
  _has_bits_[0] &= ~0x00800000u;
}
void CSODOTALobby::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
 ::google::protobuf::uint64 CSODOTALobby::match_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.match_id)
  return match_id_;
}
 void CSODOTALobby::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.match_id)
}

// optional bool allow_spectating = 31 [default = true];
bool CSODOTALobby::has_allow_spectating() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void CSODOTALobby::set_has_allow_spectating() {
  _has_bits_[0] |= 0x01000000u;
}
void CSODOTALobby::clear_has_allow_spectating() {
  _has_bits_[0] &= ~0x01000000u;
}
void CSODOTALobby::clear_allow_spectating() {
  allow_spectating_ = true;
  clear_has_allow_spectating();
}
 bool CSODOTALobby::allow_spectating() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.allow_spectating)
  return allow_spectating_;
}
 void CSODOTALobby::set_allow_spectating(bool value) {
  set_has_allow_spectating();
  allow_spectating_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.allow_spectating)
}

// optional .DOTABotDifficulty bot_difficulty = 36 [default = BOT_DIFFICULTY_HARD];
bool CSODOTALobby::has_bot_difficulty() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void CSODOTALobby::set_has_bot_difficulty() {
  _has_bits_[0] |= 0x02000000u;
}
void CSODOTALobby::clear_has_bot_difficulty() {
  _has_bits_[0] &= ~0x02000000u;
}
void CSODOTALobby::clear_bot_difficulty() {
  bot_difficulty_ = 3;
  clear_has_bot_difficulty();
}
 ::DOTABotDifficulty CSODOTALobby::bot_difficulty() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.bot_difficulty)
  return static_cast< ::DOTABotDifficulty >(bot_difficulty_);
}
 void CSODOTALobby::set_bot_difficulty(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty();
  bot_difficulty_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.bot_difficulty)
}

// optional .DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
bool CSODOTALobby::has_game_version() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void CSODOTALobby::set_has_game_version() {
  _has_bits_[0] |= 0x04000000u;
}
void CSODOTALobby::clear_has_game_version() {
  _has_bits_[0] &= ~0x04000000u;
}
void CSODOTALobby::clear_game_version() {
  game_version_ = 0;
  clear_has_game_version();
}
 ::DOTAGameVersion CSODOTALobby::game_version() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.game_version)
  return static_cast< ::DOTAGameVersion >(game_version_);
}
 void CSODOTALobby::set_game_version(::DOTAGameVersion value) {
  assert(::DOTAGameVersion_IsValid(value));
  set_has_game_version();
  game_version_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.game_version)
}

// repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
int CSODOTALobby::timed_reward_details_size() const {
  return timed_reward_details_.size();
}
void CSODOTALobby::clear_timed_reward_details() {
  timed_reward_details_.Clear();
}
const ::CLobbyTimedRewardDetails& CSODOTALobby::timed_reward_details(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.timed_reward_details)
  return timed_reward_details_.Get(index);
}
::CLobbyTimedRewardDetails* CSODOTALobby::mutable_timed_reward_details(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.timed_reward_details)
  return timed_reward_details_.Mutable(index);
}
::CLobbyTimedRewardDetails* CSODOTALobby::add_timed_reward_details() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.timed_reward_details)
  return timed_reward_details_.Add();
}
::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >*
CSODOTALobby::mutable_timed_reward_details() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.timed_reward_details)
  return &timed_reward_details_;
}
const ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >&
CSODOTALobby::timed_reward_details() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.timed_reward_details)
  return timed_reward_details_;
}

// optional string pass_key = 39;
bool CSODOTALobby::has_pass_key() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void CSODOTALobby::set_has_pass_key() {
  _has_bits_[0] |= 0x10000000u;
}
void CSODOTALobby::clear_has_pass_key() {
  _has_bits_[0] &= ~0x10000000u;
}
void CSODOTALobby::clear_pass_key() {
  pass_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pass_key();
}
 const ::std::string& CSODOTALobby::pass_key() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.pass_key)
  return pass_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSODOTALobby::set_pass_key(const ::std::string& value) {
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.pass_key)
}
 void CSODOTALobby::set_pass_key(const char* value) {
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.pass_key)
}
 void CSODOTALobby::set_pass_key(const char* value, size_t size) {
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.pass_key)
}
 ::std::string* CSODOTALobby::mutable_pass_key() {
  set_has_pass_key();
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.pass_key)
  return pass_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CSODOTALobby::release_pass_key() {
  clear_has_pass_key();
  return pass_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSODOTALobby::set_allocated_pass_key(::std::string* pass_key) {
  if (pass_key != NULL) {
    set_has_pass_key();
  } else {
    clear_has_pass_key();
  }
  pass_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass_key);
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.pass_key)
}

// repeated .DOTABotDifficulty bot_slot_difficulty = 41;
int CSODOTALobby::bot_slot_difficulty_size() const {
  return bot_slot_difficulty_.size();
}
void CSODOTALobby::clear_bot_slot_difficulty() {
  bot_slot_difficulty_.Clear();
}
 ::DOTABotDifficulty CSODOTALobby::bot_slot_difficulty(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.bot_slot_difficulty)
  return static_cast< ::DOTABotDifficulty >(bot_slot_difficulty_.Get(index));
}
 void CSODOTALobby::set_bot_slot_difficulty(int index, ::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  bot_slot_difficulty_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.bot_slot_difficulty)
}
 void CSODOTALobby::add_bot_slot_difficulty(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  bot_slot_difficulty_.Add(value);
  // @@protoc_insertion_point(field_add:CSODOTALobby.bot_slot_difficulty)
}
 const ::google::protobuf::RepeatedField<int>&
CSODOTALobby::bot_slot_difficulty() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.bot_slot_difficulty)
  return bot_slot_difficulty_;
}
 ::google::protobuf::RepeatedField<int>*
CSODOTALobby::mutable_bot_slot_difficulty() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.bot_slot_difficulty)
  return &bot_slot_difficulty_;
}

// optional uint32 leagueid = 42;
bool CSODOTALobby::has_leagueid() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void CSODOTALobby::set_has_leagueid() {
  _has_bits_[0] |= 0x40000000u;
}
void CSODOTALobby::clear_has_leagueid() {
  _has_bits_[0] &= ~0x40000000u;
}
void CSODOTALobby::clear_leagueid() {
  leagueid_ = 0u;
  clear_has_leagueid();
}
 ::google::protobuf::uint32 CSODOTALobby::leagueid() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.leagueid)
  return leagueid_;
}
 void CSODOTALobby::set_leagueid(::google::protobuf::uint32 value) {
  set_has_leagueid();
  leagueid_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.leagueid)
}

// optional uint32 penalty_level_radiant = 43 [default = 0];
bool CSODOTALobby::has_penalty_level_radiant() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void CSODOTALobby::set_has_penalty_level_radiant() {
  _has_bits_[0] |= 0x80000000u;
}
void CSODOTALobby::clear_has_penalty_level_radiant() {
  _has_bits_[0] &= ~0x80000000u;
}
void CSODOTALobby::clear_penalty_level_radiant() {
  penalty_level_radiant_ = 0u;
  clear_has_penalty_level_radiant();
}
 ::google::protobuf::uint32 CSODOTALobby::penalty_level_radiant() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.penalty_level_radiant)
  return penalty_level_radiant_;
}
 void CSODOTALobby::set_penalty_level_radiant(::google::protobuf::uint32 value) {
  set_has_penalty_level_radiant();
  penalty_level_radiant_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.penalty_level_radiant)
}

// optional uint32 penalty_level_dire = 44 [default = 0];
bool CSODOTALobby::has_penalty_level_dire() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void CSODOTALobby::set_has_penalty_level_dire() {
  _has_bits_[1] |= 0x00000001u;
}
void CSODOTALobby::clear_has_penalty_level_dire() {
  _has_bits_[1] &= ~0x00000001u;
}
void CSODOTALobby::clear_penalty_level_dire() {
  penalty_level_dire_ = 0u;
  clear_has_penalty_level_dire();
}
 ::google::protobuf::uint32 CSODOTALobby::penalty_level_dire() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.penalty_level_dire)
  return penalty_level_dire_;
}
 void CSODOTALobby::set_penalty_level_dire(::google::protobuf::uint32 value) {
  set_has_penalty_level_dire();
  penalty_level_dire_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.penalty_level_dire)
}

// optional uint32 load_game_id = 45;
bool CSODOTALobby::has_load_game_id() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void CSODOTALobby::set_has_load_game_id() {
  _has_bits_[1] |= 0x00000002u;
}
void CSODOTALobby::clear_has_load_game_id() {
  _has_bits_[1] &= ~0x00000002u;
}
void CSODOTALobby::clear_load_game_id() {
  load_game_id_ = 0u;
  clear_has_load_game_id();
}
 ::google::protobuf::uint32 CSODOTALobby::load_game_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.load_game_id)
  return load_game_id_;
}
 void CSODOTALobby::set_load_game_id(::google::protobuf::uint32 value) {
  set_has_load_game_id();
  load_game_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.load_game_id)
}

// optional uint32 series_type = 46;
bool CSODOTALobby::has_series_type() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void CSODOTALobby::set_has_series_type() {
  _has_bits_[1] |= 0x00000004u;
}
void CSODOTALobby::clear_has_series_type() {
  _has_bits_[1] &= ~0x00000004u;
}
void CSODOTALobby::clear_series_type() {
  series_type_ = 0u;
  clear_has_series_type();
}
 ::google::protobuf::uint32 CSODOTALobby::series_type() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.series_type)
  return series_type_;
}
 void CSODOTALobby::set_series_type(::google::protobuf::uint32 value) {
  set_has_series_type();
  series_type_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.series_type)
}

// optional uint32 radiant_series_wins = 47;
bool CSODOTALobby::has_radiant_series_wins() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void CSODOTALobby::set_has_radiant_series_wins() {
  _has_bits_[1] |= 0x00000008u;
}
void CSODOTALobby::clear_has_radiant_series_wins() {
  _has_bits_[1] &= ~0x00000008u;
}
void CSODOTALobby::clear_radiant_series_wins() {
  radiant_series_wins_ = 0u;
  clear_has_radiant_series_wins();
}
 ::google::protobuf::uint32 CSODOTALobby::radiant_series_wins() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.radiant_series_wins)
  return radiant_series_wins_;
}
 void CSODOTALobby::set_radiant_series_wins(::google::protobuf::uint32 value) {
  set_has_radiant_series_wins();
  radiant_series_wins_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.radiant_series_wins)
}

// optional uint32 dire_series_wins = 48;
bool CSODOTALobby::has_dire_series_wins() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void CSODOTALobby::set_has_dire_series_wins() {
  _has_bits_[1] |= 0x00000010u;
}
void CSODOTALobby::clear_has_dire_series_wins() {
  _has_bits_[1] &= ~0x00000010u;
}
void CSODOTALobby::clear_dire_series_wins() {
  dire_series_wins_ = 0u;
  clear_has_dire_series_wins();
}
 ::google::protobuf::uint32 CSODOTALobby::dire_series_wins() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.dire_series_wins)
  return dire_series_wins_;
}
 void CSODOTALobby::set_dire_series_wins(::google::protobuf::uint32 value) {
  set_has_dire_series_wins();
  dire_series_wins_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.dire_series_wins)
}

// optional uint32 loot_generated = 49;
bool CSODOTALobby::has_loot_generated() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void CSODOTALobby::set_has_loot_generated() {
  _has_bits_[1] |= 0x00000020u;
}
void CSODOTALobby::clear_has_loot_generated() {
  _has_bits_[1] &= ~0x00000020u;
}
void CSODOTALobby::clear_loot_generated() {
  loot_generated_ = 0u;
  clear_has_loot_generated();
}
 ::google::protobuf::uint32 CSODOTALobby::loot_generated() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.loot_generated)
  return loot_generated_;
}
 void CSODOTALobby::set_loot_generated(::google::protobuf::uint32 value) {
  set_has_loot_generated();
  loot_generated_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.loot_generated)
}

// optional uint32 loot_awarded = 50;
bool CSODOTALobby::has_loot_awarded() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void CSODOTALobby::set_has_loot_awarded() {
  _has_bits_[1] |= 0x00000040u;
}
void CSODOTALobby::clear_has_loot_awarded() {
  _has_bits_[1] &= ~0x00000040u;
}
void CSODOTALobby::clear_loot_awarded() {
  loot_awarded_ = 0u;
  clear_has_loot_awarded();
}
 ::google::protobuf::uint32 CSODOTALobby::loot_awarded() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.loot_awarded)
  return loot_awarded_;
}
 void CSODOTALobby::set_loot_awarded(::google::protobuf::uint32 value) {
  set_has_loot_awarded();
  loot_awarded_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.loot_awarded)
}

// optional bool allchat = 51 [default = false];
bool CSODOTALobby::has_allchat() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void CSODOTALobby::set_has_allchat() {
  _has_bits_[1] |= 0x00000080u;
}
void CSODOTALobby::clear_has_allchat() {
  _has_bits_[1] &= ~0x00000080u;
}
void CSODOTALobby::clear_allchat() {
  allchat_ = false;
  clear_has_allchat();
}
 bool CSODOTALobby::allchat() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.allchat)
  return allchat_;
}
 void CSODOTALobby::set_allchat(bool value) {
  set_has_allchat();
  allchat_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.allchat)
}

// optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
bool CSODOTALobby::has_dota_tv_delay() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void CSODOTALobby::set_has_dota_tv_delay() {
  _has_bits_[1] |= 0x00000100u;
}
void CSODOTALobby::clear_has_dota_tv_delay() {
  _has_bits_[1] &= ~0x00000100u;
}
void CSODOTALobby::clear_dota_tv_delay() {
  dota_tv_delay_ = 0;
  clear_has_dota_tv_delay();
}
 ::LobbyDotaTVDelay CSODOTALobby::dota_tv_delay() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.dota_tv_delay)
  return static_cast< ::LobbyDotaTVDelay >(dota_tv_delay_);
}
 void CSODOTALobby::set_dota_tv_delay(::LobbyDotaTVDelay value) {
  assert(::LobbyDotaTVDelay_IsValid(value));
  set_has_dota_tv_delay();
  dota_tv_delay_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.dota_tv_delay)
}

// optional string custom_game_mode = 54;
bool CSODOTALobby::has_custom_game_mode() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void CSODOTALobby::set_has_custom_game_mode() {
  _has_bits_[1] |= 0x00000200u;
}
void CSODOTALobby::clear_has_custom_game_mode() {
  _has_bits_[1] &= ~0x00000200u;
}
void CSODOTALobby::clear_custom_game_mode() {
  custom_game_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_custom_game_mode();
}
 const ::std::string& CSODOTALobby::custom_game_mode() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_mode)
  return custom_game_mode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSODOTALobby::set_custom_game_mode(const ::std::string& value) {
  set_has_custom_game_mode();
  custom_game_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_mode)
}
 void CSODOTALobby::set_custom_game_mode(const char* value) {
  set_has_custom_game_mode();
  custom_game_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.custom_game_mode)
}
 void CSODOTALobby::set_custom_game_mode(const char* value, size_t size) {
  set_has_custom_game_mode();
  custom_game_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.custom_game_mode)
}
 ::std::string* CSODOTALobby::mutable_custom_game_mode() {
  set_has_custom_game_mode();
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.custom_game_mode)
  return custom_game_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CSODOTALobby::release_custom_game_mode() {
  clear_has_custom_game_mode();
  return custom_game_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSODOTALobby::set_allocated_custom_game_mode(::std::string* custom_game_mode) {
  if (custom_game_mode != NULL) {
    set_has_custom_game_mode();
  } else {
    clear_has_custom_game_mode();
  }
  custom_game_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_game_mode);
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.custom_game_mode)
}

// optional string custom_map_name = 55;
bool CSODOTALobby::has_custom_map_name() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void CSODOTALobby::set_has_custom_map_name() {
  _has_bits_[1] |= 0x00000400u;
}
void CSODOTALobby::clear_has_custom_map_name() {
  _has_bits_[1] &= ~0x00000400u;
}
void CSODOTALobby::clear_custom_map_name() {
  custom_map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_custom_map_name();
}
 const ::std::string& CSODOTALobby::custom_map_name() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_map_name)
  return custom_map_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSODOTALobby::set_custom_map_name(const ::std::string& value) {
  set_has_custom_map_name();
  custom_map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_map_name)
}
 void CSODOTALobby::set_custom_map_name(const char* value) {
  set_has_custom_map_name();
  custom_map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.custom_map_name)
}
 void CSODOTALobby::set_custom_map_name(const char* value, size_t size) {
  set_has_custom_map_name();
  custom_map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.custom_map_name)
}
 ::std::string* CSODOTALobby::mutable_custom_map_name() {
  set_has_custom_map_name();
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.custom_map_name)
  return custom_map_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CSODOTALobby::release_custom_map_name() {
  clear_has_custom_map_name();
  return custom_map_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSODOTALobby::set_allocated_custom_map_name(::std::string* custom_map_name) {
  if (custom_map_name != NULL) {
    set_has_custom_map_name();
  } else {
    clear_has_custom_map_name();
  }
  custom_map_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_map_name);
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.custom_map_name)
}

// optional uint32 custom_difficulty = 56;
bool CSODOTALobby::has_custom_difficulty() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void CSODOTALobby::set_has_custom_difficulty() {
  _has_bits_[1] |= 0x00000800u;
}
void CSODOTALobby::clear_has_custom_difficulty() {
  _has_bits_[1] &= ~0x00000800u;
}
void CSODOTALobby::clear_custom_difficulty() {
  custom_difficulty_ = 0u;
  clear_has_custom_difficulty();
}
 ::google::protobuf::uint32 CSODOTALobby::custom_difficulty() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_difficulty)
  return custom_difficulty_;
}
 void CSODOTALobby::set_custom_difficulty(::google::protobuf::uint32 value) {
  set_has_custom_difficulty();
  custom_difficulty_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_difficulty)
}

// optional bool lan = 57;
bool CSODOTALobby::has_lan() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void CSODOTALobby::set_has_lan() {
  _has_bits_[1] |= 0x00001000u;
}
void CSODOTALobby::clear_has_lan() {
  _has_bits_[1] &= ~0x00001000u;
}
void CSODOTALobby::clear_lan() {
  lan_ = false;
  clear_has_lan();
}
 bool CSODOTALobby::lan() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.lan)
  return lan_;
}
 void CSODOTALobby::set_lan(bool value) {
  set_has_lan();
  lan_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.lan)
}

// repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
int CSODOTALobby::broadcast_channel_info_size() const {
  return broadcast_channel_info_.size();
}
void CSODOTALobby::clear_broadcast_channel_info() {
  broadcast_channel_info_.Clear();
}
const ::CLobbyBroadcastChannelInfo& CSODOTALobby::broadcast_channel_info(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.broadcast_channel_info)
  return broadcast_channel_info_.Get(index);
}
::CLobbyBroadcastChannelInfo* CSODOTALobby::mutable_broadcast_channel_info(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.broadcast_channel_info)
  return broadcast_channel_info_.Mutable(index);
}
::CLobbyBroadcastChannelInfo* CSODOTALobby::add_broadcast_channel_info() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.broadcast_channel_info)
  return broadcast_channel_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::CLobbyBroadcastChannelInfo >*
CSODOTALobby::mutable_broadcast_channel_info() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.broadcast_channel_info)
  return &broadcast_channel_info_;
}
const ::google::protobuf::RepeatedPtrField< ::CLobbyBroadcastChannelInfo >&
CSODOTALobby::broadcast_channel_info() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.broadcast_channel_info)
  return broadcast_channel_info_;
}

// optional uint32 first_leaver_accountid = 59;
bool CSODOTALobby::has_first_leaver_accountid() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void CSODOTALobby::set_has_first_leaver_accountid() {
  _has_bits_[1] |= 0x00004000u;
}
void CSODOTALobby::clear_has_first_leaver_accountid() {
  _has_bits_[1] &= ~0x00004000u;
}
void CSODOTALobby::clear_first_leaver_accountid() {
  first_leaver_accountid_ = 0u;
  clear_has_first_leaver_accountid();
}
 ::google::protobuf::uint32 CSODOTALobby::first_leaver_accountid() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.first_leaver_accountid)
  return first_leaver_accountid_;
}
 void CSODOTALobby::set_first_leaver_accountid(::google::protobuf::uint32 value) {
  set_has_first_leaver_accountid();
  first_leaver_accountid_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.first_leaver_accountid)
}

// optional uint32 series_id = 60;
bool CSODOTALobby::has_series_id() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void CSODOTALobby::set_has_series_id() {
  _has_bits_[1] |= 0x00008000u;
}
void CSODOTALobby::clear_has_series_id() {
  _has_bits_[1] &= ~0x00008000u;
}
void CSODOTALobby::clear_series_id() {
  series_id_ = 0u;
  clear_has_series_id();
}
 ::google::protobuf::uint32 CSODOTALobby::series_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.series_id)
  return series_id_;
}
 void CSODOTALobby::set_series_id(::google::protobuf::uint32 value) {
  set_has_series_id();
  series_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.series_id)
}

// optional bool low_priority = 61;
bool CSODOTALobby::has_low_priority() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void CSODOTALobby::set_has_low_priority() {
  _has_bits_[1] |= 0x00010000u;
}
void CSODOTALobby::clear_has_low_priority() {
  _has_bits_[1] &= ~0x00010000u;
}
void CSODOTALobby::clear_low_priority() {
  low_priority_ = false;
  clear_has_low_priority();
}
 bool CSODOTALobby::low_priority() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.low_priority)
  return low_priority_;
}
 void CSODOTALobby::set_low_priority(bool value) {
  set_has_low_priority();
  low_priority_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.low_priority)
}

// repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
int CSODOTALobby::extra_messages_size() const {
  return extra_messages_.size();
}
void CSODOTALobby::clear_extra_messages() {
  extra_messages_.Clear();
}
const ::CSODOTALobby_CExtraMsg& CSODOTALobby::extra_messages(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.extra_messages)
  return extra_messages_.Get(index);
}
::CSODOTALobby_CExtraMsg* CSODOTALobby::mutable_extra_messages(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.extra_messages)
  return extra_messages_.Mutable(index);
}
::CSODOTALobby_CExtraMsg* CSODOTALobby::add_extra_messages() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.extra_messages)
  return extra_messages_.Add();
}
::google::protobuf::RepeatedPtrField< ::CSODOTALobby_CExtraMsg >*
CSODOTALobby::mutable_extra_messages() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.extra_messages)
  return &extra_messages_;
}
const ::google::protobuf::RepeatedPtrField< ::CSODOTALobby_CExtraMsg >&
CSODOTALobby::extra_messages() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.extra_messages)
  return extra_messages_;
}

// optional .CDOTASaveGame save_game = 63;
bool CSODOTALobby::has_save_game() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
void CSODOTALobby::set_has_save_game() {
  _has_bits_[1] |= 0x00040000u;
}
void CSODOTALobby::clear_has_save_game() {
  _has_bits_[1] &= ~0x00040000u;
}
void CSODOTALobby::clear_save_game() {
  if (save_game_ != NULL) save_game_->::CDOTASaveGame::Clear();
  clear_has_save_game();
}
const ::CDOTASaveGame& CSODOTALobby::save_game() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.save_game)
  return save_game_ != NULL ? *save_game_ : *default_instance_->save_game_;
}
::CDOTASaveGame* CSODOTALobby::mutable_save_game() {
  set_has_save_game();
  if (save_game_ == NULL) {
    save_game_ = new ::CDOTASaveGame;
  }
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.save_game)
  return save_game_;
}
::CDOTASaveGame* CSODOTALobby::release_save_game() {
  clear_has_save_game();
  ::CDOTASaveGame* temp = save_game_;
  save_game_ = NULL;
  return temp;
}
void CSODOTALobby::set_allocated_save_game(::CDOTASaveGame* save_game) {
  delete save_game_;
  save_game_ = save_game;
  if (save_game) {
    set_has_save_game();
  } else {
    clear_has_save_game();
  }
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.save_game)
}

// optional bool first_blood_happened = 65;
bool CSODOTALobby::has_first_blood_happened() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
void CSODOTALobby::set_has_first_blood_happened() {
  _has_bits_[1] |= 0x00080000u;
}
void CSODOTALobby::clear_has_first_blood_happened() {
  _has_bits_[1] &= ~0x00080000u;
}
void CSODOTALobby::clear_first_blood_happened() {
  first_blood_happened_ = false;
  clear_has_first_blood_happened();
}
 bool CSODOTALobby::first_blood_happened() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.first_blood_happened)
  return first_blood_happened_;
}
 void CSODOTALobby::set_first_blood_happened(bool value) {
  set_has_first_blood_happened();
  first_blood_happened_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.first_blood_happened)
}

// optional .EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
bool CSODOTALobby::has_match_outcome() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
void CSODOTALobby::set_has_match_outcome() {
  _has_bits_[1] |= 0x00100000u;
}
void CSODOTALobby::clear_has_match_outcome() {
  _has_bits_[1] &= ~0x00100000u;
}
void CSODOTALobby::clear_match_outcome() {
  match_outcome_ = 0;
  clear_has_match_outcome();
}
 ::EMatchOutcome CSODOTALobby::match_outcome() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.match_outcome)
  return static_cast< ::EMatchOutcome >(match_outcome_);
}
 void CSODOTALobby::set_match_outcome(::EMatchOutcome value) {
  assert(::EMatchOutcome_IsValid(value));
  set_has_match_outcome();
  match_outcome_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.match_outcome)
}

// optional bool mass_disconnect = 67;
bool CSODOTALobby::has_mass_disconnect() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
void CSODOTALobby::set_has_mass_disconnect() {
  _has_bits_[1] |= 0x00200000u;
}
void CSODOTALobby::clear_has_mass_disconnect() {
  _has_bits_[1] &= ~0x00200000u;
}
void CSODOTALobby::clear_mass_disconnect() {
  mass_disconnect_ = false;
  clear_has_mass_disconnect();
}
 bool CSODOTALobby::mass_disconnect() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.mass_disconnect)
  return mass_disconnect_;
}
 void CSODOTALobby::set_mass_disconnect(bool value) {
  set_has_mass_disconnect();
  mass_disconnect_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.mass_disconnect)
}

// optional uint64 custom_game_id = 68;
bool CSODOTALobby::has_custom_game_id() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
void CSODOTALobby::set_has_custom_game_id() {
  _has_bits_[1] |= 0x00400000u;
}
void CSODOTALobby::clear_has_custom_game_id() {
  _has_bits_[1] &= ~0x00400000u;
}
void CSODOTALobby::clear_custom_game_id() {
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_id();
}
 ::google::protobuf::uint64 CSODOTALobby::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_id)
  return custom_game_id_;
}
 void CSODOTALobby::set_custom_game_id(::google::protobuf::uint64 value) {
  set_has_custom_game_id();
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_id)
}

// repeated .EEvent active_ingame_events = 69;
int CSODOTALobby::active_ingame_events_size() const {
  return active_ingame_events_.size();
}
void CSODOTALobby::clear_active_ingame_events() {
  active_ingame_events_.Clear();
}
 ::EEvent CSODOTALobby::active_ingame_events(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.active_ingame_events)
  return static_cast< ::EEvent >(active_ingame_events_.Get(index));
}
 void CSODOTALobby::set_active_ingame_events(int index, ::EEvent value) {
  assert(::EEvent_IsValid(value));
  active_ingame_events_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.active_ingame_events)
}
 void CSODOTALobby::add_active_ingame_events(::EEvent value) {
  assert(::EEvent_IsValid(value));
  active_ingame_events_.Add(value);
  // @@protoc_insertion_point(field_add:CSODOTALobby.active_ingame_events)
}
 const ::google::protobuf::RepeatedField<int>&
CSODOTALobby::active_ingame_events() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.active_ingame_events)
  return active_ingame_events_;
}
 ::google::protobuf::RepeatedField<int>*
CSODOTALobby::mutable_active_ingame_events() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.active_ingame_events)
  return &active_ingame_events_;
}

// optional uint32 custom_min_players = 71;
bool CSODOTALobby::has_custom_min_players() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
void CSODOTALobby::set_has_custom_min_players() {
  _has_bits_[1] |= 0x01000000u;
}
void CSODOTALobby::clear_has_custom_min_players() {
  _has_bits_[1] &= ~0x01000000u;
}
void CSODOTALobby::clear_custom_min_players() {
  custom_min_players_ = 0u;
  clear_has_custom_min_players();
}
 ::google::protobuf::uint32 CSODOTALobby::custom_min_players() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_min_players)
  return custom_min_players_;
}
 void CSODOTALobby::set_custom_min_players(::google::protobuf::uint32 value) {
  set_has_custom_min_players();
  custom_min_players_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_min_players)
}

// optional uint32 custom_max_players = 72;
bool CSODOTALobby::has_custom_max_players() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
void CSODOTALobby::set_has_custom_max_players() {
  _has_bits_[1] |= 0x02000000u;
}
void CSODOTALobby::clear_has_custom_max_players() {
  _has_bits_[1] &= ~0x02000000u;
}
void CSODOTALobby::clear_custom_max_players() {
  custom_max_players_ = 0u;
  clear_has_custom_max_players();
}
 ::google::protobuf::uint32 CSODOTALobby::custom_max_players() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_max_players)
  return custom_max_players_;
}
 void CSODOTALobby::set_custom_max_players(::google::protobuf::uint32 value) {
  set_has_custom_max_players();
  custom_max_players_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_max_players)
}

// optional .PartnerAccountType partner_type = 73 [default = PARTNER_NONE];
bool CSODOTALobby::has_partner_type() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
void CSODOTALobby::set_has_partner_type() {
  _has_bits_[1] |= 0x04000000u;
}
void CSODOTALobby::clear_has_partner_type() {
  _has_bits_[1] &= ~0x04000000u;
}
void CSODOTALobby::clear_partner_type() {
  partner_type_ = 0;
  clear_has_partner_type();
}
 ::PartnerAccountType CSODOTALobby::partner_type() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.partner_type)
  return static_cast< ::PartnerAccountType >(partner_type_);
}
 void CSODOTALobby::set_partner_type(::PartnerAccountType value) {
  assert(::PartnerAccountType_IsValid(value));
  set_has_partner_type();
  partner_type_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.partner_type)
}

// optional uint32 lan_host_ping_to_server_region = 74;
bool CSODOTALobby::has_lan_host_ping_to_server_region() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
void CSODOTALobby::set_has_lan_host_ping_to_server_region() {
  _has_bits_[1] |= 0x08000000u;
}
void CSODOTALobby::clear_has_lan_host_ping_to_server_region() {
  _has_bits_[1] &= ~0x08000000u;
}
void CSODOTALobby::clear_lan_host_ping_to_server_region() {
  lan_host_ping_to_server_region_ = 0u;
  clear_has_lan_host_ping_to_server_region();
}
 ::google::protobuf::uint32 CSODOTALobby::lan_host_ping_to_server_region() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.lan_host_ping_to_server_region)
  return lan_host_ping_to_server_region_;
}
 void CSODOTALobby::set_lan_host_ping_to_server_region(::google::protobuf::uint32 value) {
  set_has_lan_host_ping_to_server_region();
  lan_host_ping_to_server_region_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.lan_host_ping_to_server_region)
}

// optional .DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
bool CSODOTALobby::has_visibility() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
void CSODOTALobby::set_has_visibility() {
  _has_bits_[1] |= 0x10000000u;
}
void CSODOTALobby::clear_has_visibility() {
  _has_bits_[1] &= ~0x10000000u;
}
void CSODOTALobby::clear_visibility() {
  visibility_ = 0;
  clear_has_visibility();
}
 ::DOTALobbyVisibility CSODOTALobby::visibility() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.visibility)
  return static_cast< ::DOTALobbyVisibility >(visibility_);
}
 void CSODOTALobby::set_visibility(::DOTALobbyVisibility value) {
  assert(::DOTALobbyVisibility_IsValid(value));
  set_has_visibility();
  visibility_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.visibility)
}

// optional fixed64 custom_game_crc = 76;
bool CSODOTALobby::has_custom_game_crc() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
void CSODOTALobby::set_has_custom_game_crc() {
  _has_bits_[1] |= 0x20000000u;
}
void CSODOTALobby::clear_has_custom_game_crc() {
  _has_bits_[1] &= ~0x20000000u;
}
void CSODOTALobby::clear_custom_game_crc() {
  custom_game_crc_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_crc();
}
 ::google::protobuf::uint64 CSODOTALobby::custom_game_crc() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_crc)
  return custom_game_crc_;
}
 void CSODOTALobby::set_custom_game_crc(::google::protobuf::uint64 value) {
  set_has_custom_game_crc();
  custom_game_crc_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_crc)
}

// optional bool custom_game_auto_created_lobby = 77;
bool CSODOTALobby::has_custom_game_auto_created_lobby() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
void CSODOTALobby::set_has_custom_game_auto_created_lobby() {
  _has_bits_[1] |= 0x40000000u;
}
void CSODOTALobby::clear_has_custom_game_auto_created_lobby() {
  _has_bits_[1] &= ~0x40000000u;
}
void CSODOTALobby::clear_custom_game_auto_created_lobby() {
  custom_game_auto_created_lobby_ = false;
  clear_has_custom_game_auto_created_lobby();
}
 bool CSODOTALobby::custom_game_auto_created_lobby() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_auto_created_lobby)
  return custom_game_auto_created_lobby_;
}
 void CSODOTALobby::set_custom_game_auto_created_lobby(bool value) {
  set_has_custom_game_auto_created_lobby();
  custom_game_auto_created_lobby_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_auto_created_lobby)
}

// optional uint32 league_series_id = 78;
bool CSODOTALobby::has_league_series_id() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
void CSODOTALobby::set_has_league_series_id() {
  _has_bits_[1] |= 0x80000000u;
}
void CSODOTALobby::clear_has_league_series_id() {
  _has_bits_[1] &= ~0x80000000u;
}
void CSODOTALobby::clear_league_series_id() {
  league_series_id_ = 0u;
  clear_has_league_series_id();
}
 ::google::protobuf::uint32 CSODOTALobby::league_series_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.league_series_id)
  return league_series_id_;
}
 void CSODOTALobby::set_league_series_id(::google::protobuf::uint32 value) {
  set_has_league_series_id();
  league_series_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.league_series_id)
}

// optional uint32 league_game_id = 79;
bool CSODOTALobby::has_league_game_id() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
void CSODOTALobby::set_has_league_game_id() {
  _has_bits_[2] |= 0x00000001u;
}
void CSODOTALobby::clear_has_league_game_id() {
  _has_bits_[2] &= ~0x00000001u;
}
void CSODOTALobby::clear_league_game_id() {
  league_game_id_ = 0u;
  clear_has_league_game_id();
}
 ::google::protobuf::uint32 CSODOTALobby::league_game_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.league_game_id)
  return league_game_id_;
}
 void CSODOTALobby::set_league_game_id(::google::protobuf::uint32 value) {
  set_has_league_game_id();
  league_game_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.league_game_id)
}

// optional fixed32 custom_game_timestamp = 80;
bool CSODOTALobby::has_custom_game_timestamp() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
void CSODOTALobby::set_has_custom_game_timestamp() {
  _has_bits_[2] |= 0x00000002u;
}
void CSODOTALobby::clear_has_custom_game_timestamp() {
  _has_bits_[2] &= ~0x00000002u;
}
void CSODOTALobby::clear_custom_game_timestamp() {
  custom_game_timestamp_ = 0u;
  clear_has_custom_game_timestamp();
}
 ::google::protobuf::uint32 CSODOTALobby::custom_game_timestamp() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_timestamp)
  return custom_game_timestamp_;
}
 void CSODOTALobby::set_custom_game_timestamp(::google::protobuf::uint32 value) {
  set_has_custom_game_timestamp();
  custom_game_timestamp_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgLobbyEventPoints_AccountPoints::kAccountIdFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kNormalPointsFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kPremiumPointsFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kOwnedFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kFavoriteTeamFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kFavoriteTeamLevelFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kPointsHeldFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kPremiumPointsHeldFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kFavoriteTeamFoilLevelFieldNumber;
#endif  // !_MSC_VER

CMsgLobbyEventPoints_AccountPoints::CMsgLobbyEventPoints_AccountPoints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgLobbyEventPoints.AccountPoints)
}

void CMsgLobbyEventPoints_AccountPoints::InitAsDefaultInstance() {
}

CMsgLobbyEventPoints_AccountPoints::CMsgLobbyEventPoints_AccountPoints(const CMsgLobbyEventPoints_AccountPoints& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyEventPoints.AccountPoints)
}

void CMsgLobbyEventPoints_AccountPoints::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  normal_points_ = 0u;
  premium_points_ = 0u;
  owned_ = false;
  favorite_team_ = 0u;
  favorite_team_level_ = 0u;
  points_held_ = 0u;
  premium_points_held_ = 0u;
  favorite_team_foil_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLobbyEventPoints_AccountPoints::~CMsgLobbyEventPoints_AccountPoints() {
  // @@protoc_insertion_point(destructor:CMsgLobbyEventPoints.AccountPoints)
  SharedDtor();
}

void CMsgLobbyEventPoints_AccountPoints::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLobbyEventPoints_AccountPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLobbyEventPoints_AccountPoints::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLobbyEventPoints_AccountPoints_descriptor_;
}

const CMsgLobbyEventPoints_AccountPoints& CMsgLobbyEventPoints_AccountPoints::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgLobbyEventPoints_AccountPoints* CMsgLobbyEventPoints_AccountPoints::default_instance_ = NULL;

CMsgLobbyEventPoints_AccountPoints* CMsgLobbyEventPoints_AccountPoints::New(::google::protobuf::Arena* arena) const {
  CMsgLobbyEventPoints_AccountPoints* n = new CMsgLobbyEventPoints_AccountPoints;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgLobbyEventPoints_AccountPoints::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgLobbyEventPoints_AccountPoints*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(account_id_, premium_points_held_);
  }
  favorite_team_foil_level_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgLobbyEventPoints_AccountPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgLobbyEventPoints.AccountPoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_normal_points;
        break;
      }

      // optional uint32 normal_points = 2;
      case 2: {
        if (tag == 16) {
         parse_normal_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normal_points_)));
          set_has_normal_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_premium_points;
        break;
      }

      // optional uint32 premium_points = 3;
      case 3: {
        if (tag == 24) {
         parse_premium_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &premium_points_)));
          set_has_premium_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_owned;
        break;
      }

      // optional bool owned = 4;
      case 4: {
        if (tag == 32) {
         parse_owned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &owned_)));
          set_has_owned();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_favorite_team;
        break;
      }

      // optional uint32 favorite_team = 5;
      case 5: {
        if (tag == 40) {
         parse_favorite_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favorite_team_)));
          set_has_favorite_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_favorite_team_level;
        break;
      }

      // optional uint32 favorite_team_level = 6;
      case 6: {
        if (tag == 48) {
         parse_favorite_team_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favorite_team_level_)));
          set_has_favorite_team_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_points_held;
        break;
      }

      // optional uint32 points_held = 7;
      case 7: {
        if (tag == 56) {
         parse_points_held:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_held_)));
          set_has_points_held();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_premium_points_held;
        break;
      }

      // optional uint32 premium_points_held = 8;
      case 8: {
        if (tag == 64) {
         parse_premium_points_held:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &premium_points_held_)));
          set_has_premium_points_held();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_favorite_team_foil_level;
        break;
      }

      // optional uint32 favorite_team_foil_level = 9;
      case 9: {
        if (tag == 72) {
         parse_favorite_team_foil_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favorite_team_foil_level_)));
          set_has_favorite_team_foil_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgLobbyEventPoints.AccountPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgLobbyEventPoints.AccountPoints)
  return false;
#undef DO_
}

void CMsgLobbyEventPoints_AccountPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgLobbyEventPoints.AccountPoints)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 normal_points = 2;
  if (has_normal_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->normal_points(), output);
  }

  // optional uint32 premium_points = 3;
  if (has_premium_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->premium_points(), output);
  }

  // optional bool owned = 4;
  if (has_owned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->owned(), output);
  }

  // optional uint32 favorite_team = 5;
  if (has_favorite_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->favorite_team(), output);
  }

  // optional uint32 favorite_team_level = 6;
  if (has_favorite_team_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->favorite_team_level(), output);
  }

  // optional uint32 points_held = 7;
  if (has_points_held()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->points_held(), output);
  }

  // optional uint32 premium_points_held = 8;
  if (has_premium_points_held()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->premium_points_held(), output);
  }

  // optional uint32 favorite_team_foil_level = 9;
  if (has_favorite_team_foil_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->favorite_team_foil_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgLobbyEventPoints.AccountPoints)
}

::google::protobuf::uint8* CMsgLobbyEventPoints_AccountPoints::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyEventPoints.AccountPoints)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 normal_points = 2;
  if (has_normal_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->normal_points(), target);
  }

  // optional uint32 premium_points = 3;
  if (has_premium_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->premium_points(), target);
  }

  // optional bool owned = 4;
  if (has_owned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->owned(), target);
  }

  // optional uint32 favorite_team = 5;
  if (has_favorite_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->favorite_team(), target);
  }

  // optional uint32 favorite_team_level = 6;
  if (has_favorite_team_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->favorite_team_level(), target);
  }

  // optional uint32 points_held = 7;
  if (has_points_held()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->points_held(), target);
  }

  // optional uint32 premium_points_held = 8;
  if (has_premium_points_held()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->premium_points_held(), target);
  }

  // optional uint32 favorite_team_foil_level = 9;
  if (has_favorite_team_foil_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->favorite_team_foil_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyEventPoints.AccountPoints)
  return target;
}

int CMsgLobbyEventPoints_AccountPoints::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 normal_points = 2;
    if (has_normal_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normal_points());
    }

    // optional uint32 premium_points = 3;
    if (has_premium_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->premium_points());
    }

    // optional bool owned = 4;
    if (has_owned()) {
      total_size += 1 + 1;
    }

    // optional uint32 favorite_team = 5;
    if (has_favorite_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->favorite_team());
    }

    // optional uint32 favorite_team_level = 6;
    if (has_favorite_team_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->favorite_team_level());
    }

    // optional uint32 points_held = 7;
    if (has_points_held()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points_held());
    }

    // optional uint32 premium_points_held = 8;
    if (has_premium_points_held()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->premium_points_held());
    }

  }
  // optional uint32 favorite_team_foil_level = 9;
  if (has_favorite_team_foil_level()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->favorite_team_foil_level());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLobbyEventPoints_AccountPoints::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgLobbyEventPoints_AccountPoints* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgLobbyEventPoints_AccountPoints>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLobbyEventPoints_AccountPoints::MergeFrom(const CMsgLobbyEventPoints_AccountPoints& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_normal_points()) {
      set_normal_points(from.normal_points());
    }
    if (from.has_premium_points()) {
      set_premium_points(from.premium_points());
    }
    if (from.has_owned()) {
      set_owned(from.owned());
    }
    if (from.has_favorite_team()) {
      set_favorite_team(from.favorite_team());
    }
    if (from.has_favorite_team_level()) {
      set_favorite_team_level(from.favorite_team_level());
    }
    if (from.has_points_held()) {
      set_points_held(from.points_held());
    }
    if (from.has_premium_points_held()) {
      set_premium_points_held(from.premium_points_held());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_favorite_team_foil_level()) {
      set_favorite_team_foil_level(from.favorite_team_foil_level());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgLobbyEventPoints_AccountPoints::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyEventPoints_AccountPoints::CopyFrom(const CMsgLobbyEventPoints_AccountPoints& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyEventPoints_AccountPoints::IsInitialized() const {

  return true;
}

void CMsgLobbyEventPoints_AccountPoints::Swap(CMsgLobbyEventPoints_AccountPoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLobbyEventPoints_AccountPoints::InternalSwap(CMsgLobbyEventPoints_AccountPoints* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(normal_points_, other->normal_points_);
  std::swap(premium_points_, other->premium_points_);
  std::swap(owned_, other->owned_);
  std::swap(favorite_team_, other->favorite_team_);
  std::swap(favorite_team_level_, other->favorite_team_level_);
  std::swap(points_held_, other->points_held_);
  std::swap(premium_points_held_, other->premium_points_held_);
  std::swap(favorite_team_foil_level_, other->favorite_team_foil_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgLobbyEventPoints_AccountPoints::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLobbyEventPoints_AccountPoints_descriptor_;
  metadata.reflection = CMsgLobbyEventPoints_AccountPoints_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgLobbyEventPoints::kEventIdFieldNumber;
const int CMsgLobbyEventPoints::kAccountPointsFieldNumber;
#endif  // !_MSC_VER

CMsgLobbyEventPoints::CMsgLobbyEventPoints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgLobbyEventPoints)
}

void CMsgLobbyEventPoints::InitAsDefaultInstance() {
}

CMsgLobbyEventPoints::CMsgLobbyEventPoints(const CMsgLobbyEventPoints& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyEventPoints)
}

void CMsgLobbyEventPoints::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLobbyEventPoints::~CMsgLobbyEventPoints() {
  // @@protoc_insertion_point(destructor:CMsgLobbyEventPoints)
  SharedDtor();
}

void CMsgLobbyEventPoints::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLobbyEventPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLobbyEventPoints::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLobbyEventPoints_descriptor_;
}

const CMsgLobbyEventPoints& CMsgLobbyEventPoints::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgLobbyEventPoints* CMsgLobbyEventPoints::default_instance_ = NULL;

CMsgLobbyEventPoints* CMsgLobbyEventPoints::New(::google::protobuf::Arena* arena) const {
  CMsgLobbyEventPoints* n = new CMsgLobbyEventPoints;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgLobbyEventPoints::Clear() {
  event_id_ = 0u;
  account_points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgLobbyEventPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgLobbyEventPoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_account_points;
        break;
      }

      // repeated .CMsgLobbyEventPoints.AccountPoints account_points = 2;
      case 2: {
        if (tag == 18) {
         parse_account_points:
          DO_(input->IncrementRecursionDepth());
         parse_loop_account_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_account_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_account_points;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgLobbyEventPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgLobbyEventPoints)
  return false;
#undef DO_
}

void CMsgLobbyEventPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgLobbyEventPoints)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // repeated .CMsgLobbyEventPoints.AccountPoints account_points = 2;
  for (unsigned int i = 0, n = this->account_points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->account_points(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgLobbyEventPoints)
}

::google::protobuf::uint8* CMsgLobbyEventPoints::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyEventPoints)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // repeated .CMsgLobbyEventPoints.AccountPoints account_points = 2;
  for (unsigned int i = 0, n = this->account_points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->account_points(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyEventPoints)
  return target;
}

int CMsgLobbyEventPoints::ByteSize() const {
  int total_size = 0;

  // optional uint32 event_id = 1;
  if (has_event_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->event_id());
  }

  // repeated .CMsgLobbyEventPoints.AccountPoints account_points = 2;
  total_size += 1 * this->account_points_size();
  for (int i = 0; i < this->account_points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->account_points(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLobbyEventPoints::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgLobbyEventPoints* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgLobbyEventPoints>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLobbyEventPoints::MergeFrom(const CMsgLobbyEventPoints& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  account_points_.MergeFrom(from.account_points_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgLobbyEventPoints::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyEventPoints::CopyFrom(const CMsgLobbyEventPoints& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyEventPoints::IsInitialized() const {

  return true;
}

void CMsgLobbyEventPoints::Swap(CMsgLobbyEventPoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLobbyEventPoints::InternalSwap(CMsgLobbyEventPoints* other) {
  std::swap(event_id_, other->event_id_);
  account_points_.UnsafeArenaSwap(&other->account_points_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgLobbyEventPoints::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLobbyEventPoints_descriptor_;
  metadata.reflection = CMsgLobbyEventPoints_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgLobbyEventPoints_AccountPoints

// optional uint32 account_id = 1;
bool CMsgLobbyEventPoints_AccountPoints::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgLobbyEventPoints_AccountPoints::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
 ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.account_id)
  return account_id_;
}
 void CMsgLobbyEventPoints_AccountPoints::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.account_id)
}

// optional uint32 normal_points = 2;
bool CMsgLobbyEventPoints_AccountPoints::has_normal_points() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgLobbyEventPoints_AccountPoints::set_has_normal_points() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_has_normal_points() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_normal_points() {
  normal_points_ = 0u;
  clear_has_normal_points();
}
 ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::normal_points() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.normal_points)
  return normal_points_;
}
 void CMsgLobbyEventPoints_AccountPoints::set_normal_points(::google::protobuf::uint32 value) {
  set_has_normal_points();
  normal_points_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.normal_points)
}

// optional uint32 premium_points = 3;
bool CMsgLobbyEventPoints_AccountPoints::has_premium_points() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgLobbyEventPoints_AccountPoints::set_has_premium_points() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_has_premium_points() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_premium_points() {
  premium_points_ = 0u;
  clear_has_premium_points();
}
 ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::premium_points() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.premium_points)
  return premium_points_;
}
 void CMsgLobbyEventPoints_AccountPoints::set_premium_points(::google::protobuf::uint32 value) {
  set_has_premium_points();
  premium_points_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.premium_points)
}

// optional bool owned = 4;
bool CMsgLobbyEventPoints_AccountPoints::has_owned() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgLobbyEventPoints_AccountPoints::set_has_owned() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_has_owned() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_owned() {
  owned_ = false;
  clear_has_owned();
}
 bool CMsgLobbyEventPoints_AccountPoints::owned() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.owned)
  return owned_;
}
 void CMsgLobbyEventPoints_AccountPoints::set_owned(bool value) {
  set_has_owned();
  owned_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.owned)
}

// optional uint32 favorite_team = 5;
bool CMsgLobbyEventPoints_AccountPoints::has_favorite_team() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgLobbyEventPoints_AccountPoints::set_has_favorite_team() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_has_favorite_team() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_favorite_team() {
  favorite_team_ = 0u;
  clear_has_favorite_team();
}
 ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::favorite_team() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.favorite_team)
  return favorite_team_;
}
 void CMsgLobbyEventPoints_AccountPoints::set_favorite_team(::google::protobuf::uint32 value) {
  set_has_favorite_team();
  favorite_team_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.favorite_team)
}

// optional uint32 favorite_team_level = 6;
bool CMsgLobbyEventPoints_AccountPoints::has_favorite_team_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgLobbyEventPoints_AccountPoints::set_has_favorite_team_level() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_has_favorite_team_level() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_favorite_team_level() {
  favorite_team_level_ = 0u;
  clear_has_favorite_team_level();
}
 ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::favorite_team_level() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.favorite_team_level)
  return favorite_team_level_;
}
 void CMsgLobbyEventPoints_AccountPoints::set_favorite_team_level(::google::protobuf::uint32 value) {
  set_has_favorite_team_level();
  favorite_team_level_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.favorite_team_level)
}

// optional uint32 points_held = 7;
bool CMsgLobbyEventPoints_AccountPoints::has_points_held() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgLobbyEventPoints_AccountPoints::set_has_points_held() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_has_points_held() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_points_held() {
  points_held_ = 0u;
  clear_has_points_held();
}
 ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::points_held() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.points_held)
  return points_held_;
}
 void CMsgLobbyEventPoints_AccountPoints::set_points_held(::google::protobuf::uint32 value) {
  set_has_points_held();
  points_held_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.points_held)
}

// optional uint32 premium_points_held = 8;
bool CMsgLobbyEventPoints_AccountPoints::has_premium_points_held() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgLobbyEventPoints_AccountPoints::set_has_premium_points_held() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_has_premium_points_held() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_premium_points_held() {
  premium_points_held_ = 0u;
  clear_has_premium_points_held();
}
 ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::premium_points_held() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.premium_points_held)
  return premium_points_held_;
}
 void CMsgLobbyEventPoints_AccountPoints::set_premium_points_held(::google::protobuf::uint32 value) {
  set_has_premium_points_held();
  premium_points_held_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.premium_points_held)
}

// optional uint32 favorite_team_foil_level = 9;
bool CMsgLobbyEventPoints_AccountPoints::has_favorite_team_foil_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgLobbyEventPoints_AccountPoints::set_has_favorite_team_foil_level() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_has_favorite_team_foil_level() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_favorite_team_foil_level() {
  favorite_team_foil_level_ = 0u;
  clear_has_favorite_team_foil_level();
}
 ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::favorite_team_foil_level() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.favorite_team_foil_level)
  return favorite_team_foil_level_;
}
 void CMsgLobbyEventPoints_AccountPoints::set_favorite_team_foil_level(::google::protobuf::uint32 value) {
  set_has_favorite_team_foil_level();
  favorite_team_foil_level_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.favorite_team_foil_level)
}

// -------------------------------------------------------------------

// CMsgLobbyEventPoints

// optional uint32 event_id = 1;
bool CMsgLobbyEventPoints::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgLobbyEventPoints::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgLobbyEventPoints::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgLobbyEventPoints::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
 ::google::protobuf::uint32 CMsgLobbyEventPoints::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.event_id)
  return event_id_;
}
 void CMsgLobbyEventPoints::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.event_id)
}

// repeated .CMsgLobbyEventPoints.AccountPoints account_points = 2;
int CMsgLobbyEventPoints::account_points_size() const {
  return account_points_.size();
}
void CMsgLobbyEventPoints::clear_account_points() {
  account_points_.Clear();
}
const ::CMsgLobbyEventPoints_AccountPoints& CMsgLobbyEventPoints::account_points(int index) const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.account_points)
  return account_points_.Get(index);
}
::CMsgLobbyEventPoints_AccountPoints* CMsgLobbyEventPoints::mutable_account_points(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgLobbyEventPoints.account_points)
  return account_points_.Mutable(index);
}
::CMsgLobbyEventPoints_AccountPoints* CMsgLobbyEventPoints::add_account_points() {
  // @@protoc_insertion_point(field_add:CMsgLobbyEventPoints.account_points)
  return account_points_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgLobbyEventPoints_AccountPoints >*
CMsgLobbyEventPoints::mutable_account_points() {
  // @@protoc_insertion_point(field_mutable_list:CMsgLobbyEventPoints.account_points)
  return &account_points_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgLobbyEventPoints_AccountPoints >&
CMsgLobbyEventPoints::account_points() const {
  // @@protoc_insertion_point(field_list:CMsgLobbyEventPoints.account_points)
  return account_points_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAGenericResult::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGenericResult::CMsgDOTAGenericResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGenericResult)
}

void CMsgDOTAGenericResult::InitAsDefaultInstance() {
}

CMsgDOTAGenericResult::CMsgDOTAGenericResult(const CMsgDOTAGenericResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGenericResult)
}

void CMsgDOTAGenericResult::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGenericResult::~CMsgDOTAGenericResult() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGenericResult)
  SharedDtor();
}

void CMsgDOTAGenericResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGenericResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGenericResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGenericResult_descriptor_;
}

const CMsgDOTAGenericResult& CMsgDOTAGenericResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAGenericResult* CMsgDOTAGenericResult::default_instance_ = NULL;

CMsgDOTAGenericResult* CMsgDOTAGenericResult::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGenericResult* n = new CMsgDOTAGenericResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGenericResult::Clear() {
  eresult_ = 2u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAGenericResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGenericResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGenericResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGenericResult)
  return false;
#undef DO_
}

void CMsgDOTAGenericResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGenericResult)
  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGenericResult)
}

::google::protobuf::uint8* CMsgDOTAGenericResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGenericResult)
  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGenericResult)
  return target;
}

int CMsgDOTAGenericResult::ByteSize() const {
  int total_size = 0;

  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->eresult());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGenericResult::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAGenericResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGenericResult>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGenericResult::MergeFrom(const CMsgDOTAGenericResult& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAGenericResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGenericResult::CopyFrom(const CMsgDOTAGenericResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGenericResult::IsInitialized() const {

  return true;
}

void CMsgDOTAGenericResult::Swap(CMsgDOTAGenericResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGenericResult::InternalSwap(CMsgDOTAGenericResult* other) {
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGenericResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGenericResult_descriptor_;
  metadata.reflection = CMsgDOTAGenericResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGenericResult

// optional uint32 eresult = 1 [default = 2];
bool CMsgDOTAGenericResult::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGenericResult::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGenericResult::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGenericResult::clear_eresult() {
  eresult_ = 2u;
  clear_has_eresult();
}
 ::google::protobuf::uint32 CMsgDOTAGenericResult::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGenericResult.eresult)
  return eresult_;
}
 void CMsgDOTAGenericResult::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGenericResult.eresult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTABroadcastNotification::kMessageFieldNumber;
#endif  // !_MSC_VER

CMsgDOTABroadcastNotification::CMsgDOTABroadcastNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTABroadcastNotification)
}

void CMsgDOTABroadcastNotification::InitAsDefaultInstance() {
}

CMsgDOTABroadcastNotification::CMsgDOTABroadcastNotification(const CMsgDOTABroadcastNotification& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTABroadcastNotification)
}

void CMsgDOTABroadcastNotification::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTABroadcastNotification::~CMsgDOTABroadcastNotification() {
  // @@protoc_insertion_point(destructor:CMsgDOTABroadcastNotification)
  SharedDtor();
}

void CMsgDOTABroadcastNotification::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgDOTABroadcastNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTABroadcastNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTABroadcastNotification_descriptor_;
}

const CMsgDOTABroadcastNotification& CMsgDOTABroadcastNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTABroadcastNotification* CMsgDOTABroadcastNotification::default_instance_ = NULL;

CMsgDOTABroadcastNotification* CMsgDOTABroadcastNotification::New(::google::protobuf::Arena* arena) const {
  CMsgDOTABroadcastNotification* n = new CMsgDOTABroadcastNotification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTABroadcastNotification::Clear() {
  if (has_message()) {
    message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTABroadcastNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTABroadcastNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTABroadcastNotification.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTABroadcastNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTABroadcastNotification)
  return false;
#undef DO_
}

void CMsgDOTABroadcastNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTABroadcastNotification)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTABroadcastNotification.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTABroadcastNotification)
}

::google::protobuf::uint8* CMsgDOTABroadcastNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTABroadcastNotification)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTABroadcastNotification.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTABroadcastNotification)
  return target;
}

int CMsgDOTABroadcastNotification::ByteSize() const {
  int total_size = 0;

  // optional string message = 1;
  if (has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTABroadcastNotification::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTABroadcastNotification* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTABroadcastNotification>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTABroadcastNotification::MergeFrom(const CMsgDOTABroadcastNotification& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTABroadcastNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABroadcastNotification::CopyFrom(const CMsgDOTABroadcastNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABroadcastNotification::IsInitialized() const {

  return true;
}

void CMsgDOTABroadcastNotification::Swap(CMsgDOTABroadcastNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTABroadcastNotification::InternalSwap(CMsgDOTABroadcastNotification* other) {
  message_.Swap(&other->message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTABroadcastNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTABroadcastNotification_descriptor_;
  metadata.reflection = CMsgDOTABroadcastNotification_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTABroadcastNotification

// optional string message = 1;
bool CMsgDOTABroadcastNotification::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTABroadcastNotification::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTABroadcastNotification::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTABroadcastNotification::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& CMsgDOTABroadcastNotification::message() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABroadcastNotification.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTABroadcastNotification::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTABroadcastNotification.message)
}
 void CMsgDOTABroadcastNotification::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTABroadcastNotification.message)
}
 void CMsgDOTABroadcastNotification::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTABroadcastNotification.message)
}
 ::std::string* CMsgDOTABroadcastNotification::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:CMsgDOTABroadcastNotification.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTABroadcastNotification::release_message() {
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTABroadcastNotification::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTABroadcastNotification.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAPCBangTimedReward::kPersonaFieldNumber;
const int CMsgDOTAPCBangTimedReward::kItemdefFieldNumber;
const int CMsgDOTAPCBangTimedReward::kPcbangnameFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAPCBangTimedReward::CMsgDOTAPCBangTimedReward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAPCBangTimedReward)
}

void CMsgDOTAPCBangTimedReward::InitAsDefaultInstance() {
}

CMsgDOTAPCBangTimedReward::CMsgDOTAPCBangTimedReward(const CMsgDOTAPCBangTimedReward& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPCBangTimedReward)
}

void CMsgDOTAPCBangTimedReward::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  persona_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  itemdef_ = 0u;
  pcbangname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAPCBangTimedReward::~CMsgDOTAPCBangTimedReward() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPCBangTimedReward)
  SharedDtor();
}

void CMsgDOTAPCBangTimedReward::SharedDtor() {
  persona_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pcbangname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgDOTAPCBangTimedReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAPCBangTimedReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAPCBangTimedReward_descriptor_;
}

const CMsgDOTAPCBangTimedReward& CMsgDOTAPCBangTimedReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAPCBangTimedReward* CMsgDOTAPCBangTimedReward::default_instance_ = NULL;

CMsgDOTAPCBangTimedReward* CMsgDOTAPCBangTimedReward::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAPCBangTimedReward* n = new CMsgDOTAPCBangTimedReward;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAPCBangTimedReward::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_persona()) {
      persona_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    itemdef_ = 0u;
    if (has_pcbangname()) {
      pcbangname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAPCBangTimedReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAPCBangTimedReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string persona = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona().data(), this->persona().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTAPCBangTimedReward.persona");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemdef;
        break;
      }

      // optional uint32 itemdef = 2;
      case 2: {
        if (tag == 16) {
         parse_itemdef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemdef_)));
          set_has_itemdef();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pcbangname;
        break;
      }

      // optional string pcbangname = 3;
      case 3: {
        if (tag == 26) {
         parse_pcbangname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pcbangname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pcbangname().data(), this->pcbangname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTAPCBangTimedReward.pcbangname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAPCBangTimedReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAPCBangTimedReward)
  return false;
#undef DO_
}

void CMsgDOTAPCBangTimedReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAPCBangTimedReward)
  // optional string persona = 1;
  if (has_persona()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona().data(), this->persona().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAPCBangTimedReward.persona");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->persona(), output);
  }

  // optional uint32 itemdef = 2;
  if (has_itemdef()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemdef(), output);
  }

  // optional string pcbangname = 3;
  if (has_pcbangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pcbangname().data(), this->pcbangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAPCBangTimedReward.pcbangname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pcbangname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAPCBangTimedReward)
}

::google::protobuf::uint8* CMsgDOTAPCBangTimedReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPCBangTimedReward)
  // optional string persona = 1;
  if (has_persona()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona().data(), this->persona().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAPCBangTimedReward.persona");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->persona(), target);
  }

  // optional uint32 itemdef = 2;
  if (has_itemdef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemdef(), target);
  }

  // optional string pcbangname = 3;
  if (has_pcbangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pcbangname().data(), this->pcbangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAPCBangTimedReward.pcbangname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pcbangname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPCBangTimedReward)
  return target;
}

int CMsgDOTAPCBangTimedReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string persona = 1;
    if (has_persona()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona());
    }

    // optional uint32 itemdef = 2;
    if (has_itemdef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemdef());
    }

    // optional string pcbangname = 3;
    if (has_pcbangname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pcbangname());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAPCBangTimedReward::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAPCBangTimedReward* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAPCBangTimedReward>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAPCBangTimedReward::MergeFrom(const CMsgDOTAPCBangTimedReward& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_persona()) {
      set_has_persona();
      persona_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_);
    }
    if (from.has_itemdef()) {
      set_itemdef(from.itemdef());
    }
    if (from.has_pcbangname()) {
      set_has_pcbangname();
      pcbangname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pcbangname_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAPCBangTimedReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPCBangTimedReward::CopyFrom(const CMsgDOTAPCBangTimedReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPCBangTimedReward::IsInitialized() const {

  return true;
}

void CMsgDOTAPCBangTimedReward::Swap(CMsgDOTAPCBangTimedReward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAPCBangTimedReward::InternalSwap(CMsgDOTAPCBangTimedReward* other) {
  persona_.Swap(&other->persona_);
  std::swap(itemdef_, other->itemdef_);
  pcbangname_.Swap(&other->pcbangname_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAPCBangTimedReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAPCBangTimedReward_descriptor_;
  metadata.reflection = CMsgDOTAPCBangTimedReward_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAPCBangTimedReward

// optional string persona = 1;
bool CMsgDOTAPCBangTimedReward::has_persona() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAPCBangTimedReward::set_has_persona() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAPCBangTimedReward::clear_has_persona() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAPCBangTimedReward::clear_persona() {
  persona_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_persona();
}
 const ::std::string& CMsgDOTAPCBangTimedReward::persona() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPCBangTimedReward.persona)
  return persona_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAPCBangTimedReward::set_persona(const ::std::string& value) {
  set_has_persona();
  persona_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPCBangTimedReward.persona)
}
 void CMsgDOTAPCBangTimedReward::set_persona(const char* value) {
  set_has_persona();
  persona_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAPCBangTimedReward.persona)
}
 void CMsgDOTAPCBangTimedReward::set_persona(const char* value, size_t size) {
  set_has_persona();
  persona_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAPCBangTimedReward.persona)
}
 ::std::string* CMsgDOTAPCBangTimedReward::mutable_persona() {
  set_has_persona();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPCBangTimedReward.persona)
  return persona_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTAPCBangTimedReward::release_persona() {
  clear_has_persona();
  return persona_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAPCBangTimedReward::set_allocated_persona(::std::string* persona) {
  if (persona != NULL) {
    set_has_persona();
  } else {
    clear_has_persona();
  }
  persona_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPCBangTimedReward.persona)
}

// optional uint32 itemdef = 2;
bool CMsgDOTAPCBangTimedReward::has_itemdef() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAPCBangTimedReward::set_has_itemdef() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAPCBangTimedReward::clear_has_itemdef() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAPCBangTimedReward::clear_itemdef() {
  itemdef_ = 0u;
  clear_has_itemdef();
}
 ::google::protobuf::uint32 CMsgDOTAPCBangTimedReward::itemdef() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPCBangTimedReward.itemdef)
  return itemdef_;
}
 void CMsgDOTAPCBangTimedReward::set_itemdef(::google::protobuf::uint32 value) {
  set_has_itemdef();
  itemdef_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAPCBangTimedReward.itemdef)
}

// optional string pcbangname = 3;
bool CMsgDOTAPCBangTimedReward::has_pcbangname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAPCBangTimedReward::set_has_pcbangname() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAPCBangTimedReward::clear_has_pcbangname() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAPCBangTimedReward::clear_pcbangname() {
  pcbangname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pcbangname();
}
 const ::std::string& CMsgDOTAPCBangTimedReward::pcbangname() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPCBangTimedReward.pcbangname)
  return pcbangname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAPCBangTimedReward::set_pcbangname(const ::std::string& value) {
  set_has_pcbangname();
  pcbangname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPCBangTimedReward.pcbangname)
}
 void CMsgDOTAPCBangTimedReward::set_pcbangname(const char* value) {
  set_has_pcbangname();
  pcbangname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAPCBangTimedReward.pcbangname)
}
 void CMsgDOTAPCBangTimedReward::set_pcbangname(const char* value, size_t size) {
  set_has_pcbangname();
  pcbangname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAPCBangTimedReward.pcbangname)
}
 ::std::string* CMsgDOTAPCBangTimedReward::mutable_pcbangname() {
  set_has_pcbangname();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPCBangTimedReward.pcbangname)
  return pcbangname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTAPCBangTimedReward::release_pcbangname() {
  clear_has_pcbangname();
  return pcbangname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAPCBangTimedReward::set_allocated_pcbangname(::std::string* pcbangname) {
  if (pcbangname != NULL) {
    set_has_pcbangname();
  } else {
    clear_has_pcbangname();
  }
  pcbangname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pcbangname);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPCBangTimedReward.pcbangname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CAttribute_String::kValueFieldNumber;
#endif  // !_MSC_VER

CAttribute_String::CAttribute_String()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAttribute_String)
}

void CAttribute_String::InitAsDefaultInstance() {
}

CAttribute_String::CAttribute_String(const CAttribute_String& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CAttribute_String)
}

void CAttribute_String::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAttribute_String::~CAttribute_String() {
  // @@protoc_insertion_point(destructor:CAttribute_String)
  SharedDtor();
}

void CAttribute_String::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CAttribute_String::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAttribute_String::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAttribute_String_descriptor_;
}

const CAttribute_String& CAttribute_String::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CAttribute_String* CAttribute_String::default_instance_ = NULL;

CAttribute_String* CAttribute_String::New(::google::protobuf::Arena* arena) const {
  CAttribute_String* n = new CAttribute_String;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CAttribute_String::Clear() {
  if (has_value()) {
    value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CAttribute_String::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAttribute_String)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAttribute_String.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAttribute_String)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAttribute_String)
  return false;
#undef DO_
}

void CAttribute_String::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAttribute_String)
  // optional string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAttribute_String.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAttribute_String)
}

::google::protobuf::uint8* CAttribute_String::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAttribute_String)
  // optional string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAttribute_String.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAttribute_String)
  return target;
}

int CAttribute_String::ByteSize() const {
  int total_size = 0;

  // optional string value = 1;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAttribute_String::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CAttribute_String* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CAttribute_String>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAttribute_String::MergeFrom(const CAttribute_String& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CAttribute_String::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAttribute_String::CopyFrom(const CAttribute_String& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttribute_String::IsInitialized() const {

  return true;
}

void CAttribute_String::Swap(CAttribute_String* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAttribute_String::InternalSwap(CAttribute_String* other) {
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CAttribute_String::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAttribute_String_descriptor_;
  metadata.reflection = CAttribute_String_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CAttribute_String

// optional string value = 1;
bool CAttribute_String::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CAttribute_String::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void CAttribute_String::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void CAttribute_String::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& CAttribute_String::value() const {
  // @@protoc_insertion_point(field_get:CAttribute_String.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CAttribute_String::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CAttribute_String.value)
}
 void CAttribute_String::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CAttribute_String.value)
}
 void CAttribute_String::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CAttribute_String.value)
}
 ::std::string* CAttribute_String::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:CAttribute_String.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CAttribute_String::release_value() {
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CAttribute_String::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:CAttribute_String.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CAttribute_ItemDynamicRecipeComponent::kItemDefFieldNumber;
const int CAttribute_ItemDynamicRecipeComponent::kItemQualityFieldNumber;
const int CAttribute_ItemDynamicRecipeComponent::kItemFlagsFieldNumber;
const int CAttribute_ItemDynamicRecipeComponent::kAttributesStringFieldNumber;
const int CAttribute_ItemDynamicRecipeComponent::kItemCountFieldNumber;
const int CAttribute_ItemDynamicRecipeComponent::kItemsFulfilledFieldNumber;
const int CAttribute_ItemDynamicRecipeComponent::kItemRarityFieldNumber;
const int CAttribute_ItemDynamicRecipeComponent::kLootlistFieldNumber;
const int CAttribute_ItemDynamicRecipeComponent::kFulfilledItemIdFieldNumber;
#endif  // !_MSC_VER

CAttribute_ItemDynamicRecipeComponent::CAttribute_ItemDynamicRecipeComponent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAttribute_ItemDynamicRecipeComponent)
}

void CAttribute_ItemDynamicRecipeComponent::InitAsDefaultInstance() {
}

CAttribute_ItemDynamicRecipeComponent::CAttribute_ItemDynamicRecipeComponent(const CAttribute_ItemDynamicRecipeComponent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CAttribute_ItemDynamicRecipeComponent)
}

void CAttribute_ItemDynamicRecipeComponent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  item_def_ = 0u;
  item_quality_ = 0u;
  item_flags_ = 0u;
  attributes_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_count_ = 0u;
  items_fulfilled_ = 0u;
  item_rarity_ = 0u;
  lootlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fulfilled_item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAttribute_ItemDynamicRecipeComponent::~CAttribute_ItemDynamicRecipeComponent() {
  // @@protoc_insertion_point(destructor:CAttribute_ItemDynamicRecipeComponent)
  SharedDtor();
}

void CAttribute_ItemDynamicRecipeComponent::SharedDtor() {
  attributes_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lootlist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CAttribute_ItemDynamicRecipeComponent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAttribute_ItemDynamicRecipeComponent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAttribute_ItemDynamicRecipeComponent_descriptor_;
}

const CAttribute_ItemDynamicRecipeComponent& CAttribute_ItemDynamicRecipeComponent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CAttribute_ItemDynamicRecipeComponent* CAttribute_ItemDynamicRecipeComponent::default_instance_ = NULL;

CAttribute_ItemDynamicRecipeComponent* CAttribute_ItemDynamicRecipeComponent::New(::google::protobuf::Arena* arena) const {
  CAttribute_ItemDynamicRecipeComponent* n = new CAttribute_ItemDynamicRecipeComponent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CAttribute_ItemDynamicRecipeComponent::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CAttribute_ItemDynamicRecipeComponent*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(item_def_, item_quality_);
    ZR_(item_flags_, item_rarity_);
    if (has_attributes_string()) {
      attributes_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_lootlist()) {
      lootlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  fulfilled_item_id_ = GOOGLE_ULONGLONG(0);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CAttribute_ItemDynamicRecipeComponent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAttribute_ItemDynamicRecipeComponent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_def = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_)));
          set_has_item_def();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_quality;
        break;
      }

      // optional uint32 item_quality = 2;
      case 2: {
        if (tag == 16) {
         parse_item_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_quality_)));
          set_has_item_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_item_flags;
        break;
      }

      // optional uint32 item_flags = 3;
      case 3: {
        if (tag == 24) {
         parse_item_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_flags_)));
          set_has_item_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attributes_string;
        break;
      }

      // optional string attributes_string = 4;
      case 4: {
        if (tag == 34) {
         parse_attributes_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attributes_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attributes_string().data(), this->attributes_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAttribute_ItemDynamicRecipeComponent.attributes_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_item_count;
        break;
      }

      // optional uint32 item_count = 5;
      case 5: {
        if (tag == 40) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_items_fulfilled;
        break;
      }

      // optional uint32 items_fulfilled = 6;
      case 6: {
        if (tag == 48) {
         parse_items_fulfilled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &items_fulfilled_)));
          set_has_items_fulfilled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_item_rarity;
        break;
      }

      // optional uint32 item_rarity = 7;
      case 7: {
        if (tag == 56) {
         parse_item_rarity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_rarity_)));
          set_has_item_rarity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_lootlist;
        break;
      }

      // optional string lootlist = 8;
      case 8: {
        if (tag == 66) {
         parse_lootlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lootlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lootlist().data(), this->lootlist().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAttribute_ItemDynamicRecipeComponent.lootlist");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_fulfilled_item_id;
        break;
      }

      // optional uint64 fulfilled_item_id = 9;
      case 9: {
        if (tag == 72) {
         parse_fulfilled_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fulfilled_item_id_)));
          set_has_fulfilled_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAttribute_ItemDynamicRecipeComponent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAttribute_ItemDynamicRecipeComponent)
  return false;
#undef DO_
}

void CAttribute_ItemDynamicRecipeComponent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAttribute_ItemDynamicRecipeComponent)
  // optional uint32 item_def = 1;
  if (has_item_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_def(), output);
  }

  // optional uint32 item_quality = 2;
  if (has_item_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_quality(), output);
  }

  // optional uint32 item_flags = 3;
  if (has_item_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_flags(), output);
  }

  // optional string attributes_string = 4;
  if (has_attributes_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attributes_string().data(), this->attributes_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAttribute_ItemDynamicRecipeComponent.attributes_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->attributes_string(), output);
  }

  // optional uint32 item_count = 5;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->item_count(), output);
  }

  // optional uint32 items_fulfilled = 6;
  if (has_items_fulfilled()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->items_fulfilled(), output);
  }

  // optional uint32 item_rarity = 7;
  if (has_item_rarity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->item_rarity(), output);
  }

  // optional string lootlist = 8;
  if (has_lootlist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lootlist().data(), this->lootlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAttribute_ItemDynamicRecipeComponent.lootlist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->lootlist(), output);
  }

  // optional uint64 fulfilled_item_id = 9;
  if (has_fulfilled_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->fulfilled_item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAttribute_ItemDynamicRecipeComponent)
}

::google::protobuf::uint8* CAttribute_ItemDynamicRecipeComponent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAttribute_ItemDynamicRecipeComponent)
  // optional uint32 item_def = 1;
  if (has_item_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_def(), target);
  }

  // optional uint32 item_quality = 2;
  if (has_item_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_quality(), target);
  }

  // optional uint32 item_flags = 3;
  if (has_item_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_flags(), target);
  }

  // optional string attributes_string = 4;
  if (has_attributes_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attributes_string().data(), this->attributes_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAttribute_ItemDynamicRecipeComponent.attributes_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->attributes_string(), target);
  }

  // optional uint32 item_count = 5;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->item_count(), target);
  }

  // optional uint32 items_fulfilled = 6;
  if (has_items_fulfilled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->items_fulfilled(), target);
  }

  // optional uint32 item_rarity = 7;
  if (has_item_rarity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->item_rarity(), target);
  }

  // optional string lootlist = 8;
  if (has_lootlist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lootlist().data(), this->lootlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAttribute_ItemDynamicRecipeComponent.lootlist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->lootlist(), target);
  }

  // optional uint64 fulfilled_item_id = 9;
  if (has_fulfilled_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->fulfilled_item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAttribute_ItemDynamicRecipeComponent)
  return target;
}

int CAttribute_ItemDynamicRecipeComponent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 item_def = 1;
    if (has_item_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def());
    }

    // optional uint32 item_quality = 2;
    if (has_item_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_quality());
    }

    // optional uint32 item_flags = 3;
    if (has_item_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_flags());
    }

    // optional string attributes_string = 4;
    if (has_attributes_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attributes_string());
    }

    // optional uint32 item_count = 5;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }

    // optional uint32 items_fulfilled = 6;
    if (has_items_fulfilled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->items_fulfilled());
    }

    // optional uint32 item_rarity = 7;
    if (has_item_rarity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_rarity());
    }

    // optional string lootlist = 8;
    if (has_lootlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lootlist());
    }

  }
  // optional uint64 fulfilled_item_id = 9;
  if (has_fulfilled_item_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fulfilled_item_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAttribute_ItemDynamicRecipeComponent::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CAttribute_ItemDynamicRecipeComponent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CAttribute_ItemDynamicRecipeComponent>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAttribute_ItemDynamicRecipeComponent::MergeFrom(const CAttribute_ItemDynamicRecipeComponent& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_def()) {
      set_item_def(from.item_def());
    }
    if (from.has_item_quality()) {
      set_item_quality(from.item_quality());
    }
    if (from.has_item_flags()) {
      set_item_flags(from.item_flags());
    }
    if (from.has_attributes_string()) {
      set_has_attributes_string();
      attributes_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attributes_string_);
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_items_fulfilled()) {
      set_items_fulfilled(from.items_fulfilled());
    }
    if (from.has_item_rarity()) {
      set_item_rarity(from.item_rarity());
    }
    if (from.has_lootlist()) {
      set_has_lootlist();
      lootlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lootlist_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fulfilled_item_id()) {
      set_fulfilled_item_id(from.fulfilled_item_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CAttribute_ItemDynamicRecipeComponent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAttribute_ItemDynamicRecipeComponent::CopyFrom(const CAttribute_ItemDynamicRecipeComponent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttribute_ItemDynamicRecipeComponent::IsInitialized() const {

  return true;
}

void CAttribute_ItemDynamicRecipeComponent::Swap(CAttribute_ItemDynamicRecipeComponent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAttribute_ItemDynamicRecipeComponent::InternalSwap(CAttribute_ItemDynamicRecipeComponent* other) {
  std::swap(item_def_, other->item_def_);
  std::swap(item_quality_, other->item_quality_);
  std::swap(item_flags_, other->item_flags_);
  attributes_string_.Swap(&other->attributes_string_);
  std::swap(item_count_, other->item_count_);
  std::swap(items_fulfilled_, other->items_fulfilled_);
  std::swap(item_rarity_, other->item_rarity_);
  lootlist_.Swap(&other->lootlist_);
  std::swap(fulfilled_item_id_, other->fulfilled_item_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CAttribute_ItemDynamicRecipeComponent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAttribute_ItemDynamicRecipeComponent_descriptor_;
  metadata.reflection = CAttribute_ItemDynamicRecipeComponent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CAttribute_ItemDynamicRecipeComponent

// optional uint32 item_def = 1;
bool CAttribute_ItemDynamicRecipeComponent::has_item_def() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CAttribute_ItemDynamicRecipeComponent::set_has_item_def() {
  _has_bits_[0] |= 0x00000001u;
}
void CAttribute_ItemDynamicRecipeComponent::clear_has_item_def() {
  _has_bits_[0] &= ~0x00000001u;
}
void CAttribute_ItemDynamicRecipeComponent::clear_item_def() {
  item_def_ = 0u;
  clear_has_item_def();
}
 ::google::protobuf::uint32 CAttribute_ItemDynamicRecipeComponent::item_def() const {
  // @@protoc_insertion_point(field_get:CAttribute_ItemDynamicRecipeComponent.item_def)
  return item_def_;
}
 void CAttribute_ItemDynamicRecipeComponent::set_item_def(::google::protobuf::uint32 value) {
  set_has_item_def();
  item_def_ = value;
  // @@protoc_insertion_point(field_set:CAttribute_ItemDynamicRecipeComponent.item_def)
}

// optional uint32 item_quality = 2;
bool CAttribute_ItemDynamicRecipeComponent::has_item_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CAttribute_ItemDynamicRecipeComponent::set_has_item_quality() {
  _has_bits_[0] |= 0x00000002u;
}
void CAttribute_ItemDynamicRecipeComponent::clear_has_item_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
void CAttribute_ItemDynamicRecipeComponent::clear_item_quality() {
  item_quality_ = 0u;
  clear_has_item_quality();
}
 ::google::protobuf::uint32 CAttribute_ItemDynamicRecipeComponent::item_quality() const {
  // @@protoc_insertion_point(field_get:CAttribute_ItemDynamicRecipeComponent.item_quality)
  return item_quality_;
}
 void CAttribute_ItemDynamicRecipeComponent::set_item_quality(::google::protobuf::uint32 value) {
  set_has_item_quality();
  item_quality_ = value;
  // @@protoc_insertion_point(field_set:CAttribute_ItemDynamicRecipeComponent.item_quality)
}

// optional uint32 item_flags = 3;
bool CAttribute_ItemDynamicRecipeComponent::has_item_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CAttribute_ItemDynamicRecipeComponent::set_has_item_flags() {
  _has_bits_[0] |= 0x00000004u;
}
void CAttribute_ItemDynamicRecipeComponent::clear_has_item_flags() {
  _has_bits_[0] &= ~0x00000004u;
}
void CAttribute_ItemDynamicRecipeComponent::clear_item_flags() {
  item_flags_ = 0u;
  clear_has_item_flags();
}
 ::google::protobuf::uint32 CAttribute_ItemDynamicRecipeComponent::item_flags() const {
  // @@protoc_insertion_point(field_get:CAttribute_ItemDynamicRecipeComponent.item_flags)
  return item_flags_;
}
 void CAttribute_ItemDynamicRecipeComponent::set_item_flags(::google::protobuf::uint32 value) {
  set_has_item_flags();
  item_flags_ = value;
  // @@protoc_insertion_point(field_set:CAttribute_ItemDynamicRecipeComponent.item_flags)
}

// optional string attributes_string = 4;
bool CAttribute_ItemDynamicRecipeComponent::has_attributes_string() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CAttribute_ItemDynamicRecipeComponent::set_has_attributes_string() {
  _has_bits_[0] |= 0x00000008u;
}
void CAttribute_ItemDynamicRecipeComponent::clear_has_attributes_string() {
  _has_bits_[0] &= ~0x00000008u;
}
void CAttribute_ItemDynamicRecipeComponent::clear_attributes_string() {
  attributes_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attributes_string();
}
 const ::std::string& CAttribute_ItemDynamicRecipeComponent::attributes_string() const {
  // @@protoc_insertion_point(field_get:CAttribute_ItemDynamicRecipeComponent.attributes_string)
  return attributes_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CAttribute_ItemDynamicRecipeComponent::set_attributes_string(const ::std::string& value) {
  set_has_attributes_string();
  attributes_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CAttribute_ItemDynamicRecipeComponent.attributes_string)
}
 void CAttribute_ItemDynamicRecipeComponent::set_attributes_string(const char* value) {
  set_has_attributes_string();
  attributes_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CAttribute_ItemDynamicRecipeComponent.attributes_string)
}
 void CAttribute_ItemDynamicRecipeComponent::set_attributes_string(const char* value, size_t size) {
  set_has_attributes_string();
  attributes_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CAttribute_ItemDynamicRecipeComponent.attributes_string)
}
 ::std::string* CAttribute_ItemDynamicRecipeComponent::mutable_attributes_string() {
  set_has_attributes_string();
  // @@protoc_insertion_point(field_mutable:CAttribute_ItemDynamicRecipeComponent.attributes_string)
  return attributes_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CAttribute_ItemDynamicRecipeComponent::release_attributes_string() {
  clear_has_attributes_string();
  return attributes_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CAttribute_ItemDynamicRecipeComponent::set_allocated_attributes_string(::std::string* attributes_string) {
  if (attributes_string != NULL) {
    set_has_attributes_string();
  } else {
    clear_has_attributes_string();
  }
  attributes_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attributes_string);
  // @@protoc_insertion_point(field_set_allocated:CAttribute_ItemDynamicRecipeComponent.attributes_string)
}

// optional uint32 item_count = 5;
bool CAttribute_ItemDynamicRecipeComponent::has_item_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CAttribute_ItemDynamicRecipeComponent::set_has_item_count() {
  _has_bits_[0] |= 0x00000010u;
}
void CAttribute_ItemDynamicRecipeComponent::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000010u;
}
void CAttribute_ItemDynamicRecipeComponent::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
 ::google::protobuf::uint32 CAttribute_ItemDynamicRecipeComponent::item_count() const {
  // @@protoc_insertion_point(field_get:CAttribute_ItemDynamicRecipeComponent.item_count)
  return item_count_;
}
 void CAttribute_ItemDynamicRecipeComponent::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
  // @@protoc_insertion_point(field_set:CAttribute_ItemDynamicRecipeComponent.item_count)
}

// optional uint32 items_fulfilled = 6;
bool CAttribute_ItemDynamicRecipeComponent::has_items_fulfilled() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CAttribute_ItemDynamicRecipeComponent::set_has_items_fulfilled() {
  _has_bits_[0] |= 0x00000020u;
}
void CAttribute_ItemDynamicRecipeComponent::clear_has_items_fulfilled() {
  _has_bits_[0] &= ~0x00000020u;
}
void CAttribute_ItemDynamicRecipeComponent::clear_items_fulfilled() {
  items_fulfilled_ = 0u;
  clear_has_items_fulfilled();
}
 ::google::protobuf::uint32 CAttribute_ItemDynamicRecipeComponent::items_fulfilled() const {
  // @@protoc_insertion_point(field_get:CAttribute_ItemDynamicRecipeComponent.items_fulfilled)
  return items_fulfilled_;
}
 void CAttribute_ItemDynamicRecipeComponent::set_items_fulfilled(::google::protobuf::uint32 value) {
  set_has_items_fulfilled();
  items_fulfilled_ = value;
  // @@protoc_insertion_point(field_set:CAttribute_ItemDynamicRecipeComponent.items_fulfilled)
}

// optional uint32 item_rarity = 7;
bool CAttribute_ItemDynamicRecipeComponent::has_item_rarity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CAttribute_ItemDynamicRecipeComponent::set_has_item_rarity() {
  _has_bits_[0] |= 0x00000040u;
}
void CAttribute_ItemDynamicRecipeComponent::clear_has_item_rarity() {
  _has_bits_[0] &= ~0x00000040u;
}
void CAttribute_ItemDynamicRecipeComponent::clear_item_rarity() {
  item_rarity_ = 0u;
  clear_has_item_rarity();
}
 ::google::protobuf::uint32 CAttribute_ItemDynamicRecipeComponent::item_rarity() const {
  // @@protoc_insertion_point(field_get:CAttribute_ItemDynamicRecipeComponent.item_rarity)
  return item_rarity_;
}
 void CAttribute_ItemDynamicRecipeComponent::set_item_rarity(::google::protobuf::uint32 value) {
  set_has_item_rarity();
  item_rarity_ = value;
  // @@protoc_insertion_point(field_set:CAttribute_ItemDynamicRecipeComponent.item_rarity)
}

// optional string lootlist = 8;
bool CAttribute_ItemDynamicRecipeComponent::has_lootlist() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CAttribute_ItemDynamicRecipeComponent::set_has_lootlist() {
  _has_bits_[0] |= 0x00000080u;
}
void CAttribute_ItemDynamicRecipeComponent::clear_has_lootlist() {
  _has_bits_[0] &= ~0x00000080u;
}
void CAttribute_ItemDynamicRecipeComponent::clear_lootlist() {
  lootlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lootlist();
}
 const ::std::string& CAttribute_ItemDynamicRecipeComponent::lootlist() const {
  // @@protoc_insertion_point(field_get:CAttribute_ItemDynamicRecipeComponent.lootlist)
  return lootlist_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CAttribute_ItemDynamicRecipeComponent::set_lootlist(const ::std::string& value) {
  set_has_lootlist();
  lootlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CAttribute_ItemDynamicRecipeComponent.lootlist)
}
 void CAttribute_ItemDynamicRecipeComponent::set_lootlist(const char* value) {
  set_has_lootlist();
  lootlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CAttribute_ItemDynamicRecipeComponent.lootlist)
}
 void CAttribute_ItemDynamicRecipeComponent::set_lootlist(const char* value, size_t size) {
  set_has_lootlist();
  lootlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CAttribute_ItemDynamicRecipeComponent.lootlist)
}
 ::std::string* CAttribute_ItemDynamicRecipeComponent::mutable_lootlist() {
  set_has_lootlist();
  // @@protoc_insertion_point(field_mutable:CAttribute_ItemDynamicRecipeComponent.lootlist)
  return lootlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CAttribute_ItemDynamicRecipeComponent::release_lootlist() {
  clear_has_lootlist();
  return lootlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CAttribute_ItemDynamicRecipeComponent::set_allocated_lootlist(::std::string* lootlist) {
  if (lootlist != NULL) {
    set_has_lootlist();
  } else {
    clear_has_lootlist();
  }
  lootlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lootlist);
  // @@protoc_insertion_point(field_set_allocated:CAttribute_ItemDynamicRecipeComponent.lootlist)
}

// optional uint64 fulfilled_item_id = 9;
bool CAttribute_ItemDynamicRecipeComponent::has_fulfilled_item_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CAttribute_ItemDynamicRecipeComponent::set_has_fulfilled_item_id() {
  _has_bits_[0] |= 0x00000100u;
}
void CAttribute_ItemDynamicRecipeComponent::clear_has_fulfilled_item_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void CAttribute_ItemDynamicRecipeComponent::clear_fulfilled_item_id() {
  fulfilled_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_fulfilled_item_id();
}
 ::google::protobuf::uint64 CAttribute_ItemDynamicRecipeComponent::fulfilled_item_id() const {
  // @@protoc_insertion_point(field_get:CAttribute_ItemDynamicRecipeComponent.fulfilled_item_id)
  return fulfilled_item_id_;
}
 void CAttribute_ItemDynamicRecipeComponent::set_fulfilled_item_id(::google::protobuf::uint64 value) {
  set_has_fulfilled_item_id();
  fulfilled_item_id_ = value;
  // @@protoc_insertion_point(field_set:CAttribute_ItemDynamicRecipeComponent.fulfilled_item_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CProtoItemHeroStatue::kHeroIdFieldNumber;
const int CProtoItemHeroStatue::kStatusEffectIndexFieldNumber;
const int CProtoItemHeroStatue::kSequenceNameFieldNumber;
const int CProtoItemHeroStatue::kCycleFieldNumber;
const int CProtoItemHeroStatue::kWearableFieldNumber;
const int CProtoItemHeroStatue::kInscriptionFieldNumber;
const int CProtoItemHeroStatue::kStyleFieldNumber;
const int CProtoItemHeroStatue::kTournamentDropFieldNumber;
#endif  // !_MSC_VER

CProtoItemHeroStatue::CProtoItemHeroStatue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CProtoItemHeroStatue)
}

void CProtoItemHeroStatue::InitAsDefaultInstance() {
}

CProtoItemHeroStatue::CProtoItemHeroStatue(const CProtoItemHeroStatue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CProtoItemHeroStatue)
}

void CProtoItemHeroStatue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hero_id_ = 0u;
  status_effect_index_ = 0u;
  sequence_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cycle_ = 0;
  inscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tournament_drop_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProtoItemHeroStatue::~CProtoItemHeroStatue() {
  // @@protoc_insertion_point(destructor:CProtoItemHeroStatue)
  SharedDtor();
}

void CProtoItemHeroStatue::SharedDtor() {
  sequence_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inscription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CProtoItemHeroStatue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProtoItemHeroStatue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProtoItemHeroStatue_descriptor_;
}

const CProtoItemHeroStatue& CProtoItemHeroStatue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CProtoItemHeroStatue* CProtoItemHeroStatue::default_instance_ = NULL;

CProtoItemHeroStatue* CProtoItemHeroStatue::New(::google::protobuf::Arena* arena) const {
  CProtoItemHeroStatue* n = new CProtoItemHeroStatue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CProtoItemHeroStatue::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CProtoItemHeroStatue*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 175u) {
    ZR_(hero_id_, status_effect_index_);
    ZR_(cycle_, tournament_drop_);
    if (has_sequence_name()) {
      sequence_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_inscription()) {
      inscription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  wearable_.Clear();
  style_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CProtoItemHeroStatue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CProtoItemHeroStatue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status_effect_index;
        break;
      }

      // optional uint32 status_effect_index = 2;
      case 2: {
        if (tag == 16) {
         parse_status_effect_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_effect_index_)));
          set_has_status_effect_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sequence_name;
        break;
      }

      // optional string sequence_name = 3;
      case 3: {
        if (tag == 26) {
         parse_sequence_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sequence_name().data(), this->sequence_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CProtoItemHeroStatue.sequence_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_cycle;
        break;
      }

      // optional float cycle = 4;
      case 4: {
        if (tag == 37) {
         parse_cycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cycle_)));
          set_has_cycle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_wearable;
        break;
      }

      // repeated uint32 wearable = 5;
      case 5: {
        if (tag == 40) {
         parse_wearable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_wearable())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_wearable())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_wearable;
        if (input->ExpectTag(50)) goto parse_inscription;
        break;
      }

      // optional string inscription = 6;
      case 6: {
        if (tag == 50) {
         parse_inscription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inscription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inscription().data(), this->inscription().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CProtoItemHeroStatue.inscription");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_style;
        break;
      }

      // repeated uint32 style = 7;
      case 7: {
        if (tag == 56) {
         parse_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_style())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_style())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_style;
        if (input->ExpectTag(64)) goto parse_tournament_drop;
        break;
      }

      // optional bool tournament_drop = 8;
      case 8: {
        if (tag == 64) {
         parse_tournament_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tournament_drop_)));
          set_has_tournament_drop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CProtoItemHeroStatue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CProtoItemHeroStatue)
  return false;
#undef DO_
}

void CProtoItemHeroStatue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CProtoItemHeroStatue)
  // optional uint32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // optional uint32 status_effect_index = 2;
  if (has_status_effect_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status_effect_index(), output);
  }

  // optional string sequence_name = 3;
  if (has_sequence_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence_name().data(), this->sequence_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CProtoItemHeroStatue.sequence_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sequence_name(), output);
  }

  // optional float cycle = 4;
  if (has_cycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cycle(), output);
  }

  // repeated uint32 wearable = 5;
  for (int i = 0; i < this->wearable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->wearable(i), output);
  }

  // optional string inscription = 6;
  if (has_inscription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inscription().data(), this->inscription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CProtoItemHeroStatue.inscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->inscription(), output);
  }

  // repeated uint32 style = 7;
  for (int i = 0; i < this->style_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->style(i), output);
  }

  // optional bool tournament_drop = 8;
  if (has_tournament_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->tournament_drop(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CProtoItemHeroStatue)
}

::google::protobuf::uint8* CProtoItemHeroStatue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemHeroStatue)
  // optional uint32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // optional uint32 status_effect_index = 2;
  if (has_status_effect_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status_effect_index(), target);
  }

  // optional string sequence_name = 3;
  if (has_sequence_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence_name().data(), this->sequence_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CProtoItemHeroStatue.sequence_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sequence_name(), target);
  }

  // optional float cycle = 4;
  if (has_cycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cycle(), target);
  }

  // repeated uint32 wearable = 5;
  for (int i = 0; i < this->wearable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->wearable(i), target);
  }

  // optional string inscription = 6;
  if (has_inscription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inscription().data(), this->inscription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CProtoItemHeroStatue.inscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->inscription(), target);
  }

  // repeated uint32 style = 7;
  for (int i = 0; i < this->style_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->style(i), target);
  }

  // optional bool tournament_drop = 8;
  if (has_tournament_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->tournament_drop(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemHeroStatue)
  return target;
}

int CProtoItemHeroStatue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 175u) {
    // optional uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 status_effect_index = 2;
    if (has_status_effect_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status_effect_index());
    }

    // optional string sequence_name = 3;
    if (has_sequence_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sequence_name());
    }

    // optional float cycle = 4;
    if (has_cycle()) {
      total_size += 1 + 4;
    }

    // optional string inscription = 6;
    if (has_inscription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inscription());
    }

    // optional bool tournament_drop = 8;
    if (has_tournament_drop()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 wearable = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->wearable_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->wearable(i));
    }
    total_size += 1 * this->wearable_size() + data_size;
  }

  // repeated uint32 style = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->style_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->style(i));
    }
    total_size += 1 * this->style_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProtoItemHeroStatue::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CProtoItemHeroStatue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CProtoItemHeroStatue>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProtoItemHeroStatue::MergeFrom(const CProtoItemHeroStatue& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  wearable_.MergeFrom(from.wearable_);
  style_.MergeFrom(from.style_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_status_effect_index()) {
      set_status_effect_index(from.status_effect_index());
    }
    if (from.has_sequence_name()) {
      set_has_sequence_name();
      sequence_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_name_);
    }
    if (from.has_cycle()) {
      set_cycle(from.cycle());
    }
    if (from.has_inscription()) {
      set_has_inscription();
      inscription_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inscription_);
    }
    if (from.has_tournament_drop()) {
      set_tournament_drop(from.tournament_drop());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CProtoItemHeroStatue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemHeroStatue::CopyFrom(const CProtoItemHeroStatue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemHeroStatue::IsInitialized() const {

  return true;
}

void CProtoItemHeroStatue::Swap(CProtoItemHeroStatue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CProtoItemHeroStatue::InternalSwap(CProtoItemHeroStatue* other) {
  std::swap(hero_id_, other->hero_id_);
  std::swap(status_effect_index_, other->status_effect_index_);
  sequence_name_.Swap(&other->sequence_name_);
  std::swap(cycle_, other->cycle_);
  wearable_.UnsafeArenaSwap(&other->wearable_);
  inscription_.Swap(&other->inscription_);
  style_.UnsafeArenaSwap(&other->style_);
  std::swap(tournament_drop_, other->tournament_drop_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CProtoItemHeroStatue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProtoItemHeroStatue_descriptor_;
  metadata.reflection = CProtoItemHeroStatue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CProtoItemHeroStatue

// optional uint32 hero_id = 1;
bool CProtoItemHeroStatue::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CProtoItemHeroStatue::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CProtoItemHeroStatue::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CProtoItemHeroStatue::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
 ::google::protobuf::uint32 CProtoItemHeroStatue::hero_id() const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.hero_id)
  return hero_id_;
}
 void CProtoItemHeroStatue::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.hero_id)
}

// optional uint32 status_effect_index = 2;
bool CProtoItemHeroStatue::has_status_effect_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CProtoItemHeroStatue::set_has_status_effect_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CProtoItemHeroStatue::clear_has_status_effect_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CProtoItemHeroStatue::clear_status_effect_index() {
  status_effect_index_ = 0u;
  clear_has_status_effect_index();
}
 ::google::protobuf::uint32 CProtoItemHeroStatue::status_effect_index() const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.status_effect_index)
  return status_effect_index_;
}
 void CProtoItemHeroStatue::set_status_effect_index(::google::protobuf::uint32 value) {
  set_has_status_effect_index();
  status_effect_index_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.status_effect_index)
}

// optional string sequence_name = 3;
bool CProtoItemHeroStatue::has_sequence_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CProtoItemHeroStatue::set_has_sequence_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CProtoItemHeroStatue::clear_has_sequence_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CProtoItemHeroStatue::clear_sequence_name() {
  sequence_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sequence_name();
}
 const ::std::string& CProtoItemHeroStatue::sequence_name() const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.sequence_name)
  return sequence_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CProtoItemHeroStatue::set_sequence_name(const ::std::string& value) {
  set_has_sequence_name();
  sequence_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.sequence_name)
}
 void CProtoItemHeroStatue::set_sequence_name(const char* value) {
  set_has_sequence_name();
  sequence_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CProtoItemHeroStatue.sequence_name)
}
 void CProtoItemHeroStatue::set_sequence_name(const char* value, size_t size) {
  set_has_sequence_name();
  sequence_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CProtoItemHeroStatue.sequence_name)
}
 ::std::string* CProtoItemHeroStatue::mutable_sequence_name() {
  set_has_sequence_name();
  // @@protoc_insertion_point(field_mutable:CProtoItemHeroStatue.sequence_name)
  return sequence_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CProtoItemHeroStatue::release_sequence_name() {
  clear_has_sequence_name();
  return sequence_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CProtoItemHeroStatue::set_allocated_sequence_name(::std::string* sequence_name) {
  if (sequence_name != NULL) {
    set_has_sequence_name();
  } else {
    clear_has_sequence_name();
  }
  sequence_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence_name);
  // @@protoc_insertion_point(field_set_allocated:CProtoItemHeroStatue.sequence_name)
}

// optional float cycle = 4;
bool CProtoItemHeroStatue::has_cycle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CProtoItemHeroStatue::set_has_cycle() {
  _has_bits_[0] |= 0x00000008u;
}
void CProtoItemHeroStatue::clear_has_cycle() {
  _has_bits_[0] &= ~0x00000008u;
}
void CProtoItemHeroStatue::clear_cycle() {
  cycle_ = 0;
  clear_has_cycle();
}
 float CProtoItemHeroStatue::cycle() const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.cycle)
  return cycle_;
}
 void CProtoItemHeroStatue::set_cycle(float value) {
  set_has_cycle();
  cycle_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.cycle)
}

// repeated uint32 wearable = 5;
int CProtoItemHeroStatue::wearable_size() const {
  return wearable_.size();
}
void CProtoItemHeroStatue::clear_wearable() {
  wearable_.Clear();
}
 ::google::protobuf::uint32 CProtoItemHeroStatue::wearable(int index) const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.wearable)
  return wearable_.Get(index);
}
 void CProtoItemHeroStatue::set_wearable(int index, ::google::protobuf::uint32 value) {
  wearable_.Set(index, value);
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.wearable)
}
 void CProtoItemHeroStatue::add_wearable(::google::protobuf::uint32 value) {
  wearable_.Add(value);
  // @@protoc_insertion_point(field_add:CProtoItemHeroStatue.wearable)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CProtoItemHeroStatue::wearable() const {
  // @@protoc_insertion_point(field_list:CProtoItemHeroStatue.wearable)
  return wearable_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CProtoItemHeroStatue::mutable_wearable() {
  // @@protoc_insertion_point(field_mutable_list:CProtoItemHeroStatue.wearable)
  return &wearable_;
}

// optional string inscription = 6;
bool CProtoItemHeroStatue::has_inscription() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CProtoItemHeroStatue::set_has_inscription() {
  _has_bits_[0] |= 0x00000020u;
}
void CProtoItemHeroStatue::clear_has_inscription() {
  _has_bits_[0] &= ~0x00000020u;
}
void CProtoItemHeroStatue::clear_inscription() {
  inscription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_inscription();
}
 const ::std::string& CProtoItemHeroStatue::inscription() const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.inscription)
  return inscription_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CProtoItemHeroStatue::set_inscription(const ::std::string& value) {
  set_has_inscription();
  inscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.inscription)
}
 void CProtoItemHeroStatue::set_inscription(const char* value) {
  set_has_inscription();
  inscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CProtoItemHeroStatue.inscription)
}
 void CProtoItemHeroStatue::set_inscription(const char* value, size_t size) {
  set_has_inscription();
  inscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CProtoItemHeroStatue.inscription)
}
 ::std::string* CProtoItemHeroStatue::mutable_inscription() {
  set_has_inscription();
  // @@protoc_insertion_point(field_mutable:CProtoItemHeroStatue.inscription)
  return inscription_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CProtoItemHeroStatue::release_inscription() {
  clear_has_inscription();
  return inscription_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CProtoItemHeroStatue::set_allocated_inscription(::std::string* inscription) {
  if (inscription != NULL) {
    set_has_inscription();
  } else {
    clear_has_inscription();
  }
  inscription_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inscription);
  // @@protoc_insertion_point(field_set_allocated:CProtoItemHeroStatue.inscription)
}

// repeated uint32 style = 7;
int CProtoItemHeroStatue::style_size() const {
  return style_.size();
}
void CProtoItemHeroStatue::clear_style() {
  style_.Clear();
}
 ::google::protobuf::uint32 CProtoItemHeroStatue::style(int index) const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.style)
  return style_.Get(index);
}
 void CProtoItemHeroStatue::set_style(int index, ::google::protobuf::uint32 value) {
  style_.Set(index, value);
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.style)
}
 void CProtoItemHeroStatue::add_style(::google::protobuf::uint32 value) {
  style_.Add(value);
  // @@protoc_insertion_point(field_add:CProtoItemHeroStatue.style)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CProtoItemHeroStatue::style() const {
  // @@protoc_insertion_point(field_list:CProtoItemHeroStatue.style)
  return style_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CProtoItemHeroStatue::mutable_style() {
  // @@protoc_insertion_point(field_mutable_list:CProtoItemHeroStatue.style)
  return &style_;
}

// optional bool tournament_drop = 8;
bool CProtoItemHeroStatue::has_tournament_drop() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CProtoItemHeroStatue::set_has_tournament_drop() {
  _has_bits_[0] |= 0x00000080u;
}
void CProtoItemHeroStatue::clear_has_tournament_drop() {
  _has_bits_[0] &= ~0x00000080u;
}
void CProtoItemHeroStatue::clear_tournament_drop() {
  tournament_drop_ = false;
  clear_has_tournament_drop();
}
 bool CProtoItemHeroStatue::tournament_drop() const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.tournament_drop)
  return tournament_drop_;
}
 void CProtoItemHeroStatue::set_tournament_drop(bool value) {
  set_has_tournament_drop();
  tournament_drop_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.tournament_drop)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CProtoItemTeamShowcase::kHeroIdFieldNumber;
const int CProtoItemTeamShowcase::kStatusEffectIndexFieldNumber;
const int CProtoItemTeamShowcase::kSequenceNameFieldNumber;
const int CProtoItemTeamShowcase::kCycleFieldNumber;
const int CProtoItemTeamShowcase::kWearableFieldNumber;
const int CProtoItemTeamShowcase::kInscriptionFieldNumber;
const int CProtoItemTeamShowcase::kStyleFieldNumber;
#endif  // !_MSC_VER

CProtoItemTeamShowcase::CProtoItemTeamShowcase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CProtoItemTeamShowcase)
}

void CProtoItemTeamShowcase::InitAsDefaultInstance() {
}

CProtoItemTeamShowcase::CProtoItemTeamShowcase(const CProtoItemTeamShowcase& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CProtoItemTeamShowcase)
}

void CProtoItemTeamShowcase::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hero_id_ = 0u;
  status_effect_index_ = 0u;
  sequence_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cycle_ = 0;
  inscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProtoItemTeamShowcase::~CProtoItemTeamShowcase() {
  // @@protoc_insertion_point(destructor:CProtoItemTeamShowcase)
  SharedDtor();
}

void CProtoItemTeamShowcase::SharedDtor() {
  sequence_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inscription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CProtoItemTeamShowcase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProtoItemTeamShowcase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProtoItemTeamShowcase_descriptor_;
}

const CProtoItemTeamShowcase& CProtoItemTeamShowcase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CProtoItemTeamShowcase* CProtoItemTeamShowcase::default_instance_ = NULL;

CProtoItemTeamShowcase* CProtoItemTeamShowcase::New(::google::protobuf::Arena* arena) const {
  CProtoItemTeamShowcase* n = new CProtoItemTeamShowcase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CProtoItemTeamShowcase::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CProtoItemTeamShowcase*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 47u) {
    ZR_(hero_id_, status_effect_index_);
    if (has_sequence_name()) {
      sequence_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    cycle_ = 0;
    if (has_inscription()) {
      inscription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  wearable_.Clear();
  style_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CProtoItemTeamShowcase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CProtoItemTeamShowcase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status_effect_index;
        break;
      }

      // optional uint32 status_effect_index = 2;
      case 2: {
        if (tag == 16) {
         parse_status_effect_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_effect_index_)));
          set_has_status_effect_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sequence_name;
        break;
      }

      // optional string sequence_name = 3;
      case 3: {
        if (tag == 26) {
         parse_sequence_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sequence_name().data(), this->sequence_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CProtoItemTeamShowcase.sequence_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_cycle;
        break;
      }

      // optional float cycle = 4;
      case 4: {
        if (tag == 37) {
         parse_cycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cycle_)));
          set_has_cycle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_wearable;
        break;
      }

      // repeated uint32 wearable = 5;
      case 5: {
        if (tag == 40) {
         parse_wearable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_wearable())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_wearable())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_wearable;
        if (input->ExpectTag(50)) goto parse_inscription;
        break;
      }

      // optional string inscription = 6;
      case 6: {
        if (tag == 50) {
         parse_inscription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inscription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inscription().data(), this->inscription().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CProtoItemTeamShowcase.inscription");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_style;
        break;
      }

      // repeated uint32 style = 7;
      case 7: {
        if (tag == 56) {
         parse_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_style())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_style())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_style;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CProtoItemTeamShowcase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CProtoItemTeamShowcase)
  return false;
#undef DO_
}

void CProtoItemTeamShowcase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CProtoItemTeamShowcase)
  // optional uint32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // optional uint32 status_effect_index = 2;
  if (has_status_effect_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status_effect_index(), output);
  }

  // optional string sequence_name = 3;
  if (has_sequence_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence_name().data(), this->sequence_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CProtoItemTeamShowcase.sequence_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sequence_name(), output);
  }

  // optional float cycle = 4;
  if (has_cycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cycle(), output);
  }

  // repeated uint32 wearable = 5;
  for (int i = 0; i < this->wearable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->wearable(i), output);
  }

  // optional string inscription = 6;
  if (has_inscription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inscription().data(), this->inscription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CProtoItemTeamShowcase.inscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->inscription(), output);
  }

  // repeated uint32 style = 7;
  for (int i = 0; i < this->style_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->style(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CProtoItemTeamShowcase)
}

::google::protobuf::uint8* CProtoItemTeamShowcase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemTeamShowcase)
  // optional uint32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // optional uint32 status_effect_index = 2;
  if (has_status_effect_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status_effect_index(), target);
  }

  // optional string sequence_name = 3;
  if (has_sequence_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence_name().data(), this->sequence_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CProtoItemTeamShowcase.sequence_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sequence_name(), target);
  }

  // optional float cycle = 4;
  if (has_cycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cycle(), target);
  }

  // repeated uint32 wearable = 5;
  for (int i = 0; i < this->wearable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->wearable(i), target);
  }

  // optional string inscription = 6;
  if (has_inscription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inscription().data(), this->inscription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CProtoItemTeamShowcase.inscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->inscription(), target);
  }

  // repeated uint32 style = 7;
  for (int i = 0; i < this->style_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->style(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemTeamShowcase)
  return target;
}

int CProtoItemTeamShowcase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 47u) {
    // optional uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 status_effect_index = 2;
    if (has_status_effect_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status_effect_index());
    }

    // optional string sequence_name = 3;
    if (has_sequence_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sequence_name());
    }

    // optional float cycle = 4;
    if (has_cycle()) {
      total_size += 1 + 4;
    }

    // optional string inscription = 6;
    if (has_inscription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inscription());
    }

  }
  // repeated uint32 wearable = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->wearable_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->wearable(i));
    }
    total_size += 1 * this->wearable_size() + data_size;
  }

  // repeated uint32 style = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->style_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->style(i));
    }
    total_size += 1 * this->style_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProtoItemTeamShowcase::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CProtoItemTeamShowcase* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CProtoItemTeamShowcase>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProtoItemTeamShowcase::MergeFrom(const CProtoItemTeamShowcase& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  wearable_.MergeFrom(from.wearable_);
  style_.MergeFrom(from.style_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_status_effect_index()) {
      set_status_effect_index(from.status_effect_index());
    }
    if (from.has_sequence_name()) {
      set_has_sequence_name();
      sequence_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_name_);
    }
    if (from.has_cycle()) {
      set_cycle(from.cycle());
    }
    if (from.has_inscription()) {
      set_has_inscription();
      inscription_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inscription_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CProtoItemTeamShowcase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemTeamShowcase::CopyFrom(const CProtoItemTeamShowcase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemTeamShowcase::IsInitialized() const {

  return true;
}

void CProtoItemTeamShowcase::Swap(CProtoItemTeamShowcase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CProtoItemTeamShowcase::InternalSwap(CProtoItemTeamShowcase* other) {
  std::swap(hero_id_, other->hero_id_);
  std::swap(status_effect_index_, other->status_effect_index_);
  sequence_name_.Swap(&other->sequence_name_);
  std::swap(cycle_, other->cycle_);
  wearable_.UnsafeArenaSwap(&other->wearable_);
  inscription_.Swap(&other->inscription_);
  style_.UnsafeArenaSwap(&other->style_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CProtoItemTeamShowcase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProtoItemTeamShowcase_descriptor_;
  metadata.reflection = CProtoItemTeamShowcase_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CProtoItemTeamShowcase

// optional uint32 hero_id = 1;
bool CProtoItemTeamShowcase::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CProtoItemTeamShowcase::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CProtoItemTeamShowcase::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CProtoItemTeamShowcase::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
 ::google::protobuf::uint32 CProtoItemTeamShowcase::hero_id() const {
  // @@protoc_insertion_point(field_get:CProtoItemTeamShowcase.hero_id)
  return hero_id_;
}
 void CProtoItemTeamShowcase::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemTeamShowcase.hero_id)
}

// optional uint32 status_effect_index = 2;
bool CProtoItemTeamShowcase::has_status_effect_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CProtoItemTeamShowcase::set_has_status_effect_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CProtoItemTeamShowcase::clear_has_status_effect_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CProtoItemTeamShowcase::clear_status_effect_index() {
  status_effect_index_ = 0u;
  clear_has_status_effect_index();
}
 ::google::protobuf::uint32 CProtoItemTeamShowcase::status_effect_index() const {
  // @@protoc_insertion_point(field_get:CProtoItemTeamShowcase.status_effect_index)
  return status_effect_index_;
}
 void CProtoItemTeamShowcase::set_status_effect_index(::google::protobuf::uint32 value) {
  set_has_status_effect_index();
  status_effect_index_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemTeamShowcase.status_effect_index)
}

// optional string sequence_name = 3;
bool CProtoItemTeamShowcase::has_sequence_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CProtoItemTeamShowcase::set_has_sequence_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CProtoItemTeamShowcase::clear_has_sequence_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CProtoItemTeamShowcase::clear_sequence_name() {
  sequence_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sequence_name();
}
 const ::std::string& CProtoItemTeamShowcase::sequence_name() const {
  // @@protoc_insertion_point(field_get:CProtoItemTeamShowcase.sequence_name)
  return sequence_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CProtoItemTeamShowcase::set_sequence_name(const ::std::string& value) {
  set_has_sequence_name();
  sequence_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CProtoItemTeamShowcase.sequence_name)
}
 void CProtoItemTeamShowcase::set_sequence_name(const char* value) {
  set_has_sequence_name();
  sequence_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CProtoItemTeamShowcase.sequence_name)
}
 void CProtoItemTeamShowcase::set_sequence_name(const char* value, size_t size) {
  set_has_sequence_name();
  sequence_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CProtoItemTeamShowcase.sequence_name)
}
 ::std::string* CProtoItemTeamShowcase::mutable_sequence_name() {
  set_has_sequence_name();
  // @@protoc_insertion_point(field_mutable:CProtoItemTeamShowcase.sequence_name)
  return sequence_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CProtoItemTeamShowcase::release_sequence_name() {
  clear_has_sequence_name();
  return sequence_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CProtoItemTeamShowcase::set_allocated_sequence_name(::std::string* sequence_name) {
  if (sequence_name != NULL) {
    set_has_sequence_name();
  } else {
    clear_has_sequence_name();
  }
  sequence_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence_name);
  // @@protoc_insertion_point(field_set_allocated:CProtoItemTeamShowcase.sequence_name)
}

// optional float cycle = 4;
bool CProtoItemTeamShowcase::has_cycle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CProtoItemTeamShowcase::set_has_cycle() {
  _has_bits_[0] |= 0x00000008u;
}
void CProtoItemTeamShowcase::clear_has_cycle() {
  _has_bits_[0] &= ~0x00000008u;
}
void CProtoItemTeamShowcase::clear_cycle() {
  cycle_ = 0;
  clear_has_cycle();
}
 float CProtoItemTeamShowcase::cycle() const {
  // @@protoc_insertion_point(field_get:CProtoItemTeamShowcase.cycle)
  return cycle_;
}
 void CProtoItemTeamShowcase::set_cycle(float value) {
  set_has_cycle();
  cycle_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemTeamShowcase.cycle)
}

// repeated uint32 wearable = 5;
int CProtoItemTeamShowcase::wearable_size() const {
  return wearable_.size();
}
void CProtoItemTeamShowcase::clear_wearable() {
  wearable_.Clear();
}
 ::google::protobuf::uint32 CProtoItemTeamShowcase::wearable(int index) const {
  // @@protoc_insertion_point(field_get:CProtoItemTeamShowcase.wearable)
  return wearable_.Get(index);
}
 void CProtoItemTeamShowcase::set_wearable(int index, ::google::protobuf::uint32 value) {
  wearable_.Set(index, value);
  // @@protoc_insertion_point(field_set:CProtoItemTeamShowcase.wearable)
}
 void CProtoItemTeamShowcase::add_wearable(::google::protobuf::uint32 value) {
  wearable_.Add(value);
  // @@protoc_insertion_point(field_add:CProtoItemTeamShowcase.wearable)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CProtoItemTeamShowcase::wearable() const {
  // @@protoc_insertion_point(field_list:CProtoItemTeamShowcase.wearable)
  return wearable_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CProtoItemTeamShowcase::mutable_wearable() {
  // @@protoc_insertion_point(field_mutable_list:CProtoItemTeamShowcase.wearable)
  return &wearable_;
}

// optional string inscription = 6;
bool CProtoItemTeamShowcase::has_inscription() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CProtoItemTeamShowcase::set_has_inscription() {
  _has_bits_[0] |= 0x00000020u;
}
void CProtoItemTeamShowcase::clear_has_inscription() {
  _has_bits_[0] &= ~0x00000020u;
}
void CProtoItemTeamShowcase::clear_inscription() {
  inscription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_inscription();
}
 const ::std::string& CProtoItemTeamShowcase::inscription() const {
  // @@protoc_insertion_point(field_get:CProtoItemTeamShowcase.inscription)
  return inscription_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CProtoItemTeamShowcase::set_inscription(const ::std::string& value) {
  set_has_inscription();
  inscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CProtoItemTeamShowcase.inscription)
}
 void CProtoItemTeamShowcase::set_inscription(const char* value) {
  set_has_inscription();
  inscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CProtoItemTeamShowcase.inscription)
}
 void CProtoItemTeamShowcase::set_inscription(const char* value, size_t size) {
  set_has_inscription();
  inscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CProtoItemTeamShowcase.inscription)
}
 ::std::string* CProtoItemTeamShowcase::mutable_inscription() {
  set_has_inscription();
  // @@protoc_insertion_point(field_mutable:CProtoItemTeamShowcase.inscription)
  return inscription_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CProtoItemTeamShowcase::release_inscription() {
  clear_has_inscription();
  return inscription_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CProtoItemTeamShowcase::set_allocated_inscription(::std::string* inscription) {
  if (inscription != NULL) {
    set_has_inscription();
  } else {
    clear_has_inscription();
  }
  inscription_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inscription);
  // @@protoc_insertion_point(field_set_allocated:CProtoItemTeamShowcase.inscription)
}

// repeated uint32 style = 7;
int CProtoItemTeamShowcase::style_size() const {
  return style_.size();
}
void CProtoItemTeamShowcase::clear_style() {
  style_.Clear();
}
 ::google::protobuf::uint32 CProtoItemTeamShowcase::style(int index) const {
  // @@protoc_insertion_point(field_get:CProtoItemTeamShowcase.style)
  return style_.Get(index);
}
 void CProtoItemTeamShowcase::set_style(int index, ::google::protobuf::uint32 value) {
  style_.Set(index, value);
  // @@protoc_insertion_point(field_set:CProtoItemTeamShowcase.style)
}
 void CProtoItemTeamShowcase::add_style(::google::protobuf::uint32 value) {
  style_.Add(value);
  // @@protoc_insertion_point(field_add:CProtoItemTeamShowcase.style)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CProtoItemTeamShowcase::style() const {
  // @@protoc_insertion_point(field_list:CProtoItemTeamShowcase.style)
  return style_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CProtoItemTeamShowcase::mutable_style() {
  // @@protoc_insertion_point(field_mutable_list:CProtoItemTeamShowcase.style)
  return &style_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CProtoItemSocket::kItemIdFieldNumber;
const int CProtoItemSocket::kAttrDefIndexFieldNumber;
const int CProtoItemSocket::kRequiredTypeFieldNumber;
const int CProtoItemSocket::kRequiredHeroFieldNumber;
const int CProtoItemSocket::kGemDefIndexFieldNumber;
const int CProtoItemSocket::kNotTradableFieldNumber;
const int CProtoItemSocket::kRequiredItemSlotFieldNumber;
#endif  // !_MSC_VER

CProtoItemSocket::CProtoItemSocket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CProtoItemSocket)
}

void CProtoItemSocket::InitAsDefaultInstance() {
}

CProtoItemSocket::CProtoItemSocket(const CProtoItemSocket& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket)
}

void CProtoItemSocket::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  attr_def_index_ = 0u;
  required_type_ = 0u;
  required_hero_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gem_def_index_ = 0u;
  not_tradable_ = false;
  required_item_slot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProtoItemSocket::~CProtoItemSocket() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket)
  SharedDtor();
}

void CProtoItemSocket::SharedDtor() {
  required_hero_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  required_item_slot_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CProtoItemSocket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProtoItemSocket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProtoItemSocket_descriptor_;
}

const CProtoItemSocket& CProtoItemSocket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CProtoItemSocket* CProtoItemSocket::default_instance_ = NULL;

CProtoItemSocket* CProtoItemSocket::New(::google::protobuf::Arena* arena) const {
  CProtoItemSocket* n = new CProtoItemSocket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CProtoItemSocket::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CProtoItemSocket*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(item_id_, required_type_);
    ZR_(gem_def_index_, not_tradable_);
    if (has_required_hero()) {
      required_hero_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_required_item_slot()) {
      required_item_slot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CProtoItemSocket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CProtoItemSocket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attr_def_index;
        break;
      }

      // optional uint32 attr_def_index = 2;
      case 2: {
        if (tag == 16) {
         parse_attr_def_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_def_index_)));
          set_has_attr_def_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_required_type;
        break;
      }

      // optional uint32 required_type = 3;
      case 3: {
        if (tag == 24) {
         parse_required_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &required_type_)));
          set_has_required_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_required_hero;
        break;
      }

      // optional string required_hero = 4;
      case 4: {
        if (tag == 34) {
         parse_required_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_required_hero()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->required_hero().data(), this->required_hero().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CProtoItemSocket.required_hero");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gem_def_index;
        break;
      }

      // optional uint32 gem_def_index = 5;
      case 5: {
        if (tag == 40) {
         parse_gem_def_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gem_def_index_)));
          set_has_gem_def_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_not_tradable;
        break;
      }

      // optional bool not_tradable = 6;
      case 6: {
        if (tag == 48) {
         parse_not_tradable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &not_tradable_)));
          set_has_not_tradable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_required_item_slot;
        break;
      }

      // optional string required_item_slot = 7;
      case 7: {
        if (tag == 58) {
         parse_required_item_slot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_required_item_slot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->required_item_slot().data(), this->required_item_slot().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CProtoItemSocket.required_item_slot");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CProtoItemSocket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CProtoItemSocket)
  return false;
#undef DO_
}

void CProtoItemSocket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CProtoItemSocket)
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }

  // optional uint32 attr_def_index = 2;
  if (has_attr_def_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attr_def_index(), output);
  }

  // optional uint32 required_type = 3;
  if (has_required_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->required_type(), output);
  }

  // optional string required_hero = 4;
  if (has_required_hero()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->required_hero().data(), this->required_hero().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CProtoItemSocket.required_hero");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->required_hero(), output);
  }

  // optional uint32 gem_def_index = 5;
  if (has_gem_def_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gem_def_index(), output);
  }

  // optional bool not_tradable = 6;
  if (has_not_tradable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->not_tradable(), output);
  }

  // optional string required_item_slot = 7;
  if (has_required_item_slot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->required_item_slot().data(), this->required_item_slot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CProtoItemSocket.required_item_slot");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->required_item_slot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CProtoItemSocket)
}

::google::protobuf::uint8* CProtoItemSocket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket)
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }

  // optional uint32 attr_def_index = 2;
  if (has_attr_def_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attr_def_index(), target);
  }

  // optional uint32 required_type = 3;
  if (has_required_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->required_type(), target);
  }

  // optional string required_hero = 4;
  if (has_required_hero()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->required_hero().data(), this->required_hero().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CProtoItemSocket.required_hero");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->required_hero(), target);
  }

  // optional uint32 gem_def_index = 5;
  if (has_gem_def_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gem_def_index(), target);
  }

  // optional bool not_tradable = 6;
  if (has_not_tradable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->not_tradable(), target);
  }

  // optional string required_item_slot = 7;
  if (has_required_item_slot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->required_item_slot().data(), this->required_item_slot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CProtoItemSocket.required_item_slot");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->required_item_slot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket)
  return target;
}

int CProtoItemSocket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional uint32 attr_def_index = 2;
    if (has_attr_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_def_index());
    }

    // optional uint32 required_type = 3;
    if (has_required_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->required_type());
    }

    // optional string required_hero = 4;
    if (has_required_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->required_hero());
    }

    // optional uint32 gem_def_index = 5;
    if (has_gem_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gem_def_index());
    }

    // optional bool not_tradable = 6;
    if (has_not_tradable()) {
      total_size += 1 + 1;
    }

    // optional string required_item_slot = 7;
    if (has_required_item_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->required_item_slot());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProtoItemSocket::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CProtoItemSocket* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CProtoItemSocket>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProtoItemSocket::MergeFrom(const CProtoItemSocket& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_attr_def_index()) {
      set_attr_def_index(from.attr_def_index());
    }
    if (from.has_required_type()) {
      set_required_type(from.required_type());
    }
    if (from.has_required_hero()) {
      set_has_required_hero();
      required_hero_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.required_hero_);
    }
    if (from.has_gem_def_index()) {
      set_gem_def_index(from.gem_def_index());
    }
    if (from.has_not_tradable()) {
      set_not_tradable(from.not_tradable());
    }
    if (from.has_required_item_slot()) {
      set_has_required_item_slot();
      required_item_slot_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.required_item_slot_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CProtoItemSocket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket::CopyFrom(const CProtoItemSocket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket::IsInitialized() const {

  return true;
}

void CProtoItemSocket::Swap(CProtoItemSocket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CProtoItemSocket::InternalSwap(CProtoItemSocket* other) {
  std::swap(item_id_, other->item_id_);
  std::swap(attr_def_index_, other->attr_def_index_);
  std::swap(required_type_, other->required_type_);
  required_hero_.Swap(&other->required_hero_);
  std::swap(gem_def_index_, other->gem_def_index_);
  std::swap(not_tradable_, other->not_tradable_);
  required_item_slot_.Swap(&other->required_item_slot_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CProtoItemSocket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProtoItemSocket_descriptor_;
  metadata.reflection = CProtoItemSocket_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CProtoItemSocket

// optional uint64 item_id = 1;
bool CProtoItemSocket::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CProtoItemSocket::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CProtoItemSocket::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CProtoItemSocket::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
 ::google::protobuf::uint64 CProtoItemSocket::item_id() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket.item_id)
  return item_id_;
}
 void CProtoItemSocket::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket.item_id)
}

// optional uint32 attr_def_index = 2;
bool CProtoItemSocket::has_attr_def_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CProtoItemSocket::set_has_attr_def_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CProtoItemSocket::clear_has_attr_def_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CProtoItemSocket::clear_attr_def_index() {
  attr_def_index_ = 0u;
  clear_has_attr_def_index();
}
 ::google::protobuf::uint32 CProtoItemSocket::attr_def_index() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket.attr_def_index)
  return attr_def_index_;
}
 void CProtoItemSocket::set_attr_def_index(::google::protobuf::uint32 value) {
  set_has_attr_def_index();
  attr_def_index_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket.attr_def_index)
}

// optional uint32 required_type = 3;
bool CProtoItemSocket::has_required_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CProtoItemSocket::set_has_required_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CProtoItemSocket::clear_has_required_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CProtoItemSocket::clear_required_type() {
  required_type_ = 0u;
  clear_has_required_type();
}
 ::google::protobuf::uint32 CProtoItemSocket::required_type() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket.required_type)
  return required_type_;
}
 void CProtoItemSocket::set_required_type(::google::protobuf::uint32 value) {
  set_has_required_type();
  required_type_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket.required_type)
}

// optional string required_hero = 4;
bool CProtoItemSocket::has_required_hero() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CProtoItemSocket::set_has_required_hero() {
  _has_bits_[0] |= 0x00000008u;
}
void CProtoItemSocket::clear_has_required_hero() {
  _has_bits_[0] &= ~0x00000008u;
}
void CProtoItemSocket::clear_required_hero() {
  required_hero_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_required_hero();
}
 const ::std::string& CProtoItemSocket::required_hero() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket.required_hero)
  return required_hero_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CProtoItemSocket::set_required_hero(const ::std::string& value) {
  set_has_required_hero();
  required_hero_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CProtoItemSocket.required_hero)
}
 void CProtoItemSocket::set_required_hero(const char* value) {
  set_has_required_hero();
  required_hero_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CProtoItemSocket.required_hero)
}
 void CProtoItemSocket::set_required_hero(const char* value, size_t size) {
  set_has_required_hero();
  required_hero_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CProtoItemSocket.required_hero)
}
 ::std::string* CProtoItemSocket::mutable_required_hero() {
  set_has_required_hero();
  // @@protoc_insertion_point(field_mutable:CProtoItemSocket.required_hero)
  return required_hero_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CProtoItemSocket::release_required_hero() {
  clear_has_required_hero();
  return required_hero_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CProtoItemSocket::set_allocated_required_hero(::std::string* required_hero) {
  if (required_hero != NULL) {
    set_has_required_hero();
  } else {
    clear_has_required_hero();
  }
  required_hero_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), required_hero);
  // @@protoc_insertion_point(field_set_allocated:CProtoItemSocket.required_hero)
}

// optional uint32 gem_def_index = 5;
bool CProtoItemSocket::has_gem_def_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CProtoItemSocket::set_has_gem_def_index() {
  _has_bits_[0] |= 0x00000010u;
}
void CProtoItemSocket::clear_has_gem_def_index() {
  _has_bits_[0] &= ~0x00000010u;
}
void CProtoItemSocket::clear_gem_def_index() {
  gem_def_index_ = 0u;
  clear_has_gem_def_index();
}
 ::google::protobuf::uint32 CProtoItemSocket::gem_def_index() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket.gem_def_index)
  return gem_def_index_;
}
 void CProtoItemSocket::set_gem_def_index(::google::protobuf::uint32 value) {
  set_has_gem_def_index();
  gem_def_index_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket.gem_def_index)
}

// optional bool not_tradable = 6;
bool CProtoItemSocket::has_not_tradable() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CProtoItemSocket::set_has_not_tradable() {
  _has_bits_[0] |= 0x00000020u;
}
void CProtoItemSocket::clear_has_not_tradable() {
  _has_bits_[0] &= ~0x00000020u;
}
void CProtoItemSocket::clear_not_tradable() {
  not_tradable_ = false;
  clear_has_not_tradable();
}
 bool CProtoItemSocket::not_tradable() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket.not_tradable)
  return not_tradable_;
}
 void CProtoItemSocket::set_not_tradable(bool value) {
  set_has_not_tradable();
  not_tradable_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket.not_tradable)
}

// optional string required_item_slot = 7;
bool CProtoItemSocket::has_required_item_slot() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CProtoItemSocket::set_has_required_item_slot() {
  _has_bits_[0] |= 0x00000040u;
}
void CProtoItemSocket::clear_has_required_item_slot() {
  _has_bits_[0] &= ~0x00000040u;
}
void CProtoItemSocket::clear_required_item_slot() {
  required_item_slot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_required_item_slot();
}
 const ::std::string& CProtoItemSocket::required_item_slot() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket.required_item_slot)
  return required_item_slot_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CProtoItemSocket::set_required_item_slot(const ::std::string& value) {
  set_has_required_item_slot();
  required_item_slot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CProtoItemSocket.required_item_slot)
}
 void CProtoItemSocket::set_required_item_slot(const char* value) {
  set_has_required_item_slot();
  required_item_slot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CProtoItemSocket.required_item_slot)
}
 void CProtoItemSocket::set_required_item_slot(const char* value, size_t size) {
  set_has_required_item_slot();
  required_item_slot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CProtoItemSocket.required_item_slot)
}
 ::std::string* CProtoItemSocket::mutable_required_item_slot() {
  set_has_required_item_slot();
  // @@protoc_insertion_point(field_mutable:CProtoItemSocket.required_item_slot)
  return required_item_slot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CProtoItemSocket::release_required_item_slot() {
  clear_has_required_item_slot();
  return required_item_slot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CProtoItemSocket::set_allocated_required_item_slot(::std::string* required_item_slot) {
  if (required_item_slot != NULL) {
    set_has_required_item_slot();
  } else {
    clear_has_required_item_slot();
  }
  required_item_slot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), required_item_slot);
  // @@protoc_insertion_point(field_set_allocated:CProtoItemSocket.required_item_slot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CProtoItemSocket_Empty::kSocketFieldNumber;
#endif  // !_MSC_VER

CProtoItemSocket_Empty::CProtoItemSocket_Empty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CProtoItemSocket_Empty)
}

void CProtoItemSocket_Empty::InitAsDefaultInstance() {
  socket_ = const_cast< ::CProtoItemSocket*>(&::CProtoItemSocket::default_instance());
}

CProtoItemSocket_Empty::CProtoItemSocket_Empty(const CProtoItemSocket_Empty& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_Empty)
}

void CProtoItemSocket_Empty::SharedCtor() {
  _cached_size_ = 0;
  socket_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProtoItemSocket_Empty::~CProtoItemSocket_Empty() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_Empty)
  SharedDtor();
}

void CProtoItemSocket_Empty::SharedDtor() {
  if (this != default_instance_) {
    delete socket_;
  }
}

void CProtoItemSocket_Empty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProtoItemSocket_Empty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProtoItemSocket_Empty_descriptor_;
}

const CProtoItemSocket_Empty& CProtoItemSocket_Empty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CProtoItemSocket_Empty* CProtoItemSocket_Empty::default_instance_ = NULL;

CProtoItemSocket_Empty* CProtoItemSocket_Empty::New(::google::protobuf::Arena* arena) const {
  CProtoItemSocket_Empty* n = new CProtoItemSocket_Empty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CProtoItemSocket_Empty::Clear() {
  if (has_socket()) {
    if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CProtoItemSocket_Empty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CProtoItemSocket_Empty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CProtoItemSocket socket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CProtoItemSocket_Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CProtoItemSocket_Empty)
  return false;
#undef DO_
}

void CProtoItemSocket_Empty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CProtoItemSocket_Empty)
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->socket_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CProtoItemSocket_Empty)
}

::google::protobuf::uint8* CProtoItemSocket_Empty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_Empty)
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->socket_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_Empty)
  return target;
}

int CProtoItemSocket_Empty::ByteSize() const {
  int total_size = 0;

  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->socket_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProtoItemSocket_Empty::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CProtoItemSocket_Empty* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CProtoItemSocket_Empty>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProtoItemSocket_Empty::MergeFrom(const CProtoItemSocket_Empty& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_socket()) {
      mutable_socket()->::CProtoItemSocket::MergeFrom(from.socket());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CProtoItemSocket_Empty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_Empty::CopyFrom(const CProtoItemSocket_Empty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_Empty::IsInitialized() const {

  return true;
}

void CProtoItemSocket_Empty::Swap(CProtoItemSocket_Empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CProtoItemSocket_Empty::InternalSwap(CProtoItemSocket_Empty* other) {
  std::swap(socket_, other->socket_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CProtoItemSocket_Empty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProtoItemSocket_Empty_descriptor_;
  metadata.reflection = CProtoItemSocket_Empty_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CProtoItemSocket_Empty

// optional .CProtoItemSocket socket = 1;
bool CProtoItemSocket_Empty::has_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CProtoItemSocket_Empty::set_has_socket() {
  _has_bits_[0] |= 0x00000001u;
}
void CProtoItemSocket_Empty::clear_has_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
void CProtoItemSocket_Empty::clear_socket() {
  if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  clear_has_socket();
}
const ::CProtoItemSocket& CProtoItemSocket_Empty::socket() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Empty.socket)
  return socket_ != NULL ? *socket_ : *default_instance_->socket_;
}
::CProtoItemSocket* CProtoItemSocket_Empty::mutable_socket() {
  set_has_socket();
  if (socket_ == NULL) {
    socket_ = new ::CProtoItemSocket;
  }
  // @@protoc_insertion_point(field_mutable:CProtoItemSocket_Empty.socket)
  return socket_;
}
::CProtoItemSocket* CProtoItemSocket_Empty::release_socket() {
  clear_has_socket();
  ::CProtoItemSocket* temp = socket_;
  socket_ = NULL;
  return temp;
}
void CProtoItemSocket_Empty::set_allocated_socket(::CProtoItemSocket* socket) {
  delete socket_;
  socket_ = socket;
  if (socket) {
    set_has_socket();
  } else {
    clear_has_socket();
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemSocket_Empty.socket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CProtoItemSocket_Effect::kSocketFieldNumber;
const int CProtoItemSocket_Effect::kEffectFieldNumber;
#endif  // !_MSC_VER

CProtoItemSocket_Effect::CProtoItemSocket_Effect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CProtoItemSocket_Effect)
}

void CProtoItemSocket_Effect::InitAsDefaultInstance() {
  socket_ = const_cast< ::CProtoItemSocket*>(&::CProtoItemSocket::default_instance());
}

CProtoItemSocket_Effect::CProtoItemSocket_Effect(const CProtoItemSocket_Effect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_Effect)
}

void CProtoItemSocket_Effect::SharedCtor() {
  _cached_size_ = 0;
  socket_ = NULL;
  effect_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProtoItemSocket_Effect::~CProtoItemSocket_Effect() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_Effect)
  SharedDtor();
}

void CProtoItemSocket_Effect::SharedDtor() {
  if (this != default_instance_) {
    delete socket_;
  }
}

void CProtoItemSocket_Effect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProtoItemSocket_Effect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProtoItemSocket_Effect_descriptor_;
}

const CProtoItemSocket_Effect& CProtoItemSocket_Effect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CProtoItemSocket_Effect* CProtoItemSocket_Effect::default_instance_ = NULL;

CProtoItemSocket_Effect* CProtoItemSocket_Effect::New(::google::protobuf::Arena* arena) const {
  CProtoItemSocket_Effect* n = new CProtoItemSocket_Effect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CProtoItemSocket_Effect::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_socket()) {
      if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
    }
    effect_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CProtoItemSocket_Effect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CProtoItemSocket_Effect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CProtoItemSocket socket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_effect;
        break;
      }

      // optional uint32 effect = 2;
      case 2: {
        if (tag == 16) {
         parse_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_)));
          set_has_effect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CProtoItemSocket_Effect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CProtoItemSocket_Effect)
  return false;
#undef DO_
}

void CProtoItemSocket_Effect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CProtoItemSocket_Effect)
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->socket_, output);
  }

  // optional uint32 effect = 2;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->effect(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CProtoItemSocket_Effect)
}

::google::protobuf::uint8* CProtoItemSocket_Effect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_Effect)
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->socket_, target);
  }

  // optional uint32 effect = 2;
  if (has_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->effect(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_Effect)
  return target;
}

int CProtoItemSocket_Effect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .CProtoItemSocket socket = 1;
    if (has_socket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->socket_);
    }

    // optional uint32 effect = 2;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProtoItemSocket_Effect::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CProtoItemSocket_Effect* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CProtoItemSocket_Effect>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProtoItemSocket_Effect::MergeFrom(const CProtoItemSocket_Effect& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_socket()) {
      mutable_socket()->::CProtoItemSocket::MergeFrom(from.socket());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CProtoItemSocket_Effect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_Effect::CopyFrom(const CProtoItemSocket_Effect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_Effect::IsInitialized() const {

  return true;
}

void CProtoItemSocket_Effect::Swap(CProtoItemSocket_Effect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CProtoItemSocket_Effect::InternalSwap(CProtoItemSocket_Effect* other) {
  std::swap(socket_, other->socket_);
  std::swap(effect_, other->effect_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CProtoItemSocket_Effect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProtoItemSocket_Effect_descriptor_;
  metadata.reflection = CProtoItemSocket_Effect_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CProtoItemSocket_Effect

// optional .CProtoItemSocket socket = 1;
bool CProtoItemSocket_Effect::has_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CProtoItemSocket_Effect::set_has_socket() {
  _has_bits_[0] |= 0x00000001u;
}
void CProtoItemSocket_Effect::clear_has_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
void CProtoItemSocket_Effect::clear_socket() {
  if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  clear_has_socket();
}
const ::CProtoItemSocket& CProtoItemSocket_Effect::socket() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Effect.socket)
  return socket_ != NULL ? *socket_ : *default_instance_->socket_;
}
::CProtoItemSocket* CProtoItemSocket_Effect::mutable_socket() {
  set_has_socket();
  if (socket_ == NULL) {
    socket_ = new ::CProtoItemSocket;
  }
  // @@protoc_insertion_point(field_mutable:CProtoItemSocket_Effect.socket)
  return socket_;
}
::CProtoItemSocket* CProtoItemSocket_Effect::release_socket() {
  clear_has_socket();
  ::CProtoItemSocket* temp = socket_;
  socket_ = NULL;
  return temp;
}
void CProtoItemSocket_Effect::set_allocated_socket(::CProtoItemSocket* socket) {
  delete socket_;
  socket_ = socket;
  if (socket) {
    set_has_socket();
  } else {
    clear_has_socket();
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemSocket_Effect.socket)
}

// optional uint32 effect = 2;
bool CProtoItemSocket_Effect::has_effect() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CProtoItemSocket_Effect::set_has_effect() {
  _has_bits_[0] |= 0x00000002u;
}
void CProtoItemSocket_Effect::clear_has_effect() {
  _has_bits_[0] &= ~0x00000002u;
}
void CProtoItemSocket_Effect::clear_effect() {
  effect_ = 0u;
  clear_has_effect();
}
 ::google::protobuf::uint32 CProtoItemSocket_Effect::effect() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Effect.effect)
  return effect_;
}
 void CProtoItemSocket_Effect::set_effect(::google::protobuf::uint32 value) {
  set_has_effect();
  effect_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_Effect.effect)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CProtoItemSocket_Color::kSocketFieldNumber;
const int CProtoItemSocket_Color::kRedFieldNumber;
const int CProtoItemSocket_Color::kGreenFieldNumber;
const int CProtoItemSocket_Color::kBlueFieldNumber;
#endif  // !_MSC_VER

CProtoItemSocket_Color::CProtoItemSocket_Color()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CProtoItemSocket_Color)
}

void CProtoItemSocket_Color::InitAsDefaultInstance() {
  socket_ = const_cast< ::CProtoItemSocket*>(&::CProtoItemSocket::default_instance());
}

CProtoItemSocket_Color::CProtoItemSocket_Color(const CProtoItemSocket_Color& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_Color)
}

void CProtoItemSocket_Color::SharedCtor() {
  _cached_size_ = 0;
  socket_ = NULL;
  red_ = 0u;
  green_ = 0u;
  blue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProtoItemSocket_Color::~CProtoItemSocket_Color() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_Color)
  SharedDtor();
}

void CProtoItemSocket_Color::SharedDtor() {
  if (this != default_instance_) {
    delete socket_;
  }
}

void CProtoItemSocket_Color::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProtoItemSocket_Color::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProtoItemSocket_Color_descriptor_;
}

const CProtoItemSocket_Color& CProtoItemSocket_Color::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CProtoItemSocket_Color* CProtoItemSocket_Color::default_instance_ = NULL;

CProtoItemSocket_Color* CProtoItemSocket_Color::New(::google::protobuf::Arena* arena) const {
  CProtoItemSocket_Color* n = new CProtoItemSocket_Color;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CProtoItemSocket_Color::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CProtoItemSocket_Color*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(red_, blue_);
    if (has_socket()) {
      if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CProtoItemSocket_Color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CProtoItemSocket_Color)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CProtoItemSocket socket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_red;
        break;
      }

      // optional uint32 red = 2;
      case 2: {
        if (tag == 16) {
         parse_red:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &red_)));
          set_has_red();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_green;
        break;
      }

      // optional uint32 green = 3;
      case 3: {
        if (tag == 24) {
         parse_green:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &green_)));
          set_has_green();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_blue;
        break;
      }

      // optional uint32 blue = 4;
      case 4: {
        if (tag == 32) {
         parse_blue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blue_)));
          set_has_blue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CProtoItemSocket_Color)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CProtoItemSocket_Color)
  return false;
#undef DO_
}

void CProtoItemSocket_Color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CProtoItemSocket_Color)
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->socket_, output);
  }

  // optional uint32 red = 2;
  if (has_red()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->red(), output);
  }

  // optional uint32 green = 3;
  if (has_green()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->green(), output);
  }

  // optional uint32 blue = 4;
  if (has_blue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->blue(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CProtoItemSocket_Color)
}

::google::protobuf::uint8* CProtoItemSocket_Color::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_Color)
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->socket_, target);
  }

  // optional uint32 red = 2;
  if (has_red()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->red(), target);
  }

  // optional uint32 green = 3;
  if (has_green()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->green(), target);
  }

  // optional uint32 blue = 4;
  if (has_blue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->blue(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_Color)
  return target;
}

int CProtoItemSocket_Color::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .CProtoItemSocket socket = 1;
    if (has_socket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->socket_);
    }

    // optional uint32 red = 2;
    if (has_red()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->red());
    }

    // optional uint32 green = 3;
    if (has_green()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->green());
    }

    // optional uint32 blue = 4;
    if (has_blue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blue());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProtoItemSocket_Color::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CProtoItemSocket_Color* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CProtoItemSocket_Color>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProtoItemSocket_Color::MergeFrom(const CProtoItemSocket_Color& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_socket()) {
      mutable_socket()->::CProtoItemSocket::MergeFrom(from.socket());
    }
    if (from.has_red()) {
      set_red(from.red());
    }
    if (from.has_green()) {
      set_green(from.green());
    }
    if (from.has_blue()) {
      set_blue(from.blue());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CProtoItemSocket_Color::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_Color::CopyFrom(const CProtoItemSocket_Color& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_Color::IsInitialized() const {

  return true;
}

void CProtoItemSocket_Color::Swap(CProtoItemSocket_Color* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CProtoItemSocket_Color::InternalSwap(CProtoItemSocket_Color* other) {
  std::swap(socket_, other->socket_);
  std::swap(red_, other->red_);
  std::swap(green_, other->green_);
  std::swap(blue_, other->blue_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CProtoItemSocket_Color::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProtoItemSocket_Color_descriptor_;
  metadata.reflection = CProtoItemSocket_Color_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CProtoItemSocket_Color

// optional .CProtoItemSocket socket = 1;
bool CProtoItemSocket_Color::has_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CProtoItemSocket_Color::set_has_socket() {
  _has_bits_[0] |= 0x00000001u;
}
void CProtoItemSocket_Color::clear_has_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
void CProtoItemSocket_Color::clear_socket() {
  if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  clear_has_socket();
}
const ::CProtoItemSocket& CProtoItemSocket_Color::socket() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Color.socket)
  return socket_ != NULL ? *socket_ : *default_instance_->socket_;
}
::CProtoItemSocket* CProtoItemSocket_Color::mutable_socket() {
  set_has_socket();
  if (socket_ == NULL) {
    socket_ = new ::CProtoItemSocket;
  }
  // @@protoc_insertion_point(field_mutable:CProtoItemSocket_Color.socket)
  return socket_;
}
::CProtoItemSocket* CProtoItemSocket_Color::release_socket() {
  clear_has_socket();
  ::CProtoItemSocket* temp = socket_;
  socket_ = NULL;
  return temp;
}
void CProtoItemSocket_Color::set_allocated_socket(::CProtoItemSocket* socket) {
  delete socket_;
  socket_ = socket;
  if (socket) {
    set_has_socket();
  } else {
    clear_has_socket();
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemSocket_Color.socket)
}

// optional uint32 red = 2;
bool CProtoItemSocket_Color::has_red() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CProtoItemSocket_Color::set_has_red() {
  _has_bits_[0] |= 0x00000002u;
}
void CProtoItemSocket_Color::clear_has_red() {
  _has_bits_[0] &= ~0x00000002u;
}
void CProtoItemSocket_Color::clear_red() {
  red_ = 0u;
  clear_has_red();
}
 ::google::protobuf::uint32 CProtoItemSocket_Color::red() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Color.red)
  return red_;
}
 void CProtoItemSocket_Color::set_red(::google::protobuf::uint32 value) {
  set_has_red();
  red_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_Color.red)
}

// optional uint32 green = 3;
bool CProtoItemSocket_Color::has_green() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CProtoItemSocket_Color::set_has_green() {
  _has_bits_[0] |= 0x00000004u;
}
void CProtoItemSocket_Color::clear_has_green() {
  _has_bits_[0] &= ~0x00000004u;
}
void CProtoItemSocket_Color::clear_green() {
  green_ = 0u;
  clear_has_green();
}
 ::google::protobuf::uint32 CProtoItemSocket_Color::green() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Color.green)
  return green_;
}
 void CProtoItemSocket_Color::set_green(::google::protobuf::uint32 value) {
  set_has_green();
  green_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_Color.green)
}

// optional uint32 blue = 4;
bool CProtoItemSocket_Color::has_blue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CProtoItemSocket_Color::set_has_blue() {
  _has_bits_[0] |= 0x00000008u;
}
void CProtoItemSocket_Color::clear_has_blue() {
  _has_bits_[0] &= ~0x00000008u;
}
void CProtoItemSocket_Color::clear_blue() {
  blue_ = 0u;
  clear_has_blue();
}
 ::google::protobuf::uint32 CProtoItemSocket_Color::blue() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Color.blue)
  return blue_;
}
 void CProtoItemSocket_Color::set_blue(::google::protobuf::uint32 value) {
  set_has_blue();
  blue_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_Color.blue)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CProtoItemSocket_Strange::kSocketFieldNumber;
const int CProtoItemSocket_Strange::kStrangeTypeFieldNumber;
const int CProtoItemSocket_Strange::kStrangeValueFieldNumber;
#endif  // !_MSC_VER

CProtoItemSocket_Strange::CProtoItemSocket_Strange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CProtoItemSocket_Strange)
}

void CProtoItemSocket_Strange::InitAsDefaultInstance() {
  socket_ = const_cast< ::CProtoItemSocket*>(&::CProtoItemSocket::default_instance());
}

CProtoItemSocket_Strange::CProtoItemSocket_Strange(const CProtoItemSocket_Strange& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_Strange)
}

void CProtoItemSocket_Strange::SharedCtor() {
  _cached_size_ = 0;
  socket_ = NULL;
  strange_type_ = 0u;
  strange_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProtoItemSocket_Strange::~CProtoItemSocket_Strange() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_Strange)
  SharedDtor();
}

void CProtoItemSocket_Strange::SharedDtor() {
  if (this != default_instance_) {
    delete socket_;
  }
}

void CProtoItemSocket_Strange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProtoItemSocket_Strange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProtoItemSocket_Strange_descriptor_;
}

const CProtoItemSocket_Strange& CProtoItemSocket_Strange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CProtoItemSocket_Strange* CProtoItemSocket_Strange::default_instance_ = NULL;

CProtoItemSocket_Strange* CProtoItemSocket_Strange::New(::google::protobuf::Arena* arena) const {
  CProtoItemSocket_Strange* n = new CProtoItemSocket_Strange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CProtoItemSocket_Strange::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CProtoItemSocket_Strange*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(strange_type_, strange_value_);
    if (has_socket()) {
      if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CProtoItemSocket_Strange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CProtoItemSocket_Strange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CProtoItemSocket socket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_strange_type;
        break;
      }

      // optional uint32 strange_type = 2;
      case 2: {
        if (tag == 16) {
         parse_strange_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strange_type_)));
          set_has_strange_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_strange_value;
        break;
      }

      // optional uint32 strange_value = 3;
      case 3: {
        if (tag == 24) {
         parse_strange_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strange_value_)));
          set_has_strange_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CProtoItemSocket_Strange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CProtoItemSocket_Strange)
  return false;
#undef DO_
}

void CProtoItemSocket_Strange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CProtoItemSocket_Strange)
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->socket_, output);
  }

  // optional uint32 strange_type = 2;
  if (has_strange_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->strange_type(), output);
  }

  // optional uint32 strange_value = 3;
  if (has_strange_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->strange_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CProtoItemSocket_Strange)
}

::google::protobuf::uint8* CProtoItemSocket_Strange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_Strange)
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->socket_, target);
  }

  // optional uint32 strange_type = 2;
  if (has_strange_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->strange_type(), target);
  }

  // optional uint32 strange_value = 3;
  if (has_strange_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->strange_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_Strange)
  return target;
}

int CProtoItemSocket_Strange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .CProtoItemSocket socket = 1;
    if (has_socket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->socket_);
    }

    // optional uint32 strange_type = 2;
    if (has_strange_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strange_type());
    }

    // optional uint32 strange_value = 3;
    if (has_strange_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strange_value());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProtoItemSocket_Strange::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CProtoItemSocket_Strange* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CProtoItemSocket_Strange>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProtoItemSocket_Strange::MergeFrom(const CProtoItemSocket_Strange& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_socket()) {
      mutable_socket()->::CProtoItemSocket::MergeFrom(from.socket());
    }
    if (from.has_strange_type()) {
      set_strange_type(from.strange_type());
    }
    if (from.has_strange_value()) {
      set_strange_value(from.strange_value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CProtoItemSocket_Strange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_Strange::CopyFrom(const CProtoItemSocket_Strange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_Strange::IsInitialized() const {

  return true;
}

void CProtoItemSocket_Strange::Swap(CProtoItemSocket_Strange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CProtoItemSocket_Strange::InternalSwap(CProtoItemSocket_Strange* other) {
  std::swap(socket_, other->socket_);
  std::swap(strange_type_, other->strange_type_);
  std::swap(strange_value_, other->strange_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CProtoItemSocket_Strange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProtoItemSocket_Strange_descriptor_;
  metadata.reflection = CProtoItemSocket_Strange_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CProtoItemSocket_Strange

// optional .CProtoItemSocket socket = 1;
bool CProtoItemSocket_Strange::has_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CProtoItemSocket_Strange::set_has_socket() {
  _has_bits_[0] |= 0x00000001u;
}
void CProtoItemSocket_Strange::clear_has_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
void CProtoItemSocket_Strange::clear_socket() {
  if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  clear_has_socket();
}
const ::CProtoItemSocket& CProtoItemSocket_Strange::socket() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Strange.socket)
  return socket_ != NULL ? *socket_ : *default_instance_->socket_;
}
::CProtoItemSocket* CProtoItemSocket_Strange::mutable_socket() {
  set_has_socket();
  if (socket_ == NULL) {
    socket_ = new ::CProtoItemSocket;
  }
  // @@protoc_insertion_point(field_mutable:CProtoItemSocket_Strange.socket)
  return socket_;
}
::CProtoItemSocket* CProtoItemSocket_Strange::release_socket() {
  clear_has_socket();
  ::CProtoItemSocket* temp = socket_;
  socket_ = NULL;
  return temp;
}
void CProtoItemSocket_Strange::set_allocated_socket(::CProtoItemSocket* socket) {
  delete socket_;
  socket_ = socket;
  if (socket) {
    set_has_socket();
  } else {
    clear_has_socket();
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemSocket_Strange.socket)
}

// optional uint32 strange_type = 2;
bool CProtoItemSocket_Strange::has_strange_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CProtoItemSocket_Strange::set_has_strange_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CProtoItemSocket_Strange::clear_has_strange_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CProtoItemSocket_Strange::clear_strange_type() {
  strange_type_ = 0u;
  clear_has_strange_type();
}
 ::google::protobuf::uint32 CProtoItemSocket_Strange::strange_type() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Strange.strange_type)
  return strange_type_;
}
 void CProtoItemSocket_Strange::set_strange_type(::google::protobuf::uint32 value) {
  set_has_strange_type();
  strange_type_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_Strange.strange_type)
}

// optional uint32 strange_value = 3;
bool CProtoItemSocket_Strange::has_strange_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CProtoItemSocket_Strange::set_has_strange_value() {
  _has_bits_[0] |= 0x00000004u;
}
void CProtoItemSocket_Strange::clear_has_strange_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void CProtoItemSocket_Strange::clear_strange_value() {
  strange_value_ = 0u;
  clear_has_strange_value();
}
 ::google::protobuf::uint32 CProtoItemSocket_Strange::strange_value() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Strange.strange_value)
  return strange_value_;
}
 void CProtoItemSocket_Strange::set_strange_value(::google::protobuf::uint32 value) {
  set_has_strange_value();
  strange_value_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_Strange.strange_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CProtoItemSocket_Spectator::kSocketFieldNumber;
const int CProtoItemSocket_Spectator::kGamesViewedFieldNumber;
const int CProtoItemSocket_Spectator::kCorporationIdFieldNumber;
const int CProtoItemSocket_Spectator::kLeagueIdFieldNumber;
const int CProtoItemSocket_Spectator::kTeamIdFieldNumber;
#endif  // !_MSC_VER

CProtoItemSocket_Spectator::CProtoItemSocket_Spectator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CProtoItemSocket_Spectator)
}

void CProtoItemSocket_Spectator::InitAsDefaultInstance() {
  socket_ = const_cast< ::CProtoItemSocket*>(&::CProtoItemSocket::default_instance());
}

CProtoItemSocket_Spectator::CProtoItemSocket_Spectator(const CProtoItemSocket_Spectator& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_Spectator)
}

void CProtoItemSocket_Spectator::SharedCtor() {
  _cached_size_ = 0;
  socket_ = NULL;
  games_viewed_ = 0u;
  corporation_id_ = 0u;
  league_id_ = 0u;
  team_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProtoItemSocket_Spectator::~CProtoItemSocket_Spectator() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_Spectator)
  SharedDtor();
}

void CProtoItemSocket_Spectator::SharedDtor() {
  if (this != default_instance_) {
    delete socket_;
  }
}

void CProtoItemSocket_Spectator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProtoItemSocket_Spectator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProtoItemSocket_Spectator_descriptor_;
}

const CProtoItemSocket_Spectator& CProtoItemSocket_Spectator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CProtoItemSocket_Spectator* CProtoItemSocket_Spectator::default_instance_ = NULL;

CProtoItemSocket_Spectator* CProtoItemSocket_Spectator::New(::google::protobuf::Arena* arena) const {
  CProtoItemSocket_Spectator* n = new CProtoItemSocket_Spectator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CProtoItemSocket_Spectator::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CProtoItemSocket_Spectator*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(games_viewed_, team_id_);
    if (has_socket()) {
      if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CProtoItemSocket_Spectator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CProtoItemSocket_Spectator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CProtoItemSocket socket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_games_viewed;
        break;
      }

      // optional uint32 games_viewed = 2;
      case 2: {
        if (tag == 16) {
         parse_games_viewed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &games_viewed_)));
          set_has_games_viewed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_corporation_id;
        break;
      }

      // optional uint32 corporation_id = 3;
      case 3: {
        if (tag == 24) {
         parse_corporation_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corporation_id_)));
          set_has_corporation_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_league_id;
        break;
      }

      // optional uint32 league_id = 4;
      case 4: {
        if (tag == 32) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 5;
      case 5: {
        if (tag == 40) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CProtoItemSocket_Spectator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CProtoItemSocket_Spectator)
  return false;
#undef DO_
}

void CProtoItemSocket_Spectator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CProtoItemSocket_Spectator)
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->socket_, output);
  }

  // optional uint32 games_viewed = 2;
  if (has_games_viewed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->games_viewed(), output);
  }

  // optional uint32 corporation_id = 3;
  if (has_corporation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->corporation_id(), output);
  }

  // optional uint32 league_id = 4;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->league_id(), output);
  }

  // optional uint32 team_id = 5;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CProtoItemSocket_Spectator)
}

::google::protobuf::uint8* CProtoItemSocket_Spectator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_Spectator)
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->socket_, target);
  }

  // optional uint32 games_viewed = 2;
  if (has_games_viewed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->games_viewed(), target);
  }

  // optional uint32 corporation_id = 3;
  if (has_corporation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->corporation_id(), target);
  }

  // optional uint32 league_id = 4;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->league_id(), target);
  }

  // optional uint32 team_id = 5;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_Spectator)
  return target;
}

int CProtoItemSocket_Spectator::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional .CProtoItemSocket socket = 1;
    if (has_socket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->socket_);
    }

    // optional uint32 games_viewed = 2;
    if (has_games_viewed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->games_viewed());
    }

    // optional uint32 corporation_id = 3;
    if (has_corporation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->corporation_id());
    }

    // optional uint32 league_id = 4;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 team_id = 5;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProtoItemSocket_Spectator::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CProtoItemSocket_Spectator* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CProtoItemSocket_Spectator>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProtoItemSocket_Spectator::MergeFrom(const CProtoItemSocket_Spectator& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_socket()) {
      mutable_socket()->::CProtoItemSocket::MergeFrom(from.socket());
    }
    if (from.has_games_viewed()) {
      set_games_viewed(from.games_viewed());
    }
    if (from.has_corporation_id()) {
      set_corporation_id(from.corporation_id());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CProtoItemSocket_Spectator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_Spectator::CopyFrom(const CProtoItemSocket_Spectator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_Spectator::IsInitialized() const {

  return true;
}

void CProtoItemSocket_Spectator::Swap(CProtoItemSocket_Spectator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CProtoItemSocket_Spectator::InternalSwap(CProtoItemSocket_Spectator* other) {
  std::swap(socket_, other->socket_);
  std::swap(games_viewed_, other->games_viewed_);
  std::swap(corporation_id_, other->corporation_id_);
  std::swap(league_id_, other->league_id_);
  std::swap(team_id_, other->team_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CProtoItemSocket_Spectator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProtoItemSocket_Spectator_descriptor_;
  metadata.reflection = CProtoItemSocket_Spectator_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CProtoItemSocket_Spectator

// optional .CProtoItemSocket socket = 1;
bool CProtoItemSocket_Spectator::has_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CProtoItemSocket_Spectator::set_has_socket() {
  _has_bits_[0] |= 0x00000001u;
}
void CProtoItemSocket_Spectator::clear_has_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
void CProtoItemSocket_Spectator::clear_socket() {
  if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  clear_has_socket();
}
const ::CProtoItemSocket& CProtoItemSocket_Spectator::socket() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Spectator.socket)
  return socket_ != NULL ? *socket_ : *default_instance_->socket_;
}
::CProtoItemSocket* CProtoItemSocket_Spectator::mutable_socket() {
  set_has_socket();
  if (socket_ == NULL) {
    socket_ = new ::CProtoItemSocket;
  }
  // @@protoc_insertion_point(field_mutable:CProtoItemSocket_Spectator.socket)
  return socket_;
}
::CProtoItemSocket* CProtoItemSocket_Spectator::release_socket() {
  clear_has_socket();
  ::CProtoItemSocket* temp = socket_;
  socket_ = NULL;
  return temp;
}
void CProtoItemSocket_Spectator::set_allocated_socket(::CProtoItemSocket* socket) {
  delete socket_;
  socket_ = socket;
  if (socket) {
    set_has_socket();
  } else {
    clear_has_socket();
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemSocket_Spectator.socket)
}

// optional uint32 games_viewed = 2;
bool CProtoItemSocket_Spectator::has_games_viewed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CProtoItemSocket_Spectator::set_has_games_viewed() {
  _has_bits_[0] |= 0x00000002u;
}
void CProtoItemSocket_Spectator::clear_has_games_viewed() {
  _has_bits_[0] &= ~0x00000002u;
}
void CProtoItemSocket_Spectator::clear_games_viewed() {
  games_viewed_ = 0u;
  clear_has_games_viewed();
}
 ::google::protobuf::uint32 CProtoItemSocket_Spectator::games_viewed() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Spectator.games_viewed)
  return games_viewed_;
}
 void CProtoItemSocket_Spectator::set_games_viewed(::google::protobuf::uint32 value) {
  set_has_games_viewed();
  games_viewed_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_Spectator.games_viewed)
}

// optional uint32 corporation_id = 3;
bool CProtoItemSocket_Spectator::has_corporation_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CProtoItemSocket_Spectator::set_has_corporation_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CProtoItemSocket_Spectator::clear_has_corporation_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CProtoItemSocket_Spectator::clear_corporation_id() {
  corporation_id_ = 0u;
  clear_has_corporation_id();
}
 ::google::protobuf::uint32 CProtoItemSocket_Spectator::corporation_id() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Spectator.corporation_id)
  return corporation_id_;
}
 void CProtoItemSocket_Spectator::set_corporation_id(::google::protobuf::uint32 value) {
  set_has_corporation_id();
  corporation_id_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_Spectator.corporation_id)
}

// optional uint32 league_id = 4;
bool CProtoItemSocket_Spectator::has_league_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CProtoItemSocket_Spectator::set_has_league_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CProtoItemSocket_Spectator::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CProtoItemSocket_Spectator::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
 ::google::protobuf::uint32 CProtoItemSocket_Spectator::league_id() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Spectator.league_id)
  return league_id_;
}
 void CProtoItemSocket_Spectator::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_Spectator.league_id)
}

// optional uint32 team_id = 5;
bool CProtoItemSocket_Spectator::has_team_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CProtoItemSocket_Spectator::set_has_team_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CProtoItemSocket_Spectator::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CProtoItemSocket_Spectator::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
 ::google::protobuf::uint32 CProtoItemSocket_Spectator::team_id() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Spectator.team_id)
  return team_id_;
}
 void CProtoItemSocket_Spectator::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_Spectator.team_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CProtoItemSocket_AssetModifier::kSocketFieldNumber;
const int CProtoItemSocket_AssetModifier::kAssetModifierFieldNumber;
#endif  // !_MSC_VER

CProtoItemSocket_AssetModifier::CProtoItemSocket_AssetModifier()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CProtoItemSocket_AssetModifier)
}

void CProtoItemSocket_AssetModifier::InitAsDefaultInstance() {
  socket_ = const_cast< ::CProtoItemSocket*>(&::CProtoItemSocket::default_instance());
}

CProtoItemSocket_AssetModifier::CProtoItemSocket_AssetModifier(const CProtoItemSocket_AssetModifier& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_AssetModifier)
}

void CProtoItemSocket_AssetModifier::SharedCtor() {
  _cached_size_ = 0;
  socket_ = NULL;
  asset_modifier_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProtoItemSocket_AssetModifier::~CProtoItemSocket_AssetModifier() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_AssetModifier)
  SharedDtor();
}

void CProtoItemSocket_AssetModifier::SharedDtor() {
  if (this != default_instance_) {
    delete socket_;
  }
}

void CProtoItemSocket_AssetModifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProtoItemSocket_AssetModifier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProtoItemSocket_AssetModifier_descriptor_;
}

const CProtoItemSocket_AssetModifier& CProtoItemSocket_AssetModifier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CProtoItemSocket_AssetModifier* CProtoItemSocket_AssetModifier::default_instance_ = NULL;

CProtoItemSocket_AssetModifier* CProtoItemSocket_AssetModifier::New(::google::protobuf::Arena* arena) const {
  CProtoItemSocket_AssetModifier* n = new CProtoItemSocket_AssetModifier;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CProtoItemSocket_AssetModifier::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_socket()) {
      if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
    }
    asset_modifier_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CProtoItemSocket_AssetModifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CProtoItemSocket_AssetModifier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CProtoItemSocket socket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_asset_modifier;
        break;
      }

      // optional uint32 asset_modifier = 2;
      case 2: {
        if (tag == 16) {
         parse_asset_modifier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &asset_modifier_)));
          set_has_asset_modifier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CProtoItemSocket_AssetModifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CProtoItemSocket_AssetModifier)
  return false;
#undef DO_
}

void CProtoItemSocket_AssetModifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CProtoItemSocket_AssetModifier)
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->socket_, output);
  }

  // optional uint32 asset_modifier = 2;
  if (has_asset_modifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->asset_modifier(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CProtoItemSocket_AssetModifier)
}

::google::protobuf::uint8* CProtoItemSocket_AssetModifier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_AssetModifier)
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->socket_, target);
  }

  // optional uint32 asset_modifier = 2;
  if (has_asset_modifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->asset_modifier(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_AssetModifier)
  return target;
}

int CProtoItemSocket_AssetModifier::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .CProtoItemSocket socket = 1;
    if (has_socket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->socket_);
    }

    // optional uint32 asset_modifier = 2;
    if (has_asset_modifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->asset_modifier());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProtoItemSocket_AssetModifier::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CProtoItemSocket_AssetModifier* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CProtoItemSocket_AssetModifier>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProtoItemSocket_AssetModifier::MergeFrom(const CProtoItemSocket_AssetModifier& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_socket()) {
      mutable_socket()->::CProtoItemSocket::MergeFrom(from.socket());
    }
    if (from.has_asset_modifier()) {
      set_asset_modifier(from.asset_modifier());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CProtoItemSocket_AssetModifier::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_AssetModifier::CopyFrom(const CProtoItemSocket_AssetModifier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_AssetModifier::IsInitialized() const {

  return true;
}

void CProtoItemSocket_AssetModifier::Swap(CProtoItemSocket_AssetModifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CProtoItemSocket_AssetModifier::InternalSwap(CProtoItemSocket_AssetModifier* other) {
  std::swap(socket_, other->socket_);
  std::swap(asset_modifier_, other->asset_modifier_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CProtoItemSocket_AssetModifier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProtoItemSocket_AssetModifier_descriptor_;
  metadata.reflection = CProtoItemSocket_AssetModifier_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CProtoItemSocket_AssetModifier

// optional .CProtoItemSocket socket = 1;
bool CProtoItemSocket_AssetModifier::has_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CProtoItemSocket_AssetModifier::set_has_socket() {
  _has_bits_[0] |= 0x00000001u;
}
void CProtoItemSocket_AssetModifier::clear_has_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
void CProtoItemSocket_AssetModifier::clear_socket() {
  if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  clear_has_socket();
}
const ::CProtoItemSocket& CProtoItemSocket_AssetModifier::socket() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_AssetModifier.socket)
  return socket_ != NULL ? *socket_ : *default_instance_->socket_;
}
::CProtoItemSocket* CProtoItemSocket_AssetModifier::mutable_socket() {
  set_has_socket();
  if (socket_ == NULL) {
    socket_ = new ::CProtoItemSocket;
  }
  // @@protoc_insertion_point(field_mutable:CProtoItemSocket_AssetModifier.socket)
  return socket_;
}
::CProtoItemSocket* CProtoItemSocket_AssetModifier::release_socket() {
  clear_has_socket();
  ::CProtoItemSocket* temp = socket_;
  socket_ = NULL;
  return temp;
}
void CProtoItemSocket_AssetModifier::set_allocated_socket(::CProtoItemSocket* socket) {
  delete socket_;
  socket_ = socket;
  if (socket) {
    set_has_socket();
  } else {
    clear_has_socket();
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemSocket_AssetModifier.socket)
}

// optional uint32 asset_modifier = 2;
bool CProtoItemSocket_AssetModifier::has_asset_modifier() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CProtoItemSocket_AssetModifier::set_has_asset_modifier() {
  _has_bits_[0] |= 0x00000002u;
}
void CProtoItemSocket_AssetModifier::clear_has_asset_modifier() {
  _has_bits_[0] &= ~0x00000002u;
}
void CProtoItemSocket_AssetModifier::clear_asset_modifier() {
  asset_modifier_ = 0u;
  clear_has_asset_modifier();
}
 ::google::protobuf::uint32 CProtoItemSocket_AssetModifier::asset_modifier() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_AssetModifier.asset_modifier)
  return asset_modifier_;
}
 void CProtoItemSocket_AssetModifier::set_asset_modifier(::google::protobuf::uint32 value) {
  set_has_asset_modifier();
  asset_modifier_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_AssetModifier.asset_modifier)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::kSocketFieldNumber;
const int CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::kAssetModifierFieldNumber;
const int CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::kAnimModifierFieldNumber;
const int CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::kAbilityEffectFieldNumber;
#endif  // !_MSC_VER

CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
}

void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::InitAsDefaultInstance() {
  socket_ = const_cast< ::CProtoItemSocket*>(&::CProtoItemSocket::default_instance());
}

CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY(const CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
}

void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::SharedCtor() {
  _cached_size_ = 0;
  socket_ = NULL;
  asset_modifier_ = 0u;
  anim_modifier_ = 0u;
  ability_effect_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::~CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
  SharedDtor();
}

void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::SharedDtor() {
  if (this != default_instance_) {
    delete socket_;
  }
}

void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY_descriptor_;
}

const CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY& CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY* CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::default_instance_ = NULL;

CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY* CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::New(::google::protobuf::Arena* arena) const {
  CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY* n = new CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(asset_modifier_, ability_effect_);
    if (has_socket()) {
      if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CProtoItemSocket socket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_asset_modifier;
        break;
      }

      // optional uint32 asset_modifier = 2;
      case 2: {
        if (tag == 16) {
         parse_asset_modifier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &asset_modifier_)));
          set_has_asset_modifier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_anim_modifier;
        break;
      }

      // optional uint32 anim_modifier = 3;
      case 3: {
        if (tag == 24) {
         parse_anim_modifier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &anim_modifier_)));
          set_has_anim_modifier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ability_effect;
        break;
      }

      // optional uint32 ability_effect = 4;
      case 4: {
        if (tag == 32) {
         parse_ability_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_effect_)));
          set_has_ability_effect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
  return false;
#undef DO_
}

void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->socket_, output);
  }

  // optional uint32 asset_modifier = 2;
  if (has_asset_modifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->asset_modifier(), output);
  }

  // optional uint32 anim_modifier = 3;
  if (has_anim_modifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->anim_modifier(), output);
  }

  // optional uint32 ability_effect = 4;
  if (has_ability_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ability_effect(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
}

::google::protobuf::uint8* CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->socket_, target);
  }

  // optional uint32 asset_modifier = 2;
  if (has_asset_modifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->asset_modifier(), target);
  }

  // optional uint32 anim_modifier = 3;
  if (has_anim_modifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->anim_modifier(), target);
  }

  // optional uint32 ability_effect = 4;
  if (has_ability_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ability_effect(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
  return target;
}

int CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .CProtoItemSocket socket = 1;
    if (has_socket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->socket_);
    }

    // optional uint32 asset_modifier = 2;
    if (has_asset_modifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->asset_modifier());
    }

    // optional uint32 anim_modifier = 3;
    if (has_anim_modifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->anim_modifier());
    }

    // optional uint32 ability_effect = 4;
    if (has_ability_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_effect());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::MergeFrom(const CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_socket()) {
      mutable_socket()->::CProtoItemSocket::MergeFrom(from.socket());
    }
    if (from.has_asset_modifier()) {
      set_asset_modifier(from.asset_modifier());
    }
    if (from.has_anim_modifier()) {
      set_anim_modifier(from.anim_modifier());
    }
    if (from.has_ability_effect()) {
      set_ability_effect(from.ability_effect());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::CopyFrom(const CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::IsInitialized() const {

  return true;
}

void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::Swap(CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::InternalSwap(CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY* other) {
  std::swap(socket_, other->socket_);
  std::swap(asset_modifier_, other->asset_modifier_);
  std::swap(anim_modifier_, other->anim_modifier_);
  std::swap(ability_effect_, other->ability_effect_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY_descriptor_;
  metadata.reflection = CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY

// optional .CProtoItemSocket socket = 1;
bool CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::has_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::set_has_socket() {
  _has_bits_[0] |= 0x00000001u;
}
void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::clear_has_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::clear_socket() {
  if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  clear_has_socket();
}
const ::CProtoItemSocket& CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::socket() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY.socket)
  return socket_ != NULL ? *socket_ : *default_instance_->socket_;
}
::CProtoItemSocket* CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::mutable_socket() {
  set_has_socket();
  if (socket_ == NULL) {
    socket_ = new ::CProtoItemSocket;
  }
  // @@protoc_insertion_point(field_mutable:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY.socket)
  return socket_;
}
::CProtoItemSocket* CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::release_socket() {
  clear_has_socket();
  ::CProtoItemSocket* temp = socket_;
  socket_ = NULL;
  return temp;
}
void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::set_allocated_socket(::CProtoItemSocket* socket) {
  delete socket_;
  socket_ = socket;
  if (socket) {
    set_has_socket();
  } else {
    clear_has_socket();
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY.socket)
}

// optional uint32 asset_modifier = 2;
bool CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::has_asset_modifier() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::set_has_asset_modifier() {
  _has_bits_[0] |= 0x00000002u;
}
void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::clear_has_asset_modifier() {
  _has_bits_[0] &= ~0x00000002u;
}
void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::clear_asset_modifier() {
  asset_modifier_ = 0u;
  clear_has_asset_modifier();
}
 ::google::protobuf::uint32 CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::asset_modifier() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY.asset_modifier)
  return asset_modifier_;
}
 void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::set_asset_modifier(::google::protobuf::uint32 value) {
  set_has_asset_modifier();
  asset_modifier_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY.asset_modifier)
}

// optional uint32 anim_modifier = 3;
bool CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::has_anim_modifier() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::set_has_anim_modifier() {
  _has_bits_[0] |= 0x00000004u;
}
void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::clear_has_anim_modifier() {
  _has_bits_[0] &= ~0x00000004u;
}
void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::clear_anim_modifier() {
  anim_modifier_ = 0u;
  clear_has_anim_modifier();
}
 ::google::protobuf::uint32 CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::anim_modifier() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY.anim_modifier)
  return anim_modifier_;
}
 void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::set_anim_modifier(::google::protobuf::uint32 value) {
  set_has_anim_modifier();
  anim_modifier_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY.anim_modifier)
}

// optional uint32 ability_effect = 4;
bool CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::has_ability_effect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::set_has_ability_effect() {
  _has_bits_[0] |= 0x00000008u;
}
void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::clear_has_ability_effect() {
  _has_bits_[0] &= ~0x00000008u;
}
void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::clear_ability_effect() {
  ability_effect_ = 0u;
  clear_has_ability_effect();
}
 ::google::protobuf::uint32 CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::ability_effect() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY.ability_effect)
  return ability_effect_;
}
 void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::set_ability_effect(::google::protobuf::uint32 value) {
  set_has_ability_effect();
  ability_effect_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY.ability_effect)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CProtoItemSocket_Autograph::kSocketFieldNumber;
const int CProtoItemSocket_Autograph::kAutographFieldNumber;
const int CProtoItemSocket_Autograph::kAutographIdFieldNumber;
const int CProtoItemSocket_Autograph::kAutographScoreFieldNumber;
#endif  // !_MSC_VER

CProtoItemSocket_Autograph::CProtoItemSocket_Autograph()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CProtoItemSocket_Autograph)
}

void CProtoItemSocket_Autograph::InitAsDefaultInstance() {
  socket_ = const_cast< ::CProtoItemSocket*>(&::CProtoItemSocket::default_instance());
}

CProtoItemSocket_Autograph::CProtoItemSocket_Autograph(const CProtoItemSocket_Autograph& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_Autograph)
}

void CProtoItemSocket_Autograph::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  socket_ = NULL;
  autograph_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  autograph_id_ = 0u;
  autograph_score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProtoItemSocket_Autograph::~CProtoItemSocket_Autograph() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_Autograph)
  SharedDtor();
}

void CProtoItemSocket_Autograph::SharedDtor() {
  autograph_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete socket_;
  }
}

void CProtoItemSocket_Autograph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProtoItemSocket_Autograph::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProtoItemSocket_Autograph_descriptor_;
}

const CProtoItemSocket_Autograph& CProtoItemSocket_Autograph::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CProtoItemSocket_Autograph* CProtoItemSocket_Autograph::default_instance_ = NULL;

CProtoItemSocket_Autograph* CProtoItemSocket_Autograph::New(::google::protobuf::Arena* arena) const {
  CProtoItemSocket_Autograph* n = new CProtoItemSocket_Autograph;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CProtoItemSocket_Autograph::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CProtoItemSocket_Autograph*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(autograph_id_, autograph_score_);
    if (has_socket()) {
      if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
    }
    if (has_autograph()) {
      autograph_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CProtoItemSocket_Autograph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CProtoItemSocket_Autograph)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CProtoItemSocket socket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_autograph;
        break;
      }

      // optional string autograph = 2;
      case 2: {
        if (tag == 18) {
         parse_autograph:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_autograph()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->autograph().data(), this->autograph().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CProtoItemSocket_Autograph.autograph");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_autograph_id;
        break;
      }

      // optional uint32 autograph_id = 3;
      case 3: {
        if (tag == 24) {
         parse_autograph_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autograph_id_)));
          set_has_autograph_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_autograph_score;
        break;
      }

      // optional uint32 autograph_score = 4;
      case 4: {
        if (tag == 32) {
         parse_autograph_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autograph_score_)));
          set_has_autograph_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CProtoItemSocket_Autograph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CProtoItemSocket_Autograph)
  return false;
#undef DO_
}

void CProtoItemSocket_Autograph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CProtoItemSocket_Autograph)
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->socket_, output);
  }

  // optional string autograph = 2;
  if (has_autograph()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->autograph().data(), this->autograph().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CProtoItemSocket_Autograph.autograph");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->autograph(), output);
  }

  // optional uint32 autograph_id = 3;
  if (has_autograph_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->autograph_id(), output);
  }

  // optional uint32 autograph_score = 4;
  if (has_autograph_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->autograph_score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CProtoItemSocket_Autograph)
}

::google::protobuf::uint8* CProtoItemSocket_Autograph::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_Autograph)
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->socket_, target);
  }

  // optional string autograph = 2;
  if (has_autograph()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->autograph().data(), this->autograph().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CProtoItemSocket_Autograph.autograph");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->autograph(), target);
  }

  // optional uint32 autograph_id = 3;
  if (has_autograph_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->autograph_id(), target);
  }

  // optional uint32 autograph_score = 4;
  if (has_autograph_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->autograph_score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_Autograph)
  return target;
}

int CProtoItemSocket_Autograph::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .CProtoItemSocket socket = 1;
    if (has_socket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->socket_);
    }

    // optional string autograph = 2;
    if (has_autograph()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->autograph());
    }

    // optional uint32 autograph_id = 3;
    if (has_autograph_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->autograph_id());
    }

    // optional uint32 autograph_score = 4;
    if (has_autograph_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->autograph_score());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProtoItemSocket_Autograph::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CProtoItemSocket_Autograph* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CProtoItemSocket_Autograph>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProtoItemSocket_Autograph::MergeFrom(const CProtoItemSocket_Autograph& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_socket()) {
      mutable_socket()->::CProtoItemSocket::MergeFrom(from.socket());
    }
    if (from.has_autograph()) {
      set_has_autograph();
      autograph_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.autograph_);
    }
    if (from.has_autograph_id()) {
      set_autograph_id(from.autograph_id());
    }
    if (from.has_autograph_score()) {
      set_autograph_score(from.autograph_score());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CProtoItemSocket_Autograph::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_Autograph::CopyFrom(const CProtoItemSocket_Autograph& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_Autograph::IsInitialized() const {

  return true;
}

void CProtoItemSocket_Autograph::Swap(CProtoItemSocket_Autograph* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CProtoItemSocket_Autograph::InternalSwap(CProtoItemSocket_Autograph* other) {
  std::swap(socket_, other->socket_);
  autograph_.Swap(&other->autograph_);
  std::swap(autograph_id_, other->autograph_id_);
  std::swap(autograph_score_, other->autograph_score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CProtoItemSocket_Autograph::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProtoItemSocket_Autograph_descriptor_;
  metadata.reflection = CProtoItemSocket_Autograph_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CProtoItemSocket_Autograph

// optional .CProtoItemSocket socket = 1;
bool CProtoItemSocket_Autograph::has_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CProtoItemSocket_Autograph::set_has_socket() {
  _has_bits_[0] |= 0x00000001u;
}
void CProtoItemSocket_Autograph::clear_has_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
void CProtoItemSocket_Autograph::clear_socket() {
  if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  clear_has_socket();
}
const ::CProtoItemSocket& CProtoItemSocket_Autograph::socket() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Autograph.socket)
  return socket_ != NULL ? *socket_ : *default_instance_->socket_;
}
::CProtoItemSocket* CProtoItemSocket_Autograph::mutable_socket() {
  set_has_socket();
  if (socket_ == NULL) {
    socket_ = new ::CProtoItemSocket;
  }
  // @@protoc_insertion_point(field_mutable:CProtoItemSocket_Autograph.socket)
  return socket_;
}
::CProtoItemSocket* CProtoItemSocket_Autograph::release_socket() {
  clear_has_socket();
  ::CProtoItemSocket* temp = socket_;
  socket_ = NULL;
  return temp;
}
void CProtoItemSocket_Autograph::set_allocated_socket(::CProtoItemSocket* socket) {
  delete socket_;
  socket_ = socket;
  if (socket) {
    set_has_socket();
  } else {
    clear_has_socket();
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemSocket_Autograph.socket)
}

// optional string autograph = 2;
bool CProtoItemSocket_Autograph::has_autograph() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CProtoItemSocket_Autograph::set_has_autograph() {
  _has_bits_[0] |= 0x00000002u;
}
void CProtoItemSocket_Autograph::clear_has_autograph() {
  _has_bits_[0] &= ~0x00000002u;
}
void CProtoItemSocket_Autograph::clear_autograph() {
  autograph_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_autograph();
}
 const ::std::string& CProtoItemSocket_Autograph::autograph() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Autograph.autograph)
  return autograph_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CProtoItemSocket_Autograph::set_autograph(const ::std::string& value) {
  set_has_autograph();
  autograph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CProtoItemSocket_Autograph.autograph)
}
 void CProtoItemSocket_Autograph::set_autograph(const char* value) {
  set_has_autograph();
  autograph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CProtoItemSocket_Autograph.autograph)
}
 void CProtoItemSocket_Autograph::set_autograph(const char* value, size_t size) {
  set_has_autograph();
  autograph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CProtoItemSocket_Autograph.autograph)
}
 ::std::string* CProtoItemSocket_Autograph::mutable_autograph() {
  set_has_autograph();
  // @@protoc_insertion_point(field_mutable:CProtoItemSocket_Autograph.autograph)
  return autograph_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CProtoItemSocket_Autograph::release_autograph() {
  clear_has_autograph();
  return autograph_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CProtoItemSocket_Autograph::set_allocated_autograph(::std::string* autograph) {
  if (autograph != NULL) {
    set_has_autograph();
  } else {
    clear_has_autograph();
  }
  autograph_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), autograph);
  // @@protoc_insertion_point(field_set_allocated:CProtoItemSocket_Autograph.autograph)
}

// optional uint32 autograph_id = 3;
bool CProtoItemSocket_Autograph::has_autograph_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CProtoItemSocket_Autograph::set_has_autograph_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CProtoItemSocket_Autograph::clear_has_autograph_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CProtoItemSocket_Autograph::clear_autograph_id() {
  autograph_id_ = 0u;
  clear_has_autograph_id();
}
 ::google::protobuf::uint32 CProtoItemSocket_Autograph::autograph_id() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Autograph.autograph_id)
  return autograph_id_;
}
 void CProtoItemSocket_Autograph::set_autograph_id(::google::protobuf::uint32 value) {
  set_has_autograph_id();
  autograph_id_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_Autograph.autograph_id)
}

// optional uint32 autograph_score = 4;
bool CProtoItemSocket_Autograph::has_autograph_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CProtoItemSocket_Autograph::set_has_autograph_score() {
  _has_bits_[0] |= 0x00000008u;
}
void CProtoItemSocket_Autograph::clear_has_autograph_score() {
  _has_bits_[0] &= ~0x00000008u;
}
void CProtoItemSocket_Autograph::clear_autograph_score() {
  autograph_score_ = 0u;
  clear_has_autograph_score();
}
 ::google::protobuf::uint32 CProtoItemSocket_Autograph::autograph_score() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Autograph.autograph_score)
  return autograph_score_;
}
 void CProtoItemSocket_Autograph::set_autograph_score(::google::protobuf::uint32 value) {
  set_has_autograph_score();
  autograph_score_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_Autograph.autograph_score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CProtoItemSocket_StaticVisuals::kSocketFieldNumber;
#endif  // !_MSC_VER

CProtoItemSocket_StaticVisuals::CProtoItemSocket_StaticVisuals()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CProtoItemSocket_StaticVisuals)
}

void CProtoItemSocket_StaticVisuals::InitAsDefaultInstance() {
  socket_ = const_cast< ::CProtoItemSocket*>(&::CProtoItemSocket::default_instance());
}

CProtoItemSocket_StaticVisuals::CProtoItemSocket_StaticVisuals(const CProtoItemSocket_StaticVisuals& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_StaticVisuals)
}

void CProtoItemSocket_StaticVisuals::SharedCtor() {
  _cached_size_ = 0;
  socket_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProtoItemSocket_StaticVisuals::~CProtoItemSocket_StaticVisuals() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_StaticVisuals)
  SharedDtor();
}

void CProtoItemSocket_StaticVisuals::SharedDtor() {
  if (this != default_instance_) {
    delete socket_;
  }
}

void CProtoItemSocket_StaticVisuals::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProtoItemSocket_StaticVisuals::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProtoItemSocket_StaticVisuals_descriptor_;
}

const CProtoItemSocket_StaticVisuals& CProtoItemSocket_StaticVisuals::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CProtoItemSocket_StaticVisuals* CProtoItemSocket_StaticVisuals::default_instance_ = NULL;

CProtoItemSocket_StaticVisuals* CProtoItemSocket_StaticVisuals::New(::google::protobuf::Arena* arena) const {
  CProtoItemSocket_StaticVisuals* n = new CProtoItemSocket_StaticVisuals;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CProtoItemSocket_StaticVisuals::Clear() {
  if (has_socket()) {
    if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CProtoItemSocket_StaticVisuals::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CProtoItemSocket_StaticVisuals)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CProtoItemSocket socket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CProtoItemSocket_StaticVisuals)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CProtoItemSocket_StaticVisuals)
  return false;
#undef DO_
}

void CProtoItemSocket_StaticVisuals::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CProtoItemSocket_StaticVisuals)
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->socket_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CProtoItemSocket_StaticVisuals)
}

::google::protobuf::uint8* CProtoItemSocket_StaticVisuals::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_StaticVisuals)
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->socket_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_StaticVisuals)
  return target;
}

int CProtoItemSocket_StaticVisuals::ByteSize() const {
  int total_size = 0;

  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->socket_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProtoItemSocket_StaticVisuals::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CProtoItemSocket_StaticVisuals* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CProtoItemSocket_StaticVisuals>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProtoItemSocket_StaticVisuals::MergeFrom(const CProtoItemSocket_StaticVisuals& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_socket()) {
      mutable_socket()->::CProtoItemSocket::MergeFrom(from.socket());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CProtoItemSocket_StaticVisuals::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_StaticVisuals::CopyFrom(const CProtoItemSocket_StaticVisuals& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_StaticVisuals::IsInitialized() const {

  return true;
}

void CProtoItemSocket_StaticVisuals::Swap(CProtoItemSocket_StaticVisuals* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CProtoItemSocket_StaticVisuals::InternalSwap(CProtoItemSocket_StaticVisuals* other) {
  std::swap(socket_, other->socket_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CProtoItemSocket_StaticVisuals::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProtoItemSocket_StaticVisuals_descriptor_;
  metadata.reflection = CProtoItemSocket_StaticVisuals_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CProtoItemSocket_StaticVisuals

// optional .CProtoItemSocket socket = 1;
bool CProtoItemSocket_StaticVisuals::has_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CProtoItemSocket_StaticVisuals::set_has_socket() {
  _has_bits_[0] |= 0x00000001u;
}
void CProtoItemSocket_StaticVisuals::clear_has_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
void CProtoItemSocket_StaticVisuals::clear_socket() {
  if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  clear_has_socket();
}
const ::CProtoItemSocket& CProtoItemSocket_StaticVisuals::socket() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_StaticVisuals.socket)
  return socket_ != NULL ? *socket_ : *default_instance_->socket_;
}
::CProtoItemSocket* CProtoItemSocket_StaticVisuals::mutable_socket() {
  set_has_socket();
  if (socket_ == NULL) {
    socket_ = new ::CProtoItemSocket;
  }
  // @@protoc_insertion_point(field_mutable:CProtoItemSocket_StaticVisuals.socket)
  return socket_;
}
::CProtoItemSocket* CProtoItemSocket_StaticVisuals::release_socket() {
  clear_has_socket();
  ::CProtoItemSocket* temp = socket_;
  socket_ = NULL;
  return temp;
}
void CProtoItemSocket_StaticVisuals::set_allocated_socket(::CProtoItemSocket* socket) {
  delete socket_;
  socket_ = socket;
  if (socket) {
    set_has_socket();
  } else {
    clear_has_socket();
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemSocket_StaticVisuals.socket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMatchPlayerAbilityUpgrade::kAbilityFieldNumber;
const int CMatchPlayerAbilityUpgrade::kTimeFieldNumber;
#endif  // !_MSC_VER

CMatchPlayerAbilityUpgrade::CMatchPlayerAbilityUpgrade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMatchPlayerAbilityUpgrade)
}

void CMatchPlayerAbilityUpgrade::InitAsDefaultInstance() {
}

CMatchPlayerAbilityUpgrade::CMatchPlayerAbilityUpgrade(const CMatchPlayerAbilityUpgrade& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMatchPlayerAbilityUpgrade)
}

void CMatchPlayerAbilityUpgrade::SharedCtor() {
  _cached_size_ = 0;
  ability_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMatchPlayerAbilityUpgrade::~CMatchPlayerAbilityUpgrade() {
  // @@protoc_insertion_point(destructor:CMatchPlayerAbilityUpgrade)
  SharedDtor();
}

void CMatchPlayerAbilityUpgrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMatchPlayerAbilityUpgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMatchPlayerAbilityUpgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMatchPlayerAbilityUpgrade_descriptor_;
}

const CMatchPlayerAbilityUpgrade& CMatchPlayerAbilityUpgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMatchPlayerAbilityUpgrade* CMatchPlayerAbilityUpgrade::default_instance_ = NULL;

CMatchPlayerAbilityUpgrade* CMatchPlayerAbilityUpgrade::New(::google::protobuf::Arena* arena) const {
  CMatchPlayerAbilityUpgrade* n = new CMatchPlayerAbilityUpgrade;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMatchPlayerAbilityUpgrade::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMatchPlayerAbilityUpgrade*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ability_, time_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMatchPlayerAbilityUpgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMatchPlayerAbilityUpgrade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ability = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_)));
          set_has_ability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint32 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMatchPlayerAbilityUpgrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMatchPlayerAbilityUpgrade)
  return false;
#undef DO_
}

void CMatchPlayerAbilityUpgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMatchPlayerAbilityUpgrade)
  // optional uint32 ability = 1;
  if (has_ability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ability(), output);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMatchPlayerAbilityUpgrade)
}

::google::protobuf::uint8* CMatchPlayerAbilityUpgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMatchPlayerAbilityUpgrade)
  // optional uint32 ability = 1;
  if (has_ability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ability(), target);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMatchPlayerAbilityUpgrade)
  return target;
}

int CMatchPlayerAbilityUpgrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 ability = 1;
    if (has_ability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability());
    }

    // optional uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMatchPlayerAbilityUpgrade::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMatchPlayerAbilityUpgrade* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMatchPlayerAbilityUpgrade>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMatchPlayerAbilityUpgrade::MergeFrom(const CMatchPlayerAbilityUpgrade& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ability()) {
      set_ability(from.ability());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMatchPlayerAbilityUpgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMatchPlayerAbilityUpgrade::CopyFrom(const CMatchPlayerAbilityUpgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMatchPlayerAbilityUpgrade::IsInitialized() const {

  return true;
}

void CMatchPlayerAbilityUpgrade::Swap(CMatchPlayerAbilityUpgrade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMatchPlayerAbilityUpgrade::InternalSwap(CMatchPlayerAbilityUpgrade* other) {
  std::swap(ability_, other->ability_);
  std::swap(time_, other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMatchPlayerAbilityUpgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMatchPlayerAbilityUpgrade_descriptor_;
  metadata.reflection = CMatchPlayerAbilityUpgrade_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMatchPlayerAbilityUpgrade

// optional uint32 ability = 1;
bool CMatchPlayerAbilityUpgrade::has_ability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMatchPlayerAbilityUpgrade::set_has_ability() {
  _has_bits_[0] |= 0x00000001u;
}
void CMatchPlayerAbilityUpgrade::clear_has_ability() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMatchPlayerAbilityUpgrade::clear_ability() {
  ability_ = 0u;
  clear_has_ability();
}
 ::google::protobuf::uint32 CMatchPlayerAbilityUpgrade::ability() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerAbilityUpgrade.ability)
  return ability_;
}
 void CMatchPlayerAbilityUpgrade::set_ability(::google::protobuf::uint32 value) {
  set_has_ability();
  ability_ = value;
  // @@protoc_insertion_point(field_set:CMatchPlayerAbilityUpgrade.ability)
}

// optional uint32 time = 2;
bool CMatchPlayerAbilityUpgrade::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMatchPlayerAbilityUpgrade::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void CMatchPlayerAbilityUpgrade::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMatchPlayerAbilityUpgrade::clear_time() {
  time_ = 0u;
  clear_has_time();
}
 ::google::protobuf::uint32 CMatchPlayerAbilityUpgrade::time() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerAbilityUpgrade.time)
  return time_;
}
 void CMatchPlayerAbilityUpgrade::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:CMatchPlayerAbilityUpgrade.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMatchAdditionalUnitInventory::kUnitNameFieldNumber;
const int CMatchAdditionalUnitInventory::kItemsFieldNumber;
#endif  // !_MSC_VER

CMatchAdditionalUnitInventory::CMatchAdditionalUnitInventory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMatchAdditionalUnitInventory)
}

void CMatchAdditionalUnitInventory::InitAsDefaultInstance() {
}

CMatchAdditionalUnitInventory::CMatchAdditionalUnitInventory(const CMatchAdditionalUnitInventory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMatchAdditionalUnitInventory)
}

void CMatchAdditionalUnitInventory::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  unit_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMatchAdditionalUnitInventory::~CMatchAdditionalUnitInventory() {
  // @@protoc_insertion_point(destructor:CMatchAdditionalUnitInventory)
  SharedDtor();
}

void CMatchAdditionalUnitInventory::SharedDtor() {
  unit_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMatchAdditionalUnitInventory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMatchAdditionalUnitInventory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMatchAdditionalUnitInventory_descriptor_;
}

const CMatchAdditionalUnitInventory& CMatchAdditionalUnitInventory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMatchAdditionalUnitInventory* CMatchAdditionalUnitInventory::default_instance_ = NULL;

CMatchAdditionalUnitInventory* CMatchAdditionalUnitInventory::New(::google::protobuf::Arena* arena) const {
  CMatchAdditionalUnitInventory* n = new CMatchAdditionalUnitInventory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMatchAdditionalUnitInventory::Clear() {
  if (has_unit_name()) {
    unit_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMatchAdditionalUnitInventory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMatchAdditionalUnitInventory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string unit_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unit_name().data(), this->unit_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMatchAdditionalUnitInventory.unit_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_items;
        break;
      }

      // repeated uint32 items = 2;
      case 2: {
        if (tag == 16) {
         parse_items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_items())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_items())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMatchAdditionalUnitInventory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMatchAdditionalUnitInventory)
  return false;
#undef DO_
}

void CMatchAdditionalUnitInventory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMatchAdditionalUnitInventory)
  // optional string unit_name = 1;
  if (has_unit_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unit_name().data(), this->unit_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMatchAdditionalUnitInventory.unit_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->unit_name(), output);
  }

  // repeated uint32 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->items(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMatchAdditionalUnitInventory)
}

::google::protobuf::uint8* CMatchAdditionalUnitInventory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMatchAdditionalUnitInventory)
  // optional string unit_name = 1;
  if (has_unit_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unit_name().data(), this->unit_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMatchAdditionalUnitInventory.unit_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->unit_name(), target);
  }

  // repeated uint32 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->items(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMatchAdditionalUnitInventory)
  return target;
}

int CMatchAdditionalUnitInventory::ByteSize() const {
  int total_size = 0;

  // optional string unit_name = 1;
  if (has_unit_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unit_name());
  }

  // repeated uint32 items = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->items_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->items(i));
    }
    total_size += 1 * this->items_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMatchAdditionalUnitInventory::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMatchAdditionalUnitInventory* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMatchAdditionalUnitInventory>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMatchAdditionalUnitInventory::MergeFrom(const CMatchAdditionalUnitInventory& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit_name()) {
      set_has_unit_name();
      unit_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMatchAdditionalUnitInventory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMatchAdditionalUnitInventory::CopyFrom(const CMatchAdditionalUnitInventory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMatchAdditionalUnitInventory::IsInitialized() const {

  return true;
}

void CMatchAdditionalUnitInventory::Swap(CMatchAdditionalUnitInventory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMatchAdditionalUnitInventory::InternalSwap(CMatchAdditionalUnitInventory* other) {
  unit_name_.Swap(&other->unit_name_);
  items_.UnsafeArenaSwap(&other->items_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMatchAdditionalUnitInventory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMatchAdditionalUnitInventory_descriptor_;
  metadata.reflection = CMatchAdditionalUnitInventory_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMatchAdditionalUnitInventory

// optional string unit_name = 1;
bool CMatchAdditionalUnitInventory::has_unit_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMatchAdditionalUnitInventory::set_has_unit_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMatchAdditionalUnitInventory::clear_has_unit_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMatchAdditionalUnitInventory::clear_unit_name() {
  unit_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_unit_name();
}
 const ::std::string& CMatchAdditionalUnitInventory::unit_name() const {
  // @@protoc_insertion_point(field_get:CMatchAdditionalUnitInventory.unit_name)
  return unit_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMatchAdditionalUnitInventory::set_unit_name(const ::std::string& value) {
  set_has_unit_name();
  unit_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMatchAdditionalUnitInventory.unit_name)
}
 void CMatchAdditionalUnitInventory::set_unit_name(const char* value) {
  set_has_unit_name();
  unit_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMatchAdditionalUnitInventory.unit_name)
}
 void CMatchAdditionalUnitInventory::set_unit_name(const char* value, size_t size) {
  set_has_unit_name();
  unit_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMatchAdditionalUnitInventory.unit_name)
}
 ::std::string* CMatchAdditionalUnitInventory::mutable_unit_name() {
  set_has_unit_name();
  // @@protoc_insertion_point(field_mutable:CMatchAdditionalUnitInventory.unit_name)
  return unit_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMatchAdditionalUnitInventory::release_unit_name() {
  clear_has_unit_name();
  return unit_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMatchAdditionalUnitInventory::set_allocated_unit_name(::std::string* unit_name) {
  if (unit_name != NULL) {
    set_has_unit_name();
  } else {
    clear_has_unit_name();
  }
  unit_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit_name);
  // @@protoc_insertion_point(field_set_allocated:CMatchAdditionalUnitInventory.unit_name)
}

// repeated uint32 items = 2;
int CMatchAdditionalUnitInventory::items_size() const {
  return items_.size();
}
void CMatchAdditionalUnitInventory::clear_items() {
  items_.Clear();
}
 ::google::protobuf::uint32 CMatchAdditionalUnitInventory::items(int index) const {
  // @@protoc_insertion_point(field_get:CMatchAdditionalUnitInventory.items)
  return items_.Get(index);
}
 void CMatchAdditionalUnitInventory::set_items(int index, ::google::protobuf::uint32 value) {
  items_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMatchAdditionalUnitInventory.items)
}
 void CMatchAdditionalUnitInventory::add_items(::google::protobuf::uint32 value) {
  items_.Add(value);
  // @@protoc_insertion_point(field_add:CMatchAdditionalUnitInventory.items)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMatchAdditionalUnitInventory::items() const {
  // @@protoc_insertion_point(field_list:CMatchAdditionalUnitInventory.items)
  return items_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMatchAdditionalUnitInventory::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CMatchAdditionalUnitInventory.items)
  return &items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMatchHeroSelectEvent::kIsPickFieldNumber;
const int CMatchHeroSelectEvent::kTeamFieldNumber;
const int CMatchHeroSelectEvent::kHeroIdFieldNumber;
#endif  // !_MSC_VER

CMatchHeroSelectEvent::CMatchHeroSelectEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMatchHeroSelectEvent)
}

void CMatchHeroSelectEvent::InitAsDefaultInstance() {
}

CMatchHeroSelectEvent::CMatchHeroSelectEvent(const CMatchHeroSelectEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMatchHeroSelectEvent)
}

void CMatchHeroSelectEvent::SharedCtor() {
  _cached_size_ = 0;
  is_pick_ = false;
  team_ = 0u;
  hero_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMatchHeroSelectEvent::~CMatchHeroSelectEvent() {
  // @@protoc_insertion_point(destructor:CMatchHeroSelectEvent)
  SharedDtor();
}

void CMatchHeroSelectEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMatchHeroSelectEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMatchHeroSelectEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMatchHeroSelectEvent_descriptor_;
}

const CMatchHeroSelectEvent& CMatchHeroSelectEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMatchHeroSelectEvent* CMatchHeroSelectEvent::default_instance_ = NULL;

CMatchHeroSelectEvent* CMatchHeroSelectEvent::New(::google::protobuf::Arena* arena) const {
  CMatchHeroSelectEvent* n = new CMatchHeroSelectEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMatchHeroSelectEvent::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMatchHeroSelectEvent*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(is_pick_, hero_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMatchHeroSelectEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMatchHeroSelectEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_pick = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pick_)));
          set_has_is_pick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team;
        break;
      }

      // optional uint32 team = 2;
      case 2: {
        if (tag == 16) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hero_id;
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (tag == 24) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMatchHeroSelectEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMatchHeroSelectEvent)
  return false;
#undef DO_
}

void CMatchHeroSelectEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMatchHeroSelectEvent)
  // optional bool is_pick = 1;
  if (has_is_pick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_pick(), output);
  }

  // optional uint32 team = 2;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team(), output);
  }

  // optional uint32 hero_id = 3;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMatchHeroSelectEvent)
}

::google::protobuf::uint8* CMatchHeroSelectEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMatchHeroSelectEvent)
  // optional bool is_pick = 1;
  if (has_is_pick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_pick(), target);
  }

  // optional uint32 team = 2;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team(), target);
  }

  // optional uint32 hero_id = 3;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMatchHeroSelectEvent)
  return target;
}

int CMatchHeroSelectEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional bool is_pick = 1;
    if (has_is_pick()) {
      total_size += 1 + 1;
    }

    // optional uint32 team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional uint32 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMatchHeroSelectEvent::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMatchHeroSelectEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMatchHeroSelectEvent>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMatchHeroSelectEvent::MergeFrom(const CMatchHeroSelectEvent& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_pick()) {
      set_is_pick(from.is_pick());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMatchHeroSelectEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMatchHeroSelectEvent::CopyFrom(const CMatchHeroSelectEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMatchHeroSelectEvent::IsInitialized() const {

  return true;
}

void CMatchHeroSelectEvent::Swap(CMatchHeroSelectEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMatchHeroSelectEvent::InternalSwap(CMatchHeroSelectEvent* other) {
  std::swap(is_pick_, other->is_pick_);
  std::swap(team_, other->team_);
  std::swap(hero_id_, other->hero_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMatchHeroSelectEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMatchHeroSelectEvent_descriptor_;
  metadata.reflection = CMatchHeroSelectEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMatchHeroSelectEvent

// optional bool is_pick = 1;
bool CMatchHeroSelectEvent::has_is_pick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMatchHeroSelectEvent::set_has_is_pick() {
  _has_bits_[0] |= 0x00000001u;
}
void CMatchHeroSelectEvent::clear_has_is_pick() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMatchHeroSelectEvent::clear_is_pick() {
  is_pick_ = false;
  clear_has_is_pick();
}
 bool CMatchHeroSelectEvent::is_pick() const {
  // @@protoc_insertion_point(field_get:CMatchHeroSelectEvent.is_pick)
  return is_pick_;
}
 void CMatchHeroSelectEvent::set_is_pick(bool value) {
  set_has_is_pick();
  is_pick_ = value;
  // @@protoc_insertion_point(field_set:CMatchHeroSelectEvent.is_pick)
}

// optional uint32 team = 2;
bool CMatchHeroSelectEvent::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMatchHeroSelectEvent::set_has_team() {
  _has_bits_[0] |= 0x00000002u;
}
void CMatchHeroSelectEvent::clear_has_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMatchHeroSelectEvent::clear_team() {
  team_ = 0u;
  clear_has_team();
}
 ::google::protobuf::uint32 CMatchHeroSelectEvent::team() const {
  // @@protoc_insertion_point(field_get:CMatchHeroSelectEvent.team)
  return team_;
}
 void CMatchHeroSelectEvent::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CMatchHeroSelectEvent.team)
}

// optional uint32 hero_id = 3;
bool CMatchHeroSelectEvent::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMatchHeroSelectEvent::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMatchHeroSelectEvent::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMatchHeroSelectEvent::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
 ::google::protobuf::uint32 CMatchHeroSelectEvent::hero_id() const {
  // @@protoc_insertion_point(field_get:CMatchHeroSelectEvent.hero_id)
  return hero_id_;
}
 void CMatchHeroSelectEvent::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMatchHeroSelectEvent.hero_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAProcessFantasyScheduledEvent::kEventFieldNumber;
const int CMsgDOTAProcessFantasyScheduledEvent::kTimestampFieldNumber;
const int CMsgDOTAProcessFantasyScheduledEvent::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAProcessFantasyScheduledEvent::kSeasonFieldNumber;
const int CMsgDOTAProcessFantasyScheduledEvent::kReferenceDataFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAProcessFantasyScheduledEvent::CMsgDOTAProcessFantasyScheduledEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAProcessFantasyScheduledEvent)
}

void CMsgDOTAProcessFantasyScheduledEvent::InitAsDefaultInstance() {
}

CMsgDOTAProcessFantasyScheduledEvent::CMsgDOTAProcessFantasyScheduledEvent(const CMsgDOTAProcessFantasyScheduledEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProcessFantasyScheduledEvent)
}

void CMsgDOTAProcessFantasyScheduledEvent::SharedCtor() {
  _cached_size_ = 0;
  event_ = 0u;
  timestamp_ = 0u;
  fantasy_league_id_ = 0u;
  season_ = 0u;
  reference_data_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAProcessFantasyScheduledEvent::~CMsgDOTAProcessFantasyScheduledEvent() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProcessFantasyScheduledEvent)
  SharedDtor();
}

void CMsgDOTAProcessFantasyScheduledEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAProcessFantasyScheduledEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProcessFantasyScheduledEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAProcessFantasyScheduledEvent_descriptor_;
}

const CMsgDOTAProcessFantasyScheduledEvent& CMsgDOTAProcessFantasyScheduledEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAProcessFantasyScheduledEvent* CMsgDOTAProcessFantasyScheduledEvent::default_instance_ = NULL;

CMsgDOTAProcessFantasyScheduledEvent* CMsgDOTAProcessFantasyScheduledEvent::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAProcessFantasyScheduledEvent* n = new CMsgDOTAProcessFantasyScheduledEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAProcessFantasyScheduledEvent::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAProcessFantasyScheduledEvent*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(event_, reference_data_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAProcessFantasyScheduledEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAProcessFantasyScheduledEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_)));
          set_has_event();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fantasy_league_id;
        break;
      }

      // optional uint32 fantasy_league_id = 3;
      case 3: {
        if (tag == 24) {
         parse_fantasy_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_season;
        break;
      }

      // optional uint32 season = 4;
      case 4: {
        if (tag == 32) {
         parse_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reference_data;
        break;
      }

      // optional uint32 reference_data = 5;
      case 5: {
        if (tag == 40) {
         parse_reference_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reference_data_)));
          set_has_reference_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAProcessFantasyScheduledEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAProcessFantasyScheduledEvent)
  return false;
#undef DO_
}

void CMsgDOTAProcessFantasyScheduledEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAProcessFantasyScheduledEvent)
  // optional uint32 event = 1;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event(), output);
  }

  // optional uint32 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  // optional uint32 fantasy_league_id = 3;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fantasy_league_id(), output);
  }

  // optional uint32 season = 4;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->season(), output);
  }

  // optional uint32 reference_data = 5;
  if (has_reference_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->reference_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAProcessFantasyScheduledEvent)
}

::google::protobuf::uint8* CMsgDOTAProcessFantasyScheduledEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProcessFantasyScheduledEvent)
  // optional uint32 event = 1;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event(), target);
  }

  // optional uint32 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  // optional uint32 fantasy_league_id = 3;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fantasy_league_id(), target);
  }

  // optional uint32 season = 4;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->season(), target);
  }

  // optional uint32 reference_data = 5;
  if (has_reference_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->reference_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProcessFantasyScheduledEvent)
  return target;
}

int CMsgDOTAProcessFantasyScheduledEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 event = 1;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event());
    }

    // optional uint32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 fantasy_league_id = 3;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 season = 4;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

    // optional uint32 reference_data = 5;
    if (has_reference_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reference_data());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProcessFantasyScheduledEvent::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAProcessFantasyScheduledEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAProcessFantasyScheduledEvent>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAProcessFantasyScheduledEvent::MergeFrom(const CMsgDOTAProcessFantasyScheduledEvent& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event()) {
      set_event(from.event());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_season()) {
      set_season(from.season());
    }
    if (from.has_reference_data()) {
      set_reference_data(from.reference_data());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAProcessFantasyScheduledEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProcessFantasyScheduledEvent::CopyFrom(const CMsgDOTAProcessFantasyScheduledEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProcessFantasyScheduledEvent::IsInitialized() const {

  return true;
}

void CMsgDOTAProcessFantasyScheduledEvent::Swap(CMsgDOTAProcessFantasyScheduledEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProcessFantasyScheduledEvent::InternalSwap(CMsgDOTAProcessFantasyScheduledEvent* other) {
  std::swap(event_, other->event_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(season_, other->season_);
  std::swap(reference_data_, other->reference_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAProcessFantasyScheduledEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAProcessFantasyScheduledEvent_descriptor_;
  metadata.reflection = CMsgDOTAProcessFantasyScheduledEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAProcessFantasyScheduledEvent

// optional uint32 event = 1;
bool CMsgDOTAProcessFantasyScheduledEvent::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAProcessFantasyScheduledEvent::set_has_event() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAProcessFantasyScheduledEvent::clear_has_event() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAProcessFantasyScheduledEvent::clear_event() {
  event_ = 0u;
  clear_has_event();
}
 ::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::event() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProcessFantasyScheduledEvent.event)
  return event_;
}
 void CMsgDOTAProcessFantasyScheduledEvent::set_event(::google::protobuf::uint32 value) {
  set_has_event();
  event_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProcessFantasyScheduledEvent.event)
}

// optional uint32 timestamp = 2;
bool CMsgDOTAProcessFantasyScheduledEvent::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAProcessFantasyScheduledEvent::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAProcessFantasyScheduledEvent::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAProcessFantasyScheduledEvent::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
 ::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProcessFantasyScheduledEvent.timestamp)
  return timestamp_;
}
 void CMsgDOTAProcessFantasyScheduledEvent::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProcessFantasyScheduledEvent.timestamp)
}

// optional uint32 fantasy_league_id = 3;
bool CMsgDOTAProcessFantasyScheduledEvent::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAProcessFantasyScheduledEvent::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAProcessFantasyScheduledEvent::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAProcessFantasyScheduledEvent::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProcessFantasyScheduledEvent.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAProcessFantasyScheduledEvent::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProcessFantasyScheduledEvent.fantasy_league_id)
}

// optional uint32 season = 4;
bool CMsgDOTAProcessFantasyScheduledEvent::has_season() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAProcessFantasyScheduledEvent::set_has_season() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAProcessFantasyScheduledEvent::clear_has_season() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAProcessFantasyScheduledEvent::clear_season() {
  season_ = 0u;
  clear_has_season();
}
 ::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::season() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProcessFantasyScheduledEvent.season)
  return season_;
}
 void CMsgDOTAProcessFantasyScheduledEvent::set_season(::google::protobuf::uint32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProcessFantasyScheduledEvent.season)
}

// optional uint32 reference_data = 5;
bool CMsgDOTAProcessFantasyScheduledEvent::has_reference_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAProcessFantasyScheduledEvent::set_has_reference_data() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAProcessFantasyScheduledEvent::clear_has_reference_data() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAProcessFantasyScheduledEvent::clear_reference_data() {
  reference_data_ = 0u;
  clear_has_reference_data();
}
 ::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::reference_data() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProcessFantasyScheduledEvent.reference_data)
  return reference_data_;
}
 void CMsgDOTAProcessFantasyScheduledEvent::set_reference_data(::google::protobuf::uint32 value) {
  set_has_reference_data();
  reference_data_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProcessFantasyScheduledEvent.reference_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAHasItemQuery::kAccountIdFieldNumber;
const int CMsgDOTAHasItemQuery::kItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAHasItemQuery::CMsgDOTAHasItemQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAHasItemQuery)
}

void CMsgDOTAHasItemQuery::InitAsDefaultInstance() {
}

CMsgDOTAHasItemQuery::CMsgDOTAHasItemQuery(const CMsgDOTAHasItemQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAHasItemQuery)
}

void CMsgDOTAHasItemQuery::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAHasItemQuery::~CMsgDOTAHasItemQuery() {
  // @@protoc_insertion_point(destructor:CMsgDOTAHasItemQuery)
  SharedDtor();
}

void CMsgDOTAHasItemQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAHasItemQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAHasItemQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAHasItemQuery_descriptor_;
}

const CMsgDOTAHasItemQuery& CMsgDOTAHasItemQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAHasItemQuery* CMsgDOTAHasItemQuery::default_instance_ = NULL;

CMsgDOTAHasItemQuery* CMsgDOTAHasItemQuery::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAHasItemQuery* n = new CMsgDOTAHasItemQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAHasItemQuery::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAHasItemQuery*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(item_id_, account_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAHasItemQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAHasItemQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional uint64 item_id = 2;
      case 2: {
        if (tag == 16) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAHasItemQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAHasItemQuery)
  return false;
#undef DO_
}

void CMsgDOTAHasItemQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAHasItemQuery)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAHasItemQuery)
}

::google::protobuf::uint8* CMsgDOTAHasItemQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAHasItemQuery)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAHasItemQuery)
  return target;
}

int CMsgDOTAHasItemQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint64 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAHasItemQuery::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAHasItemQuery* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAHasItemQuery>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAHasItemQuery::MergeFrom(const CMsgDOTAHasItemQuery& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAHasItemQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAHasItemQuery::CopyFrom(const CMsgDOTAHasItemQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAHasItemQuery::IsInitialized() const {

  return true;
}

void CMsgDOTAHasItemQuery::Swap(CMsgDOTAHasItemQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAHasItemQuery::InternalSwap(CMsgDOTAHasItemQuery* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(item_id_, other->item_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAHasItemQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAHasItemQuery_descriptor_;
  metadata.reflection = CMsgDOTAHasItemQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAHasItemQuery

// optional uint32 account_id = 1;
bool CMsgDOTAHasItemQuery::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAHasItemQuery::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAHasItemQuery::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAHasItemQuery::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
 ::google::protobuf::uint32 CMsgDOTAHasItemQuery::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHasItemQuery.account_id)
  return account_id_;
}
 void CMsgDOTAHasItemQuery::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHasItemQuery.account_id)
}

// optional uint64 item_id = 2;
bool CMsgDOTAHasItemQuery::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAHasItemQuery::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAHasItemQuery::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAHasItemQuery::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
 ::google::protobuf::uint64 CMsgDOTAHasItemQuery::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHasItemQuery.item_id)
  return item_id_;
}
 void CMsgDOTAHasItemQuery::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHasItemQuery.item_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAHasItemResponse::kHasItemFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAHasItemResponse::CMsgDOTAHasItemResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAHasItemResponse)
}

void CMsgDOTAHasItemResponse::InitAsDefaultInstance() {
}

CMsgDOTAHasItemResponse::CMsgDOTAHasItemResponse(const CMsgDOTAHasItemResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAHasItemResponse)
}

void CMsgDOTAHasItemResponse::SharedCtor() {
  _cached_size_ = 0;
  has_item_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAHasItemResponse::~CMsgDOTAHasItemResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAHasItemResponse)
  SharedDtor();
}

void CMsgDOTAHasItemResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAHasItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAHasItemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAHasItemResponse_descriptor_;
}

const CMsgDOTAHasItemResponse& CMsgDOTAHasItemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAHasItemResponse* CMsgDOTAHasItemResponse::default_instance_ = NULL;

CMsgDOTAHasItemResponse* CMsgDOTAHasItemResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAHasItemResponse* n = new CMsgDOTAHasItemResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAHasItemResponse::Clear() {
  has_item_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAHasItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAHasItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool has_item = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_item_)));
          set_has_has_item();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAHasItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAHasItemResponse)
  return false;
#undef DO_
}

void CMsgDOTAHasItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAHasItemResponse)
  // optional bool has_item = 1;
  if (has_has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_item(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAHasItemResponse)
}

::google::protobuf::uint8* CMsgDOTAHasItemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAHasItemResponse)
  // optional bool has_item = 1;
  if (has_has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->has_item(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAHasItemResponse)
  return target;
}

int CMsgDOTAHasItemResponse::ByteSize() const {
  int total_size = 0;

  // optional bool has_item = 1;
  if (has_has_item()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAHasItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAHasItemResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAHasItemResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAHasItemResponse::MergeFrom(const CMsgDOTAHasItemResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_has_item()) {
      set_has_item(from.has_item());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAHasItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAHasItemResponse::CopyFrom(const CMsgDOTAHasItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAHasItemResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAHasItemResponse::Swap(CMsgDOTAHasItemResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAHasItemResponse::InternalSwap(CMsgDOTAHasItemResponse* other) {
  std::swap(has_item_, other->has_item_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAHasItemResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAHasItemResponse_descriptor_;
  metadata.reflection = CMsgDOTAHasItemResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAHasItemResponse

// optional bool has_item = 1;
bool CMsgDOTAHasItemResponse::has_has_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAHasItemResponse::set_has_has_item() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAHasItemResponse::clear_has_has_item() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAHasItemResponse::clear_has_item() {
  has_item_ = false;
  clear_has_has_item();
}
 bool CMsgDOTAHasItemResponse::has_item() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHasItemResponse.has_item)
  return has_item_;
}
 void CMsgDOTAHasItemResponse::set_has_item(bool value) {
  set_has_has_item();
  has_item_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHasItemResponse.has_item)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAHasItemDefsQuery::kAccountIdFieldNumber;
const int CMsgDOTAHasItemDefsQuery::kItemdefIdsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAHasItemDefsQuery::CMsgDOTAHasItemDefsQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAHasItemDefsQuery)
}

void CMsgDOTAHasItemDefsQuery::InitAsDefaultInstance() {
}

CMsgDOTAHasItemDefsQuery::CMsgDOTAHasItemDefsQuery(const CMsgDOTAHasItemDefsQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAHasItemDefsQuery)
}

void CMsgDOTAHasItemDefsQuery::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAHasItemDefsQuery::~CMsgDOTAHasItemDefsQuery() {
  // @@protoc_insertion_point(destructor:CMsgDOTAHasItemDefsQuery)
  SharedDtor();
}

void CMsgDOTAHasItemDefsQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAHasItemDefsQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAHasItemDefsQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAHasItemDefsQuery_descriptor_;
}

const CMsgDOTAHasItemDefsQuery& CMsgDOTAHasItemDefsQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAHasItemDefsQuery* CMsgDOTAHasItemDefsQuery::default_instance_ = NULL;

CMsgDOTAHasItemDefsQuery* CMsgDOTAHasItemDefsQuery::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAHasItemDefsQuery* n = new CMsgDOTAHasItemDefsQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAHasItemDefsQuery::Clear() {
  account_id_ = 0u;
  itemdef_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAHasItemDefsQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAHasItemDefsQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemdef_ids;
        break;
      }

      // repeated uint32 itemdef_ids = 2;
      case 2: {
        if (tag == 16) {
         parse_itemdef_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_itemdef_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_itemdef_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemdef_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAHasItemDefsQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAHasItemDefsQuery)
  return false;
#undef DO_
}

void CMsgDOTAHasItemDefsQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAHasItemDefsQuery)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated uint32 itemdef_ids = 2;
  for (int i = 0; i < this->itemdef_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->itemdef_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAHasItemDefsQuery)
}

::google::protobuf::uint8* CMsgDOTAHasItemDefsQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAHasItemDefsQuery)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated uint32 itemdef_ids = 2;
  for (int i = 0; i < this->itemdef_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->itemdef_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAHasItemDefsQuery)
  return target;
}

int CMsgDOTAHasItemDefsQuery::ByteSize() const {
  int total_size = 0;

  // optional uint32 account_id = 1;
  if (has_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  // repeated uint32 itemdef_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemdef_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->itemdef_ids(i));
    }
    total_size += 1 * this->itemdef_ids_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAHasItemDefsQuery::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAHasItemDefsQuery* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAHasItemDefsQuery>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAHasItemDefsQuery::MergeFrom(const CMsgDOTAHasItemDefsQuery& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  itemdef_ids_.MergeFrom(from.itemdef_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAHasItemDefsQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAHasItemDefsQuery::CopyFrom(const CMsgDOTAHasItemDefsQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAHasItemDefsQuery::IsInitialized() const {

  return true;
}

void CMsgDOTAHasItemDefsQuery::Swap(CMsgDOTAHasItemDefsQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAHasItemDefsQuery::InternalSwap(CMsgDOTAHasItemDefsQuery* other) {
  std::swap(account_id_, other->account_id_);
  itemdef_ids_.UnsafeArenaSwap(&other->itemdef_ids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAHasItemDefsQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAHasItemDefsQuery_descriptor_;
  metadata.reflection = CMsgDOTAHasItemDefsQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAHasItemDefsQuery

// optional uint32 account_id = 1;
bool CMsgDOTAHasItemDefsQuery::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAHasItemDefsQuery::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAHasItemDefsQuery::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAHasItemDefsQuery::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
 ::google::protobuf::uint32 CMsgDOTAHasItemDefsQuery::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHasItemDefsQuery.account_id)
  return account_id_;
}
 void CMsgDOTAHasItemDefsQuery::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHasItemDefsQuery.account_id)
}

// repeated uint32 itemdef_ids = 2;
int CMsgDOTAHasItemDefsQuery::itemdef_ids_size() const {
  return itemdef_ids_.size();
}
void CMsgDOTAHasItemDefsQuery::clear_itemdef_ids() {
  itemdef_ids_.Clear();
}
 ::google::protobuf::uint32 CMsgDOTAHasItemDefsQuery::itemdef_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHasItemDefsQuery.itemdef_ids)
  return itemdef_ids_.Get(index);
}
 void CMsgDOTAHasItemDefsQuery::set_itemdef_ids(int index, ::google::protobuf::uint32 value) {
  itemdef_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAHasItemDefsQuery.itemdef_ids)
}
 void CMsgDOTAHasItemDefsQuery::add_itemdef_ids(::google::protobuf::uint32 value) {
  itemdef_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAHasItemDefsQuery.itemdef_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAHasItemDefsQuery::itemdef_ids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAHasItemDefsQuery.itemdef_ids)
  return itemdef_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAHasItemDefsQuery::mutable_itemdef_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAHasItemDefsQuery.itemdef_ids)
  return &itemdef_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAHasItemDefsResponse::kHasItemsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAHasItemDefsResponse::CMsgDOTAHasItemDefsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAHasItemDefsResponse)
}

void CMsgDOTAHasItemDefsResponse::InitAsDefaultInstance() {
}

CMsgDOTAHasItemDefsResponse::CMsgDOTAHasItemDefsResponse(const CMsgDOTAHasItemDefsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAHasItemDefsResponse)
}

void CMsgDOTAHasItemDefsResponse::SharedCtor() {
  _cached_size_ = 0;
  has_items_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAHasItemDefsResponse::~CMsgDOTAHasItemDefsResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAHasItemDefsResponse)
  SharedDtor();
}

void CMsgDOTAHasItemDefsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAHasItemDefsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAHasItemDefsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAHasItemDefsResponse_descriptor_;
}

const CMsgDOTAHasItemDefsResponse& CMsgDOTAHasItemDefsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAHasItemDefsResponse* CMsgDOTAHasItemDefsResponse::default_instance_ = NULL;

CMsgDOTAHasItemDefsResponse* CMsgDOTAHasItemDefsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAHasItemDefsResponse* n = new CMsgDOTAHasItemDefsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAHasItemDefsResponse::Clear() {
  has_items_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAHasItemDefsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAHasItemDefsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool has_items = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_items_)));
          set_has_has_items();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAHasItemDefsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAHasItemDefsResponse)
  return false;
#undef DO_
}

void CMsgDOTAHasItemDefsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAHasItemDefsResponse)
  // optional bool has_items = 1;
  if (has_has_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_items(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAHasItemDefsResponse)
}

::google::protobuf::uint8* CMsgDOTAHasItemDefsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAHasItemDefsResponse)
  // optional bool has_items = 1;
  if (has_has_items()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->has_items(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAHasItemDefsResponse)
  return target;
}

int CMsgDOTAHasItemDefsResponse::ByteSize() const {
  int total_size = 0;

  // optional bool has_items = 1;
  if (has_has_items()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAHasItemDefsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAHasItemDefsResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAHasItemDefsResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAHasItemDefsResponse::MergeFrom(const CMsgDOTAHasItemDefsResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_has_items()) {
      set_has_items(from.has_items());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAHasItemDefsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAHasItemDefsResponse::CopyFrom(const CMsgDOTAHasItemDefsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAHasItemDefsResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAHasItemDefsResponse::Swap(CMsgDOTAHasItemDefsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAHasItemDefsResponse::InternalSwap(CMsgDOTAHasItemDefsResponse* other) {
  std::swap(has_items_, other->has_items_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAHasItemDefsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAHasItemDefsResponse_descriptor_;
  metadata.reflection = CMsgDOTAHasItemDefsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAHasItemDefsResponse

// optional bool has_items = 1;
bool CMsgDOTAHasItemDefsResponse::has_has_items() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAHasItemDefsResponse::set_has_has_items() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAHasItemDefsResponse::clear_has_has_items() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAHasItemDefsResponse::clear_has_items() {
  has_items_ = false;
  clear_has_has_items();
}
 bool CMsgDOTAHasItemDefsResponse::has_items() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHasItemDefsResponse.has_items)
  return has_items_;
}
 void CMsgDOTAHasItemDefsResponse::set_has_items(bool value) {
  set_has_has_items();
  has_items_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHasItemDefsResponse.has_items)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAConsumeFantasyTicket::kAccountIdFieldNumber;
const int CMsgDOTAConsumeFantasyTicket::kItemIdFieldNumber;
const int CMsgDOTAConsumeFantasyTicket::kFantasyLeagueIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAConsumeFantasyTicket::CMsgDOTAConsumeFantasyTicket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAConsumeFantasyTicket)
}

void CMsgDOTAConsumeFantasyTicket::InitAsDefaultInstance() {
}

CMsgDOTAConsumeFantasyTicket::CMsgDOTAConsumeFantasyTicket(const CMsgDOTAConsumeFantasyTicket& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAConsumeFantasyTicket)
}

void CMsgDOTAConsumeFantasyTicket::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  item_id_ = GOOGLE_ULONGLONG(0);
  fantasy_league_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAConsumeFantasyTicket::~CMsgDOTAConsumeFantasyTicket() {
  // @@protoc_insertion_point(destructor:CMsgDOTAConsumeFantasyTicket)
  SharedDtor();
}

void CMsgDOTAConsumeFantasyTicket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAConsumeFantasyTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAConsumeFantasyTicket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAConsumeFantasyTicket_descriptor_;
}

const CMsgDOTAConsumeFantasyTicket& CMsgDOTAConsumeFantasyTicket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAConsumeFantasyTicket* CMsgDOTAConsumeFantasyTicket::default_instance_ = NULL;

CMsgDOTAConsumeFantasyTicket* CMsgDOTAConsumeFantasyTicket::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAConsumeFantasyTicket* n = new CMsgDOTAConsumeFantasyTicket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAConsumeFantasyTicket::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAConsumeFantasyTicket*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(item_id_, fantasy_league_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAConsumeFantasyTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAConsumeFantasyTicket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional uint64 item_id = 2;
      case 2: {
        if (tag == 16) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fantasy_league_id;
        break;
      }

      // optional uint32 fantasy_league_id = 3;
      case 3: {
        if (tag == 24) {
         parse_fantasy_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAConsumeFantasyTicket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAConsumeFantasyTicket)
  return false;
#undef DO_
}

void CMsgDOTAConsumeFantasyTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAConsumeFantasyTicket)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }

  // optional uint32 fantasy_league_id = 3;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fantasy_league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAConsumeFantasyTicket)
}

::google::protobuf::uint8* CMsgDOTAConsumeFantasyTicket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAConsumeFantasyTicket)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }

  // optional uint32 fantasy_league_id = 3;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fantasy_league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAConsumeFantasyTicket)
  return target;
}

int CMsgDOTAConsumeFantasyTicket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint64 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional uint32 fantasy_league_id = 3;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAConsumeFantasyTicket::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAConsumeFantasyTicket* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAConsumeFantasyTicket>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAConsumeFantasyTicket::MergeFrom(const CMsgDOTAConsumeFantasyTicket& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAConsumeFantasyTicket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAConsumeFantasyTicket::CopyFrom(const CMsgDOTAConsumeFantasyTicket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAConsumeFantasyTicket::IsInitialized() const {

  return true;
}

void CMsgDOTAConsumeFantasyTicket::Swap(CMsgDOTAConsumeFantasyTicket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAConsumeFantasyTicket::InternalSwap(CMsgDOTAConsumeFantasyTicket* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(item_id_, other->item_id_);
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAConsumeFantasyTicket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAConsumeFantasyTicket_descriptor_;
  metadata.reflection = CMsgDOTAConsumeFantasyTicket_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAConsumeFantasyTicket

// optional uint32 account_id = 1;
bool CMsgDOTAConsumeFantasyTicket::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAConsumeFantasyTicket::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAConsumeFantasyTicket::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAConsumeFantasyTicket::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
 ::google::protobuf::uint32 CMsgDOTAConsumeFantasyTicket::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAConsumeFantasyTicket.account_id)
  return account_id_;
}
 void CMsgDOTAConsumeFantasyTicket::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAConsumeFantasyTicket.account_id)
}

// optional uint64 item_id = 2;
bool CMsgDOTAConsumeFantasyTicket::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAConsumeFantasyTicket::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAConsumeFantasyTicket::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAConsumeFantasyTicket::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
 ::google::protobuf::uint64 CMsgDOTAConsumeFantasyTicket::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAConsumeFantasyTicket.item_id)
  return item_id_;
}
 void CMsgDOTAConsumeFantasyTicket::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAConsumeFantasyTicket.item_id)
}

// optional uint32 fantasy_league_id = 3;
bool CMsgDOTAConsumeFantasyTicket::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAConsumeFantasyTicket::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAConsumeFantasyTicket::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAConsumeFantasyTicket::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAConsumeFantasyTicket::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAConsumeFantasyTicket.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAConsumeFantasyTicket::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAConsumeFantasyTicket.fantasy_league_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAConsumeFantasyTicketFailure::kAccountIdFieldNumber;
const int CMsgDOTAConsumeFantasyTicketFailure::kItemIdFieldNumber;
const int CMsgDOTAConsumeFantasyTicketFailure::kFantasyLeagueIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAConsumeFantasyTicketFailure::CMsgDOTAConsumeFantasyTicketFailure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAConsumeFantasyTicketFailure)
}

void CMsgDOTAConsumeFantasyTicketFailure::InitAsDefaultInstance() {
}

CMsgDOTAConsumeFantasyTicketFailure::CMsgDOTAConsumeFantasyTicketFailure(const CMsgDOTAConsumeFantasyTicketFailure& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAConsumeFantasyTicketFailure)
}

void CMsgDOTAConsumeFantasyTicketFailure::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  item_id_ = GOOGLE_ULONGLONG(0);
  fantasy_league_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAConsumeFantasyTicketFailure::~CMsgDOTAConsumeFantasyTicketFailure() {
  // @@protoc_insertion_point(destructor:CMsgDOTAConsumeFantasyTicketFailure)
  SharedDtor();
}

void CMsgDOTAConsumeFantasyTicketFailure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAConsumeFantasyTicketFailure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAConsumeFantasyTicketFailure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAConsumeFantasyTicketFailure_descriptor_;
}

const CMsgDOTAConsumeFantasyTicketFailure& CMsgDOTAConsumeFantasyTicketFailure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAConsumeFantasyTicketFailure* CMsgDOTAConsumeFantasyTicketFailure::default_instance_ = NULL;

CMsgDOTAConsumeFantasyTicketFailure* CMsgDOTAConsumeFantasyTicketFailure::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAConsumeFantasyTicketFailure* n = new CMsgDOTAConsumeFantasyTicketFailure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAConsumeFantasyTicketFailure::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAConsumeFantasyTicketFailure*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(item_id_, fantasy_league_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAConsumeFantasyTicketFailure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAConsumeFantasyTicketFailure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional uint64 item_id = 2;
      case 2: {
        if (tag == 16) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fantasy_league_id;
        break;
      }

      // optional uint32 fantasy_league_id = 3;
      case 3: {
        if (tag == 24) {
         parse_fantasy_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAConsumeFantasyTicketFailure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAConsumeFantasyTicketFailure)
  return false;
#undef DO_
}

void CMsgDOTAConsumeFantasyTicketFailure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAConsumeFantasyTicketFailure)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }

  // optional uint32 fantasy_league_id = 3;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fantasy_league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAConsumeFantasyTicketFailure)
}

::google::protobuf::uint8* CMsgDOTAConsumeFantasyTicketFailure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAConsumeFantasyTicketFailure)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }

  // optional uint32 fantasy_league_id = 3;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fantasy_league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAConsumeFantasyTicketFailure)
  return target;
}

int CMsgDOTAConsumeFantasyTicketFailure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint64 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional uint32 fantasy_league_id = 3;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAConsumeFantasyTicketFailure::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAConsumeFantasyTicketFailure* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAConsumeFantasyTicketFailure>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAConsumeFantasyTicketFailure::MergeFrom(const CMsgDOTAConsumeFantasyTicketFailure& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAConsumeFantasyTicketFailure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAConsumeFantasyTicketFailure::CopyFrom(const CMsgDOTAConsumeFantasyTicketFailure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAConsumeFantasyTicketFailure::IsInitialized() const {

  return true;
}

void CMsgDOTAConsumeFantasyTicketFailure::Swap(CMsgDOTAConsumeFantasyTicketFailure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAConsumeFantasyTicketFailure::InternalSwap(CMsgDOTAConsumeFantasyTicketFailure* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(item_id_, other->item_id_);
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAConsumeFantasyTicketFailure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAConsumeFantasyTicketFailure_descriptor_;
  metadata.reflection = CMsgDOTAConsumeFantasyTicketFailure_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAConsumeFantasyTicketFailure

// optional uint32 account_id = 1;
bool CMsgDOTAConsumeFantasyTicketFailure::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAConsumeFantasyTicketFailure::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAConsumeFantasyTicketFailure::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAConsumeFantasyTicketFailure::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
 ::google::protobuf::uint32 CMsgDOTAConsumeFantasyTicketFailure::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAConsumeFantasyTicketFailure.account_id)
  return account_id_;
}
 void CMsgDOTAConsumeFantasyTicketFailure::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAConsumeFantasyTicketFailure.account_id)
}

// optional uint64 item_id = 2;
bool CMsgDOTAConsumeFantasyTicketFailure::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAConsumeFantasyTicketFailure::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAConsumeFantasyTicketFailure::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAConsumeFantasyTicketFailure::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
 ::google::protobuf::uint64 CMsgDOTAConsumeFantasyTicketFailure::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAConsumeFantasyTicketFailure.item_id)
  return item_id_;
}
 void CMsgDOTAConsumeFantasyTicketFailure::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAConsumeFantasyTicketFailure.item_id)
}

// optional uint32 fantasy_league_id = 3;
bool CMsgDOTAConsumeFantasyTicketFailure::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAConsumeFantasyTicketFailure::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAConsumeFantasyTicketFailure::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAConsumeFantasyTicketFailure::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAConsumeFantasyTicketFailure::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAConsumeFantasyTicketFailure.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAConsumeFantasyTicketFailure::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAConsumeFantasyTicketFailure.fantasy_league_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToGCFantasySetMatchLeague::kMatchIdFieldNumber;
const int CMsgGCToGCFantasySetMatchLeague::kLeagueIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCToGCFantasySetMatchLeague::CMsgGCToGCFantasySetMatchLeague()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToGCFantasySetMatchLeague)
}

void CMsgGCToGCFantasySetMatchLeague::InitAsDefaultInstance() {
}

CMsgGCToGCFantasySetMatchLeague::CMsgGCToGCFantasySetMatchLeague(const CMsgGCToGCFantasySetMatchLeague& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCFantasySetMatchLeague)
}

void CMsgGCToGCFantasySetMatchLeague::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  league_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCFantasySetMatchLeague::~CMsgGCToGCFantasySetMatchLeague() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCFantasySetMatchLeague)
  SharedDtor();
}

void CMsgGCToGCFantasySetMatchLeague::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCFantasySetMatchLeague::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCFantasySetMatchLeague::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCFantasySetMatchLeague_descriptor_;
}

const CMsgGCToGCFantasySetMatchLeague& CMsgGCToGCFantasySetMatchLeague::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgGCToGCFantasySetMatchLeague* CMsgGCToGCFantasySetMatchLeague::default_instance_ = NULL;

CMsgGCToGCFantasySetMatchLeague* CMsgGCToGCFantasySetMatchLeague::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCFantasySetMatchLeague* n = new CMsgGCToGCFantasySetMatchLeague;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCFantasySetMatchLeague::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgGCToGCFantasySetMatchLeague*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(match_id_, league_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgGCToGCFantasySetMatchLeague::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToGCFantasySetMatchLeague)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_league_id;
        break;
      }

      // optional uint32 league_id = 2;
      case 2: {
        if (tag == 16) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToGCFantasySetMatchLeague)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToGCFantasySetMatchLeague)
  return false;
#undef DO_
}

void CMsgGCToGCFantasySetMatchLeague::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToGCFantasySetMatchLeague)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 league_id = 2;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToGCFantasySetMatchLeague)
}

::google::protobuf::uint8* CMsgGCToGCFantasySetMatchLeague::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCFantasySetMatchLeague)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 league_id = 2;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCFantasySetMatchLeague)
  return target;
}

int CMsgGCToGCFantasySetMatchLeague::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 league_id = 2;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCFantasySetMatchLeague::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgGCToGCFantasySetMatchLeague* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCFantasySetMatchLeague>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCFantasySetMatchLeague::MergeFrom(const CMsgGCToGCFantasySetMatchLeague& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgGCToGCFantasySetMatchLeague::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCFantasySetMatchLeague::CopyFrom(const CMsgGCToGCFantasySetMatchLeague& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCFantasySetMatchLeague::IsInitialized() const {

  return true;
}

void CMsgGCToGCFantasySetMatchLeague::Swap(CMsgGCToGCFantasySetMatchLeague* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCFantasySetMatchLeague::InternalSwap(CMsgGCToGCFantasySetMatchLeague* other) {
  std::swap(match_id_, other->match_id_);
  std::swap(league_id_, other->league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCFantasySetMatchLeague::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCFantasySetMatchLeague_descriptor_;
  metadata.reflection = CMsgGCToGCFantasySetMatchLeague_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToGCFantasySetMatchLeague

// optional uint64 match_id = 1;
bool CMsgGCToGCFantasySetMatchLeague::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToGCFantasySetMatchLeague::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToGCFantasySetMatchLeague::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToGCFantasySetMatchLeague::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
 ::google::protobuf::uint64 CMsgGCToGCFantasySetMatchLeague::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCFantasySetMatchLeague.match_id)
  return match_id_;
}
 void CMsgGCToGCFantasySetMatchLeague::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCFantasySetMatchLeague.match_id)
}

// optional uint32 league_id = 2;
bool CMsgGCToGCFantasySetMatchLeague::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToGCFantasySetMatchLeague::set_has_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToGCFantasySetMatchLeague::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToGCFantasySetMatchLeague::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
 ::google::protobuf::uint32 CMsgGCToGCFantasySetMatchLeague::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCFantasySetMatchLeague.league_id)
  return league_id_;
}
 void CMsgGCToGCFantasySetMatchLeague::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCFantasySetMatchLeague.league_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CSODOTAMapLocationState::kAccountIdFieldNumber;
const int CSODOTAMapLocationState::kLocationIdFieldNumber;
const int CSODOTAMapLocationState::kCompletedFieldNumber;
#endif  // !_MSC_VER

CSODOTAMapLocationState::CSODOTAMapLocationState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSODOTAMapLocationState)
}

void CSODOTAMapLocationState::InitAsDefaultInstance() {
}

CSODOTAMapLocationState::CSODOTAMapLocationState(const CSODOTAMapLocationState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSODOTAMapLocationState)
}

void CSODOTAMapLocationState::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  location_id_ = 0;
  completed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTAMapLocationState::~CSODOTAMapLocationState() {
  // @@protoc_insertion_point(destructor:CSODOTAMapLocationState)
  SharedDtor();
}

void CSODOTAMapLocationState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSODOTAMapLocationState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTAMapLocationState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTAMapLocationState_descriptor_;
}

const CSODOTAMapLocationState& CSODOTAMapLocationState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CSODOTAMapLocationState* CSODOTAMapLocationState::default_instance_ = NULL;

CSODOTAMapLocationState* CSODOTAMapLocationState::New(::google::protobuf::Arena* arena) const {
  CSODOTAMapLocationState* n = new CSODOTAMapLocationState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSODOTAMapLocationState::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CSODOTAMapLocationState*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(account_id_, completed_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CSODOTAMapLocationState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSODOTAMapLocationState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_location_id;
        break;
      }

      // optional int32 location_id = 2;
      case 2: {
        if (tag == 16) {
         parse_location_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &location_id_)));
          set_has_location_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_completed;
        break;
      }

      // optional bool completed = 3;
      case 3: {
        if (tag == 24) {
         parse_completed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &completed_)));
          set_has_completed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSODOTAMapLocationState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSODOTAMapLocationState)
  return false;
#undef DO_
}

void CSODOTAMapLocationState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSODOTAMapLocationState)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional int32 location_id = 2;
  if (has_location_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->location_id(), output);
  }

  // optional bool completed = 3;
  if (has_completed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->completed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSODOTAMapLocationState)
}

::google::protobuf::uint8* CSODOTAMapLocationState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAMapLocationState)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional int32 location_id = 2;
  if (has_location_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->location_id(), target);
  }

  // optional bool completed = 3;
  if (has_completed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->completed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAMapLocationState)
  return target;
}

int CSODOTAMapLocationState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional int32 location_id = 2;
    if (has_location_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->location_id());
    }

    // optional bool completed = 3;
    if (has_completed()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTAMapLocationState::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CSODOTAMapLocationState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSODOTAMapLocationState>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTAMapLocationState::MergeFrom(const CSODOTAMapLocationState& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_location_id()) {
      set_location_id(from.location_id());
    }
    if (from.has_completed()) {
      set_completed(from.completed());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CSODOTAMapLocationState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAMapLocationState::CopyFrom(const CSODOTAMapLocationState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAMapLocationState::IsInitialized() const {

  return true;
}

void CSODOTAMapLocationState::Swap(CSODOTAMapLocationState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTAMapLocationState::InternalSwap(CSODOTAMapLocationState* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(location_id_, other->location_id_);
  std::swap(completed_, other->completed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSODOTAMapLocationState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTAMapLocationState_descriptor_;
  metadata.reflection = CSODOTAMapLocationState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSODOTAMapLocationState

// optional uint32 account_id = 1;
bool CSODOTAMapLocationState::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSODOTAMapLocationState::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CSODOTAMapLocationState::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSODOTAMapLocationState::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
 ::google::protobuf::uint32 CSODOTAMapLocationState::account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAMapLocationState.account_id)
  return account_id_;
}
 void CSODOTAMapLocationState::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAMapLocationState.account_id)
}

// optional int32 location_id = 2;
bool CSODOTAMapLocationState::has_location_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSODOTAMapLocationState::set_has_location_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CSODOTAMapLocationState::clear_has_location_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSODOTAMapLocationState::clear_location_id() {
  location_id_ = 0;
  clear_has_location_id();
}
 ::google::protobuf::int32 CSODOTAMapLocationState::location_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAMapLocationState.location_id)
  return location_id_;
}
 void CSODOTAMapLocationState::set_location_id(::google::protobuf::int32 value) {
  set_has_location_id();
  location_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAMapLocationState.location_id)
}

// optional bool completed = 3;
bool CSODOTAMapLocationState::has_completed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSODOTAMapLocationState::set_has_completed() {
  _has_bits_[0] |= 0x00000004u;
}
void CSODOTAMapLocationState::clear_has_completed() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSODOTAMapLocationState::clear_completed() {
  completed_ = false;
  clear_has_completed();
}
 bool CSODOTAMapLocationState::completed() const {
  // @@protoc_insertion_point(field_get:CSODOTAMapLocationState.completed)
  return completed_;
}
 void CSODOTAMapLocationState::set_completed(bool value) {
  set_has_completed();
  completed_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAMapLocationState.completed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgNexonPartnerUpdate::kMessagetypeFieldNumber;
const int CMsgNexonPartnerUpdate::kTimeremainingFieldNumber;
const int CMsgNexonPartnerUpdate::kTerminateFieldNumber;
#endif  // !_MSC_VER

CMsgNexonPartnerUpdate::CMsgNexonPartnerUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgNexonPartnerUpdate)
}

void CMsgNexonPartnerUpdate::InitAsDefaultInstance() {
}

CMsgNexonPartnerUpdate::CMsgNexonPartnerUpdate(const CMsgNexonPartnerUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgNexonPartnerUpdate)
}

void CMsgNexonPartnerUpdate::SharedCtor() {
  _cached_size_ = 0;
  messagetype_ = 0u;
  timeremaining_ = 0u;
  terminate_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgNexonPartnerUpdate::~CMsgNexonPartnerUpdate() {
  // @@protoc_insertion_point(destructor:CMsgNexonPartnerUpdate)
  SharedDtor();
}

void CMsgNexonPartnerUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgNexonPartnerUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgNexonPartnerUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgNexonPartnerUpdate_descriptor_;
}

const CMsgNexonPartnerUpdate& CMsgNexonPartnerUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgNexonPartnerUpdate* CMsgNexonPartnerUpdate::default_instance_ = NULL;

CMsgNexonPartnerUpdate* CMsgNexonPartnerUpdate::New(::google::protobuf::Arena* arena) const {
  CMsgNexonPartnerUpdate* n = new CMsgNexonPartnerUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgNexonPartnerUpdate::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgNexonPartnerUpdate*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(messagetype_, terminate_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgNexonPartnerUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgNexonPartnerUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 messagetype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &messagetype_)));
          set_has_messagetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timeremaining;
        break;
      }

      // optional uint32 timeremaining = 2;
      case 2: {
        if (tag == 16) {
         parse_timeremaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeremaining_)));
          set_has_timeremaining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_terminate;
        break;
      }

      // optional bool terminate = 3;
      case 3: {
        if (tag == 24) {
         parse_terminate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &terminate_)));
          set_has_terminate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgNexonPartnerUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgNexonPartnerUpdate)
  return false;
#undef DO_
}

void CMsgNexonPartnerUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgNexonPartnerUpdate)
  // optional uint32 messagetype = 1;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->messagetype(), output);
  }

  // optional uint32 timeremaining = 2;
  if (has_timeremaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timeremaining(), output);
  }

  // optional bool terminate = 3;
  if (has_terminate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->terminate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgNexonPartnerUpdate)
}

::google::protobuf::uint8* CMsgNexonPartnerUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgNexonPartnerUpdate)
  // optional uint32 messagetype = 1;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->messagetype(), target);
  }

  // optional uint32 timeremaining = 2;
  if (has_timeremaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timeremaining(), target);
  }

  // optional bool terminate = 3;
  if (has_terminate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->terminate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgNexonPartnerUpdate)
  return target;
}

int CMsgNexonPartnerUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 messagetype = 1;
    if (has_messagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->messagetype());
    }

    // optional uint32 timeremaining = 2;
    if (has_timeremaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeremaining());
    }

    // optional bool terminate = 3;
    if (has_terminate()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgNexonPartnerUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgNexonPartnerUpdate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgNexonPartnerUpdate>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgNexonPartnerUpdate::MergeFrom(const CMsgNexonPartnerUpdate& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
    if (from.has_timeremaining()) {
      set_timeremaining(from.timeremaining());
    }
    if (from.has_terminate()) {
      set_terminate(from.terminate());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgNexonPartnerUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNexonPartnerUpdate::CopyFrom(const CMsgNexonPartnerUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNexonPartnerUpdate::IsInitialized() const {

  return true;
}

void CMsgNexonPartnerUpdate::Swap(CMsgNexonPartnerUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgNexonPartnerUpdate::InternalSwap(CMsgNexonPartnerUpdate* other) {
  std::swap(messagetype_, other->messagetype_);
  std::swap(timeremaining_, other->timeremaining_);
  std::swap(terminate_, other->terminate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgNexonPartnerUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgNexonPartnerUpdate_descriptor_;
  metadata.reflection = CMsgNexonPartnerUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgNexonPartnerUpdate

// optional uint32 messagetype = 1;
bool CMsgNexonPartnerUpdate::has_messagetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgNexonPartnerUpdate::set_has_messagetype() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgNexonPartnerUpdate::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgNexonPartnerUpdate::clear_messagetype() {
  messagetype_ = 0u;
  clear_has_messagetype();
}
 ::google::protobuf::uint32 CMsgNexonPartnerUpdate::messagetype() const {
  // @@protoc_insertion_point(field_get:CMsgNexonPartnerUpdate.messagetype)
  return messagetype_;
}
 void CMsgNexonPartnerUpdate::set_messagetype(::google::protobuf::uint32 value) {
  set_has_messagetype();
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:CMsgNexonPartnerUpdate.messagetype)
}

// optional uint32 timeremaining = 2;
bool CMsgNexonPartnerUpdate::has_timeremaining() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgNexonPartnerUpdate::set_has_timeremaining() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgNexonPartnerUpdate::clear_has_timeremaining() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgNexonPartnerUpdate::clear_timeremaining() {
  timeremaining_ = 0u;
  clear_has_timeremaining();
}
 ::google::protobuf::uint32 CMsgNexonPartnerUpdate::timeremaining() const {
  // @@protoc_insertion_point(field_get:CMsgNexonPartnerUpdate.timeremaining)
  return timeremaining_;
}
 void CMsgNexonPartnerUpdate::set_timeremaining(::google::protobuf::uint32 value) {
  set_has_timeremaining();
  timeremaining_ = value;
  // @@protoc_insertion_point(field_set:CMsgNexonPartnerUpdate.timeremaining)
}

// optional bool terminate = 3;
bool CMsgNexonPartnerUpdate::has_terminate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgNexonPartnerUpdate::set_has_terminate() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgNexonPartnerUpdate::clear_has_terminate() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgNexonPartnerUpdate::clear_terminate() {
  terminate_ = false;
  clear_has_terminate();
}
 bool CMsgNexonPartnerUpdate::terminate() const {
  // @@protoc_insertion_point(field_get:CMsgNexonPartnerUpdate.terminate)
  return terminate_;
}
 void CMsgNexonPartnerUpdate::set_terminate(bool value) {
  set_has_terminate();
  terminate_ = value;
  // @@protoc_insertion_point(field_set:CMsgNexonPartnerUpdate.terminate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgMakeOffering::kItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgMakeOffering::CMsgMakeOffering()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgMakeOffering)
}

void CMsgMakeOffering::InitAsDefaultInstance() {
}

CMsgMakeOffering::CMsgMakeOffering(const CMsgMakeOffering& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgMakeOffering)
}

void CMsgMakeOffering::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgMakeOffering::~CMsgMakeOffering() {
  // @@protoc_insertion_point(destructor:CMsgMakeOffering)
  SharedDtor();
}

void CMsgMakeOffering::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgMakeOffering::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMakeOffering::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgMakeOffering_descriptor_;
}

const CMsgMakeOffering& CMsgMakeOffering::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgMakeOffering* CMsgMakeOffering::default_instance_ = NULL;

CMsgMakeOffering* CMsgMakeOffering::New(::google::protobuf::Arena* arena) const {
  CMsgMakeOffering* n = new CMsgMakeOffering;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgMakeOffering::Clear() {
  item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgMakeOffering::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgMakeOffering)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgMakeOffering)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgMakeOffering)
  return false;
#undef DO_
}

void CMsgMakeOffering::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgMakeOffering)
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgMakeOffering)
}

::google::protobuf::uint8* CMsgMakeOffering::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMakeOffering)
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMakeOffering)
  return target;
}

int CMsgMakeOffering::ByteSize() const {
  int total_size = 0;

  // optional uint64 item_id = 1;
  if (has_item_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->item_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMakeOffering::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgMakeOffering* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgMakeOffering>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgMakeOffering::MergeFrom(const CMsgMakeOffering& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgMakeOffering::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMakeOffering::CopyFrom(const CMsgMakeOffering& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMakeOffering::IsInitialized() const {

  return true;
}

void CMsgMakeOffering::Swap(CMsgMakeOffering* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMakeOffering::InternalSwap(CMsgMakeOffering* other) {
  std::swap(item_id_, other->item_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgMakeOffering::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgMakeOffering_descriptor_;
  metadata.reflection = CMsgMakeOffering_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgMakeOffering

// optional uint64 item_id = 1;
bool CMsgMakeOffering::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgMakeOffering::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgMakeOffering::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgMakeOffering::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
 ::google::protobuf::uint64 CMsgMakeOffering::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgMakeOffering.item_id)
  return item_id_;
}
 void CMsgMakeOffering::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgMakeOffering.item_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgRequestOfferings::CMsgRequestOfferings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgRequestOfferings)
}

void CMsgRequestOfferings::InitAsDefaultInstance() {
}

CMsgRequestOfferings::CMsgRequestOfferings(const CMsgRequestOfferings& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgRequestOfferings)
}

void CMsgRequestOfferings::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRequestOfferings::~CMsgRequestOfferings() {
  // @@protoc_insertion_point(destructor:CMsgRequestOfferings)
  SharedDtor();
}

void CMsgRequestOfferings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgRequestOfferings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRequestOfferings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRequestOfferings_descriptor_;
}

const CMsgRequestOfferings& CMsgRequestOfferings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgRequestOfferings* CMsgRequestOfferings::default_instance_ = NULL;

CMsgRequestOfferings* CMsgRequestOfferings::New(::google::protobuf::Arena* arena) const {
  CMsgRequestOfferings* n = new CMsgRequestOfferings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRequestOfferings::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgRequestOfferings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgRequestOfferings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgRequestOfferings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgRequestOfferings)
  return false;
#undef DO_
}

void CMsgRequestOfferings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgRequestOfferings)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgRequestOfferings)
}

::google::protobuf::uint8* CMsgRequestOfferings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRequestOfferings)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRequestOfferings)
  return target;
}

int CMsgRequestOfferings::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRequestOfferings::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgRequestOfferings* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRequestOfferings>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRequestOfferings::MergeFrom(const CMsgRequestOfferings& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgRequestOfferings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestOfferings::CopyFrom(const CMsgRequestOfferings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestOfferings::IsInitialized() const {

  return true;
}

void CMsgRequestOfferings::Swap(CMsgRequestOfferings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRequestOfferings::InternalSwap(CMsgRequestOfferings* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRequestOfferings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRequestOfferings_descriptor_;
  metadata.reflection = CMsgRequestOfferings_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRequestOfferings

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgRequestOfferingsResponse_NewYearsOffering::kDefIndexFieldNumber;
const int CMsgRequestOfferingsResponse_NewYearsOffering::kItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgRequestOfferingsResponse_NewYearsOffering::CMsgRequestOfferingsResponse_NewYearsOffering()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgRequestOfferingsResponse.NewYearsOffering)
}

void CMsgRequestOfferingsResponse_NewYearsOffering::InitAsDefaultInstance() {
}

CMsgRequestOfferingsResponse_NewYearsOffering::CMsgRequestOfferingsResponse_NewYearsOffering(const CMsgRequestOfferingsResponse_NewYearsOffering& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgRequestOfferingsResponse.NewYearsOffering)
}

void CMsgRequestOfferingsResponse_NewYearsOffering::SharedCtor() {
  _cached_size_ = 0;
  def_index_ = 0u;
  item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRequestOfferingsResponse_NewYearsOffering::~CMsgRequestOfferingsResponse_NewYearsOffering() {
  // @@protoc_insertion_point(destructor:CMsgRequestOfferingsResponse.NewYearsOffering)
  SharedDtor();
}

void CMsgRequestOfferingsResponse_NewYearsOffering::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgRequestOfferingsResponse_NewYearsOffering::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRequestOfferingsResponse_NewYearsOffering::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRequestOfferingsResponse_NewYearsOffering_descriptor_;
}

const CMsgRequestOfferingsResponse_NewYearsOffering& CMsgRequestOfferingsResponse_NewYearsOffering::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgRequestOfferingsResponse_NewYearsOffering* CMsgRequestOfferingsResponse_NewYearsOffering::default_instance_ = NULL;

CMsgRequestOfferingsResponse_NewYearsOffering* CMsgRequestOfferingsResponse_NewYearsOffering::New(::google::protobuf::Arena* arena) const {
  CMsgRequestOfferingsResponse_NewYearsOffering* n = new CMsgRequestOfferingsResponse_NewYearsOffering;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRequestOfferingsResponse_NewYearsOffering::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgRequestOfferingsResponse_NewYearsOffering*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(item_id_, def_index_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgRequestOfferingsResponse_NewYearsOffering::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgRequestOfferingsResponse.NewYearsOffering)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 def_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
          set_has_def_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional uint64 item_id = 2;
      case 2: {
        if (tag == 16) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgRequestOfferingsResponse.NewYearsOffering)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgRequestOfferingsResponse.NewYearsOffering)
  return false;
#undef DO_
}

void CMsgRequestOfferingsResponse_NewYearsOffering::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgRequestOfferingsResponse.NewYearsOffering)
  // optional uint32 def_index = 1;
  if (has_def_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->def_index(), output);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgRequestOfferingsResponse.NewYearsOffering)
}

::google::protobuf::uint8* CMsgRequestOfferingsResponse_NewYearsOffering::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRequestOfferingsResponse.NewYearsOffering)
  // optional uint32 def_index = 1;
  if (has_def_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->def_index(), target);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRequestOfferingsResponse.NewYearsOffering)
  return target;
}

int CMsgRequestOfferingsResponse_NewYearsOffering::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 def_index = 1;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }

    // optional uint64 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRequestOfferingsResponse_NewYearsOffering::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgRequestOfferingsResponse_NewYearsOffering* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRequestOfferingsResponse_NewYearsOffering>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRequestOfferingsResponse_NewYearsOffering::MergeFrom(const CMsgRequestOfferingsResponse_NewYearsOffering& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_def_index()) {
      set_def_index(from.def_index());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgRequestOfferingsResponse_NewYearsOffering::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestOfferingsResponse_NewYearsOffering::CopyFrom(const CMsgRequestOfferingsResponse_NewYearsOffering& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestOfferingsResponse_NewYearsOffering::IsInitialized() const {

  return true;
}

void CMsgRequestOfferingsResponse_NewYearsOffering::Swap(CMsgRequestOfferingsResponse_NewYearsOffering* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRequestOfferingsResponse_NewYearsOffering::InternalSwap(CMsgRequestOfferingsResponse_NewYearsOffering* other) {
  std::swap(def_index_, other->def_index_);
  std::swap(item_id_, other->item_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRequestOfferingsResponse_NewYearsOffering::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRequestOfferingsResponse_NewYearsOffering_descriptor_;
  metadata.reflection = CMsgRequestOfferingsResponse_NewYearsOffering_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgRequestOfferingsResponse::kOfferingsFieldNumber;
const int CMsgRequestOfferingsResponse::kCompletedFieldNumber;
#endif  // !_MSC_VER

CMsgRequestOfferingsResponse::CMsgRequestOfferingsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgRequestOfferingsResponse)
}

void CMsgRequestOfferingsResponse::InitAsDefaultInstance() {
}

CMsgRequestOfferingsResponse::CMsgRequestOfferingsResponse(const CMsgRequestOfferingsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgRequestOfferingsResponse)
}

void CMsgRequestOfferingsResponse::SharedCtor() {
  _cached_size_ = 0;
  completed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRequestOfferingsResponse::~CMsgRequestOfferingsResponse() {
  // @@protoc_insertion_point(destructor:CMsgRequestOfferingsResponse)
  SharedDtor();
}

void CMsgRequestOfferingsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgRequestOfferingsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRequestOfferingsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRequestOfferingsResponse_descriptor_;
}

const CMsgRequestOfferingsResponse& CMsgRequestOfferingsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgRequestOfferingsResponse* CMsgRequestOfferingsResponse::default_instance_ = NULL;

CMsgRequestOfferingsResponse* CMsgRequestOfferingsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgRequestOfferingsResponse* n = new CMsgRequestOfferingsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRequestOfferingsResponse::Clear() {
  completed_ = false;
  offerings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgRequestOfferingsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgRequestOfferingsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgRequestOfferingsResponse.NewYearsOffering offerings = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_offerings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_offerings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_offerings;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_completed;
        break;
      }

      // optional bool completed = 2;
      case 2: {
        if (tag == 16) {
         parse_completed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &completed_)));
          set_has_completed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgRequestOfferingsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgRequestOfferingsResponse)
  return false;
#undef DO_
}

void CMsgRequestOfferingsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgRequestOfferingsResponse)
  // repeated .CMsgRequestOfferingsResponse.NewYearsOffering offerings = 1;
  for (unsigned int i = 0, n = this->offerings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->offerings(i), output);
  }

  // optional bool completed = 2;
  if (has_completed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->completed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgRequestOfferingsResponse)
}

::google::protobuf::uint8* CMsgRequestOfferingsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRequestOfferingsResponse)
  // repeated .CMsgRequestOfferingsResponse.NewYearsOffering offerings = 1;
  for (unsigned int i = 0, n = this->offerings_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->offerings(i), target);
  }

  // optional bool completed = 2;
  if (has_completed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->completed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRequestOfferingsResponse)
  return target;
}

int CMsgRequestOfferingsResponse::ByteSize() const {
  int total_size = 0;

  // optional bool completed = 2;
  if (has_completed()) {
    total_size += 1 + 1;
  }

  // repeated .CMsgRequestOfferingsResponse.NewYearsOffering offerings = 1;
  total_size += 1 * this->offerings_size();
  for (int i = 0; i < this->offerings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->offerings(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRequestOfferingsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgRequestOfferingsResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRequestOfferingsResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRequestOfferingsResponse::MergeFrom(const CMsgRequestOfferingsResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  offerings_.MergeFrom(from.offerings_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_completed()) {
      set_completed(from.completed());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgRequestOfferingsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestOfferingsResponse::CopyFrom(const CMsgRequestOfferingsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestOfferingsResponse::IsInitialized() const {

  return true;
}

void CMsgRequestOfferingsResponse::Swap(CMsgRequestOfferingsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRequestOfferingsResponse::InternalSwap(CMsgRequestOfferingsResponse* other) {
  offerings_.UnsafeArenaSwap(&other->offerings_);
  std::swap(completed_, other->completed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRequestOfferingsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRequestOfferingsResponse_descriptor_;
  metadata.reflection = CMsgRequestOfferingsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRequestOfferingsResponse_NewYearsOffering

// optional uint32 def_index = 1;
bool CMsgRequestOfferingsResponse_NewYearsOffering::has_def_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRequestOfferingsResponse_NewYearsOffering::set_has_def_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRequestOfferingsResponse_NewYearsOffering::clear_has_def_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRequestOfferingsResponse_NewYearsOffering::clear_def_index() {
  def_index_ = 0u;
  clear_has_def_index();
}
 ::google::protobuf::uint32 CMsgRequestOfferingsResponse_NewYearsOffering::def_index() const {
  // @@protoc_insertion_point(field_get:CMsgRequestOfferingsResponse.NewYearsOffering.def_index)
  return def_index_;
}
 void CMsgRequestOfferingsResponse_NewYearsOffering::set_def_index(::google::protobuf::uint32 value) {
  set_has_def_index();
  def_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgRequestOfferingsResponse.NewYearsOffering.def_index)
}

// optional uint64 item_id = 2;
bool CMsgRequestOfferingsResponse_NewYearsOffering::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgRequestOfferingsResponse_NewYearsOffering::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgRequestOfferingsResponse_NewYearsOffering::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgRequestOfferingsResponse_NewYearsOffering::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
 ::google::protobuf::uint64 CMsgRequestOfferingsResponse_NewYearsOffering::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgRequestOfferingsResponse.NewYearsOffering.item_id)
  return item_id_;
}
 void CMsgRequestOfferingsResponse_NewYearsOffering::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgRequestOfferingsResponse.NewYearsOffering.item_id)
}

// -------------------------------------------------------------------

// CMsgRequestOfferingsResponse

// repeated .CMsgRequestOfferingsResponse.NewYearsOffering offerings = 1;
int CMsgRequestOfferingsResponse::offerings_size() const {
  return offerings_.size();
}
void CMsgRequestOfferingsResponse::clear_offerings() {
  offerings_.Clear();
}
const ::CMsgRequestOfferingsResponse_NewYearsOffering& CMsgRequestOfferingsResponse::offerings(int index) const {
  // @@protoc_insertion_point(field_get:CMsgRequestOfferingsResponse.offerings)
  return offerings_.Get(index);
}
::CMsgRequestOfferingsResponse_NewYearsOffering* CMsgRequestOfferingsResponse::mutable_offerings(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgRequestOfferingsResponse.offerings)
  return offerings_.Mutable(index);
}
::CMsgRequestOfferingsResponse_NewYearsOffering* CMsgRequestOfferingsResponse::add_offerings() {
  // @@protoc_insertion_point(field_add:CMsgRequestOfferingsResponse.offerings)
  return offerings_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgRequestOfferingsResponse_NewYearsOffering >*
CMsgRequestOfferingsResponse::mutable_offerings() {
  // @@protoc_insertion_point(field_mutable_list:CMsgRequestOfferingsResponse.offerings)
  return &offerings_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgRequestOfferingsResponse_NewYearsOffering >&
CMsgRequestOfferingsResponse::offerings() const {
  // @@protoc_insertion_point(field_list:CMsgRequestOfferingsResponse.offerings)
  return offerings_;
}

// optional bool completed = 2;
bool CMsgRequestOfferingsResponse::has_completed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgRequestOfferingsResponse::set_has_completed() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgRequestOfferingsResponse::clear_has_completed() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgRequestOfferingsResponse::clear_completed() {
  completed_ = false;
  clear_has_completed();
}
 bool CMsgRequestOfferingsResponse::completed() const {
  // @@protoc_insertion_point(field_get:CMsgRequestOfferingsResponse.completed)
  return completed_;
}
 void CMsgRequestOfferingsResponse::set_completed(bool value) {
  set_has_completed();
  completed_ = value;
  // @@protoc_insertion_point(field_set:CMsgRequestOfferingsResponse.completed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgLeagueAdminList::kAccountIdsFieldNumber;
#endif  // !_MSC_VER

CMsgLeagueAdminList::CMsgLeagueAdminList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgLeagueAdminList)
}

void CMsgLeagueAdminList::InitAsDefaultInstance() {
}

CMsgLeagueAdminList::CMsgLeagueAdminList(const CMsgLeagueAdminList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgLeagueAdminList)
}

void CMsgLeagueAdminList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLeagueAdminList::~CMsgLeagueAdminList() {
  // @@protoc_insertion_point(destructor:CMsgLeagueAdminList)
  SharedDtor();
}

void CMsgLeagueAdminList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLeagueAdminList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLeagueAdminList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLeagueAdminList_descriptor_;
}

const CMsgLeagueAdminList& CMsgLeagueAdminList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgLeagueAdminList* CMsgLeagueAdminList::default_instance_ = NULL;

CMsgLeagueAdminList* CMsgLeagueAdminList::New(::google::protobuf::Arena* arena) const {
  CMsgLeagueAdminList* n = new CMsgLeagueAdminList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgLeagueAdminList::Clear() {
  account_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgLeagueAdminList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgLeagueAdminList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (tag == 8) {
         parse_account_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_account_ids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_account_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgLeagueAdminList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgLeagueAdminList)
  return false;
#undef DO_
}

void CMsgLeagueAdminList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgLeagueAdminList)
  // repeated uint32 account_ids = 1;
  for (int i = 0; i < this->account_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->account_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgLeagueAdminList)
}

::google::protobuf::uint8* CMsgLeagueAdminList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLeagueAdminList)
  // repeated uint32 account_ids = 1;
  for (int i = 0; i < this->account_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->account_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLeagueAdminList)
  return target;
}

int CMsgLeagueAdminList::ByteSize() const {
  int total_size = 0;

  // repeated uint32 account_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->account_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->account_ids(i));
    }
    total_size += 1 * this->account_ids_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLeagueAdminList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgLeagueAdminList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgLeagueAdminList>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLeagueAdminList::MergeFrom(const CMsgLeagueAdminList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  account_ids_.MergeFrom(from.account_ids_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgLeagueAdminList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeagueAdminList::CopyFrom(const CMsgLeagueAdminList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeagueAdminList::IsInitialized() const {

  return true;
}

void CMsgLeagueAdminList::Swap(CMsgLeagueAdminList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLeagueAdminList::InternalSwap(CMsgLeagueAdminList* other) {
  account_ids_.UnsafeArenaSwap(&other->account_ids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgLeagueAdminList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLeagueAdminList_descriptor_;
  metadata.reflection = CMsgLeagueAdminList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgLeagueAdminList

// repeated uint32 account_ids = 1;
int CMsgLeagueAdminList::account_ids_size() const {
  return account_ids_.size();
}
void CMsgLeagueAdminList::clear_account_ids() {
  account_ids_.Clear();
}
 ::google::protobuf::uint32 CMsgLeagueAdminList::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgLeagueAdminList.account_ids)
  return account_ids_.Get(index);
}
 void CMsgLeagueAdminList::set_account_ids(int index, ::google::protobuf::uint32 value) {
  account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgLeagueAdminList.account_ids)
}
 void CMsgLeagueAdminList::add_account_ids(::google::protobuf::uint32 value) {
  account_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgLeagueAdminList.account_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgLeagueAdminList::account_ids() const {
  // @@protoc_insertion_point(field_list:CMsgLeagueAdminList.account_ids)
  return account_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgLeagueAdminList::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgLeagueAdminList.account_ids)
  return &account_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgPerfectWorldUserLookupRequest::kUserNameFieldNumber;
#endif  // !_MSC_VER

CMsgPerfectWorldUserLookupRequest::CMsgPerfectWorldUserLookupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPerfectWorldUserLookupRequest)
}

void CMsgPerfectWorldUserLookupRequest::InitAsDefaultInstance() {
}

CMsgPerfectWorldUserLookupRequest::CMsgPerfectWorldUserLookupRequest(const CMsgPerfectWorldUserLookupRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPerfectWorldUserLookupRequest)
}

void CMsgPerfectWorldUserLookupRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPerfectWorldUserLookupRequest::~CMsgPerfectWorldUserLookupRequest() {
  // @@protoc_insertion_point(destructor:CMsgPerfectWorldUserLookupRequest)
  SharedDtor();
}

void CMsgPerfectWorldUserLookupRequest::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgPerfectWorldUserLookupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPerfectWorldUserLookupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPerfectWorldUserLookupRequest_descriptor_;
}

const CMsgPerfectWorldUserLookupRequest& CMsgPerfectWorldUserLookupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgPerfectWorldUserLookupRequest* CMsgPerfectWorldUserLookupRequest::default_instance_ = NULL;

CMsgPerfectWorldUserLookupRequest* CMsgPerfectWorldUserLookupRequest::New(::google::protobuf::Arena* arena) const {
  CMsgPerfectWorldUserLookupRequest* n = new CMsgPerfectWorldUserLookupRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPerfectWorldUserLookupRequest::Clear() {
  if (has_user_name()) {
    user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgPerfectWorldUserLookupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPerfectWorldUserLookupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgPerfectWorldUserLookupRequest.user_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPerfectWorldUserLookupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPerfectWorldUserLookupRequest)
  return false;
#undef DO_
}

void CMsgPerfectWorldUserLookupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPerfectWorldUserLookupRequest)
  // optional string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgPerfectWorldUserLookupRequest.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPerfectWorldUserLookupRequest)
}

::google::protobuf::uint8* CMsgPerfectWorldUserLookupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPerfectWorldUserLookupRequest)
  // optional string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgPerfectWorldUserLookupRequest.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPerfectWorldUserLookupRequest)
  return target;
}

int CMsgPerfectWorldUserLookupRequest::ByteSize() const {
  int total_size = 0;

  // optional string user_name = 1;
  if (has_user_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPerfectWorldUserLookupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgPerfectWorldUserLookupRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPerfectWorldUserLookupRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPerfectWorldUserLookupRequest::MergeFrom(const CMsgPerfectWorldUserLookupRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_has_user_name();
      user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgPerfectWorldUserLookupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPerfectWorldUserLookupRequest::CopyFrom(const CMsgPerfectWorldUserLookupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPerfectWorldUserLookupRequest::IsInitialized() const {

  return true;
}

void CMsgPerfectWorldUserLookupRequest::Swap(CMsgPerfectWorldUserLookupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPerfectWorldUserLookupRequest::InternalSwap(CMsgPerfectWorldUserLookupRequest* other) {
  user_name_.Swap(&other->user_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPerfectWorldUserLookupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPerfectWorldUserLookupRequest_descriptor_;
  metadata.reflection = CMsgPerfectWorldUserLookupRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPerfectWorldUserLookupRequest

// optional string user_name = 1;
bool CMsgPerfectWorldUserLookupRequest::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPerfectWorldUserLookupRequest::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPerfectWorldUserLookupRequest::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPerfectWorldUserLookupRequest::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_name();
}
 const ::std::string& CMsgPerfectWorldUserLookupRequest::user_name() const {
  // @@protoc_insertion_point(field_get:CMsgPerfectWorldUserLookupRequest.user_name)
  return user_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgPerfectWorldUserLookupRequest::set_user_name(const ::std::string& value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgPerfectWorldUserLookupRequest.user_name)
}
 void CMsgPerfectWorldUserLookupRequest::set_user_name(const char* value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgPerfectWorldUserLookupRequest.user_name)
}
 void CMsgPerfectWorldUserLookupRequest::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgPerfectWorldUserLookupRequest.user_name)
}
 ::std::string* CMsgPerfectWorldUserLookupRequest::mutable_user_name() {
  set_has_user_name();
  // @@protoc_insertion_point(field_mutable:CMsgPerfectWorldUserLookupRequest.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgPerfectWorldUserLookupRequest::release_user_name() {
  clear_has_user_name();
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgPerfectWorldUserLookupRequest::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    set_has_user_name();
  } else {
    clear_has_user_name();
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgPerfectWorldUserLookupRequest.user_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgPerfectWorldUserLookupResponse_EResultCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPerfectWorldUserLookupResponse_EResultCode_descriptor_;
}
bool CMsgPerfectWorldUserLookupResponse_EResultCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgPerfectWorldUserLookupResponse_EResultCode CMsgPerfectWorldUserLookupResponse::SUCCESS_ACCOUNT_FOUND;
const CMsgPerfectWorldUserLookupResponse_EResultCode CMsgPerfectWorldUserLookupResponse::ERROR_UNKNOWN;
const CMsgPerfectWorldUserLookupResponse_EResultCode CMsgPerfectWorldUserLookupResponse::ERROR_USER_NAME_WRONG_FORMAT;
const CMsgPerfectWorldUserLookupResponse_EResultCode CMsgPerfectWorldUserLookupResponse::ERROR_NO_PERFECT_WORLD_ACCOUNT_FOUND;
const CMsgPerfectWorldUserLookupResponse_EResultCode CMsgPerfectWorldUserLookupResponse::ERROR_NO_LINKED_STEAM_ACCOUNT_FOUND;
const CMsgPerfectWorldUserLookupResponse_EResultCode CMsgPerfectWorldUserLookupResponse::EResultCode_MIN;
const CMsgPerfectWorldUserLookupResponse_EResultCode CMsgPerfectWorldUserLookupResponse::EResultCode_MAX;
const int CMsgPerfectWorldUserLookupResponse::EResultCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgPerfectWorldUserLookupResponse::kResultCodeFieldNumber;
const int CMsgPerfectWorldUserLookupResponse::kAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgPerfectWorldUserLookupResponse::CMsgPerfectWorldUserLookupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPerfectWorldUserLookupResponse)
}

void CMsgPerfectWorldUserLookupResponse::InitAsDefaultInstance() {
}

CMsgPerfectWorldUserLookupResponse::CMsgPerfectWorldUserLookupResponse(const CMsgPerfectWorldUserLookupResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPerfectWorldUserLookupResponse)
}

void CMsgPerfectWorldUserLookupResponse::SharedCtor() {
  _cached_size_ = 0;
  result_code_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPerfectWorldUserLookupResponse::~CMsgPerfectWorldUserLookupResponse() {
  // @@protoc_insertion_point(destructor:CMsgPerfectWorldUserLookupResponse)
  SharedDtor();
}

void CMsgPerfectWorldUserLookupResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPerfectWorldUserLookupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPerfectWorldUserLookupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPerfectWorldUserLookupResponse_descriptor_;
}

const CMsgPerfectWorldUserLookupResponse& CMsgPerfectWorldUserLookupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgPerfectWorldUserLookupResponse* CMsgPerfectWorldUserLookupResponse::default_instance_ = NULL;

CMsgPerfectWorldUserLookupResponse* CMsgPerfectWorldUserLookupResponse::New(::google::protobuf::Arena* arena) const {
  CMsgPerfectWorldUserLookupResponse* n = new CMsgPerfectWorldUserLookupResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPerfectWorldUserLookupResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgPerfectWorldUserLookupResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(result_code_, account_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgPerfectWorldUserLookupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPerfectWorldUserLookupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgPerfectWorldUserLookupResponse.EResultCode result_code = 1 [default = SUCCESS_ACCOUNT_FOUND];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgPerfectWorldUserLookupResponse_EResultCode_IsValid(value)) {
            set_result_code(static_cast< ::CMsgPerfectWorldUserLookupResponse_EResultCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }

      // optional uint32 account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPerfectWorldUserLookupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPerfectWorldUserLookupResponse)
  return false;
#undef DO_
}

void CMsgPerfectWorldUserLookupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPerfectWorldUserLookupResponse)
  // optional .CMsgPerfectWorldUserLookupResponse.EResultCode result_code = 1 [default = SUCCESS_ACCOUNT_FOUND];
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result_code(), output);
  }

  // optional uint32 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPerfectWorldUserLookupResponse)
}

::google::protobuf::uint8* CMsgPerfectWorldUserLookupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPerfectWorldUserLookupResponse)
  // optional .CMsgPerfectWorldUserLookupResponse.EResultCode result_code = 1 [default = SUCCESS_ACCOUNT_FOUND];
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result_code(), target);
  }

  // optional uint32 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPerfectWorldUserLookupResponse)
  return target;
}

int CMsgPerfectWorldUserLookupResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .CMsgPerfectWorldUserLookupResponse.EResultCode result_code = 1 [default = SUCCESS_ACCOUNT_FOUND];
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
    }

    // optional uint32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPerfectWorldUserLookupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgPerfectWorldUserLookupResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPerfectWorldUserLookupResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPerfectWorldUserLookupResponse::MergeFrom(const CMsgPerfectWorldUserLookupResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgPerfectWorldUserLookupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPerfectWorldUserLookupResponse::CopyFrom(const CMsgPerfectWorldUserLookupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPerfectWorldUserLookupResponse::IsInitialized() const {

  return true;
}

void CMsgPerfectWorldUserLookupResponse::Swap(CMsgPerfectWorldUserLookupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPerfectWorldUserLookupResponse::InternalSwap(CMsgPerfectWorldUserLookupResponse* other) {
  std::swap(result_code_, other->result_code_);
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPerfectWorldUserLookupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPerfectWorldUserLookupResponse_descriptor_;
  metadata.reflection = CMsgPerfectWorldUserLookupResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPerfectWorldUserLookupResponse

// optional .CMsgPerfectWorldUserLookupResponse.EResultCode result_code = 1 [default = SUCCESS_ACCOUNT_FOUND];
bool CMsgPerfectWorldUserLookupResponse::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPerfectWorldUserLookupResponse::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPerfectWorldUserLookupResponse::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPerfectWorldUserLookupResponse::clear_result_code() {
  result_code_ = 0;
  clear_has_result_code();
}
 ::CMsgPerfectWorldUserLookupResponse_EResultCode CMsgPerfectWorldUserLookupResponse::result_code() const {
  // @@protoc_insertion_point(field_get:CMsgPerfectWorldUserLookupResponse.result_code)
  return static_cast< ::CMsgPerfectWorldUserLookupResponse_EResultCode >(result_code_);
}
 void CMsgPerfectWorldUserLookupResponse::set_result_code(::CMsgPerfectWorldUserLookupResponse_EResultCode value) {
  assert(::CMsgPerfectWorldUserLookupResponse_EResultCode_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:CMsgPerfectWorldUserLookupResponse.result_code)
}

// optional uint32 account_id = 2;
bool CMsgPerfectWorldUserLookupResponse::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgPerfectWorldUserLookupResponse::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgPerfectWorldUserLookupResponse::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgPerfectWorldUserLookupResponse::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
 ::google::protobuf::uint32 CMsgPerfectWorldUserLookupResponse::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgPerfectWorldUserLookupResponse.account_id)
  return account_id_;
}
 void CMsgPerfectWorldUserLookupResponse::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPerfectWorldUserLookupResponse.account_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CCompendiumTimestampedData::kGameTimeFieldNumber;
const int CCompendiumTimestampedData::kGpmFieldNumber;
const int CCompendiumTimestampedData::kXpmFieldNumber;
const int CCompendiumTimestampedData::kKillsFieldNumber;
const int CCompendiumTimestampedData::kDeathsFieldNumber;
const int CCompendiumTimestampedData::kItemPurchasesFieldNumber;
#endif  // !_MSC_VER

CCompendiumTimestampedData::CCompendiumTimestampedData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCompendiumTimestampedData)
}

void CCompendiumTimestampedData::InitAsDefaultInstance() {
}

CCompendiumTimestampedData::CCompendiumTimestampedData(const CCompendiumTimestampedData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CCompendiumTimestampedData)
}

void CCompendiumTimestampedData::SharedCtor() {
  _cached_size_ = 0;
  game_time_ = 0u;
  gpm_ = 0u;
  xpm_ = 0u;
  kills_ = 0u;
  deaths_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCompendiumTimestampedData::~CCompendiumTimestampedData() {
  // @@protoc_insertion_point(destructor:CCompendiumTimestampedData)
  SharedDtor();
}

void CCompendiumTimestampedData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCompendiumTimestampedData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCompendiumTimestampedData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCompendiumTimestampedData_descriptor_;
}

const CCompendiumTimestampedData& CCompendiumTimestampedData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CCompendiumTimestampedData* CCompendiumTimestampedData::default_instance_ = NULL;

CCompendiumTimestampedData* CCompendiumTimestampedData::New(::google::protobuf::Arena* arena) const {
  CCompendiumTimestampedData* n = new CCompendiumTimestampedData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCompendiumTimestampedData::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CCompendiumTimestampedData*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(game_time_, kills_);
    deaths_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  item_purchases_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CCompendiumTimestampedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCompendiumTimestampedData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_time_)));
          set_has_game_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gpm;
        break;
      }

      // optional uint32 gpm = 2;
      case 2: {
        if (tag == 16) {
         parse_gpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpm_)));
          set_has_gpm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_xpm;
        break;
      }

      // optional uint32 xpm = 3;
      case 3: {
        if (tag == 24) {
         parse_xpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xpm_)));
          set_has_xpm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_kills;
        break;
      }

      // optional uint32 kills = 4;
      case 4: {
        if (tag == 32) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
          set_has_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_deaths;
        break;
      }

      // optional uint32 deaths = 5;
      case 5: {
        if (tag == 40) {
         parse_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
          set_has_deaths();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_item_purchases;
        break;
      }

      // repeated uint32 item_purchases = 6;
      case 6: {
        if (tag == 48) {
         parse_item_purchases:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_item_purchases())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_item_purchases())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_item_purchases;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCompendiumTimestampedData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCompendiumTimestampedData)
  return false;
#undef DO_
}

void CCompendiumTimestampedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCompendiumTimestampedData)
  // optional uint32 game_time = 1;
  if (has_game_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_time(), output);
  }

  // optional uint32 gpm = 2;
  if (has_gpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gpm(), output);
  }

  // optional uint32 xpm = 3;
  if (has_xpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->xpm(), output);
  }

  // optional uint32 kills = 4;
  if (has_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->kills(), output);
  }

  // optional uint32 deaths = 5;
  if (has_deaths()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->deaths(), output);
  }

  // repeated uint32 item_purchases = 6;
  for (int i = 0; i < this->item_purchases_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->item_purchases(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCompendiumTimestampedData)
}

::google::protobuf::uint8* CCompendiumTimestampedData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCompendiumTimestampedData)
  // optional uint32 game_time = 1;
  if (has_game_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_time(), target);
  }

  // optional uint32 gpm = 2;
  if (has_gpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gpm(), target);
  }

  // optional uint32 xpm = 3;
  if (has_xpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->xpm(), target);
  }

  // optional uint32 kills = 4;
  if (has_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->kills(), target);
  }

  // optional uint32 deaths = 5;
  if (has_deaths()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->deaths(), target);
  }

  // repeated uint32 item_purchases = 6;
  for (int i = 0; i < this->item_purchases_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->item_purchases(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCompendiumTimestampedData)
  return target;
}

int CCompendiumTimestampedData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 game_time = 1;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_time());
    }

    // optional uint32 gpm = 2;
    if (has_gpm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gpm());
    }

    // optional uint32 xpm = 3;
    if (has_xpm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xpm());
    }

    // optional uint32 kills = 4;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 5;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

  }
  // repeated uint32 item_purchases = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_purchases_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->item_purchases(i));
    }
    total_size += 1 * this->item_purchases_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCompendiumTimestampedData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CCompendiumTimestampedData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CCompendiumTimestampedData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCompendiumTimestampedData::MergeFrom(const CCompendiumTimestampedData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  item_purchases_.MergeFrom(from.item_purchases_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_time()) {
      set_game_time(from.game_time());
    }
    if (from.has_gpm()) {
      set_gpm(from.gpm());
    }
    if (from.has_xpm()) {
      set_xpm(from.xpm());
    }
    if (from.has_kills()) {
      set_kills(from.kills());
    }
    if (from.has_deaths()) {
      set_deaths(from.deaths());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CCompendiumTimestampedData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCompendiumTimestampedData::CopyFrom(const CCompendiumTimestampedData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCompendiumTimestampedData::IsInitialized() const {

  return true;
}

void CCompendiumTimestampedData::Swap(CCompendiumTimestampedData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCompendiumTimestampedData::InternalSwap(CCompendiumTimestampedData* other) {
  std::swap(game_time_, other->game_time_);
  std::swap(gpm_, other->gpm_);
  std::swap(xpm_, other->xpm_);
  std::swap(kills_, other->kills_);
  std::swap(deaths_, other->deaths_);
  item_purchases_.UnsafeArenaSwap(&other->item_purchases_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCompendiumTimestampedData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCompendiumTimestampedData_descriptor_;
  metadata.reflection = CCompendiumTimestampedData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCompendiumTimestampedData

// optional uint32 game_time = 1;
bool CCompendiumTimestampedData::has_game_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCompendiumTimestampedData::set_has_game_time() {
  _has_bits_[0] |= 0x00000001u;
}
void CCompendiumTimestampedData::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCompendiumTimestampedData::clear_game_time() {
  game_time_ = 0u;
  clear_has_game_time();
}
 ::google::protobuf::uint32 CCompendiumTimestampedData::game_time() const {
  // @@protoc_insertion_point(field_get:CCompendiumTimestampedData.game_time)
  return game_time_;
}
 void CCompendiumTimestampedData::set_game_time(::google::protobuf::uint32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:CCompendiumTimestampedData.game_time)
}

// optional uint32 gpm = 2;
bool CCompendiumTimestampedData::has_gpm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCompendiumTimestampedData::set_has_gpm() {
  _has_bits_[0] |= 0x00000002u;
}
void CCompendiumTimestampedData::clear_has_gpm() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCompendiumTimestampedData::clear_gpm() {
  gpm_ = 0u;
  clear_has_gpm();
}
 ::google::protobuf::uint32 CCompendiumTimestampedData::gpm() const {
  // @@protoc_insertion_point(field_get:CCompendiumTimestampedData.gpm)
  return gpm_;
}
 void CCompendiumTimestampedData::set_gpm(::google::protobuf::uint32 value) {
  set_has_gpm();
  gpm_ = value;
  // @@protoc_insertion_point(field_set:CCompendiumTimestampedData.gpm)
}

// optional uint32 xpm = 3;
bool CCompendiumTimestampedData::has_xpm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CCompendiumTimestampedData::set_has_xpm() {
  _has_bits_[0] |= 0x00000004u;
}
void CCompendiumTimestampedData::clear_has_xpm() {
  _has_bits_[0] &= ~0x00000004u;
}
void CCompendiumTimestampedData::clear_xpm() {
  xpm_ = 0u;
  clear_has_xpm();
}
 ::google::protobuf::uint32 CCompendiumTimestampedData::xpm() const {
  // @@protoc_insertion_point(field_get:CCompendiumTimestampedData.xpm)
  return xpm_;
}
 void CCompendiumTimestampedData::set_xpm(::google::protobuf::uint32 value) {
  set_has_xpm();
  xpm_ = value;
  // @@protoc_insertion_point(field_set:CCompendiumTimestampedData.xpm)
}

// optional uint32 kills = 4;
bool CCompendiumTimestampedData::has_kills() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CCompendiumTimestampedData::set_has_kills() {
  _has_bits_[0] |= 0x00000008u;
}
void CCompendiumTimestampedData::clear_has_kills() {
  _has_bits_[0] &= ~0x00000008u;
}
void CCompendiumTimestampedData::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
 ::google::protobuf::uint32 CCompendiumTimestampedData::kills() const {
  // @@protoc_insertion_point(field_get:CCompendiumTimestampedData.kills)
  return kills_;
}
 void CCompendiumTimestampedData::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:CCompendiumTimestampedData.kills)
}

// optional uint32 deaths = 5;
bool CCompendiumTimestampedData::has_deaths() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CCompendiumTimestampedData::set_has_deaths() {
  _has_bits_[0] |= 0x00000010u;
}
void CCompendiumTimestampedData::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000010u;
}
void CCompendiumTimestampedData::clear_deaths() {
  deaths_ = 0u;
  clear_has_deaths();
}
 ::google::protobuf::uint32 CCompendiumTimestampedData::deaths() const {
  // @@protoc_insertion_point(field_get:CCompendiumTimestampedData.deaths)
  return deaths_;
}
 void CCompendiumTimestampedData::set_deaths(::google::protobuf::uint32 value) {
  set_has_deaths();
  deaths_ = value;
  // @@protoc_insertion_point(field_set:CCompendiumTimestampedData.deaths)
}

// repeated uint32 item_purchases = 6;
int CCompendiumTimestampedData::item_purchases_size() const {
  return item_purchases_.size();
}
void CCompendiumTimestampedData::clear_item_purchases() {
  item_purchases_.Clear();
}
 ::google::protobuf::uint32 CCompendiumTimestampedData::item_purchases(int index) const {
  // @@protoc_insertion_point(field_get:CCompendiumTimestampedData.item_purchases)
  return item_purchases_.Get(index);
}
 void CCompendiumTimestampedData::set_item_purchases(int index, ::google::protobuf::uint32 value) {
  item_purchases_.Set(index, value);
  // @@protoc_insertion_point(field_set:CCompendiumTimestampedData.item_purchases)
}
 void CCompendiumTimestampedData::add_item_purchases(::google::protobuf::uint32 value) {
  item_purchases_.Add(value);
  // @@protoc_insertion_point(field_add:CCompendiumTimestampedData.item_purchases)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CCompendiumTimestampedData::item_purchases() const {
  // @@protoc_insertion_point(field_list:CCompendiumTimestampedData.item_purchases)
  return item_purchases_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CCompendiumTimestampedData::mutable_item_purchases() {
  // @@protoc_insertion_point(field_mutable_list:CCompendiumTimestampedData.item_purchases)
  return &item_purchases_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CCompendiumGameTimeline::kDataFieldNumber;
const int CCompendiumGameTimeline::kTagsFieldNumber;
#endif  // !_MSC_VER

CCompendiumGameTimeline::CCompendiumGameTimeline()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCompendiumGameTimeline)
}

void CCompendiumGameTimeline::InitAsDefaultInstance() {
}

CCompendiumGameTimeline::CCompendiumGameTimeline(const CCompendiumGameTimeline& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CCompendiumGameTimeline)
}

void CCompendiumGameTimeline::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCompendiumGameTimeline::~CCompendiumGameTimeline() {
  // @@protoc_insertion_point(destructor:CCompendiumGameTimeline)
  SharedDtor();
}

void CCompendiumGameTimeline::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCompendiumGameTimeline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCompendiumGameTimeline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCompendiumGameTimeline_descriptor_;
}

const CCompendiumGameTimeline& CCompendiumGameTimeline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CCompendiumGameTimeline* CCompendiumGameTimeline::default_instance_ = NULL;

CCompendiumGameTimeline* CCompendiumGameTimeline::New(::google::protobuf::Arena* arena) const {
  CCompendiumGameTimeline* n = new CCompendiumGameTimeline;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCompendiumGameTimeline::Clear() {
  data_.Clear();
  tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CCompendiumGameTimeline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCompendiumGameTimeline)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CCompendiumTimestampedData data = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_tags;
        break;
      }

      // repeated string tags = 2;
      case 2: {
        if (tag == 18) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCompendiumGameTimeline.tags");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tags;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCompendiumGameTimeline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCompendiumGameTimeline)
  return false;
#undef DO_
}

void CCompendiumGameTimeline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCompendiumGameTimeline)
  // repeated .CCompendiumTimestampedData data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // repeated string tags = 2;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCompendiumGameTimeline.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tags(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCompendiumGameTimeline)
}

::google::protobuf::uint8* CCompendiumGameTimeline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCompendiumGameTimeline)
  // repeated .CCompendiumTimestampedData data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // repeated string tags = 2;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCompendiumGameTimeline.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->tags(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCompendiumGameTimeline)
  return target;
}

int CCompendiumGameTimeline::ByteSize() const {
  int total_size = 0;

  // repeated .CCompendiumTimestampedData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  // repeated string tags = 2;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCompendiumGameTimeline::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CCompendiumGameTimeline* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CCompendiumGameTimeline>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCompendiumGameTimeline::MergeFrom(const CCompendiumGameTimeline& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  data_.MergeFrom(from.data_);
  tags_.MergeFrom(from.tags_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CCompendiumGameTimeline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCompendiumGameTimeline::CopyFrom(const CCompendiumGameTimeline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCompendiumGameTimeline::IsInitialized() const {

  return true;
}

void CCompendiumGameTimeline::Swap(CCompendiumGameTimeline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCompendiumGameTimeline::InternalSwap(CCompendiumGameTimeline* other) {
  data_.UnsafeArenaSwap(&other->data_);
  tags_.UnsafeArenaSwap(&other->tags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCompendiumGameTimeline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCompendiumGameTimeline_descriptor_;
  metadata.reflection = CCompendiumGameTimeline_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCompendiumGameTimeline

// repeated .CCompendiumTimestampedData data = 1;
int CCompendiumGameTimeline::data_size() const {
  return data_.size();
}
void CCompendiumGameTimeline::clear_data() {
  data_.Clear();
}
const ::CCompendiumTimestampedData& CCompendiumGameTimeline::data(int index) const {
  // @@protoc_insertion_point(field_get:CCompendiumGameTimeline.data)
  return data_.Get(index);
}
::CCompendiumTimestampedData* CCompendiumGameTimeline::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:CCompendiumGameTimeline.data)
  return data_.Mutable(index);
}
::CCompendiumTimestampedData* CCompendiumGameTimeline::add_data() {
  // @@protoc_insertion_point(field_add:CCompendiumGameTimeline.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::CCompendiumTimestampedData >*
CCompendiumGameTimeline::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:CCompendiumGameTimeline.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::CCompendiumTimestampedData >&
CCompendiumGameTimeline::data() const {
  // @@protoc_insertion_point(field_list:CCompendiumGameTimeline.data)
  return data_;
}

// repeated string tags = 2;
int CCompendiumGameTimeline::tags_size() const {
  return tags_.size();
}
void CCompendiumGameTimeline::clear_tags() {
  tags_.Clear();
}
 const ::std::string& CCompendiumGameTimeline::tags(int index) const {
  // @@protoc_insertion_point(field_get:CCompendiumGameTimeline.tags)
  return tags_.Get(index);
}
 ::std::string* CCompendiumGameTimeline::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CCompendiumGameTimeline.tags)
  return tags_.Mutable(index);
}
 void CCompendiumGameTimeline::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CCompendiumGameTimeline.tags)
  tags_.Mutable(index)->assign(value);
}
 void CCompendiumGameTimeline::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CCompendiumGameTimeline.tags)
}
 void CCompendiumGameTimeline::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCompendiumGameTimeline.tags)
}
 ::std::string* CCompendiumGameTimeline::add_tags() {
  return tags_.Add();
}
 void CCompendiumGameTimeline::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CCompendiumGameTimeline.tags)
}
 void CCompendiumGameTimeline::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CCompendiumGameTimeline.tags)
}
 void CCompendiumGameTimeline::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CCompendiumGameTimeline.tags)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
CCompendiumGameTimeline::tags() const {
  // @@protoc_insertion_point(field_list:CCompendiumGameTimeline.tags)
  return tags_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
CCompendiumGameTimeline::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CCompendiumGameTimeline.tags)
  return &tags_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CCompendiumGameList::kGamesFieldNumber;
#endif  // !_MSC_VER

CCompendiumGameList::CCompendiumGameList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCompendiumGameList)
}

void CCompendiumGameList::InitAsDefaultInstance() {
}

CCompendiumGameList::CCompendiumGameList(const CCompendiumGameList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CCompendiumGameList)
}

void CCompendiumGameList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCompendiumGameList::~CCompendiumGameList() {
  // @@protoc_insertion_point(destructor:CCompendiumGameList)
  SharedDtor();
}

void CCompendiumGameList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCompendiumGameList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCompendiumGameList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCompendiumGameList_descriptor_;
}

const CCompendiumGameList& CCompendiumGameList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CCompendiumGameList* CCompendiumGameList::default_instance_ = NULL;

CCompendiumGameList* CCompendiumGameList::New(::google::protobuf::Arena* arena) const {
  CCompendiumGameList* n = new CCompendiumGameList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCompendiumGameList::Clear() {
  games_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CCompendiumGameList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCompendiumGameList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CCompendiumGameTimeline games = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_games:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_games()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_games;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCompendiumGameList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCompendiumGameList)
  return false;
#undef DO_
}

void CCompendiumGameList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCompendiumGameList)
  // repeated .CCompendiumGameTimeline games = 1;
  for (unsigned int i = 0, n = this->games_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->games(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCompendiumGameList)
}

::google::protobuf::uint8* CCompendiumGameList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCompendiumGameList)
  // repeated .CCompendiumGameTimeline games = 1;
  for (unsigned int i = 0, n = this->games_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->games(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCompendiumGameList)
  return target;
}

int CCompendiumGameList::ByteSize() const {
  int total_size = 0;

  // repeated .CCompendiumGameTimeline games = 1;
  total_size += 1 * this->games_size();
  for (int i = 0; i < this->games_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->games(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCompendiumGameList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CCompendiumGameList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CCompendiumGameList>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCompendiumGameList::MergeFrom(const CCompendiumGameList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  games_.MergeFrom(from.games_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CCompendiumGameList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCompendiumGameList::CopyFrom(const CCompendiumGameList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCompendiumGameList::IsInitialized() const {

  return true;
}

void CCompendiumGameList::Swap(CCompendiumGameList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCompendiumGameList::InternalSwap(CCompendiumGameList* other) {
  games_.UnsafeArenaSwap(&other->games_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCompendiumGameList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCompendiumGameList_descriptor_;
  metadata.reflection = CCompendiumGameList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCompendiumGameList

// repeated .CCompendiumGameTimeline games = 1;
int CCompendiumGameList::games_size() const {
  return games_.size();
}
void CCompendiumGameList::clear_games() {
  games_.Clear();
}
const ::CCompendiumGameTimeline& CCompendiumGameList::games(int index) const {
  // @@protoc_insertion_point(field_get:CCompendiumGameList.games)
  return games_.Get(index);
}
::CCompendiumGameTimeline* CCompendiumGameList::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:CCompendiumGameList.games)
  return games_.Mutable(index);
}
::CCompendiumGameTimeline* CCompendiumGameList::add_games() {
  // @@protoc_insertion_point(field_add:CCompendiumGameList.games)
  return games_.Add();
}
::google::protobuf::RepeatedPtrField< ::CCompendiumGameTimeline >*
CCompendiumGameList::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:CCompendiumGameList.games)
  return &games_;
}
const ::google::protobuf::RepeatedPtrField< ::CCompendiumGameTimeline >&
CCompendiumGameList::games() const {
  // @@protoc_insertion_point(field_list:CCompendiumGameList.games)
  return games_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CAdditionalEquipSlot::kClassIdFieldNumber;
const int CAdditionalEquipSlot::kSlotIdFieldNumber;
const int CAdditionalEquipSlot::kDefIndexFieldNumber;
#endif  // !_MSC_VER

CAdditionalEquipSlot::CAdditionalEquipSlot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAdditionalEquipSlot)
}

void CAdditionalEquipSlot::InitAsDefaultInstance() {
}

CAdditionalEquipSlot::CAdditionalEquipSlot(const CAdditionalEquipSlot& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CAdditionalEquipSlot)
}

void CAdditionalEquipSlot::SharedCtor() {
  _cached_size_ = 0;
  class_id_ = 0u;
  slot_id_ = 0u;
  def_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAdditionalEquipSlot::~CAdditionalEquipSlot() {
  // @@protoc_insertion_point(destructor:CAdditionalEquipSlot)
  SharedDtor();
}

void CAdditionalEquipSlot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CAdditionalEquipSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAdditionalEquipSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAdditionalEquipSlot_descriptor_;
}

const CAdditionalEquipSlot& CAdditionalEquipSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CAdditionalEquipSlot* CAdditionalEquipSlot::default_instance_ = NULL;

CAdditionalEquipSlot* CAdditionalEquipSlot::New(::google::protobuf::Arena* arena) const {
  CAdditionalEquipSlot* n = new CAdditionalEquipSlot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CAdditionalEquipSlot::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CAdditionalEquipSlot*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(class_id_, def_index_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CAdditionalEquipSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAdditionalEquipSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 class_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_id_)));
          set_has_class_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slot_id;
        break;
      }

      // optional uint32 slot_id = 2;
      case 2: {
        if (tag == 16) {
         parse_slot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
          set_has_slot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_def_index;
        break;
      }

      // optional uint32 def_index = 3;
      case 3: {
        if (tag == 24) {
         parse_def_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
          set_has_def_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAdditionalEquipSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAdditionalEquipSlot)
  return false;
#undef DO_
}

void CAdditionalEquipSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAdditionalEquipSlot)
  // optional uint32 class_id = 1;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->class_id(), output);
  }

  // optional uint32 slot_id = 2;
  if (has_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot_id(), output);
  }

  // optional uint32 def_index = 3;
  if (has_def_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->def_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAdditionalEquipSlot)
}

::google::protobuf::uint8* CAdditionalEquipSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAdditionalEquipSlot)
  // optional uint32 class_id = 1;
  if (has_class_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->class_id(), target);
  }

  // optional uint32 slot_id = 2;
  if (has_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot_id(), target);
  }

  // optional uint32 def_index = 3;
  if (has_def_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->def_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAdditionalEquipSlot)
  return target;
}

int CAdditionalEquipSlot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 class_id = 1;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->class_id());
    }

    // optional uint32 slot_id = 2;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional uint32 def_index = 3;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAdditionalEquipSlot::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CAdditionalEquipSlot* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CAdditionalEquipSlot>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAdditionalEquipSlot::MergeFrom(const CAdditionalEquipSlot& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
    if (from.has_slot_id()) {
      set_slot_id(from.slot_id());
    }
    if (from.has_def_index()) {
      set_def_index(from.def_index());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CAdditionalEquipSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAdditionalEquipSlot::CopyFrom(const CAdditionalEquipSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAdditionalEquipSlot::IsInitialized() const {

  return true;
}

void CAdditionalEquipSlot::Swap(CAdditionalEquipSlot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAdditionalEquipSlot::InternalSwap(CAdditionalEquipSlot* other) {
  std::swap(class_id_, other->class_id_);
  std::swap(slot_id_, other->slot_id_);
  std::swap(def_index_, other->def_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CAdditionalEquipSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAdditionalEquipSlot_descriptor_;
  metadata.reflection = CAdditionalEquipSlot_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CAdditionalEquipSlot

// optional uint32 class_id = 1;
bool CAdditionalEquipSlot::has_class_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CAdditionalEquipSlot::set_has_class_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CAdditionalEquipSlot::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CAdditionalEquipSlot::clear_class_id() {
  class_id_ = 0u;
  clear_has_class_id();
}
 ::google::protobuf::uint32 CAdditionalEquipSlot::class_id() const {
  // @@protoc_insertion_point(field_get:CAdditionalEquipSlot.class_id)
  return class_id_;
}
 void CAdditionalEquipSlot::set_class_id(::google::protobuf::uint32 value) {
  set_has_class_id();
  class_id_ = value;
  // @@protoc_insertion_point(field_set:CAdditionalEquipSlot.class_id)
}

// optional uint32 slot_id = 2;
bool CAdditionalEquipSlot::has_slot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CAdditionalEquipSlot::set_has_slot_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CAdditionalEquipSlot::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CAdditionalEquipSlot::clear_slot_id() {
  slot_id_ = 0u;
  clear_has_slot_id();
}
 ::google::protobuf::uint32 CAdditionalEquipSlot::slot_id() const {
  // @@protoc_insertion_point(field_get:CAdditionalEquipSlot.slot_id)
  return slot_id_;
}
 void CAdditionalEquipSlot::set_slot_id(::google::protobuf::uint32 value) {
  set_has_slot_id();
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:CAdditionalEquipSlot.slot_id)
}

// optional uint32 def_index = 3;
bool CAdditionalEquipSlot::has_def_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CAdditionalEquipSlot::set_has_def_index() {
  _has_bits_[0] |= 0x00000004u;
}
void CAdditionalEquipSlot::clear_has_def_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void CAdditionalEquipSlot::clear_def_index() {
  def_index_ = 0u;
  clear_has_def_index();
}
 ::google::protobuf::uint32 CAdditionalEquipSlot::def_index() const {
  // @@protoc_insertion_point(field_get:CAdditionalEquipSlot.def_index)
  return def_index_;
}
 void CAdditionalEquipSlot::set_def_index(::google::protobuf::uint32 value) {
  set_has_def_index();
  def_index_ = value;
  // @@protoc_insertion_point(field_set:CAdditionalEquipSlot.def_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTARedeemItem::kCurrencyIdFieldNumber;
const int CMsgDOTARedeemItem::kPurchaseDefFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARedeemItem::CMsgDOTARedeemItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARedeemItem)
}

void CMsgDOTARedeemItem::InitAsDefaultInstance() {
}

CMsgDOTARedeemItem::CMsgDOTARedeemItem(const CMsgDOTARedeemItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARedeemItem)
}

void CMsgDOTARedeemItem::SharedCtor() {
  _cached_size_ = 0;
  currency_id_ = GOOGLE_ULONGLONG(0);
  purchase_def_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARedeemItem::~CMsgDOTARedeemItem() {
  // @@protoc_insertion_point(destructor:CMsgDOTARedeemItem)
  SharedDtor();
}

void CMsgDOTARedeemItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARedeemItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARedeemItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARedeemItem_descriptor_;
}

const CMsgDOTARedeemItem& CMsgDOTARedeemItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARedeemItem* CMsgDOTARedeemItem::default_instance_ = NULL;

CMsgDOTARedeemItem* CMsgDOTARedeemItem::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARedeemItem* n = new CMsgDOTARedeemItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARedeemItem::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTARedeemItem*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(currency_id_, purchase_def_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTARedeemItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARedeemItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 currency_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &currency_id_)));
          set_has_currency_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_purchase_def;
        break;
      }

      // optional uint32 purchase_def = 2;
      case 2: {
        if (tag == 16) {
         parse_purchase_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &purchase_def_)));
          set_has_purchase_def();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARedeemItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARedeemItem)
  return false;
#undef DO_
}

void CMsgDOTARedeemItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARedeemItem)
  // optional uint64 currency_id = 1;
  if (has_currency_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->currency_id(), output);
  }

  // optional uint32 purchase_def = 2;
  if (has_purchase_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->purchase_def(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARedeemItem)
}

::google::protobuf::uint8* CMsgDOTARedeemItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARedeemItem)
  // optional uint64 currency_id = 1;
  if (has_currency_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->currency_id(), target);
  }

  // optional uint32 purchase_def = 2;
  if (has_purchase_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->purchase_def(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARedeemItem)
  return target;
}

int CMsgDOTARedeemItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 currency_id = 1;
    if (has_currency_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->currency_id());
    }

    // optional uint32 purchase_def = 2;
    if (has_purchase_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->purchase_def());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARedeemItem::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTARedeemItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARedeemItem>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARedeemItem::MergeFrom(const CMsgDOTARedeemItem& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currency_id()) {
      set_currency_id(from.currency_id());
    }
    if (from.has_purchase_def()) {
      set_purchase_def(from.purchase_def());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTARedeemItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARedeemItem::CopyFrom(const CMsgDOTARedeemItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARedeemItem::IsInitialized() const {

  return true;
}

void CMsgDOTARedeemItem::Swap(CMsgDOTARedeemItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARedeemItem::InternalSwap(CMsgDOTARedeemItem* other) {
  std::swap(currency_id_, other->currency_id_);
  std::swap(purchase_def_, other->purchase_def_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARedeemItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARedeemItem_descriptor_;
  metadata.reflection = CMsgDOTARedeemItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARedeemItem

// optional uint64 currency_id = 1;
bool CMsgDOTARedeemItem::has_currency_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARedeemItem::set_has_currency_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARedeemItem::clear_has_currency_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARedeemItem::clear_currency_id() {
  currency_id_ = GOOGLE_ULONGLONG(0);
  clear_has_currency_id();
}
 ::google::protobuf::uint64 CMsgDOTARedeemItem::currency_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARedeemItem.currency_id)
  return currency_id_;
}
 void CMsgDOTARedeemItem::set_currency_id(::google::protobuf::uint64 value) {
  set_has_currency_id();
  currency_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARedeemItem.currency_id)
}

// optional uint32 purchase_def = 2;
bool CMsgDOTARedeemItem::has_purchase_def() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARedeemItem::set_has_purchase_def() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARedeemItem::clear_has_purchase_def() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARedeemItem::clear_purchase_def() {
  purchase_def_ = 0u;
  clear_has_purchase_def();
}
 ::google::protobuf::uint32 CMsgDOTARedeemItem::purchase_def() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARedeemItem.purchase_def)
  return purchase_def_;
}
 void CMsgDOTARedeemItem::set_purchase_def(::google::protobuf::uint32 value) {
  set_has_purchase_def();
  purchase_def_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARedeemItem.purchase_def)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgDOTARedeemItemResponse::CMsgDOTARedeemItemResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARedeemItemResponse)
}

void CMsgDOTARedeemItemResponse::InitAsDefaultInstance() {
}

CMsgDOTARedeemItemResponse::CMsgDOTARedeemItemResponse(const CMsgDOTARedeemItemResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARedeemItemResponse)
}

void CMsgDOTARedeemItemResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARedeemItemResponse::~CMsgDOTARedeemItemResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTARedeemItemResponse)
  SharedDtor();
}

void CMsgDOTARedeemItemResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARedeemItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARedeemItemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARedeemItemResponse_descriptor_;
}

const CMsgDOTARedeemItemResponse& CMsgDOTARedeemItemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARedeemItemResponse* CMsgDOTARedeemItemResponse::default_instance_ = NULL;

CMsgDOTARedeemItemResponse* CMsgDOTARedeemItemResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARedeemItemResponse* n = new CMsgDOTARedeemItemResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARedeemItemResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTARedeemItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARedeemItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARedeemItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARedeemItemResponse)
  return false;
#undef DO_
}

void CMsgDOTARedeemItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARedeemItemResponse)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARedeemItemResponse)
}

::google::protobuf::uint8* CMsgDOTARedeemItemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARedeemItemResponse)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARedeemItemResponse)
  return target;
}

int CMsgDOTARedeemItemResponse::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARedeemItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTARedeemItemResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARedeemItemResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARedeemItemResponse::MergeFrom(const CMsgDOTARedeemItemResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTARedeemItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARedeemItemResponse::CopyFrom(const CMsgDOTARedeemItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARedeemItemResponse::IsInitialized() const {

  return true;
}

void CMsgDOTARedeemItemResponse::Swap(CMsgDOTARedeemItemResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARedeemItemResponse::InternalSwap(CMsgDOTARedeemItemResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARedeemItemResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARedeemItemResponse_descriptor_;
  metadata.reflection = CMsgDOTARedeemItemResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARedeemItemResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTACombatLogEntry::kTypeFieldNumber;
const int CMsgDOTACombatLogEntry::kTargetNameFieldNumber;
const int CMsgDOTACombatLogEntry::kTargetSourceNameFieldNumber;
const int CMsgDOTACombatLogEntry::kAttackerNameFieldNumber;
const int CMsgDOTACombatLogEntry::kDamageSourceNameFieldNumber;
const int CMsgDOTACombatLogEntry::kInflictorNameFieldNumber;
const int CMsgDOTACombatLogEntry::kIsAttackerIllusionFieldNumber;
const int CMsgDOTACombatLogEntry::kIsAttackerHeroFieldNumber;
const int CMsgDOTACombatLogEntry::kIsTargetIllusionFieldNumber;
const int CMsgDOTACombatLogEntry::kIsTargetHeroFieldNumber;
const int CMsgDOTACombatLogEntry::kIsVisibleRadiantFieldNumber;
const int CMsgDOTACombatLogEntry::kIsVisibleDireFieldNumber;
const int CMsgDOTACombatLogEntry::kValueFieldNumber;
const int CMsgDOTACombatLogEntry::kHealthFieldNumber;
const int CMsgDOTACombatLogEntry::kTimestampFieldNumber;
const int CMsgDOTACombatLogEntry::kStunDurationFieldNumber;
const int CMsgDOTACombatLogEntry::kSlowDurationFieldNumber;
const int CMsgDOTACombatLogEntry::kIsAbilityToggleOnFieldNumber;
const int CMsgDOTACombatLogEntry::kIsAbilityToggleOffFieldNumber;
const int CMsgDOTACombatLogEntry::kAbilityLevelFieldNumber;
const int CMsgDOTACombatLogEntry::kLocationXFieldNumber;
const int CMsgDOTACombatLogEntry::kLocationYFieldNumber;
const int CMsgDOTACombatLogEntry::kGoldReasonFieldNumber;
const int CMsgDOTACombatLogEntry::kTimestampRawFieldNumber;
const int CMsgDOTACombatLogEntry::kModifierDurationFieldNumber;
const int CMsgDOTACombatLogEntry::kXpReasonFieldNumber;
const int CMsgDOTACombatLogEntry::kLastHitsFieldNumber;
const int CMsgDOTACombatLogEntry::kAttackerTeamFieldNumber;
const int CMsgDOTACombatLogEntry::kTargetTeamFieldNumber;
const int CMsgDOTACombatLogEntry::kObsWardsPlacedFieldNumber;
const int CMsgDOTACombatLogEntry::kAssistPlayer0FieldNumber;
const int CMsgDOTACombatLogEntry::kAssistPlayer1FieldNumber;
const int CMsgDOTACombatLogEntry::kAssistPlayer2FieldNumber;
const int CMsgDOTACombatLogEntry::kAssistPlayer3FieldNumber;
const int CMsgDOTACombatLogEntry::kStackCountFieldNumber;
const int CMsgDOTACombatLogEntry::kHiddenModifierFieldNumber;
const int CMsgDOTACombatLogEntry::kIsTargetBuildingFieldNumber;
const int CMsgDOTACombatLogEntry::kNeutralCampTypeFieldNumber;
const int CMsgDOTACombatLogEntry::kRuneTypeFieldNumber;
#endif  // !_MSC_VER

CMsgDOTACombatLogEntry::CMsgDOTACombatLogEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTACombatLogEntry)
}

void CMsgDOTACombatLogEntry::InitAsDefaultInstance() {
}

CMsgDOTACombatLogEntry::CMsgDOTACombatLogEntry(const CMsgDOTACombatLogEntry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTACombatLogEntry)
}

void CMsgDOTACombatLogEntry::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  target_name_ = 0u;
  target_source_name_ = 0u;
  attacker_name_ = 0u;
  damage_source_name_ = 0u;
  inflictor_name_ = 0u;
  is_attacker_illusion_ = false;
  is_attacker_hero_ = false;
  is_target_illusion_ = false;
  is_target_hero_ = false;
  is_visible_radiant_ = false;
  is_visible_dire_ = false;
  value_ = 0u;
  health_ = 0;
  timestamp_ = 0;
  stun_duration_ = 0;
  slow_duration_ = 0;
  is_ability_toggle_on_ = false;
  is_ability_toggle_off_ = false;
  ability_level_ = 0u;
  location_x_ = 0;
  location_y_ = 0;
  gold_reason_ = 0u;
  timestamp_raw_ = 0;
  modifier_duration_ = 0;
  xp_reason_ = 0u;
  last_hits_ = 0u;
  attacker_team_ = 0u;
  target_team_ = 0u;
  obs_wards_placed_ = 0u;
  assist_player0_ = 0u;
  assist_player1_ = 0u;
  assist_player2_ = 0u;
  assist_player3_ = 0u;
  stack_count_ = 0u;
  hidden_modifier_ = false;
  is_target_building_ = false;
  neutral_camp_type_ = 0u;
  rune_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTACombatLogEntry::~CMsgDOTACombatLogEntry() {
  // @@protoc_insertion_point(destructor:CMsgDOTACombatLogEntry)
  SharedDtor();
}

void CMsgDOTACombatLogEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTACombatLogEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTACombatLogEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTACombatLogEntry_descriptor_;
}

const CMsgDOTACombatLogEntry& CMsgDOTACombatLogEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTACombatLogEntry* CMsgDOTACombatLogEntry::default_instance_ = NULL;

CMsgDOTACombatLogEntry* CMsgDOTACombatLogEntry::New(::google::protobuf::Arena* arena) const {
  CMsgDOTACombatLogEntry* n = new CMsgDOTACombatLogEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTACombatLogEntry::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTACombatLogEntry*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(type_, is_attacker_hero_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(is_target_illusion_, is_visible_dire_);
    stun_duration_ = 0;
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(is_ability_toggle_on_, is_ability_toggle_off_);
    ZR_(slow_duration_, timestamp_raw_);
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ZR_(modifier_duration_, assist_player1_);
  }
  if (_has_bits_[32 / 32] & 127u) {
    ZR_(assist_player2_, rune_type_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTACombatLogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTACombatLogEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_DAMAGE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_COMBATLOG_TYPES_IsValid(value)) {
            set_type(static_cast< ::DOTA_COMBATLOG_TYPES >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_target_name;
        break;
      }

      // optional uint32 target_name = 2;
      case 2: {
        if (tag == 16) {
         parse_target_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_name_)));
          set_has_target_name();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_target_source_name;
        break;
      }

      // optional uint32 target_source_name = 3;
      case 3: {
        if (tag == 24) {
         parse_target_source_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_source_name_)));
          set_has_target_source_name();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_attacker_name;
        break;
      }

      // optional uint32 attacker_name = 4;
      case 4: {
        if (tag == 32) {
         parse_attacker_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacker_name_)));
          set_has_attacker_name();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_damage_source_name;
        break;
      }

      // optional uint32 damage_source_name = 5;
      case 5: {
        if (tag == 40) {
         parse_damage_source_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_source_name_)));
          set_has_damage_source_name();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_inflictor_name;
        break;
      }

      // optional uint32 inflictor_name = 6;
      case 6: {
        if (tag == 48) {
         parse_inflictor_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inflictor_name_)));
          set_has_inflictor_name();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_attacker_illusion;
        break;
      }

      // optional bool is_attacker_illusion = 7;
      case 7: {
        if (tag == 56) {
         parse_is_attacker_illusion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attacker_illusion_)));
          set_has_is_attacker_illusion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_is_attacker_hero;
        break;
      }

      // optional bool is_attacker_hero = 8;
      case 8: {
        if (tag == 64) {
         parse_is_attacker_hero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attacker_hero_)));
          set_has_is_attacker_hero();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_is_target_illusion;
        break;
      }

      // optional bool is_target_illusion = 9;
      case 9: {
        if (tag == 72) {
         parse_is_target_illusion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_target_illusion_)));
          set_has_is_target_illusion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_is_target_hero;
        break;
      }

      // optional bool is_target_hero = 10;
      case 10: {
        if (tag == 80) {
         parse_is_target_hero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_target_hero_)));
          set_has_is_target_hero();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_is_visible_radiant;
        break;
      }

      // optional bool is_visible_radiant = 11;
      case 11: {
        if (tag == 88) {
         parse_is_visible_radiant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_visible_radiant_)));
          set_has_is_visible_radiant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_is_visible_dire;
        break;
      }

      // optional bool is_visible_dire = 12;
      case 12: {
        if (tag == 96) {
         parse_is_visible_dire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_visible_dire_)));
          set_has_is_visible_dire();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_value;
        break;
      }

      // optional uint32 value = 13;
      case 13: {
        if (tag == 104) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_health;
        break;
      }

      // optional int32 health = 14;
      case 14: {
        if (tag == 112) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_timestamp;
        break;
      }

      // optional float timestamp = 15;
      case 15: {
        if (tag == 125) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_stun_duration;
        break;
      }

      // optional float stun_duration = 16;
      case 16: {
        if (tag == 133) {
         parse_stun_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stun_duration_)));
          set_has_stun_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_slow_duration;
        break;
      }

      // optional float slow_duration = 17;
      case 17: {
        if (tag == 141) {
         parse_slow_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slow_duration_)));
          set_has_slow_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_is_ability_toggle_on;
        break;
      }

      // optional bool is_ability_toggle_on = 18;
      case 18: {
        if (tag == 144) {
         parse_is_ability_toggle_on:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ability_toggle_on_)));
          set_has_is_ability_toggle_on();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_is_ability_toggle_off;
        break;
      }

      // optional bool is_ability_toggle_off = 19;
      case 19: {
        if (tag == 152) {
         parse_is_ability_toggle_off:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ability_toggle_off_)));
          set_has_is_ability_toggle_off();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_ability_level;
        break;
      }

      // optional uint32 ability_level = 20;
      case 20: {
        if (tag == 160) {
         parse_ability_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_level_)));
          set_has_ability_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(173)) goto parse_location_x;
        break;
      }

      // optional float location_x = 21;
      case 21: {
        if (tag == 173) {
         parse_location_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &location_x_)));
          set_has_location_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(181)) goto parse_location_y;
        break;
      }

      // optional float location_y = 22;
      case 22: {
        if (tag == 181) {
         parse_location_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &location_y_)));
          set_has_location_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_gold_reason;
        break;
      }

      // optional uint32 gold_reason = 23;
      case 23: {
        if (tag == 184) {
         parse_gold_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_reason_)));
          set_has_gold_reason();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(197)) goto parse_timestamp_raw;
        break;
      }

      // optional float timestamp_raw = 24;
      case 24: {
        if (tag == 197) {
         parse_timestamp_raw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timestamp_raw_)));
          set_has_timestamp_raw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(205)) goto parse_modifier_duration;
        break;
      }

      // optional float modifier_duration = 25;
      case 25: {
        if (tag == 205) {
         parse_modifier_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &modifier_duration_)));
          set_has_modifier_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_xp_reason;
        break;
      }

      // optional uint32 xp_reason = 26;
      case 26: {
        if (tag == 208) {
         parse_xp_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_reason_)));
          set_has_xp_reason();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_last_hits;
        break;
      }

      // optional uint32 last_hits = 27;
      case 27: {
        if (tag == 216) {
         parse_last_hits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_hits_)));
          set_has_last_hits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_attacker_team;
        break;
      }

      // optional uint32 attacker_team = 28;
      case 28: {
        if (tag == 224) {
         parse_attacker_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacker_team_)));
          set_has_attacker_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_target_team;
        break;
      }

      // optional uint32 target_team = 29;
      case 29: {
        if (tag == 232) {
         parse_target_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_team_)));
          set_has_target_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_obs_wards_placed;
        break;
      }

      // optional uint32 obs_wards_placed = 30;
      case 30: {
        if (tag == 240) {
         parse_obs_wards_placed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obs_wards_placed_)));
          set_has_obs_wards_placed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_assist_player0;
        break;
      }

      // optional uint32 assist_player0 = 31;
      case 31: {
        if (tag == 248) {
         parse_assist_player0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assist_player0_)));
          set_has_assist_player0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_assist_player1;
        break;
      }

      // optional uint32 assist_player1 = 32;
      case 32: {
        if (tag == 256) {
         parse_assist_player1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assist_player1_)));
          set_has_assist_player1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_assist_player2;
        break;
      }

      // optional uint32 assist_player2 = 33;
      case 33: {
        if (tag == 264) {
         parse_assist_player2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assist_player2_)));
          set_has_assist_player2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_assist_player3;
        break;
      }

      // optional uint32 assist_player3 = 34;
      case 34: {
        if (tag == 272) {
         parse_assist_player3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assist_player3_)));
          set_has_assist_player3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_stack_count;
        break;
      }

      // optional uint32 stack_count = 35;
      case 35: {
        if (tag == 280) {
         parse_stack_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stack_count_)));
          set_has_stack_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_hidden_modifier;
        break;
      }

      // optional bool hidden_modifier = 36;
      case 36: {
        if (tag == 288) {
         parse_hidden_modifier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hidden_modifier_)));
          set_has_hidden_modifier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_is_target_building;
        break;
      }

      // optional bool is_target_building = 37;
      case 37: {
        if (tag == 296) {
         parse_is_target_building:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_target_building_)));
          set_has_is_target_building();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_neutral_camp_type;
        break;
      }

      // optional uint32 neutral_camp_type = 38;
      case 38: {
        if (tag == 304) {
         parse_neutral_camp_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &neutral_camp_type_)));
          set_has_neutral_camp_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_rune_type;
        break;
      }

      // optional uint32 rune_type = 39;
      case 39: {
        if (tag == 312) {
         parse_rune_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rune_type_)));
          set_has_rune_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTACombatLogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTACombatLogEntry)
  return false;
#undef DO_
}

void CMsgDOTACombatLogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTACombatLogEntry)
  // optional .DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_DAMAGE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 target_name = 2;
  if (has_target_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_name(), output);
  }

  // optional uint32 target_source_name = 3;
  if (has_target_source_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_source_name(), output);
  }

  // optional uint32 attacker_name = 4;
  if (has_attacker_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attacker_name(), output);
  }

  // optional uint32 damage_source_name = 5;
  if (has_damage_source_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->damage_source_name(), output);
  }

  // optional uint32 inflictor_name = 6;
  if (has_inflictor_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->inflictor_name(), output);
  }

  // optional bool is_attacker_illusion = 7;
  if (has_is_attacker_illusion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_attacker_illusion(), output);
  }

  // optional bool is_attacker_hero = 8;
  if (has_is_attacker_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_attacker_hero(), output);
  }

  // optional bool is_target_illusion = 9;
  if (has_is_target_illusion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_target_illusion(), output);
  }

  // optional bool is_target_hero = 10;
  if (has_is_target_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_target_hero(), output);
  }

  // optional bool is_visible_radiant = 11;
  if (has_is_visible_radiant()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_visible_radiant(), output);
  }

  // optional bool is_visible_dire = 12;
  if (has_is_visible_dire()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_visible_dire(), output);
  }

  // optional uint32 value = 13;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->value(), output);
  }

  // optional int32 health = 14;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->health(), output);
  }

  // optional float timestamp = 15;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->timestamp(), output);
  }

  // optional float stun_duration = 16;
  if (has_stun_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->stun_duration(), output);
  }

  // optional float slow_duration = 17;
  if (has_slow_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->slow_duration(), output);
  }

  // optional bool is_ability_toggle_on = 18;
  if (has_is_ability_toggle_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->is_ability_toggle_on(), output);
  }

  // optional bool is_ability_toggle_off = 19;
  if (has_is_ability_toggle_off()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->is_ability_toggle_off(), output);
  }

  // optional uint32 ability_level = 20;
  if (has_ability_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->ability_level(), output);
  }

  // optional float location_x = 21;
  if (has_location_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->location_x(), output);
  }

  // optional float location_y = 22;
  if (has_location_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->location_y(), output);
  }

  // optional uint32 gold_reason = 23;
  if (has_gold_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->gold_reason(), output);
  }

  // optional float timestamp_raw = 24;
  if (has_timestamp_raw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->timestamp_raw(), output);
  }

  // optional float modifier_duration = 25;
  if (has_modifier_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->modifier_duration(), output);
  }

  // optional uint32 xp_reason = 26;
  if (has_xp_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->xp_reason(), output);
  }

  // optional uint32 last_hits = 27;
  if (has_last_hits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->last_hits(), output);
  }

  // optional uint32 attacker_team = 28;
  if (has_attacker_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->attacker_team(), output);
  }

  // optional uint32 target_team = 29;
  if (has_target_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->target_team(), output);
  }

  // optional uint32 obs_wards_placed = 30;
  if (has_obs_wards_placed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->obs_wards_placed(), output);
  }

  // optional uint32 assist_player0 = 31;
  if (has_assist_player0()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->assist_player0(), output);
  }

  // optional uint32 assist_player1 = 32;
  if (has_assist_player1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->assist_player1(), output);
  }

  // optional uint32 assist_player2 = 33;
  if (has_assist_player2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->assist_player2(), output);
  }

  // optional uint32 assist_player3 = 34;
  if (has_assist_player3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->assist_player3(), output);
  }

  // optional uint32 stack_count = 35;
  if (has_stack_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->stack_count(), output);
  }

  // optional bool hidden_modifier = 36;
  if (has_hidden_modifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->hidden_modifier(), output);
  }

  // optional bool is_target_building = 37;
  if (has_is_target_building()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->is_target_building(), output);
  }

  // optional uint32 neutral_camp_type = 38;
  if (has_neutral_camp_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->neutral_camp_type(), output);
  }

  // optional uint32 rune_type = 39;
  if (has_rune_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->rune_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTACombatLogEntry)
}

::google::protobuf::uint8* CMsgDOTACombatLogEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTACombatLogEntry)
  // optional .DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_DAMAGE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 target_name = 2;
  if (has_target_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_name(), target);
  }

  // optional uint32 target_source_name = 3;
  if (has_target_source_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_source_name(), target);
  }

  // optional uint32 attacker_name = 4;
  if (has_attacker_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attacker_name(), target);
  }

  // optional uint32 damage_source_name = 5;
  if (has_damage_source_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->damage_source_name(), target);
  }

  // optional uint32 inflictor_name = 6;
  if (has_inflictor_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->inflictor_name(), target);
  }

  // optional bool is_attacker_illusion = 7;
  if (has_is_attacker_illusion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_attacker_illusion(), target);
  }

  // optional bool is_attacker_hero = 8;
  if (has_is_attacker_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_attacker_hero(), target);
  }

  // optional bool is_target_illusion = 9;
  if (has_is_target_illusion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_target_illusion(), target);
  }

  // optional bool is_target_hero = 10;
  if (has_is_target_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_target_hero(), target);
  }

  // optional bool is_visible_radiant = 11;
  if (has_is_visible_radiant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_visible_radiant(), target);
  }

  // optional bool is_visible_dire = 12;
  if (has_is_visible_dire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_visible_dire(), target);
  }

  // optional uint32 value = 13;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->value(), target);
  }

  // optional int32 health = 14;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->health(), target);
  }

  // optional float timestamp = 15;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->timestamp(), target);
  }

  // optional float stun_duration = 16;
  if (has_stun_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->stun_duration(), target);
  }

  // optional float slow_duration = 17;
  if (has_slow_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->slow_duration(), target);
  }

  // optional bool is_ability_toggle_on = 18;
  if (has_is_ability_toggle_on()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->is_ability_toggle_on(), target);
  }

  // optional bool is_ability_toggle_off = 19;
  if (has_is_ability_toggle_off()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->is_ability_toggle_off(), target);
  }

  // optional uint32 ability_level = 20;
  if (has_ability_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->ability_level(), target);
  }

  // optional float location_x = 21;
  if (has_location_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->location_x(), target);
  }

  // optional float location_y = 22;
  if (has_location_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->location_y(), target);
  }

  // optional uint32 gold_reason = 23;
  if (has_gold_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->gold_reason(), target);
  }

  // optional float timestamp_raw = 24;
  if (has_timestamp_raw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->timestamp_raw(), target);
  }

  // optional float modifier_duration = 25;
  if (has_modifier_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->modifier_duration(), target);
  }

  // optional uint32 xp_reason = 26;
  if (has_xp_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->xp_reason(), target);
  }

  // optional uint32 last_hits = 27;
  if (has_last_hits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->last_hits(), target);
  }

  // optional uint32 attacker_team = 28;
  if (has_attacker_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->attacker_team(), target);
  }

  // optional uint32 target_team = 29;
  if (has_target_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->target_team(), target);
  }

  // optional uint32 obs_wards_placed = 30;
  if (has_obs_wards_placed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->obs_wards_placed(), target);
  }

  // optional uint32 assist_player0 = 31;
  if (has_assist_player0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->assist_player0(), target);
  }

  // optional uint32 assist_player1 = 32;
  if (has_assist_player1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->assist_player1(), target);
  }

  // optional uint32 assist_player2 = 33;
  if (has_assist_player2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->assist_player2(), target);
  }

  // optional uint32 assist_player3 = 34;
  if (has_assist_player3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->assist_player3(), target);
  }

  // optional uint32 stack_count = 35;
  if (has_stack_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->stack_count(), target);
  }

  // optional bool hidden_modifier = 36;
  if (has_hidden_modifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->hidden_modifier(), target);
  }

  // optional bool is_target_building = 37;
  if (has_is_target_building()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->is_target_building(), target);
  }

  // optional uint32 neutral_camp_type = 38;
  if (has_neutral_camp_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->neutral_camp_type(), target);
  }

  // optional uint32 rune_type = 39;
  if (has_rune_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->rune_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTACombatLogEntry)
  return target;
}

int CMsgDOTACombatLogEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_DAMAGE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 target_name = 2;
    if (has_target_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_name());
    }

    // optional uint32 target_source_name = 3;
    if (has_target_source_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_source_name());
    }

    // optional uint32 attacker_name = 4;
    if (has_attacker_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacker_name());
    }

    // optional uint32 damage_source_name = 5;
    if (has_damage_source_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_source_name());
    }

    // optional uint32 inflictor_name = 6;
    if (has_inflictor_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inflictor_name());
    }

    // optional bool is_attacker_illusion = 7;
    if (has_is_attacker_illusion()) {
      total_size += 1 + 1;
    }

    // optional bool is_attacker_hero = 8;
    if (has_is_attacker_hero()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool is_target_illusion = 9;
    if (has_is_target_illusion()) {
      total_size += 1 + 1;
    }

    // optional bool is_target_hero = 10;
    if (has_is_target_hero()) {
      total_size += 1 + 1;
    }

    // optional bool is_visible_radiant = 11;
    if (has_is_visible_radiant()) {
      total_size += 1 + 1;
    }

    // optional bool is_visible_dire = 12;
    if (has_is_visible_dire()) {
      total_size += 1 + 1;
    }

    // optional uint32 value = 13;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional int32 health = 14;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

    // optional float timestamp = 15;
    if (has_timestamp()) {
      total_size += 1 + 4;
    }

    // optional float stun_duration = 16;
    if (has_stun_duration()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional float slow_duration = 17;
    if (has_slow_duration()) {
      total_size += 2 + 4;
    }

    // optional bool is_ability_toggle_on = 18;
    if (has_is_ability_toggle_on()) {
      total_size += 2 + 1;
    }

    // optional bool is_ability_toggle_off = 19;
    if (has_is_ability_toggle_off()) {
      total_size += 2 + 1;
    }

    // optional uint32 ability_level = 20;
    if (has_ability_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_level());
    }

    // optional float location_x = 21;
    if (has_location_x()) {
      total_size += 2 + 4;
    }

    // optional float location_y = 22;
    if (has_location_y()) {
      total_size += 2 + 4;
    }

    // optional uint32 gold_reason = 23;
    if (has_gold_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_reason());
    }

    // optional float timestamp_raw = 24;
    if (has_timestamp_raw()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional float modifier_duration = 25;
    if (has_modifier_duration()) {
      total_size += 2 + 4;
    }

    // optional uint32 xp_reason = 26;
    if (has_xp_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp_reason());
    }

    // optional uint32 last_hits = 27;
    if (has_last_hits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_hits());
    }

    // optional uint32 attacker_team = 28;
    if (has_attacker_team()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacker_team());
    }

    // optional uint32 target_team = 29;
    if (has_target_team()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_team());
    }

    // optional uint32 obs_wards_placed = 30;
    if (has_obs_wards_placed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->obs_wards_placed());
    }

    // optional uint32 assist_player0 = 31;
    if (has_assist_player0()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assist_player0());
    }

    // optional uint32 assist_player1 = 32;
    if (has_assist_player1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assist_player1());
    }

  }
  if (_has_bits_[32 / 32] & 127u) {
    // optional uint32 assist_player2 = 33;
    if (has_assist_player2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assist_player2());
    }

    // optional uint32 assist_player3 = 34;
    if (has_assist_player3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assist_player3());
    }

    // optional uint32 stack_count = 35;
    if (has_stack_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stack_count());
    }

    // optional bool hidden_modifier = 36;
    if (has_hidden_modifier()) {
      total_size += 2 + 1;
    }

    // optional bool is_target_building = 37;
    if (has_is_target_building()) {
      total_size += 2 + 1;
    }

    // optional uint32 neutral_camp_type = 38;
    if (has_neutral_camp_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->neutral_camp_type());
    }

    // optional uint32 rune_type = 39;
    if (has_rune_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rune_type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTACombatLogEntry::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTACombatLogEntry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTACombatLogEntry>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTACombatLogEntry::MergeFrom(const CMsgDOTACombatLogEntry& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_target_name()) {
      set_target_name(from.target_name());
    }
    if (from.has_target_source_name()) {
      set_target_source_name(from.target_source_name());
    }
    if (from.has_attacker_name()) {
      set_attacker_name(from.attacker_name());
    }
    if (from.has_damage_source_name()) {
      set_damage_source_name(from.damage_source_name());
    }
    if (from.has_inflictor_name()) {
      set_inflictor_name(from.inflictor_name());
    }
    if (from.has_is_attacker_illusion()) {
      set_is_attacker_illusion(from.is_attacker_illusion());
    }
    if (from.has_is_attacker_hero()) {
      set_is_attacker_hero(from.is_attacker_hero());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_target_illusion()) {
      set_is_target_illusion(from.is_target_illusion());
    }
    if (from.has_is_target_hero()) {
      set_is_target_hero(from.is_target_hero());
    }
    if (from.has_is_visible_radiant()) {
      set_is_visible_radiant(from.is_visible_radiant());
    }
    if (from.has_is_visible_dire()) {
      set_is_visible_dire(from.is_visible_dire());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_stun_duration()) {
      set_stun_duration(from.stun_duration());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_slow_duration()) {
      set_slow_duration(from.slow_duration());
    }
    if (from.has_is_ability_toggle_on()) {
      set_is_ability_toggle_on(from.is_ability_toggle_on());
    }
    if (from.has_is_ability_toggle_off()) {
      set_is_ability_toggle_off(from.is_ability_toggle_off());
    }
    if (from.has_ability_level()) {
      set_ability_level(from.ability_level());
    }
    if (from.has_location_x()) {
      set_location_x(from.location_x());
    }
    if (from.has_location_y()) {
      set_location_y(from.location_y());
    }
    if (from.has_gold_reason()) {
      set_gold_reason(from.gold_reason());
    }
    if (from.has_timestamp_raw()) {
      set_timestamp_raw(from.timestamp_raw());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_modifier_duration()) {
      set_modifier_duration(from.modifier_duration());
    }
    if (from.has_xp_reason()) {
      set_xp_reason(from.xp_reason());
    }
    if (from.has_last_hits()) {
      set_last_hits(from.last_hits());
    }
    if (from.has_attacker_team()) {
      set_attacker_team(from.attacker_team());
    }
    if (from.has_target_team()) {
      set_target_team(from.target_team());
    }
    if (from.has_obs_wards_placed()) {
      set_obs_wards_placed(from.obs_wards_placed());
    }
    if (from.has_assist_player0()) {
      set_assist_player0(from.assist_player0());
    }
    if (from.has_assist_player1()) {
      set_assist_player1(from.assist_player1());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_assist_player2()) {
      set_assist_player2(from.assist_player2());
    }
    if (from.has_assist_player3()) {
      set_assist_player3(from.assist_player3());
    }
    if (from.has_stack_count()) {
      set_stack_count(from.stack_count());
    }
    if (from.has_hidden_modifier()) {
      set_hidden_modifier(from.hidden_modifier());
    }
    if (from.has_is_target_building()) {
      set_is_target_building(from.is_target_building());
    }
    if (from.has_neutral_camp_type()) {
      set_neutral_camp_type(from.neutral_camp_type());
    }
    if (from.has_rune_type()) {
      set_rune_type(from.rune_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTACombatLogEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTACombatLogEntry::CopyFrom(const CMsgDOTACombatLogEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACombatLogEntry::IsInitialized() const {

  return true;
}

void CMsgDOTACombatLogEntry::Swap(CMsgDOTACombatLogEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTACombatLogEntry::InternalSwap(CMsgDOTACombatLogEntry* other) {
  std::swap(type_, other->type_);
  std::swap(target_name_, other->target_name_);
  std::swap(target_source_name_, other->target_source_name_);
  std::swap(attacker_name_, other->attacker_name_);
  std::swap(damage_source_name_, other->damage_source_name_);
  std::swap(inflictor_name_, other->inflictor_name_);
  std::swap(is_attacker_illusion_, other->is_attacker_illusion_);
  std::swap(is_attacker_hero_, other->is_attacker_hero_);
  std::swap(is_target_illusion_, other->is_target_illusion_);
  std::swap(is_target_hero_, other->is_target_hero_);
  std::swap(is_visible_radiant_, other->is_visible_radiant_);
  std::swap(is_visible_dire_, other->is_visible_dire_);
  std::swap(value_, other->value_);
  std::swap(health_, other->health_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(stun_duration_, other->stun_duration_);
  std::swap(slow_duration_, other->slow_duration_);
  std::swap(is_ability_toggle_on_, other->is_ability_toggle_on_);
  std::swap(is_ability_toggle_off_, other->is_ability_toggle_off_);
  std::swap(ability_level_, other->ability_level_);
  std::swap(location_x_, other->location_x_);
  std::swap(location_y_, other->location_y_);
  std::swap(gold_reason_, other->gold_reason_);
  std::swap(timestamp_raw_, other->timestamp_raw_);
  std::swap(modifier_duration_, other->modifier_duration_);
  std::swap(xp_reason_, other->xp_reason_);
  std::swap(last_hits_, other->last_hits_);
  std::swap(attacker_team_, other->attacker_team_);
  std::swap(target_team_, other->target_team_);
  std::swap(obs_wards_placed_, other->obs_wards_placed_);
  std::swap(assist_player0_, other->assist_player0_);
  std::swap(assist_player1_, other->assist_player1_);
  std::swap(assist_player2_, other->assist_player2_);
  std::swap(assist_player3_, other->assist_player3_);
  std::swap(stack_count_, other->stack_count_);
  std::swap(hidden_modifier_, other->hidden_modifier_);
  std::swap(is_target_building_, other->is_target_building_);
  std::swap(neutral_camp_type_, other->neutral_camp_type_);
  std::swap(rune_type_, other->rune_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTACombatLogEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTACombatLogEntry_descriptor_;
  metadata.reflection = CMsgDOTACombatLogEntry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTACombatLogEntry

// optional .DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_DAMAGE];
bool CMsgDOTACombatLogEntry::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTACombatLogEntry::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTACombatLogEntry::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::DOTA_COMBATLOG_TYPES CMsgDOTACombatLogEntry::type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.type)
  return static_cast< ::DOTA_COMBATLOG_TYPES >(type_);
}
 void CMsgDOTACombatLogEntry::set_type(::DOTA_COMBATLOG_TYPES value) {
  assert(::DOTA_COMBATLOG_TYPES_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.type)
}

// optional uint32 target_name = 2;
bool CMsgDOTACombatLogEntry::has_target_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_target_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTACombatLogEntry::clear_has_target_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTACombatLogEntry::clear_target_name() {
  target_name_ = 0u;
  clear_has_target_name();
}
 ::google::protobuf::uint32 CMsgDOTACombatLogEntry::target_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.target_name)
  return target_name_;
}
 void CMsgDOTACombatLogEntry::set_target_name(::google::protobuf::uint32 value) {
  set_has_target_name();
  target_name_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.target_name)
}

// optional uint32 target_source_name = 3;
bool CMsgDOTACombatLogEntry::has_target_source_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_target_source_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTACombatLogEntry::clear_has_target_source_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTACombatLogEntry::clear_target_source_name() {
  target_source_name_ = 0u;
  clear_has_target_source_name();
}
 ::google::protobuf::uint32 CMsgDOTACombatLogEntry::target_source_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.target_source_name)
  return target_source_name_;
}
 void CMsgDOTACombatLogEntry::set_target_source_name(::google::protobuf::uint32 value) {
  set_has_target_source_name();
  target_source_name_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.target_source_name)
}

// optional uint32 attacker_name = 4;
bool CMsgDOTACombatLogEntry::has_attacker_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_attacker_name() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTACombatLogEntry::clear_has_attacker_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTACombatLogEntry::clear_attacker_name() {
  attacker_name_ = 0u;
  clear_has_attacker_name();
}
 ::google::protobuf::uint32 CMsgDOTACombatLogEntry::attacker_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.attacker_name)
  return attacker_name_;
}
 void CMsgDOTACombatLogEntry::set_attacker_name(::google::protobuf::uint32 value) {
  set_has_attacker_name();
  attacker_name_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.attacker_name)
}

// optional uint32 damage_source_name = 5;
bool CMsgDOTACombatLogEntry::has_damage_source_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_damage_source_name() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTACombatLogEntry::clear_has_damage_source_name() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTACombatLogEntry::clear_damage_source_name() {
  damage_source_name_ = 0u;
  clear_has_damage_source_name();
}
 ::google::protobuf::uint32 CMsgDOTACombatLogEntry::damage_source_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.damage_source_name)
  return damage_source_name_;
}
 void CMsgDOTACombatLogEntry::set_damage_source_name(::google::protobuf::uint32 value) {
  set_has_damage_source_name();
  damage_source_name_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.damage_source_name)
}

// optional uint32 inflictor_name = 6;
bool CMsgDOTACombatLogEntry::has_inflictor_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_inflictor_name() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTACombatLogEntry::clear_has_inflictor_name() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTACombatLogEntry::clear_inflictor_name() {
  inflictor_name_ = 0u;
  clear_has_inflictor_name();
}
 ::google::protobuf::uint32 CMsgDOTACombatLogEntry::inflictor_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.inflictor_name)
  return inflictor_name_;
}
 void CMsgDOTACombatLogEntry::set_inflictor_name(::google::protobuf::uint32 value) {
  set_has_inflictor_name();
  inflictor_name_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.inflictor_name)
}

// optional bool is_attacker_illusion = 7;
bool CMsgDOTACombatLogEntry::has_is_attacker_illusion() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_is_attacker_illusion() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTACombatLogEntry::clear_has_is_attacker_illusion() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTACombatLogEntry::clear_is_attacker_illusion() {
  is_attacker_illusion_ = false;
  clear_has_is_attacker_illusion();
}
 bool CMsgDOTACombatLogEntry::is_attacker_illusion() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_attacker_illusion)
  return is_attacker_illusion_;
}
 void CMsgDOTACombatLogEntry::set_is_attacker_illusion(bool value) {
  set_has_is_attacker_illusion();
  is_attacker_illusion_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_attacker_illusion)
}

// optional bool is_attacker_hero = 8;
bool CMsgDOTACombatLogEntry::has_is_attacker_hero() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_is_attacker_hero() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTACombatLogEntry::clear_has_is_attacker_hero() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTACombatLogEntry::clear_is_attacker_hero() {
  is_attacker_hero_ = false;
  clear_has_is_attacker_hero();
}
 bool CMsgDOTACombatLogEntry::is_attacker_hero() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_attacker_hero)
  return is_attacker_hero_;
}
 void CMsgDOTACombatLogEntry::set_is_attacker_hero(bool value) {
  set_has_is_attacker_hero();
  is_attacker_hero_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_attacker_hero)
}

// optional bool is_target_illusion = 9;
bool CMsgDOTACombatLogEntry::has_is_target_illusion() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_is_target_illusion() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTACombatLogEntry::clear_has_is_target_illusion() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTACombatLogEntry::clear_is_target_illusion() {
  is_target_illusion_ = false;
  clear_has_is_target_illusion();
}
 bool CMsgDOTACombatLogEntry::is_target_illusion() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_target_illusion)
  return is_target_illusion_;
}
 void CMsgDOTACombatLogEntry::set_is_target_illusion(bool value) {
  set_has_is_target_illusion();
  is_target_illusion_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_target_illusion)
}

// optional bool is_target_hero = 10;
bool CMsgDOTACombatLogEntry::has_is_target_hero() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_is_target_hero() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTACombatLogEntry::clear_has_is_target_hero() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTACombatLogEntry::clear_is_target_hero() {
  is_target_hero_ = false;
  clear_has_is_target_hero();
}
 bool CMsgDOTACombatLogEntry::is_target_hero() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_target_hero)
  return is_target_hero_;
}
 void CMsgDOTACombatLogEntry::set_is_target_hero(bool value) {
  set_has_is_target_hero();
  is_target_hero_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_target_hero)
}

// optional bool is_visible_radiant = 11;
bool CMsgDOTACombatLogEntry::has_is_visible_radiant() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_is_visible_radiant() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTACombatLogEntry::clear_has_is_visible_radiant() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTACombatLogEntry::clear_is_visible_radiant() {
  is_visible_radiant_ = false;
  clear_has_is_visible_radiant();
}
 bool CMsgDOTACombatLogEntry::is_visible_radiant() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_visible_radiant)
  return is_visible_radiant_;
}
 void CMsgDOTACombatLogEntry::set_is_visible_radiant(bool value) {
  set_has_is_visible_radiant();
  is_visible_radiant_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_visible_radiant)
}

// optional bool is_visible_dire = 12;
bool CMsgDOTACombatLogEntry::has_is_visible_dire() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_is_visible_dire() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgDOTACombatLogEntry::clear_has_is_visible_dire() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgDOTACombatLogEntry::clear_is_visible_dire() {
  is_visible_dire_ = false;
  clear_has_is_visible_dire();
}
 bool CMsgDOTACombatLogEntry::is_visible_dire() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_visible_dire)
  return is_visible_dire_;
}
 void CMsgDOTACombatLogEntry::set_is_visible_dire(bool value) {
  set_has_is_visible_dire();
  is_visible_dire_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_visible_dire)
}

// optional uint32 value = 13;
bool CMsgDOTACombatLogEntry::has_value() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_value() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgDOTACombatLogEntry::clear_has_value() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgDOTACombatLogEntry::clear_value() {
  value_ = 0u;
  clear_has_value();
}
 ::google::protobuf::uint32 CMsgDOTACombatLogEntry::value() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.value)
  return value_;
}
 void CMsgDOTACombatLogEntry::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.value)
}

// optional int32 health = 14;
bool CMsgDOTACombatLogEntry::has_health() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_health() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgDOTACombatLogEntry::clear_has_health() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgDOTACombatLogEntry::clear_health() {
  health_ = 0;
  clear_has_health();
}
 ::google::protobuf::int32 CMsgDOTACombatLogEntry::health() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.health)
  return health_;
}
 void CMsgDOTACombatLogEntry::set_health(::google::protobuf::int32 value) {
  set_has_health();
  health_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.health)
}

// optional float timestamp = 15;
bool CMsgDOTACombatLogEntry::has_timestamp() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_timestamp() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgDOTACombatLogEntry::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgDOTACombatLogEntry::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
 float CMsgDOTACombatLogEntry::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.timestamp)
  return timestamp_;
}
 void CMsgDOTACombatLogEntry::set_timestamp(float value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.timestamp)
}

// optional float stun_duration = 16;
bool CMsgDOTACombatLogEntry::has_stun_duration() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_stun_duration() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgDOTACombatLogEntry::clear_has_stun_duration() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgDOTACombatLogEntry::clear_stun_duration() {
  stun_duration_ = 0;
  clear_has_stun_duration();
}
 float CMsgDOTACombatLogEntry::stun_duration() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.stun_duration)
  return stun_duration_;
}
 void CMsgDOTACombatLogEntry::set_stun_duration(float value) {
  set_has_stun_duration();
  stun_duration_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.stun_duration)
}

// optional float slow_duration = 17;
bool CMsgDOTACombatLogEntry::has_slow_duration() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_slow_duration() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgDOTACombatLogEntry::clear_has_slow_duration() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgDOTACombatLogEntry::clear_slow_duration() {
  slow_duration_ = 0;
  clear_has_slow_duration();
}
 float CMsgDOTACombatLogEntry::slow_duration() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.slow_duration)
  return slow_duration_;
}
 void CMsgDOTACombatLogEntry::set_slow_duration(float value) {
  set_has_slow_duration();
  slow_duration_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.slow_duration)
}

// optional bool is_ability_toggle_on = 18;
bool CMsgDOTACombatLogEntry::has_is_ability_toggle_on() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_is_ability_toggle_on() {
  _has_bits_[0] |= 0x00020000u;
}
void CMsgDOTACombatLogEntry::clear_has_is_ability_toggle_on() {
  _has_bits_[0] &= ~0x00020000u;
}
void CMsgDOTACombatLogEntry::clear_is_ability_toggle_on() {
  is_ability_toggle_on_ = false;
  clear_has_is_ability_toggle_on();
}
 bool CMsgDOTACombatLogEntry::is_ability_toggle_on() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_ability_toggle_on)
  return is_ability_toggle_on_;
}
 void CMsgDOTACombatLogEntry::set_is_ability_toggle_on(bool value) {
  set_has_is_ability_toggle_on();
  is_ability_toggle_on_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_ability_toggle_on)
}

// optional bool is_ability_toggle_off = 19;
bool CMsgDOTACombatLogEntry::has_is_ability_toggle_off() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_is_ability_toggle_off() {
  _has_bits_[0] |= 0x00040000u;
}
void CMsgDOTACombatLogEntry::clear_has_is_ability_toggle_off() {
  _has_bits_[0] &= ~0x00040000u;
}
void CMsgDOTACombatLogEntry::clear_is_ability_toggle_off() {
  is_ability_toggle_off_ = false;
  clear_has_is_ability_toggle_off();
}
 bool CMsgDOTACombatLogEntry::is_ability_toggle_off() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_ability_toggle_off)
  return is_ability_toggle_off_;
}
 void CMsgDOTACombatLogEntry::set_is_ability_toggle_off(bool value) {
  set_has_is_ability_toggle_off();
  is_ability_toggle_off_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_ability_toggle_off)
}

// optional uint32 ability_level = 20;
bool CMsgDOTACombatLogEntry::has_ability_level() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_ability_level() {
  _has_bits_[0] |= 0x00080000u;
}
void CMsgDOTACombatLogEntry::clear_has_ability_level() {
  _has_bits_[0] &= ~0x00080000u;
}
void CMsgDOTACombatLogEntry::clear_ability_level() {
  ability_level_ = 0u;
  clear_has_ability_level();
}
 ::google::protobuf::uint32 CMsgDOTACombatLogEntry::ability_level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.ability_level)
  return ability_level_;
}
 void CMsgDOTACombatLogEntry::set_ability_level(::google::protobuf::uint32 value) {
  set_has_ability_level();
  ability_level_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.ability_level)
}

// optional float location_x = 21;
bool CMsgDOTACombatLogEntry::has_location_x() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_location_x() {
  _has_bits_[0] |= 0x00100000u;
}
void CMsgDOTACombatLogEntry::clear_has_location_x() {
  _has_bits_[0] &= ~0x00100000u;
}
void CMsgDOTACombatLogEntry::clear_location_x() {
  location_x_ = 0;
  clear_has_location_x();
}
 float CMsgDOTACombatLogEntry::location_x() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.location_x)
  return location_x_;
}
 void CMsgDOTACombatLogEntry::set_location_x(float value) {
  set_has_location_x();
  location_x_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.location_x)
}

// optional float location_y = 22;
bool CMsgDOTACombatLogEntry::has_location_y() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_location_y() {
  _has_bits_[0] |= 0x00200000u;
}
void CMsgDOTACombatLogEntry::clear_has_location_y() {
  _has_bits_[0] &= ~0x00200000u;
}
void CMsgDOTACombatLogEntry::clear_location_y() {
  location_y_ = 0;
  clear_has_location_y();
}
 float CMsgDOTACombatLogEntry::location_y() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.location_y)
  return location_y_;
}
 void CMsgDOTACombatLogEntry::set_location_y(float value) {
  set_has_location_y();
  location_y_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.location_y)
}

// optional uint32 gold_reason = 23;
bool CMsgDOTACombatLogEntry::has_gold_reason() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_gold_reason() {
  _has_bits_[0] |= 0x00400000u;
}
void CMsgDOTACombatLogEntry::clear_has_gold_reason() {
  _has_bits_[0] &= ~0x00400000u;
}
void CMsgDOTACombatLogEntry::clear_gold_reason() {
  gold_reason_ = 0u;
  clear_has_gold_reason();
}
 ::google::protobuf::uint32 CMsgDOTACombatLogEntry::gold_reason() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.gold_reason)
  return gold_reason_;
}
 void CMsgDOTACombatLogEntry::set_gold_reason(::google::protobuf::uint32 value) {
  set_has_gold_reason();
  gold_reason_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.gold_reason)
}

// optional float timestamp_raw = 24;
bool CMsgDOTACombatLogEntry::has_timestamp_raw() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_timestamp_raw() {
  _has_bits_[0] |= 0x00800000u;
}
void CMsgDOTACombatLogEntry::clear_has_timestamp_raw() {
  _has_bits_[0] &= ~0x00800000u;
}
void CMsgDOTACombatLogEntry::clear_timestamp_raw() {
  timestamp_raw_ = 0;
  clear_has_timestamp_raw();
}
 float CMsgDOTACombatLogEntry::timestamp_raw() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.timestamp_raw)
  return timestamp_raw_;
}
 void CMsgDOTACombatLogEntry::set_timestamp_raw(float value) {
  set_has_timestamp_raw();
  timestamp_raw_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.timestamp_raw)
}

// optional float modifier_duration = 25;
bool CMsgDOTACombatLogEntry::has_modifier_duration() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_modifier_duration() {
  _has_bits_[0] |= 0x01000000u;
}
void CMsgDOTACombatLogEntry::clear_has_modifier_duration() {
  _has_bits_[0] &= ~0x01000000u;
}
void CMsgDOTACombatLogEntry::clear_modifier_duration() {
  modifier_duration_ = 0;
  clear_has_modifier_duration();
}
 float CMsgDOTACombatLogEntry::modifier_duration() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.modifier_duration)
  return modifier_duration_;
}
 void CMsgDOTACombatLogEntry::set_modifier_duration(float value) {
  set_has_modifier_duration();
  modifier_duration_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.modifier_duration)
}

// optional uint32 xp_reason = 26;
bool CMsgDOTACombatLogEntry::has_xp_reason() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_xp_reason() {
  _has_bits_[0] |= 0x02000000u;
}
void CMsgDOTACombatLogEntry::clear_has_xp_reason() {
  _has_bits_[0] &= ~0x02000000u;
}
void CMsgDOTACombatLogEntry::clear_xp_reason() {
  xp_reason_ = 0u;
  clear_has_xp_reason();
}
 ::google::protobuf::uint32 CMsgDOTACombatLogEntry::xp_reason() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.xp_reason)
  return xp_reason_;
}
 void CMsgDOTACombatLogEntry::set_xp_reason(::google::protobuf::uint32 value) {
  set_has_xp_reason();
  xp_reason_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.xp_reason)
}

// optional uint32 last_hits = 27;
bool CMsgDOTACombatLogEntry::has_last_hits() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_last_hits() {
  _has_bits_[0] |= 0x04000000u;
}
void CMsgDOTACombatLogEntry::clear_has_last_hits() {
  _has_bits_[0] &= ~0x04000000u;
}
void CMsgDOTACombatLogEntry::clear_last_hits() {
  last_hits_ = 0u;
  clear_has_last_hits();
}
 ::google::protobuf::uint32 CMsgDOTACombatLogEntry::last_hits() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.last_hits)
  return last_hits_;
}
 void CMsgDOTACombatLogEntry::set_last_hits(::google::protobuf::uint32 value) {
  set_has_last_hits();
  last_hits_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.last_hits)
}

// optional uint32 attacker_team = 28;
bool CMsgDOTACombatLogEntry::has_attacker_team() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_attacker_team() {
  _has_bits_[0] |= 0x08000000u;
}
void CMsgDOTACombatLogEntry::clear_has_attacker_team() {
  _has_bits_[0] &= ~0x08000000u;
}
void CMsgDOTACombatLogEntry::clear_attacker_team() {
  attacker_team_ = 0u;
  clear_has_attacker_team();
}
 ::google::protobuf::uint32 CMsgDOTACombatLogEntry::attacker_team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.attacker_team)
  return attacker_team_;
}
 void CMsgDOTACombatLogEntry::set_attacker_team(::google::protobuf::uint32 value) {
  set_has_attacker_team();
  attacker_team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.attacker_team)
}

// optional uint32 target_team = 29;
bool CMsgDOTACombatLogEntry::has_target_team() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_target_team() {
  _has_bits_[0] |= 0x10000000u;
}
void CMsgDOTACombatLogEntry::clear_has_target_team() {
  _has_bits_[0] &= ~0x10000000u;
}
void CMsgDOTACombatLogEntry::clear_target_team() {
  target_team_ = 0u;
  clear_has_target_team();
}
 ::google::protobuf::uint32 CMsgDOTACombatLogEntry::target_team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.target_team)
  return target_team_;
}
 void CMsgDOTACombatLogEntry::set_target_team(::google::protobuf::uint32 value) {
  set_has_target_team();
  target_team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.target_team)
}

// optional uint32 obs_wards_placed = 30;
bool CMsgDOTACombatLogEntry::has_obs_wards_placed() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_obs_wards_placed() {
  _has_bits_[0] |= 0x20000000u;
}
void CMsgDOTACombatLogEntry::clear_has_obs_wards_placed() {
  _has_bits_[0] &= ~0x20000000u;
}
void CMsgDOTACombatLogEntry::clear_obs_wards_placed() {
  obs_wards_placed_ = 0u;
  clear_has_obs_wards_placed();
}
 ::google::protobuf::uint32 CMsgDOTACombatLogEntry::obs_wards_placed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.obs_wards_placed)
  return obs_wards_placed_;
}
 void CMsgDOTACombatLogEntry::set_obs_wards_placed(::google::protobuf::uint32 value) {
  set_has_obs_wards_placed();
  obs_wards_placed_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.obs_wards_placed)
}

// optional uint32 assist_player0 = 31;
bool CMsgDOTACombatLogEntry::has_assist_player0() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_assist_player0() {
  _has_bits_[0] |= 0x40000000u;
}
void CMsgDOTACombatLogEntry::clear_has_assist_player0() {
  _has_bits_[0] &= ~0x40000000u;
}
void CMsgDOTACombatLogEntry::clear_assist_player0() {
  assist_player0_ = 0u;
  clear_has_assist_player0();
}
 ::google::protobuf::uint32 CMsgDOTACombatLogEntry::assist_player0() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.assist_player0)
  return assist_player0_;
}
 void CMsgDOTACombatLogEntry::set_assist_player0(::google::protobuf::uint32 value) {
  set_has_assist_player0();
  assist_player0_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.assist_player0)
}

// optional uint32 assist_player1 = 32;
bool CMsgDOTACombatLogEntry::has_assist_player1() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_assist_player1() {
  _has_bits_[0] |= 0x80000000u;
}
void CMsgDOTACombatLogEntry::clear_has_assist_player1() {
  _has_bits_[0] &= ~0x80000000u;
}
void CMsgDOTACombatLogEntry::clear_assist_player1() {
  assist_player1_ = 0u;
  clear_has_assist_player1();
}
 ::google::protobuf::uint32 CMsgDOTACombatLogEntry::assist_player1() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.assist_player1)
  return assist_player1_;
}
 void CMsgDOTACombatLogEntry::set_assist_player1(::google::protobuf::uint32 value) {
  set_has_assist_player1();
  assist_player1_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.assist_player1)
}

// optional uint32 assist_player2 = 33;
bool CMsgDOTACombatLogEntry::has_assist_player2() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_assist_player2() {
  _has_bits_[1] |= 0x00000001u;
}
void CMsgDOTACombatLogEntry::clear_has_assist_player2() {
  _has_bits_[1] &= ~0x00000001u;
}
void CMsgDOTACombatLogEntry::clear_assist_player2() {
  assist_player2_ = 0u;
  clear_has_assist_player2();
}
 ::google::protobuf::uint32 CMsgDOTACombatLogEntry::assist_player2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.assist_player2)
  return assist_player2_;
}
 void CMsgDOTACombatLogEntry::set_assist_player2(::google::protobuf::uint32 value) {
  set_has_assist_player2();
  assist_player2_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.assist_player2)
}

// optional uint32 assist_player3 = 34;
bool CMsgDOTACombatLogEntry::has_assist_player3() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_assist_player3() {
  _has_bits_[1] |= 0x00000002u;
}
void CMsgDOTACombatLogEntry::clear_has_assist_player3() {
  _has_bits_[1] &= ~0x00000002u;
}
void CMsgDOTACombatLogEntry::clear_assist_player3() {
  assist_player3_ = 0u;
  clear_has_assist_player3();
}
 ::google::protobuf::uint32 CMsgDOTACombatLogEntry::assist_player3() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.assist_player3)
  return assist_player3_;
}
 void CMsgDOTACombatLogEntry::set_assist_player3(::google::protobuf::uint32 value) {
  set_has_assist_player3();
  assist_player3_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.assist_player3)
}

// optional uint32 stack_count = 35;
bool CMsgDOTACombatLogEntry::has_stack_count() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_stack_count() {
  _has_bits_[1] |= 0x00000004u;
}
void CMsgDOTACombatLogEntry::clear_has_stack_count() {
  _has_bits_[1] &= ~0x00000004u;
}
void CMsgDOTACombatLogEntry::clear_stack_count() {
  stack_count_ = 0u;
  clear_has_stack_count();
}
 ::google::protobuf::uint32 CMsgDOTACombatLogEntry::stack_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.stack_count)
  return stack_count_;
}
 void CMsgDOTACombatLogEntry::set_stack_count(::google::protobuf::uint32 value) {
  set_has_stack_count();
  stack_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.stack_count)
}

// optional bool hidden_modifier = 36;
bool CMsgDOTACombatLogEntry::has_hidden_modifier() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_hidden_modifier() {
  _has_bits_[1] |= 0x00000008u;
}
void CMsgDOTACombatLogEntry::clear_has_hidden_modifier() {
  _has_bits_[1] &= ~0x00000008u;
}
void CMsgDOTACombatLogEntry::clear_hidden_modifier() {
  hidden_modifier_ = false;
  clear_has_hidden_modifier();
}
 bool CMsgDOTACombatLogEntry::hidden_modifier() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.hidden_modifier)
  return hidden_modifier_;
}
 void CMsgDOTACombatLogEntry::set_hidden_modifier(bool value) {
  set_has_hidden_modifier();
  hidden_modifier_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.hidden_modifier)
}

// optional bool is_target_building = 37;
bool CMsgDOTACombatLogEntry::has_is_target_building() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_is_target_building() {
  _has_bits_[1] |= 0x00000010u;
}
void CMsgDOTACombatLogEntry::clear_has_is_target_building() {
  _has_bits_[1] &= ~0x00000010u;
}
void CMsgDOTACombatLogEntry::clear_is_target_building() {
  is_target_building_ = false;
  clear_has_is_target_building();
}
 bool CMsgDOTACombatLogEntry::is_target_building() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_target_building)
  return is_target_building_;
}
 void CMsgDOTACombatLogEntry::set_is_target_building(bool value) {
  set_has_is_target_building();
  is_target_building_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_target_building)
}

// optional uint32 neutral_camp_type = 38;
bool CMsgDOTACombatLogEntry::has_neutral_camp_type() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_neutral_camp_type() {
  _has_bits_[1] |= 0x00000020u;
}
void CMsgDOTACombatLogEntry::clear_has_neutral_camp_type() {
  _has_bits_[1] &= ~0x00000020u;
}
void CMsgDOTACombatLogEntry::clear_neutral_camp_type() {
  neutral_camp_type_ = 0u;
  clear_has_neutral_camp_type();
}
 ::google::protobuf::uint32 CMsgDOTACombatLogEntry::neutral_camp_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.neutral_camp_type)
  return neutral_camp_type_;
}
 void CMsgDOTACombatLogEntry::set_neutral_camp_type(::google::protobuf::uint32 value) {
  set_has_neutral_camp_type();
  neutral_camp_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.neutral_camp_type)
}

// optional uint32 rune_type = 39;
bool CMsgDOTACombatLogEntry::has_rune_type() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_rune_type() {
  _has_bits_[1] |= 0x00000040u;
}
void CMsgDOTACombatLogEntry::clear_has_rune_type() {
  _has_bits_[1] &= ~0x00000040u;
}
void CMsgDOTACombatLogEntry::clear_rune_type() {
  rune_type_ = 0u;
  clear_has_rune_type();
}
 ::google::protobuf::uint32 CMsgDOTACombatLogEntry::rune_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.rune_type)
  return rune_type_;
}
 void CMsgDOTACombatLogEntry::set_rune_type(::google::protobuf::uint32 value) {
  set_has_rune_type();
  rune_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.rune_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAProfileCard_EStatID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAProfileCard_EStatID_descriptor_;
}
bool CMsgDOTAProfileCard_EStatID_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_SoloRank;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_PartyRank;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_Wins;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_Commends;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_GamesPlayed;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_FirstMatchDate;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::EStatID_MIN;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::EStatID_MAX;
const int CMsgDOTAProfileCard::EStatID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAProfileCard_Slot_Trophy::kTrophyIdFieldNumber;
const int CMsgDOTAProfileCard_Slot_Trophy::kTrophyScoreFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAProfileCard_Slot_Trophy::CMsgDOTAProfileCard_Slot_Trophy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAProfileCard.Slot.Trophy)
}

void CMsgDOTAProfileCard_Slot_Trophy::InitAsDefaultInstance() {
}

CMsgDOTAProfileCard_Slot_Trophy::CMsgDOTAProfileCard_Slot_Trophy(const CMsgDOTAProfileCard_Slot_Trophy& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard.Slot.Trophy)
}

void CMsgDOTAProfileCard_Slot_Trophy::SharedCtor() {
  _cached_size_ = 0;
  trophy_id_ = 0u;
  trophy_score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAProfileCard_Slot_Trophy::~CMsgDOTAProfileCard_Slot_Trophy() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard.Slot.Trophy)
  SharedDtor();
}

void CMsgDOTAProfileCard_Slot_Trophy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAProfileCard_Slot_Trophy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_Trophy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAProfileCard_Slot_Trophy_descriptor_;
}

const CMsgDOTAProfileCard_Slot_Trophy& CMsgDOTAProfileCard_Slot_Trophy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAProfileCard_Slot_Trophy* CMsgDOTAProfileCard_Slot_Trophy::default_instance_ = NULL;

CMsgDOTAProfileCard_Slot_Trophy* CMsgDOTAProfileCard_Slot_Trophy::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAProfileCard_Slot_Trophy* n = new CMsgDOTAProfileCard_Slot_Trophy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAProfileCard_Slot_Trophy::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAProfileCard_Slot_Trophy*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(trophy_id_, trophy_score_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAProfileCard_Slot_Trophy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAProfileCard.Slot.Trophy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 trophy_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trophy_id_)));
          set_has_trophy_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_trophy_score;
        break;
      }

      // optional uint32 trophy_score = 2;
      case 2: {
        if (tag == 16) {
         parse_trophy_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trophy_score_)));
          set_has_trophy_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAProfileCard.Slot.Trophy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAProfileCard.Slot.Trophy)
  return false;
#undef DO_
}

void CMsgDOTAProfileCard_Slot_Trophy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAProfileCard.Slot.Trophy)
  // optional uint32 trophy_id = 1;
  if (has_trophy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->trophy_id(), output);
  }

  // optional uint32 trophy_score = 2;
  if (has_trophy_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trophy_score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAProfileCard.Slot.Trophy)
}

::google::protobuf::uint8* CMsgDOTAProfileCard_Slot_Trophy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard.Slot.Trophy)
  // optional uint32 trophy_id = 1;
  if (has_trophy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->trophy_id(), target);
  }

  // optional uint32 trophy_score = 2;
  if (has_trophy_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trophy_score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard.Slot.Trophy)
  return target;
}

int CMsgDOTAProfileCard_Slot_Trophy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 trophy_id = 1;
    if (has_trophy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trophy_id());
    }

    // optional uint32 trophy_score = 2;
    if (has_trophy_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trophy_score());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Trophy::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAProfileCard_Slot_Trophy* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAProfileCard_Slot_Trophy>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Trophy::MergeFrom(const CMsgDOTAProfileCard_Slot_Trophy& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trophy_id()) {
      set_trophy_id(from.trophy_id());
    }
    if (from.has_trophy_score()) {
      set_trophy_score(from.trophy_score());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAProfileCard_Slot_Trophy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Trophy::CopyFrom(const CMsgDOTAProfileCard_Slot_Trophy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Trophy::IsInitialized() const {

  return true;
}

void CMsgDOTAProfileCard_Slot_Trophy::Swap(CMsgDOTAProfileCard_Slot_Trophy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProfileCard_Slot_Trophy::InternalSwap(CMsgDOTAProfileCard_Slot_Trophy* other) {
  std::swap(trophy_id_, other->trophy_id_);
  std::swap(trophy_score_, other->trophy_score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAProfileCard_Slot_Trophy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAProfileCard_Slot_Trophy_descriptor_;
  metadata.reflection = CMsgDOTAProfileCard_Slot_Trophy_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAProfileCard_Slot_Stat::kStatIdFieldNumber;
const int CMsgDOTAProfileCard_Slot_Stat::kStatScoreFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAProfileCard_Slot_Stat::CMsgDOTAProfileCard_Slot_Stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAProfileCard.Slot.Stat)
}

void CMsgDOTAProfileCard_Slot_Stat::InitAsDefaultInstance() {
}

CMsgDOTAProfileCard_Slot_Stat::CMsgDOTAProfileCard_Slot_Stat(const CMsgDOTAProfileCard_Slot_Stat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard.Slot.Stat)
}

void CMsgDOTAProfileCard_Slot_Stat::SharedCtor() {
  _cached_size_ = 0;
  stat_id_ = 1;
  stat_score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAProfileCard_Slot_Stat::~CMsgDOTAProfileCard_Slot_Stat() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard.Slot.Stat)
  SharedDtor();
}

void CMsgDOTAProfileCard_Slot_Stat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAProfileCard_Slot_Stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_Stat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAProfileCard_Slot_Stat_descriptor_;
}

const CMsgDOTAProfileCard_Slot_Stat& CMsgDOTAProfileCard_Slot_Stat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAProfileCard_Slot_Stat* CMsgDOTAProfileCard_Slot_Stat::default_instance_ = NULL;

CMsgDOTAProfileCard_Slot_Stat* CMsgDOTAProfileCard_Slot_Stat::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAProfileCard_Slot_Stat* n = new CMsgDOTAProfileCard_Slot_Stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAProfileCard_Slot_Stat::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    stat_id_ = 1;
    stat_score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAProfileCard_Slot_Stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAProfileCard.Slot.Stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_SoloRank];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAProfileCard_EStatID_IsValid(value)) {
            set_stat_id(static_cast< ::CMsgDOTAProfileCard_EStatID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stat_score;
        break;
      }

      // optional uint32 stat_score = 2;
      case 2: {
        if (tag == 16) {
         parse_stat_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_score_)));
          set_has_stat_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAProfileCard.Slot.Stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAProfileCard.Slot.Stat)
  return false;
#undef DO_
}

void CMsgDOTAProfileCard_Slot_Stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAProfileCard.Slot.Stat)
  // optional .CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_SoloRank];
  if (has_stat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stat_id(), output);
  }

  // optional uint32 stat_score = 2;
  if (has_stat_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stat_score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAProfileCard.Slot.Stat)
}

::google::protobuf::uint8* CMsgDOTAProfileCard_Slot_Stat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard.Slot.Stat)
  // optional .CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_SoloRank];
  if (has_stat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stat_id(), target);
  }

  // optional uint32 stat_score = 2;
  if (has_stat_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stat_score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard.Slot.Stat)
  return target;
}

int CMsgDOTAProfileCard_Slot_Stat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_SoloRank];
    if (has_stat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stat_id());
    }

    // optional uint32 stat_score = 2;
    if (has_stat_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_score());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Stat::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAProfileCard_Slot_Stat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAProfileCard_Slot_Stat>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Stat::MergeFrom(const CMsgDOTAProfileCard_Slot_Stat& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stat_id()) {
      set_stat_id(from.stat_id());
    }
    if (from.has_stat_score()) {
      set_stat_score(from.stat_score());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAProfileCard_Slot_Stat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Stat::CopyFrom(const CMsgDOTAProfileCard_Slot_Stat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Stat::IsInitialized() const {

  return true;
}

void CMsgDOTAProfileCard_Slot_Stat::Swap(CMsgDOTAProfileCard_Slot_Stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProfileCard_Slot_Stat::InternalSwap(CMsgDOTAProfileCard_Slot_Stat* other) {
  std::swap(stat_id_, other->stat_id_);
  std::swap(stat_score_, other->stat_score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAProfileCard_Slot_Stat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAProfileCard_Slot_Stat_descriptor_;
  metadata.reflection = CMsgDOTAProfileCard_Slot_Stat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAProfileCard_Slot_Item::kSerializedItemFieldNumber;
const int CMsgDOTAProfileCard_Slot_Item::kItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAProfileCard_Slot_Item::CMsgDOTAProfileCard_Slot_Item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAProfileCard.Slot.Item)
}

void CMsgDOTAProfileCard_Slot_Item::InitAsDefaultInstance() {
}

CMsgDOTAProfileCard_Slot_Item::CMsgDOTAProfileCard_Slot_Item(const CMsgDOTAProfileCard_Slot_Item& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard.Slot.Item)
}

void CMsgDOTAProfileCard_Slot_Item::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serialized_item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAProfileCard_Slot_Item::~CMsgDOTAProfileCard_Slot_Item() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard.Slot.Item)
  SharedDtor();
}

void CMsgDOTAProfileCard_Slot_Item::SharedDtor() {
  serialized_item_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgDOTAProfileCard_Slot_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAProfileCard_Slot_Item_descriptor_;
}

const CMsgDOTAProfileCard_Slot_Item& CMsgDOTAProfileCard_Slot_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAProfileCard_Slot_Item* CMsgDOTAProfileCard_Slot_Item::default_instance_ = NULL;

CMsgDOTAProfileCard_Slot_Item* CMsgDOTAProfileCard_Slot_Item::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAProfileCard_Slot_Item* n = new CMsgDOTAProfileCard_Slot_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAProfileCard_Slot_Item::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_serialized_item()) {
      serialized_item_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAProfileCard_Slot_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAProfileCard.Slot.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes serialized_item = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional uint64 item_id = 2;
      case 2: {
        if (tag == 16) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAProfileCard.Slot.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAProfileCard.Slot.Item)
  return false;
#undef DO_
}

void CMsgDOTAProfileCard_Slot_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAProfileCard.Slot.Item)
  // optional bytes serialized_item = 1;
  if (has_serialized_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->serialized_item(), output);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAProfileCard.Slot.Item)
}

::google::protobuf::uint8* CMsgDOTAProfileCard_Slot_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard.Slot.Item)
  // optional bytes serialized_item = 1;
  if (has_serialized_item()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->serialized_item(), target);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard.Slot.Item)
  return target;
}

int CMsgDOTAProfileCard_Slot_Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes serialized_item = 1;
    if (has_serialized_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_item());
    }

    // optional uint64 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Item::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAProfileCard_Slot_Item* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAProfileCard_Slot_Item>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Item::MergeFrom(const CMsgDOTAProfileCard_Slot_Item& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialized_item()) {
      set_has_serialized_item();
      serialized_item_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_item_);
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAProfileCard_Slot_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Item::CopyFrom(const CMsgDOTAProfileCard_Slot_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Item::IsInitialized() const {

  return true;
}

void CMsgDOTAProfileCard_Slot_Item::Swap(CMsgDOTAProfileCard_Slot_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProfileCard_Slot_Item::InternalSwap(CMsgDOTAProfileCard_Slot_Item* other) {
  serialized_item_.Swap(&other->serialized_item_);
  std::swap(item_id_, other->item_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAProfileCard_Slot_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAProfileCard_Slot_Item_descriptor_;
  metadata.reflection = CMsgDOTAProfileCard_Slot_Item_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAProfileCard_Slot_Hero::kHeroIdFieldNumber;
const int CMsgDOTAProfileCard_Slot_Hero::kHeroWinsFieldNumber;
const int CMsgDOTAProfileCard_Slot_Hero::kHeroLossesFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAProfileCard_Slot_Hero::CMsgDOTAProfileCard_Slot_Hero()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAProfileCard.Slot.Hero)
}

void CMsgDOTAProfileCard_Slot_Hero::InitAsDefaultInstance() {
}

CMsgDOTAProfileCard_Slot_Hero::CMsgDOTAProfileCard_Slot_Hero(const CMsgDOTAProfileCard_Slot_Hero& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard.Slot.Hero)
}

void CMsgDOTAProfileCard_Slot_Hero::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0u;
  hero_wins_ = 0u;
  hero_losses_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAProfileCard_Slot_Hero::~CMsgDOTAProfileCard_Slot_Hero() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard.Slot.Hero)
  SharedDtor();
}

void CMsgDOTAProfileCard_Slot_Hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAProfileCard_Slot_Hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_Hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAProfileCard_Slot_Hero_descriptor_;
}

const CMsgDOTAProfileCard_Slot_Hero& CMsgDOTAProfileCard_Slot_Hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAProfileCard_Slot_Hero* CMsgDOTAProfileCard_Slot_Hero::default_instance_ = NULL;

CMsgDOTAProfileCard_Slot_Hero* CMsgDOTAProfileCard_Slot_Hero::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAProfileCard_Slot_Hero* n = new CMsgDOTAProfileCard_Slot_Hero;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAProfileCard_Slot_Hero::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAProfileCard_Slot_Hero*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(hero_id_, hero_losses_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAProfileCard_Slot_Hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAProfileCard.Slot.Hero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hero_wins;
        break;
      }

      // optional uint32 hero_wins = 2;
      case 2: {
        if (tag == 16) {
         parse_hero_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_wins_)));
          set_has_hero_wins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hero_losses;
        break;
      }

      // optional uint32 hero_losses = 3;
      case 3: {
        if (tag == 24) {
         parse_hero_losses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_losses_)));
          set_has_hero_losses();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAProfileCard.Slot.Hero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAProfileCard.Slot.Hero)
  return false;
#undef DO_
}

void CMsgDOTAProfileCard_Slot_Hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAProfileCard.Slot.Hero)
  // optional uint32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // optional uint32 hero_wins = 2;
  if (has_hero_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_wins(), output);
  }

  // optional uint32 hero_losses = 3;
  if (has_hero_losses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_losses(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAProfileCard.Slot.Hero)
}

::google::protobuf::uint8* CMsgDOTAProfileCard_Slot_Hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard.Slot.Hero)
  // optional uint32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // optional uint32 hero_wins = 2;
  if (has_hero_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_wins(), target);
  }

  // optional uint32 hero_losses = 3;
  if (has_hero_losses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_losses(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard.Slot.Hero)
  return target;
}

int CMsgDOTAProfileCard_Slot_Hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 hero_wins = 2;
    if (has_hero_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_wins());
    }

    // optional uint32 hero_losses = 3;
    if (has_hero_losses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_losses());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Hero::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAProfileCard_Slot_Hero* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAProfileCard_Slot_Hero>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Hero::MergeFrom(const CMsgDOTAProfileCard_Slot_Hero& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_hero_wins()) {
      set_hero_wins(from.hero_wins());
    }
    if (from.has_hero_losses()) {
      set_hero_losses(from.hero_losses());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAProfileCard_Slot_Hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Hero::CopyFrom(const CMsgDOTAProfileCard_Slot_Hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Hero::IsInitialized() const {

  return true;
}

void CMsgDOTAProfileCard_Slot_Hero::Swap(CMsgDOTAProfileCard_Slot_Hero* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProfileCard_Slot_Hero::InternalSwap(CMsgDOTAProfileCard_Slot_Hero* other) {
  std::swap(hero_id_, other->hero_id_);
  std::swap(hero_wins_, other->hero_wins_);
  std::swap(hero_losses_, other->hero_losses_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAProfileCard_Slot_Hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAProfileCard_Slot_Hero_descriptor_;
  metadata.reflection = CMsgDOTAProfileCard_Slot_Hero_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAProfileCard_Slot_Emoticon::kEmoticonIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAProfileCard_Slot_Emoticon::CMsgDOTAProfileCard_Slot_Emoticon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAProfileCard.Slot.Emoticon)
}

void CMsgDOTAProfileCard_Slot_Emoticon::InitAsDefaultInstance() {
}

CMsgDOTAProfileCard_Slot_Emoticon::CMsgDOTAProfileCard_Slot_Emoticon(const CMsgDOTAProfileCard_Slot_Emoticon& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard.Slot.Emoticon)
}

void CMsgDOTAProfileCard_Slot_Emoticon::SharedCtor() {
  _cached_size_ = 0;
  emoticon_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAProfileCard_Slot_Emoticon::~CMsgDOTAProfileCard_Slot_Emoticon() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard.Slot.Emoticon)
  SharedDtor();
}

void CMsgDOTAProfileCard_Slot_Emoticon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAProfileCard_Slot_Emoticon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_Emoticon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAProfileCard_Slot_Emoticon_descriptor_;
}

const CMsgDOTAProfileCard_Slot_Emoticon& CMsgDOTAProfileCard_Slot_Emoticon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAProfileCard_Slot_Emoticon* CMsgDOTAProfileCard_Slot_Emoticon::default_instance_ = NULL;

CMsgDOTAProfileCard_Slot_Emoticon* CMsgDOTAProfileCard_Slot_Emoticon::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAProfileCard_Slot_Emoticon* n = new CMsgDOTAProfileCard_Slot_Emoticon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAProfileCard_Slot_Emoticon::Clear() {
  emoticon_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAProfileCard_Slot_Emoticon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAProfileCard.Slot.Emoticon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 emoticon_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &emoticon_id_)));
          set_has_emoticon_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAProfileCard.Slot.Emoticon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAProfileCard.Slot.Emoticon)
  return false;
#undef DO_
}

void CMsgDOTAProfileCard_Slot_Emoticon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAProfileCard.Slot.Emoticon)
  // optional uint32 emoticon_id = 1;
  if (has_emoticon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->emoticon_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAProfileCard.Slot.Emoticon)
}

::google::protobuf::uint8* CMsgDOTAProfileCard_Slot_Emoticon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard.Slot.Emoticon)
  // optional uint32 emoticon_id = 1;
  if (has_emoticon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->emoticon_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard.Slot.Emoticon)
  return target;
}

int CMsgDOTAProfileCard_Slot_Emoticon::ByteSize() const {
  int total_size = 0;

  // optional uint32 emoticon_id = 1;
  if (has_emoticon_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->emoticon_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Emoticon::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAProfileCard_Slot_Emoticon* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAProfileCard_Slot_Emoticon>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Emoticon::MergeFrom(const CMsgDOTAProfileCard_Slot_Emoticon& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_emoticon_id()) {
      set_emoticon_id(from.emoticon_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAProfileCard_Slot_Emoticon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Emoticon::CopyFrom(const CMsgDOTAProfileCard_Slot_Emoticon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Emoticon::IsInitialized() const {

  return true;
}

void CMsgDOTAProfileCard_Slot_Emoticon::Swap(CMsgDOTAProfileCard_Slot_Emoticon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProfileCard_Slot_Emoticon::InternalSwap(CMsgDOTAProfileCard_Slot_Emoticon* other) {
  std::swap(emoticon_id_, other->emoticon_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAProfileCard_Slot_Emoticon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAProfileCard_Slot_Emoticon_descriptor_;
  metadata.reflection = CMsgDOTAProfileCard_Slot_Emoticon_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAProfileCard_Slot::kSlotIdFieldNumber;
const int CMsgDOTAProfileCard_Slot::kTrophyFieldNumber;
const int CMsgDOTAProfileCard_Slot::kStatFieldNumber;
const int CMsgDOTAProfileCard_Slot::kItemFieldNumber;
const int CMsgDOTAProfileCard_Slot::kHeroFieldNumber;
const int CMsgDOTAProfileCard_Slot::kEmoticonFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAProfileCard_Slot::CMsgDOTAProfileCard_Slot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAProfileCard.Slot)
}

void CMsgDOTAProfileCard_Slot::InitAsDefaultInstance() {
  trophy_ = const_cast< ::CMsgDOTAProfileCard_Slot_Trophy*>(&::CMsgDOTAProfileCard_Slot_Trophy::default_instance());
  stat_ = const_cast< ::CMsgDOTAProfileCard_Slot_Stat*>(&::CMsgDOTAProfileCard_Slot_Stat::default_instance());
  item_ = const_cast< ::CMsgDOTAProfileCard_Slot_Item*>(&::CMsgDOTAProfileCard_Slot_Item::default_instance());
  hero_ = const_cast< ::CMsgDOTAProfileCard_Slot_Hero*>(&::CMsgDOTAProfileCard_Slot_Hero::default_instance());
  emoticon_ = const_cast< ::CMsgDOTAProfileCard_Slot_Emoticon*>(&::CMsgDOTAProfileCard_Slot_Emoticon::default_instance());
}

CMsgDOTAProfileCard_Slot::CMsgDOTAProfileCard_Slot(const CMsgDOTAProfileCard_Slot& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard.Slot)
}

void CMsgDOTAProfileCard_Slot::SharedCtor() {
  _cached_size_ = 0;
  slot_id_ = 0u;
  trophy_ = NULL;
  stat_ = NULL;
  item_ = NULL;
  hero_ = NULL;
  emoticon_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAProfileCard_Slot::~CMsgDOTAProfileCard_Slot() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard.Slot)
  SharedDtor();
}

void CMsgDOTAProfileCard_Slot::SharedDtor() {
  if (this != default_instance_) {
    delete trophy_;
    delete stat_;
    delete item_;
    delete hero_;
    delete emoticon_;
  }
}

void CMsgDOTAProfileCard_Slot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAProfileCard_Slot_descriptor_;
}

const CMsgDOTAProfileCard_Slot& CMsgDOTAProfileCard_Slot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAProfileCard_Slot* CMsgDOTAProfileCard_Slot::default_instance_ = NULL;

CMsgDOTAProfileCard_Slot* CMsgDOTAProfileCard_Slot::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAProfileCard_Slot* n = new CMsgDOTAProfileCard_Slot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAProfileCard_Slot::Clear() {
  if (_has_bits_[0 / 32] & 63u) {
    slot_id_ = 0u;
    if (has_trophy()) {
      if (trophy_ != NULL) trophy_->::CMsgDOTAProfileCard_Slot_Trophy::Clear();
    }
    if (has_stat()) {
      if (stat_ != NULL) stat_->::CMsgDOTAProfileCard_Slot_Stat::Clear();
    }
    if (has_item()) {
      if (item_ != NULL) item_->::CMsgDOTAProfileCard_Slot_Item::Clear();
    }
    if (has_hero()) {
      if (hero_ != NULL) hero_->::CMsgDOTAProfileCard_Slot_Hero::Clear();
    }
    if (has_emoticon()) {
      if (emoticon_ != NULL) emoticon_->::CMsgDOTAProfileCard_Slot_Emoticon::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAProfileCard_Slot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAProfileCard.Slot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
          set_has_slot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_trophy;
        break;
      }

      // optional .CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
      case 2: {
        if (tag == 18) {
         parse_trophy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trophy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stat;
        break;
      }

      // optional .CMsgDOTAProfileCard.Slot.Stat stat = 3;
      case 3: {
        if (tag == 26) {
         parse_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_item;
        break;
      }

      // optional .CMsgDOTAProfileCard.Slot.Item item = 4;
      case 4: {
        if (tag == 34) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_hero;
        break;
      }

      // optional .CMsgDOTAProfileCard.Slot.Hero hero = 5;
      case 5: {
        if (tag == 42) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_emoticon;
        break;
      }

      // optional .CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
      case 6: {
        if (tag == 50) {
         parse_emoticon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emoticon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAProfileCard.Slot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAProfileCard.Slot)
  return false;
#undef DO_
}

void CMsgDOTAProfileCard_Slot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAProfileCard.Slot)
  // optional uint32 slot_id = 1;
  if (has_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot_id(), output);
  }

  // optional .CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
  if (has_trophy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->trophy_, output);
  }

  // optional .CMsgDOTAProfileCard.Slot.Stat stat = 3;
  if (has_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->stat_, output);
  }

  // optional .CMsgDOTAProfileCard.Slot.Item item = 4;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->item_, output);
  }

  // optional .CMsgDOTAProfileCard.Slot.Hero hero = 5;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->hero_, output);
  }

  // optional .CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
  if (has_emoticon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->emoticon_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAProfileCard.Slot)
}

::google::protobuf::uint8* CMsgDOTAProfileCard_Slot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard.Slot)
  // optional uint32 slot_id = 1;
  if (has_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot_id(), target);
  }

  // optional .CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
  if (has_trophy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->trophy_, target);
  }

  // optional .CMsgDOTAProfileCard.Slot.Stat stat = 3;
  if (has_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->stat_, target);
  }

  // optional .CMsgDOTAProfileCard.Slot.Item item = 4;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->item_, target);
  }

  // optional .CMsgDOTAProfileCard.Slot.Hero hero = 5;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->hero_, target);
  }

  // optional .CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
  if (has_emoticon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->emoticon_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard.Slot)
  return target;
}

int CMsgDOTAProfileCard_Slot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 slot_id = 1;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional .CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
    if (has_trophy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trophy_);
    }

    // optional .CMsgDOTAProfileCard.Slot.Stat stat = 3;
    if (has_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stat_);
    }

    // optional .CMsgDOTAProfileCard.Slot.Item item = 4;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->item_);
    }

    // optional .CMsgDOTAProfileCard.Slot.Hero hero = 5;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hero_);
    }

    // optional .CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
    if (has_emoticon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->emoticon_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProfileCard_Slot::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAProfileCard_Slot* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAProfileCard_Slot>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot::MergeFrom(const CMsgDOTAProfileCard_Slot& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_id()) {
      set_slot_id(from.slot_id());
    }
    if (from.has_trophy()) {
      mutable_trophy()->::CMsgDOTAProfileCard_Slot_Trophy::MergeFrom(from.trophy());
    }
    if (from.has_stat()) {
      mutable_stat()->::CMsgDOTAProfileCard_Slot_Stat::MergeFrom(from.stat());
    }
    if (from.has_item()) {
      mutable_item()->::CMsgDOTAProfileCard_Slot_Item::MergeFrom(from.item());
    }
    if (from.has_hero()) {
      mutable_hero()->::CMsgDOTAProfileCard_Slot_Hero::MergeFrom(from.hero());
    }
    if (from.has_emoticon()) {
      mutable_emoticon()->::CMsgDOTAProfileCard_Slot_Emoticon::MergeFrom(from.emoticon());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAProfileCard_Slot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot::CopyFrom(const CMsgDOTAProfileCard_Slot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot::IsInitialized() const {

  return true;
}

void CMsgDOTAProfileCard_Slot::Swap(CMsgDOTAProfileCard_Slot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProfileCard_Slot::InternalSwap(CMsgDOTAProfileCard_Slot* other) {
  std::swap(slot_id_, other->slot_id_);
  std::swap(trophy_, other->trophy_);
  std::swap(stat_, other->stat_);
  std::swap(item_, other->item_);
  std::swap(hero_, other->hero_);
  std::swap(emoticon_, other->emoticon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAProfileCard_Slot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAProfileCard_Slot_descriptor_;
  metadata.reflection = CMsgDOTAProfileCard_Slot_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAProfileCard::kAccountIdFieldNumber;
const int CMsgDOTAProfileCard::kBackgroundDefIndexFieldNumber;
const int CMsgDOTAProfileCard::kSlotsFieldNumber;
const int CMsgDOTAProfileCard::kBadgePointsFieldNumber;
const int CMsgDOTAProfileCard::kEventPointsFieldNumber;
const int CMsgDOTAProfileCard::kEventIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAProfileCard::CMsgDOTAProfileCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAProfileCard)
}

void CMsgDOTAProfileCard::InitAsDefaultInstance() {
}

CMsgDOTAProfileCard::CMsgDOTAProfileCard(const CMsgDOTAProfileCard& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard)
}

void CMsgDOTAProfileCard::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  background_def_index_ = 0u;
  badge_points_ = 0u;
  event_points_ = 0u;
  event_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAProfileCard::~CMsgDOTAProfileCard() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard)
  SharedDtor();
}

void CMsgDOTAProfileCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAProfileCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAProfileCard_descriptor_;
}

const CMsgDOTAProfileCard& CMsgDOTAProfileCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAProfileCard* CMsgDOTAProfileCard::default_instance_ = NULL;

CMsgDOTAProfileCard* CMsgDOTAProfileCard::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAProfileCard* n = new CMsgDOTAProfileCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAProfileCard::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAProfileCard*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 59u) {
    ZR_(account_id_, background_def_index_);
    ZR_(badge_points_, event_id_);
  }

#undef ZR_HELPER_
#undef ZR_

  slots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAProfileCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAProfileCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_background_def_index;
        break;
      }

      // optional uint32 background_def_index = 2;
      case 2: {
        if (tag == 16) {
         parse_background_def_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &background_def_index_)));
          set_has_background_def_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_slots;
        break;
      }

      // repeated .CMsgDOTAProfileCard.Slot slots = 3;
      case 3: {
        if (tag == 26) {
         parse_slots:
          DO_(input->IncrementRecursionDepth());
         parse_loop_slots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_slots()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_slots;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_badge_points;
        break;
      }

      // optional uint32 badge_points = 4;
      case 4: {
        if (tag == 32) {
         parse_badge_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badge_points_)));
          set_has_badge_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_event_points;
        break;
      }

      // optional uint32 event_points = 5;
      case 5: {
        if (tag == 40) {
         parse_event_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_points_)));
          set_has_event_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_event_id;
        break;
      }

      // optional uint32 event_id = 6;
      case 6: {
        if (tag == 48) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAProfileCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAProfileCard)
  return false;
#undef DO_
}

void CMsgDOTAProfileCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAProfileCard)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 background_def_index = 2;
  if (has_background_def_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->background_def_index(), output);
  }

  // repeated .CMsgDOTAProfileCard.Slot slots = 3;
  for (unsigned int i = 0, n = this->slots_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slots(i), output);
  }

  // optional uint32 badge_points = 4;
  if (has_badge_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->badge_points(), output);
  }

  // optional uint32 event_points = 5;
  if (has_event_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->event_points(), output);
  }

  // optional uint32 event_id = 6;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->event_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAProfileCard)
}

::google::protobuf::uint8* CMsgDOTAProfileCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 background_def_index = 2;
  if (has_background_def_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->background_def_index(), target);
  }

  // repeated .CMsgDOTAProfileCard.Slot slots = 3;
  for (unsigned int i = 0, n = this->slots_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->slots(i), target);
  }

  // optional uint32 badge_points = 4;
  if (has_badge_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->badge_points(), target);
  }

  // optional uint32 event_points = 5;
  if (has_event_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->event_points(), target);
  }

  // optional uint32 event_id = 6;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->event_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard)
  return target;
}

int CMsgDOTAProfileCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 59u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 background_def_index = 2;
    if (has_background_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->background_def_index());
    }

    // optional uint32 badge_points = 4;
    if (has_badge_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badge_points());
    }

    // optional uint32 event_points = 5;
    if (has_event_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_points());
    }

    // optional uint32 event_id = 6;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

  }
  // repeated .CMsgDOTAProfileCard.Slot slots = 3;
  total_size += 1 * this->slots_size();
  for (int i = 0; i < this->slots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slots(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProfileCard::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAProfileCard* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAProfileCard>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard::MergeFrom(const CMsgDOTAProfileCard& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  slots_.MergeFrom(from.slots_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_background_def_index()) {
      set_background_def_index(from.background_def_index());
    }
    if (from.has_badge_points()) {
      set_badge_points(from.badge_points());
    }
    if (from.has_event_points()) {
      set_event_points(from.event_points());
    }
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAProfileCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard::CopyFrom(const CMsgDOTAProfileCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard::IsInitialized() const {

  return true;
}

void CMsgDOTAProfileCard::Swap(CMsgDOTAProfileCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProfileCard::InternalSwap(CMsgDOTAProfileCard* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(background_def_index_, other->background_def_index_);
  slots_.UnsafeArenaSwap(&other->slots_);
  std::swap(badge_points_, other->badge_points_);
  std::swap(event_points_, other->event_points_);
  std::swap(event_id_, other->event_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAProfileCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAProfileCard_descriptor_;
  metadata.reflection = CMsgDOTAProfileCard_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAProfileCard_Slot_Trophy

// optional uint32 trophy_id = 1;
bool CMsgDOTAProfileCard_Slot_Trophy::has_trophy_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAProfileCard_Slot_Trophy::set_has_trophy_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAProfileCard_Slot_Trophy::clear_has_trophy_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAProfileCard_Slot_Trophy::clear_trophy_id() {
  trophy_id_ = 0u;
  clear_has_trophy_id();
}
 ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Trophy::trophy_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Trophy.trophy_id)
  return trophy_id_;
}
 void CMsgDOTAProfileCard_Slot_Trophy::set_trophy_id(::google::protobuf::uint32 value) {
  set_has_trophy_id();
  trophy_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Trophy.trophy_id)
}

// optional uint32 trophy_score = 2;
bool CMsgDOTAProfileCard_Slot_Trophy::has_trophy_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAProfileCard_Slot_Trophy::set_has_trophy_score() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAProfileCard_Slot_Trophy::clear_has_trophy_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAProfileCard_Slot_Trophy::clear_trophy_score() {
  trophy_score_ = 0u;
  clear_has_trophy_score();
}
 ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Trophy::trophy_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Trophy.trophy_score)
  return trophy_score_;
}
 void CMsgDOTAProfileCard_Slot_Trophy::set_trophy_score(::google::protobuf::uint32 value) {
  set_has_trophy_score();
  trophy_score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Trophy.trophy_score)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Stat

// optional .CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_SoloRank];
bool CMsgDOTAProfileCard_Slot_Stat::has_stat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAProfileCard_Slot_Stat::set_has_stat_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAProfileCard_Slot_Stat::clear_has_stat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAProfileCard_Slot_Stat::clear_stat_id() {
  stat_id_ = 1;
  clear_has_stat_id();
}
 ::CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard_Slot_Stat::stat_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Stat.stat_id)
  return static_cast< ::CMsgDOTAProfileCard_EStatID >(stat_id_);
}
 void CMsgDOTAProfileCard_Slot_Stat::set_stat_id(::CMsgDOTAProfileCard_EStatID value) {
  assert(::CMsgDOTAProfileCard_EStatID_IsValid(value));
  set_has_stat_id();
  stat_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Stat.stat_id)
}

// optional uint32 stat_score = 2;
bool CMsgDOTAProfileCard_Slot_Stat::has_stat_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAProfileCard_Slot_Stat::set_has_stat_score() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAProfileCard_Slot_Stat::clear_has_stat_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAProfileCard_Slot_Stat::clear_stat_score() {
  stat_score_ = 0u;
  clear_has_stat_score();
}
 ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Stat::stat_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Stat.stat_score)
  return stat_score_;
}
 void CMsgDOTAProfileCard_Slot_Stat::set_stat_score(::google::protobuf::uint32 value) {
  set_has_stat_score();
  stat_score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Stat.stat_score)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Item

// optional bytes serialized_item = 1;
bool CMsgDOTAProfileCard_Slot_Item::has_serialized_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAProfileCard_Slot_Item::set_has_serialized_item() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAProfileCard_Slot_Item::clear_has_serialized_item() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAProfileCard_Slot_Item::clear_serialized_item() {
  serialized_item_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serialized_item();
}
 const ::std::string& CMsgDOTAProfileCard_Slot_Item::serialized_item() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Item.serialized_item)
  return serialized_item_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAProfileCard_Slot_Item::set_serialized_item(const ::std::string& value) {
  set_has_serialized_item();
  serialized_item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Item.serialized_item)
}
 void CMsgDOTAProfileCard_Slot_Item::set_serialized_item(const char* value) {
  set_has_serialized_item();
  serialized_item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAProfileCard.Slot.Item.serialized_item)
}
 void CMsgDOTAProfileCard_Slot_Item::set_serialized_item(const void* value, size_t size) {
  set_has_serialized_item();
  serialized_item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAProfileCard.Slot.Item.serialized_item)
}
 ::std::string* CMsgDOTAProfileCard_Slot_Item::mutable_serialized_item() {
  set_has_serialized_item();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.Item.serialized_item)
  return serialized_item_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTAProfileCard_Slot_Item::release_serialized_item() {
  clear_has_serialized_item();
  return serialized_item_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAProfileCard_Slot_Item::set_allocated_serialized_item(::std::string* serialized_item) {
  if (serialized_item != NULL) {
    set_has_serialized_item();
  } else {
    clear_has_serialized_item();
  }
  serialized_item_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialized_item);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.Item.serialized_item)
}

// optional uint64 item_id = 2;
bool CMsgDOTAProfileCard_Slot_Item::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAProfileCard_Slot_Item::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAProfileCard_Slot_Item::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAProfileCard_Slot_Item::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
 ::google::protobuf::uint64 CMsgDOTAProfileCard_Slot_Item::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Item.item_id)
  return item_id_;
}
 void CMsgDOTAProfileCard_Slot_Item::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Item.item_id)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Hero

// optional uint32 hero_id = 1;
bool CMsgDOTAProfileCard_Slot_Hero::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAProfileCard_Slot_Hero::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAProfileCard_Slot_Hero::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAProfileCard_Slot_Hero::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
 ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Hero::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Hero.hero_id)
  return hero_id_;
}
 void CMsgDOTAProfileCard_Slot_Hero::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Hero.hero_id)
}

// optional uint32 hero_wins = 2;
bool CMsgDOTAProfileCard_Slot_Hero::has_hero_wins() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAProfileCard_Slot_Hero::set_has_hero_wins() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAProfileCard_Slot_Hero::clear_has_hero_wins() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAProfileCard_Slot_Hero::clear_hero_wins() {
  hero_wins_ = 0u;
  clear_has_hero_wins();
}
 ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Hero::hero_wins() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Hero.hero_wins)
  return hero_wins_;
}
 void CMsgDOTAProfileCard_Slot_Hero::set_hero_wins(::google::protobuf::uint32 value) {
  set_has_hero_wins();
  hero_wins_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Hero.hero_wins)
}

// optional uint32 hero_losses = 3;
bool CMsgDOTAProfileCard_Slot_Hero::has_hero_losses() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAProfileCard_Slot_Hero::set_has_hero_losses() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAProfileCard_Slot_Hero::clear_has_hero_losses() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAProfileCard_Slot_Hero::clear_hero_losses() {
  hero_losses_ = 0u;
  clear_has_hero_losses();
}
 ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Hero::hero_losses() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Hero.hero_losses)
  return hero_losses_;
}
 void CMsgDOTAProfileCard_Slot_Hero::set_hero_losses(::google::protobuf::uint32 value) {
  set_has_hero_losses();
  hero_losses_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Hero.hero_losses)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Emoticon

// optional uint32 emoticon_id = 1;
bool CMsgDOTAProfileCard_Slot_Emoticon::has_emoticon_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAProfileCard_Slot_Emoticon::set_has_emoticon_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAProfileCard_Slot_Emoticon::clear_has_emoticon_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAProfileCard_Slot_Emoticon::clear_emoticon_id() {
  emoticon_id_ = 0u;
  clear_has_emoticon_id();
}
 ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Emoticon::emoticon_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Emoticon.emoticon_id)
  return emoticon_id_;
}
 void CMsgDOTAProfileCard_Slot_Emoticon::set_emoticon_id(::google::protobuf::uint32 value) {
  set_has_emoticon_id();
  emoticon_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Emoticon.emoticon_id)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot

// optional uint32 slot_id = 1;
bool CMsgDOTAProfileCard_Slot::has_slot_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAProfileCard_Slot::set_has_slot_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAProfileCard_Slot::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAProfileCard_Slot::clear_slot_id() {
  slot_id_ = 0u;
  clear_has_slot_id();
}
 ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot::slot_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.slot_id)
  return slot_id_;
}
 void CMsgDOTAProfileCard_Slot::set_slot_id(::google::protobuf::uint32 value) {
  set_has_slot_id();
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.slot_id)
}

// optional .CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
bool CMsgDOTAProfileCard_Slot::has_trophy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAProfileCard_Slot::set_has_trophy() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAProfileCard_Slot::clear_has_trophy() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAProfileCard_Slot::clear_trophy() {
  if (trophy_ != NULL) trophy_->::CMsgDOTAProfileCard_Slot_Trophy::Clear();
  clear_has_trophy();
}
const ::CMsgDOTAProfileCard_Slot_Trophy& CMsgDOTAProfileCard_Slot::trophy() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.trophy)
  return trophy_ != NULL ? *trophy_ : *default_instance_->trophy_;
}
::CMsgDOTAProfileCard_Slot_Trophy* CMsgDOTAProfileCard_Slot::mutable_trophy() {
  set_has_trophy();
  if (trophy_ == NULL) {
    trophy_ = new ::CMsgDOTAProfileCard_Slot_Trophy;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.trophy)
  return trophy_;
}
::CMsgDOTAProfileCard_Slot_Trophy* CMsgDOTAProfileCard_Slot::release_trophy() {
  clear_has_trophy();
  ::CMsgDOTAProfileCard_Slot_Trophy* temp = trophy_;
  trophy_ = NULL;
  return temp;
}
void CMsgDOTAProfileCard_Slot::set_allocated_trophy(::CMsgDOTAProfileCard_Slot_Trophy* trophy) {
  delete trophy_;
  trophy_ = trophy;
  if (trophy) {
    set_has_trophy();
  } else {
    clear_has_trophy();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.trophy)
}

// optional .CMsgDOTAProfileCard.Slot.Stat stat = 3;
bool CMsgDOTAProfileCard_Slot::has_stat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAProfileCard_Slot::set_has_stat() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAProfileCard_Slot::clear_has_stat() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAProfileCard_Slot::clear_stat() {
  if (stat_ != NULL) stat_->::CMsgDOTAProfileCard_Slot_Stat::Clear();
  clear_has_stat();
}
const ::CMsgDOTAProfileCard_Slot_Stat& CMsgDOTAProfileCard_Slot::stat() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.stat)
  return stat_ != NULL ? *stat_ : *default_instance_->stat_;
}
::CMsgDOTAProfileCard_Slot_Stat* CMsgDOTAProfileCard_Slot::mutable_stat() {
  set_has_stat();
  if (stat_ == NULL) {
    stat_ = new ::CMsgDOTAProfileCard_Slot_Stat;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.stat)
  return stat_;
}
::CMsgDOTAProfileCard_Slot_Stat* CMsgDOTAProfileCard_Slot::release_stat() {
  clear_has_stat();
  ::CMsgDOTAProfileCard_Slot_Stat* temp = stat_;
  stat_ = NULL;
  return temp;
}
void CMsgDOTAProfileCard_Slot::set_allocated_stat(::CMsgDOTAProfileCard_Slot_Stat* stat) {
  delete stat_;
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.stat)
}

// optional .CMsgDOTAProfileCard.Slot.Item item = 4;
bool CMsgDOTAProfileCard_Slot::has_item() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAProfileCard_Slot::set_has_item() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAProfileCard_Slot::clear_has_item() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAProfileCard_Slot::clear_item() {
  if (item_ != NULL) item_->::CMsgDOTAProfileCard_Slot_Item::Clear();
  clear_has_item();
}
const ::CMsgDOTAProfileCard_Slot_Item& CMsgDOTAProfileCard_Slot::item() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.item)
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
::CMsgDOTAProfileCard_Slot_Item* CMsgDOTAProfileCard_Slot::mutable_item() {
  set_has_item();
  if (item_ == NULL) {
    item_ = new ::CMsgDOTAProfileCard_Slot_Item;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.item)
  return item_;
}
::CMsgDOTAProfileCard_Slot_Item* CMsgDOTAProfileCard_Slot::release_item() {
  clear_has_item();
  ::CMsgDOTAProfileCard_Slot_Item* temp = item_;
  item_ = NULL;
  return temp;
}
void CMsgDOTAProfileCard_Slot::set_allocated_item(::CMsgDOTAProfileCard_Slot_Item* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.item)
}

// optional .CMsgDOTAProfileCard.Slot.Hero hero = 5;
bool CMsgDOTAProfileCard_Slot::has_hero() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAProfileCard_Slot::set_has_hero() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAProfileCard_Slot::clear_has_hero() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAProfileCard_Slot::clear_hero() {
  if (hero_ != NULL) hero_->::CMsgDOTAProfileCard_Slot_Hero::Clear();
  clear_has_hero();
}
const ::CMsgDOTAProfileCard_Slot_Hero& CMsgDOTAProfileCard_Slot::hero() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.hero)
  return hero_ != NULL ? *hero_ : *default_instance_->hero_;
}
::CMsgDOTAProfileCard_Slot_Hero* CMsgDOTAProfileCard_Slot::mutable_hero() {
  set_has_hero();
  if (hero_ == NULL) {
    hero_ = new ::CMsgDOTAProfileCard_Slot_Hero;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.hero)
  return hero_;
}
::CMsgDOTAProfileCard_Slot_Hero* CMsgDOTAProfileCard_Slot::release_hero() {
  clear_has_hero();
  ::CMsgDOTAProfileCard_Slot_Hero* temp = hero_;
  hero_ = NULL;
  return temp;
}
void CMsgDOTAProfileCard_Slot::set_allocated_hero(::CMsgDOTAProfileCard_Slot_Hero* hero) {
  delete hero_;
  hero_ = hero;
  if (hero) {
    set_has_hero();
  } else {
    clear_has_hero();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.hero)
}

// optional .CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
bool CMsgDOTAProfileCard_Slot::has_emoticon() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAProfileCard_Slot::set_has_emoticon() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAProfileCard_Slot::clear_has_emoticon() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAProfileCard_Slot::clear_emoticon() {
  if (emoticon_ != NULL) emoticon_->::CMsgDOTAProfileCard_Slot_Emoticon::Clear();
  clear_has_emoticon();
}
const ::CMsgDOTAProfileCard_Slot_Emoticon& CMsgDOTAProfileCard_Slot::emoticon() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.emoticon)
  return emoticon_ != NULL ? *emoticon_ : *default_instance_->emoticon_;
}
::CMsgDOTAProfileCard_Slot_Emoticon* CMsgDOTAProfileCard_Slot::mutable_emoticon() {
  set_has_emoticon();
  if (emoticon_ == NULL) {
    emoticon_ = new ::CMsgDOTAProfileCard_Slot_Emoticon;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.emoticon)
  return emoticon_;
}
::CMsgDOTAProfileCard_Slot_Emoticon* CMsgDOTAProfileCard_Slot::release_emoticon() {
  clear_has_emoticon();
  ::CMsgDOTAProfileCard_Slot_Emoticon* temp = emoticon_;
  emoticon_ = NULL;
  return temp;
}
void CMsgDOTAProfileCard_Slot::set_allocated_emoticon(::CMsgDOTAProfileCard_Slot_Emoticon* emoticon) {
  delete emoticon_;
  emoticon_ = emoticon;
  if (emoticon) {
    set_has_emoticon();
  } else {
    clear_has_emoticon();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.emoticon)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard

// optional uint32 account_id = 1;
bool CMsgDOTAProfileCard::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAProfileCard::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAProfileCard::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAProfileCard::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
 ::google::protobuf::uint32 CMsgDOTAProfileCard::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.account_id)
  return account_id_;
}
 void CMsgDOTAProfileCard::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.account_id)
}

// optional uint32 background_def_index = 2;
bool CMsgDOTAProfileCard::has_background_def_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAProfileCard::set_has_background_def_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAProfileCard::clear_has_background_def_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAProfileCard::clear_background_def_index() {
  background_def_index_ = 0u;
  clear_has_background_def_index();
}
 ::google::protobuf::uint32 CMsgDOTAProfileCard::background_def_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.background_def_index)
  return background_def_index_;
}
 void CMsgDOTAProfileCard::set_background_def_index(::google::protobuf::uint32 value) {
  set_has_background_def_index();
  background_def_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.background_def_index)
}

// repeated .CMsgDOTAProfileCard.Slot slots = 3;
int CMsgDOTAProfileCard::slots_size() const {
  return slots_.size();
}
void CMsgDOTAProfileCard::clear_slots() {
  slots_.Clear();
}
const ::CMsgDOTAProfileCard_Slot& CMsgDOTAProfileCard::slots(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.slots)
  return slots_.Get(index);
}
::CMsgDOTAProfileCard_Slot* CMsgDOTAProfileCard::mutable_slots(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.slots)
  return slots_.Mutable(index);
}
::CMsgDOTAProfileCard_Slot* CMsgDOTAProfileCard::add_slots() {
  // @@protoc_insertion_point(field_add:CMsgDOTAProfileCard.slots)
  return slots_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTAProfileCard_Slot >*
CMsgDOTAProfileCard::mutable_slots() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAProfileCard.slots)
  return &slots_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProfileCard_Slot >&
CMsgDOTAProfileCard::slots() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAProfileCard.slots)
  return slots_;
}

// optional uint32 badge_points = 4;
bool CMsgDOTAProfileCard::has_badge_points() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAProfileCard::set_has_badge_points() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAProfileCard::clear_has_badge_points() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAProfileCard::clear_badge_points() {
  badge_points_ = 0u;
  clear_has_badge_points();
}
 ::google::protobuf::uint32 CMsgDOTAProfileCard::badge_points() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.badge_points)
  return badge_points_;
}
 void CMsgDOTAProfileCard::set_badge_points(::google::protobuf::uint32 value) {
  set_has_badge_points();
  badge_points_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.badge_points)
}

// optional uint32 event_points = 5;
bool CMsgDOTAProfileCard::has_event_points() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAProfileCard::set_has_event_points() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAProfileCard::clear_has_event_points() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAProfileCard::clear_event_points() {
  event_points_ = 0u;
  clear_has_event_points();
}
 ::google::protobuf::uint32 CMsgDOTAProfileCard::event_points() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.event_points)
  return event_points_;
}
 void CMsgDOTAProfileCard::set_event_points(::google::protobuf::uint32 value) {
  set_has_event_points();
  event_points_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.event_points)
}

// optional uint32 event_id = 6;
bool CMsgDOTAProfileCard::has_event_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAProfileCard::set_has_event_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAProfileCard::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAProfileCard::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
 ::google::protobuf::uint32 CMsgDOTAProfileCard::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.event_id)
  return event_id_;
}
 void CMsgDOTAProfileCard::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.event_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToClientNewBloomTimingUpdated::kIsActiveFieldNumber;
const int CMsgGCToClientNewBloomTimingUpdated::kNextTransitionTimeFieldNumber;
const int CMsgGCToClientNewBloomTimingUpdated::kBonusAmountFieldNumber;
const int CMsgGCToClientNewBloomTimingUpdated::kStandbyDurationFieldNumber;
const int CMsgGCToClientNewBloomTimingUpdated::kTransitionTimeFieldNumber;
#endif  // !_MSC_VER

CMsgGCToClientNewBloomTimingUpdated::CMsgGCToClientNewBloomTimingUpdated()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToClientNewBloomTimingUpdated)
}

void CMsgGCToClientNewBloomTimingUpdated::InitAsDefaultInstance() {
}

CMsgGCToClientNewBloomTimingUpdated::CMsgGCToClientNewBloomTimingUpdated(const CMsgGCToClientNewBloomTimingUpdated& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientNewBloomTimingUpdated)
}

void CMsgGCToClientNewBloomTimingUpdated::SharedCtor() {
  _cached_size_ = 0;
  is_active_ = false;
  next_transition_time_ = 0u;
  bonus_amount_ = 0u;
  standby_duration_ = 0u;
  transition_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToClientNewBloomTimingUpdated::~CMsgGCToClientNewBloomTimingUpdated() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientNewBloomTimingUpdated)
  SharedDtor();
}

void CMsgGCToClientNewBloomTimingUpdated::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToClientNewBloomTimingUpdated::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToClientNewBloomTimingUpdated::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToClientNewBloomTimingUpdated_descriptor_;
}

const CMsgGCToClientNewBloomTimingUpdated& CMsgGCToClientNewBloomTimingUpdated::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgGCToClientNewBloomTimingUpdated* CMsgGCToClientNewBloomTimingUpdated::default_instance_ = NULL;

CMsgGCToClientNewBloomTimingUpdated* CMsgGCToClientNewBloomTimingUpdated::New(::google::protobuf::Arena* arena) const {
  CMsgGCToClientNewBloomTimingUpdated* n = new CMsgGCToClientNewBloomTimingUpdated;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToClientNewBloomTimingUpdated::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgGCToClientNewBloomTimingUpdated*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(is_active_, transition_time_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgGCToClientNewBloomTimingUpdated::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToClientNewBloomTimingUpdated)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
          set_has_is_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_next_transition_time;
        break;
      }

      // optional uint32 next_transition_time = 2;
      case 2: {
        if (tag == 16) {
         parse_next_transition_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_transition_time_)));
          set_has_next_transition_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bonus_amount;
        break;
      }

      // optional uint32 bonus_amount = 3;
      case 3: {
        if (tag == 24) {
         parse_bonus_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonus_amount_)));
          set_has_bonus_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_standby_duration;
        break;
      }

      // optional uint32 standby_duration = 4;
      case 4: {
        if (tag == 32) {
         parse_standby_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &standby_duration_)));
          set_has_standby_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_transition_time;
        break;
      }

      // optional uint32 transition_time = 5;
      case 5: {
        if (tag == 40) {
         parse_transition_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transition_time_)));
          set_has_transition_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToClientNewBloomTimingUpdated)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToClientNewBloomTimingUpdated)
  return false;
#undef DO_
}

void CMsgGCToClientNewBloomTimingUpdated::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToClientNewBloomTimingUpdated)
  // optional bool is_active = 1;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_active(), output);
  }

  // optional uint32 next_transition_time = 2;
  if (has_next_transition_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->next_transition_time(), output);
  }

  // optional uint32 bonus_amount = 3;
  if (has_bonus_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bonus_amount(), output);
  }

  // optional uint32 standby_duration = 4;
  if (has_standby_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->standby_duration(), output);
  }

  // optional uint32 transition_time = 5;
  if (has_transition_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->transition_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToClientNewBloomTimingUpdated)
}

::google::protobuf::uint8* CMsgGCToClientNewBloomTimingUpdated::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientNewBloomTimingUpdated)
  // optional bool is_active = 1;
  if (has_is_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_active(), target);
  }

  // optional uint32 next_transition_time = 2;
  if (has_next_transition_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->next_transition_time(), target);
  }

  // optional uint32 bonus_amount = 3;
  if (has_bonus_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bonus_amount(), target);
  }

  // optional uint32 standby_duration = 4;
  if (has_standby_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->standby_duration(), target);
  }

  // optional uint32 transition_time = 5;
  if (has_transition_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->transition_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientNewBloomTimingUpdated)
  return target;
}

int CMsgGCToClientNewBloomTimingUpdated::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional bool is_active = 1;
    if (has_is_active()) {
      total_size += 1 + 1;
    }

    // optional uint32 next_transition_time = 2;
    if (has_next_transition_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_transition_time());
    }

    // optional uint32 bonus_amount = 3;
    if (has_bonus_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonus_amount());
    }

    // optional uint32 standby_duration = 4;
    if (has_standby_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->standby_duration());
    }

    // optional uint32 transition_time = 5;
    if (has_transition_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->transition_time());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToClientNewBloomTimingUpdated::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgGCToClientNewBloomTimingUpdated* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToClientNewBloomTimingUpdated>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToClientNewBloomTimingUpdated::MergeFrom(const CMsgGCToClientNewBloomTimingUpdated& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_active()) {
      set_is_active(from.is_active());
    }
    if (from.has_next_transition_time()) {
      set_next_transition_time(from.next_transition_time());
    }
    if (from.has_bonus_amount()) {
      set_bonus_amount(from.bonus_amount());
    }
    if (from.has_standby_duration()) {
      set_standby_duration(from.standby_duration());
    }
    if (from.has_transition_time()) {
      set_transition_time(from.transition_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgGCToClientNewBloomTimingUpdated::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientNewBloomTimingUpdated::CopyFrom(const CMsgGCToClientNewBloomTimingUpdated& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientNewBloomTimingUpdated::IsInitialized() const {

  return true;
}

void CMsgGCToClientNewBloomTimingUpdated::Swap(CMsgGCToClientNewBloomTimingUpdated* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientNewBloomTimingUpdated::InternalSwap(CMsgGCToClientNewBloomTimingUpdated* other) {
  std::swap(is_active_, other->is_active_);
  std::swap(next_transition_time_, other->next_transition_time_);
  std::swap(bonus_amount_, other->bonus_amount_);
  std::swap(standby_duration_, other->standby_duration_);
  std::swap(transition_time_, other->transition_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToClientNewBloomTimingUpdated::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToClientNewBloomTimingUpdated_descriptor_;
  metadata.reflection = CMsgGCToClientNewBloomTimingUpdated_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToClientNewBloomTimingUpdated

// optional bool is_active = 1;
bool CMsgGCToClientNewBloomTimingUpdated::has_is_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToClientNewBloomTimingUpdated::set_has_is_active() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToClientNewBloomTimingUpdated::clear_has_is_active() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToClientNewBloomTimingUpdated::clear_is_active() {
  is_active_ = false;
  clear_has_is_active();
}
 bool CMsgGCToClientNewBloomTimingUpdated::is_active() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientNewBloomTimingUpdated.is_active)
  return is_active_;
}
 void CMsgGCToClientNewBloomTimingUpdated::set_is_active(bool value) {
  set_has_is_active();
  is_active_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToClientNewBloomTimingUpdated.is_active)
}

// optional uint32 next_transition_time = 2;
bool CMsgGCToClientNewBloomTimingUpdated::has_next_transition_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToClientNewBloomTimingUpdated::set_has_next_transition_time() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToClientNewBloomTimingUpdated::clear_has_next_transition_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToClientNewBloomTimingUpdated::clear_next_transition_time() {
  next_transition_time_ = 0u;
  clear_has_next_transition_time();
}
 ::google::protobuf::uint32 CMsgGCToClientNewBloomTimingUpdated::next_transition_time() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientNewBloomTimingUpdated.next_transition_time)
  return next_transition_time_;
}
 void CMsgGCToClientNewBloomTimingUpdated::set_next_transition_time(::google::protobuf::uint32 value) {
  set_has_next_transition_time();
  next_transition_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToClientNewBloomTimingUpdated.next_transition_time)
}

// optional uint32 bonus_amount = 3;
bool CMsgGCToClientNewBloomTimingUpdated::has_bonus_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCToClientNewBloomTimingUpdated::set_has_bonus_amount() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCToClientNewBloomTimingUpdated::clear_has_bonus_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCToClientNewBloomTimingUpdated::clear_bonus_amount() {
  bonus_amount_ = 0u;
  clear_has_bonus_amount();
}
 ::google::protobuf::uint32 CMsgGCToClientNewBloomTimingUpdated::bonus_amount() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientNewBloomTimingUpdated.bonus_amount)
  return bonus_amount_;
}
 void CMsgGCToClientNewBloomTimingUpdated::set_bonus_amount(::google::protobuf::uint32 value) {
  set_has_bonus_amount();
  bonus_amount_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToClientNewBloomTimingUpdated.bonus_amount)
}

// optional uint32 standby_duration = 4;
bool CMsgGCToClientNewBloomTimingUpdated::has_standby_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGCToClientNewBloomTimingUpdated::set_has_standby_duration() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGCToClientNewBloomTimingUpdated::clear_has_standby_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGCToClientNewBloomTimingUpdated::clear_standby_duration() {
  standby_duration_ = 0u;
  clear_has_standby_duration();
}
 ::google::protobuf::uint32 CMsgGCToClientNewBloomTimingUpdated::standby_duration() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientNewBloomTimingUpdated.standby_duration)
  return standby_duration_;
}
 void CMsgGCToClientNewBloomTimingUpdated::set_standby_duration(::google::protobuf::uint32 value) {
  set_has_standby_duration();
  standby_duration_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToClientNewBloomTimingUpdated.standby_duration)
}

// optional uint32 transition_time = 5;
bool CMsgGCToClientNewBloomTimingUpdated::has_transition_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgGCToClientNewBloomTimingUpdated::set_has_transition_time() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgGCToClientNewBloomTimingUpdated::clear_has_transition_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgGCToClientNewBloomTimingUpdated::clear_transition_time() {
  transition_time_ = 0u;
  clear_has_transition_time();
}
 ::google::protobuf::uint32 CMsgGCToClientNewBloomTimingUpdated::transition_time() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientNewBloomTimingUpdated.transition_time)
  return transition_time_;
}
 void CMsgGCToClientNewBloomTimingUpdated::set_transition_time(::google::protobuf::uint32 value) {
  set_has_transition_time();
  transition_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToClientNewBloomTimingUpdated.transition_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CSODOTAPlayerChallenge_EFlags_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTAPlayerChallenge_EFlags_descriptor_;
}
bool CSODOTAPlayerChallenge_EFlags_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CSODOTAPlayerChallenge_EFlags CSODOTAPlayerChallenge::eFlag_InstantRerollUncompleted;
const CSODOTAPlayerChallenge_EFlags CSODOTAPlayerChallenge::EFlags_MIN;
const CSODOTAPlayerChallenge_EFlags CSODOTAPlayerChallenge::EFlags_MAX;
const int CSODOTAPlayerChallenge::EFlags_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CSODOTAPlayerChallenge::kAccountIdFieldNumber;
const int CSODOTAPlayerChallenge::kEventIdFieldNumber;
const int CSODOTAPlayerChallenge::kSlotIdFieldNumber;
const int CSODOTAPlayerChallenge::kChallengeTypeFieldNumber;
const int CSODOTAPlayerChallenge::kIntParam0FieldNumber;
const int CSODOTAPlayerChallenge::kIntParam1FieldNumber;
const int CSODOTAPlayerChallenge::kCreatedTimeFieldNumber;
const int CSODOTAPlayerChallenge::kCompletedFieldNumber;
const int CSODOTAPlayerChallenge::kSequenceIdFieldNumber;
const int CSODOTAPlayerChallenge::kChallengeTierFieldNumber;
const int CSODOTAPlayerChallenge::kFlagsFieldNumber;
#endif  // !_MSC_VER

CSODOTAPlayerChallenge::CSODOTAPlayerChallenge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSODOTAPlayerChallenge)
}

void CSODOTAPlayerChallenge::InitAsDefaultInstance() {
}

CSODOTAPlayerChallenge::CSODOTAPlayerChallenge(const CSODOTAPlayerChallenge& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSODOTAPlayerChallenge)
}

void CSODOTAPlayerChallenge::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  event_id_ = 0u;
  slot_id_ = 0u;
  challenge_type_ = 0u;
  int_param_0_ = 0u;
  int_param_1_ = 0u;
  created_time_ = 0u;
  completed_ = 0u;
  sequence_id_ = 0u;
  challenge_tier_ = 0u;
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTAPlayerChallenge::~CSODOTAPlayerChallenge() {
  // @@protoc_insertion_point(destructor:CSODOTAPlayerChallenge)
  SharedDtor();
}

void CSODOTAPlayerChallenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSODOTAPlayerChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTAPlayerChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTAPlayerChallenge_descriptor_;
}

const CSODOTAPlayerChallenge& CSODOTAPlayerChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CSODOTAPlayerChallenge* CSODOTAPlayerChallenge::default_instance_ = NULL;

CSODOTAPlayerChallenge* CSODOTAPlayerChallenge::New(::google::protobuf::Arena* arena) const {
  CSODOTAPlayerChallenge* n = new CSODOTAPlayerChallenge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSODOTAPlayerChallenge::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CSODOTAPlayerChallenge*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(account_id_, completed_);
  }
  ZR_(sequence_id_, flags_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CSODOTAPlayerChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSODOTAPlayerChallenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_event_id;
        break;
      }

      // optional uint32 event_id = 2;
      case 2: {
        if (tag == 16) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_slot_id;
        break;
      }

      // optional uint32 slot_id = 3;
      case 3: {
        if (tag == 24) {
         parse_slot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
          set_has_slot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_challenge_type;
        break;
      }

      // optional uint32 challenge_type = 4;
      case 4: {
        if (tag == 32) {
         parse_challenge_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_type_)));
          set_has_challenge_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_int_param_0;
        break;
      }

      // optional uint32 int_param_0 = 5;
      case 5: {
        if (tag == 40) {
         parse_int_param_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &int_param_0_)));
          set_has_int_param_0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_int_param_1;
        break;
      }

      // optional uint32 int_param_1 = 6;
      case 6: {
        if (tag == 48) {
         parse_int_param_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &int_param_1_)));
          set_has_int_param_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_created_time;
        break;
      }

      // optional uint32 created_time = 7;
      case 7: {
        if (tag == 56) {
         parse_created_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &created_time_)));
          set_has_created_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_completed;
        break;
      }

      // optional uint32 completed = 8;
      case 8: {
        if (tag == 64) {
         parse_completed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &completed_)));
          set_has_completed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sequence_id;
        break;
      }

      // optional uint32 sequence_id = 9;
      case 9: {
        if (tag == 72) {
         parse_sequence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_id_)));
          set_has_sequence_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_challenge_tier;
        break;
      }

      // optional uint32 challenge_tier = 10;
      case 10: {
        if (tag == 80) {
         parse_challenge_tier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_tier_)));
          set_has_challenge_tier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 11;
      case 11: {
        if (tag == 88) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSODOTAPlayerChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSODOTAPlayerChallenge)
  return false;
#undef DO_
}

void CSODOTAPlayerChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSODOTAPlayerChallenge)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 event_id = 2;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event_id(), output);
  }

  // optional uint32 slot_id = 3;
  if (has_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->slot_id(), output);
  }

  // optional uint32 challenge_type = 4;
  if (has_challenge_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->challenge_type(), output);
  }

  // optional uint32 int_param_0 = 5;
  if (has_int_param_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->int_param_0(), output);
  }

  // optional uint32 int_param_1 = 6;
  if (has_int_param_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->int_param_1(), output);
  }

  // optional uint32 created_time = 7;
  if (has_created_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->created_time(), output);
  }

  // optional uint32 completed = 8;
  if (has_completed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->completed(), output);
  }

  // optional uint32 sequence_id = 9;
  if (has_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sequence_id(), output);
  }

  // optional uint32 challenge_tier = 10;
  if (has_challenge_tier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->challenge_tier(), output);
  }

  // optional uint32 flags = 11;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSODOTAPlayerChallenge)
}

::google::protobuf::uint8* CSODOTAPlayerChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAPlayerChallenge)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 event_id = 2;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event_id(), target);
  }

  // optional uint32 slot_id = 3;
  if (has_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->slot_id(), target);
  }

  // optional uint32 challenge_type = 4;
  if (has_challenge_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->challenge_type(), target);
  }

  // optional uint32 int_param_0 = 5;
  if (has_int_param_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->int_param_0(), target);
  }

  // optional uint32 int_param_1 = 6;
  if (has_int_param_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->int_param_1(), target);
  }

  // optional uint32 created_time = 7;
  if (has_created_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->created_time(), target);
  }

  // optional uint32 completed = 8;
  if (has_completed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->completed(), target);
  }

  // optional uint32 sequence_id = 9;
  if (has_sequence_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sequence_id(), target);
  }

  // optional uint32 challenge_tier = 10;
  if (has_challenge_tier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->challenge_tier(), target);
  }

  // optional uint32 flags = 11;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAPlayerChallenge)
  return target;
}

int CSODOTAPlayerChallenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 event_id = 2;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 slot_id = 3;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional uint32 challenge_type = 4;
    if (has_challenge_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challenge_type());
    }

    // optional uint32 int_param_0 = 5;
    if (has_int_param_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->int_param_0());
    }

    // optional uint32 int_param_1 = 6;
    if (has_int_param_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->int_param_1());
    }

    // optional uint32 created_time = 7;
    if (has_created_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->created_time());
    }

    // optional uint32 completed = 8;
    if (has_completed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->completed());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint32 sequence_id = 9;
    if (has_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_id());
    }

    // optional uint32 challenge_tier = 10;
    if (has_challenge_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challenge_tier());
    }

    // optional uint32 flags = 11;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTAPlayerChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CSODOTAPlayerChallenge* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSODOTAPlayerChallenge>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTAPlayerChallenge::MergeFrom(const CSODOTAPlayerChallenge& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_slot_id()) {
      set_slot_id(from.slot_id());
    }
    if (from.has_challenge_type()) {
      set_challenge_type(from.challenge_type());
    }
    if (from.has_int_param_0()) {
      set_int_param_0(from.int_param_0());
    }
    if (from.has_int_param_1()) {
      set_int_param_1(from.int_param_1());
    }
    if (from.has_created_time()) {
      set_created_time(from.created_time());
    }
    if (from.has_completed()) {
      set_completed(from.completed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sequence_id()) {
      set_sequence_id(from.sequence_id());
    }
    if (from.has_challenge_tier()) {
      set_challenge_tier(from.challenge_tier());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CSODOTAPlayerChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAPlayerChallenge::CopyFrom(const CSODOTAPlayerChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAPlayerChallenge::IsInitialized() const {

  return true;
}

void CSODOTAPlayerChallenge::Swap(CSODOTAPlayerChallenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTAPlayerChallenge::InternalSwap(CSODOTAPlayerChallenge* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(event_id_, other->event_id_);
  std::swap(slot_id_, other->slot_id_);
  std::swap(challenge_type_, other->challenge_type_);
  std::swap(int_param_0_, other->int_param_0_);
  std::swap(int_param_1_, other->int_param_1_);
  std::swap(created_time_, other->created_time_);
  std::swap(completed_, other->completed_);
  std::swap(sequence_id_, other->sequence_id_);
  std::swap(challenge_tier_, other->challenge_tier_);
  std::swap(flags_, other->flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSODOTAPlayerChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTAPlayerChallenge_descriptor_;
  metadata.reflection = CSODOTAPlayerChallenge_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSODOTAPlayerChallenge

// optional uint32 account_id = 1;
bool CSODOTAPlayerChallenge::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSODOTAPlayerChallenge::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CSODOTAPlayerChallenge::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSODOTAPlayerChallenge::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
 ::google::protobuf::uint32 CSODOTAPlayerChallenge::account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.account_id)
  return account_id_;
}
 void CSODOTAPlayerChallenge::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.account_id)
}

// optional uint32 event_id = 2;
bool CSODOTAPlayerChallenge::has_event_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSODOTAPlayerChallenge::set_has_event_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CSODOTAPlayerChallenge::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSODOTAPlayerChallenge::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
 ::google::protobuf::uint32 CSODOTAPlayerChallenge::event_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.event_id)
  return event_id_;
}
 void CSODOTAPlayerChallenge::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.event_id)
}

// optional uint32 slot_id = 3;
bool CSODOTAPlayerChallenge::has_slot_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSODOTAPlayerChallenge::set_has_slot_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CSODOTAPlayerChallenge::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSODOTAPlayerChallenge::clear_slot_id() {
  slot_id_ = 0u;
  clear_has_slot_id();
}
 ::google::protobuf::uint32 CSODOTAPlayerChallenge::slot_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.slot_id)
  return slot_id_;
}
 void CSODOTAPlayerChallenge::set_slot_id(::google::protobuf::uint32 value) {
  set_has_slot_id();
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.slot_id)
}

// optional uint32 challenge_type = 4;
bool CSODOTAPlayerChallenge::has_challenge_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSODOTAPlayerChallenge::set_has_challenge_type() {
  _has_bits_[0] |= 0x00000008u;
}
void CSODOTAPlayerChallenge::clear_has_challenge_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSODOTAPlayerChallenge::clear_challenge_type() {
  challenge_type_ = 0u;
  clear_has_challenge_type();
}
 ::google::protobuf::uint32 CSODOTAPlayerChallenge::challenge_type() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.challenge_type)
  return challenge_type_;
}
 void CSODOTAPlayerChallenge::set_challenge_type(::google::protobuf::uint32 value) {
  set_has_challenge_type();
  challenge_type_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.challenge_type)
}

// optional uint32 int_param_0 = 5;
bool CSODOTAPlayerChallenge::has_int_param_0() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSODOTAPlayerChallenge::set_has_int_param_0() {
  _has_bits_[0] |= 0x00000010u;
}
void CSODOTAPlayerChallenge::clear_has_int_param_0() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSODOTAPlayerChallenge::clear_int_param_0() {
  int_param_0_ = 0u;
  clear_has_int_param_0();
}
 ::google::protobuf::uint32 CSODOTAPlayerChallenge::int_param_0() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.int_param_0)
  return int_param_0_;
}
 void CSODOTAPlayerChallenge::set_int_param_0(::google::protobuf::uint32 value) {
  set_has_int_param_0();
  int_param_0_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.int_param_0)
}

// optional uint32 int_param_1 = 6;
bool CSODOTAPlayerChallenge::has_int_param_1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSODOTAPlayerChallenge::set_has_int_param_1() {
  _has_bits_[0] |= 0x00000020u;
}
void CSODOTAPlayerChallenge::clear_has_int_param_1() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSODOTAPlayerChallenge::clear_int_param_1() {
  int_param_1_ = 0u;
  clear_has_int_param_1();
}
 ::google::protobuf::uint32 CSODOTAPlayerChallenge::int_param_1() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.int_param_1)
  return int_param_1_;
}
 void CSODOTAPlayerChallenge::set_int_param_1(::google::protobuf::uint32 value) {
  set_has_int_param_1();
  int_param_1_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.int_param_1)
}

// optional uint32 created_time = 7;
bool CSODOTAPlayerChallenge::has_created_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CSODOTAPlayerChallenge::set_has_created_time() {
  _has_bits_[0] |= 0x00000040u;
}
void CSODOTAPlayerChallenge::clear_has_created_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void CSODOTAPlayerChallenge::clear_created_time() {
  created_time_ = 0u;
  clear_has_created_time();
}
 ::google::protobuf::uint32 CSODOTAPlayerChallenge::created_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.created_time)
  return created_time_;
}
 void CSODOTAPlayerChallenge::set_created_time(::google::protobuf::uint32 value) {
  set_has_created_time();
  created_time_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.created_time)
}

// optional uint32 completed = 8;
bool CSODOTAPlayerChallenge::has_completed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CSODOTAPlayerChallenge::set_has_completed() {
  _has_bits_[0] |= 0x00000080u;
}
void CSODOTAPlayerChallenge::clear_has_completed() {
  _has_bits_[0] &= ~0x00000080u;
}
void CSODOTAPlayerChallenge::clear_completed() {
  completed_ = 0u;
  clear_has_completed();
}
 ::google::protobuf::uint32 CSODOTAPlayerChallenge::completed() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.completed)
  return completed_;
}
 void CSODOTAPlayerChallenge::set_completed(::google::protobuf::uint32 value) {
  set_has_completed();
  completed_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.completed)
}

// optional uint32 sequence_id = 9;
bool CSODOTAPlayerChallenge::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CSODOTAPlayerChallenge::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000100u;
}
void CSODOTAPlayerChallenge::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void CSODOTAPlayerChallenge::clear_sequence_id() {
  sequence_id_ = 0u;
  clear_has_sequence_id();
}
 ::google::protobuf::uint32 CSODOTAPlayerChallenge::sequence_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.sequence_id)
  return sequence_id_;
}
 void CSODOTAPlayerChallenge::set_sequence_id(::google::protobuf::uint32 value) {
  set_has_sequence_id();
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.sequence_id)
}

// optional uint32 challenge_tier = 10;
bool CSODOTAPlayerChallenge::has_challenge_tier() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CSODOTAPlayerChallenge::set_has_challenge_tier() {
  _has_bits_[0] |= 0x00000200u;
}
void CSODOTAPlayerChallenge::clear_has_challenge_tier() {
  _has_bits_[0] &= ~0x00000200u;
}
void CSODOTAPlayerChallenge::clear_challenge_tier() {
  challenge_tier_ = 0u;
  clear_has_challenge_tier();
}
 ::google::protobuf::uint32 CSODOTAPlayerChallenge::challenge_tier() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.challenge_tier)
  return challenge_tier_;
}
 void CSODOTAPlayerChallenge::set_challenge_tier(::google::protobuf::uint32 value) {
  set_has_challenge_tier();
  challenge_tier_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.challenge_tier)
}

// optional uint32 flags = 11;
bool CSODOTAPlayerChallenge::has_flags() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CSODOTAPlayerChallenge::set_has_flags() {
  _has_bits_[0] |= 0x00000400u;
}
void CSODOTAPlayerChallenge::clear_has_flags() {
  _has_bits_[0] &= ~0x00000400u;
}
void CSODOTAPlayerChallenge::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
 ::google::protobuf::uint32 CSODOTAPlayerChallenge::flags() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.flags)
  return flags_;
}
 void CSODOTAPlayerChallenge::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgClientToGCRerollPlayerChallenge::kEventIdFieldNumber;
const int CMsgClientToGCRerollPlayerChallenge::kSequenceIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientToGCRerollPlayerChallenge::CMsgClientToGCRerollPlayerChallenge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientToGCRerollPlayerChallenge)
}

void CMsgClientToGCRerollPlayerChallenge::InitAsDefaultInstance() {
}

CMsgClientToGCRerollPlayerChallenge::CMsgClientToGCRerollPlayerChallenge(const CMsgClientToGCRerollPlayerChallenge& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRerollPlayerChallenge)
}

void CMsgClientToGCRerollPlayerChallenge::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  sequence_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientToGCRerollPlayerChallenge::~CMsgClientToGCRerollPlayerChallenge() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRerollPlayerChallenge)
  SharedDtor();
}

void CMsgClientToGCRerollPlayerChallenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientToGCRerollPlayerChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCRerollPlayerChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientToGCRerollPlayerChallenge_descriptor_;
}

const CMsgClientToGCRerollPlayerChallenge& CMsgClientToGCRerollPlayerChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgClientToGCRerollPlayerChallenge* CMsgClientToGCRerollPlayerChallenge::default_instance_ = NULL;

CMsgClientToGCRerollPlayerChallenge* CMsgClientToGCRerollPlayerChallenge::New(::google::protobuf::Arena* arena) const {
  CMsgClientToGCRerollPlayerChallenge* n = new CMsgClientToGCRerollPlayerChallenge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientToGCRerollPlayerChallenge::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgClientToGCRerollPlayerChallenge*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(event_id_, sequence_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgClientToGCRerollPlayerChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientToGCRerollPlayerChallenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sequence_id;
        break;
      }

      // optional uint32 sequence_id = 3;
      case 3: {
        if (tag == 24) {
         parse_sequence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_id_)));
          set_has_sequence_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientToGCRerollPlayerChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientToGCRerollPlayerChallenge)
  return false;
#undef DO_
}

void CMsgClientToGCRerollPlayerChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientToGCRerollPlayerChallenge)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint32 sequence_id = 3;
  if (has_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sequence_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientToGCRerollPlayerChallenge)
}

::google::protobuf::uint8* CMsgClientToGCRerollPlayerChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRerollPlayerChallenge)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint32 sequence_id = 3;
  if (has_sequence_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sequence_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRerollPlayerChallenge)
  return target;
}

int CMsgClientToGCRerollPlayerChallenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 sequence_id = 3;
    if (has_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCRerollPlayerChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgClientToGCRerollPlayerChallenge* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientToGCRerollPlayerChallenge>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientToGCRerollPlayerChallenge::MergeFrom(const CMsgClientToGCRerollPlayerChallenge& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_sequence_id()) {
      set_sequence_id(from.sequence_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgClientToGCRerollPlayerChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCRerollPlayerChallenge::CopyFrom(const CMsgClientToGCRerollPlayerChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRerollPlayerChallenge::IsInitialized() const {

  return true;
}

void CMsgClientToGCRerollPlayerChallenge::Swap(CMsgClientToGCRerollPlayerChallenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCRerollPlayerChallenge::InternalSwap(CMsgClientToGCRerollPlayerChallenge* other) {
  std::swap(event_id_, other->event_id_);
  std::swap(sequence_id_, other->sequence_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientToGCRerollPlayerChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientToGCRerollPlayerChallenge_descriptor_;
  metadata.reflection = CMsgClientToGCRerollPlayerChallenge_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientToGCRerollPlayerChallenge

// optional uint32 event_id = 1;
bool CMsgClientToGCRerollPlayerChallenge::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientToGCRerollPlayerChallenge::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientToGCRerollPlayerChallenge::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientToGCRerollPlayerChallenge::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
 ::google::protobuf::uint32 CMsgClientToGCRerollPlayerChallenge::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCRerollPlayerChallenge.event_id)
  return event_id_;
}
 void CMsgClientToGCRerollPlayerChallenge::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientToGCRerollPlayerChallenge.event_id)
}

// optional uint32 sequence_id = 3;
bool CMsgClientToGCRerollPlayerChallenge::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientToGCRerollPlayerChallenge::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientToGCRerollPlayerChallenge::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientToGCRerollPlayerChallenge::clear_sequence_id() {
  sequence_id_ = 0u;
  clear_has_sequence_id();
}
 ::google::protobuf::uint32 CMsgClientToGCRerollPlayerChallenge::sequence_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCRerollPlayerChallenge.sequence_id)
  return sequence_id_;
}
 void CMsgClientToGCRerollPlayerChallenge::set_sequence_id(::google::protobuf::uint32 value) {
  set_has_sequence_id();
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientToGCRerollPlayerChallenge.sequence_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgGCRerollPlayerChallengeResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCRerollPlayerChallengeResponse_EResult_descriptor_;
}
bool CMsgGCRerollPlayerChallengeResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::eResult_Success;
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::eResult_Dropped;
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::eResult_NotFound;
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::eResult_CantReroll;
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::eResult_ServerError;
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::EResult_MIN;
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::EResult_MAX;
const int CMsgGCRerollPlayerChallengeResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgGCRerollPlayerChallengeResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgGCRerollPlayerChallengeResponse::CMsgGCRerollPlayerChallengeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCRerollPlayerChallengeResponse)
}

void CMsgGCRerollPlayerChallengeResponse::InitAsDefaultInstance() {
}

CMsgGCRerollPlayerChallengeResponse::CMsgGCRerollPlayerChallengeResponse(const CMsgGCRerollPlayerChallengeResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCRerollPlayerChallengeResponse)
}

void CMsgGCRerollPlayerChallengeResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCRerollPlayerChallengeResponse::~CMsgGCRerollPlayerChallengeResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCRerollPlayerChallengeResponse)
  SharedDtor();
}

void CMsgGCRerollPlayerChallengeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCRerollPlayerChallengeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCRerollPlayerChallengeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCRerollPlayerChallengeResponse_descriptor_;
}

const CMsgGCRerollPlayerChallengeResponse& CMsgGCRerollPlayerChallengeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgGCRerollPlayerChallengeResponse* CMsgGCRerollPlayerChallengeResponse::default_instance_ = NULL;

CMsgGCRerollPlayerChallengeResponse* CMsgGCRerollPlayerChallengeResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCRerollPlayerChallengeResponse* n = new CMsgGCRerollPlayerChallengeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCRerollPlayerChallengeResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgGCRerollPlayerChallengeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCRerollPlayerChallengeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGCRerollPlayerChallengeResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgGCRerollPlayerChallengeResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCRerollPlayerChallengeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCRerollPlayerChallengeResponse)
  return false;
#undef DO_
}

void CMsgGCRerollPlayerChallengeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCRerollPlayerChallengeResponse)
  // optional .CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCRerollPlayerChallengeResponse)
}

::google::protobuf::uint8* CMsgGCRerollPlayerChallengeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCRerollPlayerChallengeResponse)
  // optional .CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCRerollPlayerChallengeResponse)
  return target;
}

int CMsgGCRerollPlayerChallengeResponse::ByteSize() const {
  int total_size = 0;

  // optional .CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCRerollPlayerChallengeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgGCRerollPlayerChallengeResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCRerollPlayerChallengeResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCRerollPlayerChallengeResponse::MergeFrom(const CMsgGCRerollPlayerChallengeResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgGCRerollPlayerChallengeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRerollPlayerChallengeResponse::CopyFrom(const CMsgGCRerollPlayerChallengeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRerollPlayerChallengeResponse::IsInitialized() const {

  return true;
}

void CMsgGCRerollPlayerChallengeResponse::Swap(CMsgGCRerollPlayerChallengeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCRerollPlayerChallengeResponse::InternalSwap(CMsgGCRerollPlayerChallengeResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCRerollPlayerChallengeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCRerollPlayerChallengeResponse_descriptor_;
  metadata.reflection = CMsgGCRerollPlayerChallengeResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCRerollPlayerChallengeResponse

// optional .CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
bool CMsgGCRerollPlayerChallengeResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCRerollPlayerChallengeResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCRerollPlayerChallengeResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCRerollPlayerChallengeResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgGCRerollPlayerChallengeResponse.result)
  return static_cast< ::CMsgGCRerollPlayerChallengeResponse_EResult >(result_);
}
 void CMsgGCRerollPlayerChallengeResponse::set_result(::CMsgGCRerollPlayerChallengeResponse_EResult value) {
  assert(::CMsgGCRerollPlayerChallengeResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCRerollPlayerChallengeResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgGCTopCustomGamesList::kTopCustomGamesFieldNumber;
#endif  // !_MSC_VER

CMsgGCTopCustomGamesList::CMsgGCTopCustomGamesList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCTopCustomGamesList)
}

void CMsgGCTopCustomGamesList::InitAsDefaultInstance() {
}

CMsgGCTopCustomGamesList::CMsgGCTopCustomGamesList(const CMsgGCTopCustomGamesList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCTopCustomGamesList)
}

void CMsgGCTopCustomGamesList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCTopCustomGamesList::~CMsgGCTopCustomGamesList() {
  // @@protoc_insertion_point(destructor:CMsgGCTopCustomGamesList)
  SharedDtor();
}

void CMsgGCTopCustomGamesList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCTopCustomGamesList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCTopCustomGamesList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCTopCustomGamesList_descriptor_;
}

const CMsgGCTopCustomGamesList& CMsgGCTopCustomGamesList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgGCTopCustomGamesList* CMsgGCTopCustomGamesList::default_instance_ = NULL;

CMsgGCTopCustomGamesList* CMsgGCTopCustomGamesList::New(::google::protobuf::Arena* arena) const {
  CMsgGCTopCustomGamesList* n = new CMsgGCTopCustomGamesList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCTopCustomGamesList::Clear() {
  top_custom_games_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgGCTopCustomGamesList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCTopCustomGamesList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 top_custom_games = 1;
      case 1: {
        if (tag == 8) {
         parse_top_custom_games:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_top_custom_games())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_top_custom_games())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_top_custom_games;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCTopCustomGamesList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCTopCustomGamesList)
  return false;
#undef DO_
}

void CMsgGCTopCustomGamesList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCTopCustomGamesList)
  // repeated uint64 top_custom_games = 1;
  for (int i = 0; i < this->top_custom_games_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->top_custom_games(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCTopCustomGamesList)
}

::google::protobuf::uint8* CMsgGCTopCustomGamesList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCTopCustomGamesList)
  // repeated uint64 top_custom_games = 1;
  for (int i = 0; i < this->top_custom_games_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->top_custom_games(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCTopCustomGamesList)
  return target;
}

int CMsgGCTopCustomGamesList::ByteSize() const {
  int total_size = 0;

  // repeated uint64 top_custom_games = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->top_custom_games_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->top_custom_games(i));
    }
    total_size += 1 * this->top_custom_games_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCTopCustomGamesList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgGCTopCustomGamesList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCTopCustomGamesList>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCTopCustomGamesList::MergeFrom(const CMsgGCTopCustomGamesList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  top_custom_games_.MergeFrom(from.top_custom_games_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgGCTopCustomGamesList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCTopCustomGamesList::CopyFrom(const CMsgGCTopCustomGamesList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCTopCustomGamesList::IsInitialized() const {

  return true;
}

void CMsgGCTopCustomGamesList::Swap(CMsgGCTopCustomGamesList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCTopCustomGamesList::InternalSwap(CMsgGCTopCustomGamesList* other) {
  top_custom_games_.UnsafeArenaSwap(&other->top_custom_games_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCTopCustomGamesList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCTopCustomGamesList_descriptor_;
  metadata.reflection = CMsgGCTopCustomGamesList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCTopCustomGamesList

// repeated uint64 top_custom_games = 1;
int CMsgGCTopCustomGamesList::top_custom_games_size() const {
  return top_custom_games_.size();
}
void CMsgGCTopCustomGamesList::clear_top_custom_games() {
  top_custom_games_.Clear();
}
 ::google::protobuf::uint64 CMsgGCTopCustomGamesList::top_custom_games(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCTopCustomGamesList.top_custom_games)
  return top_custom_games_.Get(index);
}
 void CMsgGCTopCustomGamesList::set_top_custom_games(int index, ::google::protobuf::uint64 value) {
  top_custom_games_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCTopCustomGamesList.top_custom_games)
}
 void CMsgGCTopCustomGamesList::add_top_custom_games(::google::protobuf::uint64 value) {
  top_custom_games_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgGCTopCustomGamesList.top_custom_games)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgGCTopCustomGamesList::top_custom_games() const {
  // @@protoc_insertion_point(field_list:CMsgGCTopCustomGamesList.top_custom_games)
  return top_custom_games_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgGCTopCustomGamesList::mutable_top_custom_games() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCTopCustomGamesList.top_custom_games)
  return &top_custom_games_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_TeamDetails::kTeamNumberFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kTeamIdFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kTeamNameFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kTeamLogoFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kScoreFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kPlayersFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kOnlyTeamFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kCheersFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_TeamDetails::CMsgDOTARealtimeGameStats_TeamDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.TeamDetails)
}

void CMsgDOTARealtimeGameStats_TeamDetails::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_TeamDetails::CMsgDOTARealtimeGameStats_TeamDetails(const CMsgDOTARealtimeGameStats_TeamDetails& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.TeamDetails)
}

void CMsgDOTARealtimeGameStats_TeamDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  team_number_ = 0u;
  team_id_ = 0u;
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_logo_ = GOOGLE_ULONGLONG(0);
  score_ = 0u;
  only_team_ = false;
  cheers_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_TeamDetails::~CMsgDOTARealtimeGameStats_TeamDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.TeamDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_TeamDetails::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_TeamDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_TeamDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_TeamDetails_descriptor_;
}

const CMsgDOTARealtimeGameStats_TeamDetails& CMsgDOTARealtimeGameStats_TeamDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_TeamDetails* CMsgDOTARealtimeGameStats_TeamDetails::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_TeamDetails* CMsgDOTARealtimeGameStats_TeamDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_TeamDetails* n = new CMsgDOTARealtimeGameStats_TeamDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_TeamDetails::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTARealtimeGameStats_TeamDetails*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 223u) {
    ZR_(team_number_, team_id_);
    ZR_(score_, cheers_);
    if (has_team_name()) {
      team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    team_logo_ = GOOGLE_ULONGLONG(0);
  }

#undef ZR_HELPER_
#undef ZR_

  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTARealtimeGameStats_TeamDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.TeamDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_number_)));
          set_has_team_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (tag == 16) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_team_name;
        break;
      }

      // optional string team_name = 3;
      case 3: {
        if (tag == 26) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTARealtimeGameStats.TeamDetails.team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_team_logo;
        break;
      }

      // optional fixed64 team_logo = 4;
      case 4: {
        if (tag == 33) {
         parse_team_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &team_logo_)));
          set_has_team_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // optional uint32 score = 5;
      case 5: {
        if (tag == 40) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_players;
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
      case 6: {
        if (tag == 50) {
         parse_players:
          DO_(input->IncrementRecursionDepth());
         parse_loop_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_players;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(56)) goto parse_only_team;
        break;
      }

      // optional bool only_team = 7;
      case 7: {
        if (tag == 56) {
         parse_only_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_team_)));
          set_has_only_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_cheers;
        break;
      }

      // optional uint32 cheers = 8;
      case 8: {
        if (tag == 64) {
         parse_cheers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cheers_)));
          set_has_cheers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.TeamDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.TeamDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_TeamDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.TeamDetails)
  // optional uint32 team_number = 1;
  if (has_team_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_number(), output);
  }

  // optional uint32 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  // optional string team_name = 3;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTARealtimeGameStats.TeamDetails.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_name(), output);
  }

  // optional fixed64 team_logo = 4;
  if (has_team_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->team_logo(), output);
  }

  // optional uint32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->score(), output);
  }

  // repeated .CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->players(i), output);
  }

  // optional bool only_team = 7;
  if (has_only_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->only_team(), output);
  }

  // optional uint32 cheers = 8;
  if (has_cheers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cheers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.TeamDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_TeamDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.TeamDetails)
  // optional uint32 team_number = 1;
  if (has_team_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_number(), target);
  }

  // optional uint32 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  // optional string team_name = 3;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTARealtimeGameStats.TeamDetails.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_name(), target);
  }

  // optional fixed64 team_logo = 4;
  if (has_team_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->team_logo(), target);
  }

  // optional uint32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->score(), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->players(i), target);
  }

  // optional bool only_team = 7;
  if (has_only_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->only_team(), target);
  }

  // optional uint32 cheers = 8;
  if (has_cheers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->cheers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.TeamDetails)
  return target;
}

int CMsgDOTARealtimeGameStats_TeamDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 223u) {
    // optional uint32 team_number = 1;
    if (has_team_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_number());
    }

    // optional uint32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional string team_name = 3;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional fixed64 team_logo = 4;
    if (has_team_logo()) {
      total_size += 1 + 8;
    }

    // optional uint32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional bool only_team = 7;
    if (has_only_team()) {
      total_size += 1 + 1;
    }

    // optional uint32 cheers = 8;
    if (has_cheers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cheers());
    }

  }
  // repeated .CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_TeamDetails::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTARealtimeGameStats_TeamDetails* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_TeamDetails>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_TeamDetails::MergeFrom(const CMsgDOTARealtimeGameStats_TeamDetails& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_number()) {
      set_team_number(from.team_number());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_name()) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (from.has_team_logo()) {
      set_team_logo(from.team_logo());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_only_team()) {
      set_only_team(from.only_team());
    }
    if (from.has_cheers()) {
      set_cheers(from.cheers());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTARealtimeGameStats_TeamDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_TeamDetails::CopyFrom(const CMsgDOTARealtimeGameStats_TeamDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_TeamDetails::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_TeamDetails::Swap(CMsgDOTARealtimeGameStats_TeamDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_TeamDetails::InternalSwap(CMsgDOTARealtimeGameStats_TeamDetails* other) {
  std::swap(team_number_, other->team_number_);
  std::swap(team_id_, other->team_id_);
  team_name_.Swap(&other->team_name_);
  std::swap(team_logo_, other->team_logo_);
  std::swap(score_, other->score_);
  players_.UnsafeArenaSwap(&other->players_);
  std::swap(only_team_, other->only_team_);
  std::swap(cheers_, other->cheers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_TeamDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_TeamDetails_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_TeamDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_ItemDetails::kIdFieldNumber;
const int CMsgDOTARealtimeGameStats_ItemDetails::kNameFieldNumber;
const int CMsgDOTARealtimeGameStats_ItemDetails::kTimeFieldNumber;
const int CMsgDOTARealtimeGameStats_ItemDetails::kSoldFieldNumber;
const int CMsgDOTARealtimeGameStats_ItemDetails::kStackcountFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_ItemDetails::CMsgDOTARealtimeGameStats_ItemDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.ItemDetails)
}

void CMsgDOTARealtimeGameStats_ItemDetails::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_ItemDetails::CMsgDOTARealtimeGameStats_ItemDetails(const CMsgDOTARealtimeGameStats_ItemDetails& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.ItemDetails)
}

void CMsgDOTARealtimeGameStats_ItemDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0;
  sold_ = false;
  stackcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_ItemDetails::~CMsgDOTARealtimeGameStats_ItemDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.ItemDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_ItemDetails::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_ItemDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_ItemDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_ItemDetails_descriptor_;
}

const CMsgDOTARealtimeGameStats_ItemDetails& CMsgDOTARealtimeGameStats_ItemDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_ItemDetails::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_ItemDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_ItemDetails* n = new CMsgDOTARealtimeGameStats_ItemDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_ItemDetails::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTARealtimeGameStats_ItemDetails*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(id_, stackcount_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTARealtimeGameStats_ItemDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.ItemDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTARealtimeGameStats.ItemDetails.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sold;
        break;
      }

      // optional bool sold = 4;
      case 4: {
        if (tag == 32) {
         parse_sold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sold_)));
          set_has_sold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_stackcount;
        break;
      }

      // optional uint32 stackcount = 5;
      case 5: {
        if (tag == 40) {
         parse_stackcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stackcount_)));
          set_has_stackcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.ItemDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.ItemDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_ItemDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.ItemDetails)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTARealtimeGameStats.ItemDetails.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // optional bool sold = 4;
  if (has_sold()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->sold(), output);
  }

  // optional uint32 stackcount = 5;
  if (has_stackcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->stackcount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.ItemDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_ItemDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.ItemDetails)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTARealtimeGameStats.ItemDetails.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // optional bool sold = 4;
  if (has_sold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->sold(), target);
  }

  // optional uint32 stackcount = 5;
  if (has_stackcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->stackcount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.ItemDetails)
  return target;
}

int CMsgDOTARealtimeGameStats_ItemDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional bool sold = 4;
    if (has_sold()) {
      total_size += 1 + 1;
    }

    // optional uint32 stackcount = 5;
    if (has_stackcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stackcount());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_ItemDetails::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTARealtimeGameStats_ItemDetails* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_ItemDetails>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_ItemDetails::MergeFrom(const CMsgDOTARealtimeGameStats_ItemDetails& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_sold()) {
      set_sold(from.sold());
    }
    if (from.has_stackcount()) {
      set_stackcount(from.stackcount());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTARealtimeGameStats_ItemDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_ItemDetails::CopyFrom(const CMsgDOTARealtimeGameStats_ItemDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_ItemDetails::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_ItemDetails::Swap(CMsgDOTARealtimeGameStats_ItemDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_ItemDetails::InternalSwap(CMsgDOTARealtimeGameStats_ItemDetails* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  std::swap(time_, other->time_);
  std::swap(sold_, other->sold_);
  std::swap(stackcount_, other->stackcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_ItemDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_ItemDetails_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_ItemDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_AbilityDetails::kIdFieldNumber;
const int CMsgDOTARealtimeGameStats_AbilityDetails::kNameFieldNumber;
const int CMsgDOTARealtimeGameStats_AbilityDetails::kLevelFieldNumber;
const int CMsgDOTARealtimeGameStats_AbilityDetails::kCooldownFieldNumber;
const int CMsgDOTARealtimeGameStats_AbilityDetails::kCooldownMaxFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_AbilityDetails::CMsgDOTARealtimeGameStats_AbilityDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.AbilityDetails)
}

void CMsgDOTARealtimeGameStats_AbilityDetails::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_AbilityDetails::CMsgDOTARealtimeGameStats_AbilityDetails(const CMsgDOTARealtimeGameStats_AbilityDetails& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.AbilityDetails)
}

void CMsgDOTARealtimeGameStats_AbilityDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  cooldown_ = 0;
  cooldown_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_AbilityDetails::~CMsgDOTARealtimeGameStats_AbilityDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.AbilityDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_AbilityDetails::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_AbilityDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_AbilityDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_AbilityDetails_descriptor_;
}

const CMsgDOTARealtimeGameStats_AbilityDetails& CMsgDOTARealtimeGameStats_AbilityDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_AbilityDetails* CMsgDOTARealtimeGameStats_AbilityDetails::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_AbilityDetails* CMsgDOTARealtimeGameStats_AbilityDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_AbilityDetails* n = new CMsgDOTARealtimeGameStats_AbilityDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_AbilityDetails::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTARealtimeGameStats_AbilityDetails*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(id_, cooldown_max_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTARealtimeGameStats_AbilityDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.AbilityDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTARealtimeGameStats.AbilityDetails.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_cooldown;
        break;
      }

      // optional float cooldown = 4;
      case 4: {
        if (tag == 37) {
         parse_cooldown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cooldown_)));
          set_has_cooldown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_cooldown_max;
        break;
      }

      // optional float cooldown_max = 5;
      case 5: {
        if (tag == 45) {
         parse_cooldown_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cooldown_max_)));
          set_has_cooldown_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.AbilityDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.AbilityDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_AbilityDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.AbilityDetails)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTARealtimeGameStats.AbilityDetails.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional float cooldown = 4;
  if (has_cooldown()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cooldown(), output);
  }

  // optional float cooldown_max = 5;
  if (has_cooldown_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->cooldown_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.AbilityDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_AbilityDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.AbilityDetails)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTARealtimeGameStats.AbilityDetails.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional float cooldown = 4;
  if (has_cooldown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cooldown(), target);
  }

  // optional float cooldown_max = 5;
  if (has_cooldown_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->cooldown_max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.AbilityDetails)
  return target;
}

int CMsgDOTARealtimeGameStats_AbilityDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional float cooldown = 4;
    if (has_cooldown()) {
      total_size += 1 + 4;
    }

    // optional float cooldown_max = 5;
    if (has_cooldown_max()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_AbilityDetails::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTARealtimeGameStats_AbilityDetails* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_AbilityDetails>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_AbilityDetails::MergeFrom(const CMsgDOTARealtimeGameStats_AbilityDetails& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_cooldown()) {
      set_cooldown(from.cooldown());
    }
    if (from.has_cooldown_max()) {
      set_cooldown_max(from.cooldown_max());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTARealtimeGameStats_AbilityDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_AbilityDetails::CopyFrom(const CMsgDOTARealtimeGameStats_AbilityDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_AbilityDetails::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_AbilityDetails::Swap(CMsgDOTARealtimeGameStats_AbilityDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_AbilityDetails::InternalSwap(CMsgDOTARealtimeGameStats_AbilityDetails* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  std::swap(level_, other->level_);
  std::swap(cooldown_, other->cooldown_);
  std::swap(cooldown_max_, other->cooldown_max_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_AbilityDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_AbilityDetails_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_AbilityDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_HeroToHeroStats::kVictimidFieldNumber;
const int CMsgDOTARealtimeGameStats_HeroToHeroStats::kKillsFieldNumber;
const int CMsgDOTARealtimeGameStats_HeroToHeroStats::kAssistsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_HeroToHeroStats::CMsgDOTARealtimeGameStats_HeroToHeroStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.HeroToHeroStats)
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_HeroToHeroStats::CMsgDOTARealtimeGameStats_HeroToHeroStats(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.HeroToHeroStats)
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::SharedCtor() {
  _cached_size_ = 0;
  victimid_ = 0u;
  kills_ = 0u;
  assists_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_HeroToHeroStats::~CMsgDOTARealtimeGameStats_HeroToHeroStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.HeroToHeroStats)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_HeroToHeroStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_HeroToHeroStats_descriptor_;
}

const CMsgDOTARealtimeGameStats_HeroToHeroStats& CMsgDOTARealtimeGameStats_HeroToHeroStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_HeroToHeroStats* CMsgDOTARealtimeGameStats_HeroToHeroStats::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_HeroToHeroStats* CMsgDOTARealtimeGameStats_HeroToHeroStats::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_HeroToHeroStats* n = new CMsgDOTARealtimeGameStats_HeroToHeroStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTARealtimeGameStats_HeroToHeroStats*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(victimid_, assists_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTARealtimeGameStats_HeroToHeroStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.HeroToHeroStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 victimid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &victimid_)));
          set_has_victimid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_kills;
        break;
      }

      // optional uint32 kills = 2;
      case 2: {
        if (tag == 16) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
          set_has_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_assists;
        break;
      }

      // optional uint32 assists = 3;
      case 3: {
        if (tag == 24) {
         parse_assists:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
          set_has_assists();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.HeroToHeroStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.HeroToHeroStats)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.HeroToHeroStats)
  // optional uint32 victimid = 1;
  if (has_victimid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->victimid(), output);
  }

  // optional uint32 kills = 2;
  if (has_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kills(), output);
  }

  // optional uint32 assists = 3;
  if (has_assists()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->assists(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.HeroToHeroStats)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_HeroToHeroStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.HeroToHeroStats)
  // optional uint32 victimid = 1;
  if (has_victimid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->victimid(), target);
  }

  // optional uint32 kills = 2;
  if (has_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kills(), target);
  }

  // optional uint32 assists = 3;
  if (has_assists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->assists(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.HeroToHeroStats)
  return target;
}

int CMsgDOTARealtimeGameStats_HeroToHeroStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 victimid = 1;
    if (has_victimid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->victimid());
    }

    // optional uint32 kills = 2;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 assists = 3;
    if (has_assists()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTARealtimeGameStats_HeroToHeroStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_HeroToHeroStats>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::MergeFrom(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_victimid()) {
      set_victimid(from.victimid());
    }
    if (from.has_kills()) {
      set_kills(from.kills());
    }
    if (from.has_assists()) {
      set_assists(from.assists());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::CopyFrom(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_HeroToHeroStats::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::Swap(CMsgDOTARealtimeGameStats_HeroToHeroStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_HeroToHeroStats::InternalSwap(CMsgDOTARealtimeGameStats_HeroToHeroStats* other) {
  std::swap(victimid_, other->victimid_);
  std::swap(kills_, other->kills_);
  std::swap(assists_, other->assists_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_HeroToHeroStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_HeroToHeroStats_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_HeroToHeroStats_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_AbilityList::kIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_AbilityList::CMsgDOTARealtimeGameStats_AbilityList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.AbilityList)
}

void CMsgDOTARealtimeGameStats_AbilityList::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_AbilityList::CMsgDOTARealtimeGameStats_AbilityList(const CMsgDOTARealtimeGameStats_AbilityList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.AbilityList)
}

void CMsgDOTARealtimeGameStats_AbilityList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_AbilityList::~CMsgDOTARealtimeGameStats_AbilityList() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.AbilityList)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_AbilityList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_AbilityList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_AbilityList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_AbilityList_descriptor_;
}

const CMsgDOTARealtimeGameStats_AbilityList& CMsgDOTARealtimeGameStats_AbilityList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_AbilityList* CMsgDOTARealtimeGameStats_AbilityList::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_AbilityList* CMsgDOTARealtimeGameStats_AbilityList::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_AbilityList* n = new CMsgDOTARealtimeGameStats_AbilityList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_AbilityList::Clear() {
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTARealtimeGameStats_AbilityList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.AbilityList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 id = 1;
      case 1: {
        if (tag == 8) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.AbilityList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.AbilityList)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_AbilityList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.AbilityList)
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.AbilityList)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_AbilityList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.AbilityList)
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->id(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.AbilityList)
  return target;
}

int CMsgDOTARealtimeGameStats_AbilityList::ByteSize() const {
  int total_size = 0;

  // repeated uint32 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_AbilityList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTARealtimeGameStats_AbilityList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_AbilityList>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_AbilityList::MergeFrom(const CMsgDOTARealtimeGameStats_AbilityList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  id_.MergeFrom(from.id_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTARealtimeGameStats_AbilityList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_AbilityList::CopyFrom(const CMsgDOTARealtimeGameStats_AbilityList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_AbilityList::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_AbilityList::Swap(CMsgDOTARealtimeGameStats_AbilityList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_AbilityList::InternalSwap(CMsgDOTARealtimeGameStats_AbilityList* other) {
  id_.UnsafeArenaSwap(&other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_AbilityList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_AbilityList_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_AbilityList_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_PlayerDetails::kAccountidFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kPlayeridFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kNameFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kTeamFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHeroidFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHealthpointsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kMaxhealthpointsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHealthregenrateFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kManapointsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kMaxmanapointsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kManaregenrateFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kBaseStrengthFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kBaseAgilityFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kBaseIntelligenceFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kBaseArmorFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kBaseMovespeedFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kBaseDamageFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kStrengthFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kAgilityFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kIntelligenceFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kArmorFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kMovespeedFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kDamageFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHeroDamageFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kTowerDamageFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kAbilitiesFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kLevelFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kKillCountFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kDeathCountFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kAssistsCountFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kDeniesCountFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kLhCountFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHeroHealingFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kGoldPerMinFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kXpPerMinFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kNetGoldFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kGoldFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kXFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kYFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kRespawnTimeFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kUltimateCooldownFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHasBuybackFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kItemsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kStashitemsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kItemshoppinglistFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kLevelpointsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHeroToHeroStatsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHasUltimateFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHasUltimateManaFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_PlayerDetails::CMsgDOTARealtimeGameStats_PlayerDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.PlayerDetails)
}

void CMsgDOTARealtimeGameStats_PlayerDetails::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_PlayerDetails::CMsgDOTARealtimeGameStats_PlayerDetails(const CMsgDOTARealtimeGameStats_PlayerDetails& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.PlayerDetails)
}

void CMsgDOTARealtimeGameStats_PlayerDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  accountid_ = 0u;
  playerid_ = 0u;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_ = 0u;
  heroid_ = 0u;
  healthpoints_ = 0u;
  maxhealthpoints_ = 0u;
  healthregenrate_ = 0;
  manapoints_ = 0u;
  maxmanapoints_ = 0u;
  manaregenrate_ = 0;
  base_strength_ = 0u;
  base_agility_ = 0u;
  base_intelligence_ = 0u;
  base_armor_ = 0;
  base_movespeed_ = 0u;
  base_damage_ = 0u;
  strength_ = 0u;
  agility_ = 0u;
  intelligence_ = 0u;
  armor_ = 0;
  movespeed_ = 0u;
  damage_ = 0u;
  hero_damage_ = 0u;
  tower_damage_ = 0u;
  level_ = 0u;
  kill_count_ = 0u;
  death_count_ = 0u;
  assists_count_ = 0u;
  denies_count_ = 0u;
  lh_count_ = 0u;
  hero_healing_ = 0u;
  gold_per_min_ = 0u;
  xp_per_min_ = 0u;
  net_gold_ = 0u;
  gold_ = 0u;
  x_ = 0;
  y_ = 0;
  respawn_time_ = 0;
  ultimate_cooldown_ = 0u;
  has_buyback_ = false;
  has_ultimate_ = false;
  has_ultimate_mana_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_PlayerDetails::~CMsgDOTARealtimeGameStats_PlayerDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.PlayerDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_PlayerDetails::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_PlayerDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_PlayerDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_PlayerDetails_descriptor_;
}

const CMsgDOTARealtimeGameStats_PlayerDetails& CMsgDOTARealtimeGameStats_PlayerDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_PlayerDetails* CMsgDOTARealtimeGameStats_PlayerDetails::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_PlayerDetails* CMsgDOTARealtimeGameStats_PlayerDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_PlayerDetails* n = new CMsgDOTARealtimeGameStats_PlayerDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_PlayerDetails::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTARealtimeGameStats_PlayerDetails*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(accountid_, playerid_);
    ZR_(team_, healthregenrate_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(manapoints_, base_movespeed_);
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(base_damage_, hero_damage_);
  }
  if (_has_bits_[24 / 32] & 4244635648u) {
    ZR_(level_, lh_count_);
    tower_damage_ = 0u;
  }
  if (_has_bits_[32 / 32] & 255u) {
    ZR_(hero_healing_, respawn_time_);
  }
  ZR_(ultimate_cooldown_, has_ultimate_);
  has_ultimate_mana_ = false;

#undef ZR_HELPER_
#undef ZR_

  abilities_.Clear();
  items_.Clear();
  stashitems_.Clear();
  itemshoppinglist_.Clear();
  levelpoints_.Clear();
  hero_to_hero_stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTARealtimeGameStats_PlayerDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.PlayerDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // optional uint32 playerid = 2;
      case 2: {
        if (tag == 16) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTARealtimeGameStats.PlayerDetails.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_team;
        break;
      }

      // optional uint32 team = 4;
      case 4: {
        if (tag == 32) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_heroid;
        break;
      }

      // optional uint32 heroid = 5;
      case 5: {
        if (tag == 40) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_healthpoints;
        break;
      }

      // optional uint32 healthpoints = 6;
      case 6: {
        if (tag == 48) {
         parse_healthpoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &healthpoints_)));
          set_has_healthpoints();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_maxhealthpoints;
        break;
      }

      // optional uint32 maxhealthpoints = 7;
      case 7: {
        if (tag == 56) {
         parse_maxhealthpoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhealthpoints_)));
          set_has_maxhealthpoints();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_healthregenrate;
        break;
      }

      // optional float healthregenrate = 8;
      case 8: {
        if (tag == 69) {
         parse_healthregenrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &healthregenrate_)));
          set_has_healthregenrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_manapoints;
        break;
      }

      // optional uint32 manapoints = 9;
      case 9: {
        if (tag == 72) {
         parse_manapoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manapoints_)));
          set_has_manapoints();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_maxmanapoints;
        break;
      }

      // optional uint32 maxmanapoints = 10;
      case 10: {
        if (tag == 80) {
         parse_maxmanapoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxmanapoints_)));
          set_has_maxmanapoints();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_manaregenrate;
        break;
      }

      // optional float manaregenrate = 11;
      case 11: {
        if (tag == 93) {
         parse_manaregenrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &manaregenrate_)));
          set_has_manaregenrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_base_strength;
        break;
      }

      // optional uint32 base_strength = 12;
      case 12: {
        if (tag == 96) {
         parse_base_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_strength_)));
          set_has_base_strength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_base_agility;
        break;
      }

      // optional uint32 base_agility = 13;
      case 13: {
        if (tag == 104) {
         parse_base_agility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_agility_)));
          set_has_base_agility();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_base_intelligence;
        break;
      }

      // optional uint32 base_intelligence = 14;
      case 14: {
        if (tag == 112) {
         parse_base_intelligence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_intelligence_)));
          set_has_base_intelligence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_base_armor;
        break;
      }

      // optional int32 base_armor = 15;
      case 15: {
        if (tag == 120) {
         parse_base_armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_armor_)));
          set_has_base_armor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_base_movespeed;
        break;
      }

      // optional uint32 base_movespeed = 16;
      case 16: {
        if (tag == 128) {
         parse_base_movespeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_movespeed_)));
          set_has_base_movespeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_base_damage;
        break;
      }

      // optional uint32 base_damage = 17;
      case 17: {
        if (tag == 136) {
         parse_base_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_damage_)));
          set_has_base_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_strength;
        break;
      }

      // optional uint32 strength = 18;
      case 18: {
        if (tag == 144) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_agility;
        break;
      }

      // optional uint32 agility = 19;
      case 19: {
        if (tag == 152) {
         parse_agility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agility_)));
          set_has_agility();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_intelligence;
        break;
      }

      // optional uint32 intelligence = 20;
      case 20: {
        if (tag == 160) {
         parse_intelligence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intelligence_)));
          set_has_intelligence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_armor;
        break;
      }

      // optional int32 armor = 21;
      case 21: {
        if (tag == 168) {
         parse_armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armor_)));
          set_has_armor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_movespeed;
        break;
      }

      // optional uint32 movespeed = 22;
      case 22: {
        if (tag == 176) {
         parse_movespeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_damage;
        break;
      }

      // optional uint32 damage = 23;
      case 23: {
        if (tag == 184) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_hero_damage;
        break;
      }

      // optional uint32 hero_damage = 24;
      case 24: {
        if (tag == 192) {
         parse_hero_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_damage_)));
          set_has_hero_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_tower_damage;
        break;
      }

      // optional uint32 tower_damage = 25;
      case 25: {
        if (tag == 200) {
         parse_tower_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_damage_)));
          set_has_tower_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_abilities;
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
      case 26: {
        if (tag == 210) {
         parse_abilities:
          DO_(input->IncrementRecursionDepth());
         parse_loop_abilities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_abilities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_loop_abilities;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(216)) goto parse_level;
        break;
      }

      // optional uint32 level = 27;
      case 27: {
        if (tag == 216) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_kill_count;
        break;
      }

      // optional uint32 kill_count = 28;
      case 28: {
        if (tag == 224) {
         parse_kill_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_count_)));
          set_has_kill_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_death_count;
        break;
      }

      // optional uint32 death_count = 29;
      case 29: {
        if (tag == 232) {
         parse_death_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &death_count_)));
          set_has_death_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_assists_count;
        break;
      }

      // optional uint32 assists_count = 30;
      case 30: {
        if (tag == 240) {
         parse_assists_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_count_)));
          set_has_assists_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_denies_count;
        break;
      }

      // optional uint32 denies_count = 31;
      case 31: {
        if (tag == 248) {
         parse_denies_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &denies_count_)));
          set_has_denies_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_lh_count;
        break;
      }

      // optional uint32 lh_count = 32;
      case 32: {
        if (tag == 256) {
         parse_lh_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lh_count_)));
          set_has_lh_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_hero_healing;
        break;
      }

      // optional uint32 hero_healing = 33;
      case 33: {
        if (tag == 264) {
         parse_hero_healing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_healing_)));
          set_has_hero_healing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_gold_per_min;
        break;
      }

      // optional uint32 gold_per_min = 34;
      case 34: {
        if (tag == 272) {
         parse_gold_per_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_per_min_)));
          set_has_gold_per_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_xp_per_min;
        break;
      }

      // optional uint32 xp_per_min = 35;
      case 35: {
        if (tag == 280) {
         parse_xp_per_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_per_min_)));
          set_has_xp_per_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_net_gold;
        break;
      }

      // optional uint32 net_gold = 36;
      case 36: {
        if (tag == 288) {
         parse_net_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_gold_)));
          set_has_net_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 37;
      case 37: {
        if (tag == 296) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(309)) goto parse_x;
        break;
      }

      // optional float x = 38;
      case 38: {
        if (tag == 309) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(317)) goto parse_y;
        break;
      }

      // optional float y = 39;
      case 39: {
        if (tag == 317) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_respawn_time;
        break;
      }

      // optional int32 respawn_time = 40;
      case 40: {
        if (tag == 320) {
         parse_respawn_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &respawn_time_)));
          set_has_respawn_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_ultimate_cooldown;
        break;
      }

      // optional uint32 ultimate_cooldown = 41;
      case 41: {
        if (tag == 328) {
         parse_ultimate_cooldown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ultimate_cooldown_)));
          set_has_ultimate_cooldown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_has_buyback;
        break;
      }

      // optional bool has_buyback = 42;
      case 42: {
        if (tag == 336) {
         parse_has_buyback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_buyback_)));
          set_has_has_buyback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_items;
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.ItemDetails items = 43;
      case 43: {
        if (tag == 346) {
         parse_items:
          DO_(input->IncrementRecursionDepth());
         parse_loop_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_loop_items;
        if (input->ExpectTag(354)) goto parse_loop_stashitems;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
      case 44: {
        if (tag == 354) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_stashitems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stashitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(354)) goto parse_loop_stashitems;
        if (input->ExpectTag(362)) goto parse_loop_itemshoppinglist;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
      case 45: {
        if (tag == 362) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_itemshoppinglist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_itemshoppinglist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(362)) goto parse_loop_itemshoppinglist;
        if (input->ExpectTag(370)) goto parse_loop_levelpoints;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
      case 46: {
        if (tag == 370) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_levelpoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_levelpoints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse_loop_levelpoints;
        if (input->ExpectTag(378)) goto parse_loop_hero_to_hero_stats;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
      case 47: {
        if (tag == 378) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_hero_to_hero_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_hero_to_hero_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse_loop_hero_to_hero_stats;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(384)) goto parse_has_ultimate;
        break;
      }

      // optional bool has_ultimate = 48;
      case 48: {
        if (tag == 384) {
         parse_has_ultimate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_ultimate_)));
          set_has_has_ultimate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_has_ultimate_mana;
        break;
      }

      // optional bool has_ultimate_mana = 49;
      case 49: {
        if (tag == 392) {
         parse_has_ultimate_mana:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_ultimate_mana_)));
          set_has_has_ultimate_mana();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.PlayerDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.PlayerDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_PlayerDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.PlayerDetails)
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTARealtimeGameStats.PlayerDetails.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional uint32 team = 4;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team(), output);
  }

  // optional uint32 heroid = 5;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->heroid(), output);
  }

  // optional uint32 healthpoints = 6;
  if (has_healthpoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->healthpoints(), output);
  }

  // optional uint32 maxhealthpoints = 7;
  if (has_maxhealthpoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->maxhealthpoints(), output);
  }

  // optional float healthregenrate = 8;
  if (has_healthregenrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->healthregenrate(), output);
  }

  // optional uint32 manapoints = 9;
  if (has_manapoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->manapoints(), output);
  }

  // optional uint32 maxmanapoints = 10;
  if (has_maxmanapoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->maxmanapoints(), output);
  }

  // optional float manaregenrate = 11;
  if (has_manaregenrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->manaregenrate(), output);
  }

  // optional uint32 base_strength = 12;
  if (has_base_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->base_strength(), output);
  }

  // optional uint32 base_agility = 13;
  if (has_base_agility()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->base_agility(), output);
  }

  // optional uint32 base_intelligence = 14;
  if (has_base_intelligence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->base_intelligence(), output);
  }

  // optional int32 base_armor = 15;
  if (has_base_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->base_armor(), output);
  }

  // optional uint32 base_movespeed = 16;
  if (has_base_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->base_movespeed(), output);
  }

  // optional uint32 base_damage = 17;
  if (has_base_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->base_damage(), output);
  }

  // optional uint32 strength = 18;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->strength(), output);
  }

  // optional uint32 agility = 19;
  if (has_agility()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->agility(), output);
  }

  // optional uint32 intelligence = 20;
  if (has_intelligence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->intelligence(), output);
  }

  // optional int32 armor = 21;
  if (has_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->armor(), output);
  }

  // optional uint32 movespeed = 22;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->movespeed(), output);
  }

  // optional uint32 damage = 23;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->damage(), output);
  }

  // optional uint32 hero_damage = 24;
  if (has_hero_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->hero_damage(), output);
  }

  // optional uint32 tower_damage = 25;
  if (has_tower_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->tower_damage(), output);
  }

  // repeated .CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
  for (unsigned int i = 0, n = this->abilities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->abilities(i), output);
  }

  // optional uint32 level = 27;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->level(), output);
  }

  // optional uint32 kill_count = 28;
  if (has_kill_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->kill_count(), output);
  }

  // optional uint32 death_count = 29;
  if (has_death_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->death_count(), output);
  }

  // optional uint32 assists_count = 30;
  if (has_assists_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->assists_count(), output);
  }

  // optional uint32 denies_count = 31;
  if (has_denies_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->denies_count(), output);
  }

  // optional uint32 lh_count = 32;
  if (has_lh_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->lh_count(), output);
  }

  // optional uint32 hero_healing = 33;
  if (has_hero_healing()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->hero_healing(), output);
  }

  // optional uint32 gold_per_min = 34;
  if (has_gold_per_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->gold_per_min(), output);
  }

  // optional uint32 xp_per_min = 35;
  if (has_xp_per_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->xp_per_min(), output);
  }

  // optional uint32 net_gold = 36;
  if (has_net_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->net_gold(), output);
  }

  // optional uint32 gold = 37;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->gold(), output);
  }

  // optional float x = 38;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->x(), output);
  }

  // optional float y = 39;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->y(), output);
  }

  // optional int32 respawn_time = 40;
  if (has_respawn_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->respawn_time(), output);
  }

  // optional uint32 ultimate_cooldown = 41;
  if (has_ultimate_cooldown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->ultimate_cooldown(), output);
  }

  // optional bool has_buyback = 42;
  if (has_has_buyback()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->has_buyback(), output);
  }

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails items = 43;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->items(i), output);
  }

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
  for (unsigned int i = 0, n = this->stashitems_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->stashitems(i), output);
  }

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
  for (unsigned int i = 0, n = this->itemshoppinglist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->itemshoppinglist(i), output);
  }

  // repeated .CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
  for (unsigned int i = 0, n = this->levelpoints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->levelpoints(i), output);
  }

  // repeated .CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
  for (unsigned int i = 0, n = this->hero_to_hero_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->hero_to_hero_stats(i), output);
  }

  // optional bool has_ultimate = 48;
  if (has_has_ultimate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(48, this->has_ultimate(), output);
  }

  // optional bool has_ultimate_mana = 49;
  if (has_has_ultimate_mana()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(49, this->has_ultimate_mana(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.PlayerDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_PlayerDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.PlayerDetails)
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTARealtimeGameStats.PlayerDetails.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 team = 4;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team(), target);
  }

  // optional uint32 heroid = 5;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->heroid(), target);
  }

  // optional uint32 healthpoints = 6;
  if (has_healthpoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->healthpoints(), target);
  }

  // optional uint32 maxhealthpoints = 7;
  if (has_maxhealthpoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->maxhealthpoints(), target);
  }

  // optional float healthregenrate = 8;
  if (has_healthregenrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->healthregenrate(), target);
  }

  // optional uint32 manapoints = 9;
  if (has_manapoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->manapoints(), target);
  }

  // optional uint32 maxmanapoints = 10;
  if (has_maxmanapoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->maxmanapoints(), target);
  }

  // optional float manaregenrate = 11;
  if (has_manaregenrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->manaregenrate(), target);
  }

  // optional uint32 base_strength = 12;
  if (has_base_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->base_strength(), target);
  }

  // optional uint32 base_agility = 13;
  if (has_base_agility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->base_agility(), target);
  }

  // optional uint32 base_intelligence = 14;
  if (has_base_intelligence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->base_intelligence(), target);
  }

  // optional int32 base_armor = 15;
  if (has_base_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->base_armor(), target);
  }

  // optional uint32 base_movespeed = 16;
  if (has_base_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->base_movespeed(), target);
  }

  // optional uint32 base_damage = 17;
  if (has_base_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->base_damage(), target);
  }

  // optional uint32 strength = 18;
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->strength(), target);
  }

  // optional uint32 agility = 19;
  if (has_agility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->agility(), target);
  }

  // optional uint32 intelligence = 20;
  if (has_intelligence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->intelligence(), target);
  }

  // optional int32 armor = 21;
  if (has_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->armor(), target);
  }

  // optional uint32 movespeed = 22;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->movespeed(), target);
  }

  // optional uint32 damage = 23;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->damage(), target);
  }

  // optional uint32 hero_damage = 24;
  if (has_hero_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->hero_damage(), target);
  }

  // optional uint32 tower_damage = 25;
  if (has_tower_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->tower_damage(), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
  for (unsigned int i = 0, n = this->abilities_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->abilities(i), target);
  }

  // optional uint32 level = 27;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->level(), target);
  }

  // optional uint32 kill_count = 28;
  if (has_kill_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->kill_count(), target);
  }

  // optional uint32 death_count = 29;
  if (has_death_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->death_count(), target);
  }

  // optional uint32 assists_count = 30;
  if (has_assists_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->assists_count(), target);
  }

  // optional uint32 denies_count = 31;
  if (has_denies_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->denies_count(), target);
  }

  // optional uint32 lh_count = 32;
  if (has_lh_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->lh_count(), target);
  }

  // optional uint32 hero_healing = 33;
  if (has_hero_healing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->hero_healing(), target);
  }

  // optional uint32 gold_per_min = 34;
  if (has_gold_per_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->gold_per_min(), target);
  }

  // optional uint32 xp_per_min = 35;
  if (has_xp_per_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->xp_per_min(), target);
  }

  // optional uint32 net_gold = 36;
  if (has_net_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->net_gold(), target);
  }

  // optional uint32 gold = 37;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->gold(), target);
  }

  // optional float x = 38;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->x(), target);
  }

  // optional float y = 39;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->y(), target);
  }

  // optional int32 respawn_time = 40;
  if (has_respawn_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->respawn_time(), target);
  }

  // optional uint32 ultimate_cooldown = 41;
  if (has_ultimate_cooldown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->ultimate_cooldown(), target);
  }

  // optional bool has_buyback = 42;
  if (has_has_buyback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->has_buyback(), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails items = 43;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->items(i), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
  for (unsigned int i = 0, n = this->stashitems_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->stashitems(i), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
  for (unsigned int i = 0, n = this->itemshoppinglist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->itemshoppinglist(i), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
  for (unsigned int i = 0, n = this->levelpoints_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->levelpoints(i), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
  for (unsigned int i = 0, n = this->hero_to_hero_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->hero_to_hero_stats(i), target);
  }

  // optional bool has_ultimate = 48;
  if (has_has_ultimate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(48, this->has_ultimate(), target);
  }

  // optional bool has_ultimate_mana = 49;
  if (has_has_ultimate_mana()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(49, this->has_ultimate_mana(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.PlayerDetails)
  return target;
}

int CMsgDOTARealtimeGameStats_PlayerDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 team = 4;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional uint32 heroid = 5;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint32 healthpoints = 6;
    if (has_healthpoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->healthpoints());
    }

    // optional uint32 maxhealthpoints = 7;
    if (has_maxhealthpoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhealthpoints());
    }

    // optional float healthregenrate = 8;
    if (has_healthregenrate()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 manapoints = 9;
    if (has_manapoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manapoints());
    }

    // optional uint32 maxmanapoints = 10;
    if (has_maxmanapoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxmanapoints());
    }

    // optional float manaregenrate = 11;
    if (has_manaregenrate()) {
      total_size += 1 + 4;
    }

    // optional uint32 base_strength = 12;
    if (has_base_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_strength());
    }

    // optional uint32 base_agility = 13;
    if (has_base_agility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_agility());
    }

    // optional uint32 base_intelligence = 14;
    if (has_base_intelligence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_intelligence());
    }

    // optional int32 base_armor = 15;
    if (has_base_armor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_armor());
    }

    // optional uint32 base_movespeed = 16;
    if (has_base_movespeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_movespeed());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 base_damage = 17;
    if (has_base_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_damage());
    }

    // optional uint32 strength = 18;
    if (has_strength()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strength());
    }

    // optional uint32 agility = 19;
    if (has_agility()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->agility());
    }

    // optional uint32 intelligence = 20;
    if (has_intelligence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intelligence());
    }

    // optional int32 armor = 21;
    if (has_armor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armor());
    }

    // optional uint32 movespeed = 22;
    if (has_movespeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->movespeed());
    }

    // optional uint32 damage = 23;
    if (has_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

    // optional uint32 hero_damage = 24;
    if (has_hero_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_damage());
    }

  }
  if (_has_bits_[24 / 32] & 4244635648u) {
    // optional uint32 tower_damage = 25;
    if (has_tower_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_damage());
    }

    // optional uint32 level = 27;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 kill_count = 28;
    if (has_kill_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill_count());
    }

    // optional uint32 death_count = 29;
    if (has_death_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->death_count());
    }

    // optional uint32 assists_count = 30;
    if (has_assists_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists_count());
    }

    // optional uint32 denies_count = 31;
    if (has_denies_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->denies_count());
    }

    // optional uint32 lh_count = 32;
    if (has_lh_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lh_count());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional uint32 hero_healing = 33;
    if (has_hero_healing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_healing());
    }

    // optional uint32 gold_per_min = 34;
    if (has_gold_per_min()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_per_min());
    }

    // optional uint32 xp_per_min = 35;
    if (has_xp_per_min()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp_per_min());
    }

    // optional uint32 net_gold = 36;
    if (has_net_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_gold());
    }

    // optional uint32 gold = 37;
    if (has_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional float x = 38;
    if (has_x()) {
      total_size += 2 + 4;
    }

    // optional float y = 39;
    if (has_y()) {
      total_size += 2 + 4;
    }

    // optional int32 respawn_time = 40;
    if (has_respawn_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->respawn_time());
    }

  }
  if (_has_bits_[40 / 32] & 33536u) {
    // optional uint32 ultimate_cooldown = 41;
    if (has_ultimate_cooldown()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ultimate_cooldown());
    }

    // optional bool has_buyback = 42;
    if (has_has_buyback()) {
      total_size += 2 + 1;
    }

    // optional bool has_ultimate = 48;
    if (has_has_ultimate()) {
      total_size += 2 + 1;
    }

  }
  // optional bool has_ultimate_mana = 49;
  if (has_has_ultimate_mana()) {
    total_size += 2 + 1;
  }

  // repeated .CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
  total_size += 2 * this->abilities_size();
  for (int i = 0; i < this->abilities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->abilities(i));
  }

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails items = 43;
  total_size += 2 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
  total_size += 2 * this->stashitems_size();
  for (int i = 0; i < this->stashitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stashitems(i));
  }

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
  total_size += 2 * this->itemshoppinglist_size();
  for (int i = 0; i < this->itemshoppinglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemshoppinglist(i));
  }

  // repeated .CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
  total_size += 2 * this->levelpoints_size();
  for (int i = 0; i < this->levelpoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->levelpoints(i));
  }

  // repeated .CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
  total_size += 2 * this->hero_to_hero_stats_size();
  for (int i = 0; i < this->hero_to_hero_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero_to_hero_stats(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_PlayerDetails::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTARealtimeGameStats_PlayerDetails* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_PlayerDetails>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_PlayerDetails::MergeFrom(const CMsgDOTARealtimeGameStats_PlayerDetails& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  abilities_.MergeFrom(from.abilities_);
  items_.MergeFrom(from.items_);
  stashitems_.MergeFrom(from.stashitems_);
  itemshoppinglist_.MergeFrom(from.itemshoppinglist_);
  levelpoints_.MergeFrom(from.levelpoints_);
  hero_to_hero_stats_.MergeFrom(from.hero_to_hero_stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_healthpoints()) {
      set_healthpoints(from.healthpoints());
    }
    if (from.has_maxhealthpoints()) {
      set_maxhealthpoints(from.maxhealthpoints());
    }
    if (from.has_healthregenrate()) {
      set_healthregenrate(from.healthregenrate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_manapoints()) {
      set_manapoints(from.manapoints());
    }
    if (from.has_maxmanapoints()) {
      set_maxmanapoints(from.maxmanapoints());
    }
    if (from.has_manaregenrate()) {
      set_manaregenrate(from.manaregenrate());
    }
    if (from.has_base_strength()) {
      set_base_strength(from.base_strength());
    }
    if (from.has_base_agility()) {
      set_base_agility(from.base_agility());
    }
    if (from.has_base_intelligence()) {
      set_base_intelligence(from.base_intelligence());
    }
    if (from.has_base_armor()) {
      set_base_armor(from.base_armor());
    }
    if (from.has_base_movespeed()) {
      set_base_movespeed(from.base_movespeed());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_base_damage()) {
      set_base_damage(from.base_damage());
    }
    if (from.has_strength()) {
      set_strength(from.strength());
    }
    if (from.has_agility()) {
      set_agility(from.agility());
    }
    if (from.has_intelligence()) {
      set_intelligence(from.intelligence());
    }
    if (from.has_armor()) {
      set_armor(from.armor());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_hero_damage()) {
      set_hero_damage(from.hero_damage());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_tower_damage()) {
      set_tower_damage(from.tower_damage());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_kill_count()) {
      set_kill_count(from.kill_count());
    }
    if (from.has_death_count()) {
      set_death_count(from.death_count());
    }
    if (from.has_assists_count()) {
      set_assists_count(from.assists_count());
    }
    if (from.has_denies_count()) {
      set_denies_count(from.denies_count());
    }
    if (from.has_lh_count()) {
      set_lh_count(from.lh_count());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_hero_healing()) {
      set_hero_healing(from.hero_healing());
    }
    if (from.has_gold_per_min()) {
      set_gold_per_min(from.gold_per_min());
    }
    if (from.has_xp_per_min()) {
      set_xp_per_min(from.xp_per_min());
    }
    if (from.has_net_gold()) {
      set_net_gold(from.net_gold());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_respawn_time()) {
      set_respawn_time(from.respawn_time());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_ultimate_cooldown()) {
      set_ultimate_cooldown(from.ultimate_cooldown());
    }
    if (from.has_has_buyback()) {
      set_has_buyback(from.has_buyback());
    }
    if (from.has_has_ultimate()) {
      set_has_ultimate(from.has_ultimate());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_has_ultimate_mana()) {
      set_has_ultimate_mana(from.has_ultimate_mana());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTARealtimeGameStats_PlayerDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_PlayerDetails::CopyFrom(const CMsgDOTARealtimeGameStats_PlayerDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_PlayerDetails::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_PlayerDetails::Swap(CMsgDOTARealtimeGameStats_PlayerDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_PlayerDetails::InternalSwap(CMsgDOTARealtimeGameStats_PlayerDetails* other) {
  std::swap(accountid_, other->accountid_);
  std::swap(playerid_, other->playerid_);
  name_.Swap(&other->name_);
  std::swap(team_, other->team_);
  std::swap(heroid_, other->heroid_);
  std::swap(healthpoints_, other->healthpoints_);
  std::swap(maxhealthpoints_, other->maxhealthpoints_);
  std::swap(healthregenrate_, other->healthregenrate_);
  std::swap(manapoints_, other->manapoints_);
  std::swap(maxmanapoints_, other->maxmanapoints_);
  std::swap(manaregenrate_, other->manaregenrate_);
  std::swap(base_strength_, other->base_strength_);
  std::swap(base_agility_, other->base_agility_);
  std::swap(base_intelligence_, other->base_intelligence_);
  std::swap(base_armor_, other->base_armor_);
  std::swap(base_movespeed_, other->base_movespeed_);
  std::swap(base_damage_, other->base_damage_);
  std::swap(strength_, other->strength_);
  std::swap(agility_, other->agility_);
  std::swap(intelligence_, other->intelligence_);
  std::swap(armor_, other->armor_);
  std::swap(movespeed_, other->movespeed_);
  std::swap(damage_, other->damage_);
  std::swap(hero_damage_, other->hero_damage_);
  std::swap(tower_damage_, other->tower_damage_);
  abilities_.UnsafeArenaSwap(&other->abilities_);
  std::swap(level_, other->level_);
  std::swap(kill_count_, other->kill_count_);
  std::swap(death_count_, other->death_count_);
  std::swap(assists_count_, other->assists_count_);
  std::swap(denies_count_, other->denies_count_);
  std::swap(lh_count_, other->lh_count_);
  std::swap(hero_healing_, other->hero_healing_);
  std::swap(gold_per_min_, other->gold_per_min_);
  std::swap(xp_per_min_, other->xp_per_min_);
  std::swap(net_gold_, other->net_gold_);
  std::swap(gold_, other->gold_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(respawn_time_, other->respawn_time_);
  std::swap(ultimate_cooldown_, other->ultimate_cooldown_);
  std::swap(has_buyback_, other->has_buyback_);
  items_.UnsafeArenaSwap(&other->items_);
  stashitems_.UnsafeArenaSwap(&other->stashitems_);
  itemshoppinglist_.UnsafeArenaSwap(&other->itemshoppinglist_);
  levelpoints_.UnsafeArenaSwap(&other->levelpoints_);
  hero_to_hero_stats_.UnsafeArenaSwap(&other->hero_to_hero_stats_);
  std::swap(has_ultimate_, other->has_ultimate_);
  std::swap(has_ultimate_mana_, other->has_ultimate_mana_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_PlayerDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_PlayerDetails_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_PlayerDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_BuildingDetails::kTeamFieldNumber;
const int CMsgDOTARealtimeGameStats_BuildingDetails::kHeadingFieldNumber;
const int CMsgDOTARealtimeGameStats_BuildingDetails::kLaneFieldNumber;
const int CMsgDOTARealtimeGameStats_BuildingDetails::kTierFieldNumber;
const int CMsgDOTARealtimeGameStats_BuildingDetails::kTypeFieldNumber;
const int CMsgDOTARealtimeGameStats_BuildingDetails::kXFieldNumber;
const int CMsgDOTARealtimeGameStats_BuildingDetails::kYFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_BuildingDetails::CMsgDOTARealtimeGameStats_BuildingDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.BuildingDetails)
}

void CMsgDOTARealtimeGameStats_BuildingDetails::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_BuildingDetails::CMsgDOTARealtimeGameStats_BuildingDetails(const CMsgDOTARealtimeGameStats_BuildingDetails& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.BuildingDetails)
}

void CMsgDOTARealtimeGameStats_BuildingDetails::SharedCtor() {
  _cached_size_ = 0;
  team_ = 0u;
  heading_ = 0;
  lane_ = 0u;
  tier_ = 0u;
  type_ = 0u;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_BuildingDetails::~CMsgDOTARealtimeGameStats_BuildingDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.BuildingDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_BuildingDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_BuildingDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_BuildingDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_BuildingDetails_descriptor_;
}

const CMsgDOTARealtimeGameStats_BuildingDetails& CMsgDOTARealtimeGameStats_BuildingDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_BuildingDetails* CMsgDOTARealtimeGameStats_BuildingDetails::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_BuildingDetails* CMsgDOTARealtimeGameStats_BuildingDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_BuildingDetails* n = new CMsgDOTARealtimeGameStats_BuildingDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_BuildingDetails::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTARealtimeGameStats_BuildingDetails*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(team_, y_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTARealtimeGameStats_BuildingDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.BuildingDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_heading;
        break;
      }

      // optional float heading = 3;
      case 3: {
        if (tag == 29) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lane;
        break;
      }

      // optional uint32 lane = 4;
      case 4: {
        if (tag == 32) {
         parse_lane:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_)));
          set_has_lane();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tier;
        break;
      }

      // optional uint32 tier = 5;
      case 5: {
        if (tag == 40) {
         parse_tier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tier_)));
          set_has_tier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional uint32 type = 6;
      case 6: {
        if (tag == 48) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_x;
        break;
      }

      // optional float x = 7;
      case 7: {
        if (tag == 61) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_y;
        break;
      }

      // optional float y = 8;
      case 8: {
        if (tag == 69) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.BuildingDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.BuildingDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_BuildingDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.BuildingDetails)
  // optional uint32 team = 2;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team(), output);
  }

  // optional float heading = 3;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->heading(), output);
  }

  // optional uint32 lane = 4;
  if (has_lane()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lane(), output);
  }

  // optional uint32 tier = 5;
  if (has_tier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tier(), output);
  }

  // optional uint32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->type(), output);
  }

  // optional float x = 7;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->x(), output);
  }

  // optional float y = 8;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.BuildingDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_BuildingDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.BuildingDetails)
  // optional uint32 team = 2;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team(), target);
  }

  // optional float heading = 3;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->heading(), target);
  }

  // optional uint32 lane = 4;
  if (has_lane()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lane(), target);
  }

  // optional uint32 tier = 5;
  if (has_tier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tier(), target);
  }

  // optional uint32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->type(), target);
  }

  // optional float x = 7;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->x(), target);
  }

  // optional float y = 8;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.BuildingDetails)
  return target;
}

int CMsgDOTARealtimeGameStats_BuildingDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional float heading = 3;
    if (has_heading()) {
      total_size += 1 + 4;
    }

    // optional uint32 lane = 4;
    if (has_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lane());
    }

    // optional uint32 tier = 5;
    if (has_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tier());
    }

    // optional uint32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional float x = 7;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 8;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_BuildingDetails::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTARealtimeGameStats_BuildingDetails* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_BuildingDetails>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_BuildingDetails::MergeFrom(const CMsgDOTARealtimeGameStats_BuildingDetails& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_lane()) {
      set_lane(from.lane());
    }
    if (from.has_tier()) {
      set_tier(from.tier());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTARealtimeGameStats_BuildingDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_BuildingDetails::CopyFrom(const CMsgDOTARealtimeGameStats_BuildingDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_BuildingDetails::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_BuildingDetails::Swap(CMsgDOTARealtimeGameStats_BuildingDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_BuildingDetails::InternalSwap(CMsgDOTARealtimeGameStats_BuildingDetails* other) {
  std::swap(team_, other->team_);
  std::swap(heading_, other->heading_);
  std::swap(lane_, other->lane_);
  std::swap(tier_, other->tier_);
  std::swap(type_, other->type_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_BuildingDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_BuildingDetails_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_BuildingDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_KillDetails::kPlayerIdFieldNumber;
const int CMsgDOTARealtimeGameStats_KillDetails::kDeathTimeFieldNumber;
const int CMsgDOTARealtimeGameStats_KillDetails::kKillerPlayerIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_KillDetails::CMsgDOTARealtimeGameStats_KillDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.KillDetails)
}

void CMsgDOTARealtimeGameStats_KillDetails::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_KillDetails::CMsgDOTARealtimeGameStats_KillDetails(const CMsgDOTARealtimeGameStats_KillDetails& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.KillDetails)
}

void CMsgDOTARealtimeGameStats_KillDetails::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  death_time_ = 0;
  killer_player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_KillDetails::~CMsgDOTARealtimeGameStats_KillDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.KillDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_KillDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_KillDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_KillDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_KillDetails_descriptor_;
}

const CMsgDOTARealtimeGameStats_KillDetails& CMsgDOTARealtimeGameStats_KillDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_KillDetails* CMsgDOTARealtimeGameStats_KillDetails::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_KillDetails* CMsgDOTARealtimeGameStats_KillDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_KillDetails* n = new CMsgDOTARealtimeGameStats_KillDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_KillDetails::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTARealtimeGameStats_KillDetails*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(player_id_, killer_player_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTARealtimeGameStats_KillDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.KillDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_death_time;
        break;
      }

      // optional int32 death_time = 2;
      case 2: {
        if (tag == 16) {
         parse_death_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &death_time_)));
          set_has_death_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_killer_player_id;
        break;
      }

      // optional uint32 killer_player_id = 3;
      case 3: {
        if (tag == 24) {
         parse_killer_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killer_player_id_)));
          set_has_killer_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.KillDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.KillDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_KillDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.KillDetails)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional int32 death_time = 2;
  if (has_death_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->death_time(), output);
  }

  // optional uint32 killer_player_id = 3;
  if (has_killer_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->killer_player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.KillDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_KillDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.KillDetails)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional int32 death_time = 2;
  if (has_death_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->death_time(), target);
  }

  // optional uint32 killer_player_id = 3;
  if (has_killer_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->killer_player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.KillDetails)
  return target;
}

int CMsgDOTARealtimeGameStats_KillDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional int32 death_time = 2;
    if (has_death_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->death_time());
    }

    // optional uint32 killer_player_id = 3;
    if (has_killer_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killer_player_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_KillDetails::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTARealtimeGameStats_KillDetails* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_KillDetails>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_KillDetails::MergeFrom(const CMsgDOTARealtimeGameStats_KillDetails& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_death_time()) {
      set_death_time(from.death_time());
    }
    if (from.has_killer_player_id()) {
      set_killer_player_id(from.killer_player_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTARealtimeGameStats_KillDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_KillDetails::CopyFrom(const CMsgDOTARealtimeGameStats_KillDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_KillDetails::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_KillDetails::Swap(CMsgDOTARealtimeGameStats_KillDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_KillDetails::InternalSwap(CMsgDOTARealtimeGameStats_KillDetails* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(death_time_, other->death_time_);
  std::swap(killer_player_id_, other->killer_player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_KillDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_KillDetails_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_KillDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_BroadcasterDetails::kPlayerIdFieldNumber;
const int CMsgDOTARealtimeGameStats_BroadcasterDetails::kSelectedHeroFieldNumber;
const int CMsgDOTARealtimeGameStats_BroadcasterDetails::kSelectedGraphFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_BroadcasterDetails::CMsgDOTARealtimeGameStats_BroadcasterDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.BroadcasterDetails)
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_BroadcasterDetails::CMsgDOTARealtimeGameStats_BroadcasterDetails(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.BroadcasterDetails)
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  selected_hero_ = 0u;
  selected_graph_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_BroadcasterDetails::~CMsgDOTARealtimeGameStats_BroadcasterDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.BroadcasterDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_BroadcasterDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_BroadcasterDetails_descriptor_;
}

const CMsgDOTARealtimeGameStats_BroadcasterDetails& CMsgDOTARealtimeGameStats_BroadcasterDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_BroadcasterDetails* CMsgDOTARealtimeGameStats_BroadcasterDetails::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_BroadcasterDetails* CMsgDOTARealtimeGameStats_BroadcasterDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_BroadcasterDetails* n = new CMsgDOTARealtimeGameStats_BroadcasterDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTARealtimeGameStats_BroadcasterDetails*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(player_id_, selected_graph_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTARealtimeGameStats_BroadcasterDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.BroadcasterDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_selected_hero;
        break;
      }

      // optional uint32 selected_hero = 2;
      case 2: {
        if (tag == 16) {
         parse_selected_hero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selected_hero_)));
          set_has_selected_hero();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_selected_graph;
        break;
      }

      // optional uint32 selected_graph = 3;
      case 3: {
        if (tag == 24) {
         parse_selected_graph:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selected_graph_)));
          set_has_selected_graph();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.BroadcasterDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.BroadcasterDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.BroadcasterDetails)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional uint32 selected_hero = 2;
  if (has_selected_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->selected_hero(), output);
  }

  // optional uint32 selected_graph = 3;
  if (has_selected_graph()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->selected_graph(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.BroadcasterDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_BroadcasterDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.BroadcasterDetails)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional uint32 selected_hero = 2;
  if (has_selected_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->selected_hero(), target);
  }

  // optional uint32 selected_graph = 3;
  if (has_selected_graph()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->selected_graph(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.BroadcasterDetails)
  return target;
}

int CMsgDOTARealtimeGameStats_BroadcasterDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional uint32 selected_hero = 2;
    if (has_selected_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selected_hero());
    }

    // optional uint32 selected_graph = 3;
    if (has_selected_graph()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selected_graph());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTARealtimeGameStats_BroadcasterDetails* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_BroadcasterDetails>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::MergeFrom(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_selected_hero()) {
      set_selected_hero(from.selected_hero());
    }
    if (from.has_selected_graph()) {
      set_selected_graph(from.selected_graph());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::CopyFrom(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_BroadcasterDetails::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::Swap(CMsgDOTARealtimeGameStats_BroadcasterDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_BroadcasterDetails::InternalSwap(CMsgDOTARealtimeGameStats_BroadcasterDetails* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(selected_hero_, other->selected_hero_);
  std::swap(selected_graph_, other->selected_graph_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_BroadcasterDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_BroadcasterDetails_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_BroadcasterDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_PickBanDetails::kHeroFieldNumber;
const int CMsgDOTARealtimeGameStats_PickBanDetails::kTeamFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_PickBanDetails::CMsgDOTARealtimeGameStats_PickBanDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.PickBanDetails)
}

void CMsgDOTARealtimeGameStats_PickBanDetails::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_PickBanDetails::CMsgDOTARealtimeGameStats_PickBanDetails(const CMsgDOTARealtimeGameStats_PickBanDetails& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.PickBanDetails)
}

void CMsgDOTARealtimeGameStats_PickBanDetails::SharedCtor() {
  _cached_size_ = 0;
  hero_ = 0u;
  team_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_PickBanDetails::~CMsgDOTARealtimeGameStats_PickBanDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.PickBanDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_PickBanDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_PickBanDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_PickBanDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_PickBanDetails_descriptor_;
}

const CMsgDOTARealtimeGameStats_PickBanDetails& CMsgDOTARealtimeGameStats_PickBanDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_PickBanDetails::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_PickBanDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_PickBanDetails* n = new CMsgDOTARealtimeGameStats_PickBanDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_PickBanDetails::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTARealtimeGameStats_PickBanDetails*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(hero_, team_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTARealtimeGameStats_PickBanDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.PickBanDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_)));
          set_has_hero();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team;
        break;
      }

      // optional uint32 team = 2;
      case 2: {
        if (tag == 16) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.PickBanDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.PickBanDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_PickBanDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.PickBanDetails)
  // optional uint32 hero = 1;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero(), output);
  }

  // optional uint32 team = 2;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.PickBanDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_PickBanDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.PickBanDetails)
  // optional uint32 hero = 1;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero(), target);
  }

  // optional uint32 team = 2;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.PickBanDetails)
  return target;
}

int CMsgDOTARealtimeGameStats_PickBanDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 hero = 1;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero());
    }

    // optional uint32 team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_PickBanDetails::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTARealtimeGameStats_PickBanDetails* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_PickBanDetails>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_PickBanDetails::MergeFrom(const CMsgDOTARealtimeGameStats_PickBanDetails& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero()) {
      set_hero(from.hero());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTARealtimeGameStats_PickBanDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_PickBanDetails::CopyFrom(const CMsgDOTARealtimeGameStats_PickBanDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_PickBanDetails::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_PickBanDetails::Swap(CMsgDOTARealtimeGameStats_PickBanDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_PickBanDetails::InternalSwap(CMsgDOTARealtimeGameStats_PickBanDetails* other) {
  std::swap(hero_, other->hero_);
  std::swap(team_, other->team_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_PickBanDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_PickBanDetails_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_PickBanDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_MatchDetails::kServerSteamIdFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kMatchidFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kTimestampFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kTimeOfDayFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kIsNightstalkerNightFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kGameTimeFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kTeamidRadiantFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kTeamidDireFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kPicksFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kBansFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kKillsFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kBroadcastersFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kGameModeFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kLeagueIdFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kSingleTeamFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kCheersPeakFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_MatchDetails::CMsgDOTARealtimeGameStats_MatchDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.MatchDetails)
}

void CMsgDOTARealtimeGameStats_MatchDetails::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_MatchDetails::CMsgDOTARealtimeGameStats_MatchDetails(const CMsgDOTARealtimeGameStats_MatchDetails& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.MatchDetails)
}

void CMsgDOTARealtimeGameStats_MatchDetails::SharedCtor() {
  _cached_size_ = 0;
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  matchid_ = GOOGLE_ULONGLONG(0);
  timestamp_ = 0u;
  time_of_day_ = 0;
  is_nightstalker_night_ = false;
  game_time_ = 0;
  teamid_radiant_ = 0u;
  teamid_dire_ = 0u;
  game_mode_ = 0u;
  league_id_ = 0u;
  single_team_ = false;
  cheers_peak_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_MatchDetails::~CMsgDOTARealtimeGameStats_MatchDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.MatchDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_MatchDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_MatchDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_MatchDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_MatchDetails_descriptor_;
}

const CMsgDOTARealtimeGameStats_MatchDetails& CMsgDOTARealtimeGameStats_MatchDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_MatchDetails* CMsgDOTARealtimeGameStats_MatchDetails::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_MatchDetails* CMsgDOTARealtimeGameStats_MatchDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_MatchDetails* n = new CMsgDOTARealtimeGameStats_MatchDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_MatchDetails::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTARealtimeGameStats_MatchDetails*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(server_steam_id_, teamid_radiant_);
    ZR_(teamid_dire_, is_nightstalker_night_);
  }
  if (_has_bits_[8 / 32] & 61440u) {
    ZR_(game_mode_, cheers_peak_);
    single_team_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  picks_.Clear();
  bans_.Clear();
  kills_.Clear();
  broadcasters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTARealtimeGameStats_MatchDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.MatchDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 server_steam_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steam_id_)));
          set_has_server_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_matchid;
        break;
      }

      // optional uint64 matchid = 2;
      case 2: {
        if (tag == 16) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_time_of_day;
        break;
      }

      // optional float time_of_day = 4;
      case 4: {
        if (tag == 37) {
         parse_time_of_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_of_day_)));
          set_has_time_of_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_nightstalker_night;
        break;
      }

      // optional bool is_nightstalker_night = 5;
      case 5: {
        if (tag == 40) {
         parse_is_nightstalker_night:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_nightstalker_night_)));
          set_has_is_nightstalker_night();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_game_time;
        break;
      }

      // optional int32 game_time = 6;
      case 6: {
        if (tag == 48) {
         parse_game_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_time_)));
          set_has_game_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_teamid_radiant;
        break;
      }

      // optional uint32 teamid_radiant = 8;
      case 8: {
        if (tag == 64) {
         parse_teamid_radiant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_radiant_)));
          set_has_teamid_radiant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_teamid_dire;
        break;
      }

      // optional uint32 teamid_dire = 9;
      case 9: {
        if (tag == 72) {
         parse_teamid_dire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_dire_)));
          set_has_teamid_dire();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_picks;
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
      case 10: {
        if (tag == 82) {
         parse_picks:
          DO_(input->IncrementRecursionDepth());
         parse_loop_picks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_picks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_picks;
        if (input->ExpectTag(90)) goto parse_loop_bans;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
      case 11: {
        if (tag == 90) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_bans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_bans()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_bans;
        if (input->ExpectTag(98)) goto parse_loop_kills;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.KillDetails kills = 12;
      case 12: {
        if (tag == 98) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_kills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_kills()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_loop_kills;
        if (input->ExpectTag(106)) goto parse_loop_broadcasters;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
      case 13: {
        if (tag == 106) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_broadcasters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_broadcasters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_broadcasters;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(112)) goto parse_game_mode;
        break;
      }

      // optional uint32 game_mode = 14;
      case 14: {
        if (tag == 112) {
         parse_game_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
          set_has_game_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_league_id;
        break;
      }

      // optional uint32 league_id = 15;
      case 15: {
        if (tag == 120) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_single_team;
        break;
      }

      // optional bool single_team = 16;
      case 16: {
        if (tag == 128) {
         parse_single_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &single_team_)));
          set_has_single_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_cheers_peak;
        break;
      }

      // optional uint32 cheers_peak = 17;
      case 17: {
        if (tag == 136) {
         parse_cheers_peak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cheers_peak_)));
          set_has_cheers_peak();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.MatchDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.MatchDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_MatchDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.MatchDetails)
  // optional fixed64 server_steam_id = 1;
  if (has_server_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->server_steam_id(), output);
  }

  // optional uint64 matchid = 2;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->matchid(), output);
  }

  // optional uint32 timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timestamp(), output);
  }

  // optional float time_of_day = 4;
  if (has_time_of_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->time_of_day(), output);
  }

  // optional bool is_nightstalker_night = 5;
  if (has_is_nightstalker_night()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_nightstalker_night(), output);
  }

  // optional int32 game_time = 6;
  if (has_game_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->game_time(), output);
  }

  // optional uint32 teamid_radiant = 8;
  if (has_teamid_radiant()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->teamid_radiant(), output);
  }

  // optional uint32 teamid_dire = 9;
  if (has_teamid_dire()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->teamid_dire(), output);
  }

  // repeated .CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
  for (unsigned int i = 0, n = this->picks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->picks(i), output);
  }

  // repeated .CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
  for (unsigned int i = 0, n = this->bans_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->bans(i), output);
  }

  // repeated .CMsgDOTARealtimeGameStats.KillDetails kills = 12;
  for (unsigned int i = 0, n = this->kills_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->kills(i), output);
  }

  // repeated .CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
  for (unsigned int i = 0, n = this->broadcasters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->broadcasters(i), output);
  }

  // optional uint32 game_mode = 14;
  if (has_game_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->game_mode(), output);
  }

  // optional uint32 league_id = 15;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->league_id(), output);
  }

  // optional bool single_team = 16;
  if (has_single_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->single_team(), output);
  }

  // optional uint32 cheers_peak = 17;
  if (has_cheers_peak()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->cheers_peak(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.MatchDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_MatchDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.MatchDetails)
  // optional fixed64 server_steam_id = 1;
  if (has_server_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->server_steam_id(), target);
  }

  // optional uint64 matchid = 2;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->matchid(), target);
  }

  // optional uint32 timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timestamp(), target);
  }

  // optional float time_of_day = 4;
  if (has_time_of_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->time_of_day(), target);
  }

  // optional bool is_nightstalker_night = 5;
  if (has_is_nightstalker_night()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_nightstalker_night(), target);
  }

  // optional int32 game_time = 6;
  if (has_game_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->game_time(), target);
  }

  // optional uint32 teamid_radiant = 8;
  if (has_teamid_radiant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->teamid_radiant(), target);
  }

  // optional uint32 teamid_dire = 9;
  if (has_teamid_dire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->teamid_dire(), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
  for (unsigned int i = 0, n = this->picks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->picks(i), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
  for (unsigned int i = 0, n = this->bans_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->bans(i), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.KillDetails kills = 12;
  for (unsigned int i = 0, n = this->kills_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->kills(i), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
  for (unsigned int i = 0, n = this->broadcasters_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->broadcasters(i), target);
  }

  // optional uint32 game_mode = 14;
  if (has_game_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->game_mode(), target);
  }

  // optional uint32 league_id = 15;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->league_id(), target);
  }

  // optional bool single_team = 16;
  if (has_single_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->single_team(), target);
  }

  // optional uint32 cheers_peak = 17;
  if (has_cheers_peak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->cheers_peak(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.MatchDetails)
  return target;
}

int CMsgDOTARealtimeGameStats_MatchDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional fixed64 server_steam_id = 1;
    if (has_server_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint64 matchid = 2;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->matchid());
    }

    // optional uint32 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional float time_of_day = 4;
    if (has_time_of_day()) {
      total_size += 1 + 4;
    }

    // optional bool is_nightstalker_night = 5;
    if (has_is_nightstalker_night()) {
      total_size += 1 + 1;
    }

    // optional int32 game_time = 6;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_time());
    }

    // optional uint32 teamid_radiant = 8;
    if (has_teamid_radiant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid_radiant());
    }

    // optional uint32 teamid_dire = 9;
    if (has_teamid_dire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid_dire());
    }

  }
  if (_has_bits_[12 / 32] & 61440u) {
    // optional uint32 game_mode = 14;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

    // optional uint32 league_id = 15;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional bool single_team = 16;
    if (has_single_team()) {
      total_size += 2 + 1;
    }

    // optional uint32 cheers_peak = 17;
    if (has_cheers_peak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cheers_peak());
    }

  }
  // repeated .CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
  total_size += 1 * this->picks_size();
  for (int i = 0; i < this->picks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->picks(i));
  }

  // repeated .CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
  total_size += 1 * this->bans_size();
  for (int i = 0; i < this->bans_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bans(i));
  }

  // repeated .CMsgDOTARealtimeGameStats.KillDetails kills = 12;
  total_size += 1 * this->kills_size();
  for (int i = 0; i < this->kills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kills(i));
  }

  // repeated .CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
  total_size += 1 * this->broadcasters_size();
  for (int i = 0; i < this->broadcasters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->broadcasters(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_MatchDetails::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTARealtimeGameStats_MatchDetails* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_MatchDetails>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_MatchDetails::MergeFrom(const CMsgDOTARealtimeGameStats_MatchDetails& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  picks_.MergeFrom(from.picks_);
  bans_.MergeFrom(from.bans_);
  kills_.MergeFrom(from.kills_);
  broadcasters_.MergeFrom(from.broadcasters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_steam_id()) {
      set_server_steam_id(from.server_steam_id());
    }
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_time_of_day()) {
      set_time_of_day(from.time_of_day());
    }
    if (from.has_is_nightstalker_night()) {
      set_is_nightstalker_night(from.is_nightstalker_night());
    }
    if (from.has_game_time()) {
      set_game_time(from.game_time());
    }
    if (from.has_teamid_radiant()) {
      set_teamid_radiant(from.teamid_radiant());
    }
    if (from.has_teamid_dire()) {
      set_teamid_dire(from.teamid_dire());
    }
  }
  if (from._has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (from.has_game_mode()) {
      set_game_mode(from.game_mode());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_single_team()) {
      set_single_team(from.single_team());
    }
    if (from.has_cheers_peak()) {
      set_cheers_peak(from.cheers_peak());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTARealtimeGameStats_MatchDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_MatchDetails::CopyFrom(const CMsgDOTARealtimeGameStats_MatchDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_MatchDetails::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_MatchDetails::Swap(CMsgDOTARealtimeGameStats_MatchDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_MatchDetails::InternalSwap(CMsgDOTARealtimeGameStats_MatchDetails* other) {
  std::swap(server_steam_id_, other->server_steam_id_);
  std::swap(matchid_, other->matchid_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(time_of_day_, other->time_of_day_);
  std::swap(is_nightstalker_night_, other->is_nightstalker_night_);
  std::swap(game_time_, other->game_time_);
  std::swap(teamid_radiant_, other->teamid_radiant_);
  std::swap(teamid_dire_, other->teamid_dire_);
  picks_.UnsafeArenaSwap(&other->picks_);
  bans_.UnsafeArenaSwap(&other->bans_);
  kills_.UnsafeArenaSwap(&other->kills_);
  broadcasters_.UnsafeArenaSwap(&other->broadcasters_);
  std::swap(game_mode_, other->game_mode_);
  std::swap(league_id_, other->league_id_);
  std::swap(single_team_, other->single_team_);
  std::swap(cheers_peak_, other->cheers_peak_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_MatchDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_MatchDetails_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_MatchDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor_;
}
bool CMsgDOTARealtimeGameStats_GraphData_eStat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::CreepGoldEarned;
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::KillGoldEarned;
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::DeathAndBuybackGoldLost;
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::XPEarned;
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::eStat_MIN;
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::eStat_MAX;
const int CMsgDOTARealtimeGameStats_GraphData::eStat_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor_;
}
bool CMsgDOTARealtimeGameStats_GraphData_eLocation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::BotLane;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::MidLane;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::TopLane;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::Jungle;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::Ancients;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::Other;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::eLocation_MIN;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::eLocation_MAX;
const int CMsgDOTARealtimeGameStats_GraphData::eLocation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_GraphData_LocationStats::kStatsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_GraphData_LocationStats::CMsgDOTARealtimeGameStats_GraphData_LocationStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_GraphData_LocationStats::CMsgDOTARealtimeGameStats_GraphData_LocationStats(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_GraphData_LocationStats::~CMsgDOTARealtimeGameStats_GraphData_LocationStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_GraphData_LocationStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_GraphData_LocationStats_descriptor_;
}

const CMsgDOTARealtimeGameStats_GraphData_LocationStats& CMsgDOTARealtimeGameStats_GraphData_LocationStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_GraphData_LocationStats* CMsgDOTARealtimeGameStats_GraphData_LocationStats::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_GraphData_LocationStats* CMsgDOTARealtimeGameStats_GraphData_LocationStats::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_GraphData_LocationStats* n = new CMsgDOTARealtimeGameStats_GraphData_LocationStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::Clear() {
  stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTARealtimeGameStats_GraphData_LocationStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 stats = 1;
      case 1: {
        if (tag == 8) {
         parse_stats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_stats())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stats())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_stats;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  // repeated int32 stats = 1;
  for (int i = 0; i < this->stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->stats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_GraphData_LocationStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  // repeated int32 stats = 1;
  for (int i = 0; i < this->stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->stats(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  return target;
}

int CMsgDOTARealtimeGameStats_GraphData_LocationStats::ByteSize() const {
  int total_size = 0;

  // repeated int32 stats = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->stats_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stats(i));
    }
    total_size += 1 * this->stats_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTARealtimeGameStats_GraphData_LocationStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_GraphData_LocationStats>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::MergeFrom(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  stats_.MergeFrom(from.stats_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::CopyFrom(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_GraphData_LocationStats::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::Swap(CMsgDOTARealtimeGameStats_GraphData_LocationStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_GraphData_LocationStats::InternalSwap(CMsgDOTARealtimeGameStats_GraphData_LocationStats* other) {
  stats_.UnsafeArenaSwap(&other->stats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_GraphData_LocationStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_GraphData_LocationStats_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_GraphData_LocationStats_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::kLocStatsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::~CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_descriptor_;
}

const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* n = new CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::Clear() {
  loc_stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_loc_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_loc_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_loc_stats;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  // repeated .CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
  for (unsigned int i = 0, n = this->loc_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->loc_stats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  // repeated .CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
  for (unsigned int i = 0, n = this->loc_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->loc_stats(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  return target;
}

int CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
  total_size += 1 * this->loc_stats_size();
  for (int i = 0; i < this->loc_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->loc_stats(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::MergeFrom(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  loc_stats_.MergeFrom(from.loc_stats_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::CopyFrom(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::Swap(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::InternalSwap(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* other) {
  loc_stats_.UnsafeArenaSwap(&other->loc_stats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_GraphData::kGraphGoldFieldNumber;
const int CMsgDOTARealtimeGameStats_GraphData::kGraphXpFieldNumber;
const int CMsgDOTARealtimeGameStats_GraphData::kGraphKillFieldNumber;
const int CMsgDOTARealtimeGameStats_GraphData::kGraphTowerFieldNumber;
const int CMsgDOTARealtimeGameStats_GraphData::kGraphRaxFieldNumber;
const int CMsgDOTARealtimeGameStats_GraphData::kTeamLocStatsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_GraphData::CMsgDOTARealtimeGameStats_GraphData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.GraphData)
}

void CMsgDOTARealtimeGameStats_GraphData::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_GraphData::CMsgDOTARealtimeGameStats_GraphData(const CMsgDOTARealtimeGameStats_GraphData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.GraphData)
}

void CMsgDOTARealtimeGameStats_GraphData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_GraphData::~CMsgDOTARealtimeGameStats_GraphData() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.GraphData)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_GraphData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_GraphData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_GraphData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_GraphData_descriptor_;
}

const CMsgDOTARealtimeGameStats_GraphData& CMsgDOTARealtimeGameStats_GraphData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_GraphData* CMsgDOTARealtimeGameStats_GraphData::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_GraphData* CMsgDOTARealtimeGameStats_GraphData::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_GraphData* n = new CMsgDOTARealtimeGameStats_GraphData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_GraphData::Clear() {
  graph_gold_.Clear();
  graph_xp_.Clear();
  graph_kill_.Clear();
  graph_tower_.Clear();
  graph_rax_.Clear();
  team_loc_stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTARealtimeGameStats_GraphData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.GraphData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 graph_gold = 1;
      case 1: {
        if (tag == 8) {
         parse_graph_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_graph_gold())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_graph_gold())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_graph_gold;
        if (input->ExpectTag(16)) goto parse_graph_xp;
        break;
      }

      // repeated int32 graph_xp = 2;
      case 2: {
        if (tag == 16) {
         parse_graph_xp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_graph_xp())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_graph_xp())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_graph_xp;
        if (input->ExpectTag(24)) goto parse_graph_kill;
        break;
      }

      // repeated int32 graph_kill = 3;
      case 3: {
        if (tag == 24) {
         parse_graph_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_graph_kill())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_graph_kill())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_graph_kill;
        if (input->ExpectTag(32)) goto parse_graph_tower;
        break;
      }

      // repeated int32 graph_tower = 4;
      case 4: {
        if (tag == 32) {
         parse_graph_tower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_graph_tower())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_graph_tower())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_graph_tower;
        if (input->ExpectTag(40)) goto parse_graph_rax;
        break;
      }

      // repeated int32 graph_rax = 5;
      case 5: {
        if (tag == 40) {
         parse_graph_rax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_graph_rax())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_graph_rax())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_graph_rax;
        if (input->ExpectTag(50)) goto parse_team_loc_stats;
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
      case 6: {
        if (tag == 50) {
         parse_team_loc_stats:
          DO_(input->IncrementRecursionDepth());
         parse_loop_team_loc_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_team_loc_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_team_loc_stats;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.GraphData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.GraphData)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_GraphData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.GraphData)
  // repeated int32 graph_gold = 1;
  for (int i = 0; i < this->graph_gold_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->graph_gold(i), output);
  }

  // repeated int32 graph_xp = 2;
  for (int i = 0; i < this->graph_xp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->graph_xp(i), output);
  }

  // repeated int32 graph_kill = 3;
  for (int i = 0; i < this->graph_kill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->graph_kill(i), output);
  }

  // repeated int32 graph_tower = 4;
  for (int i = 0; i < this->graph_tower_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->graph_tower(i), output);
  }

  // repeated int32 graph_rax = 5;
  for (int i = 0; i < this->graph_rax_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->graph_rax(i), output);
  }

  // repeated .CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
  for (unsigned int i = 0, n = this->team_loc_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->team_loc_stats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.GraphData)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_GraphData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.GraphData)
  // repeated int32 graph_gold = 1;
  for (int i = 0; i < this->graph_gold_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->graph_gold(i), target);
  }

  // repeated int32 graph_xp = 2;
  for (int i = 0; i < this->graph_xp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->graph_xp(i), target);
  }

  // repeated int32 graph_kill = 3;
  for (int i = 0; i < this->graph_kill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->graph_kill(i), target);
  }

  // repeated int32 graph_tower = 4;
  for (int i = 0; i < this->graph_tower_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->graph_tower(i), target);
  }

  // repeated int32 graph_rax = 5;
  for (int i = 0; i < this->graph_rax_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->graph_rax(i), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
  for (unsigned int i = 0, n = this->team_loc_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->team_loc_stats(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.GraphData)
  return target;
}

int CMsgDOTARealtimeGameStats_GraphData::ByteSize() const {
  int total_size = 0;

  // repeated int32 graph_gold = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->graph_gold_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->graph_gold(i));
    }
    total_size += 1 * this->graph_gold_size() + data_size;
  }

  // repeated int32 graph_xp = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->graph_xp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->graph_xp(i));
    }
    total_size += 1 * this->graph_xp_size() + data_size;
  }

  // repeated int32 graph_kill = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->graph_kill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->graph_kill(i));
    }
    total_size += 1 * this->graph_kill_size() + data_size;
  }

  // repeated int32 graph_tower = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->graph_tower_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->graph_tower(i));
    }
    total_size += 1 * this->graph_tower_size() + data_size;
  }

  // repeated int32 graph_rax = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->graph_rax_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->graph_rax(i));
    }
    total_size += 1 * this->graph_rax_size() + data_size;
  }

  // repeated .CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
  total_size += 1 * this->team_loc_stats_size();
  for (int i = 0; i < this->team_loc_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->team_loc_stats(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_GraphData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTARealtimeGameStats_GraphData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_GraphData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_GraphData::MergeFrom(const CMsgDOTARealtimeGameStats_GraphData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  graph_gold_.MergeFrom(from.graph_gold_);
  graph_xp_.MergeFrom(from.graph_xp_);
  graph_kill_.MergeFrom(from.graph_kill_);
  graph_tower_.MergeFrom(from.graph_tower_);
  graph_rax_.MergeFrom(from.graph_rax_);
  team_loc_stats_.MergeFrom(from.team_loc_stats_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTARealtimeGameStats_GraphData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_GraphData::CopyFrom(const CMsgDOTARealtimeGameStats_GraphData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_GraphData::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_GraphData::Swap(CMsgDOTARealtimeGameStats_GraphData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_GraphData::InternalSwap(CMsgDOTARealtimeGameStats_GraphData* other) {
  graph_gold_.UnsafeArenaSwap(&other->graph_gold_);
  graph_xp_.UnsafeArenaSwap(&other->graph_xp_);
  graph_kill_.UnsafeArenaSwap(&other->graph_kill_);
  graph_tower_.UnsafeArenaSwap(&other->graph_tower_);
  graph_rax_.UnsafeArenaSwap(&other->graph_rax_);
  team_loc_stats_.UnsafeArenaSwap(&other->team_loc_stats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_GraphData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_GraphData_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_GraphData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats::kMatchFieldNumber;
const int CMsgDOTARealtimeGameStats::kTeamsFieldNumber;
const int CMsgDOTARealtimeGameStats::kBuildingsFieldNumber;
const int CMsgDOTARealtimeGameStats::kGraphDataFieldNumber;
const int CMsgDOTARealtimeGameStats::kDeltaFrameFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats::CMsgDOTARealtimeGameStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats)
}

void CMsgDOTARealtimeGameStats::InitAsDefaultInstance() {
  match_ = const_cast< ::CMsgDOTARealtimeGameStats_MatchDetails*>(&::CMsgDOTARealtimeGameStats_MatchDetails::default_instance());
  graph_data_ = const_cast< ::CMsgDOTARealtimeGameStats_GraphData*>(&::CMsgDOTARealtimeGameStats_GraphData::default_instance());
}

CMsgDOTARealtimeGameStats::CMsgDOTARealtimeGameStats(const CMsgDOTARealtimeGameStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats)
}

void CMsgDOTARealtimeGameStats::SharedCtor() {
  _cached_size_ = 0;
  match_ = NULL;
  graph_data_ = NULL;
  delta_frame_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats::~CMsgDOTARealtimeGameStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats::SharedDtor() {
  if (this != default_instance_) {
    delete match_;
    delete graph_data_;
  }
}

void CMsgDOTARealtimeGameStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_descriptor_;
}

const CMsgDOTARealtimeGameStats& CMsgDOTARealtimeGameStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats* CMsgDOTARealtimeGameStats::default_instance_ = NULL;

CMsgDOTARealtimeGameStats* CMsgDOTARealtimeGameStats::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats* n = new CMsgDOTARealtimeGameStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats::Clear() {
  if (_has_bits_[0 / 32] & 25u) {
    if (has_match()) {
      if (match_ != NULL) match_->::CMsgDOTARealtimeGameStats_MatchDetails::Clear();
    }
    if (has_graph_data()) {
      if (graph_data_ != NULL) graph_data_->::CMsgDOTARealtimeGameStats_GraphData::Clear();
    }
    delta_frame_ = false;
  }
  teams_.Clear();
  buildings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTARealtimeGameStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTARealtimeGameStats.MatchDetails match = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_teams;
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
      case 2: {
        if (tag == 18) {
         parse_teams:
          DO_(input->IncrementRecursionDepth());
         parse_loop_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_teams;
        if (input->ExpectTag(26)) goto parse_loop_buildings;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_buildings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_buildings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_buildings;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_graph_data;
        break;
      }

      // optional .CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
      case 4: {
        if (tag == 34) {
         parse_graph_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_graph_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_delta_frame;
        break;
      }

      // optional bool delta_frame = 5;
      case 5: {
        if (tag == 40) {
         parse_delta_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delta_frame_)));
          set_has_delta_frame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats)
  // optional .CMsgDOTARealtimeGameStats.MatchDetails match = 1;
  if (has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->match_, output);
  }

  // repeated .CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
  for (unsigned int i = 0, n = this->teams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teams(i), output);
  }

  // repeated .CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
  for (unsigned int i = 0, n = this->buildings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buildings(i), output);
  }

  // optional .CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
  if (has_graph_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->graph_data_, output);
  }

  // optional bool delta_frame = 5;
  if (has_delta_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->delta_frame(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats)
  // optional .CMsgDOTARealtimeGameStats.MatchDetails match = 1;
  if (has_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->match_, target);
  }

  // repeated .CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
  for (unsigned int i = 0, n = this->teams_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teams(i), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
  for (unsigned int i = 0, n = this->buildings_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->buildings(i), target);
  }

  // optional .CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
  if (has_graph_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->graph_data_, target);
  }

  // optional bool delta_frame = 5;
  if (has_delta_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->delta_frame(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats)
  return target;
}

int CMsgDOTARealtimeGameStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 25u) {
    // optional .CMsgDOTARealtimeGameStats.MatchDetails match = 1;
    if (has_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->match_);
    }

    // optional .CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
    if (has_graph_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->graph_data_);
    }

    // optional bool delta_frame = 5;
    if (has_delta_frame()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
  total_size += 1 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }

  // repeated .CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
  total_size += 1 * this->buildings_size();
  for (int i = 0; i < this->buildings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildings(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTARealtimeGameStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats::MergeFrom(const CMsgDOTARealtimeGameStats& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  teams_.MergeFrom(from.teams_);
  buildings_.MergeFrom(from.buildings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match()) {
      mutable_match()->::CMsgDOTARealtimeGameStats_MatchDetails::MergeFrom(from.match());
    }
    if (from.has_graph_data()) {
      mutable_graph_data()->::CMsgDOTARealtimeGameStats_GraphData::MergeFrom(from.graph_data());
    }
    if (from.has_delta_frame()) {
      set_delta_frame(from.delta_frame());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTARealtimeGameStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats::CopyFrom(const CMsgDOTARealtimeGameStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats::Swap(CMsgDOTARealtimeGameStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats::InternalSwap(CMsgDOTARealtimeGameStats* other) {
  std::swap(match_, other->match_);
  teams_.UnsafeArenaSwap(&other->teams_);
  buildings_.UnsafeArenaSwap(&other->buildings_);
  std::swap(graph_data_, other->graph_data_);
  std::swap(delta_frame_, other->delta_frame_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARealtimeGameStats_TeamDetails

// optional uint32 team_number = 1;
bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStats_TeamDetails::set_has_team_number() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_team_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_number() {
  team_number_ = 0u;
  clear_has_team_number();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_TeamDetails::team_number() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.team_number)
  return team_number_;
}
 void CMsgDOTARealtimeGameStats_TeamDetails::set_team_number(::google::protobuf::uint32 value) {
  set_has_team_number();
  team_number_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.team_number)
}

// optional uint32 team_id = 2;
bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStats_TeamDetails::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_TeamDetails::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.team_id)
  return team_id_;
}
 void CMsgDOTARealtimeGameStats_TeamDetails::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.team_id)
}

// optional string team_name = 3;
bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStats_TeamDetails::set_has_team_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
 const ::std::string& CMsgDOTARealtimeGameStats_TeamDetails::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.team_name)
  return team_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTARealtimeGameStats_TeamDetails::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.team_name)
}
 void CMsgDOTARealtimeGameStats_TeamDetails::set_team_name(const char* value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTARealtimeGameStats.TeamDetails.team_name)
}
 void CMsgDOTARealtimeGameStats_TeamDetails::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTARealtimeGameStats.TeamDetails.team_name)
}
 ::std::string* CMsgDOTARealtimeGameStats_TeamDetails::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.TeamDetails.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTARealtimeGameStats_TeamDetails::release_team_name() {
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTARealtimeGameStats_TeamDetails::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStats.TeamDetails.team_name)
}

// optional fixed64 team_logo = 4;
bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_logo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTARealtimeGameStats_TeamDetails::set_has_team_logo() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_team_logo() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_logo() {
  team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo();
}
 ::google::protobuf::uint64 CMsgDOTARealtimeGameStats_TeamDetails::team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.team_logo)
  return team_logo_;
}
 void CMsgDOTARealtimeGameStats_TeamDetails::set_team_logo(::google::protobuf::uint64 value) {
  set_has_team_logo();
  team_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.team_logo)
}

// optional uint32 score = 5;
bool CMsgDOTARealtimeGameStats_TeamDetails::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTARealtimeGameStats_TeamDetails::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_score() {
  score_ = 0u;
  clear_has_score();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_TeamDetails::score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.score)
  return score_;
}
 void CMsgDOTARealtimeGameStats_TeamDetails::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.score)
}

// repeated .CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
int CMsgDOTARealtimeGameStats_TeamDetails::players_size() const {
  return players_.size();
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_players() {
  players_.Clear();
}
const ::CMsgDOTARealtimeGameStats_PlayerDetails& CMsgDOTARealtimeGameStats_TeamDetails::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.players)
  return players_.Get(index);
}
::CMsgDOTARealtimeGameStats_PlayerDetails* CMsgDOTARealtimeGameStats_TeamDetails::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.TeamDetails.players)
  return players_.Mutable(index);
}
::CMsgDOTARealtimeGameStats_PlayerDetails* CMsgDOTARealtimeGameStats_TeamDetails::add_players() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.TeamDetails.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PlayerDetails >*
CMsgDOTARealtimeGameStats_TeamDetails::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.TeamDetails.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PlayerDetails >&
CMsgDOTARealtimeGameStats_TeamDetails::players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.TeamDetails.players)
  return players_;
}

// optional bool only_team = 7;
bool CMsgDOTARealtimeGameStats_TeamDetails::has_only_team() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTARealtimeGameStats_TeamDetails::set_has_only_team() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_only_team() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_only_team() {
  only_team_ = false;
  clear_has_only_team();
}
 bool CMsgDOTARealtimeGameStats_TeamDetails::only_team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.only_team)
  return only_team_;
}
 void CMsgDOTARealtimeGameStats_TeamDetails::set_only_team(bool value) {
  set_has_only_team();
  only_team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.only_team)
}

// optional uint32 cheers = 8;
bool CMsgDOTARealtimeGameStats_TeamDetails::has_cheers() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTARealtimeGameStats_TeamDetails::set_has_cheers() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_cheers() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_cheers() {
  cheers_ = 0u;
  clear_has_cheers();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_TeamDetails::cheers() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.cheers)
  return cheers_;
}
 void CMsgDOTARealtimeGameStats_TeamDetails::set_cheers(::google::protobuf::uint32 value) {
  set_has_cheers();
  cheers_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.cheers)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_ItemDetails

// optional uint32 id = 1;
bool CMsgDOTARealtimeGameStats_ItemDetails::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStats_ItemDetails::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStats_ItemDetails::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStats_ItemDetails::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_ItemDetails::id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.ItemDetails.id)
  return id_;
}
 void CMsgDOTARealtimeGameStats_ItemDetails::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.ItemDetails.id)
}

// optional string name = 2;
bool CMsgDOTARealtimeGameStats_ItemDetails::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStats_ItemDetails::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStats_ItemDetails::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStats_ItemDetails::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& CMsgDOTARealtimeGameStats_ItemDetails::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.ItemDetails.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTARealtimeGameStats_ItemDetails::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.ItemDetails.name)
}
 void CMsgDOTARealtimeGameStats_ItemDetails::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTARealtimeGameStats.ItemDetails.name)
}
 void CMsgDOTARealtimeGameStats_ItemDetails::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTARealtimeGameStats.ItemDetails.name)
}
 ::std::string* CMsgDOTARealtimeGameStats_ItemDetails::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.ItemDetails.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTARealtimeGameStats_ItemDetails::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTARealtimeGameStats_ItemDetails::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStats.ItemDetails.name)
}

// optional int32 time = 3;
bool CMsgDOTARealtimeGameStats_ItemDetails::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStats_ItemDetails::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStats_ItemDetails::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStats_ItemDetails::clear_time() {
  time_ = 0;
  clear_has_time();
}
 ::google::protobuf::int32 CMsgDOTARealtimeGameStats_ItemDetails::time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.ItemDetails.time)
  return time_;
}
 void CMsgDOTARealtimeGameStats_ItemDetails::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.ItemDetails.time)
}

// optional bool sold = 4;
bool CMsgDOTARealtimeGameStats_ItemDetails::has_sold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTARealtimeGameStats_ItemDetails::set_has_sold() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTARealtimeGameStats_ItemDetails::clear_has_sold() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTARealtimeGameStats_ItemDetails::clear_sold() {
  sold_ = false;
  clear_has_sold();
}
 bool CMsgDOTARealtimeGameStats_ItemDetails::sold() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.ItemDetails.sold)
  return sold_;
}
 void CMsgDOTARealtimeGameStats_ItemDetails::set_sold(bool value) {
  set_has_sold();
  sold_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.ItemDetails.sold)
}

// optional uint32 stackcount = 5;
bool CMsgDOTARealtimeGameStats_ItemDetails::has_stackcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTARealtimeGameStats_ItemDetails::set_has_stackcount() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTARealtimeGameStats_ItemDetails::clear_has_stackcount() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTARealtimeGameStats_ItemDetails::clear_stackcount() {
  stackcount_ = 0u;
  clear_has_stackcount();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_ItemDetails::stackcount() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.ItemDetails.stackcount)
  return stackcount_;
}
 void CMsgDOTARealtimeGameStats_ItemDetails::set_stackcount(::google::protobuf::uint32 value) {
  set_has_stackcount();
  stackcount_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.ItemDetails.stackcount)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_AbilityDetails

// optional uint32 id = 1;
bool CMsgDOTARealtimeGameStats_AbilityDetails::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_AbilityDetails::id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.AbilityDetails.id)
  return id_;
}
 void CMsgDOTARealtimeGameStats_AbilityDetails::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.AbilityDetails.id)
}

// optional string name = 2;
bool CMsgDOTARealtimeGameStats_AbilityDetails::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& CMsgDOTARealtimeGameStats_AbilityDetails::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.AbilityDetails.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTARealtimeGameStats_AbilityDetails::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.AbilityDetails.name)
}
 void CMsgDOTARealtimeGameStats_AbilityDetails::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTARealtimeGameStats.AbilityDetails.name)
}
 void CMsgDOTARealtimeGameStats_AbilityDetails::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTARealtimeGameStats.AbilityDetails.name)
}
 ::std::string* CMsgDOTARealtimeGameStats_AbilityDetails::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.AbilityDetails.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTARealtimeGameStats_AbilityDetails::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTARealtimeGameStats_AbilityDetails::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStats.AbilityDetails.name)
}

// optional uint32 level = 3;
bool CMsgDOTARealtimeGameStats_AbilityDetails::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::clear_level() {
  level_ = 0u;
  clear_has_level();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_AbilityDetails::level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.AbilityDetails.level)
  return level_;
}
 void CMsgDOTARealtimeGameStats_AbilityDetails::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.AbilityDetails.level)
}

// optional float cooldown = 4;
bool CMsgDOTARealtimeGameStats_AbilityDetails::has_cooldown() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::set_has_cooldown() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::clear_has_cooldown() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::clear_cooldown() {
  cooldown_ = 0;
  clear_has_cooldown();
}
 float CMsgDOTARealtimeGameStats_AbilityDetails::cooldown() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.AbilityDetails.cooldown)
  return cooldown_;
}
 void CMsgDOTARealtimeGameStats_AbilityDetails::set_cooldown(float value) {
  set_has_cooldown();
  cooldown_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.AbilityDetails.cooldown)
}

// optional float cooldown_max = 5;
bool CMsgDOTARealtimeGameStats_AbilityDetails::has_cooldown_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::set_has_cooldown_max() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::clear_has_cooldown_max() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::clear_cooldown_max() {
  cooldown_max_ = 0;
  clear_has_cooldown_max();
}
 float CMsgDOTARealtimeGameStats_AbilityDetails::cooldown_max() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.AbilityDetails.cooldown_max)
  return cooldown_max_;
}
 void CMsgDOTARealtimeGameStats_AbilityDetails::set_cooldown_max(float value) {
  set_has_cooldown_max();
  cooldown_max_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.AbilityDetails.cooldown_max)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_HeroToHeroStats

// optional uint32 victimid = 1;
bool CMsgDOTARealtimeGameStats_HeroToHeroStats::has_victimid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_has_victimid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_has_victimid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_victimid() {
  victimid_ = 0u;
  clear_has_victimid();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_HeroToHeroStats::victimid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.HeroToHeroStats.victimid)
  return victimid_;
}
 void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_victimid(::google::protobuf::uint32 value) {
  set_has_victimid();
  victimid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.HeroToHeroStats.victimid)
}

// optional uint32 kills = 2;
bool CMsgDOTARealtimeGameStats_HeroToHeroStats::has_kills() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_has_kills() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_has_kills() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_HeroToHeroStats::kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.HeroToHeroStats.kills)
  return kills_;
}
 void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.HeroToHeroStats.kills)
}

// optional uint32 assists = 3;
bool CMsgDOTARealtimeGameStats_HeroToHeroStats::has_assists() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_has_assists() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_has_assists() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_assists() {
  assists_ = 0u;
  clear_has_assists();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_HeroToHeroStats::assists() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.HeroToHeroStats.assists)
  return assists_;
}
 void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_assists(::google::protobuf::uint32 value) {
  set_has_assists();
  assists_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.HeroToHeroStats.assists)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_AbilityList

// repeated uint32 id = 1;
int CMsgDOTARealtimeGameStats_AbilityList::id_size() const {
  return id_.size();
}
void CMsgDOTARealtimeGameStats_AbilityList::clear_id() {
  id_.Clear();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_AbilityList::id(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.AbilityList.id)
  return id_.Get(index);
}
 void CMsgDOTARealtimeGameStats_AbilityList::set_id(int index, ::google::protobuf::uint32 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.AbilityList.id)
}
 void CMsgDOTARealtimeGameStats_AbilityList::add_id(::google::protobuf::uint32 value) {
  id_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.AbilityList.id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTARealtimeGameStats_AbilityList::id() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.AbilityList.id)
  return id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTARealtimeGameStats_AbilityList::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.AbilityList.id)
  return &id_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_PlayerDetails

// optional uint32 accountid = 1;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::accountid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.accountid)
  return accountid_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.accountid)
}

// optional uint32 playerid = 2;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::playerid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.playerid)
  return playerid_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.playerid)
}

// optional string name = 3;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& CMsgDOTARealtimeGameStats_PlayerDetails::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.name)
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTARealtimeGameStats.PlayerDetails.name)
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTARealtimeGameStats.PlayerDetails.name)
}
 ::std::string* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTARealtimeGameStats_PlayerDetails::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStats.PlayerDetails.name)
}

// optional uint32 team = 4;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_team() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_team() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_team() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_team() {
  team_ = 0u;
  clear_has_team();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.team)
  return team_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.team)
}

// optional uint32 heroid = 5;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_heroid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_heroid() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::heroid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.heroid)
  return heroid_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.heroid)
}

// optional uint32 healthpoints = 6;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_healthpoints() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_healthpoints() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_healthpoints() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_healthpoints() {
  healthpoints_ = 0u;
  clear_has_healthpoints();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::healthpoints() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.healthpoints)
  return healthpoints_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_healthpoints(::google::protobuf::uint32 value) {
  set_has_healthpoints();
  healthpoints_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.healthpoints)
}

// optional uint32 maxhealthpoints = 7;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_maxhealthpoints() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_maxhealthpoints() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_maxhealthpoints() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_maxhealthpoints() {
  maxhealthpoints_ = 0u;
  clear_has_maxhealthpoints();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::maxhealthpoints() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.maxhealthpoints)
  return maxhealthpoints_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_maxhealthpoints(::google::protobuf::uint32 value) {
  set_has_maxhealthpoints();
  maxhealthpoints_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.maxhealthpoints)
}

// optional float healthregenrate = 8;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_healthregenrate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_healthregenrate() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_healthregenrate() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_healthregenrate() {
  healthregenrate_ = 0;
  clear_has_healthregenrate();
}
 float CMsgDOTARealtimeGameStats_PlayerDetails::healthregenrate() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.healthregenrate)
  return healthregenrate_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_healthregenrate(float value) {
  set_has_healthregenrate();
  healthregenrate_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.healthregenrate)
}

// optional uint32 manapoints = 9;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_manapoints() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_manapoints() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_manapoints() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_manapoints() {
  manapoints_ = 0u;
  clear_has_manapoints();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::manapoints() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.manapoints)
  return manapoints_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_manapoints(::google::protobuf::uint32 value) {
  set_has_manapoints();
  manapoints_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.manapoints)
}

// optional uint32 maxmanapoints = 10;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_maxmanapoints() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_maxmanapoints() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_maxmanapoints() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_maxmanapoints() {
  maxmanapoints_ = 0u;
  clear_has_maxmanapoints();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::maxmanapoints() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.maxmanapoints)
  return maxmanapoints_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_maxmanapoints(::google::protobuf::uint32 value) {
  set_has_maxmanapoints();
  maxmanapoints_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.maxmanapoints)
}

// optional float manaregenrate = 11;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_manaregenrate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_manaregenrate() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_manaregenrate() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_manaregenrate() {
  manaregenrate_ = 0;
  clear_has_manaregenrate();
}
 float CMsgDOTARealtimeGameStats_PlayerDetails::manaregenrate() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.manaregenrate)
  return manaregenrate_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_manaregenrate(float value) {
  set_has_manaregenrate();
  manaregenrate_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.manaregenrate)
}

// optional uint32 base_strength = 12;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_strength() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_base_strength() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_base_strength() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_strength() {
  base_strength_ = 0u;
  clear_has_base_strength();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::base_strength() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.base_strength)
  return base_strength_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_strength(::google::protobuf::uint32 value) {
  set_has_base_strength();
  base_strength_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.base_strength)
}

// optional uint32 base_agility = 13;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_agility() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_base_agility() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_base_agility() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_agility() {
  base_agility_ = 0u;
  clear_has_base_agility();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::base_agility() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.base_agility)
  return base_agility_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_agility(::google::protobuf::uint32 value) {
  set_has_base_agility();
  base_agility_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.base_agility)
}

// optional uint32 base_intelligence = 14;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_intelligence() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_base_intelligence() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_base_intelligence() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_intelligence() {
  base_intelligence_ = 0u;
  clear_has_base_intelligence();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::base_intelligence() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.base_intelligence)
  return base_intelligence_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_intelligence(::google::protobuf::uint32 value) {
  set_has_base_intelligence();
  base_intelligence_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.base_intelligence)
}

// optional int32 base_armor = 15;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_armor() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_base_armor() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_base_armor() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_armor() {
  base_armor_ = 0;
  clear_has_base_armor();
}
 ::google::protobuf::int32 CMsgDOTARealtimeGameStats_PlayerDetails::base_armor() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.base_armor)
  return base_armor_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_armor(::google::protobuf::int32 value) {
  set_has_base_armor();
  base_armor_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.base_armor)
}

// optional uint32 base_movespeed = 16;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_movespeed() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_base_movespeed() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_base_movespeed() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_movespeed() {
  base_movespeed_ = 0u;
  clear_has_base_movespeed();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::base_movespeed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.base_movespeed)
  return base_movespeed_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_movespeed(::google::protobuf::uint32 value) {
  set_has_base_movespeed();
  base_movespeed_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.base_movespeed)
}

// optional uint32 base_damage = 17;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_damage() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_base_damage() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_base_damage() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_damage() {
  base_damage_ = 0u;
  clear_has_base_damage();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::base_damage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.base_damage)
  return base_damage_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_damage(::google::protobuf::uint32 value) {
  set_has_base_damage();
  base_damage_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.base_damage)
}

// optional uint32 strength = 18;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_strength() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_strength() {
  _has_bits_[0] |= 0x00020000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_strength() {
  _has_bits_[0] &= ~0x00020000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_strength() {
  strength_ = 0u;
  clear_has_strength();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::strength() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.strength)
  return strength_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_strength(::google::protobuf::uint32 value) {
  set_has_strength();
  strength_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.strength)
}

// optional uint32 agility = 19;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_agility() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_agility() {
  _has_bits_[0] |= 0x00040000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_agility() {
  _has_bits_[0] &= ~0x00040000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_agility() {
  agility_ = 0u;
  clear_has_agility();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::agility() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.agility)
  return agility_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_agility(::google::protobuf::uint32 value) {
  set_has_agility();
  agility_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.agility)
}

// optional uint32 intelligence = 20;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_intelligence() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_intelligence() {
  _has_bits_[0] |= 0x00080000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_intelligence() {
  _has_bits_[0] &= ~0x00080000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_intelligence() {
  intelligence_ = 0u;
  clear_has_intelligence();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::intelligence() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.intelligence)
  return intelligence_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_intelligence(::google::protobuf::uint32 value) {
  set_has_intelligence();
  intelligence_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.intelligence)
}

// optional int32 armor = 21;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_armor() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_armor() {
  _has_bits_[0] |= 0x00100000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_armor() {
  _has_bits_[0] &= ~0x00100000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_armor() {
  armor_ = 0;
  clear_has_armor();
}
 ::google::protobuf::int32 CMsgDOTARealtimeGameStats_PlayerDetails::armor() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.armor)
  return armor_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_armor(::google::protobuf::int32 value) {
  set_has_armor();
  armor_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.armor)
}

// optional uint32 movespeed = 22;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_movespeed() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_movespeed() {
  _has_bits_[0] |= 0x00200000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_movespeed() {
  _has_bits_[0] &= ~0x00200000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_movespeed() {
  movespeed_ = 0u;
  clear_has_movespeed();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::movespeed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.movespeed)
  return movespeed_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_movespeed(::google::protobuf::uint32 value) {
  set_has_movespeed();
  movespeed_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.movespeed)
}

// optional uint32 damage = 23;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_damage() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_damage() {
  _has_bits_[0] |= 0x00400000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_damage() {
  _has_bits_[0] &= ~0x00400000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_damage() {
  damage_ = 0u;
  clear_has_damage();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::damage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.damage)
  return damage_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_damage(::google::protobuf::uint32 value) {
  set_has_damage();
  damage_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.damage)
}

// optional uint32 hero_damage = 24;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_hero_damage() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_hero_damage() {
  _has_bits_[0] |= 0x00800000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_hero_damage() {
  _has_bits_[0] &= ~0x00800000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_hero_damage() {
  hero_damage_ = 0u;
  clear_has_hero_damage();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::hero_damage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.hero_damage)
  return hero_damage_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_hero_damage(::google::protobuf::uint32 value) {
  set_has_hero_damage();
  hero_damage_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.hero_damage)
}

// optional uint32 tower_damage = 25;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_tower_damage() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_tower_damage() {
  _has_bits_[0] |= 0x01000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_tower_damage() {
  _has_bits_[0] &= ~0x01000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_tower_damage() {
  tower_damage_ = 0u;
  clear_has_tower_damage();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::tower_damage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.tower_damage)
  return tower_damage_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_tower_damage(::google::protobuf::uint32 value) {
  set_has_tower_damage();
  tower_damage_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.tower_damage)
}

// repeated .CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
int CMsgDOTARealtimeGameStats_PlayerDetails::abilities_size() const {
  return abilities_.size();
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_abilities() {
  abilities_.Clear();
}
const ::CMsgDOTARealtimeGameStats_AbilityDetails& CMsgDOTARealtimeGameStats_PlayerDetails::abilities(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return abilities_.Get(index);
}
::CMsgDOTARealtimeGameStats_AbilityDetails* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_abilities(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return abilities_.Mutable(index);
}
::CMsgDOTARealtimeGameStats_AbilityDetails* CMsgDOTARealtimeGameStats_PlayerDetails::add_abilities() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return abilities_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityDetails >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_abilities() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return &abilities_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityDetails >&
CMsgDOTARealtimeGameStats_PlayerDetails::abilities() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return abilities_;
}

// optional uint32 level = 27;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_level() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_level() {
  _has_bits_[0] |= 0x04000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_level() {
  _has_bits_[0] &= ~0x04000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_level() {
  level_ = 0u;
  clear_has_level();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.level)
  return level_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.level)
}

// optional uint32 kill_count = 28;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_kill_count() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_kill_count() {
  _has_bits_[0] |= 0x08000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_kill_count() {
  _has_bits_[0] &= ~0x08000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_kill_count() {
  kill_count_ = 0u;
  clear_has_kill_count();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::kill_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.kill_count)
  return kill_count_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_kill_count(::google::protobuf::uint32 value) {
  set_has_kill_count();
  kill_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.kill_count)
}

// optional uint32 death_count = 29;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_death_count() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_death_count() {
  _has_bits_[0] |= 0x10000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_death_count() {
  _has_bits_[0] &= ~0x10000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_death_count() {
  death_count_ = 0u;
  clear_has_death_count();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::death_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.death_count)
  return death_count_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_death_count(::google::protobuf::uint32 value) {
  set_has_death_count();
  death_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.death_count)
}

// optional uint32 assists_count = 30;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_assists_count() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_assists_count() {
  _has_bits_[0] |= 0x20000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_assists_count() {
  _has_bits_[0] &= ~0x20000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_assists_count() {
  assists_count_ = 0u;
  clear_has_assists_count();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::assists_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.assists_count)
  return assists_count_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_assists_count(::google::protobuf::uint32 value) {
  set_has_assists_count();
  assists_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.assists_count)
}

// optional uint32 denies_count = 31;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_denies_count() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_denies_count() {
  _has_bits_[0] |= 0x40000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_denies_count() {
  _has_bits_[0] &= ~0x40000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_denies_count() {
  denies_count_ = 0u;
  clear_has_denies_count();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::denies_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.denies_count)
  return denies_count_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_denies_count(::google::protobuf::uint32 value) {
  set_has_denies_count();
  denies_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.denies_count)
}

// optional uint32 lh_count = 32;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_lh_count() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_lh_count() {
  _has_bits_[0] |= 0x80000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_lh_count() {
  _has_bits_[0] &= ~0x80000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_lh_count() {
  lh_count_ = 0u;
  clear_has_lh_count();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::lh_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.lh_count)
  return lh_count_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_lh_count(::google::protobuf::uint32 value) {
  set_has_lh_count();
  lh_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.lh_count)
}

// optional uint32 hero_healing = 33;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_hero_healing() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_hero_healing() {
  _has_bits_[1] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_hero_healing() {
  _has_bits_[1] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_hero_healing() {
  hero_healing_ = 0u;
  clear_has_hero_healing();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::hero_healing() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.hero_healing)
  return hero_healing_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_hero_healing(::google::protobuf::uint32 value) {
  set_has_hero_healing();
  hero_healing_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.hero_healing)
}

// optional uint32 gold_per_min = 34;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_gold_per_min() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_gold_per_min() {
  _has_bits_[1] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_gold_per_min() {
  _has_bits_[1] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_gold_per_min() {
  gold_per_min_ = 0u;
  clear_has_gold_per_min();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::gold_per_min() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.gold_per_min)
  return gold_per_min_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_gold_per_min(::google::protobuf::uint32 value) {
  set_has_gold_per_min();
  gold_per_min_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.gold_per_min)
}

// optional uint32 xp_per_min = 35;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_xp_per_min() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_xp_per_min() {
  _has_bits_[1] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_xp_per_min() {
  _has_bits_[1] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_xp_per_min() {
  xp_per_min_ = 0u;
  clear_has_xp_per_min();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::xp_per_min() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.xp_per_min)
  return xp_per_min_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_xp_per_min(::google::protobuf::uint32 value) {
  set_has_xp_per_min();
  xp_per_min_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.xp_per_min)
}

// optional uint32 net_gold = 36;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_net_gold() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_net_gold() {
  _has_bits_[1] |= 0x00000008u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_net_gold() {
  _has_bits_[1] &= ~0x00000008u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_net_gold() {
  net_gold_ = 0u;
  clear_has_net_gold();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::net_gold() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.net_gold)
  return net_gold_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_net_gold(::google::protobuf::uint32 value) {
  set_has_net_gold();
  net_gold_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.net_gold)
}

// optional uint32 gold = 37;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_gold() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_gold() {
  _has_bits_[1] |= 0x00000010u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_gold() {
  _has_bits_[1] &= ~0x00000010u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::gold() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.gold)
  return gold_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.gold)
}

// optional float x = 38;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_x() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_x() {
  _has_bits_[1] |= 0x00000020u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_x() {
  _has_bits_[1] &= ~0x00000020u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float CMsgDOTARealtimeGameStats_PlayerDetails::x() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.x)
  return x_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.x)
}

// optional float y = 39;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_y() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_y() {
  _has_bits_[1] |= 0x00000040u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_y() {
  _has_bits_[1] &= ~0x00000040u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float CMsgDOTARealtimeGameStats_PlayerDetails::y() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.y)
  return y_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.y)
}

// optional int32 respawn_time = 40;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_respawn_time() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_respawn_time() {
  _has_bits_[1] |= 0x00000080u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_respawn_time() {
  _has_bits_[1] &= ~0x00000080u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_respawn_time() {
  respawn_time_ = 0;
  clear_has_respawn_time();
}
 ::google::protobuf::int32 CMsgDOTARealtimeGameStats_PlayerDetails::respawn_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.respawn_time)
  return respawn_time_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_respawn_time(::google::protobuf::int32 value) {
  set_has_respawn_time();
  respawn_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.respawn_time)
}

// optional uint32 ultimate_cooldown = 41;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_ultimate_cooldown() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_ultimate_cooldown() {
  _has_bits_[1] |= 0x00000100u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_ultimate_cooldown() {
  _has_bits_[1] &= ~0x00000100u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_ultimate_cooldown() {
  ultimate_cooldown_ = 0u;
  clear_has_ultimate_cooldown();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::ultimate_cooldown() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.ultimate_cooldown)
  return ultimate_cooldown_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_ultimate_cooldown(::google::protobuf::uint32 value) {
  set_has_ultimate_cooldown();
  ultimate_cooldown_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.ultimate_cooldown)
}

// optional bool has_buyback = 42;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_has_buyback() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_has_buyback() {
  _has_bits_[1] |= 0x00000200u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_has_buyback() {
  _has_bits_[1] &= ~0x00000200u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_buyback() {
  has_buyback_ = false;
  clear_has_has_buyback();
}
 bool CMsgDOTARealtimeGameStats_PlayerDetails::has_buyback() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.has_buyback)
  return has_buyback_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_buyback(bool value) {
  set_has_has_buyback();
  has_buyback_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.has_buyback)
}

// repeated .CMsgDOTARealtimeGameStats.ItemDetails items = 43;
int CMsgDOTARealtimeGameStats_PlayerDetails::items_size() const {
  return items_.size();
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_items() {
  items_.Clear();
}
const ::CMsgDOTARealtimeGameStats_ItemDetails& CMsgDOTARealtimeGameStats_PlayerDetails::items(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return items_.Get(index);
}
::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return items_.Mutable(index);
}
::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::add_items() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >&
CMsgDOTARealtimeGameStats_PlayerDetails::items() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return items_;
}

// repeated .CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
int CMsgDOTARealtimeGameStats_PlayerDetails::stashitems_size() const {
  return stashitems_.size();
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_stashitems() {
  stashitems_.Clear();
}
const ::CMsgDOTARealtimeGameStats_ItemDetails& CMsgDOTARealtimeGameStats_PlayerDetails::stashitems(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return stashitems_.Get(index);
}
::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_stashitems(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return stashitems_.Mutable(index);
}
::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::add_stashitems() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return stashitems_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_stashitems() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return &stashitems_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >&
CMsgDOTARealtimeGameStats_PlayerDetails::stashitems() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return stashitems_;
}

// repeated .CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
int CMsgDOTARealtimeGameStats_PlayerDetails::itemshoppinglist_size() const {
  return itemshoppinglist_.size();
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_itemshoppinglist() {
  itemshoppinglist_.Clear();
}
const ::CMsgDOTARealtimeGameStats_ItemDetails& CMsgDOTARealtimeGameStats_PlayerDetails::itemshoppinglist(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return itemshoppinglist_.Get(index);
}
::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_itemshoppinglist(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return itemshoppinglist_.Mutable(index);
}
::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::add_itemshoppinglist() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return itemshoppinglist_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_itemshoppinglist() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return &itemshoppinglist_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >&
CMsgDOTARealtimeGameStats_PlayerDetails::itemshoppinglist() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return itemshoppinglist_;
}

// repeated .CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
int CMsgDOTARealtimeGameStats_PlayerDetails::levelpoints_size() const {
  return levelpoints_.size();
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_levelpoints() {
  levelpoints_.Clear();
}
const ::CMsgDOTARealtimeGameStats_AbilityList& CMsgDOTARealtimeGameStats_PlayerDetails::levelpoints(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return levelpoints_.Get(index);
}
::CMsgDOTARealtimeGameStats_AbilityList* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_levelpoints(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return levelpoints_.Mutable(index);
}
::CMsgDOTARealtimeGameStats_AbilityList* CMsgDOTARealtimeGameStats_PlayerDetails::add_levelpoints() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return levelpoints_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityList >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_levelpoints() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return &levelpoints_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityList >&
CMsgDOTARealtimeGameStats_PlayerDetails::levelpoints() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return levelpoints_;
}

// repeated .CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
int CMsgDOTARealtimeGameStats_PlayerDetails::hero_to_hero_stats_size() const {
  return hero_to_hero_stats_.size();
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_hero_to_hero_stats() {
  hero_to_hero_stats_.Clear();
}
const ::CMsgDOTARealtimeGameStats_HeroToHeroStats& CMsgDOTARealtimeGameStats_PlayerDetails::hero_to_hero_stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return hero_to_hero_stats_.Get(index);
}
::CMsgDOTARealtimeGameStats_HeroToHeroStats* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_hero_to_hero_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return hero_to_hero_stats_.Mutable(index);
}
::CMsgDOTARealtimeGameStats_HeroToHeroStats* CMsgDOTARealtimeGameStats_PlayerDetails::add_hero_to_hero_stats() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return hero_to_hero_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_HeroToHeroStats >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_hero_to_hero_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return &hero_to_hero_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_HeroToHeroStats >&
CMsgDOTARealtimeGameStats_PlayerDetails::hero_to_hero_stats() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return hero_to_hero_stats_;
}

// optional bool has_ultimate = 48;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_has_ultimate() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_has_ultimate() {
  _has_bits_[1] |= 0x00008000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_has_ultimate() {
  _has_bits_[1] &= ~0x00008000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_ultimate() {
  has_ultimate_ = false;
  clear_has_has_ultimate();
}
 bool CMsgDOTARealtimeGameStats_PlayerDetails::has_ultimate() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.has_ultimate)
  return has_ultimate_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_ultimate(bool value) {
  set_has_has_ultimate();
  has_ultimate_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.has_ultimate)
}

// optional bool has_ultimate_mana = 49;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_has_ultimate_mana() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_has_ultimate_mana() {
  _has_bits_[1] |= 0x00010000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_has_ultimate_mana() {
  _has_bits_[1] &= ~0x00010000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_ultimate_mana() {
  has_ultimate_mana_ = false;
  clear_has_has_ultimate_mana();
}
 bool CMsgDOTARealtimeGameStats_PlayerDetails::has_ultimate_mana() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.has_ultimate_mana)
  return has_ultimate_mana_;
}
 void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_ultimate_mana(bool value) {
  set_has_has_ultimate_mana();
  has_ultimate_mana_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.has_ultimate_mana)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_BuildingDetails

// optional uint32 team = 2;
bool CMsgDOTARealtimeGameStats_BuildingDetails::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_team() {
  team_ = 0u;
  clear_has_team();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BuildingDetails::team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.team)
  return team_;
}
 void CMsgDOTARealtimeGameStats_BuildingDetails::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.team)
}

// optional float heading = 3;
bool CMsgDOTARealtimeGameStats_BuildingDetails::has_heading() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_heading() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_heading() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
 float CMsgDOTARealtimeGameStats_BuildingDetails::heading() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.heading)
  return heading_;
}
 void CMsgDOTARealtimeGameStats_BuildingDetails::set_heading(float value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.heading)
}

// optional uint32 lane = 4;
bool CMsgDOTARealtimeGameStats_BuildingDetails::has_lane() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_lane() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_lane() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_lane() {
  lane_ = 0u;
  clear_has_lane();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BuildingDetails::lane() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.lane)
  return lane_;
}
 void CMsgDOTARealtimeGameStats_BuildingDetails::set_lane(::google::protobuf::uint32 value) {
  set_has_lane();
  lane_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.lane)
}

// optional uint32 tier = 5;
bool CMsgDOTARealtimeGameStats_BuildingDetails::has_tier() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_tier() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_tier() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_tier() {
  tier_ = 0u;
  clear_has_tier();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BuildingDetails::tier() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.tier)
  return tier_;
}
 void CMsgDOTARealtimeGameStats_BuildingDetails::set_tier(::google::protobuf::uint32 value) {
  set_has_tier();
  tier_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.tier)
}

// optional uint32 type = 6;
bool CMsgDOTARealtimeGameStats_BuildingDetails::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_type() {
  type_ = 0u;
  clear_has_type();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BuildingDetails::type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.type)
  return type_;
}
 void CMsgDOTARealtimeGameStats_BuildingDetails::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.type)
}

// optional float x = 7;
bool CMsgDOTARealtimeGameStats_BuildingDetails::has_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_x() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_x() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float CMsgDOTARealtimeGameStats_BuildingDetails::x() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.x)
  return x_;
}
 void CMsgDOTARealtimeGameStats_BuildingDetails::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.x)
}

// optional float y = 8;
bool CMsgDOTARealtimeGameStats_BuildingDetails::has_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_y() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_y() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float CMsgDOTARealtimeGameStats_BuildingDetails::y() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.y)
  return y_;
}
 void CMsgDOTARealtimeGameStats_BuildingDetails::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.y)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_KillDetails

// optional uint32 player_id = 1;
bool CMsgDOTARealtimeGameStats_KillDetails::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStats_KillDetails::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStats_KillDetails::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStats_KillDetails::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_KillDetails::player_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.KillDetails.player_id)
  return player_id_;
}
 void CMsgDOTARealtimeGameStats_KillDetails::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.KillDetails.player_id)
}

// optional int32 death_time = 2;
bool CMsgDOTARealtimeGameStats_KillDetails::has_death_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStats_KillDetails::set_has_death_time() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStats_KillDetails::clear_has_death_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStats_KillDetails::clear_death_time() {
  death_time_ = 0;
  clear_has_death_time();
}
 ::google::protobuf::int32 CMsgDOTARealtimeGameStats_KillDetails::death_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.KillDetails.death_time)
  return death_time_;
}
 void CMsgDOTARealtimeGameStats_KillDetails::set_death_time(::google::protobuf::int32 value) {
  set_has_death_time();
  death_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.KillDetails.death_time)
}

// optional uint32 killer_player_id = 3;
bool CMsgDOTARealtimeGameStats_KillDetails::has_killer_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStats_KillDetails::set_has_killer_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStats_KillDetails::clear_has_killer_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStats_KillDetails::clear_killer_player_id() {
  killer_player_id_ = 0u;
  clear_has_killer_player_id();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_KillDetails::killer_player_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.KillDetails.killer_player_id)
  return killer_player_id_;
}
 void CMsgDOTARealtimeGameStats_KillDetails::set_killer_player_id(::google::protobuf::uint32 value) {
  set_has_killer_player_id();
  killer_player_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.KillDetails.killer_player_id)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_BroadcasterDetails

// optional uint32 player_id = 1;
bool CMsgDOTARealtimeGameStats_BroadcasterDetails::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BroadcasterDetails::player_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BroadcasterDetails.player_id)
  return player_id_;
}
 void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BroadcasterDetails.player_id)
}

// optional uint32 selected_hero = 2;
bool CMsgDOTARealtimeGameStats_BroadcasterDetails::has_selected_hero() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_has_selected_hero() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_has_selected_hero() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_selected_hero() {
  selected_hero_ = 0u;
  clear_has_selected_hero();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BroadcasterDetails::selected_hero() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BroadcasterDetails.selected_hero)
  return selected_hero_;
}
 void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_selected_hero(::google::protobuf::uint32 value) {
  set_has_selected_hero();
  selected_hero_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BroadcasterDetails.selected_hero)
}

// optional uint32 selected_graph = 3;
bool CMsgDOTARealtimeGameStats_BroadcasterDetails::has_selected_graph() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_has_selected_graph() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_has_selected_graph() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_selected_graph() {
  selected_graph_ = 0u;
  clear_has_selected_graph();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BroadcasterDetails::selected_graph() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BroadcasterDetails.selected_graph)
  return selected_graph_;
}
 void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_selected_graph(::google::protobuf::uint32 value) {
  set_has_selected_graph();
  selected_graph_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BroadcasterDetails.selected_graph)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_PickBanDetails

// optional uint32 hero = 1;
bool CMsgDOTARealtimeGameStats_PickBanDetails::has_hero() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStats_PickBanDetails::set_has_hero() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStats_PickBanDetails::clear_has_hero() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStats_PickBanDetails::clear_hero() {
  hero_ = 0u;
  clear_has_hero();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PickBanDetails::hero() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PickBanDetails.hero)
  return hero_;
}
 void CMsgDOTARealtimeGameStats_PickBanDetails::set_hero(::google::protobuf::uint32 value) {
  set_has_hero();
  hero_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PickBanDetails.hero)
}

// optional uint32 team = 2;
bool CMsgDOTARealtimeGameStats_PickBanDetails::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStats_PickBanDetails::set_has_team() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStats_PickBanDetails::clear_has_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStats_PickBanDetails::clear_team() {
  team_ = 0u;
  clear_has_team();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PickBanDetails::team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PickBanDetails.team)
  return team_;
}
 void CMsgDOTARealtimeGameStats_PickBanDetails::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PickBanDetails.team)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_MatchDetails

// optional fixed64 server_steam_id = 1;
bool CMsgDOTARealtimeGameStats_MatchDetails::has_server_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_has_server_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_server_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_server_steam_id() {
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steam_id();
}
 ::google::protobuf::uint64 CMsgDOTARealtimeGameStats_MatchDetails::server_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.server_steam_id)
  return server_steam_id_;
}
 void CMsgDOTARealtimeGameStats_MatchDetails::set_server_steam_id(::google::protobuf::uint64 value) {
  set_has_server_steam_id();
  server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.server_steam_id)
}

// optional uint64 matchid = 2;
bool CMsgDOTARealtimeGameStats_MatchDetails::has_matchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_has_matchid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_matchid() {
  matchid_ = GOOGLE_ULONGLONG(0);
  clear_has_matchid();
}
 ::google::protobuf::uint64 CMsgDOTARealtimeGameStats_MatchDetails::matchid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.matchid)
  return matchid_;
}
 void CMsgDOTARealtimeGameStats_MatchDetails::set_matchid(::google::protobuf::uint64 value) {
  set_has_matchid();
  matchid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.matchid)
}

// optional uint32 timestamp = 3;
bool CMsgDOTARealtimeGameStats_MatchDetails::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.timestamp)
  return timestamp_;
}
 void CMsgDOTARealtimeGameStats_MatchDetails::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.timestamp)
}

// optional float time_of_day = 4;
bool CMsgDOTARealtimeGameStats_MatchDetails::has_time_of_day() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_has_time_of_day() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_time_of_day() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_time_of_day() {
  time_of_day_ = 0;
  clear_has_time_of_day();
}
 float CMsgDOTARealtimeGameStats_MatchDetails::time_of_day() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.time_of_day)
  return time_of_day_;
}
 void CMsgDOTARealtimeGameStats_MatchDetails::set_time_of_day(float value) {
  set_has_time_of_day();
  time_of_day_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.time_of_day)
}

// optional bool is_nightstalker_night = 5;
bool CMsgDOTARealtimeGameStats_MatchDetails::has_is_nightstalker_night() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_has_is_nightstalker_night() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_is_nightstalker_night() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_is_nightstalker_night() {
  is_nightstalker_night_ = false;
  clear_has_is_nightstalker_night();
}
 bool CMsgDOTARealtimeGameStats_MatchDetails::is_nightstalker_night() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.is_nightstalker_night)
  return is_nightstalker_night_;
}
 void CMsgDOTARealtimeGameStats_MatchDetails::set_is_nightstalker_night(bool value) {
  set_has_is_nightstalker_night();
  is_nightstalker_night_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.is_nightstalker_night)
}

// optional int32 game_time = 6;
bool CMsgDOTARealtimeGameStats_MatchDetails::has_game_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_has_game_time() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_game_time() {
  game_time_ = 0;
  clear_has_game_time();
}
 ::google::protobuf::int32 CMsgDOTARealtimeGameStats_MatchDetails::game_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.game_time)
  return game_time_;
}
 void CMsgDOTARealtimeGameStats_MatchDetails::set_game_time(::google::protobuf::int32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.game_time)
}

// optional uint32 teamid_radiant = 8;
bool CMsgDOTARealtimeGameStats_MatchDetails::has_teamid_radiant() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_has_teamid_radiant() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_teamid_radiant() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_teamid_radiant() {
  teamid_radiant_ = 0u;
  clear_has_teamid_radiant();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::teamid_radiant() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.teamid_radiant)
  return teamid_radiant_;
}
 void CMsgDOTARealtimeGameStats_MatchDetails::set_teamid_radiant(::google::protobuf::uint32 value) {
  set_has_teamid_radiant();
  teamid_radiant_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.teamid_radiant)
}

// optional uint32 teamid_dire = 9;
bool CMsgDOTARealtimeGameStats_MatchDetails::has_teamid_dire() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_has_teamid_dire() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_teamid_dire() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_teamid_dire() {
  teamid_dire_ = 0u;
  clear_has_teamid_dire();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::teamid_dire() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.teamid_dire)
  return teamid_dire_;
}
 void CMsgDOTARealtimeGameStats_MatchDetails::set_teamid_dire(::google::protobuf::uint32 value) {
  set_has_teamid_dire();
  teamid_dire_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.teamid_dire)
}

// repeated .CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
int CMsgDOTARealtimeGameStats_MatchDetails::picks_size() const {
  return picks_.size();
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_picks() {
  picks_.Clear();
}
const ::CMsgDOTARealtimeGameStats_PickBanDetails& CMsgDOTARealtimeGameStats_MatchDetails::picks(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return picks_.Get(index);
}
::CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_MatchDetails::mutable_picks(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return picks_.Mutable(index);
}
::CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_MatchDetails::add_picks() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return picks_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >*
CMsgDOTARealtimeGameStats_MatchDetails::mutable_picks() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return &picks_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >&
CMsgDOTARealtimeGameStats_MatchDetails::picks() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return picks_;
}

// repeated .CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
int CMsgDOTARealtimeGameStats_MatchDetails::bans_size() const {
  return bans_.size();
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_bans() {
  bans_.Clear();
}
const ::CMsgDOTARealtimeGameStats_PickBanDetails& CMsgDOTARealtimeGameStats_MatchDetails::bans(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return bans_.Get(index);
}
::CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_MatchDetails::mutable_bans(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return bans_.Mutable(index);
}
::CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_MatchDetails::add_bans() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return bans_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >*
CMsgDOTARealtimeGameStats_MatchDetails::mutable_bans() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return &bans_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >&
CMsgDOTARealtimeGameStats_MatchDetails::bans() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return bans_;
}

// repeated .CMsgDOTARealtimeGameStats.KillDetails kills = 12;
int CMsgDOTARealtimeGameStats_MatchDetails::kills_size() const {
  return kills_.size();
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_kills() {
  kills_.Clear();
}
const ::CMsgDOTARealtimeGameStats_KillDetails& CMsgDOTARealtimeGameStats_MatchDetails::kills(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return kills_.Get(index);
}
::CMsgDOTARealtimeGameStats_KillDetails* CMsgDOTARealtimeGameStats_MatchDetails::mutable_kills(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return kills_.Mutable(index);
}
::CMsgDOTARealtimeGameStats_KillDetails* CMsgDOTARealtimeGameStats_MatchDetails::add_kills() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return kills_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_KillDetails >*
CMsgDOTARealtimeGameStats_MatchDetails::mutable_kills() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return &kills_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_KillDetails >&
CMsgDOTARealtimeGameStats_MatchDetails::kills() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return kills_;
}

// repeated .CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
int CMsgDOTARealtimeGameStats_MatchDetails::broadcasters_size() const {
  return broadcasters_.size();
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_broadcasters() {
  broadcasters_.Clear();
}
const ::CMsgDOTARealtimeGameStats_BroadcasterDetails& CMsgDOTARealtimeGameStats_MatchDetails::broadcasters(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return broadcasters_.Get(index);
}
::CMsgDOTARealtimeGameStats_BroadcasterDetails* CMsgDOTARealtimeGameStats_MatchDetails::mutable_broadcasters(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return broadcasters_.Mutable(index);
}
::CMsgDOTARealtimeGameStats_BroadcasterDetails* CMsgDOTARealtimeGameStats_MatchDetails::add_broadcasters() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return broadcasters_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BroadcasterDetails >*
CMsgDOTARealtimeGameStats_MatchDetails::mutable_broadcasters() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return &broadcasters_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BroadcasterDetails >&
CMsgDOTARealtimeGameStats_MatchDetails::broadcasters() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return broadcasters_;
}

// optional uint32 game_mode = 14;
bool CMsgDOTARealtimeGameStats_MatchDetails::has_game_mode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_has_game_mode() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.game_mode)
  return game_mode_;
}
 void CMsgDOTARealtimeGameStats_MatchDetails::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.game_mode)
}

// optional uint32 league_id = 15;
bool CMsgDOTARealtimeGameStats_MatchDetails::has_league_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_has_league_id() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_league_id() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.league_id)
  return league_id_;
}
 void CMsgDOTARealtimeGameStats_MatchDetails::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.league_id)
}

// optional bool single_team = 16;
bool CMsgDOTARealtimeGameStats_MatchDetails::has_single_team() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_has_single_team() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_single_team() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_single_team() {
  single_team_ = false;
  clear_has_single_team();
}
 bool CMsgDOTARealtimeGameStats_MatchDetails::single_team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.single_team)
  return single_team_;
}
 void CMsgDOTARealtimeGameStats_MatchDetails::set_single_team(bool value) {
  set_has_single_team();
  single_team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.single_team)
}

// optional uint32 cheers_peak = 17;
bool CMsgDOTARealtimeGameStats_MatchDetails::has_cheers_peak() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_has_cheers_peak() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_cheers_peak() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_cheers_peak() {
  cheers_peak_ = 0u;
  clear_has_cheers_peak();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::cheers_peak() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.cheers_peak)
  return cheers_peak_;
}
 void CMsgDOTARealtimeGameStats_MatchDetails::set_cheers_peak(::google::protobuf::uint32 value) {
  set_has_cheers_peak();
  cheers_peak_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.cheers_peak)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_GraphData_LocationStats

// repeated int32 stats = 1;
int CMsgDOTARealtimeGameStats_GraphData_LocationStats::stats_size() const {
  return stats_.size();
}
void CMsgDOTARealtimeGameStats_GraphData_LocationStats::clear_stats() {
  stats_.Clear();
}
 ::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData_LocationStats::stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
  return stats_.Get(index);
}
 void CMsgDOTARealtimeGameStats_GraphData_LocationStats::set_stats(int index, ::google::protobuf::int32 value) {
  stats_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
}
 void CMsgDOTARealtimeGameStats_GraphData_LocationStats::add_stats(::google::protobuf::int32 value) {
  stats_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData_LocationStats::stats() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
  return stats_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData_LocationStats::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
  return &stats_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats

// repeated .CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
int CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::loc_stats_size() const {
  return loc_stats_.size();
}
void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::clear_loc_stats() {
  loc_stats_.Clear();
}
const ::CMsgDOTARealtimeGameStats_GraphData_LocationStats& CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::loc_stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return loc_stats_.Get(index);
}
::CMsgDOTARealtimeGameStats_GraphData_LocationStats* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::mutable_loc_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return loc_stats_.Mutable(index);
}
::CMsgDOTARealtimeGameStats_GraphData_LocationStats* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::add_loc_stats() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return loc_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_LocationStats >*
CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::mutable_loc_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return &loc_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_LocationStats >&
CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::loc_stats() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return loc_stats_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_GraphData

// repeated int32 graph_gold = 1;
int CMsgDOTARealtimeGameStats_GraphData::graph_gold_size() const {
  return graph_gold_.size();
}
void CMsgDOTARealtimeGameStats_GraphData::clear_graph_gold() {
  graph_gold_.Clear();
}
 ::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData::graph_gold(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.graph_gold)
  return graph_gold_.Get(index);
}
 void CMsgDOTARealtimeGameStats_GraphData::set_graph_gold(int index, ::google::protobuf::int32 value) {
  graph_gold_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.GraphData.graph_gold)
}
 void CMsgDOTARealtimeGameStats_GraphData::add_graph_gold(::google::protobuf::int32 value) {
  graph_gold_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.graph_gold)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData::graph_gold() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.graph_gold)
  return graph_gold_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_gold() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.graph_gold)
  return &graph_gold_;
}

// repeated int32 graph_xp = 2;
int CMsgDOTARealtimeGameStats_GraphData::graph_xp_size() const {
  return graph_xp_.size();
}
void CMsgDOTARealtimeGameStats_GraphData::clear_graph_xp() {
  graph_xp_.Clear();
}
 ::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData::graph_xp(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.graph_xp)
  return graph_xp_.Get(index);
}
 void CMsgDOTARealtimeGameStats_GraphData::set_graph_xp(int index, ::google::protobuf::int32 value) {
  graph_xp_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.GraphData.graph_xp)
}
 void CMsgDOTARealtimeGameStats_GraphData::add_graph_xp(::google::protobuf::int32 value) {
  graph_xp_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.graph_xp)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData::graph_xp() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.graph_xp)
  return graph_xp_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_xp() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.graph_xp)
  return &graph_xp_;
}

// repeated int32 graph_kill = 3;
int CMsgDOTARealtimeGameStats_GraphData::graph_kill_size() const {
  return graph_kill_.size();
}
void CMsgDOTARealtimeGameStats_GraphData::clear_graph_kill() {
  graph_kill_.Clear();
}
 ::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData::graph_kill(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.graph_kill)
  return graph_kill_.Get(index);
}
 void CMsgDOTARealtimeGameStats_GraphData::set_graph_kill(int index, ::google::protobuf::int32 value) {
  graph_kill_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.GraphData.graph_kill)
}
 void CMsgDOTARealtimeGameStats_GraphData::add_graph_kill(::google::protobuf::int32 value) {
  graph_kill_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.graph_kill)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData::graph_kill() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.graph_kill)
  return graph_kill_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_kill() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.graph_kill)
  return &graph_kill_;
}

// repeated int32 graph_tower = 4;
int CMsgDOTARealtimeGameStats_GraphData::graph_tower_size() const {
  return graph_tower_.size();
}
void CMsgDOTARealtimeGameStats_GraphData::clear_graph_tower() {
  graph_tower_.Clear();
}
 ::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData::graph_tower(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.graph_tower)
  return graph_tower_.Get(index);
}
 void CMsgDOTARealtimeGameStats_GraphData::set_graph_tower(int index, ::google::protobuf::int32 value) {
  graph_tower_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.GraphData.graph_tower)
}
 void CMsgDOTARealtimeGameStats_GraphData::add_graph_tower(::google::protobuf::int32 value) {
  graph_tower_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.graph_tower)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData::graph_tower() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.graph_tower)
  return graph_tower_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_tower() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.graph_tower)
  return &graph_tower_;
}

// repeated int32 graph_rax = 5;
int CMsgDOTARealtimeGameStats_GraphData::graph_rax_size() const {
  return graph_rax_.size();
}
void CMsgDOTARealtimeGameStats_GraphData::clear_graph_rax() {
  graph_rax_.Clear();
}
 ::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData::graph_rax(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.graph_rax)
  return graph_rax_.Get(index);
}
 void CMsgDOTARealtimeGameStats_GraphData::set_graph_rax(int index, ::google::protobuf::int32 value) {
  graph_rax_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.GraphData.graph_rax)
}
 void CMsgDOTARealtimeGameStats_GraphData::add_graph_rax(::google::protobuf::int32 value) {
  graph_rax_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.graph_rax)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData::graph_rax() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.graph_rax)
  return graph_rax_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_rax() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.graph_rax)
  return &graph_rax_;
}

// repeated .CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
int CMsgDOTARealtimeGameStats_GraphData::team_loc_stats_size() const {
  return team_loc_stats_.size();
}
void CMsgDOTARealtimeGameStats_GraphData::clear_team_loc_stats() {
  team_loc_stats_.Clear();
}
const ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& CMsgDOTARealtimeGameStats_GraphData::team_loc_stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return team_loc_stats_.Get(index);
}
::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* CMsgDOTARealtimeGameStats_GraphData::mutable_team_loc_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return team_loc_stats_.Mutable(index);
}
::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* CMsgDOTARealtimeGameStats_GraphData::add_team_loc_stats() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return team_loc_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats >*
CMsgDOTARealtimeGameStats_GraphData::mutable_team_loc_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return &team_loc_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats >&
CMsgDOTARealtimeGameStats_GraphData::team_loc_stats() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return team_loc_stats_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats

// optional .CMsgDOTARealtimeGameStats.MatchDetails match = 1;
bool CMsgDOTARealtimeGameStats::has_match() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStats::set_has_match() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStats::clear_has_match() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStats::clear_match() {
  if (match_ != NULL) match_->::CMsgDOTARealtimeGameStats_MatchDetails::Clear();
  clear_has_match();
}
const ::CMsgDOTARealtimeGameStats_MatchDetails& CMsgDOTARealtimeGameStats::match() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.match)
  return match_ != NULL ? *match_ : *default_instance_->match_;
}
::CMsgDOTARealtimeGameStats_MatchDetails* CMsgDOTARealtimeGameStats::mutable_match() {
  set_has_match();
  if (match_ == NULL) {
    match_ = new ::CMsgDOTARealtimeGameStats_MatchDetails;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.match)
  return match_;
}
::CMsgDOTARealtimeGameStats_MatchDetails* CMsgDOTARealtimeGameStats::release_match() {
  clear_has_match();
  ::CMsgDOTARealtimeGameStats_MatchDetails* temp = match_;
  match_ = NULL;
  return temp;
}
void CMsgDOTARealtimeGameStats::set_allocated_match(::CMsgDOTARealtimeGameStats_MatchDetails* match) {
  delete match_;
  match_ = match;
  if (match) {
    set_has_match();
  } else {
    clear_has_match();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStats.match)
}

// repeated .CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
int CMsgDOTARealtimeGameStats::teams_size() const {
  return teams_.size();
}
void CMsgDOTARealtimeGameStats::clear_teams() {
  teams_.Clear();
}
const ::CMsgDOTARealtimeGameStats_TeamDetails& CMsgDOTARealtimeGameStats::teams(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.teams)
  return teams_.Get(index);
}
::CMsgDOTARealtimeGameStats_TeamDetails* CMsgDOTARealtimeGameStats::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.teams)
  return teams_.Mutable(index);
}
::CMsgDOTARealtimeGameStats_TeamDetails* CMsgDOTARealtimeGameStats::add_teams() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.teams)
  return teams_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_TeamDetails >*
CMsgDOTARealtimeGameStats::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.teams)
  return &teams_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_TeamDetails >&
CMsgDOTARealtimeGameStats::teams() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.teams)
  return teams_;
}

// repeated .CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
int CMsgDOTARealtimeGameStats::buildings_size() const {
  return buildings_.size();
}
void CMsgDOTARealtimeGameStats::clear_buildings() {
  buildings_.Clear();
}
const ::CMsgDOTARealtimeGameStats_BuildingDetails& CMsgDOTARealtimeGameStats::buildings(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.buildings)
  return buildings_.Get(index);
}
::CMsgDOTARealtimeGameStats_BuildingDetails* CMsgDOTARealtimeGameStats::mutable_buildings(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.buildings)
  return buildings_.Mutable(index);
}
::CMsgDOTARealtimeGameStats_BuildingDetails* CMsgDOTARealtimeGameStats::add_buildings() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.buildings)
  return buildings_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BuildingDetails >*
CMsgDOTARealtimeGameStats::mutable_buildings() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.buildings)
  return &buildings_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BuildingDetails >&
CMsgDOTARealtimeGameStats::buildings() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.buildings)
  return buildings_;
}

// optional .CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
bool CMsgDOTARealtimeGameStats::has_graph_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTARealtimeGameStats::set_has_graph_data() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTARealtimeGameStats::clear_has_graph_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTARealtimeGameStats::clear_graph_data() {
  if (graph_data_ != NULL) graph_data_->::CMsgDOTARealtimeGameStats_GraphData::Clear();
  clear_has_graph_data();
}
const ::CMsgDOTARealtimeGameStats_GraphData& CMsgDOTARealtimeGameStats::graph_data() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.graph_data)
  return graph_data_ != NULL ? *graph_data_ : *default_instance_->graph_data_;
}
::CMsgDOTARealtimeGameStats_GraphData* CMsgDOTARealtimeGameStats::mutable_graph_data() {
  set_has_graph_data();
  if (graph_data_ == NULL) {
    graph_data_ = new ::CMsgDOTARealtimeGameStats_GraphData;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.graph_data)
  return graph_data_;
}
::CMsgDOTARealtimeGameStats_GraphData* CMsgDOTARealtimeGameStats::release_graph_data() {
  clear_has_graph_data();
  ::CMsgDOTARealtimeGameStats_GraphData* temp = graph_data_;
  graph_data_ = NULL;
  return temp;
}
void CMsgDOTARealtimeGameStats::set_allocated_graph_data(::CMsgDOTARealtimeGameStats_GraphData* graph_data) {
  delete graph_data_;
  graph_data_ = graph_data;
  if (graph_data) {
    set_has_graph_data();
  } else {
    clear_has_graph_data();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStats.graph_data)
}

// optional bool delta_frame = 5;
bool CMsgDOTARealtimeGameStats::has_delta_frame() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTARealtimeGameStats::set_has_delta_frame() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTARealtimeGameStats::clear_has_delta_frame() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTARealtimeGameStats::clear_delta_frame() {
  delta_frame_ = false;
  clear_has_delta_frame();
}
 bool CMsgDOTARealtimeGameStats::delta_frame() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.delta_frame)
  return delta_frame_;
}
 void CMsgDOTARealtimeGameStats::set_delta_frame(bool value) {
  set_has_delta_frame();
  delta_frame_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.delta_frame)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStatsTerse_TeamDetails::kTeamNumberFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_TeamDetails::kTeamIdFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_TeamDetails::kTeamNameFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_TeamDetails::kTeamLogoFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_TeamDetails::kScoreFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_TeamDetails::kPlayersFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStatsTerse_TeamDetails::CMsgDOTARealtimeGameStatsTerse_TeamDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStatsTerse_TeamDetails::CMsgDOTARealtimeGameStatsTerse_TeamDetails(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  team_number_ = 0u;
  team_id_ = 0u;
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_logo_ = GOOGLE_ULONGLONG(0);
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStatsTerse_TeamDetails::~CMsgDOTARealtimeGameStatsTerse_TeamDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse_TeamDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStatsTerse_TeamDetails_descriptor_;
}

const CMsgDOTARealtimeGameStatsTerse_TeamDetails& CMsgDOTARealtimeGameStatsTerse_TeamDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStatsTerse_TeamDetails* CMsgDOTARealtimeGameStatsTerse_TeamDetails::default_instance_ = NULL;

CMsgDOTARealtimeGameStatsTerse_TeamDetails* CMsgDOTARealtimeGameStatsTerse_TeamDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStatsTerse_TeamDetails* n = new CMsgDOTARealtimeGameStatsTerse_TeamDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTARealtimeGameStatsTerse_TeamDetails*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(team_number_, team_id_);
    if (has_team_name()) {
      team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    team_logo_ = GOOGLE_ULONGLONG(0);
    score_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_number_)));
          set_has_team_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (tag == 16) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_team_name;
        break;
      }

      // optional string team_name = 3;
      case 3: {
        if (tag == 26) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_team_logo;
        break;
      }

      // optional fixed64 team_logo = 4;
      case 4: {
        if (tag == 33) {
         parse_team_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &team_logo_)));
          set_has_team_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // optional uint32 score = 5;
      case 5: {
        if (tag == 40) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_players;
        break;
      }

      // repeated .CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
      case 6: {
        if (tag == 50) {
         parse_players:
          DO_(input->IncrementRecursionDepth());
         parse_loop_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_players;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  // optional uint32 team_number = 1;
  if (has_team_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_number(), output);
  }

  // optional uint32 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  // optional string team_name = 3;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_name(), output);
  }

  // optional fixed64 team_logo = 4;
  if (has_team_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->team_logo(), output);
  }

  // optional uint32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->score(), output);
  }

  // repeated .CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->players(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStatsTerse_TeamDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  // optional uint32 team_number = 1;
  if (has_team_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_number(), target);
  }

  // optional uint32 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  // optional string team_name = 3;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_name(), target);
  }

  // optional fixed64 team_logo = 4;
  if (has_team_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->team_logo(), target);
  }

  // optional uint32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->score(), target);
  }

  // repeated .CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->players(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  return target;
}

int CMsgDOTARealtimeGameStatsTerse_TeamDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 team_number = 1;
    if (has_team_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_number());
    }

    // optional uint32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional string team_name = 3;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional fixed64 team_logo = 4;
    if (has_team_logo()) {
      total_size += 1 + 8;
    }

    // optional uint32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  // repeated .CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTARealtimeGameStatsTerse_TeamDetails* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStatsTerse_TeamDetails>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::MergeFrom(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_number()) {
      set_team_number(from.team_number());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_name()) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (from.has_team_logo()) {
      set_team_logo(from.team_logo());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::CopyFrom(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::Swap(CMsgDOTARealtimeGameStatsTerse_TeamDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::InternalSwap(CMsgDOTARealtimeGameStatsTerse_TeamDetails* other) {
  std::swap(team_number_, other->team_number_);
  std::swap(team_id_, other->team_id_);
  team_name_.Swap(&other->team_name_);
  std::swap(team_logo_, other->team_logo_);
  std::swap(score_, other->score_);
  players_.UnsafeArenaSwap(&other->players_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStatsTerse_TeamDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStatsTerse_TeamDetails_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStatsTerse_TeamDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kAccountidFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kPlayeridFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kNameFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kTeamFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kHeroidFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kLevelFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kKillCountFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kDeathCountFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kAssistsCountFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kDeniesCountFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kLhCountFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kGoldFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kXFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kYFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStatsTerse_PlayerDetails::CMsgDOTARealtimeGameStatsTerse_PlayerDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStatsTerse_PlayerDetails::CMsgDOTARealtimeGameStatsTerse_PlayerDetails(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  accountid_ = 0u;
  playerid_ = 0u;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_ = 0u;
  heroid_ = 0u;
  level_ = 0u;
  kill_count_ = 0u;
  death_count_ = 0u;
  assists_count_ = 0u;
  denies_count_ = 0u;
  lh_count_ = 0u;
  gold_ = 0u;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStatsTerse_PlayerDetails::~CMsgDOTARealtimeGameStatsTerse_PlayerDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStatsTerse_PlayerDetails_descriptor_;
}

const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& CMsgDOTARealtimeGameStatsTerse_PlayerDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStatsTerse_PlayerDetails* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::default_instance_ = NULL;

CMsgDOTARealtimeGameStatsTerse_PlayerDetails* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStatsTerse_PlayerDetails* n = new CMsgDOTARealtimeGameStatsTerse_PlayerDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTARealtimeGameStatsTerse_PlayerDetails*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(accountid_, playerid_);
    ZR_(team_, death_count_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ZR_(assists_count_, y_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // optional uint32 playerid = 2;
      case 2: {
        if (tag == 16) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_team;
        break;
      }

      // optional uint32 team = 4;
      case 4: {
        if (tag == 32) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_heroid;
        break;
      }

      // optional uint32 heroid = 5;
      case 5: {
        if (tag == 40) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional uint32 level = 6;
      case 6: {
        if (tag == 48) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_kill_count;
        break;
      }

      // optional uint32 kill_count = 7;
      case 7: {
        if (tag == 56) {
         parse_kill_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_count_)));
          set_has_kill_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_death_count;
        break;
      }

      // optional uint32 death_count = 8;
      case 8: {
        if (tag == 64) {
         parse_death_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &death_count_)));
          set_has_death_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_assists_count;
        break;
      }

      // optional uint32 assists_count = 9;
      case 9: {
        if (tag == 72) {
         parse_assists_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_count_)));
          set_has_assists_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_denies_count;
        break;
      }

      // optional uint32 denies_count = 10;
      case 10: {
        if (tag == 80) {
         parse_denies_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &denies_count_)));
          set_has_denies_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_lh_count;
        break;
      }

      // optional uint32 lh_count = 11;
      case 11: {
        if (tag == 88) {
         parse_lh_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lh_count_)));
          set_has_lh_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 12;
      case 12: {
        if (tag == 96) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_x;
        break;
      }

      // optional float x = 13;
      case 13: {
        if (tag == 109) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_y;
        break;
      }

      // optional float y = 14;
      case 14: {
        if (tag == 117) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional uint32 team = 4;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team(), output);
  }

  // optional uint32 heroid = 5;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->heroid(), output);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional uint32 kill_count = 7;
  if (has_kill_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->kill_count(), output);
  }

  // optional uint32 death_count = 8;
  if (has_death_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->death_count(), output);
  }

  // optional uint32 assists_count = 9;
  if (has_assists_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->assists_count(), output);
  }

  // optional uint32 denies_count = 10;
  if (has_denies_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->denies_count(), output);
  }

  // optional uint32 lh_count = 11;
  if (has_lh_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->lh_count(), output);
  }

  // optional uint32 gold = 12;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->gold(), output);
  }

  // optional float x = 13;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->x(), output);
  }

  // optional float y = 14;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 team = 4;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team(), target);
  }

  // optional uint32 heroid = 5;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->heroid(), target);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // optional uint32 kill_count = 7;
  if (has_kill_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->kill_count(), target);
  }

  // optional uint32 death_count = 8;
  if (has_death_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->death_count(), target);
  }

  // optional uint32 assists_count = 9;
  if (has_assists_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->assists_count(), target);
  }

  // optional uint32 denies_count = 10;
  if (has_denies_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->denies_count(), target);
  }

  // optional uint32 lh_count = 11;
  if (has_lh_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->lh_count(), target);
  }

  // optional uint32 gold = 12;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->gold(), target);
  }

  // optional float x = 13;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->x(), target);
  }

  // optional float y = 14;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  return target;
}

int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 team = 4;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional uint32 heroid = 5;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 kill_count = 7;
    if (has_kill_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill_count());
    }

    // optional uint32 death_count = 8;
    if (has_death_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->death_count());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional uint32 assists_count = 9;
    if (has_assists_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists_count());
    }

    // optional uint32 denies_count = 10;
    if (has_denies_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->denies_count());
    }

    // optional uint32 lh_count = 11;
    if (has_lh_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lh_count());
    }

    // optional uint32 gold = 12;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional float x = 13;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 14;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTARealtimeGameStatsTerse_PlayerDetails* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStatsTerse_PlayerDetails>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::MergeFrom(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_kill_count()) {
      set_kill_count(from.kill_count());
    }
    if (from.has_death_count()) {
      set_death_count(from.death_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_assists_count()) {
      set_assists_count(from.assists_count());
    }
    if (from.has_denies_count()) {
      set_denies_count(from.denies_count());
    }
    if (from.has_lh_count()) {
      set_lh_count(from.lh_count());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::CopyFrom(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::Swap(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::InternalSwap(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* other) {
  std::swap(accountid_, other->accountid_);
  std::swap(playerid_, other->playerid_);
  name_.Swap(&other->name_);
  std::swap(team_, other->team_);
  std::swap(heroid_, other->heroid_);
  std::swap(level_, other->level_);
  std::swap(kill_count_, other->kill_count_);
  std::swap(death_count_, other->death_count_);
  std::swap(assists_count_, other->assists_count_);
  std::swap(denies_count_, other->denies_count_);
  std::swap(lh_count_, other->lh_count_);
  std::swap(gold_, other->gold_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStatsTerse_PlayerDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStatsTerse_PlayerDetails_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStatsTerse_PlayerDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kTeamFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kHeadingFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kTypeFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kLaneFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kTierFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kXFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kYFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStatsTerse_BuildingDetails::CMsgDOTARealtimeGameStatsTerse_BuildingDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStatsTerse_BuildingDetails::CMsgDOTARealtimeGameStatsTerse_BuildingDetails(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::SharedCtor() {
  _cached_size_ = 0;
  team_ = 0u;
  heading_ = 0;
  type_ = 0u;
  lane_ = 0u;
  tier_ = 0u;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStatsTerse_BuildingDetails::~CMsgDOTARealtimeGameStatsTerse_BuildingDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse_BuildingDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStatsTerse_BuildingDetails_descriptor_;
}

const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& CMsgDOTARealtimeGameStatsTerse_BuildingDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStatsTerse_BuildingDetails* CMsgDOTARealtimeGameStatsTerse_BuildingDetails::default_instance_ = NULL;

CMsgDOTARealtimeGameStatsTerse_BuildingDetails* CMsgDOTARealtimeGameStatsTerse_BuildingDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStatsTerse_BuildingDetails* n = new CMsgDOTARealtimeGameStatsTerse_BuildingDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTARealtimeGameStatsTerse_BuildingDetails*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(team_, y_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_heading;
        break;
      }

      // optional float heading = 2;
      case 2: {
        if (tag == 21) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lane;
        break;
      }

      // optional uint32 lane = 4;
      case 4: {
        if (tag == 32) {
         parse_lane:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_)));
          set_has_lane();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tier;
        break;
      }

      // optional uint32 tier = 5;
      case 5: {
        if (tag == 40) {
         parse_tier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tier_)));
          set_has_tier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_x;
        break;
      }

      // optional float x = 6;
      case 6: {
        if (tag == 53) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_y;
        break;
      }

      // optional float y = 7;
      case 7: {
        if (tag == 61) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  // optional uint32 team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team(), output);
  }

  // optional float heading = 2;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->heading(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional uint32 lane = 4;
  if (has_lane()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lane(), output);
  }

  // optional uint32 tier = 5;
  if (has_tier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tier(), output);
  }

  // optional float x = 6;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->x(), output);
  }

  // optional float y = 7;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStatsTerse_BuildingDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  // optional uint32 team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team(), target);
  }

  // optional float heading = 2;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->heading(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional uint32 lane = 4;
  if (has_lane()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lane(), target);
  }

  // optional uint32 tier = 5;
  if (has_tier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tier(), target);
  }

  // optional float x = 6;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->x(), target);
  }

  // optional float y = 7;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  return target;
}

int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional float heading = 2;
    if (has_heading()) {
      total_size += 1 + 4;
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 lane = 4;
    if (has_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lane());
    }

    // optional uint32 tier = 5;
    if (has_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tier());
    }

    // optional float x = 6;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 7;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTARealtimeGameStatsTerse_BuildingDetails* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStatsTerse_BuildingDetails>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::MergeFrom(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_lane()) {
      set_lane(from.lane());
    }
    if (from.has_tier()) {
      set_tier(from.tier());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::CopyFrom(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::Swap(CMsgDOTARealtimeGameStatsTerse_BuildingDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::InternalSwap(CMsgDOTARealtimeGameStatsTerse_BuildingDetails* other) {
  std::swap(team_, other->team_);
  std::swap(heading_, other->heading_);
  std::swap(type_, other->type_);
  std::swap(lane_, other->lane_);
  std::swap(tier_, other->tier_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStatsTerse_BuildingDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStatsTerse_BuildingDetails_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStatsTerse_BuildingDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kServerSteamIdFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kMatchidFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kTimestampFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kGameTimeFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kSteamBroadcasterAccountIdsFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kGameModeFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kLeagueIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStatsTerse_MatchDetails::CMsgDOTARealtimeGameStatsTerse_MatchDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStatsTerse_MatchDetails::CMsgDOTARealtimeGameStatsTerse_MatchDetails(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::SharedCtor() {
  _cached_size_ = 0;
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  matchid_ = GOOGLE_ULONGLONG(0);
  timestamp_ = 0u;
  game_time_ = 0;
  game_mode_ = 0u;
  league_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStatsTerse_MatchDetails::~CMsgDOTARealtimeGameStatsTerse_MatchDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse_MatchDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStatsTerse_MatchDetails_descriptor_;
}

const CMsgDOTARealtimeGameStatsTerse_MatchDetails& CMsgDOTARealtimeGameStatsTerse_MatchDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStatsTerse_MatchDetails* CMsgDOTARealtimeGameStatsTerse_MatchDetails::default_instance_ = NULL;

CMsgDOTARealtimeGameStatsTerse_MatchDetails* CMsgDOTARealtimeGameStatsTerse_MatchDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStatsTerse_MatchDetails* n = new CMsgDOTARealtimeGameStatsTerse_MatchDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTARealtimeGameStatsTerse_MatchDetails*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 111u) {
    ZR_(server_steam_id_, game_time_);
    ZR_(game_mode_, league_id_);
  }

#undef ZR_HELPER_
#undef ZR_

  steam_broadcaster_account_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 server_steam_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steam_id_)));
          set_has_server_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_matchid;
        break;
      }

      // optional uint64 matchid = 2;
      case 2: {
        if (tag == 16) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_game_time;
        break;
      }

      // optional int32 game_time = 4;
      case 4: {
        if (tag == 32) {
         parse_game_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_time_)));
          set_has_game_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_steam_broadcaster_account_ids;
        break;
      }

      // repeated uint32 steam_broadcaster_account_ids = 6;
      case 6: {
        if (tag == 48) {
         parse_steam_broadcaster_account_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_steam_broadcaster_account_ids())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_steam_broadcaster_account_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_steam_broadcaster_account_ids;
        if (input->ExpectTag(56)) goto parse_game_mode;
        break;
      }

      // optional uint32 game_mode = 7;
      case 7: {
        if (tag == 56) {
         parse_game_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
          set_has_game_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_league_id;
        break;
      }

      // optional uint32 league_id = 8;
      case 8: {
        if (tag == 64) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  // optional fixed64 server_steam_id = 1;
  if (has_server_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->server_steam_id(), output);
  }

  // optional uint64 matchid = 2;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->matchid(), output);
  }

  // optional uint32 timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timestamp(), output);
  }

  // optional int32 game_time = 4;
  if (has_game_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->game_time(), output);
  }

  // repeated uint32 steam_broadcaster_account_ids = 6;
  for (int i = 0; i < this->steam_broadcaster_account_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->steam_broadcaster_account_ids(i), output);
  }

  // optional uint32 game_mode = 7;
  if (has_game_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->game_mode(), output);
  }

  // optional uint32 league_id = 8;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStatsTerse_MatchDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  // optional fixed64 server_steam_id = 1;
  if (has_server_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->server_steam_id(), target);
  }

  // optional uint64 matchid = 2;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->matchid(), target);
  }

  // optional uint32 timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timestamp(), target);
  }

  // optional int32 game_time = 4;
  if (has_game_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->game_time(), target);
  }

  // repeated uint32 steam_broadcaster_account_ids = 6;
  for (int i = 0; i < this->steam_broadcaster_account_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->steam_broadcaster_account_ids(i), target);
  }

  // optional uint32 game_mode = 7;
  if (has_game_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->game_mode(), target);
  }

  // optional uint32 league_id = 8;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  return target;
}

int CMsgDOTARealtimeGameStatsTerse_MatchDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 111u) {
    // optional fixed64 server_steam_id = 1;
    if (has_server_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint64 matchid = 2;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->matchid());
    }

    // optional uint32 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional int32 game_time = 4;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_time());
    }

    // optional uint32 game_mode = 7;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

    // optional uint32 league_id = 8;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

  }
  // repeated uint32 steam_broadcaster_account_ids = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->steam_broadcaster_account_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->steam_broadcaster_account_ids(i));
    }
    total_size += 1 * this->steam_broadcaster_account_ids_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTARealtimeGameStatsTerse_MatchDetails* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStatsTerse_MatchDetails>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::MergeFrom(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  steam_broadcaster_account_ids_.MergeFrom(from.steam_broadcaster_account_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_steam_id()) {
      set_server_steam_id(from.server_steam_id());
    }
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_game_time()) {
      set_game_time(from.game_time());
    }
    if (from.has_game_mode()) {
      set_game_mode(from.game_mode());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::CopyFrom(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::Swap(CMsgDOTARealtimeGameStatsTerse_MatchDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::InternalSwap(CMsgDOTARealtimeGameStatsTerse_MatchDetails* other) {
  std::swap(server_steam_id_, other->server_steam_id_);
  std::swap(matchid_, other->matchid_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(game_time_, other->game_time_);
  steam_broadcaster_account_ids_.UnsafeArenaSwap(&other->steam_broadcaster_account_ids_);
  std::swap(game_mode_, other->game_mode_);
  std::swap(league_id_, other->league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStatsTerse_MatchDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStatsTerse_MatchDetails_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStatsTerse_MatchDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStatsTerse_GraphData::kGraphGoldFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStatsTerse_GraphData::CMsgDOTARealtimeGameStatsTerse_GraphData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStatsTerse.GraphData)
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStatsTerse_GraphData::CMsgDOTARealtimeGameStatsTerse_GraphData(const CMsgDOTARealtimeGameStatsTerse_GraphData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStatsTerse.GraphData)
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStatsTerse_GraphData::~CMsgDOTARealtimeGameStatsTerse_GraphData() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStatsTerse.GraphData)
  SharedDtor();
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse_GraphData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStatsTerse_GraphData_descriptor_;
}

const CMsgDOTARealtimeGameStatsTerse_GraphData& CMsgDOTARealtimeGameStatsTerse_GraphData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStatsTerse_GraphData* CMsgDOTARealtimeGameStatsTerse_GraphData::default_instance_ = NULL;

CMsgDOTARealtimeGameStatsTerse_GraphData* CMsgDOTARealtimeGameStatsTerse_GraphData::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStatsTerse_GraphData* n = new CMsgDOTARealtimeGameStatsTerse_GraphData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::Clear() {
  graph_gold_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTARealtimeGameStatsTerse_GraphData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStatsTerse.GraphData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 graph_gold = 1;
      case 1: {
        if (tag == 8) {
         parse_graph_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_graph_gold())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_graph_gold())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_graph_gold;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStatsTerse.GraphData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStatsTerse.GraphData)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStatsTerse.GraphData)
  // repeated int32 graph_gold = 1;
  for (int i = 0; i < this->graph_gold_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->graph_gold(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStatsTerse.GraphData)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStatsTerse_GraphData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStatsTerse.GraphData)
  // repeated int32 graph_gold = 1;
  for (int i = 0; i < this->graph_gold_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->graph_gold(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStatsTerse.GraphData)
  return target;
}

int CMsgDOTARealtimeGameStatsTerse_GraphData::ByteSize() const {
  int total_size = 0;

  // repeated int32 graph_gold = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->graph_gold_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->graph_gold(i));
    }
    total_size += 1 * this->graph_gold_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTARealtimeGameStatsTerse_GraphData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStatsTerse_GraphData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::MergeFrom(const CMsgDOTARealtimeGameStatsTerse_GraphData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  graph_gold_.MergeFrom(from.graph_gold_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::CopyFrom(const CMsgDOTARealtimeGameStatsTerse_GraphData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse_GraphData::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::Swap(CMsgDOTARealtimeGameStatsTerse_GraphData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStatsTerse_GraphData::InternalSwap(CMsgDOTARealtimeGameStatsTerse_GraphData* other) {
  graph_gold_.UnsafeArenaSwap(&other->graph_gold_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStatsTerse_GraphData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStatsTerse_GraphData_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStatsTerse_GraphData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStatsTerse::kMatchFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse::kTeamsFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse::kBuildingsFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse::kGraphDataFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse::kDeltaFrameFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStatsTerse::CMsgDOTARealtimeGameStatsTerse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStatsTerse)
}

void CMsgDOTARealtimeGameStatsTerse::InitAsDefaultInstance() {
  match_ = const_cast< ::CMsgDOTARealtimeGameStatsTerse_MatchDetails*>(&::CMsgDOTARealtimeGameStatsTerse_MatchDetails::default_instance());
  graph_data_ = const_cast< ::CMsgDOTARealtimeGameStatsTerse_GraphData*>(&::CMsgDOTARealtimeGameStatsTerse_GraphData::default_instance());
}

CMsgDOTARealtimeGameStatsTerse::CMsgDOTARealtimeGameStatsTerse(const CMsgDOTARealtimeGameStatsTerse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStatsTerse)
}

void CMsgDOTARealtimeGameStatsTerse::SharedCtor() {
  _cached_size_ = 0;
  match_ = NULL;
  graph_data_ = NULL;
  delta_frame_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStatsTerse::~CMsgDOTARealtimeGameStatsTerse() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStatsTerse)
  SharedDtor();
}

void CMsgDOTARealtimeGameStatsTerse::SharedDtor() {
  if (this != default_instance_) {
    delete match_;
    delete graph_data_;
  }
}

void CMsgDOTARealtimeGameStatsTerse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStatsTerse_descriptor_;
}

const CMsgDOTARealtimeGameStatsTerse& CMsgDOTARealtimeGameStatsTerse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStatsTerse* CMsgDOTARealtimeGameStatsTerse::default_instance_ = NULL;

CMsgDOTARealtimeGameStatsTerse* CMsgDOTARealtimeGameStatsTerse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStatsTerse* n = new CMsgDOTARealtimeGameStatsTerse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStatsTerse::Clear() {
  if (_has_bits_[0 / 32] & 25u) {
    if (has_match()) {
      if (match_ != NULL) match_->::CMsgDOTARealtimeGameStatsTerse_MatchDetails::Clear();
    }
    if (has_graph_data()) {
      if (graph_data_ != NULL) graph_data_->::CMsgDOTARealtimeGameStatsTerse_GraphData::Clear();
    }
    delta_frame_ = false;
  }
  teams_.Clear();
  buildings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTARealtimeGameStatsTerse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStatsTerse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_teams;
        break;
      }

      // repeated .CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
      case 2: {
        if (tag == 18) {
         parse_teams:
          DO_(input->IncrementRecursionDepth());
         parse_loop_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_teams;
        if (input->ExpectTag(26)) goto parse_loop_buildings;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_buildings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_buildings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_buildings;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_graph_data;
        break;
      }

      // optional .CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
      case 4: {
        if (tag == 34) {
         parse_graph_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_graph_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_delta_frame;
        break;
      }

      // optional bool delta_frame = 5;
      case 5: {
        if (tag == 40) {
         parse_delta_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delta_frame_)));
          set_has_delta_frame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStatsTerse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStatsTerse)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStatsTerse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStatsTerse)
  // optional .CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
  if (has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->match_, output);
  }

  // repeated .CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
  for (unsigned int i = 0, n = this->teams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teams(i), output);
  }

  // repeated .CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
  for (unsigned int i = 0, n = this->buildings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buildings(i), output);
  }

  // optional .CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
  if (has_graph_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->graph_data_, output);
  }

  // optional bool delta_frame = 5;
  if (has_delta_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->delta_frame(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStatsTerse)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStatsTerse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStatsTerse)
  // optional .CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
  if (has_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->match_, target);
  }

  // repeated .CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
  for (unsigned int i = 0, n = this->teams_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teams(i), target);
  }

  // repeated .CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
  for (unsigned int i = 0, n = this->buildings_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->buildings(i), target);
  }

  // optional .CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
  if (has_graph_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->graph_data_, target);
  }

  // optional bool delta_frame = 5;
  if (has_delta_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->delta_frame(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStatsTerse)
  return target;
}

int CMsgDOTARealtimeGameStatsTerse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 25u) {
    // optional .CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
    if (has_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->match_);
    }

    // optional .CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
    if (has_graph_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->graph_data_);
    }

    // optional bool delta_frame = 5;
    if (has_delta_frame()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
  total_size += 1 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }

  // repeated .CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
  total_size += 1 * this->buildings_size();
  for (int i = 0; i < this->buildings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildings(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTARealtimeGameStatsTerse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStatsTerse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse::MergeFrom(const CMsgDOTARealtimeGameStatsTerse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  teams_.MergeFrom(from.teams_);
  buildings_.MergeFrom(from.buildings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match()) {
      mutable_match()->::CMsgDOTARealtimeGameStatsTerse_MatchDetails::MergeFrom(from.match());
    }
    if (from.has_graph_data()) {
      mutable_graph_data()->::CMsgDOTARealtimeGameStatsTerse_GraphData::MergeFrom(from.graph_data());
    }
    if (from.has_delta_frame()) {
      set_delta_frame(from.delta_frame());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTARealtimeGameStatsTerse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse::CopyFrom(const CMsgDOTARealtimeGameStatsTerse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStatsTerse::Swap(CMsgDOTARealtimeGameStatsTerse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStatsTerse::InternalSwap(CMsgDOTARealtimeGameStatsTerse* other) {
  std::swap(match_, other->match_);
  teams_.UnsafeArenaSwap(&other->teams_);
  buildings_.UnsafeArenaSwap(&other->buildings_);
  std::swap(graph_data_, other->graph_data_);
  std::swap(delta_frame_, other->delta_frame_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStatsTerse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStatsTerse_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStatsTerse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARealtimeGameStatsTerse_TeamDetails

// optional uint32 team_number = 1;
bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_has_team_number() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_has_team_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_number() {
  team_number_ = 0u;
  clear_has_team_number();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_number() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_number)
  return team_number_;
}
 void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_number(::google::protobuf::uint32 value) {
  set_has_team_number();
  team_number_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_number)
}

// optional uint32 team_id = 2;
bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_id)
  return team_id_;
}
 void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_id)
}

// optional string team_name = 3;
bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_has_team_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
 const ::std::string& CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
  return team_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
}
 void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_name(const char* value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
}
 void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
}
 ::std::string* CMsgDOTARealtimeGameStatsTerse_TeamDetails::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTARealtimeGameStatsTerse_TeamDetails::release_team_name() {
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
}

// optional fixed64 team_logo = 4;
bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_logo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_has_team_logo() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_has_team_logo() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_logo() {
  team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo();
}
 ::google::protobuf::uint64 CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo)
  return team_logo_;
}
 void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_logo(::google::protobuf::uint64 value) {
  set_has_team_logo();
  team_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo)
}

// optional uint32 score = 5;
bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_score() {
  score_ = 0u;
  clear_has_score();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_TeamDetails::score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.TeamDetails.score)
  return score_;
}
 void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.TeamDetails.score)
}

// repeated .CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
int CMsgDOTARealtimeGameStatsTerse_TeamDetails::players_size() const {
  return players_.size();
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_players() {
  players_.Clear();
}
const ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails& CMsgDOTARealtimeGameStatsTerse_TeamDetails::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return players_.Get(index);
}
::CMsgDOTARealtimeGameStatsTerse_PlayerDetails* CMsgDOTARealtimeGameStatsTerse_TeamDetails::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return players_.Mutable(index);
}
::CMsgDOTARealtimeGameStatsTerse_PlayerDetails* CMsgDOTARealtimeGameStatsTerse_TeamDetails::add_players() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails >*
CMsgDOTARealtimeGameStatsTerse_TeamDetails::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails >&
CMsgDOTARealtimeGameStatsTerse_TeamDetails::players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return players_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse_PlayerDetails

// optional uint32 accountid = 1;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::accountid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.accountid)
  return accountid_;
}
 void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.accountid)
}

// optional uint32 playerid = 2;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::playerid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.playerid)
  return playerid_;
}
 void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.playerid)
}

// optional string name = 3;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& CMsgDOTARealtimeGameStatsTerse_PlayerDetails::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
}
 void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
}
 void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
}
 ::std::string* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
}

// optional uint32 team = 4;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_team() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_team() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_team() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_team() {
  team_ = 0u;
  clear_has_team();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.team)
  return team_;
}
 void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.team)
}

// optional uint32 heroid = 5;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_heroid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_heroid() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::heroid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.heroid)
  return heroid_;
}
 void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.heroid)
}

// optional uint32 level = 6;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_level() {
  level_ = 0u;
  clear_has_level();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.level)
  return level_;
}
 void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.level)
}

// optional uint32 kill_count = 7;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_kill_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_kill_count() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_kill_count() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_kill_count() {
  kill_count_ = 0u;
  clear_has_kill_count();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kill_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.kill_count)
  return kill_count_;
}
 void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_kill_count(::google::protobuf::uint32 value) {
  set_has_kill_count();
  kill_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.kill_count)
}

// optional uint32 death_count = 8;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_death_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_death_count() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_death_count() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_death_count() {
  death_count_ = 0u;
  clear_has_death_count();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::death_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.death_count)
  return death_count_;
}
 void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_death_count(::google::protobuf::uint32 value) {
  set_has_death_count();
  death_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.death_count)
}

// optional uint32 assists_count = 9;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_assists_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_assists_count() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_assists_count() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_assists_count() {
  assists_count_ = 0u;
  clear_has_assists_count();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::assists_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.assists_count)
  return assists_count_;
}
 void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_assists_count(::google::protobuf::uint32 value) {
  set_has_assists_count();
  assists_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.assists_count)
}

// optional uint32 denies_count = 10;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_denies_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_denies_count() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_denies_count() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_denies_count() {
  denies_count_ = 0u;
  clear_has_denies_count();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::denies_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.denies_count)
  return denies_count_;
}
 void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_denies_count(::google::protobuf::uint32 value) {
  set_has_denies_count();
  denies_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.denies_count)
}

// optional uint32 lh_count = 11;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_lh_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_lh_count() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_lh_count() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_lh_count() {
  lh_count_ = 0u;
  clear_has_lh_count();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::lh_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.lh_count)
  return lh_count_;
}
 void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_lh_count(::google::protobuf::uint32 value) {
  set_has_lh_count();
  lh_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.lh_count)
}

// optional uint32 gold = 12;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_gold() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_gold() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_gold() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::gold() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.gold)
  return gold_;
}
 void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.gold)
}

// optional float x = 13;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_x() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_x() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_x() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float CMsgDOTARealtimeGameStatsTerse_PlayerDetails::x() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.x)
  return x_;
}
 void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.x)
}

// optional float y = 14;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_y() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_y() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_y() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float CMsgDOTARealtimeGameStatsTerse_PlayerDetails::y() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.y)
  return y_;
}
 void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.y)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse_BuildingDetails

// optional uint32 team = 1;
bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_team() {
  team_ = 0u;
  clear_has_team();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_BuildingDetails::team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.team)
  return team_;
}
 void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.team)
}

// optional float heading = 2;
bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_heading() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_heading() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_heading() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
 float CMsgDOTARealtimeGameStatsTerse_BuildingDetails::heading() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.heading)
  return heading_;
}
 void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_heading(float value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.heading)
}

// optional uint32 type = 3;
bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_type() {
  type_ = 0u;
  clear_has_type();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_BuildingDetails::type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.type)
  return type_;
}
 void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.type)
}

// optional uint32 lane = 4;
bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_lane() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_lane() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_lane() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_lane() {
  lane_ = 0u;
  clear_has_lane();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_BuildingDetails::lane() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.lane)
  return lane_;
}
 void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_lane(::google::protobuf::uint32 value) {
  set_has_lane();
  lane_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.lane)
}

// optional uint32 tier = 5;
bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_tier() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_tier() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_tier() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_tier() {
  tier_ = 0u;
  clear_has_tier();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_BuildingDetails::tier() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.tier)
  return tier_;
}
 void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_tier(::google::protobuf::uint32 value) {
  set_has_tier();
  tier_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.tier)
}

// optional float x = 6;
bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_x() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_x() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float CMsgDOTARealtimeGameStatsTerse_BuildingDetails::x() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.x)
  return x_;
}
 void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.x)
}

// optional float y = 7;
bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_y() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_y() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float CMsgDOTARealtimeGameStatsTerse_BuildingDetails::y() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.y)
  return y_;
}
 void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.y)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse_MatchDetails

// optional fixed64 server_steam_id = 1;
bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_server_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_has_server_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_has_server_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_server_steam_id() {
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steam_id();
}
 ::google::protobuf::uint64 CMsgDOTARealtimeGameStatsTerse_MatchDetails::server_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.server_steam_id)
  return server_steam_id_;
}
 void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_server_steam_id(::google::protobuf::uint64 value) {
  set_has_server_steam_id();
  server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.server_steam_id)
}

// optional uint64 matchid = 2;
bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_matchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_has_matchid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_matchid() {
  matchid_ = GOOGLE_ULONGLONG(0);
  clear_has_matchid();
}
 ::google::protobuf::uint64 CMsgDOTARealtimeGameStatsTerse_MatchDetails::matchid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.matchid)
  return matchid_;
}
 void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_matchid(::google::protobuf::uint64 value) {
  set_has_matchid();
  matchid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.matchid)
}

// optional uint32 timestamp = 3;
bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_MatchDetails::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.timestamp)
  return timestamp_;
}
 void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.timestamp)
}

// optional int32 game_time = 4;
bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_game_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_has_game_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_game_time() {
  game_time_ = 0;
  clear_has_game_time();
}
 ::google::protobuf::int32 CMsgDOTARealtimeGameStatsTerse_MatchDetails::game_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_time)
  return game_time_;
}
 void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_game_time(::google::protobuf::int32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_time)
}

// repeated uint32 steam_broadcaster_account_ids = 6;
int CMsgDOTARealtimeGameStatsTerse_MatchDetails::steam_broadcaster_account_ids_size() const {
  return steam_broadcaster_account_ids_.size();
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_steam_broadcaster_account_ids() {
  steam_broadcaster_account_ids_.Clear();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_MatchDetails::steam_broadcaster_account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
  return steam_broadcaster_account_ids_.Get(index);
}
 void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_steam_broadcaster_account_ids(int index, ::google::protobuf::uint32 value) {
  steam_broadcaster_account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
}
 void CMsgDOTARealtimeGameStatsTerse_MatchDetails::add_steam_broadcaster_account_ids(::google::protobuf::uint32 value) {
  steam_broadcaster_account_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTARealtimeGameStatsTerse_MatchDetails::steam_broadcaster_account_ids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
  return steam_broadcaster_account_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTARealtimeGameStatsTerse_MatchDetails::mutable_steam_broadcaster_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
  return &steam_broadcaster_account_ids_;
}

// optional uint32 game_mode = 7;
bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_game_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_has_game_mode() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_MatchDetails::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_mode)
  return game_mode_;
}
 void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_mode)
}

// optional uint32 league_id = 8;
bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_league_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_has_league_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
 ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_MatchDetails::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.league_id)
  return league_id_;
}
 void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.league_id)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse_GraphData

// repeated int32 graph_gold = 1;
int CMsgDOTARealtimeGameStatsTerse_GraphData::graph_gold_size() const {
  return graph_gold_.size();
}
void CMsgDOTARealtimeGameStatsTerse_GraphData::clear_graph_gold() {
  graph_gold_.Clear();
}
 ::google::protobuf::int32 CMsgDOTARealtimeGameStatsTerse_GraphData::graph_gold(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
  return graph_gold_.Get(index);
}
 void CMsgDOTARealtimeGameStatsTerse_GraphData::set_graph_gold(int index, ::google::protobuf::int32 value) {
  graph_gold_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
}
 void CMsgDOTARealtimeGameStatsTerse_GraphData::add_graph_gold(::google::protobuf::int32 value) {
  graph_gold_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStatsTerse_GraphData::graph_gold() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
  return graph_gold_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStatsTerse_GraphData::mutable_graph_gold() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
  return &graph_gold_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse

// optional .CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
bool CMsgDOTARealtimeGameStatsTerse::has_match() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse::set_has_match() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStatsTerse::clear_has_match() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStatsTerse::clear_match() {
  if (match_ != NULL) match_->::CMsgDOTARealtimeGameStatsTerse_MatchDetails::Clear();
  clear_has_match();
}
const ::CMsgDOTARealtimeGameStatsTerse_MatchDetails& CMsgDOTARealtimeGameStatsTerse::match() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.match)
  return match_ != NULL ? *match_ : *default_instance_->match_;
}
::CMsgDOTARealtimeGameStatsTerse_MatchDetails* CMsgDOTARealtimeGameStatsTerse::mutable_match() {
  set_has_match();
  if (match_ == NULL) {
    match_ = new ::CMsgDOTARealtimeGameStatsTerse_MatchDetails;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.match)
  return match_;
}
::CMsgDOTARealtimeGameStatsTerse_MatchDetails* CMsgDOTARealtimeGameStatsTerse::release_match() {
  clear_has_match();
  ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* temp = match_;
  match_ = NULL;
  return temp;
}
void CMsgDOTARealtimeGameStatsTerse::set_allocated_match(::CMsgDOTARealtimeGameStatsTerse_MatchDetails* match) {
  delete match_;
  match_ = match;
  if (match) {
    set_has_match();
  } else {
    clear_has_match();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStatsTerse.match)
}

// repeated .CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
int CMsgDOTARealtimeGameStatsTerse::teams_size() const {
  return teams_.size();
}
void CMsgDOTARealtimeGameStatsTerse::clear_teams() {
  teams_.Clear();
}
const ::CMsgDOTARealtimeGameStatsTerse_TeamDetails& CMsgDOTARealtimeGameStatsTerse::teams(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.teams)
  return teams_.Get(index);
}
::CMsgDOTARealtimeGameStatsTerse_TeamDetails* CMsgDOTARealtimeGameStatsTerse::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.teams)
  return teams_.Mutable(index);
}
::CMsgDOTARealtimeGameStatsTerse_TeamDetails* CMsgDOTARealtimeGameStatsTerse::add_teams() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStatsTerse.teams)
  return teams_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_TeamDetails >*
CMsgDOTARealtimeGameStatsTerse::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStatsTerse.teams)
  return &teams_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_TeamDetails >&
CMsgDOTARealtimeGameStatsTerse::teams() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStatsTerse.teams)
  return teams_;
}

// repeated .CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
int CMsgDOTARealtimeGameStatsTerse::buildings_size() const {
  return buildings_.size();
}
void CMsgDOTARealtimeGameStatsTerse::clear_buildings() {
  buildings_.Clear();
}
const ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails& CMsgDOTARealtimeGameStatsTerse::buildings(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.buildings)
  return buildings_.Get(index);
}
::CMsgDOTARealtimeGameStatsTerse_BuildingDetails* CMsgDOTARealtimeGameStatsTerse::mutable_buildings(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.buildings)
  return buildings_.Mutable(index);
}
::CMsgDOTARealtimeGameStatsTerse_BuildingDetails* CMsgDOTARealtimeGameStatsTerse::add_buildings() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStatsTerse.buildings)
  return buildings_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails >*
CMsgDOTARealtimeGameStatsTerse::mutable_buildings() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStatsTerse.buildings)
  return &buildings_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails >&
CMsgDOTARealtimeGameStatsTerse::buildings() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStatsTerse.buildings)
  return buildings_;
}

// optional .CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
bool CMsgDOTARealtimeGameStatsTerse::has_graph_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse::set_has_graph_data() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTARealtimeGameStatsTerse::clear_has_graph_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTARealtimeGameStatsTerse::clear_graph_data() {
  if (graph_data_ != NULL) graph_data_->::CMsgDOTARealtimeGameStatsTerse_GraphData::Clear();
  clear_has_graph_data();
}
const ::CMsgDOTARealtimeGameStatsTerse_GraphData& CMsgDOTARealtimeGameStatsTerse::graph_data() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.graph_data)
  return graph_data_ != NULL ? *graph_data_ : *default_instance_->graph_data_;
}
::CMsgDOTARealtimeGameStatsTerse_GraphData* CMsgDOTARealtimeGameStatsTerse::mutable_graph_data() {
  set_has_graph_data();
  if (graph_data_ == NULL) {
    graph_data_ = new ::CMsgDOTARealtimeGameStatsTerse_GraphData;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.graph_data)
  return graph_data_;
}
::CMsgDOTARealtimeGameStatsTerse_GraphData* CMsgDOTARealtimeGameStatsTerse::release_graph_data() {
  clear_has_graph_data();
  ::CMsgDOTARealtimeGameStatsTerse_GraphData* temp = graph_data_;
  graph_data_ = NULL;
  return temp;
}
void CMsgDOTARealtimeGameStatsTerse::set_allocated_graph_data(::CMsgDOTARealtimeGameStatsTerse_GraphData* graph_data) {
  delete graph_data_;
  graph_data_ = graph_data;
  if (graph_data) {
    set_has_graph_data();
  } else {
    clear_has_graph_data();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStatsTerse.graph_data)
}

// optional bool delta_frame = 5;
bool CMsgDOTARealtimeGameStatsTerse::has_delta_frame() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse::set_has_delta_frame() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTARealtimeGameStatsTerse::clear_has_delta_frame() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTARealtimeGameStatsTerse::clear_delta_frame() {
  delta_frame_ = false;
  clear_has_delta_frame();
}
 bool CMsgDOTARealtimeGameStatsTerse::delta_frame() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.delta_frame)
  return delta_frame_;
}
 void CMsgDOTARealtimeGameStatsTerse::set_delta_frame(bool value) {
  set_has_delta_frame();
  delta_frame_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.delta_frame)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
