// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_gcmessages_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CSODOTAGameAccountClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTAGameAccountClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLobbyEventPoints_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLobbyEventPoints_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLobbyEventPoints_AccountPoints_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLobbyEventPoints_AccountPoints_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgBattleCupVictory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgBattleCupVictory_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLobbyBattleCupVictoryList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLobbyBattleCupVictoryList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTABroadcastNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTABroadcastNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProtoItemHeroStatue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProtoItemHeroStatue_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProtoItemTeamShowcase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProtoItemTeamShowcase_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMatchPlayerAbilityUpgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMatchPlayerAbilityUpgrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMatchAdditionalUnitInventory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMatchAdditionalUnitInventory_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMatchPlayerPermanentBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMatchPlayerPermanentBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMatchHeroSelectEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMatchHeroSelectEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAProcessFantasyScheduledEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAProcessFantasyScheduledEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAHasItemQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAHasItemQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAHasItemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAHasItemResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAHasItemDefsQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAHasItemDefsQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAHasItemDefsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAHasItemDefsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCGetPlayerCardItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCGetPlayerCardItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCGetPlayerCardItemInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCGetPlayerCardItemInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCFantasySetMatchLeague_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCFantasySetMatchLeague_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSODOTAMapLocationState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTAMapLocationState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLeagueAdminList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLeagueAdminList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCompendiumTimestampedData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCompendiumTimestampedData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCompendiumGameTimeline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCompendiumGameTimeline_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCompendiumGameList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCompendiumGameList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAdditionalEquipSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAdditionalEquipSlot_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTACombatLogEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTACombatLogEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAProfileCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAProfileCard_Slot_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_Trophy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAProfileCard_Slot_Trophy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_Stat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAProfileCard_Slot_Stat_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAProfileCard_Slot_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_Hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAProfileCard_Slot_Hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_Emoticon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAProfileCard_Slot_Emoticon_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAProfileCard_EStatID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CSODOTAPlayerChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTAPlayerChallenge_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSODOTAPlayerChallenge_EFlags_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientToGCRerollPlayerChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientToGCRerollPlayerChallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCRerollPlayerChallengeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCRerollPlayerChallengeResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgGCRerollPlayerChallengeResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCTopCustomGamesList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCTopCustomGamesList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_TeamDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_TeamDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_ItemDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_ItemDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_AbilityDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_AbilityDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_HeroToHeroStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_HeroToHeroStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_AbilityList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_AbilityList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_PlayerDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_PlayerDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_BuildingDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_BuildingDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_KillDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_KillDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_BroadcasterDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_BroadcasterDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_PickBanDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_PickBanDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_MatchDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_MatchDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_GraphData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_GraphData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_GraphData_LocationStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_GraphData_LocationStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStatsTerse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse_TeamDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStatsTerse_TeamDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse_PlayerDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStatsTerse_PlayerDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse_BuildingDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStatsTerse_BuildingDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse_MatchDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStatsTerse_MatchDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse_GraphData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARealtimeGameStatsTerse_GraphData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToClientMatchGroupsVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToClientMatchGroupsVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTASDOHeroStatsHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTASDOHeroStatsHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTASeasonRewards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTASeasonRewards_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTASeasonRewards_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTASeasonRewards_Reward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonRewards_ERewardType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTASeasonAchievements_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTASeasonAchievements_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTASeasonAchievements_Achievement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTASeasonAchievements_Achievement_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTASeasonPredictions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTASeasonPredictions_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTASeasonPredictions_Choice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTASeasonPredictions_Choice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTASeasonPredictions_Answers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTASeasonPredictions_Answers_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTASeasonPredictions_QueryKeyValues_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTASeasonPredictions_QueryKeyValues_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTASeasonPredictions_Prediction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTASeasonPredictions_Prediction_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTASeasonPredictions_InGamePrediction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTASeasonPredictions_InGamePrediction_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_ePredictionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_eAnswerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_eResolutionType_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_eRawValueType_t_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAMatch_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAMatch_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAMatch_Player_CustomGameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAMatch_Player_CustomGameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAMatch_BroadcasterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAMatch_BroadcasterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAMatch_BroadcasterChannel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAMatch_BroadcasterChannel_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAMatch_CustomGameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAMatch_CustomGameData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAMatch_ReplayState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgPlayerCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPlayerCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPlayerCard_StatModifier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPlayerCard_StatModifier_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyPlayerStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerMatchStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyPlayerMatchStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTABotDebugInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTABotDebugInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTABotDebugInfo_Bot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTABotDebugInfo_Bot_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTABotDebugInfo_Bot_Mode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTABotDebugInfo_Bot_Mode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTABotDebugInfo_Bot_Action_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTABotDebugInfo_Bot_Action_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ESpecialPingValue_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDOTAGCSessionNeed_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_TournamentEvents_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_COMBATLOG_TYPES_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto() {
  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dota_gcmessages_common.proto");
  GOOGLE_CHECK(file != NULL);
  CSODOTAGameAccountClient_descriptor_ = file->message_type(0);
  static const int CSODOTAGameAccountClient_offsets_[61] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, losses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, xp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, initial_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, leaver_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, secondary_leaver_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, low_priority_until_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, prevent_text_chat_until_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, prevent_voice_until_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, prevent_public_text_chat_until_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, last_abandoned_game_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, last_secondary_abandoned_game_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, leaver_penalty_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, completed_game_streak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, teaching_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, leadership_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, friendly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, forgiving_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, account_disabled_until_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, account_disabled_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, showcase_hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, match_disabled_until_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, match_disabled_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, partner_account_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, partner_account_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, shutdownlawterminatetimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, low_priority_games_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, competitive_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, calibration_games_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, solo_competitive_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, solo_calibration_games_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, general_seasonal_ranked_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, general_seasonal_ranked_calibration_games_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, general_seasonal_ranked_games_played_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, general_seasonal_ranked_rank_peak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, general_seasonal_rank_transferred_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, solo_seasonal_ranked_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, solo_seasonal_ranked_calibration_games_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, solo_seasonal_ranked_games_played_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, solo_seasonal_ranked_rank_peak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, solo_seasonal_rank_transferred_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, recruitment_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, has_new_notifications_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, is_league_admin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, casual_games_played_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, solo_competitive_games_played_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, party_competitive_games_played_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, casual_1v1_games_played_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, competitive_team_games_played_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, curr_all_hero_challenge_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, play_time_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, account_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, play_time_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, player_behavior_seq_num_last_report_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, player_behavior_score_last_report_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, player_behavior_report_old_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, tourney_skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, tourney_recent_participation_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, favorite_team_),
  };
  CSODOTAGameAccountClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSODOTAGameAccountClient_descriptor_,
      CSODOTAGameAccountClient::default_instance_,
      CSODOTAGameAccountClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSODOTAGameAccountClient));
  CMsgLobbyEventPoints_descriptor_ = file->message_type(1);
  static const int CMsgLobbyEventPoints_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints, account_points_),
  };
  CMsgLobbyEventPoints_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLobbyEventPoints_descriptor_,
      CMsgLobbyEventPoints::default_instance_,
      CMsgLobbyEventPoints_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLobbyEventPoints));
  CMsgLobbyEventPoints_AccountPoints_descriptor_ = CMsgLobbyEventPoints_descriptor_->nested_type(0);
  static const int CMsgLobbyEventPoints_AccountPoints_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, normal_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, premium_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, owned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, favorite_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, favorite_team_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, points_held_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, premium_points_held_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, favorite_team_foil_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, wager_tokens_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, wager_tokens_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, active_effects_mask_),
  };
  CMsgLobbyEventPoints_AccountPoints_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLobbyEventPoints_AccountPoints_descriptor_,
      CMsgLobbyEventPoints_AccountPoints::default_instance_,
      CMsgLobbyEventPoints_AccountPoints_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLobbyEventPoints_AccountPoints));
  CMsgBattleCupVictory_descriptor_ = file->message_type(2);
  static const int CMsgBattleCupVictory_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBattleCupVictory, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBattleCupVictory, win_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBattleCupVictory, valid_until_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBattleCupVictory, skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBattleCupVictory, tournament_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBattleCupVictory, division_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBattleCupVictory, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBattleCupVictory, streak_),
  };
  CMsgBattleCupVictory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgBattleCupVictory_descriptor_,
      CMsgBattleCupVictory::default_instance_,
      CMsgBattleCupVictory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBattleCupVictory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBattleCupVictory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgBattleCupVictory));
  CMsgLobbyBattleCupVictoryList_descriptor_ = file->message_type(3);
  static const int CMsgLobbyBattleCupVictoryList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyBattleCupVictoryList, winners_),
  };
  CMsgLobbyBattleCupVictoryList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLobbyBattleCupVictoryList_descriptor_,
      CMsgLobbyBattleCupVictoryList::default_instance_,
      CMsgLobbyBattleCupVictoryList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyBattleCupVictoryList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyBattleCupVictoryList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLobbyBattleCupVictoryList));
  CMsgDOTABroadcastNotification_descriptor_ = file->message_type(4);
  static const int CMsgDOTABroadcastNotification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABroadcastNotification, message_),
  };
  CMsgDOTABroadcastNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTABroadcastNotification_descriptor_,
      CMsgDOTABroadcastNotification::default_instance_,
      CMsgDOTABroadcastNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABroadcastNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABroadcastNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTABroadcastNotification));
  CProtoItemHeroStatue_descriptor_ = file->message_type(5);
  static const int CProtoItemHeroStatue_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, status_effect_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, sequence_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, cycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, wearable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, inscription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, tournament_drop_),
  };
  CProtoItemHeroStatue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProtoItemHeroStatue_descriptor_,
      CProtoItemHeroStatue::default_instance_,
      CProtoItemHeroStatue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProtoItemHeroStatue));
  CProtoItemTeamShowcase_descriptor_ = file->message_type(6);
  static const int CProtoItemTeamShowcase_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemTeamShowcase, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemTeamShowcase, status_effect_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemTeamShowcase, sequence_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemTeamShowcase, cycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemTeamShowcase, wearable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemTeamShowcase, inscription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemTeamShowcase, style_),
  };
  CProtoItemTeamShowcase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProtoItemTeamShowcase_descriptor_,
      CProtoItemTeamShowcase::default_instance_,
      CProtoItemTeamShowcase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemTeamShowcase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemTeamShowcase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProtoItemTeamShowcase));
  CMatchPlayerAbilityUpgrade_descriptor_ = file->message_type(7);
  static const int CMatchPlayerAbilityUpgrade_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchPlayerAbilityUpgrade, ability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchPlayerAbilityUpgrade, time_),
  };
  CMatchPlayerAbilityUpgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMatchPlayerAbilityUpgrade_descriptor_,
      CMatchPlayerAbilityUpgrade::default_instance_,
      CMatchPlayerAbilityUpgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchPlayerAbilityUpgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchPlayerAbilityUpgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMatchPlayerAbilityUpgrade));
  CMatchAdditionalUnitInventory_descriptor_ = file->message_type(8);
  static const int CMatchAdditionalUnitInventory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchAdditionalUnitInventory, unit_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchAdditionalUnitInventory, items_),
  };
  CMatchAdditionalUnitInventory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMatchAdditionalUnitInventory_descriptor_,
      CMatchAdditionalUnitInventory::default_instance_,
      CMatchAdditionalUnitInventory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchAdditionalUnitInventory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchAdditionalUnitInventory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMatchAdditionalUnitInventory));
  CMatchPlayerPermanentBuff_descriptor_ = file->message_type(9);
  static const int CMatchPlayerPermanentBuff_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchPlayerPermanentBuff, permanent_buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchPlayerPermanentBuff, stack_count_),
  };
  CMatchPlayerPermanentBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMatchPlayerPermanentBuff_descriptor_,
      CMatchPlayerPermanentBuff::default_instance_,
      CMatchPlayerPermanentBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchPlayerPermanentBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchPlayerPermanentBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMatchPlayerPermanentBuff));
  CMatchHeroSelectEvent_descriptor_ = file->message_type(10);
  static const int CMatchHeroSelectEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchHeroSelectEvent, is_pick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchHeroSelectEvent, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchHeroSelectEvent, hero_id_),
  };
  CMatchHeroSelectEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMatchHeroSelectEvent_descriptor_,
      CMatchHeroSelectEvent::default_instance_,
      CMatchHeroSelectEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchHeroSelectEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchHeroSelectEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMatchHeroSelectEvent));
  CMsgDOTAProcessFantasyScheduledEvent_descriptor_ = file->message_type(11);
  static const int CMsgDOTAProcessFantasyScheduledEvent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, reference_data_),
  };
  CMsgDOTAProcessFantasyScheduledEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAProcessFantasyScheduledEvent_descriptor_,
      CMsgDOTAProcessFantasyScheduledEvent::default_instance_,
      CMsgDOTAProcessFantasyScheduledEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAProcessFantasyScheduledEvent));
  CMsgDOTAHasItemQuery_descriptor_ = file->message_type(12);
  static const int CMsgDOTAHasItemQuery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemQuery, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemQuery, item_id_),
  };
  CMsgDOTAHasItemQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAHasItemQuery_descriptor_,
      CMsgDOTAHasItemQuery::default_instance_,
      CMsgDOTAHasItemQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAHasItemQuery));
  CMsgDOTAHasItemResponse_descriptor_ = file->message_type(13);
  static const int CMsgDOTAHasItemResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemResponse, has_item_),
  };
  CMsgDOTAHasItemResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAHasItemResponse_descriptor_,
      CMsgDOTAHasItemResponse::default_instance_,
      CMsgDOTAHasItemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAHasItemResponse));
  CMsgDOTAHasItemDefsQuery_descriptor_ = file->message_type(14);
  static const int CMsgDOTAHasItemDefsQuery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemDefsQuery, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemDefsQuery, itemdef_ids_),
  };
  CMsgDOTAHasItemDefsQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAHasItemDefsQuery_descriptor_,
      CMsgDOTAHasItemDefsQuery::default_instance_,
      CMsgDOTAHasItemDefsQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemDefsQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemDefsQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAHasItemDefsQuery));
  CMsgDOTAHasItemDefsResponse_descriptor_ = file->message_type(15);
  static const int CMsgDOTAHasItemDefsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemDefsResponse, has_items_),
  };
  CMsgDOTAHasItemDefsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAHasItemDefsResponse_descriptor_,
      CMsgDOTAHasItemDefsResponse::default_instance_,
      CMsgDOTAHasItemDefsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemDefsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemDefsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAHasItemDefsResponse));
  CMsgGCGetPlayerCardItemInfo_descriptor_ = file->message_type(16);
  static const int CMsgGCGetPlayerCardItemInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfo, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfo, player_card_item_ids_),
  };
  CMsgGCGetPlayerCardItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCGetPlayerCardItemInfo_descriptor_,
      CMsgGCGetPlayerCardItemInfo::default_instance_,
      CMsgGCGetPlayerCardItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCGetPlayerCardItemInfo));
  CMsgGCGetPlayerCardItemInfoResponse_descriptor_ = file->message_type(17);
  static const int CMsgGCGetPlayerCardItemInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfoResponse, player_card_infos_),
  };
  CMsgGCGetPlayerCardItemInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCGetPlayerCardItemInfoResponse_descriptor_,
      CMsgGCGetPlayerCardItemInfoResponse::default_instance_,
      CMsgGCGetPlayerCardItemInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCGetPlayerCardItemInfoResponse));
  CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_descriptor_ = CMsgGCGetPlayerCardItemInfoResponse_descriptor_->nested_type(0);
  static const int CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo, player_card_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo, packed_bonuses_),
  };
  CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_descriptor_,
      CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::default_instance_,
      CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo));
  CMsgGCToGCFantasySetMatchLeague_descriptor_ = file->message_type(18);
  static const int CMsgGCToGCFantasySetMatchLeague_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCFantasySetMatchLeague, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCFantasySetMatchLeague, league_id_),
  };
  CMsgGCToGCFantasySetMatchLeague_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToGCFantasySetMatchLeague_descriptor_,
      CMsgGCToGCFantasySetMatchLeague::default_instance_,
      CMsgGCToGCFantasySetMatchLeague_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCFantasySetMatchLeague, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCFantasySetMatchLeague, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToGCFantasySetMatchLeague));
  CSODOTAMapLocationState_descriptor_ = file->message_type(19);
  static const int CSODOTAMapLocationState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAMapLocationState, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAMapLocationState, location_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAMapLocationState, completed_),
  };
  CSODOTAMapLocationState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSODOTAMapLocationState_descriptor_,
      CSODOTAMapLocationState::default_instance_,
      CSODOTAMapLocationState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAMapLocationState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAMapLocationState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSODOTAMapLocationState));
  CMsgLeagueAdminList_descriptor_ = file->message_type(20);
  static const int CMsgLeagueAdminList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeagueAdminList, account_ids_),
  };
  CMsgLeagueAdminList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLeagueAdminList_descriptor_,
      CMsgLeagueAdminList::default_instance_,
      CMsgLeagueAdminList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeagueAdminList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeagueAdminList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLeagueAdminList));
  CCompendiumTimestampedData_descriptor_ = file->message_type(21);
  static const int CCompendiumTimestampedData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumTimestampedData, game_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumTimestampedData, gpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumTimestampedData, xpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumTimestampedData, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumTimestampedData, deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumTimestampedData, item_purchases_),
  };
  CCompendiumTimestampedData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCompendiumTimestampedData_descriptor_,
      CCompendiumTimestampedData::default_instance_,
      CCompendiumTimestampedData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumTimestampedData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumTimestampedData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCompendiumTimestampedData));
  CCompendiumGameTimeline_descriptor_ = file->message_type(22);
  static const int CCompendiumGameTimeline_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumGameTimeline, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumGameTimeline, tags_),
  };
  CCompendiumGameTimeline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCompendiumGameTimeline_descriptor_,
      CCompendiumGameTimeline::default_instance_,
      CCompendiumGameTimeline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumGameTimeline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumGameTimeline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCompendiumGameTimeline));
  CCompendiumGameList_descriptor_ = file->message_type(23);
  static const int CCompendiumGameList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumGameList, games_),
  };
  CCompendiumGameList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCompendiumGameList_descriptor_,
      CCompendiumGameList::default_instance_,
      CCompendiumGameList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumGameList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumGameList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCompendiumGameList));
  CAdditionalEquipSlot_descriptor_ = file->message_type(24);
  static const int CAdditionalEquipSlot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlot, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlot, slot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlot, def_index_),
  };
  CAdditionalEquipSlot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAdditionalEquipSlot_descriptor_,
      CAdditionalEquipSlot::default_instance_,
      CAdditionalEquipSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAdditionalEquipSlot));
  CMsgDOTACombatLogEntry_descriptor_ = file->message_type(25);
  static const int CMsgDOTACombatLogEntry_offsets_[62] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, target_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, target_source_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, attacker_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, damage_source_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, inflictor_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_attacker_illusion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_attacker_hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_target_illusion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_target_hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_visible_radiant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_visible_dire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, stun_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, slow_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_ability_toggle_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_ability_toggle_off_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, ability_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, location_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, location_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, gold_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, timestamp_raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, modifier_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, xp_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, last_hits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, attacker_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, target_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, obs_wards_placed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, assist_player0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, assist_player1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, assist_player2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, assist_player3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, stack_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, hidden_modifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_target_building_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, neutral_camp_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, rune_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, assist_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_heal_save_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_ultimate_ability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, attacker_hero_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, target_hero_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, xpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, gpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, event_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, target_is_self_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, damage_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, invisibility_modifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, damage_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, networth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, building_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, modifier_elapsed_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, silence_modifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, heal_from_lifesteal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, modifier_purged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, spell_evaded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, motion_controller_modifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, long_range_kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, modifier_purge_ability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, modifier_purge_npc_),
  };
  CMsgDOTACombatLogEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTACombatLogEntry_descriptor_,
      CMsgDOTACombatLogEntry::default_instance_,
      CMsgDOTACombatLogEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTACombatLogEntry));
  CMsgDOTAProfileCard_descriptor_ = file->message_type(26);
  static const int CMsgDOTAProfileCard_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard, background_def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard, slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard, badge_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard, event_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard, recent_battle_cup_victory_),
  };
  CMsgDOTAProfileCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAProfileCard_descriptor_,
      CMsgDOTAProfileCard::default_instance_,
      CMsgDOTAProfileCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAProfileCard));
  CMsgDOTAProfileCard_Slot_descriptor_ = CMsgDOTAProfileCard_descriptor_->nested_type(0);
  static const int CMsgDOTAProfileCard_Slot_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, slot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, trophy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, emoticon_),
  };
  CMsgDOTAProfileCard_Slot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAProfileCard_Slot_descriptor_,
      CMsgDOTAProfileCard_Slot::default_instance_,
      CMsgDOTAProfileCard_Slot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAProfileCard_Slot));
  CMsgDOTAProfileCard_Slot_Trophy_descriptor_ = CMsgDOTAProfileCard_Slot_descriptor_->nested_type(0);
  static const int CMsgDOTAProfileCard_Slot_Trophy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Trophy, trophy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Trophy, trophy_score_),
  };
  CMsgDOTAProfileCard_Slot_Trophy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAProfileCard_Slot_Trophy_descriptor_,
      CMsgDOTAProfileCard_Slot_Trophy::default_instance_,
      CMsgDOTAProfileCard_Slot_Trophy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Trophy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Trophy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAProfileCard_Slot_Trophy));
  CMsgDOTAProfileCard_Slot_Stat_descriptor_ = CMsgDOTAProfileCard_Slot_descriptor_->nested_type(1);
  static const int CMsgDOTAProfileCard_Slot_Stat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Stat, stat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Stat, stat_score_),
  };
  CMsgDOTAProfileCard_Slot_Stat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAProfileCard_Slot_Stat_descriptor_,
      CMsgDOTAProfileCard_Slot_Stat::default_instance_,
      CMsgDOTAProfileCard_Slot_Stat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Stat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Stat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAProfileCard_Slot_Stat));
  CMsgDOTAProfileCard_Slot_Item_descriptor_ = CMsgDOTAProfileCard_Slot_descriptor_->nested_type(2);
  static const int CMsgDOTAProfileCard_Slot_Item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Item, serialized_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Item, item_id_),
  };
  CMsgDOTAProfileCard_Slot_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAProfileCard_Slot_Item_descriptor_,
      CMsgDOTAProfileCard_Slot_Item::default_instance_,
      CMsgDOTAProfileCard_Slot_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAProfileCard_Slot_Item));
  CMsgDOTAProfileCard_Slot_Hero_descriptor_ = CMsgDOTAProfileCard_Slot_descriptor_->nested_type(3);
  static const int CMsgDOTAProfileCard_Slot_Hero_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Hero, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Hero, hero_wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Hero, hero_losses_),
  };
  CMsgDOTAProfileCard_Slot_Hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAProfileCard_Slot_Hero_descriptor_,
      CMsgDOTAProfileCard_Slot_Hero::default_instance_,
      CMsgDOTAProfileCard_Slot_Hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAProfileCard_Slot_Hero));
  CMsgDOTAProfileCard_Slot_Emoticon_descriptor_ = CMsgDOTAProfileCard_Slot_descriptor_->nested_type(4);
  static const int CMsgDOTAProfileCard_Slot_Emoticon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Emoticon, emoticon_id_),
  };
  CMsgDOTAProfileCard_Slot_Emoticon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAProfileCard_Slot_Emoticon_descriptor_,
      CMsgDOTAProfileCard_Slot_Emoticon::default_instance_,
      CMsgDOTAProfileCard_Slot_Emoticon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Emoticon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Emoticon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAProfileCard_Slot_Emoticon));
  CMsgDOTAProfileCard_EStatID_descriptor_ = CMsgDOTAProfileCard_descriptor_->enum_type(0);
  CSODOTAPlayerChallenge_descriptor_ = file->message_type(27);
  static const int CSODOTAPlayerChallenge_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, slot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, challenge_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, int_param_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, int_param_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, created_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, completed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, sequence_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, challenge_tier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, attempts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, complete_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, quest_rank_),
  };
  CSODOTAPlayerChallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSODOTAPlayerChallenge_descriptor_,
      CSODOTAPlayerChallenge::default_instance_,
      CSODOTAPlayerChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSODOTAPlayerChallenge));
  CSODOTAPlayerChallenge_EFlags_descriptor_ = CSODOTAPlayerChallenge_descriptor_->enum_type(0);
  CMsgClientToGCRerollPlayerChallenge_descriptor_ = file->message_type(28);
  static const int CMsgClientToGCRerollPlayerChallenge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCRerollPlayerChallenge, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCRerollPlayerChallenge, sequence_id_),
  };
  CMsgClientToGCRerollPlayerChallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientToGCRerollPlayerChallenge_descriptor_,
      CMsgClientToGCRerollPlayerChallenge::default_instance_,
      CMsgClientToGCRerollPlayerChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCRerollPlayerChallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCRerollPlayerChallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientToGCRerollPlayerChallenge));
  CMsgGCRerollPlayerChallengeResponse_descriptor_ = file->message_type(29);
  static const int CMsgGCRerollPlayerChallengeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRerollPlayerChallengeResponse, result_),
  };
  CMsgGCRerollPlayerChallengeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCRerollPlayerChallengeResponse_descriptor_,
      CMsgGCRerollPlayerChallengeResponse::default_instance_,
      CMsgGCRerollPlayerChallengeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRerollPlayerChallengeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRerollPlayerChallengeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCRerollPlayerChallengeResponse));
  CMsgGCRerollPlayerChallengeResponse_EResult_descriptor_ = CMsgGCRerollPlayerChallengeResponse_descriptor_->enum_type(0);
  CMsgGCTopCustomGamesList_descriptor_ = file->message_type(30);
  static const int CMsgGCTopCustomGamesList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCTopCustomGamesList, top_custom_games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCTopCustomGamesList, game_of_the_day_),
  };
  CMsgGCTopCustomGamesList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCTopCustomGamesList_descriptor_,
      CMsgGCTopCustomGamesList::default_instance_,
      CMsgGCTopCustomGamesList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCTopCustomGamesList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCTopCustomGamesList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCTopCustomGamesList));
  CMsgDOTARealtimeGameStats_descriptor_ = file->message_type(31);
  static const int CMsgDOTARealtimeGameStats_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats, match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats, teams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats, buildings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats, graph_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats, delta_frame_),
  };
  CMsgDOTARealtimeGameStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_descriptor_,
      CMsgDOTARealtimeGameStats::default_instance_,
      CMsgDOTARealtimeGameStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARealtimeGameStats));
  CMsgDOTARealtimeGameStats_TeamDetails_descriptor_ = CMsgDOTARealtimeGameStats_descriptor_->nested_type(0);
  static const int CMsgDOTARealtimeGameStats_TeamDetails_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, team_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, team_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, only_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, cheers_),
  };
  CMsgDOTARealtimeGameStats_TeamDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_TeamDetails_descriptor_,
      CMsgDOTARealtimeGameStats_TeamDetails::default_instance_,
      CMsgDOTARealtimeGameStats_TeamDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARealtimeGameStats_TeamDetails));
  CMsgDOTARealtimeGameStats_ItemDetails_descriptor_ = CMsgDOTARealtimeGameStats_descriptor_->nested_type(1);
  static const int CMsgDOTARealtimeGameStats_ItemDetails_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_ItemDetails, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_ItemDetails, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_ItemDetails, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_ItemDetails, sold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_ItemDetails, stackcount_),
  };
  CMsgDOTARealtimeGameStats_ItemDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_ItemDetails_descriptor_,
      CMsgDOTARealtimeGameStats_ItemDetails::default_instance_,
      CMsgDOTARealtimeGameStats_ItemDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_ItemDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_ItemDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARealtimeGameStats_ItemDetails));
  CMsgDOTARealtimeGameStats_AbilityDetails_descriptor_ = CMsgDOTARealtimeGameStats_descriptor_->nested_type(2);
  static const int CMsgDOTARealtimeGameStats_AbilityDetails_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityDetails, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityDetails, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityDetails, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityDetails, cooldown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityDetails, cooldown_max_),
  };
  CMsgDOTARealtimeGameStats_AbilityDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_AbilityDetails_descriptor_,
      CMsgDOTARealtimeGameStats_AbilityDetails::default_instance_,
      CMsgDOTARealtimeGameStats_AbilityDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARealtimeGameStats_AbilityDetails));
  CMsgDOTARealtimeGameStats_HeroToHeroStats_descriptor_ = CMsgDOTARealtimeGameStats_descriptor_->nested_type(3);
  static const int CMsgDOTARealtimeGameStats_HeroToHeroStats_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_HeroToHeroStats, victimid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_HeroToHeroStats, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_HeroToHeroStats, assists_),
  };
  CMsgDOTARealtimeGameStats_HeroToHeroStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_HeroToHeroStats_descriptor_,
      CMsgDOTARealtimeGameStats_HeroToHeroStats::default_instance_,
      CMsgDOTARealtimeGameStats_HeroToHeroStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_HeroToHeroStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_HeroToHeroStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARealtimeGameStats_HeroToHeroStats));
  CMsgDOTARealtimeGameStats_AbilityList_descriptor_ = CMsgDOTARealtimeGameStats_descriptor_->nested_type(4);
  static const int CMsgDOTARealtimeGameStats_AbilityList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityList, id_),
  };
  CMsgDOTARealtimeGameStats_AbilityList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_AbilityList_descriptor_,
      CMsgDOTARealtimeGameStats_AbilityList::default_instance_,
      CMsgDOTARealtimeGameStats_AbilityList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARealtimeGameStats_AbilityList));
  CMsgDOTARealtimeGameStats_PlayerDetails_descriptor_ = CMsgDOTARealtimeGameStats_descriptor_->nested_type(5);
  static const int CMsgDOTARealtimeGameStats_PlayerDetails_offsets_[49] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, healthpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, maxhealthpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, healthregenrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, manapoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, maxmanapoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, manaregenrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, base_strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, base_agility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, base_intelligence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, base_armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, base_movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, base_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, agility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, intelligence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, hero_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, tower_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, abilities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, kill_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, death_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, assists_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, denies_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, lh_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, hero_healing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, gold_per_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, xp_per_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, net_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, respawn_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, ultimate_cooldown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, has_buyback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, stashitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, itemshoppinglist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, levelpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, hero_to_hero_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, has_ultimate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, has_ultimate_mana_),
  };
  CMsgDOTARealtimeGameStats_PlayerDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_PlayerDetails_descriptor_,
      CMsgDOTARealtimeGameStats_PlayerDetails::default_instance_,
      CMsgDOTARealtimeGameStats_PlayerDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARealtimeGameStats_PlayerDetails));
  CMsgDOTARealtimeGameStats_BuildingDetails_descriptor_ = CMsgDOTARealtimeGameStats_descriptor_->nested_type(6);
  static const int CMsgDOTARealtimeGameStats_BuildingDetails_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, tier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, destroyed_),
  };
  CMsgDOTARealtimeGameStats_BuildingDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_BuildingDetails_descriptor_,
      CMsgDOTARealtimeGameStats_BuildingDetails::default_instance_,
      CMsgDOTARealtimeGameStats_BuildingDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARealtimeGameStats_BuildingDetails));
  CMsgDOTARealtimeGameStats_KillDetails_descriptor_ = CMsgDOTARealtimeGameStats_descriptor_->nested_type(7);
  static const int CMsgDOTARealtimeGameStats_KillDetails_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_KillDetails, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_KillDetails, death_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_KillDetails, killer_player_id_),
  };
  CMsgDOTARealtimeGameStats_KillDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_KillDetails_descriptor_,
      CMsgDOTARealtimeGameStats_KillDetails::default_instance_,
      CMsgDOTARealtimeGameStats_KillDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_KillDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_KillDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARealtimeGameStats_KillDetails));
  CMsgDOTARealtimeGameStats_BroadcasterDetails_descriptor_ = CMsgDOTARealtimeGameStats_descriptor_->nested_type(8);
  static const int CMsgDOTARealtimeGameStats_BroadcasterDetails_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BroadcasterDetails, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BroadcasterDetails, selected_hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BroadcasterDetails, selected_graph_),
  };
  CMsgDOTARealtimeGameStats_BroadcasterDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_BroadcasterDetails_descriptor_,
      CMsgDOTARealtimeGameStats_BroadcasterDetails::default_instance_,
      CMsgDOTARealtimeGameStats_BroadcasterDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BroadcasterDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BroadcasterDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARealtimeGameStats_BroadcasterDetails));
  CMsgDOTARealtimeGameStats_PickBanDetails_descriptor_ = CMsgDOTARealtimeGameStats_descriptor_->nested_type(9);
  static const int CMsgDOTARealtimeGameStats_PickBanDetails_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PickBanDetails, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PickBanDetails, team_),
  };
  CMsgDOTARealtimeGameStats_PickBanDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_PickBanDetails_descriptor_,
      CMsgDOTARealtimeGameStats_PickBanDetails::default_instance_,
      CMsgDOTARealtimeGameStats_PickBanDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PickBanDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PickBanDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARealtimeGameStats_PickBanDetails));
  CMsgDOTARealtimeGameStats_MatchDetails_descriptor_ = CMsgDOTARealtimeGameStats_descriptor_->nested_type(10);
  static const int CMsgDOTARealtimeGameStats_MatchDetails_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, server_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, time_of_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, is_nightstalker_night_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, game_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, teamid_radiant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, teamid_dire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, picks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, bans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, broadcasters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, single_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, cheers_peak_),
  };
  CMsgDOTARealtimeGameStats_MatchDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_MatchDetails_descriptor_,
      CMsgDOTARealtimeGameStats_MatchDetails::default_instance_,
      CMsgDOTARealtimeGameStats_MatchDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARealtimeGameStats_MatchDetails));
  CMsgDOTARealtimeGameStats_GraphData_descriptor_ = CMsgDOTARealtimeGameStats_descriptor_->nested_type(11);
  static const int CMsgDOTARealtimeGameStats_GraphData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData, graph_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData, graph_xp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData, graph_kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData, graph_tower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData, graph_rax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData, team_loc_stats_),
  };
  CMsgDOTARealtimeGameStats_GraphData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_GraphData_descriptor_,
      CMsgDOTARealtimeGameStats_GraphData::default_instance_,
      CMsgDOTARealtimeGameStats_GraphData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARealtimeGameStats_GraphData));
  CMsgDOTARealtimeGameStats_GraphData_LocationStats_descriptor_ = CMsgDOTARealtimeGameStats_GraphData_descriptor_->nested_type(0);
  static const int CMsgDOTARealtimeGameStats_GraphData_LocationStats_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData_LocationStats, stats_),
  };
  CMsgDOTARealtimeGameStats_GraphData_LocationStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_GraphData_LocationStats_descriptor_,
      CMsgDOTARealtimeGameStats_GraphData_LocationStats::default_instance_,
      CMsgDOTARealtimeGameStats_GraphData_LocationStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData_LocationStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData_LocationStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARealtimeGameStats_GraphData_LocationStats));
  CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_descriptor_ = CMsgDOTARealtimeGameStats_GraphData_descriptor_->nested_type(1);
  static const int CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats, loc_stats_),
  };
  CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_descriptor_,
      CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::default_instance_,
      CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats));
  CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor_ = CMsgDOTARealtimeGameStats_GraphData_descriptor_->enum_type(0);
  CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor_ = CMsgDOTARealtimeGameStats_GraphData_descriptor_->enum_type(1);
  CMsgDOTARealtimeGameStatsTerse_descriptor_ = file->message_type(32);
  static const int CMsgDOTARealtimeGameStatsTerse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse, match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse, teams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse, buildings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse, graph_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse, delta_frame_),
  };
  CMsgDOTARealtimeGameStatsTerse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARealtimeGameStatsTerse_descriptor_,
      CMsgDOTARealtimeGameStatsTerse::default_instance_,
      CMsgDOTARealtimeGameStatsTerse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARealtimeGameStatsTerse));
  CMsgDOTARealtimeGameStatsTerse_TeamDetails_descriptor_ = CMsgDOTARealtimeGameStatsTerse_descriptor_->nested_type(0);
  static const int CMsgDOTARealtimeGameStatsTerse_TeamDetails_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_TeamDetails, team_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_TeamDetails, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_TeamDetails, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_TeamDetails, team_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_TeamDetails, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_TeamDetails, players_),
  };
  CMsgDOTARealtimeGameStatsTerse_TeamDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARealtimeGameStatsTerse_TeamDetails_descriptor_,
      CMsgDOTARealtimeGameStatsTerse_TeamDetails::default_instance_,
      CMsgDOTARealtimeGameStatsTerse_TeamDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_TeamDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_TeamDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARealtimeGameStatsTerse_TeamDetails));
  CMsgDOTARealtimeGameStatsTerse_PlayerDetails_descriptor_ = CMsgDOTARealtimeGameStatsTerse_descriptor_->nested_type(1);
  static const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, kill_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, death_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, assists_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, denies_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, lh_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, y_),
  };
  CMsgDOTARealtimeGameStatsTerse_PlayerDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARealtimeGameStatsTerse_PlayerDetails_descriptor_,
      CMsgDOTARealtimeGameStatsTerse_PlayerDetails::default_instance_,
      CMsgDOTARealtimeGameStatsTerse_PlayerDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARealtimeGameStatsTerse_PlayerDetails));
  CMsgDOTARealtimeGameStatsTerse_BuildingDetails_descriptor_ = CMsgDOTARealtimeGameStatsTerse_descriptor_->nested_type(2);
  static const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, tier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, destroyed_),
  };
  CMsgDOTARealtimeGameStatsTerse_BuildingDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARealtimeGameStatsTerse_BuildingDetails_descriptor_,
      CMsgDOTARealtimeGameStatsTerse_BuildingDetails::default_instance_,
      CMsgDOTARealtimeGameStatsTerse_BuildingDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARealtimeGameStatsTerse_BuildingDetails));
  CMsgDOTARealtimeGameStatsTerse_MatchDetails_descriptor_ = CMsgDOTARealtimeGameStatsTerse_descriptor_->nested_type(3);
  static const int CMsgDOTARealtimeGameStatsTerse_MatchDetails_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, server_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, game_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, steam_broadcaster_account_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, league_id_),
  };
  CMsgDOTARealtimeGameStatsTerse_MatchDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARealtimeGameStatsTerse_MatchDetails_descriptor_,
      CMsgDOTARealtimeGameStatsTerse_MatchDetails::default_instance_,
      CMsgDOTARealtimeGameStatsTerse_MatchDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARealtimeGameStatsTerse_MatchDetails));
  CMsgDOTARealtimeGameStatsTerse_GraphData_descriptor_ = CMsgDOTARealtimeGameStatsTerse_descriptor_->nested_type(4);
  static const int CMsgDOTARealtimeGameStatsTerse_GraphData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_GraphData, graph_gold_),
  };
  CMsgDOTARealtimeGameStatsTerse_GraphData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARealtimeGameStatsTerse_GraphData_descriptor_,
      CMsgDOTARealtimeGameStatsTerse_GraphData::default_instance_,
      CMsgDOTARealtimeGameStatsTerse_GraphData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_GraphData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_GraphData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARealtimeGameStatsTerse_GraphData));
  CMsgGCToClientMatchGroupsVersion_descriptor_ = file->message_type(33);
  static const int CMsgGCToClientMatchGroupsVersion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientMatchGroupsVersion, matchgroups_version_),
  };
  CMsgGCToClientMatchGroupsVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToClientMatchGroupsVersion_descriptor_,
      CMsgGCToClientMatchGroupsVersion::default_instance_,
      CMsgGCToClientMatchGroupsVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientMatchGroupsVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientMatchGroupsVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToClientMatchGroupsVersion));
  CMsgDOTASDOHeroStatsHistory_descriptor_ = file->message_type(34);
  static const int CMsgDOTASDOHeroStatsHistory_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASDOHeroStatsHistory, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASDOHeroStatsHistory, game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASDOHeroStatsHistory, lobby_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASDOHeroStatsHistory, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASDOHeroStatsHistory, won_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASDOHeroStatsHistory, gpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASDOHeroStatsHistory, xpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASDOHeroStatsHistory, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASDOHeroStatsHistory, deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASDOHeroStatsHistory, assists_),
  };
  CMsgDOTASDOHeroStatsHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTASDOHeroStatsHistory_descriptor_,
      CMsgDOTASDOHeroStatsHistory::default_instance_,
      CMsgDOTASDOHeroStatsHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASDOHeroStatsHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASDOHeroStatsHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTASDOHeroStatsHistory));
  CMsgDOTASeasonRewards_descriptor_ = file->message_type(35);
  static const int CMsgDOTASeasonRewards_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards, rewards_),
  };
  CMsgDOTASeasonRewards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTASeasonRewards_descriptor_,
      CMsgDOTASeasonRewards::default_instance_,
      CMsgDOTASeasonRewards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTASeasonRewards));
  CMsgDOTASeasonRewards_Reward_descriptor_ = CMsgDOTASeasonRewards_descriptor_->nested_type(0);
  static const int CMsgDOTASeasonRewards_Reward_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards_Reward, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards_Reward, itemdef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards_Reward, importance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards_Reward, base_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards_Reward, repeat_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards_Reward, reward_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards_Reward, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards_Reward, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards_Reward, effect_index_),
  };
  CMsgDOTASeasonRewards_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTASeasonRewards_Reward_descriptor_,
      CMsgDOTASeasonRewards_Reward::default_instance_,
      CMsgDOTASeasonRewards_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTASeasonRewards_Reward));
  CMsgDOTASeasonRewards_ERewardType_descriptor_ = CMsgDOTASeasonRewards_descriptor_->enum_type(0);
  CMsgDOTASeasonAchievements_descriptor_ = file->message_type(36);
  static const int CMsgDOTASeasonAchievements_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements, achievements_),
  };
  CMsgDOTASeasonAchievements_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTASeasonAchievements_descriptor_,
      CMsgDOTASeasonAchievements::default_instance_,
      CMsgDOTASeasonAchievements_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTASeasonAchievements));
  CMsgDOTASeasonAchievements_Achievement_descriptor_ = CMsgDOTASeasonAchievements_descriptor_->nested_type(0);
  static const int CMsgDOTASeasonAchievements_Achievement_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements_Achievement, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements_Achievement, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements_Achievement, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements_Achievement, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements_Achievement, max_grants_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements_Achievement, normal_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements_Achievement, tracking_achievement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements_Achievement, achievement_goal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements_Achievement, achievement_level_),
  };
  CMsgDOTASeasonAchievements_Achievement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTASeasonAchievements_Achievement_descriptor_,
      CMsgDOTASeasonAchievements_Achievement::default_instance_,
      CMsgDOTASeasonAchievements_Achievement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements_Achievement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements_Achievement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTASeasonAchievements_Achievement));
  CMsgDOTASeasonPredictions_descriptor_ = file->message_type(37);
  static const int CMsgDOTASeasonPredictions_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions, predictions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions, in_game_predictions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions, in_game_prediction_count_per_game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions, in_game_prediction_voting_period_minutes_),
  };
  CMsgDOTASeasonPredictions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTASeasonPredictions_descriptor_,
      CMsgDOTASeasonPredictions::default_instance_,
      CMsgDOTASeasonPredictions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTASeasonPredictions));
  CMsgDOTASeasonPredictions_Choice_descriptor_ = CMsgDOTASeasonPredictions_descriptor_->nested_type(0);
  static const int CMsgDOTASeasonPredictions_Choice_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Choice, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Choice, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Choice, min_raw_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Choice, max_raw_value_),
  };
  CMsgDOTASeasonPredictions_Choice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTASeasonPredictions_Choice_descriptor_,
      CMsgDOTASeasonPredictions_Choice::default_instance_,
      CMsgDOTASeasonPredictions_Choice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Choice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Choice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTASeasonPredictions_Choice));
  CMsgDOTASeasonPredictions_Answers_descriptor_ = CMsgDOTASeasonPredictions_descriptor_->nested_type(1);
  static const int CMsgDOTASeasonPredictions_Answers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Answers, answer_id_),
  };
  CMsgDOTASeasonPredictions_Answers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTASeasonPredictions_Answers_descriptor_,
      CMsgDOTASeasonPredictions_Answers::default_instance_,
      CMsgDOTASeasonPredictions_Answers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Answers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Answers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTASeasonPredictions_Answers));
  CMsgDOTASeasonPredictions_QueryKeyValues_descriptor_ = CMsgDOTASeasonPredictions_descriptor_->nested_type(2);
  static const int CMsgDOTASeasonPredictions_QueryKeyValues_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_QueryKeyValues, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_QueryKeyValues, value_),
  };
  CMsgDOTASeasonPredictions_QueryKeyValues_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTASeasonPredictions_QueryKeyValues_descriptor_,
      CMsgDOTASeasonPredictions_QueryKeyValues::default_instance_,
      CMsgDOTASeasonPredictions_QueryKeyValues_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_QueryKeyValues, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_QueryKeyValues, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTASeasonPredictions_QueryKeyValues));
  CMsgDOTASeasonPredictions_Prediction_descriptor_ = CMsgDOTASeasonPredictions_descriptor_->nested_type(3);
  static const int CMsgDOTASeasonPredictions_Prediction_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, question_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, choices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, selection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, lock_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, answer_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, answer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, answers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, query_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, query_bind_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, lock_on_selection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, lock_on_selection_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, lock_on_selection_set_),
  };
  CMsgDOTASeasonPredictions_Prediction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTASeasonPredictions_Prediction_descriptor_,
      CMsgDOTASeasonPredictions_Prediction::default_instance_,
      CMsgDOTASeasonPredictions_Prediction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTASeasonPredictions_Prediction));
  CMsgDOTASeasonPredictions_InGamePrediction_descriptor_ = CMsgDOTASeasonPredictions_descriptor_->nested_type(4);
  static const int CMsgDOTASeasonPredictions_InGamePrediction_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, question_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, choices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, required_heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, query_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, query_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, answer_resolution_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, points_to_grant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, reward_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, debug_force_selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, raw_value_type_),
  };
  CMsgDOTASeasonPredictions_InGamePrediction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTASeasonPredictions_InGamePrediction_descriptor_,
      CMsgDOTASeasonPredictions_InGamePrediction::default_instance_,
      CMsgDOTASeasonPredictions_InGamePrediction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTASeasonPredictions_InGamePrediction));
  CMsgDOTASeasonPredictions_ePredictionType_descriptor_ = CMsgDOTASeasonPredictions_descriptor_->enum_type(0);
  CMsgDOTASeasonPredictions_eAnswerType_descriptor_ = CMsgDOTASeasonPredictions_descriptor_->enum_type(1);
  CMsgDOTASeasonPredictions_eResolutionType_t_descriptor_ = CMsgDOTASeasonPredictions_descriptor_->enum_type(2);
  CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_descriptor_ = CMsgDOTASeasonPredictions_descriptor_->enum_type(3);
  CMsgDOTASeasonPredictions_eRawValueType_t_descriptor_ = CMsgDOTASeasonPredictions_descriptor_->enum_type(4);
  CMsgDOTAMatch_descriptor_ = file->message_type(38);
  static const int CMsgDOTAMatch_offsets_[47] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, tower_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, barracks_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, cluster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, first_blood_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, replay_salt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, lobby_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, human_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, average_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, game_balance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, radiant_team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, dire_team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, leagueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, radiant_team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, dire_team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, radiant_team_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, dire_team_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, radiant_team_complete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, dire_team_complete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, positive_votes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, negative_votes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, picks_bans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, match_seq_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, replay_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, radiant_guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, dire_guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, radiant_team_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, dire_team_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, series_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, series_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, broadcaster_channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, engine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, custom_game_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, match_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, private_metadata_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, radiant_team_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, dire_team_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, match_outcome_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, tournament_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, tournament_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, pre_game_duration_),
  };
  CMsgDOTAMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAMatch_descriptor_,
      CMsgDOTAMatch::default_instance_,
      CMsgDOTAMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAMatch));
  CMsgDOTAMatch_Player_descriptor_ = CMsgDOTAMatch_descriptor_->nested_type(0);
  static const int CMsgDOTAMatch_Player_offsets_[59] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, player_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, item_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, item_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, item_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, item_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, item_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, item_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, item_6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, item_7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, item_8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, expected_team_contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, scaled_metric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, previous_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, rank_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, solo_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, seasonal_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, assists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, leaver_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, last_hits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, denies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, gold_per_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, xp_per_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, gold_spent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, hero_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, tower_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, hero_healing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, time_last_seen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, support_ability_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, feeding_detected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, search_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, search_rank_uncertainty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, rank_uncertainty_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, hero_play_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, scaled_hero_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, scaled_tower_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, scaled_hero_healing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, scaled_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, scaled_deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, scaled_assists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, claimed_farm_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, support_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, claimed_denies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, claimed_misses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, misses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, ability_upgrades_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, additional_units_inventory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, permanent_buffs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, custom_game_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, active_battle_pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, net_worth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, bot_difficulty_),
  };
  CMsgDOTAMatch_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAMatch_Player_descriptor_,
      CMsgDOTAMatch_Player::default_instance_,
      CMsgDOTAMatch_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAMatch_Player));
  CMsgDOTAMatch_Player_CustomGameData_descriptor_ = CMsgDOTAMatch_Player_descriptor_->nested_type(0);
  static const int CMsgDOTAMatch_Player_CustomGameData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player_CustomGameData, dota_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player_CustomGameData, winner_),
  };
  CMsgDOTAMatch_Player_CustomGameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAMatch_Player_CustomGameData_descriptor_,
      CMsgDOTAMatch_Player_CustomGameData::default_instance_,
      CMsgDOTAMatch_Player_CustomGameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player_CustomGameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player_CustomGameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAMatch_Player_CustomGameData));
  CMsgDOTAMatch_BroadcasterInfo_descriptor_ = CMsgDOTAMatch_descriptor_->nested_type(1);
  static const int CMsgDOTAMatch_BroadcasterInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_BroadcasterInfo, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_BroadcasterInfo, name_),
  };
  CMsgDOTAMatch_BroadcasterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAMatch_BroadcasterInfo_descriptor_,
      CMsgDOTAMatch_BroadcasterInfo::default_instance_,
      CMsgDOTAMatch_BroadcasterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_BroadcasterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_BroadcasterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAMatch_BroadcasterInfo));
  CMsgDOTAMatch_BroadcasterChannel_descriptor_ = CMsgDOTAMatch_descriptor_->nested_type(2);
  static const int CMsgDOTAMatch_BroadcasterChannel_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_BroadcasterChannel, country_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_BroadcasterChannel, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_BroadcasterChannel, broadcaster_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_BroadcasterChannel, language_code_),
  };
  CMsgDOTAMatch_BroadcasterChannel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAMatch_BroadcasterChannel_descriptor_,
      CMsgDOTAMatch_BroadcasterChannel::default_instance_,
      CMsgDOTAMatch_BroadcasterChannel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_BroadcasterChannel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_BroadcasterChannel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAMatch_BroadcasterChannel));
  CMsgDOTAMatch_CustomGameData_descriptor_ = CMsgDOTAMatch_descriptor_->nested_type(3);
  static const int CMsgDOTAMatch_CustomGameData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_CustomGameData, custom_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_CustomGameData, map_name_),
  };
  CMsgDOTAMatch_CustomGameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAMatch_CustomGameData_descriptor_,
      CMsgDOTAMatch_CustomGameData::default_instance_,
      CMsgDOTAMatch_CustomGameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_CustomGameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_CustomGameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAMatch_CustomGameData));
  CMsgDOTAMatch_ReplayState_descriptor_ = CMsgDOTAMatch_descriptor_->enum_type(0);
  CMsgPlayerCard_descriptor_ = file->message_type(39);
  static const int CMsgPlayerCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerCard, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerCard, stat_modifier_),
  };
  CMsgPlayerCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPlayerCard_descriptor_,
      CMsgPlayerCard::default_instance_,
      CMsgPlayerCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPlayerCard));
  CMsgPlayerCard_StatModifier_descriptor_ = CMsgPlayerCard_descriptor_->nested_type(0);
  static const int CMsgPlayerCard_StatModifier_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerCard_StatModifier, stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerCard_StatModifier, value_),
  };
  CMsgPlayerCard_StatModifier_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPlayerCard_StatModifier_descriptor_,
      CMsgPlayerCard_StatModifier::default_instance_,
      CMsgPlayerCard_StatModifier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerCard_StatModifier, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerCard_StatModifier, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPlayerCard_StatModifier));
  CMsgDOTAFantasyPlayerStats_descriptor_ = file->message_type(40);
  static const int CMsgDOTAFantasyPlayerStats_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, player_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, match_completed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, series_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, series_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, cs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, gpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, tower_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, roshan_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, teamfight_participation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, wards_placed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, camps_stacked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, runes_grabbed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, first_blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, stuns_),
  };
  CMsgDOTAFantasyPlayerStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAFantasyPlayerStats_descriptor_,
      CMsgDOTAFantasyPlayerStats::default_instance_,
      CMsgDOTAFantasyPlayerStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAFantasyPlayerStats));
  CMsgDOTAFantasyPlayerMatchStats_descriptor_ = file->message_type(41);
  static const int CMsgDOTAFantasyPlayerMatchStats_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerMatchStats, matches_),
  };
  CMsgDOTAFantasyPlayerMatchStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAFantasyPlayerMatchStats_descriptor_,
      CMsgDOTAFantasyPlayerMatchStats::default_instance_,
      CMsgDOTAFantasyPlayerMatchStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerMatchStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerMatchStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAFantasyPlayerMatchStats));
  CMsgDOTABotDebugInfo_descriptor_ = file->message_type(42);
  static const int CMsgDOTABotDebugInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, bots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, desire_push_lane_top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, desire_push_lane_mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, desire_push_lane_bot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, desire_defend_lane_top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, desire_defend_lane_mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, desire_defend_lane_bot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, desire_farm_lane_top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, desire_farm_lane_mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, desire_farm_lane_bot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, desire_farm_roshan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, execution_time_),
  };
  CMsgDOTABotDebugInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTABotDebugInfo_descriptor_,
      CMsgDOTABotDebugInfo::default_instance_,
      CMsgDOTABotDebugInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTABotDebugInfo));
  CMsgDOTABotDebugInfo_Bot_descriptor_ = CMsgDOTABotDebugInfo_descriptor_->nested_type(0);
  static const int CMsgDOTABotDebugInfo_Bot_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, player_owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, power_current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, power_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, move_target_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, move_target_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, move_target_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, active_mode_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, execution_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, modes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, action_),
  };
  CMsgDOTABotDebugInfo_Bot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTABotDebugInfo_Bot_descriptor_,
      CMsgDOTABotDebugInfo_Bot::default_instance_,
      CMsgDOTABotDebugInfo_Bot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTABotDebugInfo_Bot));
  CMsgDOTABotDebugInfo_Bot_Mode_descriptor_ = CMsgDOTABotDebugInfo_Bot_descriptor_->nested_type(0);
  static const int CMsgDOTABotDebugInfo_Bot_Mode_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot_Mode, mode_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot_Mode, desire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot_Mode, target_entity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot_Mode, target_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot_Mode, target_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot_Mode, target_z_),
  };
  CMsgDOTABotDebugInfo_Bot_Mode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTABotDebugInfo_Bot_Mode_descriptor_,
      CMsgDOTABotDebugInfo_Bot_Mode::default_instance_,
      CMsgDOTABotDebugInfo_Bot_Mode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot_Mode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot_Mode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTABotDebugInfo_Bot_Mode));
  CMsgDOTABotDebugInfo_Bot_Action_descriptor_ = CMsgDOTABotDebugInfo_Bot_descriptor_->nested_type(1);
  static const int CMsgDOTABotDebugInfo_Bot_Action_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot_Action, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot_Action, action_target_),
  };
  CMsgDOTABotDebugInfo_Bot_Action_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTABotDebugInfo_Bot_Action_descriptor_,
      CMsgDOTABotDebugInfo_Bot_Action::default_instance_,
      CMsgDOTABotDebugInfo_Bot_Action_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot_Action, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot_Action, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTABotDebugInfo_Bot_Action));
  ESpecialPingValue_descriptor_ = file->enum_type(0);
  EDOTAGCSessionNeed_descriptor_ = file->enum_type(1);
  DOTA_TournamentEvents_descriptor_ = file->enum_type(2);
  DOTA_COMBATLOG_TYPES_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSODOTAGameAccountClient_descriptor_, &CSODOTAGameAccountClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLobbyEventPoints_descriptor_, &CMsgLobbyEventPoints::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLobbyEventPoints_AccountPoints_descriptor_, &CMsgLobbyEventPoints_AccountPoints::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgBattleCupVictory_descriptor_, &CMsgBattleCupVictory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLobbyBattleCupVictoryList_descriptor_, &CMsgLobbyBattleCupVictoryList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTABroadcastNotification_descriptor_, &CMsgDOTABroadcastNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProtoItemHeroStatue_descriptor_, &CProtoItemHeroStatue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProtoItemTeamShowcase_descriptor_, &CProtoItemTeamShowcase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMatchPlayerAbilityUpgrade_descriptor_, &CMatchPlayerAbilityUpgrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMatchAdditionalUnitInventory_descriptor_, &CMatchAdditionalUnitInventory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMatchPlayerPermanentBuff_descriptor_, &CMatchPlayerPermanentBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMatchHeroSelectEvent_descriptor_, &CMatchHeroSelectEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAProcessFantasyScheduledEvent_descriptor_, &CMsgDOTAProcessFantasyScheduledEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAHasItemQuery_descriptor_, &CMsgDOTAHasItemQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAHasItemResponse_descriptor_, &CMsgDOTAHasItemResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAHasItemDefsQuery_descriptor_, &CMsgDOTAHasItemDefsQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAHasItemDefsResponse_descriptor_, &CMsgDOTAHasItemDefsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCGetPlayerCardItemInfo_descriptor_, &CMsgGCGetPlayerCardItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCGetPlayerCardItemInfoResponse_descriptor_, &CMsgGCGetPlayerCardItemInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_descriptor_, &CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToGCFantasySetMatchLeague_descriptor_, &CMsgGCToGCFantasySetMatchLeague::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSODOTAMapLocationState_descriptor_, &CSODOTAMapLocationState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLeagueAdminList_descriptor_, &CMsgLeagueAdminList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCompendiumTimestampedData_descriptor_, &CCompendiumTimestampedData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCompendiumGameTimeline_descriptor_, &CCompendiumGameTimeline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCompendiumGameList_descriptor_, &CCompendiumGameList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAdditionalEquipSlot_descriptor_, &CAdditionalEquipSlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTACombatLogEntry_descriptor_, &CMsgDOTACombatLogEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAProfileCard_descriptor_, &CMsgDOTAProfileCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAProfileCard_Slot_descriptor_, &CMsgDOTAProfileCard_Slot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAProfileCard_Slot_Trophy_descriptor_, &CMsgDOTAProfileCard_Slot_Trophy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAProfileCard_Slot_Stat_descriptor_, &CMsgDOTAProfileCard_Slot_Stat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAProfileCard_Slot_Item_descriptor_, &CMsgDOTAProfileCard_Slot_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAProfileCard_Slot_Hero_descriptor_, &CMsgDOTAProfileCard_Slot_Hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAProfileCard_Slot_Emoticon_descriptor_, &CMsgDOTAProfileCard_Slot_Emoticon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSODOTAPlayerChallenge_descriptor_, &CSODOTAPlayerChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientToGCRerollPlayerChallenge_descriptor_, &CMsgClientToGCRerollPlayerChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCRerollPlayerChallengeResponse_descriptor_, &CMsgGCRerollPlayerChallengeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCTopCustomGamesList_descriptor_, &CMsgGCTopCustomGamesList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARealtimeGameStats_descriptor_, &CMsgDOTARealtimeGameStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARealtimeGameStats_TeamDetails_descriptor_, &CMsgDOTARealtimeGameStats_TeamDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARealtimeGameStats_ItemDetails_descriptor_, &CMsgDOTARealtimeGameStats_ItemDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARealtimeGameStats_AbilityDetails_descriptor_, &CMsgDOTARealtimeGameStats_AbilityDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARealtimeGameStats_HeroToHeroStats_descriptor_, &CMsgDOTARealtimeGameStats_HeroToHeroStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARealtimeGameStats_AbilityList_descriptor_, &CMsgDOTARealtimeGameStats_AbilityList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARealtimeGameStats_PlayerDetails_descriptor_, &CMsgDOTARealtimeGameStats_PlayerDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARealtimeGameStats_BuildingDetails_descriptor_, &CMsgDOTARealtimeGameStats_BuildingDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARealtimeGameStats_KillDetails_descriptor_, &CMsgDOTARealtimeGameStats_KillDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARealtimeGameStats_BroadcasterDetails_descriptor_, &CMsgDOTARealtimeGameStats_BroadcasterDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARealtimeGameStats_PickBanDetails_descriptor_, &CMsgDOTARealtimeGameStats_PickBanDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARealtimeGameStats_MatchDetails_descriptor_, &CMsgDOTARealtimeGameStats_MatchDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARealtimeGameStats_GraphData_descriptor_, &CMsgDOTARealtimeGameStats_GraphData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARealtimeGameStats_GraphData_LocationStats_descriptor_, &CMsgDOTARealtimeGameStats_GraphData_LocationStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_descriptor_, &CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARealtimeGameStatsTerse_descriptor_, &CMsgDOTARealtimeGameStatsTerse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARealtimeGameStatsTerse_TeamDetails_descriptor_, &CMsgDOTARealtimeGameStatsTerse_TeamDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARealtimeGameStatsTerse_PlayerDetails_descriptor_, &CMsgDOTARealtimeGameStatsTerse_PlayerDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARealtimeGameStatsTerse_BuildingDetails_descriptor_, &CMsgDOTARealtimeGameStatsTerse_BuildingDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARealtimeGameStatsTerse_MatchDetails_descriptor_, &CMsgDOTARealtimeGameStatsTerse_MatchDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARealtimeGameStatsTerse_GraphData_descriptor_, &CMsgDOTARealtimeGameStatsTerse_GraphData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToClientMatchGroupsVersion_descriptor_, &CMsgGCToClientMatchGroupsVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTASDOHeroStatsHistory_descriptor_, &CMsgDOTASDOHeroStatsHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTASeasonRewards_descriptor_, &CMsgDOTASeasonRewards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTASeasonRewards_Reward_descriptor_, &CMsgDOTASeasonRewards_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTASeasonAchievements_descriptor_, &CMsgDOTASeasonAchievements::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTASeasonAchievements_Achievement_descriptor_, &CMsgDOTASeasonAchievements_Achievement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTASeasonPredictions_descriptor_, &CMsgDOTASeasonPredictions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTASeasonPredictions_Choice_descriptor_, &CMsgDOTASeasonPredictions_Choice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTASeasonPredictions_Answers_descriptor_, &CMsgDOTASeasonPredictions_Answers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTASeasonPredictions_QueryKeyValues_descriptor_, &CMsgDOTASeasonPredictions_QueryKeyValues::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTASeasonPredictions_Prediction_descriptor_, &CMsgDOTASeasonPredictions_Prediction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTASeasonPredictions_InGamePrediction_descriptor_, &CMsgDOTASeasonPredictions_InGamePrediction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAMatch_descriptor_, &CMsgDOTAMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAMatch_Player_descriptor_, &CMsgDOTAMatch_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAMatch_Player_CustomGameData_descriptor_, &CMsgDOTAMatch_Player_CustomGameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAMatch_BroadcasterInfo_descriptor_, &CMsgDOTAMatch_BroadcasterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAMatch_BroadcasterChannel_descriptor_, &CMsgDOTAMatch_BroadcasterChannel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAMatch_CustomGameData_descriptor_, &CMsgDOTAMatch_CustomGameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPlayerCard_descriptor_, &CMsgPlayerCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPlayerCard_StatModifier_descriptor_, &CMsgPlayerCard_StatModifier::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAFantasyPlayerStats_descriptor_, &CMsgDOTAFantasyPlayerStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAFantasyPlayerMatchStats_descriptor_, &CMsgDOTAFantasyPlayerMatchStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTABotDebugInfo_descriptor_, &CMsgDOTABotDebugInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTABotDebugInfo_Bot_descriptor_, &CMsgDOTABotDebugInfo_Bot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTABotDebugInfo_Bot_Mode_descriptor_, &CMsgDOTABotDebugInfo_Bot_Mode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTABotDebugInfo_Bot_Action_descriptor_, &CMsgDOTABotDebugInfo_Bot_Action::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto() {
  delete CSODOTAGameAccountClient::default_instance_;
  delete CSODOTAGameAccountClient_reflection_;
  delete CMsgLobbyEventPoints::default_instance_;
  delete CMsgLobbyEventPoints_reflection_;
  delete CMsgLobbyEventPoints_AccountPoints::default_instance_;
  delete CMsgLobbyEventPoints_AccountPoints_reflection_;
  delete CMsgBattleCupVictory::default_instance_;
  delete CMsgBattleCupVictory_reflection_;
  delete CMsgLobbyBattleCupVictoryList::default_instance_;
  delete CMsgLobbyBattleCupVictoryList_reflection_;
  delete CMsgDOTABroadcastNotification::default_instance_;
  delete CMsgDOTABroadcastNotification_reflection_;
  delete CProtoItemHeroStatue::default_instance_;
  delete CProtoItemHeroStatue_reflection_;
  delete CProtoItemTeamShowcase::default_instance_;
  delete CProtoItemTeamShowcase_reflection_;
  delete CMatchPlayerAbilityUpgrade::default_instance_;
  delete CMatchPlayerAbilityUpgrade_reflection_;
  delete CMatchAdditionalUnitInventory::default_instance_;
  delete CMatchAdditionalUnitInventory_reflection_;
  delete CMatchPlayerPermanentBuff::default_instance_;
  delete CMatchPlayerPermanentBuff_reflection_;
  delete CMatchHeroSelectEvent::default_instance_;
  delete CMatchHeroSelectEvent_reflection_;
  delete CMsgDOTAProcessFantasyScheduledEvent::default_instance_;
  delete CMsgDOTAProcessFantasyScheduledEvent_reflection_;
  delete CMsgDOTAHasItemQuery::default_instance_;
  delete CMsgDOTAHasItemQuery_reflection_;
  delete CMsgDOTAHasItemResponse::default_instance_;
  delete CMsgDOTAHasItemResponse_reflection_;
  delete CMsgDOTAHasItemDefsQuery::default_instance_;
  delete CMsgDOTAHasItemDefsQuery_reflection_;
  delete CMsgDOTAHasItemDefsResponse::default_instance_;
  delete CMsgDOTAHasItemDefsResponse_reflection_;
  delete CMsgGCGetPlayerCardItemInfo::default_instance_;
  delete CMsgGCGetPlayerCardItemInfo_reflection_;
  delete CMsgGCGetPlayerCardItemInfoResponse::default_instance_;
  delete CMsgGCGetPlayerCardItemInfoResponse_reflection_;
  delete CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::default_instance_;
  delete CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_reflection_;
  delete CMsgGCToGCFantasySetMatchLeague::default_instance_;
  delete CMsgGCToGCFantasySetMatchLeague_reflection_;
  delete CSODOTAMapLocationState::default_instance_;
  delete CSODOTAMapLocationState_reflection_;
  delete CMsgLeagueAdminList::default_instance_;
  delete CMsgLeagueAdminList_reflection_;
  delete CCompendiumTimestampedData::default_instance_;
  delete CCompendiumTimestampedData_reflection_;
  delete CCompendiumGameTimeline::default_instance_;
  delete CCompendiumGameTimeline_reflection_;
  delete CCompendiumGameList::default_instance_;
  delete CCompendiumGameList_reflection_;
  delete CAdditionalEquipSlot::default_instance_;
  delete CAdditionalEquipSlot_reflection_;
  delete CMsgDOTACombatLogEntry::default_instance_;
  delete CMsgDOTACombatLogEntry_reflection_;
  delete CMsgDOTAProfileCard::default_instance_;
  delete CMsgDOTAProfileCard_reflection_;
  delete CMsgDOTAProfileCard_Slot::default_instance_;
  delete CMsgDOTAProfileCard_Slot_reflection_;
  delete CMsgDOTAProfileCard_Slot_Trophy::default_instance_;
  delete CMsgDOTAProfileCard_Slot_Trophy_reflection_;
  delete CMsgDOTAProfileCard_Slot_Stat::default_instance_;
  delete CMsgDOTAProfileCard_Slot_Stat_reflection_;
  delete CMsgDOTAProfileCard_Slot_Item::default_instance_;
  delete CMsgDOTAProfileCard_Slot_Item_reflection_;
  delete CMsgDOTAProfileCard_Slot_Hero::default_instance_;
  delete CMsgDOTAProfileCard_Slot_Hero_reflection_;
  delete CMsgDOTAProfileCard_Slot_Emoticon::default_instance_;
  delete CMsgDOTAProfileCard_Slot_Emoticon_reflection_;
  delete CSODOTAPlayerChallenge::default_instance_;
  delete CSODOTAPlayerChallenge_reflection_;
  delete CMsgClientToGCRerollPlayerChallenge::default_instance_;
  delete CMsgClientToGCRerollPlayerChallenge_reflection_;
  delete CMsgGCRerollPlayerChallengeResponse::default_instance_;
  delete CMsgGCRerollPlayerChallengeResponse_reflection_;
  delete CMsgGCTopCustomGamesList::default_instance_;
  delete CMsgGCTopCustomGamesList_reflection_;
  delete CMsgDOTARealtimeGameStats::default_instance_;
  delete CMsgDOTARealtimeGameStats_reflection_;
  delete CMsgDOTARealtimeGameStats_TeamDetails::default_instance_;
  delete CMsgDOTARealtimeGameStats_TeamDetails_reflection_;
  delete CMsgDOTARealtimeGameStats_ItemDetails::default_instance_;
  delete CMsgDOTARealtimeGameStats_ItemDetails_reflection_;
  delete CMsgDOTARealtimeGameStats_AbilityDetails::default_instance_;
  delete CMsgDOTARealtimeGameStats_AbilityDetails_reflection_;
  delete CMsgDOTARealtimeGameStats_HeroToHeroStats::default_instance_;
  delete CMsgDOTARealtimeGameStats_HeroToHeroStats_reflection_;
  delete CMsgDOTARealtimeGameStats_AbilityList::default_instance_;
  delete CMsgDOTARealtimeGameStats_AbilityList_reflection_;
  delete CMsgDOTARealtimeGameStats_PlayerDetails::default_instance_;
  delete CMsgDOTARealtimeGameStats_PlayerDetails_reflection_;
  delete CMsgDOTARealtimeGameStats_BuildingDetails::default_instance_;
  delete CMsgDOTARealtimeGameStats_BuildingDetails_reflection_;
  delete CMsgDOTARealtimeGameStats_KillDetails::default_instance_;
  delete CMsgDOTARealtimeGameStats_KillDetails_reflection_;
  delete CMsgDOTARealtimeGameStats_BroadcasterDetails::default_instance_;
  delete CMsgDOTARealtimeGameStats_BroadcasterDetails_reflection_;
  delete CMsgDOTARealtimeGameStats_PickBanDetails::default_instance_;
  delete CMsgDOTARealtimeGameStats_PickBanDetails_reflection_;
  delete CMsgDOTARealtimeGameStats_MatchDetails::default_instance_;
  delete CMsgDOTARealtimeGameStats_MatchDetails_reflection_;
  delete CMsgDOTARealtimeGameStats_GraphData::default_instance_;
  delete CMsgDOTARealtimeGameStats_GraphData_reflection_;
  delete CMsgDOTARealtimeGameStats_GraphData_LocationStats::default_instance_;
  delete CMsgDOTARealtimeGameStats_GraphData_LocationStats_reflection_;
  delete CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::default_instance_;
  delete CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_reflection_;
  delete CMsgDOTARealtimeGameStatsTerse::default_instance_;
  delete CMsgDOTARealtimeGameStatsTerse_reflection_;
  delete CMsgDOTARealtimeGameStatsTerse_TeamDetails::default_instance_;
  delete CMsgDOTARealtimeGameStatsTerse_TeamDetails_reflection_;
  delete CMsgDOTARealtimeGameStatsTerse_PlayerDetails::default_instance_;
  delete CMsgDOTARealtimeGameStatsTerse_PlayerDetails_reflection_;
  delete CMsgDOTARealtimeGameStatsTerse_BuildingDetails::default_instance_;
  delete CMsgDOTARealtimeGameStatsTerse_BuildingDetails_reflection_;
  delete CMsgDOTARealtimeGameStatsTerse_MatchDetails::default_instance_;
  delete CMsgDOTARealtimeGameStatsTerse_MatchDetails_reflection_;
  delete CMsgDOTARealtimeGameStatsTerse_GraphData::default_instance_;
  delete CMsgDOTARealtimeGameStatsTerse_GraphData_reflection_;
  delete CMsgGCToClientMatchGroupsVersion::default_instance_;
  delete CMsgGCToClientMatchGroupsVersion_reflection_;
  delete CMsgDOTASDOHeroStatsHistory::default_instance_;
  delete CMsgDOTASDOHeroStatsHistory_reflection_;
  delete CMsgDOTASeasonRewards::default_instance_;
  delete CMsgDOTASeasonRewards_reflection_;
  delete CMsgDOTASeasonRewards_Reward::default_instance_;
  delete CMsgDOTASeasonRewards_Reward_reflection_;
  delete CMsgDOTASeasonAchievements::default_instance_;
  delete CMsgDOTASeasonAchievements_reflection_;
  delete CMsgDOTASeasonAchievements_Achievement::default_instance_;
  delete CMsgDOTASeasonAchievements_Achievement_reflection_;
  delete CMsgDOTASeasonPredictions::default_instance_;
  delete CMsgDOTASeasonPredictions_reflection_;
  delete CMsgDOTASeasonPredictions_Choice::default_instance_;
  delete CMsgDOTASeasonPredictions_Choice_reflection_;
  delete CMsgDOTASeasonPredictions_Answers::default_instance_;
  delete CMsgDOTASeasonPredictions_Answers_reflection_;
  delete CMsgDOTASeasonPredictions_QueryKeyValues::default_instance_;
  delete CMsgDOTASeasonPredictions_QueryKeyValues_reflection_;
  delete CMsgDOTASeasonPredictions_Prediction::default_instance_;
  delete CMsgDOTASeasonPredictions_Prediction_reflection_;
  delete CMsgDOTASeasonPredictions_InGamePrediction::default_instance_;
  delete CMsgDOTASeasonPredictions_InGamePrediction_reflection_;
  delete CMsgDOTAMatch::default_instance_;
  delete CMsgDOTAMatch_reflection_;
  delete CMsgDOTAMatch_Player::default_instance_;
  delete CMsgDOTAMatch_Player_reflection_;
  delete CMsgDOTAMatch_Player_CustomGameData::default_instance_;
  delete CMsgDOTAMatch_Player_CustomGameData_reflection_;
  delete CMsgDOTAMatch_BroadcasterInfo::default_instance_;
  delete CMsgDOTAMatch_BroadcasterInfo_reflection_;
  delete CMsgDOTAMatch_BroadcasterChannel::default_instance_;
  delete CMsgDOTAMatch_BroadcasterChannel_reflection_;
  delete CMsgDOTAMatch_CustomGameData::default_instance_;
  delete CMsgDOTAMatch_CustomGameData_reflection_;
  delete CMsgPlayerCard::default_instance_;
  delete CMsgPlayerCard_reflection_;
  delete CMsgPlayerCard_StatModifier::default_instance_;
  delete CMsgPlayerCard_StatModifier_reflection_;
  delete CMsgDOTAFantasyPlayerStats::default_instance_;
  delete CMsgDOTAFantasyPlayerStats_reflection_;
  delete CMsgDOTAFantasyPlayerMatchStats::default_instance_;
  delete CMsgDOTAFantasyPlayerMatchStats_reflection_;
  delete CMsgDOTABotDebugInfo::default_instance_;
  delete CMsgDOTABotDebugInfo_reflection_;
  delete CMsgDOTABotDebugInfo_Bot::default_instance_;
  delete CMsgDOTABotDebugInfo_Bot_reflection_;
  delete CMsgDOTABotDebugInfo_Bot_Mode::default_instance_;
  delete CMsgDOTABotDebugInfo_Bot_Mode_reflection_;
  delete CMsgDOTABotDebugInfo_Bot_Action::default_instance_;
  delete CMsgDOTABotDebugInfo_Bot_Action_reflection_;
}

void protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_steammessages_2eproto();
  ::protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  ::protobuf_AddDesc_dota_5fshared_5fenums_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034dota_gcmessages_common.proto\032\023steammes"
    "sages.proto\032\026gcsdk_gcmessages.proto\032\027dot"
    "a_shared_enums.proto\"\217\020\n\030CSODOTAGameAcco"
    "untClient\022\030\n\naccount_id\030\001 \001(\rB\004\200\246\035\001\022\014\n\004w"
    "ins\030\003 \001(\r\022\016\n\006losses\030\004 \001(\r\022\n\n\002xp\030\014 \001(\r\022\r\n"
    "\005level\030\r \001(\r\022\025\n\rinitial_skill\030\016 \001(\r\022\024\n\014l"
    "eaver_count\030\017 \001(\r\022\036\n\026secondary_leaver_co"
    "unt\030: \001(\r\022\037\n\027low_priority_until_date\030\022 \001"
    "(\r\022$\n\034prevent_text_chat_until_date\030\024 \001(\r"
    "\022 \n\030prevent_voice_until_date\030\025 \001(\r\022+\n#pr"
    "event_public_text_chat_until_date\030V \001(\r\022"
    " \n\030last_abandoned_game_date\030\026 \001(\r\022*\n\"las"
    "t_secondary_abandoned_game_date\030; \001(\r\022\034\n"
    "\024leaver_penalty_count\030\027 \001(\r\022\035\n\025completed"
    "_game_streak\030\030 \001(\r\022\020\n\010teaching\030\034 \001(\r\022\022\n\n"
    "leadership\030\035 \001(\r\022\020\n\010friendly\030\036 \001(\r\022\021\n\tfo"
    "rgiving\030\037 \001(\r\022#\n\033account_disabled_until_"
    "date\030& \001(\r\022\036\n\026account_disabled_count\030\' \001"
    "(\r\022\030\n\020showcase_hero_id\030( \001(\r\022!\n\031match_di"
    "sabled_until_date\030) \001(\r\022\034\n\024match_disable"
    "d_count\030* \001(\r\022\?\n\024partner_account_type\030, "
    "\001(\0162\023.PartnerAccountType:\014PARTNER_NONE\022\035"
    "\n\025partner_account_state\030- \001(\r\022%\n\035shutdow"
    "nlawterminatetimestamp\030/ \001(\r\022$\n\034low_prio"
    "rity_games_remaining\0300 \001(\r\022\030\n\020competitiv"
    "e_rank\0301 \001(\r\022#\n\033calibration_games_remain"
    "ing\0303 \001(\r\022\035\n\025solo_competitive_rank\0304 \001(\r"
    "\022(\n solo_calibration_games_remaining\0306 \001"
    "(\r\022$\n\034general_seasonal_ranked_rank\030K \001(\r"
    "\022;\n3general_seasonal_ranked_calibration_"
    "games_remaining\030L \001(\r\022,\n$general_seasona"
    "l_ranked_games_played\030P \001(\r\022)\n!general_s"
    "easonal_ranked_rank_peak\030Q \001(\r\022)\n!genera"
    "l_seasonal_rank_transferred\030S \001(\010\022!\n\031sol"
    "o_seasonal_ranked_rank\030M \001(\r\0228\n0solo_sea"
    "sonal_ranked_calibration_games_remaining"
    "\030N \001(\r\022)\n!solo_seasonal_ranked_games_pla"
    "yed\030O \001(\r\022&\n\036solo_seasonal_ranked_rank_p"
    "eak\030R \001(\r\022&\n\036solo_seasonal_rank_transfer"
    "red\030T \001(\010\022\031\n\021recruitment_level\0307 \001(\r\022\035\n\025"
    "has_new_notifications\0308 \001(\010\022\027\n\017is_league"
    "_admin\0309 \001(\010\022\033\n\023casual_games_played\030< \001("
    "\r\022%\n\035solo_competitive_games_played\030= \001(\r"
    "\022&\n\036party_competitive_games_played\030> \001(\r"
    "\022\037\n\027casual_1v1_games_played\030A \001(\r\022%\n\035com"
    "petitive_team_games_played\030B \001(\r\022\"\n\032curr"
    "_all_hero_challenge_id\030C \001(\r\022\030\n\020play_tim"
    "e_points\030D \001(\r\022\025\n\raccount_flags\030E \001(\r\022\027\n"
    "\017play_time_level\030F \001(\r\022+\n#player_behavio"
    "r_seq_num_last_report\030G \001(\r\022)\n!player_be"
    "havior_score_last_report\030H \001(\r\022\'\n\037player"
    "_behavior_report_old_data\030I \001(\010\022\033\n\023tourn"
    "ey_skill_level\030J \001(\r\022)\n!tourney_recent_p"
    "articipation_date\030U \001(\r\022\025\n\rfavorite_team"
    "\030W \001(\r\"\250\003\n\024CMsgLobbyEventPoints\022\020\n\010event"
    "_id\030\001 \001(\r\022;\n\016account_points\030\002 \003(\0132#.CMsg"
    "LobbyEventPoints.AccountPoints\032\300\002\n\rAccou"
    "ntPoints\022\022\n\naccount_id\030\001 \001(\r\022\025\n\rnormal_p"
    "oints\030\002 \001(\r\022\026\n\016premium_points\030\003 \001(\r\022\r\n\005o"
    "wned\030\004 \001(\010\022\025\n\rfavorite_team\030\005 \001(\r\022\033\n\023fav"
    "orite_team_level\030\006 \001(\r\022\023\n\013points_held\030\007 "
    "\001(\r\022\033\n\023premium_points_held\030\010 \001(\r\022 \n\030favo"
    "rite_team_foil_level\030\t \001(\r\022\036\n\026wager_toke"
    "ns_remaining\030\n \001(\r\022\030\n\020wager_tokens_max\030\013"
    " \001(\r\022\033\n\023active_effects_mask\030\014 \001(\004\"\263\001\n\024CM"
    "sgBattleCupVictory\022\022\n\naccount_id\030\001 \001(\r\022\020"
    "\n\010win_date\030\002 \001(\r\022\023\n\013valid_until\030\003 \001(\r\022\023\n"
    "\013skill_level\030\004 \001(\r\022\025\n\rtournament_id\030\005 \001("
    "\r\022\023\n\013division_id\030\006 \001(\r\022\017\n\007team_id\030\007 \001(\r\022"
    "\016\n\006streak\030\010 \001(\r\"G\n\035CMsgLobbyBattleCupVic"
    "toryList\022&\n\007winners\030\001 \003(\0132\025.CMsgBattleCu"
    "pVictory\"0\n\035CMsgDOTABroadcastNotificatio"
    "n\022\017\n\007message\030\001 \001(\t\"\271\001\n\024CProtoItemHeroSta"
    "tue\022\017\n\007hero_id\030\001 \001(\r\022\033\n\023status_effect_in"
    "dex\030\002 \001(\r\022\025\n\rsequence_name\030\003 \001(\t\022\r\n\005cycl"
    "e\030\004 \001(\002\022\020\n\010wearable\030\005 \003(\r\022\023\n\013inscription"
    "\030\006 \001(\t\022\r\n\005style\030\007 \003(\r\022\027\n\017tournament_drop"
    "\030\010 \001(\010\"\242\001\n\026CProtoItemTeamShowcase\022\017\n\007her"
    "o_id\030\001 \001(\r\022\033\n\023status_effect_index\030\002 \001(\r\022"
    "\025\n\rsequence_name\030\003 \001(\t\022\r\n\005cycle\030\004 \001(\002\022\020\n"
    "\010wearable\030\005 \003(\r\022\023\n\013inscription\030\006 \001(\t\022\r\n\005"
    "style\030\007 \003(\r\";\n\032CMatchPlayerAbilityUpgrad"
    "e\022\017\n\007ability\030\001 \001(\r\022\014\n\004time\030\002 \001(\r\"A\n\035CMat"
    "chAdditionalUnitInventory\022\021\n\tunit_name\030\001"
    " \001(\t\022\r\n\005items\030\002 \003(\r\"H\n\031CMatchPlayerPerma"
    "nentBuff\022\026\n\016permanent_buff\030\001 \001(\r\022\023\n\013stac"
    "k_count\030\002 \001(\r\"G\n\025CMatchHeroSelectEvent\022\017"
    "\n\007is_pick\030\001 \001(\010\022\014\n\004team\030\002 \001(\r\022\017\n\007hero_id"
    "\030\003 \001(\r\"\213\001\n$CMsgDOTAProcessFantasySchedul"
    "edEvent\022\r\n\005event\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001("
    "\r\022\031\n\021fantasy_league_id\030\003 \001(\r\022\016\n\006season\030\004"
    " \001(\r\022\026\n\016reference_data\030\005 \001(\r\";\n\024CMsgDOTA"
    "HasItemQuery\022\022\n\naccount_id\030\001 \001(\r\022\017\n\007item"
    "_id\030\002 \001(\004\"+\n\027CMsgDOTAHasItemResponse\022\020\n\010"
    "has_item\030\001 \001(\010\"C\n\030CMsgDOTAHasItemDefsQue"
    "ry\022\022\n\naccount_id\030\001 \001(\r\022\023\n\013itemdef_ids\030\002 "
    "\003(\r\"0\n\033CMsgDOTAHasItemDefsResponse\022\021\n\tha"
    "s_items\030\001 \001(\010\"O\n\033CMsgGCGetPlayerCardItem"
    "Info\022\022\n\naccount_id\030\001 \001(\r\022\034\n\024player_card_"
    "item_ids\030\002 \003(\004\"\320\001\n#CMsgGCGetPlayerCardIt"
    "emInfoResponse\022N\n\021player_card_infos\030\001 \003("
    "\01323.CMsgGCGetPlayerCardItemInfoResponse."
    "PlayerCardInfo\032Y\n\016PlayerCardInfo\022\033\n\023play"
    "er_card_item_id\030\001 \001(\004\022\022\n\naccount_id\030\002 \001("
    "\r\022\026\n\016packed_bonuses\030\003 \001(\004\"F\n\037CMsgGCToGCF"
    "antasySetMatchLeague\022\020\n\010match_id\030\001 \001(\004\022\021"
    "\n\tleague_id\030\002 \001(\r\"a\n\027CSODOTAMapLocationS"
    "tate\022\030\n\naccount_id\030\001 \001(\rB\004\200\246\035\001\022\031\n\013locati"
    "on_id\030\002 \001(\005B\004\200\246\035\001\022\021\n\tcompleted\030\003 \001(\010\"*\n\023"
    "CMsgLeagueAdminList\022\023\n\013account_ids\030\001 \003(\r"
    "\"\200\001\n\032CCompendiumTimestampedData\022\021\n\tgame_"
    "time\030\001 \001(\r\022\013\n\003gpm\030\002 \001(\r\022\013\n\003xpm\030\003 \001(\r\022\r\n\005"
    "kills\030\004 \001(\r\022\016\n\006deaths\030\005 \001(\r\022\026\n\016item_purc"
    "hases\030\006 \003(\r\"R\n\027CCompendiumGameTimeline\022)"
    "\n\004data\030\001 \003(\0132\033.CCompendiumTimestampedDat"
    "a\022\014\n\004tags\030\002 \003(\t\">\n\023CCompendiumGameList\022\'"
    "\n\005games\030\001 \003(\0132\030.CCompendiumGameTimeline\""
    "L\n\024CAdditionalEquipSlot\022\020\n\010class_id\030\001 \001("
    "\r\022\017\n\007slot_id\030\002 \001(\r\022\021\n\tdef_index\030\003 \001(\r\"\236\014"
    "\n\026CMsgDOTACombatLogEntry\022;\n\004type\030\001 \001(\0162\025"
    ".DOTA_COMBATLOG_TYPES:\026DOTA_COMBATLOG_IN"
    "VALID\022\023\n\013target_name\030\002 \001(\r\022\032\n\022target_sou"
    "rce_name\030\003 \001(\r\022\025\n\rattacker_name\030\004 \001(\r\022\032\n"
    "\022damage_source_name\030\005 \001(\r\022\026\n\016inflictor_n"
    "ame\030\006 \001(\r\022\034\n\024is_attacker_illusion\030\007 \001(\010\022"
    "\030\n\020is_attacker_hero\030\010 \001(\010\022\032\n\022is_target_i"
    "llusion\030\t \001(\010\022\026\n\016is_target_hero\030\n \001(\010\022\032\n"
    "\022is_visible_radiant\030\013 \001(\010\022\027\n\017is_visible_"
    "dire\030\014 \001(\010\022\r\n\005value\030\r \001(\r\022\016\n\006health\030\016 \001("
    "\005\022\021\n\ttimestamp\030\017 \001(\002\022\025\n\rstun_duration\030\020 "
    "\001(\002\022\025\n\rslow_duration\030\021 \001(\002\022\034\n\024is_ability"
    "_toggle_on\030\022 \001(\010\022\035\n\025is_ability_toggle_of"
    "f\030\023 \001(\010\022\025\n\rability_level\030\024 \001(\r\022\022\n\nlocati"
    "on_x\030\025 \001(\002\022\022\n\nlocation_y\030\026 \001(\002\022\023\n\013gold_r"
    "eason\030\027 \001(\r\022\025\n\rtimestamp_raw\030\030 \001(\002\022\031\n\021mo"
    "difier_duration\030\031 \001(\002\022\021\n\txp_reason\030\032 \001(\r"
    "\022\021\n\tlast_hits\030\033 \001(\r\022\025\n\rattacker_team\030\034 \001"
    "(\r\022\023\n\013target_team\030\035 \001(\r\022\030\n\020obs_wards_pla"
    "ced\030\036 \001(\r\022\026\n\016assist_player0\030\037 \001(\r\022\026\n\016ass"
    "ist_player1\030  \001(\r\022\026\n\016assist_player2\030! \001("
    "\r\022\026\n\016assist_player3\030\" \001(\r\022\023\n\013stack_count"
    "\030# \001(\r\022\027\n\017hidden_modifier\030$ \001(\010\022\032\n\022is_ta"
    "rget_building\030% \001(\010\022\031\n\021neutral_camp_type"
    "\030& \001(\r\022\021\n\trune_type\030\' \001(\r\022\026\n\016assist_play"
    "ers\030( \003(\r\022\024\n\014is_heal_save\030) \001(\010\022\033\n\023is_ul"
    "timate_ability\030* \001(\010\022\033\n\023attacker_hero_le"
    "vel\030+ \001(\r\022\031\n\021target_hero_level\030, \001(\r\022\013\n\003"
    "xpm\030- \001(\r\022\013\n\003gpm\030. \001(\r\022\026\n\016event_location"
    "\030/ \001(\r\022\026\n\016target_is_self\0300 \001(\010\022\023\n\013damage"
    "_type\0301 \001(\r\022\035\n\025invisibility_modifier\0302 \001"
    "(\010\022\027\n\017damage_category\0303 \001(\r\022\020\n\010networth\030"
    "4 \001(\r\022\025\n\rbuilding_type\0305 \001(\r\022!\n\031modifier"
    "_elapsed_duration\0306 \001(\002\022\030\n\020silence_modif"
    "ier\0307 \001(\010\022\033\n\023heal_from_lifesteal\0308 \001(\010\022\027"
    "\n\017modifier_purged\0309 \001(\010\022\024\n\014spell_evaded\030"
    ": \001(\010\022\"\n\032motion_controller_modifier\030; \001("
    "\010\022\027\n\017long_range_kill\030< \001(\010\022\036\n\026modifier_p"
    "urge_ability\030= \001(\r\022\032\n\022modifier_purge_npc"
    "\030> \001(\r\"\257\007\n\023CMsgDOTAProfileCard\022\022\n\naccoun"
    "t_id\030\001 \001(\r\022\034\n\024background_def_index\030\002 \001(\r"
    "\022(\n\005slots\030\003 \003(\0132\031.CMsgDOTAProfileCard.Sl"
    "ot\022\024\n\014badge_points\030\004 \001(\r\022\024\n\014event_points"
    "\030\005 \001(\r\022\020\n\010event_id\030\006 \001(\r\0228\n\031recent_battl"
    "e_cup_victory\030\007 \001(\0132\025.CMsgBattleCupVicto"
    "ry\032\255\004\n\004Slot\022\017\n\007slot_id\030\001 \001(\r\0220\n\006trophy\030\002"
    " \001(\0132 .CMsgDOTAProfileCard.Slot.Trophy\022,"
    "\n\004stat\030\003 \001(\0132\036.CMsgDOTAProfileCard.Slot."
    "Stat\022,\n\004item\030\004 \001(\0132\036.CMsgDOTAProfileCard"
    ".Slot.Item\022,\n\004hero\030\005 \001(\0132\036.CMsgDOTAProfi"
    "leCard.Slot.Hero\0224\n\010emoticon\030\006 \001(\0132\".CMs"
    "gDOTAProfileCard.Slot.Emoticon\0321\n\006Trophy"
    "\022\021\n\ttrophy_id\030\001 \001(\r\022\024\n\014trophy_score\030\002 \001("
    "\r\032[\n\004Stat\022\?\n\007stat_id\030\001 \001(\0162\034.CMsgDOTAPro"
    "fileCard.EStatID:\020k_eStat_SoloRank\022\022\n\nst"
    "at_score\030\002 \001(\r\0320\n\004Item\022\027\n\017serialized_ite"
    "m\030\001 \001(\014\022\017\n\007item_id\030\002 \001(\004\032\?\n\004Hero\022\017\n\007hero"
    "_id\030\001 \001(\r\022\021\n\thero_wins\030\002 \001(\r\022\023\n\013hero_los"
    "ses\030\003 \001(\r\032\037\n\010Emoticon\022\023\n\013emoticon_id\030\001 \001"
    "(\r\"\223\001\n\007EStatID\022\024\n\020k_eStat_SoloRank\020\001\022\025\n\021"
    "k_eStat_PartyRank\020\002\022\020\n\014k_eStat_Wins\020\003\022\024\n"
    "\020k_eStat_Commends\020\004\022\027\n\023k_eStat_GamesPlay"
    "ed\020\005\022\032\n\026k_eStat_FirstMatchDate\020\006\"\216\003\n\026CSO"
    "DOTAPlayerChallenge\022\030\n\naccount_id\030\001 \001(\rB"
    "\004\200\246\035\001\022\026\n\010event_id\030\002 \001(\rB\004\200\246\035\001\022\025\n\007slot_id"
    "\030\003 \001(\rB\004\200\246\035\001\022\026\n\016challenge_type\030\004 \001(\r\022\023\n\013"
    "int_param_0\030\005 \001(\r\022\023\n\013int_param_1\030\006 \001(\r\022\024"
    "\n\014created_time\030\007 \001(\r\022\021\n\tcompleted\030\010 \001(\r\022"
    "\023\n\013sequence_id\030\t \001(\r\022\026\n\016challenge_tier\030\n"
    " \001(\r\022\r\n\005flags\030\013 \001(\r\022\020\n\010attempts\030\014 \001(\r\022\026\n"
    "\016complete_limit\030\r \001(\r\022\022\n\nquest_rank\030\016 \001("
    "\r\"F\n\006EFlags\022\"\n\036eFlag_InstantRerollUncomp"
    "leted\020\001\022\030\n\024eFlag_QuestChallenge\020\002\"L\n#CMs"
    "gClientToGCRerollPlayerChallenge\022\020\n\010even"
    "t_id\030\001 \001(\r\022\023\n\013sequence_id\030\003 \001(\r\"\360\001\n#CMsg"
    "GCRerollPlayerChallengeResponse\022M\n\006resul"
    "t\030\001 \001(\0162,.CMsgGCRerollPlayerChallengeRes"
    "ponse.EResult:\017eResult_Success\"z\n\007EResul"
    "t\022\023\n\017eResult_Success\020\000\022\023\n\017eResult_Droppe"
    "d\020\001\022\024\n\020eResult_NotFound\020\002\022\026\n\022eResult_Can"
    "tReroll\020\003\022\027\n\023eResult_ServerError\020\004\"M\n\030CM"
    "sgGCTopCustomGamesList\022\030\n\020top_custom_gam"
    "es\030\001 \003(\004\022\027\n\017game_of_the_day\030\002 \001(\004\"\264\032\n\031CM"
    "sgDOTARealtimeGameStats\0226\n\005match\030\001 \001(\0132\'"
    ".CMsgDOTARealtimeGameStats.MatchDetails\022"
    "5\n\005teams\030\002 \003(\0132&.CMsgDOTARealtimeGameSta"
    "ts.TeamDetails\022=\n\tbuildings\030\003 \003(\0132*.CMsg"
    "DOTARealtimeGameStats.BuildingDetails\0228\n"
    "\ngraph_data\030\004 \001(\0132$.CMsgDOTARealtimeGame"
    "Stats.GraphData\022\023\n\013delta_frame\030\005 \001(\010\032\306\001\n"
    "\013TeamDetails\022\023\n\013team_number\030\001 \001(\r\022\017\n\007tea"
    "m_id\030\002 \001(\r\022\021\n\tteam_name\030\003 \001(\t\022\021\n\tteam_lo"
    "go\030\004 \001(\006\022\r\n\005score\030\005 \001(\r\0229\n\007players\030\006 \003(\013"
    "2(.CMsgDOTARealtimeGameStats.PlayerDetai"
    "ls\022\021\n\tonly_team\030\007 \001(\010\022\016\n\006cheers\030\010 \001(\r\032W\n"
    "\013ItemDetails\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\014"
    "\n\004time\030\003 \001(\005\022\014\n\004sold\030\004 \001(\010\022\022\n\nstackcount"
    "\030\005 \001(\r\032a\n\016AbilityDetails\022\n\n\002id\030\001 \001(\r\022\014\n\004"
    "name\030\002 \001(\t\022\r\n\005level\030\003 \001(\r\022\020\n\010cooldown\030\004 "
    "\001(\002\022\024\n\014cooldown_max\030\005 \001(\002\032C\n\017HeroToHeroS"
    "tats\022\020\n\010victimid\030\001 \001(\r\022\r\n\005kills\030\002 \001(\r\022\017\n"
    "\007assists\030\003 \001(\r\032\031\n\013AbilityList\022\n\n\002id\030\001 \003("
    "\r\032\345\t\n\rPlayerDetails\022\021\n\taccountid\030\001 \001(\r\022\020"
    "\n\010playerid\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\014\n\004team\030\004"
    " \001(\r\022\016\n\006heroid\030\005 \001(\r\022\024\n\014healthpoints\030\006 \001"
    "(\r\022\027\n\017maxhealthpoints\030\007 \001(\r\022\027\n\017healthreg"
    "enrate\030\010 \001(\002\022\022\n\nmanapoints\030\t \001(\r\022\025\n\rmaxm"
    "anapoints\030\n \001(\r\022\025\n\rmanaregenrate\030\013 \001(\002\022\025"
    "\n\rbase_strength\030\014 \001(\r\022\024\n\014base_agility\030\r "
    "\001(\r\022\031\n\021base_intelligence\030\016 \001(\r\022\022\n\nbase_a"
    "rmor\030\017 \001(\005\022\026\n\016base_movespeed\030\020 \001(\r\022\023\n\013ba"
    "se_damage\030\021 \001(\r\022\020\n\010strength\030\022 \001(\r\022\017\n\007agi"
    "lity\030\023 \001(\r\022\024\n\014intelligence\030\024 \001(\r\022\r\n\005armo"
    "r\030\025 \001(\005\022\021\n\tmovespeed\030\026 \001(\r\022\016\n\006damage\030\027 \001"
    "(\r\022\023\n\013hero_damage\030\030 \001(\r\022\024\n\014tower_damage\030"
    "\031 \001(\r\022<\n\tabilities\030\032 \003(\0132).CMsgDOTARealt"
    "imeGameStats.AbilityDetails\022\r\n\005level\030\033 \001"
    "(\r\022\022\n\nkill_count\030\034 \001(\r\022\023\n\013death_count\030\035 "
    "\001(\r\022\025\n\rassists_count\030\036 \001(\r\022\024\n\014denies_cou"
    "nt\030\037 \001(\r\022\020\n\010lh_count\030  \001(\r\022\024\n\014hero_heali"
    "ng\030! \001(\r\022\024\n\014gold_per_min\030\" \001(\r\022\022\n\nxp_per"
    "_min\030# \001(\r\022\020\n\010net_gold\030$ \001(\r\022\014\n\004gold\030% \001"
    "(\r\022\t\n\001x\030& \001(\002\022\t\n\001y\030\' \001(\002\022\024\n\014respawn_time"
    "\030( \001(\005\022\031\n\021ultimate_cooldown\030) \001(\r\022\023\n\013has"
    "_buyback\030* \001(\010\0225\n\005items\030+ \003(\0132&.CMsgDOTA"
    "RealtimeGameStats.ItemDetails\022:\n\nstashit"
    "ems\030, \003(\0132&.CMsgDOTARealtimeGameStats.It"
    "emDetails\022@\n\020itemshoppinglist\030- \003(\0132&.CM"
    "sgDOTARealtimeGameStats.ItemDetails\022;\n\013l"
    "evelpoints\030. \003(\0132&.CMsgDOTARealtimeGameS"
    "tats.AbilityList\022F\n\022hero_to_hero_stats\030/"
    " \003(\0132*.CMsgDOTARealtimeGameStats.HeroToH"
    "eroStats\022\024\n\014has_ultimate\0300 \001(\010\022\031\n\021has_ul"
    "timate_mana\0301 \001(\010\032\203\001\n\017BuildingDetails\022\014\n"
    "\004team\030\002 \001(\r\022\017\n\007heading\030\003 \001(\002\022\014\n\004lane\030\004 \001"
    "(\r\022\014\n\004tier\030\005 \001(\r\022\014\n\004type\030\006 \001(\r\022\t\n\001x\030\007 \001("
    "\002\022\t\n\001y\030\010 \001(\002\022\021\n\tdestroyed\030\t \001(\010\032N\n\013KillD"
    "etails\022\021\n\tplayer_id\030\001 \001(\r\022\022\n\ndeath_time\030"
    "\002 \001(\005\022\030\n\020killer_player_id\030\003 \001(\r\032V\n\022Broad"
    "casterDetails\022\021\n\tplayer_id\030\001 \001(\r\022\025\n\rsele"
    "cted_hero\030\002 \001(\r\022\026\n\016selected_graph\030\003 \001(\r\032"
    ",\n\016PickBanDetails\022\014\n\004hero\030\001 \001(\r\022\014\n\004team\030"
    "\002 \001(\r\032\376\003\n\014MatchDetails\022\027\n\017server_steam_i"
    "d\030\001 \001(\006\022\017\n\007matchid\030\002 \001(\004\022\021\n\ttimestamp\030\003 "
    "\001(\r\022\023\n\013time_of_day\030\004 \001(\002\022\035\n\025is_nightstal"
    "ker_night\030\005 \001(\010\022\021\n\tgame_time\030\006 \001(\005\022\026\n\016te"
    "amid_radiant\030\010 \001(\r\022\023\n\013teamid_dire\030\t \001(\r\022"
    "8\n\005picks\030\n \003(\0132).CMsgDOTARealtimeGameSta"
    "ts.PickBanDetails\0227\n\004bans\030\013 \003(\0132).CMsgDO"
    "TARealtimeGameStats.PickBanDetails\0225\n\005ki"
    "lls\030\014 \003(\0132&.CMsgDOTARealtimeGameStats.Ki"
    "llDetails\022C\n\014broadcasters\030\r \003(\0132-.CMsgDO"
    "TARealtimeGameStats.BroadcasterDetails\022\021"
    "\n\tgame_mode\030\016 \001(\r\022\021\n\tleague_id\030\017 \001(\r\022\023\n\013"
    "single_team\030\020 \001(\010\022\023\n\013cheers_peak\030\021 \001(\r\032\357"
    "\003\n\tGraphData\022\022\n\ngraph_gold\030\001 \003(\005\022\020\n\010grap"
    "h_xp\030\002 \003(\005\022\022\n\ngraph_kill\030\003 \003(\005\022\023\n\013graph_"
    "tower\030\004 \003(\005\022\021\n\tgraph_rax\030\005 \003(\005\022N\n\016team_l"
    "oc_stats\030\006 \003(\01326.CMsgDOTARealtimeGameSta"
    "ts.GraphData.TeamLocationStats\032\036\n\rLocati"
    "onStats\022\r\n\005stats\030\001 \003(\005\032Z\n\021TeamLocationSt"
    "ats\022E\n\tloc_stats\030\001 \003(\01322.CMsgDOTARealtim"
    "eGameStats.GraphData.LocationStats\"[\n\005eS"
    "tat\022\023\n\017CreepGoldEarned\020\000\022\022\n\016KillGoldEarn"
    "ed\020\001\022\033\n\027DeathAndBuybackGoldLost\020\002\022\014\n\010XPE"
    "arned\020\003\"W\n\teLocation\022\013\n\007BotLane\020\000\022\013\n\007Mid"
    "Lane\020\001\022\013\n\007TopLane\020\002\022\n\n\006Jungle\020\003\022\014\n\010Ancie"
    "nts\020\004\022\t\n\005Other\020\005\"\257\010\n\036CMsgDOTARealtimeGam"
    "eStatsTerse\022;\n\005match\030\001 \001(\0132,.CMsgDOTARea"
    "ltimeGameStatsTerse.MatchDetails\022:\n\005team"
    "s\030\002 \003(\0132+.CMsgDOTARealtimeGameStatsTerse"
    ".TeamDetails\022B\n\tbuildings\030\003 \003(\0132/.CMsgDO"
    "TARealtimeGameStatsTerse.BuildingDetails"
    "\022=\n\ngraph_data\030\004 \001(\0132).CMsgDOTARealtimeG"
    "ameStatsTerse.GraphData\022\023\n\013delta_frame\030\005"
    " \001(\010\032\250\001\n\013TeamDetails\022\023\n\013team_number\030\001 \001("
    "\r\022\017\n\007team_id\030\002 \001(\r\022\021\n\tteam_name\030\003 \001(\t\022\021\n"
    "\tteam_logo\030\004 \001(\006\022\r\n\005score\030\005 \001(\r\022>\n\007playe"
    "rs\030\006 \003(\0132-.CMsgDOTARealtimeGameStatsTers"
    "e.PlayerDetails\032\373\001\n\rPlayerDetails\022\021\n\tacc"
    "ountid\030\001 \001(\r\022\020\n\010playerid\030\002 \001(\r\022\014\n\004name\030\003"
    " \001(\t\022\014\n\004team\030\004 \001(\r\022\016\n\006heroid\030\005 \001(\r\022\r\n\005le"
    "vel\030\006 \001(\r\022\022\n\nkill_count\030\007 \001(\r\022\023\n\013death_c"
    "ount\030\010 \001(\r\022\025\n\rassists_count\030\t \001(\r\022\024\n\014den"
    "ies_count\030\n \001(\r\022\020\n\010lh_count\030\013 \001(\r\022\014\n\004gol"
    "d\030\014 \001(\r\022\t\n\001x\030\r \001(\002\022\t\n\001y\030\016 \001(\002\032\203\001\n\017Buildi"
    "ngDetails\022\014\n\004team\030\001 \001(\r\022\017\n\007heading\030\002 \001(\002"
    "\022\014\n\004type\030\003 \001(\r\022\014\n\004lane\030\004 \001(\r\022\014\n\004tier\030\005 \001"
    "(\r\022\t\n\001x\030\006 \001(\002\022\t\n\001y\030\007 \001(\002\022\021\n\tdestroyed\030\010 "
    "\001(\010\032\253\001\n\014MatchDetails\022\027\n\017server_steam_id\030"
    "\001 \001(\006\022\017\n\007matchid\030\002 \001(\004\022\021\n\ttimestamp\030\003 \001("
    "\r\022\021\n\tgame_time\030\004 \001(\005\022%\n\035steam_broadcaste"
    "r_account_ids\030\006 \003(\r\022\021\n\tgame_mode\030\007 \001(\r\022\021"
    "\n\tleague_id\030\010 \001(\r\032\037\n\tGraphData\022\022\n\ngraph_"
    "gold\030\001 \003(\005\"\?\n CMsgGCToClientMatchGroupsV"
    "ersion\022\033\n\023matchgroups_version\030\001 \001(\r\"\301\001\n\033"
    "CMsgDOTASDOHeroStatsHistory\022\020\n\010match_id\030"
    "\001 \001(\004\022\021\n\tgame_mode\030\002 \001(\r\022\022\n\nlobby_type\030\003"
    " \001(\r\022\022\n\nstart_time\030\004 \001(\r\022\013\n\003won\030\005 \001(\010\022\013\n"
    "\003gpm\030\006 \001(\r\022\013\n\003xpm\030\007 \001(\r\022\r\n\005kills\030\010 \001(\r\022\016"
    "\n\006deaths\030\t \001(\r\022\017\n\007assists\030\n \001(\r\"\367\002\n\025CMsg"
    "DOTASeasonRewards\022.\n\007rewards\030\001 \003(\0132\035.CMs"
    "gDOTASeasonRewards.Reward\032\340\001\n\006Reward\022\014\n\004"
    "name\030\001 \001(\t\022\017\n\007itemdef\030\002 \001(\r\022\022\n\nimportanc"
    "e\030\003 \001(\r\022\022\n\nbase_level\030\004 \001(\r\022\024\n\014repeat_le"
    "vel\030\005 \001(\r\022A\n\013reward_type\030\006 \001(\0162\".CMsgDOT"
    "ASeasonRewards.ERewardType:\010EconItem\022\r\n\005"
    "image\030\007 \001(\t\022\021\n\taction_id\030\010 \001(\r\022\024\n\014effect"
    "_index\030\t \001(\r\"K\n\013ERewardType\022\014\n\010EconItem\020"
    "\000\022\020\n\014MysteryWheel\020\001\022\021\n\rAbilityEffect\020\002\022\t"
    "\n\005Other\020\003\"\256\002\n\032CMsgDOTASeasonAchievements"
    "\022=\n\014achievements\030\001 \003(\0132\'.CMsgDOTASeasonA"
    "chievements.Achievement\032\320\001\n\013Achievement\022"
    "\014\n\004name\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022\r\n\005im"
    "age\030\003 \001(\t\022\021\n\taction_id\030\004 \001(\r\022\022\n\nmax_gran"
    "ts\030\005 \001(\r\022\025\n\rnormal_points\030\006 \001(\r\022\034\n\024track"
    "ing_achievement\030\007 \001(\r\022\030\n\020achievement_goa"
    "l\030\010 \001(\r\022\031\n\021achievement_level\030\t \001(\r\"\311\020\n\031C"
    "MsgDOTASeasonPredictions\022:\n\013predictions\030"
    "\001 \003(\0132%.CMsgDOTASeasonPredictions.Predic"
    "tion\022H\n\023in_game_predictions\030\002 \003(\0132+.CMsg"
    "DOTASeasonPredictions.InGamePrediction\022)"
    "\n!in_game_prediction_count_per_game\030\003 \001("
    "\r\0220\n(in_game_prediction_voting_period_mi"
    "nutes\030\004 \001(\r\032S\n\006Choice\022\r\n\005value\030\001 \001(\r\022\014\n\004"
    "name\030\002 \001(\t\022\025\n\rmin_raw_value\030\003 \001(\r\022\025\n\rmax"
    "_raw_value\030\004 \001(\r\032\034\n\007Answers\022\021\n\tanswer_id"
    "\030\001 \001(\r\032-\n\016QueryKeyValues\022\014\n\004name\030\001 \001(\t\022\r"
    "\n\005value\030\002 \001(\t\032\377\003\n\nPrediction\022A\n\004type\030\001 \001"
    "(\0162*.CMsgDOTASeasonPredictions.ePredicti"
    "onType:\007Generic\022\020\n\010question\030\002 \001(\t\0222\n\007cho"
    "ices\030\003 \003(\0132!.CMsgDOTASeasonPredictions.C"
    "hoice\022\024\n\014selection_id\030\004 \001(\r\022\022\n\nstart_dat"
    "e\030\005 \001(\r\022\021\n\tlock_date\030\006 \001(\r\022\016\n\006reward\030\007 \001"
    "(\r\022F\n\013answer_type\030\010 \001(\0162&.CMsgDOTASeason"
    "Predictions.eAnswerType:\tSingleInt\022\021\n\tan"
    "swer_id\030\t \001(\r\0223\n\007answers\030\n \003(\0132\".CMsgDOT"
    "ASeasonPredictions.Answers\022\022\n\nquery_name"
    "\030\013 \001(\t\022\031\n\021query_bind_params\030\014 \003(\r\022\034\n\024loc"
    "k_on_selection_id\030\r \001(\r\022\037\n\027lock_on_selec"
    "tion_value\030\016 \001(\r\022\035\n\025lock_on_selection_se"
    "t\030\017 \001(\010\032\350\004\n\020InGamePrediction\022\n\n\002id\030\001 \001(\r"
    "\022\014\n\004name\030\002 \001(\t\022A\n\004type\030\003 \001(\0162*.CMsgDOTAS"
    "easonPredictions.ePredictionType:\007Generi"
    "c\022L\n\005group\030\004 \001(\01622.CMsgDOTASeasonPredict"
    "ions.eRandomSelectionGroup_t:\tEarlyGame\022"
    "\020\n\010question\030\005 \001(\t\0222\n\007choices\030\006 \003(\0132!.CMs"
    "gDOTASeasonPredictions.Choice\022\027\n\017require"
    "d_heroes\030\007 \003(\t\022\022\n\nquery_name\030\010 \001(\t\022\?\n\014qu"
    "ery_values\030\t \003(\0132).CMsgDOTASeasonPredict"
    "ions.QueryKeyValues\022Z\n\026answer_resolution"
    "_type\030\n \001(\0162,.CMsgDOTASeasonPredictions."
    "eResolutionType_t:\014InvalidQuery\022\027\n\017point"
    "s_to_grant\030\013 \001(\r\022\025\n\rreward_action\030\014 \001(\r\022"
    "\035\n\025debug_force_selection\030\r \001(\r\022J\n\016raw_va"
    "lue_type\030\016 \001(\0162*.CMsgDOTASeasonPredictio"
    "ns.eRawValueType_t:\006Number\"V\n\017ePredictio"
    "nType\022\013\n\007Generic\020\000\022\010\n\004Hero\020\001\022\010\n\004Team\020\002\022\n"
    "\n\006Player\020\003\022\013\n\007Special\020\004\022\t\n\005YesNo\020\005\"\221\001\n\013e"
    "AnswerType\022\r\n\tSingleInt\020\000\022\017\n\013SingleFloat"
    "\020\001\022\017\n\013MultipleInt\020\002\022\021\n\rMultipleFloat\020\003\022\016"
    "\n\nAnswerTeam\020\004\022\016\n\nSingleTime\020\005\022\020\n\014Multip"
    "leTime\020\006\022\014\n\010NoAnswer\020\007\"\324\001\n\021eResolutionTy"
    "pe_t\022\020\n\014InvalidQuery\020\000\022\024\n\020FirstToPassQue"
    "ry\020\001\022\023\n\017LastToPassQuery\020\002\022\026\n\022LastRemaini"
    "ngQuery\020\003\022\022\n\016MaxToPassQuery\020\004\022\022\n\016MinToPa"
    "ssQuery\020\005\022\014\n\010SumQuery\020\006\022\031\n\025MaxTeamSumToP"
    "assQuery\020\007\022\031\n\025MinTeamSumToPassQuery\020\010\"N\n"
    "\027eRandomSelectionGroup_t\022\r\n\tEarlyGame\020\000\022"
    "\013\n\007MidGame\020\001\022\014\n\010LateGame\020\002\022\t\n\005Count\020\003\"\'\n"
    "\017eRawValueType_t\022\n\n\006Number\020\000\022\010\n\004Time\020\001\"\330"
    "\030\n\rCMsgDOTAMatch\022\020\n\010duration\030\003 \001(\r\022\021\n\tst"
    "artTime\030\004 \001(\007\022&\n\007players\030\005 \003(\0132\025.CMsgDOT"
    "AMatch.Player\022\020\n\010match_id\030\006 \001(\004\022\024\n\014tower"
    "_status\030\010 \003(\r\022\027\n\017barracks_status\030\t \003(\r\022\017"
    "\n\007cluster\030\n \001(\r\022\030\n\020first_blood_time\030\014 \001("
    "\r\022\023\n\013replay_salt\030\r \001(\007\022\021\n\tserver_ip\030\016 \001("
    "\007\022\023\n\013server_port\030\017 \001(\r\022\022\n\nlobby_type\030\020 \001"
    "(\r\022\025\n\rhuman_players\030\021 \001(\r\022\025\n\raverage_ski"
    "ll\030\022 \001(\r\022\024\n\014game_balance\030\023 \001(\002\022\027\n\017radian"
    "t_team_id\030\024 \001(\r\022\024\n\014dire_team_id\030\025 \001(\r\022\020\n"
    "\010leagueid\030\026 \001(\r\022\031\n\021radiant_team_name\030\027 \001"
    "(\t\022\026\n\016dire_team_name\030\030 \001(\t\022\031\n\021radiant_te"
    "am_logo\030\031 \001(\004\022\026\n\016dire_team_logo\030\032 \001(\004\022\035\n"
    "\025radiant_team_complete\030\033 \001(\r\022\032\n\022dire_tea"
    "m_complete\030\034 \001(\r\022\026\n\016positive_votes\030\035 \001(\r"
    "\022\026\n\016negative_votes\030\036 \001(\r\0225\n\tgame_mode\030\037 "
    "\001(\0162\016.DOTA_GameMode:\022DOTA_GAMEMODE_NONE\022"
    "*\n\npicks_bans\030  \003(\0132\026.CMatchHeroSelectEv"
    "ent\022\025\n\rmatch_seq_num\030! \001(\004\022B\n\014replay_sta"
    "te\030\" \001(\0162\032.CMsgDOTAMatch.ReplayState:\020RE"
    "PLAY_AVAILABLE\022\030\n\020radiant_guild_id\030# \001(\r"
    "\022\025\n\rdire_guild_id\030$ \001(\r\022\030\n\020radiant_team_"
    "tag\030% \001(\t\022\025\n\rdire_team_tag\030& \001(\t\022\021\n\tseri"
    "es_id\030\' \001(\r\022\023\n\013series_type\030( \001(\r\022\?\n\024broa"
    "dcaster_channels\030+ \003(\0132!.CMsgDOTAMatch.B"
    "roadcasterChannel\022\016\n\006engine\030, \001(\r\0227\n\020cus"
    "tom_game_data\030- \001(\0132\035.CMsgDOTAMatch.Cust"
    "omGameData\022\023\n\013match_flags\030. \001(\r\022\034\n\024priva"
    "te_metadata_key\030/ \001(\007\022\032\n\022radiant_team_sc"
    "ore\0300 \001(\r\022\027\n\017dire_team_score\0301 \001(\r\022>\n\rma"
    "tch_outcome\0302 \001(\0162\016.EMatchOutcome:\027k_EMa"
    "tchOutcome_Unknown\022\025\n\rtournament_id\0303 \001("
    "\r\022\030\n\020tournament_round\0304 \001(\r\022\031\n\021pre_game_"
    "duration\0305 \001(\r\032\311\013\n\006Player\022\022\n\naccount_id\030"
    "\001 \001(\r\022\023\n\013player_slot\030\002 \001(\r\022\017\n\007hero_id\030\003 "
    "\001(\r\022\016\n\006item_0\030\004 \001(\r\022\016\n\006item_1\030\005 \001(\r\022\016\n\006i"
    "tem_2\030\006 \001(\r\022\016\n\006item_3\030\007 \001(\r\022\016\n\006item_4\030\010 "
    "\001(\r\022\016\n\006item_5\030\t \001(\r\022\016\n\006item_6\030; \001(\r\022\016\n\006i"
    "tem_7\030< \001(\r\022\016\n\006item_8\030= \001(\r\022\"\n\032expected_"
    "team_contribution\030\n \001(\002\022\025\n\rscaled_metric"
    "\030\013 \001(\002\022\025\n\rprevious_rank\030\014 \001(\r\022\023\n\013rank_ch"
    "ange\030\r \001(\021\022\021\n\tsolo_rank\0301 \001(\010\022\025\n\rseasona"
    "l_rank\0305 \001(\010\022\r\n\005kills\030\016 \001(\r\022\016\n\006deaths\030\017 "
    "\001(\r\022\017\n\007assists\030\020 \001(\r\022\025\n\rleaver_status\030\021 "
    "\001(\r\022\014\n\004gold\030\022 \001(\r\022\021\n\tlast_hits\030\023 \001(\r\022\016\n\006"
    "denies\030\024 \001(\r\022\024\n\014gold_per_min\030\025 \001(\r\022\022\n\nXP"
    "_per_min\030\026 \001(\r\022\022\n\ngold_spent\030\027 \001(\r\022\023\n\013he"
    "ro_damage\030\030 \001(\r\022\024\n\014tower_damage\030\031 \001(\r\022\024\n"
    "\014hero_healing\030\032 \001(\r\022\r\n\005level\030\033 \001(\r\022\026\n\016ti"
    "me_last_seen\030\034 \001(\r\022\023\n\013player_name\030\035 \001(\t\022"
    "\035\n\025support_ability_value\030\036 \001(\r\022\030\n\020feedin"
    "g_detected\030  \001(\010\022\023\n\013search_rank\030\" \001(\r\022\037\n"
    "\027search_rank_uncertainty\030# \001(\r\022\037\n\027rank_u"
    "ncertainty_change\030$ \001(\005\022\027\n\017hero_play_cou"
    "nt\030% \001(\r\022\020\n\010party_id\030& \001(\006\022\032\n\022scaled_her"
    "o_damage\0306 \001(\r\022\033\n\023scaled_tower_damage\0307 "
    "\001(\r\022\033\n\023scaled_hero_healing\0308 \001(\r\022\024\n\014scal"
    "ed_kills\030\' \001(\002\022\025\n\rscaled_deaths\030( \001(\002\022\026\n"
    "\016scaled_assists\030) \001(\002\022\031\n\021claimed_farm_go"
    "ld\030* \001(\r\022\024\n\014support_gold\030+ \001(\r\022\026\n\016claime"
    "d_denies\030, \001(\r\022\026\n\016claimed_misses\030- \001(\r\022\016"
    "\n\006misses\030. \001(\r\0225\n\020ability_upgrades\030/ \003(\013"
    "2\033.CMatchPlayerAbilityUpgrade\022B\n\032additio"
    "nal_units_inventory\0300 \003(\0132\036.CMatchAdditi"
    "onalUnitInventory\0223\n\017permanent_buffs\0309 \003"
    "(\0132\032.CMatchPlayerPermanentBuff\022>\n\020custom"
    "_game_data\0302 \001(\0132$.CMsgDOTAMatch.Player."
    "CustomGameData\022\032\n\022active_battle_pass\0303 \001"
    "(\010\022\021\n\tnet_worth\0304 \001(\r\022\026\n\016bot_difficulty\030"
    ": \001(\r\0323\n\016CustomGameData\022\021\n\tdota_team\030\001 \001"
    "(\r\022\016\n\006winner\030\002 \001(\010\0323\n\017BroadcasterInfo\022\022\n"
    "\naccount_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\032\221\001\n\022Broa"
    "dcasterChannel\022\024\n\014country_code\030\001 \001(\t\022\023\n\013"
    "description\030\002 \001(\t\0229\n\021broadcaster_infos\030\003"
    " \003(\0132\036.CMsgDOTAMatch.BroadcasterInfo\022\025\n\r"
    "language_code\030\004 \001(\t\032:\n\016CustomGameData\022\026\n"
    "\016custom_game_id\030\001 \001(\004\022\020\n\010map_name\030\002 \001(\t\""
    "P\n\013ReplayState\022\024\n\020REPLAY_AVAILABLE\020\000\022\027\n\023"
    "REPLAY_NOT_RECORDED\020\001\022\022\n\016REPLAY_EXPIRED\020"
    "\002\"\206\001\n\016CMsgPlayerCard\022\022\n\naccount_id\030\001 \001(\r"
    "\0223\n\rstat_modifier\030\002 \003(\0132\034.CMsgPlayerCard"
    ".StatModifier\032+\n\014StatModifier\022\014\n\004stat\030\001 "
    "\001(\r\022\r\n\005value\030\002 \001(\r\"\251\003\n\032CMsgDOTAFantasyPl"
    "ayerStats\022\031\n\021player_account_id\030\001 \001(\r\022\020\n\010"
    "match_id\030\002 \001(\004\022\027\n\017match_completed\030\003 \001(\010\022"
    "\017\n\007team_id\030\004 \001(\r\022\021\n\tleague_id\030\005 \001(\r\022\r\n\005d"
    "elay\030\006 \001(\r\022\021\n\tseries_id\030\007 \001(\r\022\023\n\013series_"
    "type\030\010 \001(\r\022\r\n\005kills\030\n \001(\r\022\016\n\006deaths\030\013 \001("
    "\r\022\n\n\002cs\030\014 \001(\r\022\013\n\003gpm\030\r \001(\002\022\023\n\013tower_kill"
    "s\030\016 \001(\r\022\024\n\014roshan_kills\030\017 \001(\r\022\037\n\027teamfig"
    "ht_participation\030\020 \001(\002\022\024\n\014wards_placed\030\021"
    " \001(\r\022\025\n\rcamps_stacked\030\022 \001(\r\022\025\n\rrunes_gra"
    "bbed\030\023 \001(\r\022\023\n\013first_blood\030\024 \001(\r\022\r\n\005stuns"
    "\030\025 \001(\002\"O\n\037CMsgDOTAFantasyPlayerMatchStat"
    "s\022,\n\007matches\030\001 \003(\0132\033.CMsgDOTAFantasyPlay"
    "erStats\"\367\006\n\024CMsgDOTABotDebugInfo\022\'\n\004bots"
    "\030\001 \003(\0132\031.CMsgDOTABotDebugInfo.Bot\022\034\n\024des"
    "ire_push_lane_top\030\002 \001(\002\022\034\n\024desire_push_l"
    "ane_mid\030\003 \001(\002\022\034\n\024desire_push_lane_bot\030\004 "
    "\001(\002\022\036\n\026desire_defend_lane_top\030\005 \001(\002\022\036\n\026d"
    "esire_defend_lane_mid\030\006 \001(\002\022\036\n\026desire_de"
    "fend_lane_bot\030\007 \001(\002\022\034\n\024desire_farm_lane_"
    "top\030\010 \001(\002\022\034\n\024desire_farm_lane_mid\030\t \001(\002\022"
    "\034\n\024desire_farm_lane_bot\030\n \001(\002\022\032\n\022desire_"
    "farm_roshan\030\013 \001(\002\022\026\n\016execution_time\030\014 \001("
    "\002\032\355\003\n\003Bot\022\027\n\017player_owner_id\030\001 \001(\r\022\017\n\007he"
    "ro_id\030\002 \001(\r\022\022\n\ndifficulty\030\003 \001(\r\022\025\n\rpower"
    "_current\030\004 \001(\r\022\021\n\tpower_max\030\005 \001(\r\022\025\n\rmov"
    "e_target_x\030\006 \001(\r\022\025\n\rmove_target_y\030\007 \001(\r\022"
    "\025\n\rmove_target_z\030\010 \001(\r\022\026\n\016active_mode_id"
    "\030\t \001(\r\022\026\n\016execution_time\030\n \001(\002\022-\n\005modes\030"
    "\013 \003(\0132\036.CMsgDOTABotDebugInfo.Bot.Mode\0220\n"
    "\006action\030\014 \001(\0132 .CMsgDOTABotDebugInfo.Bot"
    ".Action\032t\n\004Mode\022\017\n\007mode_id\030\001 \001(\r\022\016\n\006desi"
    "re\030\002 \001(\002\022\025\n\rtarget_entity\030\003 \001(\r\022\020\n\010targe"
    "t_x\030\004 \001(\r\022\020\n\010target_y\030\005 \001(\r\022\020\n\010target_z\030"
    "\006 \001(\r\0322\n\006Action\022\021\n\taction_id\030\001 \001(\r\022\025\n\rac"
    "tion_target\030\002 \001(\t*U\n\021ESpecialPingValue\022\037"
    "\n\032k_ESpecialPingValue_NoData\020\376\177\022\037\n\032k_ESp"
    "ecialPingValue_Failed\020\377\177*\206\005\n\022EDOTAGCSess"
    "ionNeed\022 \n\034k_EDOTAGCSessionNeed_Unknown\020"
    "\000\022,\n(k_EDOTAGCSessionNeed_UserNoSessionN"
    "eeded\020d\022)\n%k_EDOTAGCSessionNeed_UserInOn"
    "lineGame\020e\022(\n$k_EDOTAGCSessionNeed_UserI"
    "nLocalGame\020f\022-\n)k_EDOTAGCSessionNeed_Use"
    "rInUIWasConnected\020g\022/\n+k_EDOTAGCSessionN"
    "eed_UserInUINeverConnected\020h\022&\n\"k_EDOTAG"
    "CSessionNeed_UserTutorials\020i\0221\n-k_EDOTAG"
    "CSessionNeed_UserInUIWasConnectedIdle\020j\022"
    "3\n/k_EDOTAGCSessionNeed_UserInUINeverCon"
    "nectedIdle\020k\022*\n%k_EDOTAGCSessionNeed_Gam"
    "eServerOnline\020\310\001\022)\n$k_EDOTAGCSessionNeed"
    "_GameServerLocal\020\311\001\022(\n#k_EDOTAGCSessionN"
    "eed_GameServerIdle\020\312\001\022)\n$k_EDOTAGCSessio"
    "nNeed_GameServerRelay\020\313\001\022/\n*k_EDOTAGCSes"
    "sionNeed_GameServerLocalUpload\020\314\001*\366\001\n\025DO"
    "TA_TournamentEvents\022\022\n\016TE_FIRST_BLOOD\020\000\022"
    "\017\n\013TE_GAME_END\020\001\022\021\n\rTE_MULTI_KILL\020\002\022\020\n\014T"
    "E_HERO_DENY\020\003\022\021\n\rTE_AEGIS_DENY\020\004\022\023\n\017TE_A"
    "EGIS_STOLEN\020\005\022\016\n\nTE_GODLIKE\020\006\022\023\n\017TE_COUR"
    "IER_KILL\020\007\022\017\n\013TE_ECHOSLAM\020\010\022\r\n\tTE_RAPIER"
    "\020\t\022\023\n\017TE_EARLY_ROSHAN\020\n\022\021\n\rTE_BLACK_HOLE"
    "\020\013*\207\n\n\024DOTA_COMBATLOG_TYPES\022#\n\026DOTA_COMB"
    "ATLOG_INVALID\020\377\377\377\377\377\377\377\377\377\001\022\031\n\025DOTA_COMBATL"
    "OG_DAMAGE\020\000\022\027\n\023DOTA_COMBATLOG_HEAL\020\001\022\037\n\033"
    "DOTA_COMBATLOG_MODIFIER_ADD\020\002\022\"\n\036DOTA_CO"
    "MBATLOG_MODIFIER_REMOVE\020\003\022\030\n\024DOTA_COMBAT"
    "LOG_DEATH\020\004\022\032\n\026DOTA_COMBATLOG_ABILITY\020\005\022"
    "\027\n\023DOTA_COMBATLOG_ITEM\020\006\022\033\n\027DOTA_COMBATL"
    "OG_LOCATION\020\007\022\027\n\023DOTA_COMBATLOG_GOLD\020\010\022\035"
    "\n\031DOTA_COMBATLOG_GAME_STATE\020\t\022\025\n\021DOTA_CO"
    "MBATLOG_XP\020\n\022\033\n\027DOTA_COMBATLOG_PURCHASE\020"
    "\013\022\032\n\026DOTA_COMBATLOG_BUYBACK\020\014\022\"\n\036DOTA_CO"
    "MBATLOG_ABILITY_TRIGGER\020\r\022\036\n\032DOTA_COMBAT"
    "LOG_PLAYERSTATS\020\016\022\034\n\030DOTA_COMBATLOG_MULT"
    "IKILL\020\017\022\035\n\031DOTA_COMBATLOG_KILLSTREAK\020\020\022%"
    "\n!DOTA_COMBATLOG_TEAM_BUILDING_KILL\020\021\022\036\n"
    "\032DOTA_COMBATLOG_FIRST_BLOOD\020\022\022#\n\037DOTA_CO"
    "MBATLOG_MODIFIER_REFRESH\020\023\022%\n!DOTA_COMBA"
    "TLOG_NEUTRAL_CAMP_STACK\020\024\022\036\n\032DOTA_COMBAT"
    "LOG_PICKUP_RUNE\020\025\022%\n!DOTA_COMBATLOG_REVE"
    "ALED_INVISIBLE\020\026\022\035\n\031DOTA_COMBATLOG_HERO_"
    "SAVED\020\027\022 \n\034DOTA_COMBATLOG_MANA_RESTORED\020"
    "\030\022\037\n\033DOTA_COMBATLOG_HERO_LEVELUP\020\031\022#\n\037DO"
    "TA_COMBATLOG_BOTTLE_HEAL_ALLY\020\032\022 \n\034DOTA_"
    "COMBATLOG_ENDGAME_STATS\020\033\022$\n DOTA_COMBAT"
    "LOG_INTERRUPT_CHANNEL\020\034\022\036\n\032DOTA_COMBATLO"
    "G_ALLIED_GOLD\020\035\022\036\n\032DOTA_COMBATLOG_AEGIS_"
    "TAKEN\020\036\022\036\n\032DOTA_COMBATLOG_MANA_DAMAGE\020\037\022"
    ",\n(DOTA_COMBATLOG_PHYSICAL_DAMAGE_PREVEN"
    "TED\020 \022 \n\034DOTA_COMBATLOG_UNIT_SUMMONED\020!\022"
    "\037\n\033DOTA_COMBATLOG_ATTACK_EVADE\020\"\022\033\n\027DOTA"
    "_COMBATLOG_TREE_CUT\020#\022\"\n\036DOTA_COMBATLOG_"
    "SUCCESSFUL_SCAN\020$\022!\n\035DOTA_COMBATLOG_END_"
    "KILLSTREAK\020%B\005H\001\200\001\000", 22579);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_gcmessages_common.proto", &protobuf_RegisterTypes);
  CSODOTAGameAccountClient::default_instance_ = new CSODOTAGameAccountClient();
  CMsgLobbyEventPoints::default_instance_ = new CMsgLobbyEventPoints();
  CMsgLobbyEventPoints_AccountPoints::default_instance_ = new CMsgLobbyEventPoints_AccountPoints();
  CMsgBattleCupVictory::default_instance_ = new CMsgBattleCupVictory();
  CMsgLobbyBattleCupVictoryList::default_instance_ = new CMsgLobbyBattleCupVictoryList();
  CMsgDOTABroadcastNotification::default_instance_ = new CMsgDOTABroadcastNotification();
  CProtoItemHeroStatue::default_instance_ = new CProtoItemHeroStatue();
  CProtoItemTeamShowcase::default_instance_ = new CProtoItemTeamShowcase();
  CMatchPlayerAbilityUpgrade::default_instance_ = new CMatchPlayerAbilityUpgrade();
  CMatchAdditionalUnitInventory::default_instance_ = new CMatchAdditionalUnitInventory();
  CMatchPlayerPermanentBuff::default_instance_ = new CMatchPlayerPermanentBuff();
  CMatchHeroSelectEvent::default_instance_ = new CMatchHeroSelectEvent();
  CMsgDOTAProcessFantasyScheduledEvent::default_instance_ = new CMsgDOTAProcessFantasyScheduledEvent();
  CMsgDOTAHasItemQuery::default_instance_ = new CMsgDOTAHasItemQuery();
  CMsgDOTAHasItemResponse::default_instance_ = new CMsgDOTAHasItemResponse();
  CMsgDOTAHasItemDefsQuery::default_instance_ = new CMsgDOTAHasItemDefsQuery();
  CMsgDOTAHasItemDefsResponse::default_instance_ = new CMsgDOTAHasItemDefsResponse();
  CMsgGCGetPlayerCardItemInfo::default_instance_ = new CMsgGCGetPlayerCardItemInfo();
  CMsgGCGetPlayerCardItemInfoResponse::default_instance_ = new CMsgGCGetPlayerCardItemInfoResponse();
  CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::default_instance_ = new CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo();
  CMsgGCToGCFantasySetMatchLeague::default_instance_ = new CMsgGCToGCFantasySetMatchLeague();
  CSODOTAMapLocationState::default_instance_ = new CSODOTAMapLocationState();
  CMsgLeagueAdminList::default_instance_ = new CMsgLeagueAdminList();
  CCompendiumTimestampedData::default_instance_ = new CCompendiumTimestampedData();
  CCompendiumGameTimeline::default_instance_ = new CCompendiumGameTimeline();
  CCompendiumGameList::default_instance_ = new CCompendiumGameList();
  CAdditionalEquipSlot::default_instance_ = new CAdditionalEquipSlot();
  CMsgDOTACombatLogEntry::default_instance_ = new CMsgDOTACombatLogEntry();
  CMsgDOTAProfileCard::default_instance_ = new CMsgDOTAProfileCard();
  CMsgDOTAProfileCard_Slot::default_instance_ = new CMsgDOTAProfileCard_Slot();
  CMsgDOTAProfileCard_Slot_Trophy::default_instance_ = new CMsgDOTAProfileCard_Slot_Trophy();
  CMsgDOTAProfileCard_Slot_Stat::default_instance_ = new CMsgDOTAProfileCard_Slot_Stat();
  CMsgDOTAProfileCard_Slot_Item::default_instance_ = new CMsgDOTAProfileCard_Slot_Item();
  CMsgDOTAProfileCard_Slot_Hero::default_instance_ = new CMsgDOTAProfileCard_Slot_Hero();
  CMsgDOTAProfileCard_Slot_Emoticon::default_instance_ = new CMsgDOTAProfileCard_Slot_Emoticon();
  CSODOTAPlayerChallenge::default_instance_ = new CSODOTAPlayerChallenge();
  CMsgClientToGCRerollPlayerChallenge::default_instance_ = new CMsgClientToGCRerollPlayerChallenge();
  CMsgGCRerollPlayerChallengeResponse::default_instance_ = new CMsgGCRerollPlayerChallengeResponse();
  CMsgGCTopCustomGamesList::default_instance_ = new CMsgGCTopCustomGamesList();
  CMsgDOTARealtimeGameStats::default_instance_ = new CMsgDOTARealtimeGameStats();
  CMsgDOTARealtimeGameStats_TeamDetails::default_instance_ = new CMsgDOTARealtimeGameStats_TeamDetails();
  CMsgDOTARealtimeGameStats_ItemDetails::default_instance_ = new CMsgDOTARealtimeGameStats_ItemDetails();
  CMsgDOTARealtimeGameStats_AbilityDetails::default_instance_ = new CMsgDOTARealtimeGameStats_AbilityDetails();
  CMsgDOTARealtimeGameStats_HeroToHeroStats::default_instance_ = new CMsgDOTARealtimeGameStats_HeroToHeroStats();
  CMsgDOTARealtimeGameStats_AbilityList::default_instance_ = new CMsgDOTARealtimeGameStats_AbilityList();
  CMsgDOTARealtimeGameStats_PlayerDetails::default_instance_ = new CMsgDOTARealtimeGameStats_PlayerDetails();
  CMsgDOTARealtimeGameStats_BuildingDetails::default_instance_ = new CMsgDOTARealtimeGameStats_BuildingDetails();
  CMsgDOTARealtimeGameStats_KillDetails::default_instance_ = new CMsgDOTARealtimeGameStats_KillDetails();
  CMsgDOTARealtimeGameStats_BroadcasterDetails::default_instance_ = new CMsgDOTARealtimeGameStats_BroadcasterDetails();
  CMsgDOTARealtimeGameStats_PickBanDetails::default_instance_ = new CMsgDOTARealtimeGameStats_PickBanDetails();
  CMsgDOTARealtimeGameStats_MatchDetails::default_instance_ = new CMsgDOTARealtimeGameStats_MatchDetails();
  CMsgDOTARealtimeGameStats_GraphData::default_instance_ = new CMsgDOTARealtimeGameStats_GraphData();
  CMsgDOTARealtimeGameStats_GraphData_LocationStats::default_instance_ = new CMsgDOTARealtimeGameStats_GraphData_LocationStats();
  CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::default_instance_ = new CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats();
  CMsgDOTARealtimeGameStatsTerse::default_instance_ = new CMsgDOTARealtimeGameStatsTerse();
  CMsgDOTARealtimeGameStatsTerse_TeamDetails::default_instance_ = new CMsgDOTARealtimeGameStatsTerse_TeamDetails();
  CMsgDOTARealtimeGameStatsTerse_PlayerDetails::default_instance_ = new CMsgDOTARealtimeGameStatsTerse_PlayerDetails();
  CMsgDOTARealtimeGameStatsTerse_BuildingDetails::default_instance_ = new CMsgDOTARealtimeGameStatsTerse_BuildingDetails();
  CMsgDOTARealtimeGameStatsTerse_MatchDetails::default_instance_ = new CMsgDOTARealtimeGameStatsTerse_MatchDetails();
  CMsgDOTARealtimeGameStatsTerse_GraphData::default_instance_ = new CMsgDOTARealtimeGameStatsTerse_GraphData();
  CMsgGCToClientMatchGroupsVersion::default_instance_ = new CMsgGCToClientMatchGroupsVersion();
  CMsgDOTASDOHeroStatsHistory::default_instance_ = new CMsgDOTASDOHeroStatsHistory();
  CMsgDOTASeasonRewards::default_instance_ = new CMsgDOTASeasonRewards();
  CMsgDOTASeasonRewards_Reward::default_instance_ = new CMsgDOTASeasonRewards_Reward();
  CMsgDOTASeasonAchievements::default_instance_ = new CMsgDOTASeasonAchievements();
  CMsgDOTASeasonAchievements_Achievement::default_instance_ = new CMsgDOTASeasonAchievements_Achievement();
  CMsgDOTASeasonPredictions::default_instance_ = new CMsgDOTASeasonPredictions();
  CMsgDOTASeasonPredictions_Choice::default_instance_ = new CMsgDOTASeasonPredictions_Choice();
  CMsgDOTASeasonPredictions_Answers::default_instance_ = new CMsgDOTASeasonPredictions_Answers();
  CMsgDOTASeasonPredictions_QueryKeyValues::default_instance_ = new CMsgDOTASeasonPredictions_QueryKeyValues();
  CMsgDOTASeasonPredictions_Prediction::default_instance_ = new CMsgDOTASeasonPredictions_Prediction();
  CMsgDOTASeasonPredictions_InGamePrediction::default_instance_ = new CMsgDOTASeasonPredictions_InGamePrediction();
  CMsgDOTAMatch::default_instance_ = new CMsgDOTAMatch();
  CMsgDOTAMatch_Player::default_instance_ = new CMsgDOTAMatch_Player();
  CMsgDOTAMatch_Player_CustomGameData::default_instance_ = new CMsgDOTAMatch_Player_CustomGameData();
  CMsgDOTAMatch_BroadcasterInfo::default_instance_ = new CMsgDOTAMatch_BroadcasterInfo();
  CMsgDOTAMatch_BroadcasterChannel::default_instance_ = new CMsgDOTAMatch_BroadcasterChannel();
  CMsgDOTAMatch_CustomGameData::default_instance_ = new CMsgDOTAMatch_CustomGameData();
  CMsgPlayerCard::default_instance_ = new CMsgPlayerCard();
  CMsgPlayerCard_StatModifier::default_instance_ = new CMsgPlayerCard_StatModifier();
  CMsgDOTAFantasyPlayerStats::default_instance_ = new CMsgDOTAFantasyPlayerStats();
  CMsgDOTAFantasyPlayerMatchStats::default_instance_ = new CMsgDOTAFantasyPlayerMatchStats();
  CMsgDOTABotDebugInfo::default_instance_ = new CMsgDOTABotDebugInfo();
  CMsgDOTABotDebugInfo_Bot::default_instance_ = new CMsgDOTABotDebugInfo_Bot();
  CMsgDOTABotDebugInfo_Bot_Mode::default_instance_ = new CMsgDOTABotDebugInfo_Bot_Mode();
  CMsgDOTABotDebugInfo_Bot_Action::default_instance_ = new CMsgDOTABotDebugInfo_Bot_Action();
  CSODOTAGameAccountClient::default_instance_->InitAsDefaultInstance();
  CMsgLobbyEventPoints::default_instance_->InitAsDefaultInstance();
  CMsgLobbyEventPoints_AccountPoints::default_instance_->InitAsDefaultInstance();
  CMsgBattleCupVictory::default_instance_->InitAsDefaultInstance();
  CMsgLobbyBattleCupVictoryList::default_instance_->InitAsDefaultInstance();
  CMsgDOTABroadcastNotification::default_instance_->InitAsDefaultInstance();
  CProtoItemHeroStatue::default_instance_->InitAsDefaultInstance();
  CProtoItemTeamShowcase::default_instance_->InitAsDefaultInstance();
  CMatchPlayerAbilityUpgrade::default_instance_->InitAsDefaultInstance();
  CMatchAdditionalUnitInventory::default_instance_->InitAsDefaultInstance();
  CMatchPlayerPermanentBuff::default_instance_->InitAsDefaultInstance();
  CMatchHeroSelectEvent::default_instance_->InitAsDefaultInstance();
  CMsgDOTAProcessFantasyScheduledEvent::default_instance_->InitAsDefaultInstance();
  CMsgDOTAHasItemQuery::default_instance_->InitAsDefaultInstance();
  CMsgDOTAHasItemResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAHasItemDefsQuery::default_instance_->InitAsDefaultInstance();
  CMsgDOTAHasItemDefsResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCGetPlayerCardItemInfo::default_instance_->InitAsDefaultInstance();
  CMsgGCGetPlayerCardItemInfoResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCFantasySetMatchLeague::default_instance_->InitAsDefaultInstance();
  CSODOTAMapLocationState::default_instance_->InitAsDefaultInstance();
  CMsgLeagueAdminList::default_instance_->InitAsDefaultInstance();
  CCompendiumTimestampedData::default_instance_->InitAsDefaultInstance();
  CCompendiumGameTimeline::default_instance_->InitAsDefaultInstance();
  CCompendiumGameList::default_instance_->InitAsDefaultInstance();
  CAdditionalEquipSlot::default_instance_->InitAsDefaultInstance();
  CMsgDOTACombatLogEntry::default_instance_->InitAsDefaultInstance();
  CMsgDOTAProfileCard::default_instance_->InitAsDefaultInstance();
  CMsgDOTAProfileCard_Slot::default_instance_->InitAsDefaultInstance();
  CMsgDOTAProfileCard_Slot_Trophy::default_instance_->InitAsDefaultInstance();
  CMsgDOTAProfileCard_Slot_Stat::default_instance_->InitAsDefaultInstance();
  CMsgDOTAProfileCard_Slot_Item::default_instance_->InitAsDefaultInstance();
  CMsgDOTAProfileCard_Slot_Hero::default_instance_->InitAsDefaultInstance();
  CMsgDOTAProfileCard_Slot_Emoticon::default_instance_->InitAsDefaultInstance();
  CSODOTAPlayerChallenge::default_instance_->InitAsDefaultInstance();
  CMsgClientToGCRerollPlayerChallenge::default_instance_->InitAsDefaultInstance();
  CMsgGCRerollPlayerChallengeResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCTopCustomGamesList::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_TeamDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_ItemDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_AbilityDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_HeroToHeroStats::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_AbilityList::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_PlayerDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_BuildingDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_KillDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_BroadcasterDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_PickBanDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_MatchDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_GraphData::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_GraphData_LocationStats::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStatsTerse::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStatsTerse_TeamDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStatsTerse_PlayerDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStatsTerse_BuildingDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStatsTerse_MatchDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTARealtimeGameStatsTerse_GraphData::default_instance_->InitAsDefaultInstance();
  CMsgGCToClientMatchGroupsVersion::default_instance_->InitAsDefaultInstance();
  CMsgDOTASDOHeroStatsHistory::default_instance_->InitAsDefaultInstance();
  CMsgDOTASeasonRewards::default_instance_->InitAsDefaultInstance();
  CMsgDOTASeasonRewards_Reward::default_instance_->InitAsDefaultInstance();
  CMsgDOTASeasonAchievements::default_instance_->InitAsDefaultInstance();
  CMsgDOTASeasonAchievements_Achievement::default_instance_->InitAsDefaultInstance();
  CMsgDOTASeasonPredictions::default_instance_->InitAsDefaultInstance();
  CMsgDOTASeasonPredictions_Choice::default_instance_->InitAsDefaultInstance();
  CMsgDOTASeasonPredictions_Answers::default_instance_->InitAsDefaultInstance();
  CMsgDOTASeasonPredictions_QueryKeyValues::default_instance_->InitAsDefaultInstance();
  CMsgDOTASeasonPredictions_Prediction::default_instance_->InitAsDefaultInstance();
  CMsgDOTASeasonPredictions_InGamePrediction::default_instance_->InitAsDefaultInstance();
  CMsgDOTAMatch::default_instance_->InitAsDefaultInstance();
  CMsgDOTAMatch_Player::default_instance_->InitAsDefaultInstance();
  CMsgDOTAMatch_Player_CustomGameData::default_instance_->InitAsDefaultInstance();
  CMsgDOTAMatch_BroadcasterInfo::default_instance_->InitAsDefaultInstance();
  CMsgDOTAMatch_BroadcasterChannel::default_instance_->InitAsDefaultInstance();
  CMsgDOTAMatch_CustomGameData::default_instance_->InitAsDefaultInstance();
  CMsgPlayerCard::default_instance_->InitAsDefaultInstance();
  CMsgPlayerCard_StatModifier::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyPlayerStats::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyPlayerMatchStats::default_instance_->InitAsDefaultInstance();
  CMsgDOTABotDebugInfo::default_instance_->InitAsDefaultInstance();
  CMsgDOTABotDebugInfo_Bot::default_instance_->InitAsDefaultInstance();
  CMsgDOTABotDebugInfo_Bot_Mode::default_instance_->InitAsDefaultInstance();
  CMsgDOTABotDebugInfo_Bot_Action::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dota_5fgcmessages_5fcommon_2eproto {
  StaticDescriptorInitializer_dota_5fgcmessages_5fcommon_2eproto() {
    protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  }
} static_descriptor_initializer_dota_5fgcmessages_5fcommon_2eproto_;
const ::google::protobuf::EnumDescriptor* ESpecialPingValue_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESpecialPingValue_descriptor_;
}
bool ESpecialPingValue_IsValid(int value) {
  switch(value) {
    case 16382:
    case 16383:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDOTAGCSessionNeed_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDOTAGCSessionNeed_descriptor_;
}
bool EDOTAGCSessionNeed_IsValid(int value) {
  switch(value) {
    case 0:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_TournamentEvents_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_TournamentEvents_descriptor_;
}
bool DOTA_TournamentEvents_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_COMBATLOG_TYPES_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_COMBATLOG_TYPES_descriptor_;
}
bool DOTA_COMBATLOG_TYPES_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CSODOTAGameAccountClient::kAccountIdFieldNumber;
const int CSODOTAGameAccountClient::kWinsFieldNumber;
const int CSODOTAGameAccountClient::kLossesFieldNumber;
const int CSODOTAGameAccountClient::kXpFieldNumber;
const int CSODOTAGameAccountClient::kLevelFieldNumber;
const int CSODOTAGameAccountClient::kInitialSkillFieldNumber;
const int CSODOTAGameAccountClient::kLeaverCountFieldNumber;
const int CSODOTAGameAccountClient::kSecondaryLeaverCountFieldNumber;
const int CSODOTAGameAccountClient::kLowPriorityUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kPreventTextChatUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kPreventVoiceUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kPreventPublicTextChatUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kLastAbandonedGameDateFieldNumber;
const int CSODOTAGameAccountClient::kLastSecondaryAbandonedGameDateFieldNumber;
const int CSODOTAGameAccountClient::kLeaverPenaltyCountFieldNumber;
const int CSODOTAGameAccountClient::kCompletedGameStreakFieldNumber;
const int CSODOTAGameAccountClient::kTeachingFieldNumber;
const int CSODOTAGameAccountClient::kLeadershipFieldNumber;
const int CSODOTAGameAccountClient::kFriendlyFieldNumber;
const int CSODOTAGameAccountClient::kForgivingFieldNumber;
const int CSODOTAGameAccountClient::kAccountDisabledUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kAccountDisabledCountFieldNumber;
const int CSODOTAGameAccountClient::kShowcaseHeroIdFieldNumber;
const int CSODOTAGameAccountClient::kMatchDisabledUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kMatchDisabledCountFieldNumber;
const int CSODOTAGameAccountClient::kPartnerAccountTypeFieldNumber;
const int CSODOTAGameAccountClient::kPartnerAccountStateFieldNumber;
const int CSODOTAGameAccountClient::kShutdownlawterminatetimestampFieldNumber;
const int CSODOTAGameAccountClient::kLowPriorityGamesRemainingFieldNumber;
const int CSODOTAGameAccountClient::kCompetitiveRankFieldNumber;
const int CSODOTAGameAccountClient::kCalibrationGamesRemainingFieldNumber;
const int CSODOTAGameAccountClient::kSoloCompetitiveRankFieldNumber;
const int CSODOTAGameAccountClient::kSoloCalibrationGamesRemainingFieldNumber;
const int CSODOTAGameAccountClient::kGeneralSeasonalRankedRankFieldNumber;
const int CSODOTAGameAccountClient::kGeneralSeasonalRankedCalibrationGamesRemainingFieldNumber;
const int CSODOTAGameAccountClient::kGeneralSeasonalRankedGamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kGeneralSeasonalRankedRankPeakFieldNumber;
const int CSODOTAGameAccountClient::kGeneralSeasonalRankTransferredFieldNumber;
const int CSODOTAGameAccountClient::kSoloSeasonalRankedRankFieldNumber;
const int CSODOTAGameAccountClient::kSoloSeasonalRankedCalibrationGamesRemainingFieldNumber;
const int CSODOTAGameAccountClient::kSoloSeasonalRankedGamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kSoloSeasonalRankedRankPeakFieldNumber;
const int CSODOTAGameAccountClient::kSoloSeasonalRankTransferredFieldNumber;
const int CSODOTAGameAccountClient::kRecruitmentLevelFieldNumber;
const int CSODOTAGameAccountClient::kHasNewNotificationsFieldNumber;
const int CSODOTAGameAccountClient::kIsLeagueAdminFieldNumber;
const int CSODOTAGameAccountClient::kCasualGamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kSoloCompetitiveGamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kPartyCompetitiveGamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kCasual1V1GamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kCompetitiveTeamGamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kCurrAllHeroChallengeIdFieldNumber;
const int CSODOTAGameAccountClient::kPlayTimePointsFieldNumber;
const int CSODOTAGameAccountClient::kAccountFlagsFieldNumber;
const int CSODOTAGameAccountClient::kPlayTimeLevelFieldNumber;
const int CSODOTAGameAccountClient::kPlayerBehaviorSeqNumLastReportFieldNumber;
const int CSODOTAGameAccountClient::kPlayerBehaviorScoreLastReportFieldNumber;
const int CSODOTAGameAccountClient::kPlayerBehaviorReportOldDataFieldNumber;
const int CSODOTAGameAccountClient::kTourneySkillLevelFieldNumber;
const int CSODOTAGameAccountClient::kTourneyRecentParticipationDateFieldNumber;
const int CSODOTAGameAccountClient::kFavoriteTeamFieldNumber;
#endif  // !_MSC_VER

CSODOTAGameAccountClient::CSODOTAGameAccountClient()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSODOTAGameAccountClient)
}

void CSODOTAGameAccountClient::InitAsDefaultInstance() {
}

CSODOTAGameAccountClient::CSODOTAGameAccountClient(const CSODOTAGameAccountClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSODOTAGameAccountClient)
}

void CSODOTAGameAccountClient::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  wins_ = 0u;
  losses_ = 0u;
  xp_ = 0u;
  level_ = 0u;
  initial_skill_ = 0u;
  leaver_count_ = 0u;
  secondary_leaver_count_ = 0u;
  low_priority_until_date_ = 0u;
  prevent_text_chat_until_date_ = 0u;
  prevent_voice_until_date_ = 0u;
  prevent_public_text_chat_until_date_ = 0u;
  last_abandoned_game_date_ = 0u;
  last_secondary_abandoned_game_date_ = 0u;
  leaver_penalty_count_ = 0u;
  completed_game_streak_ = 0u;
  teaching_ = 0u;
  leadership_ = 0u;
  friendly_ = 0u;
  forgiving_ = 0u;
  account_disabled_until_date_ = 0u;
  account_disabled_count_ = 0u;
  showcase_hero_id_ = 0u;
  match_disabled_until_date_ = 0u;
  match_disabled_count_ = 0u;
  partner_account_type_ = 0;
  partner_account_state_ = 0u;
  shutdownlawterminatetimestamp_ = 0u;
  low_priority_games_remaining_ = 0u;
  competitive_rank_ = 0u;
  calibration_games_remaining_ = 0u;
  solo_competitive_rank_ = 0u;
  solo_calibration_games_remaining_ = 0u;
  general_seasonal_ranked_rank_ = 0u;
  general_seasonal_ranked_calibration_games_remaining_ = 0u;
  general_seasonal_ranked_games_played_ = 0u;
  general_seasonal_ranked_rank_peak_ = 0u;
  general_seasonal_rank_transferred_ = false;
  solo_seasonal_ranked_rank_ = 0u;
  solo_seasonal_ranked_calibration_games_remaining_ = 0u;
  solo_seasonal_ranked_games_played_ = 0u;
  solo_seasonal_ranked_rank_peak_ = 0u;
  solo_seasonal_rank_transferred_ = false;
  recruitment_level_ = 0u;
  has_new_notifications_ = false;
  is_league_admin_ = false;
  casual_games_played_ = 0u;
  solo_competitive_games_played_ = 0u;
  party_competitive_games_played_ = 0u;
  casual_1v1_games_played_ = 0u;
  competitive_team_games_played_ = 0u;
  curr_all_hero_challenge_id_ = 0u;
  play_time_points_ = 0u;
  account_flags_ = 0u;
  play_time_level_ = 0u;
  player_behavior_seq_num_last_report_ = 0u;
  player_behavior_score_last_report_ = 0u;
  player_behavior_report_old_data_ = false;
  tourney_skill_level_ = 0u;
  tourney_recent_participation_date_ = 0u;
  favorite_team_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTAGameAccountClient::~CSODOTAGameAccountClient() {
  // @@protoc_insertion_point(destructor:CSODOTAGameAccountClient)
  SharedDtor();
}

void CSODOTAGameAccountClient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSODOTAGameAccountClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTAGameAccountClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTAGameAccountClient_descriptor_;
}

const CSODOTAGameAccountClient& CSODOTAGameAccountClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CSODOTAGameAccountClient* CSODOTAGameAccountClient::default_instance_ = NULL;

CSODOTAGameAccountClient* CSODOTAGameAccountClient::New() const {
  return new CSODOTAGameAccountClient;
}

void CSODOTAGameAccountClient::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSODOTAGameAccountClient*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(account_id_, secondary_leaver_count_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(low_priority_until_date_, completed_game_streak_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(teaching_, match_disabled_until_date_);
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(match_disabled_count_, solo_competitive_rank_);
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(solo_calibration_games_remaining_, solo_seasonal_ranked_calibration_games_remaining_);
    general_seasonal_rank_transferred_ = false;
  }
  if (_has_bits_[40 / 32] & 65280) {
    ZR_(solo_seasonal_ranked_games_played_, solo_seasonal_ranked_rank_peak_);
    ZR_(solo_seasonal_rank_transferred_, solo_competitive_games_played_);
  }
  if (_has_bits_[48 / 32] & 16711680) {
    ZR_(party_competitive_games_played_, player_behavior_seq_num_last_report_);
  }
  if (_has_bits_[56 / 32] & 520093696) {
    ZR_(player_behavior_score_last_report_, favorite_team_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSODOTAGameAccountClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSODOTAGameAccountClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_wins;
        break;
      }

      // optional uint32 wins = 3;
      case 3: {
        if (tag == 24) {
         parse_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wins_)));
          set_has_wins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_losses;
        break;
      }

      // optional uint32 losses = 4;
      case 4: {
        if (tag == 32) {
         parse_losses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losses_)));
          set_has_losses();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_xp;
        break;
      }

      // optional uint32 xp = 12;
      case 12: {
        if (tag == 96) {
         parse_xp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_)));
          set_has_xp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_level;
        break;
      }

      // optional uint32 level = 13;
      case 13: {
        if (tag == 104) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_initial_skill;
        break;
      }

      // optional uint32 initial_skill = 14;
      case 14: {
        if (tag == 112) {
         parse_initial_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_skill_)));
          set_has_initial_skill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_leaver_count;
        break;
      }

      // optional uint32 leaver_count = 15;
      case 15: {
        if (tag == 120) {
         parse_leaver_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaver_count_)));
          set_has_leaver_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_low_priority_until_date;
        break;
      }

      // optional uint32 low_priority_until_date = 18;
      case 18: {
        if (tag == 144) {
         parse_low_priority_until_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_priority_until_date_)));
          set_has_low_priority_until_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_prevent_text_chat_until_date;
        break;
      }

      // optional uint32 prevent_text_chat_until_date = 20;
      case 20: {
        if (tag == 160) {
         parse_prevent_text_chat_until_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prevent_text_chat_until_date_)));
          set_has_prevent_text_chat_until_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_prevent_voice_until_date;
        break;
      }

      // optional uint32 prevent_voice_until_date = 21;
      case 21: {
        if (tag == 168) {
         parse_prevent_voice_until_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prevent_voice_until_date_)));
          set_has_prevent_voice_until_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_last_abandoned_game_date;
        break;
      }

      // optional uint32 last_abandoned_game_date = 22;
      case 22: {
        if (tag == 176) {
         parse_last_abandoned_game_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_abandoned_game_date_)));
          set_has_last_abandoned_game_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_leaver_penalty_count;
        break;
      }

      // optional uint32 leaver_penalty_count = 23;
      case 23: {
        if (tag == 184) {
         parse_leaver_penalty_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaver_penalty_count_)));
          set_has_leaver_penalty_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_completed_game_streak;
        break;
      }

      // optional uint32 completed_game_streak = 24;
      case 24: {
        if (tag == 192) {
         parse_completed_game_streak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &completed_game_streak_)));
          set_has_completed_game_streak();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_teaching;
        break;
      }

      // optional uint32 teaching = 28;
      case 28: {
        if (tag == 224) {
         parse_teaching:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teaching_)));
          set_has_teaching();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_leadership;
        break;
      }

      // optional uint32 leadership = 29;
      case 29: {
        if (tag == 232) {
         parse_leadership:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leadership_)));
          set_has_leadership();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_friendly;
        break;
      }

      // optional uint32 friendly = 30;
      case 30: {
        if (tag == 240) {
         parse_friendly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendly_)));
          set_has_friendly();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_forgiving;
        break;
      }

      // optional uint32 forgiving = 31;
      case 31: {
        if (tag == 248) {
         parse_forgiving:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forgiving_)));
          set_has_forgiving();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_account_disabled_until_date;
        break;
      }

      // optional uint32 account_disabled_until_date = 38;
      case 38: {
        if (tag == 304) {
         parse_account_disabled_until_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_disabled_until_date_)));
          set_has_account_disabled_until_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_account_disabled_count;
        break;
      }

      // optional uint32 account_disabled_count = 39;
      case 39: {
        if (tag == 312) {
         parse_account_disabled_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_disabled_count_)));
          set_has_account_disabled_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_showcase_hero_id;
        break;
      }

      // optional uint32 showcase_hero_id = 40;
      case 40: {
        if (tag == 320) {
         parse_showcase_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &showcase_hero_id_)));
          set_has_showcase_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_match_disabled_until_date;
        break;
      }

      // optional uint32 match_disabled_until_date = 41;
      case 41: {
        if (tag == 328) {
         parse_match_disabled_until_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_disabled_until_date_)));
          set_has_match_disabled_until_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_match_disabled_count;
        break;
      }

      // optional uint32 match_disabled_count = 42;
      case 42: {
        if (tag == 336) {
         parse_match_disabled_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_disabled_count_)));
          set_has_match_disabled_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_partner_account_type;
        break;
      }

      // optional .PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
      case 44: {
        if (tag == 352) {
         parse_partner_account_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PartnerAccountType_IsValid(value)) {
            set_partner_account_type(static_cast< ::PartnerAccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(44, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_partner_account_state;
        break;
      }

      // optional uint32 partner_account_state = 45;
      case 45: {
        if (tag == 360) {
         parse_partner_account_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partner_account_state_)));
          set_has_partner_account_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_shutdownlawterminatetimestamp;
        break;
      }

      // optional uint32 shutdownlawterminatetimestamp = 47;
      case 47: {
        if (tag == 376) {
         parse_shutdownlawterminatetimestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shutdownlawterminatetimestamp_)));
          set_has_shutdownlawterminatetimestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_low_priority_games_remaining;
        break;
      }

      // optional uint32 low_priority_games_remaining = 48;
      case 48: {
        if (tag == 384) {
         parse_low_priority_games_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_priority_games_remaining_)));
          set_has_low_priority_games_remaining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_competitive_rank;
        break;
      }

      // optional uint32 competitive_rank = 49;
      case 49: {
        if (tag == 392) {
         parse_competitive_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &competitive_rank_)));
          set_has_competitive_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_calibration_games_remaining;
        break;
      }

      // optional uint32 calibration_games_remaining = 51;
      case 51: {
        if (tag == 408) {
         parse_calibration_games_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calibration_games_remaining_)));
          set_has_calibration_games_remaining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_solo_competitive_rank;
        break;
      }

      // optional uint32 solo_competitive_rank = 52;
      case 52: {
        if (tag == 416) {
         parse_solo_competitive_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo_competitive_rank_)));
          set_has_solo_competitive_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_solo_calibration_games_remaining;
        break;
      }

      // optional uint32 solo_calibration_games_remaining = 54;
      case 54: {
        if (tag == 432) {
         parse_solo_calibration_games_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo_calibration_games_remaining_)));
          set_has_solo_calibration_games_remaining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_recruitment_level;
        break;
      }

      // optional uint32 recruitment_level = 55;
      case 55: {
        if (tag == 440) {
         parse_recruitment_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recruitment_level_)));
          set_has_recruitment_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_has_new_notifications;
        break;
      }

      // optional bool has_new_notifications = 56;
      case 56: {
        if (tag == 448) {
         parse_has_new_notifications:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_new_notifications_)));
          set_has_has_new_notifications();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(456)) goto parse_is_league_admin;
        break;
      }

      // optional bool is_league_admin = 57;
      case 57: {
        if (tag == 456) {
         parse_is_league_admin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_league_admin_)));
          set_has_is_league_admin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(464)) goto parse_secondary_leaver_count;
        break;
      }

      // optional uint32 secondary_leaver_count = 58;
      case 58: {
        if (tag == 464) {
         parse_secondary_leaver_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondary_leaver_count_)));
          set_has_secondary_leaver_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(472)) goto parse_last_secondary_abandoned_game_date;
        break;
      }

      // optional uint32 last_secondary_abandoned_game_date = 59;
      case 59: {
        if (tag == 472) {
         parse_last_secondary_abandoned_game_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_secondary_abandoned_game_date_)));
          set_has_last_secondary_abandoned_game_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_casual_games_played;
        break;
      }

      // optional uint32 casual_games_played = 60;
      case 60: {
        if (tag == 480) {
         parse_casual_games_played:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &casual_games_played_)));
          set_has_casual_games_played();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_solo_competitive_games_played;
        break;
      }

      // optional uint32 solo_competitive_games_played = 61;
      case 61: {
        if (tag == 488) {
         parse_solo_competitive_games_played:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo_competitive_games_played_)));
          set_has_solo_competitive_games_played();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(496)) goto parse_party_competitive_games_played;
        break;
      }

      // optional uint32 party_competitive_games_played = 62;
      case 62: {
        if (tag == 496) {
         parse_party_competitive_games_played:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &party_competitive_games_played_)));
          set_has_party_competitive_games_played();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(520)) goto parse_casual_1v1_games_played;
        break;
      }

      // optional uint32 casual_1v1_games_played = 65;
      case 65: {
        if (tag == 520) {
         parse_casual_1v1_games_played:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &casual_1v1_games_played_)));
          set_has_casual_1v1_games_played();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(528)) goto parse_competitive_team_games_played;
        break;
      }

      // optional uint32 competitive_team_games_played = 66;
      case 66: {
        if (tag == 528) {
         parse_competitive_team_games_played:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &competitive_team_games_played_)));
          set_has_competitive_team_games_played();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(536)) goto parse_curr_all_hero_challenge_id;
        break;
      }

      // optional uint32 curr_all_hero_challenge_id = 67;
      case 67: {
        if (tag == 536) {
         parse_curr_all_hero_challenge_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curr_all_hero_challenge_id_)));
          set_has_curr_all_hero_challenge_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(544)) goto parse_play_time_points;
        break;
      }

      // optional uint32 play_time_points = 68;
      case 68: {
        if (tag == 544) {
         parse_play_time_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_time_points_)));
          set_has_play_time_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(552)) goto parse_account_flags;
        break;
      }

      // optional uint32 account_flags = 69;
      case 69: {
        if (tag == 552) {
         parse_account_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_flags_)));
          set_has_account_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(560)) goto parse_play_time_level;
        break;
      }

      // optional uint32 play_time_level = 70;
      case 70: {
        if (tag == 560) {
         parse_play_time_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_time_level_)));
          set_has_play_time_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(568)) goto parse_player_behavior_seq_num_last_report;
        break;
      }

      // optional uint32 player_behavior_seq_num_last_report = 71;
      case 71: {
        if (tag == 568) {
         parse_player_behavior_seq_num_last_report:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_behavior_seq_num_last_report_)));
          set_has_player_behavior_seq_num_last_report();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(576)) goto parse_player_behavior_score_last_report;
        break;
      }

      // optional uint32 player_behavior_score_last_report = 72;
      case 72: {
        if (tag == 576) {
         parse_player_behavior_score_last_report:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_behavior_score_last_report_)));
          set_has_player_behavior_score_last_report();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(584)) goto parse_player_behavior_report_old_data;
        break;
      }

      // optional bool player_behavior_report_old_data = 73;
      case 73: {
        if (tag == 584) {
         parse_player_behavior_report_old_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &player_behavior_report_old_data_)));
          set_has_player_behavior_report_old_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(592)) goto parse_tourney_skill_level;
        break;
      }

      // optional uint32 tourney_skill_level = 74;
      case 74: {
        if (tag == 592) {
         parse_tourney_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_skill_level_)));
          set_has_tourney_skill_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(600)) goto parse_general_seasonal_ranked_rank;
        break;
      }

      // optional uint32 general_seasonal_ranked_rank = 75;
      case 75: {
        if (tag == 600) {
         parse_general_seasonal_ranked_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &general_seasonal_ranked_rank_)));
          set_has_general_seasonal_ranked_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(608)) goto parse_general_seasonal_ranked_calibration_games_remaining;
        break;
      }

      // optional uint32 general_seasonal_ranked_calibration_games_remaining = 76;
      case 76: {
        if (tag == 608) {
         parse_general_seasonal_ranked_calibration_games_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &general_seasonal_ranked_calibration_games_remaining_)));
          set_has_general_seasonal_ranked_calibration_games_remaining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(616)) goto parse_solo_seasonal_ranked_rank;
        break;
      }

      // optional uint32 solo_seasonal_ranked_rank = 77;
      case 77: {
        if (tag == 616) {
         parse_solo_seasonal_ranked_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo_seasonal_ranked_rank_)));
          set_has_solo_seasonal_ranked_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(624)) goto parse_solo_seasonal_ranked_calibration_games_remaining;
        break;
      }

      // optional uint32 solo_seasonal_ranked_calibration_games_remaining = 78;
      case 78: {
        if (tag == 624) {
         parse_solo_seasonal_ranked_calibration_games_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo_seasonal_ranked_calibration_games_remaining_)));
          set_has_solo_seasonal_ranked_calibration_games_remaining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(632)) goto parse_solo_seasonal_ranked_games_played;
        break;
      }

      // optional uint32 solo_seasonal_ranked_games_played = 79;
      case 79: {
        if (tag == 632) {
         parse_solo_seasonal_ranked_games_played:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo_seasonal_ranked_games_played_)));
          set_has_solo_seasonal_ranked_games_played();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(640)) goto parse_general_seasonal_ranked_games_played;
        break;
      }

      // optional uint32 general_seasonal_ranked_games_played = 80;
      case 80: {
        if (tag == 640) {
         parse_general_seasonal_ranked_games_played:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &general_seasonal_ranked_games_played_)));
          set_has_general_seasonal_ranked_games_played();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(648)) goto parse_general_seasonal_ranked_rank_peak;
        break;
      }

      // optional uint32 general_seasonal_ranked_rank_peak = 81;
      case 81: {
        if (tag == 648) {
         parse_general_seasonal_ranked_rank_peak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &general_seasonal_ranked_rank_peak_)));
          set_has_general_seasonal_ranked_rank_peak();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(656)) goto parse_solo_seasonal_ranked_rank_peak;
        break;
      }

      // optional uint32 solo_seasonal_ranked_rank_peak = 82;
      case 82: {
        if (tag == 656) {
         parse_solo_seasonal_ranked_rank_peak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo_seasonal_ranked_rank_peak_)));
          set_has_solo_seasonal_ranked_rank_peak();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(664)) goto parse_general_seasonal_rank_transferred;
        break;
      }

      // optional bool general_seasonal_rank_transferred = 83;
      case 83: {
        if (tag == 664) {
         parse_general_seasonal_rank_transferred:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &general_seasonal_rank_transferred_)));
          set_has_general_seasonal_rank_transferred();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(672)) goto parse_solo_seasonal_rank_transferred;
        break;
      }

      // optional bool solo_seasonal_rank_transferred = 84;
      case 84: {
        if (tag == 672) {
         parse_solo_seasonal_rank_transferred:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solo_seasonal_rank_transferred_)));
          set_has_solo_seasonal_rank_transferred();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(680)) goto parse_tourney_recent_participation_date;
        break;
      }

      // optional uint32 tourney_recent_participation_date = 85;
      case 85: {
        if (tag == 680) {
         parse_tourney_recent_participation_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_recent_participation_date_)));
          set_has_tourney_recent_participation_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(688)) goto parse_prevent_public_text_chat_until_date;
        break;
      }

      // optional uint32 prevent_public_text_chat_until_date = 86;
      case 86: {
        if (tag == 688) {
         parse_prevent_public_text_chat_until_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prevent_public_text_chat_until_date_)));
          set_has_prevent_public_text_chat_until_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(696)) goto parse_favorite_team;
        break;
      }

      // optional uint32 favorite_team = 87;
      case 87: {
        if (tag == 696) {
         parse_favorite_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favorite_team_)));
          set_has_favorite_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSODOTAGameAccountClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSODOTAGameAccountClient)
  return false;
#undef DO_
}

void CSODOTAGameAccountClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSODOTAGameAccountClient)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 wins = 3;
  if (has_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wins(), output);
  }

  // optional uint32 losses = 4;
  if (has_losses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->losses(), output);
  }

  // optional uint32 xp = 12;
  if (has_xp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->xp(), output);
  }

  // optional uint32 level = 13;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->level(), output);
  }

  // optional uint32 initial_skill = 14;
  if (has_initial_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->initial_skill(), output);
  }

  // optional uint32 leaver_count = 15;
  if (has_leaver_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->leaver_count(), output);
  }

  // optional uint32 low_priority_until_date = 18;
  if (has_low_priority_until_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->low_priority_until_date(), output);
  }

  // optional uint32 prevent_text_chat_until_date = 20;
  if (has_prevent_text_chat_until_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->prevent_text_chat_until_date(), output);
  }

  // optional uint32 prevent_voice_until_date = 21;
  if (has_prevent_voice_until_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->prevent_voice_until_date(), output);
  }

  // optional uint32 last_abandoned_game_date = 22;
  if (has_last_abandoned_game_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->last_abandoned_game_date(), output);
  }

  // optional uint32 leaver_penalty_count = 23;
  if (has_leaver_penalty_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->leaver_penalty_count(), output);
  }

  // optional uint32 completed_game_streak = 24;
  if (has_completed_game_streak()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->completed_game_streak(), output);
  }

  // optional uint32 teaching = 28;
  if (has_teaching()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->teaching(), output);
  }

  // optional uint32 leadership = 29;
  if (has_leadership()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->leadership(), output);
  }

  // optional uint32 friendly = 30;
  if (has_friendly()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->friendly(), output);
  }

  // optional uint32 forgiving = 31;
  if (has_forgiving()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->forgiving(), output);
  }

  // optional uint32 account_disabled_until_date = 38;
  if (has_account_disabled_until_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->account_disabled_until_date(), output);
  }

  // optional uint32 account_disabled_count = 39;
  if (has_account_disabled_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->account_disabled_count(), output);
  }

  // optional uint32 showcase_hero_id = 40;
  if (has_showcase_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->showcase_hero_id(), output);
  }

  // optional uint32 match_disabled_until_date = 41;
  if (has_match_disabled_until_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->match_disabled_until_date(), output);
  }

  // optional uint32 match_disabled_count = 42;
  if (has_match_disabled_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->match_disabled_count(), output);
  }

  // optional .PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
  if (has_partner_account_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      44, this->partner_account_type(), output);
  }

  // optional uint32 partner_account_state = 45;
  if (has_partner_account_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->partner_account_state(), output);
  }

  // optional uint32 shutdownlawterminatetimestamp = 47;
  if (has_shutdownlawterminatetimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->shutdownlawterminatetimestamp(), output);
  }

  // optional uint32 low_priority_games_remaining = 48;
  if (has_low_priority_games_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->low_priority_games_remaining(), output);
  }

  // optional uint32 competitive_rank = 49;
  if (has_competitive_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->competitive_rank(), output);
  }

  // optional uint32 calibration_games_remaining = 51;
  if (has_calibration_games_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->calibration_games_remaining(), output);
  }

  // optional uint32 solo_competitive_rank = 52;
  if (has_solo_competitive_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->solo_competitive_rank(), output);
  }

  // optional uint32 solo_calibration_games_remaining = 54;
  if (has_solo_calibration_games_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->solo_calibration_games_remaining(), output);
  }

  // optional uint32 recruitment_level = 55;
  if (has_recruitment_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->recruitment_level(), output);
  }

  // optional bool has_new_notifications = 56;
  if (has_has_new_notifications()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(56, this->has_new_notifications(), output);
  }

  // optional bool is_league_admin = 57;
  if (has_is_league_admin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(57, this->is_league_admin(), output);
  }

  // optional uint32 secondary_leaver_count = 58;
  if (has_secondary_leaver_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->secondary_leaver_count(), output);
  }

  // optional uint32 last_secondary_abandoned_game_date = 59;
  if (has_last_secondary_abandoned_game_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(59, this->last_secondary_abandoned_game_date(), output);
  }

  // optional uint32 casual_games_played = 60;
  if (has_casual_games_played()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->casual_games_played(), output);
  }

  // optional uint32 solo_competitive_games_played = 61;
  if (has_solo_competitive_games_played()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->solo_competitive_games_played(), output);
  }

  // optional uint32 party_competitive_games_played = 62;
  if (has_party_competitive_games_played()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->party_competitive_games_played(), output);
  }

  // optional uint32 casual_1v1_games_played = 65;
  if (has_casual_1v1_games_played()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(65, this->casual_1v1_games_played(), output);
  }

  // optional uint32 competitive_team_games_played = 66;
  if (has_competitive_team_games_played()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(66, this->competitive_team_games_played(), output);
  }

  // optional uint32 curr_all_hero_challenge_id = 67;
  if (has_curr_all_hero_challenge_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(67, this->curr_all_hero_challenge_id(), output);
  }

  // optional uint32 play_time_points = 68;
  if (has_play_time_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(68, this->play_time_points(), output);
  }

  // optional uint32 account_flags = 69;
  if (has_account_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(69, this->account_flags(), output);
  }

  // optional uint32 play_time_level = 70;
  if (has_play_time_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->play_time_level(), output);
  }

  // optional uint32 player_behavior_seq_num_last_report = 71;
  if (has_player_behavior_seq_num_last_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(71, this->player_behavior_seq_num_last_report(), output);
  }

  // optional uint32 player_behavior_score_last_report = 72;
  if (has_player_behavior_score_last_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(72, this->player_behavior_score_last_report(), output);
  }

  // optional bool player_behavior_report_old_data = 73;
  if (has_player_behavior_report_old_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(73, this->player_behavior_report_old_data(), output);
  }

  // optional uint32 tourney_skill_level = 74;
  if (has_tourney_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(74, this->tourney_skill_level(), output);
  }

  // optional uint32 general_seasonal_ranked_rank = 75;
  if (has_general_seasonal_ranked_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(75, this->general_seasonal_ranked_rank(), output);
  }

  // optional uint32 general_seasonal_ranked_calibration_games_remaining = 76;
  if (has_general_seasonal_ranked_calibration_games_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(76, this->general_seasonal_ranked_calibration_games_remaining(), output);
  }

  // optional uint32 solo_seasonal_ranked_rank = 77;
  if (has_solo_seasonal_ranked_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(77, this->solo_seasonal_ranked_rank(), output);
  }

  // optional uint32 solo_seasonal_ranked_calibration_games_remaining = 78;
  if (has_solo_seasonal_ranked_calibration_games_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(78, this->solo_seasonal_ranked_calibration_games_remaining(), output);
  }

  // optional uint32 solo_seasonal_ranked_games_played = 79;
  if (has_solo_seasonal_ranked_games_played()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(79, this->solo_seasonal_ranked_games_played(), output);
  }

  // optional uint32 general_seasonal_ranked_games_played = 80;
  if (has_general_seasonal_ranked_games_played()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(80, this->general_seasonal_ranked_games_played(), output);
  }

  // optional uint32 general_seasonal_ranked_rank_peak = 81;
  if (has_general_seasonal_ranked_rank_peak()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(81, this->general_seasonal_ranked_rank_peak(), output);
  }

  // optional uint32 solo_seasonal_ranked_rank_peak = 82;
  if (has_solo_seasonal_ranked_rank_peak()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(82, this->solo_seasonal_ranked_rank_peak(), output);
  }

  // optional bool general_seasonal_rank_transferred = 83;
  if (has_general_seasonal_rank_transferred()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(83, this->general_seasonal_rank_transferred(), output);
  }

  // optional bool solo_seasonal_rank_transferred = 84;
  if (has_solo_seasonal_rank_transferred()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(84, this->solo_seasonal_rank_transferred(), output);
  }

  // optional uint32 tourney_recent_participation_date = 85;
  if (has_tourney_recent_participation_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(85, this->tourney_recent_participation_date(), output);
  }

  // optional uint32 prevent_public_text_chat_until_date = 86;
  if (has_prevent_public_text_chat_until_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(86, this->prevent_public_text_chat_until_date(), output);
  }

  // optional uint32 favorite_team = 87;
  if (has_favorite_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(87, this->favorite_team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSODOTAGameAccountClient)
}

::google::protobuf::uint8* CSODOTAGameAccountClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAGameAccountClient)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 wins = 3;
  if (has_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->wins(), target);
  }

  // optional uint32 losses = 4;
  if (has_losses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->losses(), target);
  }

  // optional uint32 xp = 12;
  if (has_xp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->xp(), target);
  }

  // optional uint32 level = 13;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->level(), target);
  }

  // optional uint32 initial_skill = 14;
  if (has_initial_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->initial_skill(), target);
  }

  // optional uint32 leaver_count = 15;
  if (has_leaver_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->leaver_count(), target);
  }

  // optional uint32 low_priority_until_date = 18;
  if (has_low_priority_until_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->low_priority_until_date(), target);
  }

  // optional uint32 prevent_text_chat_until_date = 20;
  if (has_prevent_text_chat_until_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->prevent_text_chat_until_date(), target);
  }

  // optional uint32 prevent_voice_until_date = 21;
  if (has_prevent_voice_until_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->prevent_voice_until_date(), target);
  }

  // optional uint32 last_abandoned_game_date = 22;
  if (has_last_abandoned_game_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->last_abandoned_game_date(), target);
  }

  // optional uint32 leaver_penalty_count = 23;
  if (has_leaver_penalty_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->leaver_penalty_count(), target);
  }

  // optional uint32 completed_game_streak = 24;
  if (has_completed_game_streak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->completed_game_streak(), target);
  }

  // optional uint32 teaching = 28;
  if (has_teaching()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->teaching(), target);
  }

  // optional uint32 leadership = 29;
  if (has_leadership()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->leadership(), target);
  }

  // optional uint32 friendly = 30;
  if (has_friendly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->friendly(), target);
  }

  // optional uint32 forgiving = 31;
  if (has_forgiving()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->forgiving(), target);
  }

  // optional uint32 account_disabled_until_date = 38;
  if (has_account_disabled_until_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->account_disabled_until_date(), target);
  }

  // optional uint32 account_disabled_count = 39;
  if (has_account_disabled_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->account_disabled_count(), target);
  }

  // optional uint32 showcase_hero_id = 40;
  if (has_showcase_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->showcase_hero_id(), target);
  }

  // optional uint32 match_disabled_until_date = 41;
  if (has_match_disabled_until_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->match_disabled_until_date(), target);
  }

  // optional uint32 match_disabled_count = 42;
  if (has_match_disabled_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->match_disabled_count(), target);
  }

  // optional .PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
  if (has_partner_account_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      44, this->partner_account_type(), target);
  }

  // optional uint32 partner_account_state = 45;
  if (has_partner_account_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->partner_account_state(), target);
  }

  // optional uint32 shutdownlawterminatetimestamp = 47;
  if (has_shutdownlawterminatetimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->shutdownlawterminatetimestamp(), target);
  }

  // optional uint32 low_priority_games_remaining = 48;
  if (has_low_priority_games_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->low_priority_games_remaining(), target);
  }

  // optional uint32 competitive_rank = 49;
  if (has_competitive_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->competitive_rank(), target);
  }

  // optional uint32 calibration_games_remaining = 51;
  if (has_calibration_games_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->calibration_games_remaining(), target);
  }

  // optional uint32 solo_competitive_rank = 52;
  if (has_solo_competitive_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->solo_competitive_rank(), target);
  }

  // optional uint32 solo_calibration_games_remaining = 54;
  if (has_solo_calibration_games_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->solo_calibration_games_remaining(), target);
  }

  // optional uint32 recruitment_level = 55;
  if (has_recruitment_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(55, this->recruitment_level(), target);
  }

  // optional bool has_new_notifications = 56;
  if (has_has_new_notifications()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(56, this->has_new_notifications(), target);
  }

  // optional bool is_league_admin = 57;
  if (has_is_league_admin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(57, this->is_league_admin(), target);
  }

  // optional uint32 secondary_leaver_count = 58;
  if (has_secondary_leaver_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(58, this->secondary_leaver_count(), target);
  }

  // optional uint32 last_secondary_abandoned_game_date = 59;
  if (has_last_secondary_abandoned_game_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(59, this->last_secondary_abandoned_game_date(), target);
  }

  // optional uint32 casual_games_played = 60;
  if (has_casual_games_played()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->casual_games_played(), target);
  }

  // optional uint32 solo_competitive_games_played = 61;
  if (has_solo_competitive_games_played()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->solo_competitive_games_played(), target);
  }

  // optional uint32 party_competitive_games_played = 62;
  if (has_party_competitive_games_played()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(62, this->party_competitive_games_played(), target);
  }

  // optional uint32 casual_1v1_games_played = 65;
  if (has_casual_1v1_games_played()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(65, this->casual_1v1_games_played(), target);
  }

  // optional uint32 competitive_team_games_played = 66;
  if (has_competitive_team_games_played()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(66, this->competitive_team_games_played(), target);
  }

  // optional uint32 curr_all_hero_challenge_id = 67;
  if (has_curr_all_hero_challenge_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(67, this->curr_all_hero_challenge_id(), target);
  }

  // optional uint32 play_time_points = 68;
  if (has_play_time_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(68, this->play_time_points(), target);
  }

  // optional uint32 account_flags = 69;
  if (has_account_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(69, this->account_flags(), target);
  }

  // optional uint32 play_time_level = 70;
  if (has_play_time_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(70, this->play_time_level(), target);
  }

  // optional uint32 player_behavior_seq_num_last_report = 71;
  if (has_player_behavior_seq_num_last_report()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(71, this->player_behavior_seq_num_last_report(), target);
  }

  // optional uint32 player_behavior_score_last_report = 72;
  if (has_player_behavior_score_last_report()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(72, this->player_behavior_score_last_report(), target);
  }

  // optional bool player_behavior_report_old_data = 73;
  if (has_player_behavior_report_old_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(73, this->player_behavior_report_old_data(), target);
  }

  // optional uint32 tourney_skill_level = 74;
  if (has_tourney_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(74, this->tourney_skill_level(), target);
  }

  // optional uint32 general_seasonal_ranked_rank = 75;
  if (has_general_seasonal_ranked_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(75, this->general_seasonal_ranked_rank(), target);
  }

  // optional uint32 general_seasonal_ranked_calibration_games_remaining = 76;
  if (has_general_seasonal_ranked_calibration_games_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(76, this->general_seasonal_ranked_calibration_games_remaining(), target);
  }

  // optional uint32 solo_seasonal_ranked_rank = 77;
  if (has_solo_seasonal_ranked_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(77, this->solo_seasonal_ranked_rank(), target);
  }

  // optional uint32 solo_seasonal_ranked_calibration_games_remaining = 78;
  if (has_solo_seasonal_ranked_calibration_games_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(78, this->solo_seasonal_ranked_calibration_games_remaining(), target);
  }

  // optional uint32 solo_seasonal_ranked_games_played = 79;
  if (has_solo_seasonal_ranked_games_played()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(79, this->solo_seasonal_ranked_games_played(), target);
  }

  // optional uint32 general_seasonal_ranked_games_played = 80;
  if (has_general_seasonal_ranked_games_played()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(80, this->general_seasonal_ranked_games_played(), target);
  }

  // optional uint32 general_seasonal_ranked_rank_peak = 81;
  if (has_general_seasonal_ranked_rank_peak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(81, this->general_seasonal_ranked_rank_peak(), target);
  }

  // optional uint32 solo_seasonal_ranked_rank_peak = 82;
  if (has_solo_seasonal_ranked_rank_peak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(82, this->solo_seasonal_ranked_rank_peak(), target);
  }

  // optional bool general_seasonal_rank_transferred = 83;
  if (has_general_seasonal_rank_transferred()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(83, this->general_seasonal_rank_transferred(), target);
  }

  // optional bool solo_seasonal_rank_transferred = 84;
  if (has_solo_seasonal_rank_transferred()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(84, this->solo_seasonal_rank_transferred(), target);
  }

  // optional uint32 tourney_recent_participation_date = 85;
  if (has_tourney_recent_participation_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(85, this->tourney_recent_participation_date(), target);
  }

  // optional uint32 prevent_public_text_chat_until_date = 86;
  if (has_prevent_public_text_chat_until_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(86, this->prevent_public_text_chat_until_date(), target);
  }

  // optional uint32 favorite_team = 87;
  if (has_favorite_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(87, this->favorite_team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAGameAccountClient)
  return target;
}

int CSODOTAGameAccountClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 wins = 3;
    if (has_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wins());
    }

    // optional uint32 losses = 4;
    if (has_losses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losses());
    }

    // optional uint32 xp = 12;
    if (has_xp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp());
    }

    // optional uint32 level = 13;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 initial_skill = 14;
    if (has_initial_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_skill());
    }

    // optional uint32 leaver_count = 15;
    if (has_leaver_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaver_count());
    }

    // optional uint32 secondary_leaver_count = 58;
    if (has_secondary_leaver_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondary_leaver_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 low_priority_until_date = 18;
    if (has_low_priority_until_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_priority_until_date());
    }

    // optional uint32 prevent_text_chat_until_date = 20;
    if (has_prevent_text_chat_until_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prevent_text_chat_until_date());
    }

    // optional uint32 prevent_voice_until_date = 21;
    if (has_prevent_voice_until_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prevent_voice_until_date());
    }

    // optional uint32 prevent_public_text_chat_until_date = 86;
    if (has_prevent_public_text_chat_until_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prevent_public_text_chat_until_date());
    }

    // optional uint32 last_abandoned_game_date = 22;
    if (has_last_abandoned_game_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_abandoned_game_date());
    }

    // optional uint32 last_secondary_abandoned_game_date = 59;
    if (has_last_secondary_abandoned_game_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_secondary_abandoned_game_date());
    }

    // optional uint32 leaver_penalty_count = 23;
    if (has_leaver_penalty_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaver_penalty_count());
    }

    // optional uint32 completed_game_streak = 24;
    if (has_completed_game_streak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->completed_game_streak());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 teaching = 28;
    if (has_teaching()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teaching());
    }

    // optional uint32 leadership = 29;
    if (has_leadership()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leadership());
    }

    // optional uint32 friendly = 30;
    if (has_friendly()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friendly());
    }

    // optional uint32 forgiving = 31;
    if (has_forgiving()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forgiving());
    }

    // optional uint32 account_disabled_until_date = 38;
    if (has_account_disabled_until_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_disabled_until_date());
    }

    // optional uint32 account_disabled_count = 39;
    if (has_account_disabled_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_disabled_count());
    }

    // optional uint32 showcase_hero_id = 40;
    if (has_showcase_hero_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->showcase_hero_id());
    }

    // optional uint32 match_disabled_until_date = 41;
    if (has_match_disabled_until_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_disabled_until_date());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 match_disabled_count = 42;
    if (has_match_disabled_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_disabled_count());
    }

    // optional .PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
    if (has_partner_account_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->partner_account_type());
    }

    // optional uint32 partner_account_state = 45;
    if (has_partner_account_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partner_account_state());
    }

    // optional uint32 shutdownlawterminatetimestamp = 47;
    if (has_shutdownlawterminatetimestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shutdownlawterminatetimestamp());
    }

    // optional uint32 low_priority_games_remaining = 48;
    if (has_low_priority_games_remaining()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_priority_games_remaining());
    }

    // optional uint32 competitive_rank = 49;
    if (has_competitive_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->competitive_rank());
    }

    // optional uint32 calibration_games_remaining = 51;
    if (has_calibration_games_remaining()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->calibration_games_remaining());
    }

    // optional uint32 solo_competitive_rank = 52;
    if (has_solo_competitive_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo_competitive_rank());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 solo_calibration_games_remaining = 54;
    if (has_solo_calibration_games_remaining()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo_calibration_games_remaining());
    }

    // optional uint32 general_seasonal_ranked_rank = 75;
    if (has_general_seasonal_ranked_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->general_seasonal_ranked_rank());
    }

    // optional uint32 general_seasonal_ranked_calibration_games_remaining = 76;
    if (has_general_seasonal_ranked_calibration_games_remaining()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->general_seasonal_ranked_calibration_games_remaining());
    }

    // optional uint32 general_seasonal_ranked_games_played = 80;
    if (has_general_seasonal_ranked_games_played()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->general_seasonal_ranked_games_played());
    }

    // optional uint32 general_seasonal_ranked_rank_peak = 81;
    if (has_general_seasonal_ranked_rank_peak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->general_seasonal_ranked_rank_peak());
    }

    // optional bool general_seasonal_rank_transferred = 83;
    if (has_general_seasonal_rank_transferred()) {
      total_size += 2 + 1;
    }

    // optional uint32 solo_seasonal_ranked_rank = 77;
    if (has_solo_seasonal_ranked_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo_seasonal_ranked_rank());
    }

    // optional uint32 solo_seasonal_ranked_calibration_games_remaining = 78;
    if (has_solo_seasonal_ranked_calibration_games_remaining()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo_seasonal_ranked_calibration_games_remaining());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 solo_seasonal_ranked_games_played = 79;
    if (has_solo_seasonal_ranked_games_played()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo_seasonal_ranked_games_played());
    }

    // optional uint32 solo_seasonal_ranked_rank_peak = 82;
    if (has_solo_seasonal_ranked_rank_peak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo_seasonal_ranked_rank_peak());
    }

    // optional bool solo_seasonal_rank_transferred = 84;
    if (has_solo_seasonal_rank_transferred()) {
      total_size += 2 + 1;
    }

    // optional uint32 recruitment_level = 55;
    if (has_recruitment_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recruitment_level());
    }

    // optional bool has_new_notifications = 56;
    if (has_has_new_notifications()) {
      total_size += 2 + 1;
    }

    // optional bool is_league_admin = 57;
    if (has_is_league_admin()) {
      total_size += 2 + 1;
    }

    // optional uint32 casual_games_played = 60;
    if (has_casual_games_played()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->casual_games_played());
    }

    // optional uint32 solo_competitive_games_played = 61;
    if (has_solo_competitive_games_played()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo_competitive_games_played());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional uint32 party_competitive_games_played = 62;
    if (has_party_competitive_games_played()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->party_competitive_games_played());
    }

    // optional uint32 casual_1v1_games_played = 65;
    if (has_casual_1v1_games_played()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->casual_1v1_games_played());
    }

    // optional uint32 competitive_team_games_played = 66;
    if (has_competitive_team_games_played()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->competitive_team_games_played());
    }

    // optional uint32 curr_all_hero_challenge_id = 67;
    if (has_curr_all_hero_challenge_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curr_all_hero_challenge_id());
    }

    // optional uint32 play_time_points = 68;
    if (has_play_time_points()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->play_time_points());
    }

    // optional uint32 account_flags = 69;
    if (has_account_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_flags());
    }

    // optional uint32 play_time_level = 70;
    if (has_play_time_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->play_time_level());
    }

    // optional uint32 player_behavior_seq_num_last_report = 71;
    if (has_player_behavior_seq_num_last_report()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_behavior_seq_num_last_report());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional uint32 player_behavior_score_last_report = 72;
    if (has_player_behavior_score_last_report()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_behavior_score_last_report());
    }

    // optional bool player_behavior_report_old_data = 73;
    if (has_player_behavior_report_old_data()) {
      total_size += 2 + 1;
    }

    // optional uint32 tourney_skill_level = 74;
    if (has_tourney_skill_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_skill_level());
    }

    // optional uint32 tourney_recent_participation_date = 85;
    if (has_tourney_recent_participation_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_recent_participation_date());
    }

    // optional uint32 favorite_team = 87;
    if (has_favorite_team()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->favorite_team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTAGameAccountClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSODOTAGameAccountClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSODOTAGameAccountClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTAGameAccountClient::MergeFrom(const CSODOTAGameAccountClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_wins()) {
      set_wins(from.wins());
    }
    if (from.has_losses()) {
      set_losses(from.losses());
    }
    if (from.has_xp()) {
      set_xp(from.xp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_initial_skill()) {
      set_initial_skill(from.initial_skill());
    }
    if (from.has_leaver_count()) {
      set_leaver_count(from.leaver_count());
    }
    if (from.has_secondary_leaver_count()) {
      set_secondary_leaver_count(from.secondary_leaver_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_low_priority_until_date()) {
      set_low_priority_until_date(from.low_priority_until_date());
    }
    if (from.has_prevent_text_chat_until_date()) {
      set_prevent_text_chat_until_date(from.prevent_text_chat_until_date());
    }
    if (from.has_prevent_voice_until_date()) {
      set_prevent_voice_until_date(from.prevent_voice_until_date());
    }
    if (from.has_prevent_public_text_chat_until_date()) {
      set_prevent_public_text_chat_until_date(from.prevent_public_text_chat_until_date());
    }
    if (from.has_last_abandoned_game_date()) {
      set_last_abandoned_game_date(from.last_abandoned_game_date());
    }
    if (from.has_last_secondary_abandoned_game_date()) {
      set_last_secondary_abandoned_game_date(from.last_secondary_abandoned_game_date());
    }
    if (from.has_leaver_penalty_count()) {
      set_leaver_penalty_count(from.leaver_penalty_count());
    }
    if (from.has_completed_game_streak()) {
      set_completed_game_streak(from.completed_game_streak());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_teaching()) {
      set_teaching(from.teaching());
    }
    if (from.has_leadership()) {
      set_leadership(from.leadership());
    }
    if (from.has_friendly()) {
      set_friendly(from.friendly());
    }
    if (from.has_forgiving()) {
      set_forgiving(from.forgiving());
    }
    if (from.has_account_disabled_until_date()) {
      set_account_disabled_until_date(from.account_disabled_until_date());
    }
    if (from.has_account_disabled_count()) {
      set_account_disabled_count(from.account_disabled_count());
    }
    if (from.has_showcase_hero_id()) {
      set_showcase_hero_id(from.showcase_hero_id());
    }
    if (from.has_match_disabled_until_date()) {
      set_match_disabled_until_date(from.match_disabled_until_date());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_match_disabled_count()) {
      set_match_disabled_count(from.match_disabled_count());
    }
    if (from.has_partner_account_type()) {
      set_partner_account_type(from.partner_account_type());
    }
    if (from.has_partner_account_state()) {
      set_partner_account_state(from.partner_account_state());
    }
    if (from.has_shutdownlawterminatetimestamp()) {
      set_shutdownlawterminatetimestamp(from.shutdownlawterminatetimestamp());
    }
    if (from.has_low_priority_games_remaining()) {
      set_low_priority_games_remaining(from.low_priority_games_remaining());
    }
    if (from.has_competitive_rank()) {
      set_competitive_rank(from.competitive_rank());
    }
    if (from.has_calibration_games_remaining()) {
      set_calibration_games_remaining(from.calibration_games_remaining());
    }
    if (from.has_solo_competitive_rank()) {
      set_solo_competitive_rank(from.solo_competitive_rank());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_solo_calibration_games_remaining()) {
      set_solo_calibration_games_remaining(from.solo_calibration_games_remaining());
    }
    if (from.has_general_seasonal_ranked_rank()) {
      set_general_seasonal_ranked_rank(from.general_seasonal_ranked_rank());
    }
    if (from.has_general_seasonal_ranked_calibration_games_remaining()) {
      set_general_seasonal_ranked_calibration_games_remaining(from.general_seasonal_ranked_calibration_games_remaining());
    }
    if (from.has_general_seasonal_ranked_games_played()) {
      set_general_seasonal_ranked_games_played(from.general_seasonal_ranked_games_played());
    }
    if (from.has_general_seasonal_ranked_rank_peak()) {
      set_general_seasonal_ranked_rank_peak(from.general_seasonal_ranked_rank_peak());
    }
    if (from.has_general_seasonal_rank_transferred()) {
      set_general_seasonal_rank_transferred(from.general_seasonal_rank_transferred());
    }
    if (from.has_solo_seasonal_ranked_rank()) {
      set_solo_seasonal_ranked_rank(from.solo_seasonal_ranked_rank());
    }
    if (from.has_solo_seasonal_ranked_calibration_games_remaining()) {
      set_solo_seasonal_ranked_calibration_games_remaining(from.solo_seasonal_ranked_calibration_games_remaining());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_solo_seasonal_ranked_games_played()) {
      set_solo_seasonal_ranked_games_played(from.solo_seasonal_ranked_games_played());
    }
    if (from.has_solo_seasonal_ranked_rank_peak()) {
      set_solo_seasonal_ranked_rank_peak(from.solo_seasonal_ranked_rank_peak());
    }
    if (from.has_solo_seasonal_rank_transferred()) {
      set_solo_seasonal_rank_transferred(from.solo_seasonal_rank_transferred());
    }
    if (from.has_recruitment_level()) {
      set_recruitment_level(from.recruitment_level());
    }
    if (from.has_has_new_notifications()) {
      set_has_new_notifications(from.has_new_notifications());
    }
    if (from.has_is_league_admin()) {
      set_is_league_admin(from.is_league_admin());
    }
    if (from.has_casual_games_played()) {
      set_casual_games_played(from.casual_games_played());
    }
    if (from.has_solo_competitive_games_played()) {
      set_solo_competitive_games_played(from.solo_competitive_games_played());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_party_competitive_games_played()) {
      set_party_competitive_games_played(from.party_competitive_games_played());
    }
    if (from.has_casual_1v1_games_played()) {
      set_casual_1v1_games_played(from.casual_1v1_games_played());
    }
    if (from.has_competitive_team_games_played()) {
      set_competitive_team_games_played(from.competitive_team_games_played());
    }
    if (from.has_curr_all_hero_challenge_id()) {
      set_curr_all_hero_challenge_id(from.curr_all_hero_challenge_id());
    }
    if (from.has_play_time_points()) {
      set_play_time_points(from.play_time_points());
    }
    if (from.has_account_flags()) {
      set_account_flags(from.account_flags());
    }
    if (from.has_play_time_level()) {
      set_play_time_level(from.play_time_level());
    }
    if (from.has_player_behavior_seq_num_last_report()) {
      set_player_behavior_seq_num_last_report(from.player_behavior_seq_num_last_report());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_player_behavior_score_last_report()) {
      set_player_behavior_score_last_report(from.player_behavior_score_last_report());
    }
    if (from.has_player_behavior_report_old_data()) {
      set_player_behavior_report_old_data(from.player_behavior_report_old_data());
    }
    if (from.has_tourney_skill_level()) {
      set_tourney_skill_level(from.tourney_skill_level());
    }
    if (from.has_tourney_recent_participation_date()) {
      set_tourney_recent_participation_date(from.tourney_recent_participation_date());
    }
    if (from.has_favorite_team()) {
      set_favorite_team(from.favorite_team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSODOTAGameAccountClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAGameAccountClient::CopyFrom(const CSODOTAGameAccountClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAGameAccountClient::IsInitialized() const {

  return true;
}

void CSODOTAGameAccountClient::Swap(CSODOTAGameAccountClient* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(wins_, other->wins_);
    std::swap(losses_, other->losses_);
    std::swap(xp_, other->xp_);
    std::swap(level_, other->level_);
    std::swap(initial_skill_, other->initial_skill_);
    std::swap(leaver_count_, other->leaver_count_);
    std::swap(secondary_leaver_count_, other->secondary_leaver_count_);
    std::swap(low_priority_until_date_, other->low_priority_until_date_);
    std::swap(prevent_text_chat_until_date_, other->prevent_text_chat_until_date_);
    std::swap(prevent_voice_until_date_, other->prevent_voice_until_date_);
    std::swap(prevent_public_text_chat_until_date_, other->prevent_public_text_chat_until_date_);
    std::swap(last_abandoned_game_date_, other->last_abandoned_game_date_);
    std::swap(last_secondary_abandoned_game_date_, other->last_secondary_abandoned_game_date_);
    std::swap(leaver_penalty_count_, other->leaver_penalty_count_);
    std::swap(completed_game_streak_, other->completed_game_streak_);
    std::swap(teaching_, other->teaching_);
    std::swap(leadership_, other->leadership_);
    std::swap(friendly_, other->friendly_);
    std::swap(forgiving_, other->forgiving_);
    std::swap(account_disabled_until_date_, other->account_disabled_until_date_);
    std::swap(account_disabled_count_, other->account_disabled_count_);
    std::swap(showcase_hero_id_, other->showcase_hero_id_);
    std::swap(match_disabled_until_date_, other->match_disabled_until_date_);
    std::swap(match_disabled_count_, other->match_disabled_count_);
    std::swap(partner_account_type_, other->partner_account_type_);
    std::swap(partner_account_state_, other->partner_account_state_);
    std::swap(shutdownlawterminatetimestamp_, other->shutdownlawterminatetimestamp_);
    std::swap(low_priority_games_remaining_, other->low_priority_games_remaining_);
    std::swap(competitive_rank_, other->competitive_rank_);
    std::swap(calibration_games_remaining_, other->calibration_games_remaining_);
    std::swap(solo_competitive_rank_, other->solo_competitive_rank_);
    std::swap(solo_calibration_games_remaining_, other->solo_calibration_games_remaining_);
    std::swap(general_seasonal_ranked_rank_, other->general_seasonal_ranked_rank_);
    std::swap(general_seasonal_ranked_calibration_games_remaining_, other->general_seasonal_ranked_calibration_games_remaining_);
    std::swap(general_seasonal_ranked_games_played_, other->general_seasonal_ranked_games_played_);
    std::swap(general_seasonal_ranked_rank_peak_, other->general_seasonal_ranked_rank_peak_);
    std::swap(general_seasonal_rank_transferred_, other->general_seasonal_rank_transferred_);
    std::swap(solo_seasonal_ranked_rank_, other->solo_seasonal_ranked_rank_);
    std::swap(solo_seasonal_ranked_calibration_games_remaining_, other->solo_seasonal_ranked_calibration_games_remaining_);
    std::swap(solo_seasonal_ranked_games_played_, other->solo_seasonal_ranked_games_played_);
    std::swap(solo_seasonal_ranked_rank_peak_, other->solo_seasonal_ranked_rank_peak_);
    std::swap(solo_seasonal_rank_transferred_, other->solo_seasonal_rank_transferred_);
    std::swap(recruitment_level_, other->recruitment_level_);
    std::swap(has_new_notifications_, other->has_new_notifications_);
    std::swap(is_league_admin_, other->is_league_admin_);
    std::swap(casual_games_played_, other->casual_games_played_);
    std::swap(solo_competitive_games_played_, other->solo_competitive_games_played_);
    std::swap(party_competitive_games_played_, other->party_competitive_games_played_);
    std::swap(casual_1v1_games_played_, other->casual_1v1_games_played_);
    std::swap(competitive_team_games_played_, other->competitive_team_games_played_);
    std::swap(curr_all_hero_challenge_id_, other->curr_all_hero_challenge_id_);
    std::swap(play_time_points_, other->play_time_points_);
    std::swap(account_flags_, other->account_flags_);
    std::swap(play_time_level_, other->play_time_level_);
    std::swap(player_behavior_seq_num_last_report_, other->player_behavior_seq_num_last_report_);
    std::swap(player_behavior_score_last_report_, other->player_behavior_score_last_report_);
    std::swap(player_behavior_report_old_data_, other->player_behavior_report_old_data_);
    std::swap(tourney_skill_level_, other->tourney_skill_level_);
    std::swap(tourney_recent_participation_date_, other->tourney_recent_participation_date_);
    std::swap(favorite_team_, other->favorite_team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSODOTAGameAccountClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTAGameAccountClient_descriptor_;
  metadata.reflection = CSODOTAGameAccountClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgLobbyEventPoints_AccountPoints::kAccountIdFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kNormalPointsFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kPremiumPointsFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kOwnedFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kFavoriteTeamFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kFavoriteTeamLevelFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kPointsHeldFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kPremiumPointsHeldFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kFavoriteTeamFoilLevelFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kWagerTokensRemainingFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kWagerTokensMaxFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kActiveEffectsMaskFieldNumber;
#endif  // !_MSC_VER

CMsgLobbyEventPoints_AccountPoints::CMsgLobbyEventPoints_AccountPoints()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgLobbyEventPoints.AccountPoints)
}

void CMsgLobbyEventPoints_AccountPoints::InitAsDefaultInstance() {
}

CMsgLobbyEventPoints_AccountPoints::CMsgLobbyEventPoints_AccountPoints(const CMsgLobbyEventPoints_AccountPoints& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyEventPoints.AccountPoints)
}

void CMsgLobbyEventPoints_AccountPoints::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  normal_points_ = 0u;
  premium_points_ = 0u;
  owned_ = false;
  favorite_team_ = 0u;
  favorite_team_level_ = 0u;
  points_held_ = 0u;
  premium_points_held_ = 0u;
  favorite_team_foil_level_ = 0u;
  wager_tokens_remaining_ = 0u;
  wager_tokens_max_ = 0u;
  active_effects_mask_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLobbyEventPoints_AccountPoints::~CMsgLobbyEventPoints_AccountPoints() {
  // @@protoc_insertion_point(destructor:CMsgLobbyEventPoints.AccountPoints)
  SharedDtor();
}

void CMsgLobbyEventPoints_AccountPoints::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLobbyEventPoints_AccountPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLobbyEventPoints_AccountPoints::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLobbyEventPoints_AccountPoints_descriptor_;
}

const CMsgLobbyEventPoints_AccountPoints& CMsgLobbyEventPoints_AccountPoints::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgLobbyEventPoints_AccountPoints* CMsgLobbyEventPoints_AccountPoints::default_instance_ = NULL;

CMsgLobbyEventPoints_AccountPoints* CMsgLobbyEventPoints_AccountPoints::New() const {
  return new CMsgLobbyEventPoints_AccountPoints;
}

void CMsgLobbyEventPoints_AccountPoints::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgLobbyEventPoints_AccountPoints*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(account_id_, premium_points_held_);
  }
  ZR_(favorite_team_foil_level_, wager_tokens_max_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLobbyEventPoints_AccountPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgLobbyEventPoints.AccountPoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_normal_points;
        break;
      }

      // optional uint32 normal_points = 2;
      case 2: {
        if (tag == 16) {
         parse_normal_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normal_points_)));
          set_has_normal_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_premium_points;
        break;
      }

      // optional uint32 premium_points = 3;
      case 3: {
        if (tag == 24) {
         parse_premium_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &premium_points_)));
          set_has_premium_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_owned;
        break;
      }

      // optional bool owned = 4;
      case 4: {
        if (tag == 32) {
         parse_owned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &owned_)));
          set_has_owned();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_favorite_team;
        break;
      }

      // optional uint32 favorite_team = 5;
      case 5: {
        if (tag == 40) {
         parse_favorite_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favorite_team_)));
          set_has_favorite_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_favorite_team_level;
        break;
      }

      // optional uint32 favorite_team_level = 6;
      case 6: {
        if (tag == 48) {
         parse_favorite_team_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favorite_team_level_)));
          set_has_favorite_team_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_points_held;
        break;
      }

      // optional uint32 points_held = 7;
      case 7: {
        if (tag == 56) {
         parse_points_held:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_held_)));
          set_has_points_held();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_premium_points_held;
        break;
      }

      // optional uint32 premium_points_held = 8;
      case 8: {
        if (tag == 64) {
         parse_premium_points_held:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &premium_points_held_)));
          set_has_premium_points_held();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_favorite_team_foil_level;
        break;
      }

      // optional uint32 favorite_team_foil_level = 9;
      case 9: {
        if (tag == 72) {
         parse_favorite_team_foil_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favorite_team_foil_level_)));
          set_has_favorite_team_foil_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_wager_tokens_remaining;
        break;
      }

      // optional uint32 wager_tokens_remaining = 10;
      case 10: {
        if (tag == 80) {
         parse_wager_tokens_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wager_tokens_remaining_)));
          set_has_wager_tokens_remaining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_wager_tokens_max;
        break;
      }

      // optional uint32 wager_tokens_max = 11;
      case 11: {
        if (tag == 88) {
         parse_wager_tokens_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wager_tokens_max_)));
          set_has_wager_tokens_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_active_effects_mask;
        break;
      }

      // optional uint64 active_effects_mask = 12;
      case 12: {
        if (tag == 96) {
         parse_active_effects_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &active_effects_mask_)));
          set_has_active_effects_mask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgLobbyEventPoints.AccountPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgLobbyEventPoints.AccountPoints)
  return false;
#undef DO_
}

void CMsgLobbyEventPoints_AccountPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgLobbyEventPoints.AccountPoints)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 normal_points = 2;
  if (has_normal_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->normal_points(), output);
  }

  // optional uint32 premium_points = 3;
  if (has_premium_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->premium_points(), output);
  }

  // optional bool owned = 4;
  if (has_owned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->owned(), output);
  }

  // optional uint32 favorite_team = 5;
  if (has_favorite_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->favorite_team(), output);
  }

  // optional uint32 favorite_team_level = 6;
  if (has_favorite_team_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->favorite_team_level(), output);
  }

  // optional uint32 points_held = 7;
  if (has_points_held()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->points_held(), output);
  }

  // optional uint32 premium_points_held = 8;
  if (has_premium_points_held()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->premium_points_held(), output);
  }

  // optional uint32 favorite_team_foil_level = 9;
  if (has_favorite_team_foil_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->favorite_team_foil_level(), output);
  }

  // optional uint32 wager_tokens_remaining = 10;
  if (has_wager_tokens_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->wager_tokens_remaining(), output);
  }

  // optional uint32 wager_tokens_max = 11;
  if (has_wager_tokens_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->wager_tokens_max(), output);
  }

  // optional uint64 active_effects_mask = 12;
  if (has_active_effects_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->active_effects_mask(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgLobbyEventPoints.AccountPoints)
}

::google::protobuf::uint8* CMsgLobbyEventPoints_AccountPoints::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyEventPoints.AccountPoints)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 normal_points = 2;
  if (has_normal_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->normal_points(), target);
  }

  // optional uint32 premium_points = 3;
  if (has_premium_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->premium_points(), target);
  }

  // optional bool owned = 4;
  if (has_owned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->owned(), target);
  }

  // optional uint32 favorite_team = 5;
  if (has_favorite_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->favorite_team(), target);
  }

  // optional uint32 favorite_team_level = 6;
  if (has_favorite_team_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->favorite_team_level(), target);
  }

  // optional uint32 points_held = 7;
  if (has_points_held()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->points_held(), target);
  }

  // optional uint32 premium_points_held = 8;
  if (has_premium_points_held()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->premium_points_held(), target);
  }

  // optional uint32 favorite_team_foil_level = 9;
  if (has_favorite_team_foil_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->favorite_team_foil_level(), target);
  }

  // optional uint32 wager_tokens_remaining = 10;
  if (has_wager_tokens_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->wager_tokens_remaining(), target);
  }

  // optional uint32 wager_tokens_max = 11;
  if (has_wager_tokens_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->wager_tokens_max(), target);
  }

  // optional uint64 active_effects_mask = 12;
  if (has_active_effects_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->active_effects_mask(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyEventPoints.AccountPoints)
  return target;
}

int CMsgLobbyEventPoints_AccountPoints::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 normal_points = 2;
    if (has_normal_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normal_points());
    }

    // optional uint32 premium_points = 3;
    if (has_premium_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->premium_points());
    }

    // optional bool owned = 4;
    if (has_owned()) {
      total_size += 1 + 1;
    }

    // optional uint32 favorite_team = 5;
    if (has_favorite_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->favorite_team());
    }

    // optional uint32 favorite_team_level = 6;
    if (has_favorite_team_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->favorite_team_level());
    }

    // optional uint32 points_held = 7;
    if (has_points_held()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points_held());
    }

    // optional uint32 premium_points_held = 8;
    if (has_premium_points_held()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->premium_points_held());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 favorite_team_foil_level = 9;
    if (has_favorite_team_foil_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->favorite_team_foil_level());
    }

    // optional uint32 wager_tokens_remaining = 10;
    if (has_wager_tokens_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wager_tokens_remaining());
    }

    // optional uint32 wager_tokens_max = 11;
    if (has_wager_tokens_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wager_tokens_max());
    }

    // optional uint64 active_effects_mask = 12;
    if (has_active_effects_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->active_effects_mask());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLobbyEventPoints_AccountPoints::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLobbyEventPoints_AccountPoints* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLobbyEventPoints_AccountPoints*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLobbyEventPoints_AccountPoints::MergeFrom(const CMsgLobbyEventPoints_AccountPoints& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_normal_points()) {
      set_normal_points(from.normal_points());
    }
    if (from.has_premium_points()) {
      set_premium_points(from.premium_points());
    }
    if (from.has_owned()) {
      set_owned(from.owned());
    }
    if (from.has_favorite_team()) {
      set_favorite_team(from.favorite_team());
    }
    if (from.has_favorite_team_level()) {
      set_favorite_team_level(from.favorite_team_level());
    }
    if (from.has_points_held()) {
      set_points_held(from.points_held());
    }
    if (from.has_premium_points_held()) {
      set_premium_points_held(from.premium_points_held());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_favorite_team_foil_level()) {
      set_favorite_team_foil_level(from.favorite_team_foil_level());
    }
    if (from.has_wager_tokens_remaining()) {
      set_wager_tokens_remaining(from.wager_tokens_remaining());
    }
    if (from.has_wager_tokens_max()) {
      set_wager_tokens_max(from.wager_tokens_max());
    }
    if (from.has_active_effects_mask()) {
      set_active_effects_mask(from.active_effects_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLobbyEventPoints_AccountPoints::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyEventPoints_AccountPoints::CopyFrom(const CMsgLobbyEventPoints_AccountPoints& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyEventPoints_AccountPoints::IsInitialized() const {

  return true;
}

void CMsgLobbyEventPoints_AccountPoints::Swap(CMsgLobbyEventPoints_AccountPoints* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(normal_points_, other->normal_points_);
    std::swap(premium_points_, other->premium_points_);
    std::swap(owned_, other->owned_);
    std::swap(favorite_team_, other->favorite_team_);
    std::swap(favorite_team_level_, other->favorite_team_level_);
    std::swap(points_held_, other->points_held_);
    std::swap(premium_points_held_, other->premium_points_held_);
    std::swap(favorite_team_foil_level_, other->favorite_team_foil_level_);
    std::swap(wager_tokens_remaining_, other->wager_tokens_remaining_);
    std::swap(wager_tokens_max_, other->wager_tokens_max_);
    std::swap(active_effects_mask_, other->active_effects_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLobbyEventPoints_AccountPoints::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLobbyEventPoints_AccountPoints_descriptor_;
  metadata.reflection = CMsgLobbyEventPoints_AccountPoints_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgLobbyEventPoints::kEventIdFieldNumber;
const int CMsgLobbyEventPoints::kAccountPointsFieldNumber;
#endif  // !_MSC_VER

CMsgLobbyEventPoints::CMsgLobbyEventPoints()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgLobbyEventPoints)
}

void CMsgLobbyEventPoints::InitAsDefaultInstance() {
}

CMsgLobbyEventPoints::CMsgLobbyEventPoints(const CMsgLobbyEventPoints& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyEventPoints)
}

void CMsgLobbyEventPoints::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLobbyEventPoints::~CMsgLobbyEventPoints() {
  // @@protoc_insertion_point(destructor:CMsgLobbyEventPoints)
  SharedDtor();
}

void CMsgLobbyEventPoints::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLobbyEventPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLobbyEventPoints::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLobbyEventPoints_descriptor_;
}

const CMsgLobbyEventPoints& CMsgLobbyEventPoints::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgLobbyEventPoints* CMsgLobbyEventPoints::default_instance_ = NULL;

CMsgLobbyEventPoints* CMsgLobbyEventPoints::New() const {
  return new CMsgLobbyEventPoints;
}

void CMsgLobbyEventPoints::Clear() {
  event_id_ = 0u;
  account_points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLobbyEventPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgLobbyEventPoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_account_points;
        break;
      }

      // repeated .CMsgLobbyEventPoints.AccountPoints account_points = 2;
      case 2: {
        if (tag == 18) {
         parse_account_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_account_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_account_points;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgLobbyEventPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgLobbyEventPoints)
  return false;
#undef DO_
}

void CMsgLobbyEventPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgLobbyEventPoints)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // repeated .CMsgLobbyEventPoints.AccountPoints account_points = 2;
  for (int i = 0; i < this->account_points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->account_points(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgLobbyEventPoints)
}

::google::protobuf::uint8* CMsgLobbyEventPoints::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyEventPoints)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // repeated .CMsgLobbyEventPoints.AccountPoints account_points = 2;
  for (int i = 0; i < this->account_points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->account_points(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyEventPoints)
  return target;
}

int CMsgLobbyEventPoints::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

  }
  // repeated .CMsgLobbyEventPoints.AccountPoints account_points = 2;
  total_size += 1 * this->account_points_size();
  for (int i = 0; i < this->account_points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->account_points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLobbyEventPoints::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLobbyEventPoints* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLobbyEventPoints*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLobbyEventPoints::MergeFrom(const CMsgLobbyEventPoints& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_points_.MergeFrom(from.account_points_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLobbyEventPoints::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyEventPoints::CopyFrom(const CMsgLobbyEventPoints& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyEventPoints::IsInitialized() const {

  return true;
}

void CMsgLobbyEventPoints::Swap(CMsgLobbyEventPoints* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    account_points_.Swap(&other->account_points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLobbyEventPoints::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLobbyEventPoints_descriptor_;
  metadata.reflection = CMsgLobbyEventPoints_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgBattleCupVictory::kAccountIdFieldNumber;
const int CMsgBattleCupVictory::kWinDateFieldNumber;
const int CMsgBattleCupVictory::kValidUntilFieldNumber;
const int CMsgBattleCupVictory::kSkillLevelFieldNumber;
const int CMsgBattleCupVictory::kTournamentIdFieldNumber;
const int CMsgBattleCupVictory::kDivisionIdFieldNumber;
const int CMsgBattleCupVictory::kTeamIdFieldNumber;
const int CMsgBattleCupVictory::kStreakFieldNumber;
#endif  // !_MSC_VER

CMsgBattleCupVictory::CMsgBattleCupVictory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgBattleCupVictory)
}

void CMsgBattleCupVictory::InitAsDefaultInstance() {
}

CMsgBattleCupVictory::CMsgBattleCupVictory(const CMsgBattleCupVictory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgBattleCupVictory)
}

void CMsgBattleCupVictory::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  win_date_ = 0u;
  valid_until_ = 0u;
  skill_level_ = 0u;
  tournament_id_ = 0u;
  division_id_ = 0u;
  team_id_ = 0u;
  streak_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgBattleCupVictory::~CMsgBattleCupVictory() {
  // @@protoc_insertion_point(destructor:CMsgBattleCupVictory)
  SharedDtor();
}

void CMsgBattleCupVictory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgBattleCupVictory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBattleCupVictory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgBattleCupVictory_descriptor_;
}

const CMsgBattleCupVictory& CMsgBattleCupVictory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgBattleCupVictory* CMsgBattleCupVictory::default_instance_ = NULL;

CMsgBattleCupVictory* CMsgBattleCupVictory::New() const {
  return new CMsgBattleCupVictory;
}

void CMsgBattleCupVictory::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgBattleCupVictory*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(account_id_, streak_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgBattleCupVictory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgBattleCupVictory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_win_date;
        break;
      }

      // optional uint32 win_date = 2;
      case 2: {
        if (tag == 16) {
         parse_win_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_date_)));
          set_has_win_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_valid_until;
        break;
      }

      // optional uint32 valid_until = 3;
      case 3: {
        if (tag == 24) {
         parse_valid_until:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valid_until_)));
          set_has_valid_until();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_skill_level;
        break;
      }

      // optional uint32 skill_level = 4;
      case 4: {
        if (tag == 32) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tournament_id;
        break;
      }

      // optional uint32 tournament_id = 5;
      case 5: {
        if (tag == 40) {
         parse_tournament_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
          set_has_tournament_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_division_id;
        break;
      }

      // optional uint32 division_id = 6;
      case 6: {
        if (tag == 48) {
         parse_division_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &division_id_)));
          set_has_division_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 7;
      case 7: {
        if (tag == 56) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_streak;
        break;
      }

      // optional uint32 streak = 8;
      case 8: {
        if (tag == 64) {
         parse_streak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &streak_)));
          set_has_streak();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgBattleCupVictory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgBattleCupVictory)
  return false;
#undef DO_
}

void CMsgBattleCupVictory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgBattleCupVictory)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 win_date = 2;
  if (has_win_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->win_date(), output);
  }

  // optional uint32 valid_until = 3;
  if (has_valid_until()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->valid_until(), output);
  }

  // optional uint32 skill_level = 4;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skill_level(), output);
  }

  // optional uint32 tournament_id = 5;
  if (has_tournament_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tournament_id(), output);
  }

  // optional uint32 division_id = 6;
  if (has_division_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->division_id(), output);
  }

  // optional uint32 team_id = 7;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->team_id(), output);
  }

  // optional uint32 streak = 8;
  if (has_streak()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->streak(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgBattleCupVictory)
}

::google::protobuf::uint8* CMsgBattleCupVictory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBattleCupVictory)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 win_date = 2;
  if (has_win_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->win_date(), target);
  }

  // optional uint32 valid_until = 3;
  if (has_valid_until()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->valid_until(), target);
  }

  // optional uint32 skill_level = 4;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skill_level(), target);
  }

  // optional uint32 tournament_id = 5;
  if (has_tournament_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tournament_id(), target);
  }

  // optional uint32 division_id = 6;
  if (has_division_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->division_id(), target);
  }

  // optional uint32 team_id = 7;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->team_id(), target);
  }

  // optional uint32 streak = 8;
  if (has_streak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->streak(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBattleCupVictory)
  return target;
}

int CMsgBattleCupVictory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 win_date = 2;
    if (has_win_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_date());
    }

    // optional uint32 valid_until = 3;
    if (has_valid_until()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valid_until());
    }

    // optional uint32 skill_level = 4;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }

    // optional uint32 tournament_id = 5;
    if (has_tournament_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 division_id = 6;
    if (has_division_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->division_id());
    }

    // optional uint32 team_id = 7;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint32 streak = 8;
    if (has_streak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->streak());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBattleCupVictory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgBattleCupVictory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgBattleCupVictory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgBattleCupVictory::MergeFrom(const CMsgBattleCupVictory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_win_date()) {
      set_win_date(from.win_date());
    }
    if (from.has_valid_until()) {
      set_valid_until(from.valid_until());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
    if (from.has_tournament_id()) {
      set_tournament_id(from.tournament_id());
    }
    if (from.has_division_id()) {
      set_division_id(from.division_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_streak()) {
      set_streak(from.streak());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgBattleCupVictory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBattleCupVictory::CopyFrom(const CMsgBattleCupVictory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBattleCupVictory::IsInitialized() const {

  return true;
}

void CMsgBattleCupVictory::Swap(CMsgBattleCupVictory* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(win_date_, other->win_date_);
    std::swap(valid_until_, other->valid_until_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(tournament_id_, other->tournament_id_);
    std::swap(division_id_, other->division_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(streak_, other->streak_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgBattleCupVictory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgBattleCupVictory_descriptor_;
  metadata.reflection = CMsgBattleCupVictory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgLobbyBattleCupVictoryList::kWinnersFieldNumber;
#endif  // !_MSC_VER

CMsgLobbyBattleCupVictoryList::CMsgLobbyBattleCupVictoryList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgLobbyBattleCupVictoryList)
}

void CMsgLobbyBattleCupVictoryList::InitAsDefaultInstance() {
}

CMsgLobbyBattleCupVictoryList::CMsgLobbyBattleCupVictoryList(const CMsgLobbyBattleCupVictoryList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyBattleCupVictoryList)
}

void CMsgLobbyBattleCupVictoryList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLobbyBattleCupVictoryList::~CMsgLobbyBattleCupVictoryList() {
  // @@protoc_insertion_point(destructor:CMsgLobbyBattleCupVictoryList)
  SharedDtor();
}

void CMsgLobbyBattleCupVictoryList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLobbyBattleCupVictoryList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLobbyBattleCupVictoryList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLobbyBattleCupVictoryList_descriptor_;
}

const CMsgLobbyBattleCupVictoryList& CMsgLobbyBattleCupVictoryList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgLobbyBattleCupVictoryList* CMsgLobbyBattleCupVictoryList::default_instance_ = NULL;

CMsgLobbyBattleCupVictoryList* CMsgLobbyBattleCupVictoryList::New() const {
  return new CMsgLobbyBattleCupVictoryList;
}

void CMsgLobbyBattleCupVictoryList::Clear() {
  winners_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLobbyBattleCupVictoryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgLobbyBattleCupVictoryList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgBattleCupVictory winners = 1;
      case 1: {
        if (tag == 10) {
         parse_winners:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_winners()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_winners;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgLobbyBattleCupVictoryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgLobbyBattleCupVictoryList)
  return false;
#undef DO_
}

void CMsgLobbyBattleCupVictoryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgLobbyBattleCupVictoryList)
  // repeated .CMsgBattleCupVictory winners = 1;
  for (int i = 0; i < this->winners_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->winners(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgLobbyBattleCupVictoryList)
}

::google::protobuf::uint8* CMsgLobbyBattleCupVictoryList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyBattleCupVictoryList)
  // repeated .CMsgBattleCupVictory winners = 1;
  for (int i = 0; i < this->winners_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->winners(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyBattleCupVictoryList)
  return target;
}

int CMsgLobbyBattleCupVictoryList::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgBattleCupVictory winners = 1;
  total_size += 1 * this->winners_size();
  for (int i = 0; i < this->winners_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->winners(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLobbyBattleCupVictoryList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLobbyBattleCupVictoryList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLobbyBattleCupVictoryList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLobbyBattleCupVictoryList::MergeFrom(const CMsgLobbyBattleCupVictoryList& from) {
  GOOGLE_CHECK_NE(&from, this);
  winners_.MergeFrom(from.winners_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLobbyBattleCupVictoryList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyBattleCupVictoryList::CopyFrom(const CMsgLobbyBattleCupVictoryList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyBattleCupVictoryList::IsInitialized() const {

  return true;
}

void CMsgLobbyBattleCupVictoryList::Swap(CMsgLobbyBattleCupVictoryList* other) {
  if (other != this) {
    winners_.Swap(&other->winners_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLobbyBattleCupVictoryList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLobbyBattleCupVictoryList_descriptor_;
  metadata.reflection = CMsgLobbyBattleCupVictoryList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTABroadcastNotification::kMessageFieldNumber;
#endif  // !_MSC_VER

CMsgDOTABroadcastNotification::CMsgDOTABroadcastNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTABroadcastNotification)
}

void CMsgDOTABroadcastNotification::InitAsDefaultInstance() {
}

CMsgDOTABroadcastNotification::CMsgDOTABroadcastNotification(const CMsgDOTABroadcastNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTABroadcastNotification)
}

void CMsgDOTABroadcastNotification::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTABroadcastNotification::~CMsgDOTABroadcastNotification() {
  // @@protoc_insertion_point(destructor:CMsgDOTABroadcastNotification)
  SharedDtor();
}

void CMsgDOTABroadcastNotification::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTABroadcastNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTABroadcastNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTABroadcastNotification_descriptor_;
}

const CMsgDOTABroadcastNotification& CMsgDOTABroadcastNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTABroadcastNotification* CMsgDOTABroadcastNotification::default_instance_ = NULL;

CMsgDOTABroadcastNotification* CMsgDOTABroadcastNotification::New() const {
  return new CMsgDOTABroadcastNotification;
}

void CMsgDOTABroadcastNotification::Clear() {
  if (has_message()) {
    if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      message_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTABroadcastNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTABroadcastNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTABroadcastNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTABroadcastNotification)
  return false;
#undef DO_
}

void CMsgDOTABroadcastNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTABroadcastNotification)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTABroadcastNotification)
}

::google::protobuf::uint8* CMsgDOTABroadcastNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTABroadcastNotification)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTABroadcastNotification)
  return target;
}

int CMsgDOTABroadcastNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTABroadcastNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTABroadcastNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTABroadcastNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTABroadcastNotification::MergeFrom(const CMsgDOTABroadcastNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTABroadcastNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABroadcastNotification::CopyFrom(const CMsgDOTABroadcastNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABroadcastNotification::IsInitialized() const {

  return true;
}

void CMsgDOTABroadcastNotification::Swap(CMsgDOTABroadcastNotification* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTABroadcastNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTABroadcastNotification_descriptor_;
  metadata.reflection = CMsgDOTABroadcastNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProtoItemHeroStatue::kHeroIdFieldNumber;
const int CProtoItemHeroStatue::kStatusEffectIndexFieldNumber;
const int CProtoItemHeroStatue::kSequenceNameFieldNumber;
const int CProtoItemHeroStatue::kCycleFieldNumber;
const int CProtoItemHeroStatue::kWearableFieldNumber;
const int CProtoItemHeroStatue::kInscriptionFieldNumber;
const int CProtoItemHeroStatue::kStyleFieldNumber;
const int CProtoItemHeroStatue::kTournamentDropFieldNumber;
#endif  // !_MSC_VER

CProtoItemHeroStatue::CProtoItemHeroStatue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CProtoItemHeroStatue)
}

void CProtoItemHeroStatue::InitAsDefaultInstance() {
}

CProtoItemHeroStatue::CProtoItemHeroStatue(const CProtoItemHeroStatue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CProtoItemHeroStatue)
}

void CProtoItemHeroStatue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hero_id_ = 0u;
  status_effect_index_ = 0u;
  sequence_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cycle_ = 0;
  inscription_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tournament_drop_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProtoItemHeroStatue::~CProtoItemHeroStatue() {
  // @@protoc_insertion_point(destructor:CProtoItemHeroStatue)
  SharedDtor();
}

void CProtoItemHeroStatue::SharedDtor() {
  if (sequence_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sequence_name_;
  }
  if (inscription_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inscription_;
  }
  if (this != default_instance_) {
  }
}

void CProtoItemHeroStatue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProtoItemHeroStatue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProtoItemHeroStatue_descriptor_;
}

const CProtoItemHeroStatue& CProtoItemHeroStatue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CProtoItemHeroStatue* CProtoItemHeroStatue::default_instance_ = NULL;

CProtoItemHeroStatue* CProtoItemHeroStatue::New() const {
  return new CProtoItemHeroStatue;
}

void CProtoItemHeroStatue::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CProtoItemHeroStatue*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 175) {
    ZR_(hero_id_, status_effect_index_);
    ZR_(cycle_, tournament_drop_);
    if (has_sequence_name()) {
      if (sequence_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sequence_name_->clear();
      }
    }
    if (has_inscription()) {
      if (inscription_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        inscription_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  wearable_.Clear();
  style_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProtoItemHeroStatue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CProtoItemHeroStatue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status_effect_index;
        break;
      }

      // optional uint32 status_effect_index = 2;
      case 2: {
        if (tag == 16) {
         parse_status_effect_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_effect_index_)));
          set_has_status_effect_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sequence_name;
        break;
      }

      // optional string sequence_name = 3;
      case 3: {
        if (tag == 26) {
         parse_sequence_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sequence_name().data(), this->sequence_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sequence_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_cycle;
        break;
      }

      // optional float cycle = 4;
      case 4: {
        if (tag == 37) {
         parse_cycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cycle_)));
          set_has_cycle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_wearable;
        break;
      }

      // repeated uint32 wearable = 5;
      case 5: {
        if (tag == 40) {
         parse_wearable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_wearable())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_wearable())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_wearable;
        if (input->ExpectTag(50)) goto parse_inscription;
        break;
      }

      // optional string inscription = 6;
      case 6: {
        if (tag == 50) {
         parse_inscription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inscription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inscription().data(), this->inscription().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "inscription");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_style;
        break;
      }

      // repeated uint32 style = 7;
      case 7: {
        if (tag == 56) {
         parse_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_style())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_style())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_style;
        if (input->ExpectTag(64)) goto parse_tournament_drop;
        break;
      }

      // optional bool tournament_drop = 8;
      case 8: {
        if (tag == 64) {
         parse_tournament_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tournament_drop_)));
          set_has_tournament_drop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CProtoItemHeroStatue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CProtoItemHeroStatue)
  return false;
#undef DO_
}

void CProtoItemHeroStatue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CProtoItemHeroStatue)
  // optional uint32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // optional uint32 status_effect_index = 2;
  if (has_status_effect_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status_effect_index(), output);
  }

  // optional string sequence_name = 3;
  if (has_sequence_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence_name().data(), this->sequence_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sequence_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sequence_name(), output);
  }

  // optional float cycle = 4;
  if (has_cycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cycle(), output);
  }

  // repeated uint32 wearable = 5;
  for (int i = 0; i < this->wearable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->wearable(i), output);
  }

  // optional string inscription = 6;
  if (has_inscription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inscription().data(), this->inscription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->inscription(), output);
  }

  // repeated uint32 style = 7;
  for (int i = 0; i < this->style_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->style(i), output);
  }

  // optional bool tournament_drop = 8;
  if (has_tournament_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->tournament_drop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CProtoItemHeroStatue)
}

::google::protobuf::uint8* CProtoItemHeroStatue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemHeroStatue)
  // optional uint32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // optional uint32 status_effect_index = 2;
  if (has_status_effect_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status_effect_index(), target);
  }

  // optional string sequence_name = 3;
  if (has_sequence_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence_name().data(), this->sequence_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sequence_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sequence_name(), target);
  }

  // optional float cycle = 4;
  if (has_cycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cycle(), target);
  }

  // repeated uint32 wearable = 5;
  for (int i = 0; i < this->wearable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->wearable(i), target);
  }

  // optional string inscription = 6;
  if (has_inscription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inscription().data(), this->inscription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->inscription(), target);
  }

  // repeated uint32 style = 7;
  for (int i = 0; i < this->style_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->style(i), target);
  }

  // optional bool tournament_drop = 8;
  if (has_tournament_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->tournament_drop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemHeroStatue)
  return target;
}

int CProtoItemHeroStatue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 status_effect_index = 2;
    if (has_status_effect_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status_effect_index());
    }

    // optional string sequence_name = 3;
    if (has_sequence_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sequence_name());
    }

    // optional float cycle = 4;
    if (has_cycle()) {
      total_size += 1 + 4;
    }

    // optional string inscription = 6;
    if (has_inscription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inscription());
    }

    // optional bool tournament_drop = 8;
    if (has_tournament_drop()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 wearable = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->wearable_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->wearable(i));
    }
    total_size += 1 * this->wearable_size() + data_size;
  }

  // repeated uint32 style = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->style_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->style(i));
    }
    total_size += 1 * this->style_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProtoItemHeroStatue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProtoItemHeroStatue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProtoItemHeroStatue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProtoItemHeroStatue::MergeFrom(const CProtoItemHeroStatue& from) {
  GOOGLE_CHECK_NE(&from, this);
  wearable_.MergeFrom(from.wearable_);
  style_.MergeFrom(from.style_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_status_effect_index()) {
      set_status_effect_index(from.status_effect_index());
    }
    if (from.has_sequence_name()) {
      set_sequence_name(from.sequence_name());
    }
    if (from.has_cycle()) {
      set_cycle(from.cycle());
    }
    if (from.has_inscription()) {
      set_inscription(from.inscription());
    }
    if (from.has_tournament_drop()) {
      set_tournament_drop(from.tournament_drop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProtoItemHeroStatue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemHeroStatue::CopyFrom(const CProtoItemHeroStatue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemHeroStatue::IsInitialized() const {

  return true;
}

void CProtoItemHeroStatue::Swap(CProtoItemHeroStatue* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(status_effect_index_, other->status_effect_index_);
    std::swap(sequence_name_, other->sequence_name_);
    std::swap(cycle_, other->cycle_);
    wearable_.Swap(&other->wearable_);
    std::swap(inscription_, other->inscription_);
    style_.Swap(&other->style_);
    std::swap(tournament_drop_, other->tournament_drop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProtoItemHeroStatue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProtoItemHeroStatue_descriptor_;
  metadata.reflection = CProtoItemHeroStatue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProtoItemTeamShowcase::kHeroIdFieldNumber;
const int CProtoItemTeamShowcase::kStatusEffectIndexFieldNumber;
const int CProtoItemTeamShowcase::kSequenceNameFieldNumber;
const int CProtoItemTeamShowcase::kCycleFieldNumber;
const int CProtoItemTeamShowcase::kWearableFieldNumber;
const int CProtoItemTeamShowcase::kInscriptionFieldNumber;
const int CProtoItemTeamShowcase::kStyleFieldNumber;
#endif  // !_MSC_VER

CProtoItemTeamShowcase::CProtoItemTeamShowcase()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CProtoItemTeamShowcase)
}

void CProtoItemTeamShowcase::InitAsDefaultInstance() {
}

CProtoItemTeamShowcase::CProtoItemTeamShowcase(const CProtoItemTeamShowcase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CProtoItemTeamShowcase)
}

void CProtoItemTeamShowcase::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hero_id_ = 0u;
  status_effect_index_ = 0u;
  sequence_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cycle_ = 0;
  inscription_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProtoItemTeamShowcase::~CProtoItemTeamShowcase() {
  // @@protoc_insertion_point(destructor:CProtoItemTeamShowcase)
  SharedDtor();
}

void CProtoItemTeamShowcase::SharedDtor() {
  if (sequence_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sequence_name_;
  }
  if (inscription_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inscription_;
  }
  if (this != default_instance_) {
  }
}

void CProtoItemTeamShowcase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProtoItemTeamShowcase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProtoItemTeamShowcase_descriptor_;
}

const CProtoItemTeamShowcase& CProtoItemTeamShowcase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CProtoItemTeamShowcase* CProtoItemTeamShowcase::default_instance_ = NULL;

CProtoItemTeamShowcase* CProtoItemTeamShowcase::New() const {
  return new CProtoItemTeamShowcase;
}

void CProtoItemTeamShowcase::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CProtoItemTeamShowcase*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(hero_id_, status_effect_index_);
    if (has_sequence_name()) {
      if (sequence_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sequence_name_->clear();
      }
    }
    cycle_ = 0;
    if (has_inscription()) {
      if (inscription_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        inscription_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  wearable_.Clear();
  style_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProtoItemTeamShowcase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CProtoItemTeamShowcase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status_effect_index;
        break;
      }

      // optional uint32 status_effect_index = 2;
      case 2: {
        if (tag == 16) {
         parse_status_effect_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_effect_index_)));
          set_has_status_effect_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sequence_name;
        break;
      }

      // optional string sequence_name = 3;
      case 3: {
        if (tag == 26) {
         parse_sequence_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sequence_name().data(), this->sequence_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sequence_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_cycle;
        break;
      }

      // optional float cycle = 4;
      case 4: {
        if (tag == 37) {
         parse_cycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cycle_)));
          set_has_cycle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_wearable;
        break;
      }

      // repeated uint32 wearable = 5;
      case 5: {
        if (tag == 40) {
         parse_wearable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_wearable())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_wearable())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_wearable;
        if (input->ExpectTag(50)) goto parse_inscription;
        break;
      }

      // optional string inscription = 6;
      case 6: {
        if (tag == 50) {
         parse_inscription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inscription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inscription().data(), this->inscription().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "inscription");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_style;
        break;
      }

      // repeated uint32 style = 7;
      case 7: {
        if (tag == 56) {
         parse_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_style())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_style())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_style;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CProtoItemTeamShowcase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CProtoItemTeamShowcase)
  return false;
#undef DO_
}

void CProtoItemTeamShowcase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CProtoItemTeamShowcase)
  // optional uint32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // optional uint32 status_effect_index = 2;
  if (has_status_effect_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status_effect_index(), output);
  }

  // optional string sequence_name = 3;
  if (has_sequence_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence_name().data(), this->sequence_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sequence_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sequence_name(), output);
  }

  // optional float cycle = 4;
  if (has_cycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cycle(), output);
  }

  // repeated uint32 wearable = 5;
  for (int i = 0; i < this->wearable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->wearable(i), output);
  }

  // optional string inscription = 6;
  if (has_inscription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inscription().data(), this->inscription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->inscription(), output);
  }

  // repeated uint32 style = 7;
  for (int i = 0; i < this->style_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->style(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CProtoItemTeamShowcase)
}

::google::protobuf::uint8* CProtoItemTeamShowcase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemTeamShowcase)
  // optional uint32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // optional uint32 status_effect_index = 2;
  if (has_status_effect_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status_effect_index(), target);
  }

  // optional string sequence_name = 3;
  if (has_sequence_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence_name().data(), this->sequence_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sequence_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sequence_name(), target);
  }

  // optional float cycle = 4;
  if (has_cycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cycle(), target);
  }

  // repeated uint32 wearable = 5;
  for (int i = 0; i < this->wearable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->wearable(i), target);
  }

  // optional string inscription = 6;
  if (has_inscription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inscription().data(), this->inscription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->inscription(), target);
  }

  // repeated uint32 style = 7;
  for (int i = 0; i < this->style_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->style(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemTeamShowcase)
  return target;
}

int CProtoItemTeamShowcase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 status_effect_index = 2;
    if (has_status_effect_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status_effect_index());
    }

    // optional string sequence_name = 3;
    if (has_sequence_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sequence_name());
    }

    // optional float cycle = 4;
    if (has_cycle()) {
      total_size += 1 + 4;
    }

    // optional string inscription = 6;
    if (has_inscription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inscription());
    }

  }
  // repeated uint32 wearable = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->wearable_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->wearable(i));
    }
    total_size += 1 * this->wearable_size() + data_size;
  }

  // repeated uint32 style = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->style_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->style(i));
    }
    total_size += 1 * this->style_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProtoItemTeamShowcase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProtoItemTeamShowcase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProtoItemTeamShowcase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProtoItemTeamShowcase::MergeFrom(const CProtoItemTeamShowcase& from) {
  GOOGLE_CHECK_NE(&from, this);
  wearable_.MergeFrom(from.wearable_);
  style_.MergeFrom(from.style_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_status_effect_index()) {
      set_status_effect_index(from.status_effect_index());
    }
    if (from.has_sequence_name()) {
      set_sequence_name(from.sequence_name());
    }
    if (from.has_cycle()) {
      set_cycle(from.cycle());
    }
    if (from.has_inscription()) {
      set_inscription(from.inscription());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProtoItemTeamShowcase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemTeamShowcase::CopyFrom(const CProtoItemTeamShowcase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemTeamShowcase::IsInitialized() const {

  return true;
}

void CProtoItemTeamShowcase::Swap(CProtoItemTeamShowcase* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(status_effect_index_, other->status_effect_index_);
    std::swap(sequence_name_, other->sequence_name_);
    std::swap(cycle_, other->cycle_);
    wearable_.Swap(&other->wearable_);
    std::swap(inscription_, other->inscription_);
    style_.Swap(&other->style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProtoItemTeamShowcase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProtoItemTeamShowcase_descriptor_;
  metadata.reflection = CProtoItemTeamShowcase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMatchPlayerAbilityUpgrade::kAbilityFieldNumber;
const int CMatchPlayerAbilityUpgrade::kTimeFieldNumber;
#endif  // !_MSC_VER

CMatchPlayerAbilityUpgrade::CMatchPlayerAbilityUpgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMatchPlayerAbilityUpgrade)
}

void CMatchPlayerAbilityUpgrade::InitAsDefaultInstance() {
}

CMatchPlayerAbilityUpgrade::CMatchPlayerAbilityUpgrade(const CMatchPlayerAbilityUpgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMatchPlayerAbilityUpgrade)
}

void CMatchPlayerAbilityUpgrade::SharedCtor() {
  _cached_size_ = 0;
  ability_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMatchPlayerAbilityUpgrade::~CMatchPlayerAbilityUpgrade() {
  // @@protoc_insertion_point(destructor:CMatchPlayerAbilityUpgrade)
  SharedDtor();
}

void CMatchPlayerAbilityUpgrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMatchPlayerAbilityUpgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMatchPlayerAbilityUpgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMatchPlayerAbilityUpgrade_descriptor_;
}

const CMatchPlayerAbilityUpgrade& CMatchPlayerAbilityUpgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMatchPlayerAbilityUpgrade* CMatchPlayerAbilityUpgrade::default_instance_ = NULL;

CMatchPlayerAbilityUpgrade* CMatchPlayerAbilityUpgrade::New() const {
  return new CMatchPlayerAbilityUpgrade;
}

void CMatchPlayerAbilityUpgrade::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMatchPlayerAbilityUpgrade*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ability_, time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMatchPlayerAbilityUpgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMatchPlayerAbilityUpgrade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ability = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_)));
          set_has_ability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint32 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMatchPlayerAbilityUpgrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMatchPlayerAbilityUpgrade)
  return false;
#undef DO_
}

void CMatchPlayerAbilityUpgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMatchPlayerAbilityUpgrade)
  // optional uint32 ability = 1;
  if (has_ability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ability(), output);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMatchPlayerAbilityUpgrade)
}

::google::protobuf::uint8* CMatchPlayerAbilityUpgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMatchPlayerAbilityUpgrade)
  // optional uint32 ability = 1;
  if (has_ability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ability(), target);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMatchPlayerAbilityUpgrade)
  return target;
}

int CMatchPlayerAbilityUpgrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ability = 1;
    if (has_ability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability());
    }

    // optional uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMatchPlayerAbilityUpgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMatchPlayerAbilityUpgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMatchPlayerAbilityUpgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMatchPlayerAbilityUpgrade::MergeFrom(const CMatchPlayerAbilityUpgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ability()) {
      set_ability(from.ability());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMatchPlayerAbilityUpgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMatchPlayerAbilityUpgrade::CopyFrom(const CMatchPlayerAbilityUpgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMatchPlayerAbilityUpgrade::IsInitialized() const {

  return true;
}

void CMatchPlayerAbilityUpgrade::Swap(CMatchPlayerAbilityUpgrade* other) {
  if (other != this) {
    std::swap(ability_, other->ability_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMatchPlayerAbilityUpgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMatchPlayerAbilityUpgrade_descriptor_;
  metadata.reflection = CMatchPlayerAbilityUpgrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMatchAdditionalUnitInventory::kUnitNameFieldNumber;
const int CMatchAdditionalUnitInventory::kItemsFieldNumber;
#endif  // !_MSC_VER

CMatchAdditionalUnitInventory::CMatchAdditionalUnitInventory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMatchAdditionalUnitInventory)
}

void CMatchAdditionalUnitInventory::InitAsDefaultInstance() {
}

CMatchAdditionalUnitInventory::CMatchAdditionalUnitInventory(const CMatchAdditionalUnitInventory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMatchAdditionalUnitInventory)
}

void CMatchAdditionalUnitInventory::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  unit_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMatchAdditionalUnitInventory::~CMatchAdditionalUnitInventory() {
  // @@protoc_insertion_point(destructor:CMatchAdditionalUnitInventory)
  SharedDtor();
}

void CMatchAdditionalUnitInventory::SharedDtor() {
  if (unit_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unit_name_;
  }
  if (this != default_instance_) {
  }
}

void CMatchAdditionalUnitInventory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMatchAdditionalUnitInventory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMatchAdditionalUnitInventory_descriptor_;
}

const CMatchAdditionalUnitInventory& CMatchAdditionalUnitInventory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMatchAdditionalUnitInventory* CMatchAdditionalUnitInventory::default_instance_ = NULL;

CMatchAdditionalUnitInventory* CMatchAdditionalUnitInventory::New() const {
  return new CMatchAdditionalUnitInventory;
}

void CMatchAdditionalUnitInventory::Clear() {
  if (has_unit_name()) {
    if (unit_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      unit_name_->clear();
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMatchAdditionalUnitInventory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMatchAdditionalUnitInventory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string unit_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unit_name().data(), this->unit_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "unit_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_items;
        break;
      }

      // repeated uint32 items = 2;
      case 2: {
        if (tag == 16) {
         parse_items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_items())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_items())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMatchAdditionalUnitInventory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMatchAdditionalUnitInventory)
  return false;
#undef DO_
}

void CMatchAdditionalUnitInventory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMatchAdditionalUnitInventory)
  // optional string unit_name = 1;
  if (has_unit_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unit_name().data(), this->unit_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unit_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->unit_name(), output);
  }

  // repeated uint32 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMatchAdditionalUnitInventory)
}

::google::protobuf::uint8* CMatchAdditionalUnitInventory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMatchAdditionalUnitInventory)
  // optional string unit_name = 1;
  if (has_unit_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unit_name().data(), this->unit_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unit_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->unit_name(), target);
  }

  // repeated uint32 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMatchAdditionalUnitInventory)
  return target;
}

int CMatchAdditionalUnitInventory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string unit_name = 1;
    if (has_unit_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unit_name());
    }

  }
  // repeated uint32 items = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->items_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->items(i));
    }
    total_size += 1 * this->items_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMatchAdditionalUnitInventory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMatchAdditionalUnitInventory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMatchAdditionalUnitInventory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMatchAdditionalUnitInventory::MergeFrom(const CMatchAdditionalUnitInventory& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit_name()) {
      set_unit_name(from.unit_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMatchAdditionalUnitInventory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMatchAdditionalUnitInventory::CopyFrom(const CMatchAdditionalUnitInventory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMatchAdditionalUnitInventory::IsInitialized() const {

  return true;
}

void CMatchAdditionalUnitInventory::Swap(CMatchAdditionalUnitInventory* other) {
  if (other != this) {
    std::swap(unit_name_, other->unit_name_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMatchAdditionalUnitInventory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMatchAdditionalUnitInventory_descriptor_;
  metadata.reflection = CMatchAdditionalUnitInventory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMatchPlayerPermanentBuff::kPermanentBuffFieldNumber;
const int CMatchPlayerPermanentBuff::kStackCountFieldNumber;
#endif  // !_MSC_VER

CMatchPlayerPermanentBuff::CMatchPlayerPermanentBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMatchPlayerPermanentBuff)
}

void CMatchPlayerPermanentBuff::InitAsDefaultInstance() {
}

CMatchPlayerPermanentBuff::CMatchPlayerPermanentBuff(const CMatchPlayerPermanentBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMatchPlayerPermanentBuff)
}

void CMatchPlayerPermanentBuff::SharedCtor() {
  _cached_size_ = 0;
  permanent_buff_ = 0u;
  stack_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMatchPlayerPermanentBuff::~CMatchPlayerPermanentBuff() {
  // @@protoc_insertion_point(destructor:CMatchPlayerPermanentBuff)
  SharedDtor();
}

void CMatchPlayerPermanentBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMatchPlayerPermanentBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMatchPlayerPermanentBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMatchPlayerPermanentBuff_descriptor_;
}

const CMatchPlayerPermanentBuff& CMatchPlayerPermanentBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMatchPlayerPermanentBuff* CMatchPlayerPermanentBuff::default_instance_ = NULL;

CMatchPlayerPermanentBuff* CMatchPlayerPermanentBuff::New() const {
  return new CMatchPlayerPermanentBuff;
}

void CMatchPlayerPermanentBuff::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMatchPlayerPermanentBuff*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(permanent_buff_, stack_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMatchPlayerPermanentBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMatchPlayerPermanentBuff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 permanent_buff = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &permanent_buff_)));
          set_has_permanent_buff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stack_count;
        break;
      }

      // optional uint32 stack_count = 2;
      case 2: {
        if (tag == 16) {
         parse_stack_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stack_count_)));
          set_has_stack_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMatchPlayerPermanentBuff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMatchPlayerPermanentBuff)
  return false;
#undef DO_
}

void CMatchPlayerPermanentBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMatchPlayerPermanentBuff)
  // optional uint32 permanent_buff = 1;
  if (has_permanent_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->permanent_buff(), output);
  }

  // optional uint32 stack_count = 2;
  if (has_stack_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stack_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMatchPlayerPermanentBuff)
}

::google::protobuf::uint8* CMatchPlayerPermanentBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMatchPlayerPermanentBuff)
  // optional uint32 permanent_buff = 1;
  if (has_permanent_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->permanent_buff(), target);
  }

  // optional uint32 stack_count = 2;
  if (has_stack_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stack_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMatchPlayerPermanentBuff)
  return target;
}

int CMatchPlayerPermanentBuff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 permanent_buff = 1;
    if (has_permanent_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->permanent_buff());
    }

    // optional uint32 stack_count = 2;
    if (has_stack_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stack_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMatchPlayerPermanentBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMatchPlayerPermanentBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMatchPlayerPermanentBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMatchPlayerPermanentBuff::MergeFrom(const CMatchPlayerPermanentBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_permanent_buff()) {
      set_permanent_buff(from.permanent_buff());
    }
    if (from.has_stack_count()) {
      set_stack_count(from.stack_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMatchPlayerPermanentBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMatchPlayerPermanentBuff::CopyFrom(const CMatchPlayerPermanentBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMatchPlayerPermanentBuff::IsInitialized() const {

  return true;
}

void CMatchPlayerPermanentBuff::Swap(CMatchPlayerPermanentBuff* other) {
  if (other != this) {
    std::swap(permanent_buff_, other->permanent_buff_);
    std::swap(stack_count_, other->stack_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMatchPlayerPermanentBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMatchPlayerPermanentBuff_descriptor_;
  metadata.reflection = CMatchPlayerPermanentBuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMatchHeroSelectEvent::kIsPickFieldNumber;
const int CMatchHeroSelectEvent::kTeamFieldNumber;
const int CMatchHeroSelectEvent::kHeroIdFieldNumber;
#endif  // !_MSC_VER

CMatchHeroSelectEvent::CMatchHeroSelectEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMatchHeroSelectEvent)
}

void CMatchHeroSelectEvent::InitAsDefaultInstance() {
}

CMatchHeroSelectEvent::CMatchHeroSelectEvent(const CMatchHeroSelectEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMatchHeroSelectEvent)
}

void CMatchHeroSelectEvent::SharedCtor() {
  _cached_size_ = 0;
  is_pick_ = false;
  team_ = 0u;
  hero_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMatchHeroSelectEvent::~CMatchHeroSelectEvent() {
  // @@protoc_insertion_point(destructor:CMatchHeroSelectEvent)
  SharedDtor();
}

void CMatchHeroSelectEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMatchHeroSelectEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMatchHeroSelectEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMatchHeroSelectEvent_descriptor_;
}

const CMatchHeroSelectEvent& CMatchHeroSelectEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMatchHeroSelectEvent* CMatchHeroSelectEvent::default_instance_ = NULL;

CMatchHeroSelectEvent* CMatchHeroSelectEvent::New() const {
  return new CMatchHeroSelectEvent;
}

void CMatchHeroSelectEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMatchHeroSelectEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(is_pick_, hero_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMatchHeroSelectEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMatchHeroSelectEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_pick = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pick_)));
          set_has_is_pick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team;
        break;
      }

      // optional uint32 team = 2;
      case 2: {
        if (tag == 16) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hero_id;
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (tag == 24) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMatchHeroSelectEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMatchHeroSelectEvent)
  return false;
#undef DO_
}

void CMatchHeroSelectEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMatchHeroSelectEvent)
  // optional bool is_pick = 1;
  if (has_is_pick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_pick(), output);
  }

  // optional uint32 team = 2;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team(), output);
  }

  // optional uint32 hero_id = 3;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMatchHeroSelectEvent)
}

::google::protobuf::uint8* CMatchHeroSelectEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMatchHeroSelectEvent)
  // optional bool is_pick = 1;
  if (has_is_pick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_pick(), target);
  }

  // optional uint32 team = 2;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team(), target);
  }

  // optional uint32 hero_id = 3;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMatchHeroSelectEvent)
  return target;
}

int CMatchHeroSelectEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_pick = 1;
    if (has_is_pick()) {
      total_size += 1 + 1;
    }

    // optional uint32 team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional uint32 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMatchHeroSelectEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMatchHeroSelectEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMatchHeroSelectEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMatchHeroSelectEvent::MergeFrom(const CMatchHeroSelectEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_pick()) {
      set_is_pick(from.is_pick());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMatchHeroSelectEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMatchHeroSelectEvent::CopyFrom(const CMatchHeroSelectEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMatchHeroSelectEvent::IsInitialized() const {

  return true;
}

void CMatchHeroSelectEvent::Swap(CMatchHeroSelectEvent* other) {
  if (other != this) {
    std::swap(is_pick_, other->is_pick_);
    std::swap(team_, other->team_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMatchHeroSelectEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMatchHeroSelectEvent_descriptor_;
  metadata.reflection = CMatchHeroSelectEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAProcessFantasyScheduledEvent::kEventFieldNumber;
const int CMsgDOTAProcessFantasyScheduledEvent::kTimestampFieldNumber;
const int CMsgDOTAProcessFantasyScheduledEvent::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAProcessFantasyScheduledEvent::kSeasonFieldNumber;
const int CMsgDOTAProcessFantasyScheduledEvent::kReferenceDataFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAProcessFantasyScheduledEvent::CMsgDOTAProcessFantasyScheduledEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAProcessFantasyScheduledEvent)
}

void CMsgDOTAProcessFantasyScheduledEvent::InitAsDefaultInstance() {
}

CMsgDOTAProcessFantasyScheduledEvent::CMsgDOTAProcessFantasyScheduledEvent(const CMsgDOTAProcessFantasyScheduledEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProcessFantasyScheduledEvent)
}

void CMsgDOTAProcessFantasyScheduledEvent::SharedCtor() {
  _cached_size_ = 0;
  event_ = 0u;
  timestamp_ = 0u;
  fantasy_league_id_ = 0u;
  season_ = 0u;
  reference_data_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAProcessFantasyScheduledEvent::~CMsgDOTAProcessFantasyScheduledEvent() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProcessFantasyScheduledEvent)
  SharedDtor();
}

void CMsgDOTAProcessFantasyScheduledEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAProcessFantasyScheduledEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProcessFantasyScheduledEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAProcessFantasyScheduledEvent_descriptor_;
}

const CMsgDOTAProcessFantasyScheduledEvent& CMsgDOTAProcessFantasyScheduledEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAProcessFantasyScheduledEvent* CMsgDOTAProcessFantasyScheduledEvent::default_instance_ = NULL;

CMsgDOTAProcessFantasyScheduledEvent* CMsgDOTAProcessFantasyScheduledEvent::New() const {
  return new CMsgDOTAProcessFantasyScheduledEvent;
}

void CMsgDOTAProcessFantasyScheduledEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAProcessFantasyScheduledEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(event_, reference_data_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAProcessFantasyScheduledEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAProcessFantasyScheduledEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_)));
          set_has_event();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fantasy_league_id;
        break;
      }

      // optional uint32 fantasy_league_id = 3;
      case 3: {
        if (tag == 24) {
         parse_fantasy_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_season;
        break;
      }

      // optional uint32 season = 4;
      case 4: {
        if (tag == 32) {
         parse_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reference_data;
        break;
      }

      // optional uint32 reference_data = 5;
      case 5: {
        if (tag == 40) {
         parse_reference_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reference_data_)));
          set_has_reference_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAProcessFantasyScheduledEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAProcessFantasyScheduledEvent)
  return false;
#undef DO_
}

void CMsgDOTAProcessFantasyScheduledEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAProcessFantasyScheduledEvent)
  // optional uint32 event = 1;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event(), output);
  }

  // optional uint32 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  // optional uint32 fantasy_league_id = 3;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fantasy_league_id(), output);
  }

  // optional uint32 season = 4;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->season(), output);
  }

  // optional uint32 reference_data = 5;
  if (has_reference_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->reference_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAProcessFantasyScheduledEvent)
}

::google::protobuf::uint8* CMsgDOTAProcessFantasyScheduledEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProcessFantasyScheduledEvent)
  // optional uint32 event = 1;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event(), target);
  }

  // optional uint32 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  // optional uint32 fantasy_league_id = 3;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fantasy_league_id(), target);
  }

  // optional uint32 season = 4;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->season(), target);
  }

  // optional uint32 reference_data = 5;
  if (has_reference_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->reference_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProcessFantasyScheduledEvent)
  return target;
}

int CMsgDOTAProcessFantasyScheduledEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event = 1;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event());
    }

    // optional uint32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 fantasy_league_id = 3;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 season = 4;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

    // optional uint32 reference_data = 5;
    if (has_reference_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reference_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProcessFantasyScheduledEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAProcessFantasyScheduledEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAProcessFantasyScheduledEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAProcessFantasyScheduledEvent::MergeFrom(const CMsgDOTAProcessFantasyScheduledEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event()) {
      set_event(from.event());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_season()) {
      set_season(from.season());
    }
    if (from.has_reference_data()) {
      set_reference_data(from.reference_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAProcessFantasyScheduledEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProcessFantasyScheduledEvent::CopyFrom(const CMsgDOTAProcessFantasyScheduledEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProcessFantasyScheduledEvent::IsInitialized() const {

  return true;
}

void CMsgDOTAProcessFantasyScheduledEvent::Swap(CMsgDOTAProcessFantasyScheduledEvent* other) {
  if (other != this) {
    std::swap(event_, other->event_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(fantasy_league_id_, other->fantasy_league_id_);
    std::swap(season_, other->season_);
    std::swap(reference_data_, other->reference_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAProcessFantasyScheduledEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAProcessFantasyScheduledEvent_descriptor_;
  metadata.reflection = CMsgDOTAProcessFantasyScheduledEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAHasItemQuery::kAccountIdFieldNumber;
const int CMsgDOTAHasItemQuery::kItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAHasItemQuery::CMsgDOTAHasItemQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAHasItemQuery)
}

void CMsgDOTAHasItemQuery::InitAsDefaultInstance() {
}

CMsgDOTAHasItemQuery::CMsgDOTAHasItemQuery(const CMsgDOTAHasItemQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAHasItemQuery)
}

void CMsgDOTAHasItemQuery::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAHasItemQuery::~CMsgDOTAHasItemQuery() {
  // @@protoc_insertion_point(destructor:CMsgDOTAHasItemQuery)
  SharedDtor();
}

void CMsgDOTAHasItemQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAHasItemQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAHasItemQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAHasItemQuery_descriptor_;
}

const CMsgDOTAHasItemQuery& CMsgDOTAHasItemQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAHasItemQuery* CMsgDOTAHasItemQuery::default_instance_ = NULL;

CMsgDOTAHasItemQuery* CMsgDOTAHasItemQuery::New() const {
  return new CMsgDOTAHasItemQuery;
}

void CMsgDOTAHasItemQuery::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAHasItemQuery*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(item_id_, account_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAHasItemQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAHasItemQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional uint64 item_id = 2;
      case 2: {
        if (tag == 16) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAHasItemQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAHasItemQuery)
  return false;
#undef DO_
}

void CMsgDOTAHasItemQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAHasItemQuery)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAHasItemQuery)
}

::google::protobuf::uint8* CMsgDOTAHasItemQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAHasItemQuery)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAHasItemQuery)
  return target;
}

int CMsgDOTAHasItemQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint64 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAHasItemQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAHasItemQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAHasItemQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAHasItemQuery::MergeFrom(const CMsgDOTAHasItemQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAHasItemQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAHasItemQuery::CopyFrom(const CMsgDOTAHasItemQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAHasItemQuery::IsInitialized() const {

  return true;
}

void CMsgDOTAHasItemQuery::Swap(CMsgDOTAHasItemQuery* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAHasItemQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAHasItemQuery_descriptor_;
  metadata.reflection = CMsgDOTAHasItemQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAHasItemResponse::kHasItemFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAHasItemResponse::CMsgDOTAHasItemResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAHasItemResponse)
}

void CMsgDOTAHasItemResponse::InitAsDefaultInstance() {
}

CMsgDOTAHasItemResponse::CMsgDOTAHasItemResponse(const CMsgDOTAHasItemResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAHasItemResponse)
}

void CMsgDOTAHasItemResponse::SharedCtor() {
  _cached_size_ = 0;
  has_item_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAHasItemResponse::~CMsgDOTAHasItemResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAHasItemResponse)
  SharedDtor();
}

void CMsgDOTAHasItemResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAHasItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAHasItemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAHasItemResponse_descriptor_;
}

const CMsgDOTAHasItemResponse& CMsgDOTAHasItemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAHasItemResponse* CMsgDOTAHasItemResponse::default_instance_ = NULL;

CMsgDOTAHasItemResponse* CMsgDOTAHasItemResponse::New() const {
  return new CMsgDOTAHasItemResponse;
}

void CMsgDOTAHasItemResponse::Clear() {
  has_item_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAHasItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAHasItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool has_item = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_item_)));
          set_has_has_item();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAHasItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAHasItemResponse)
  return false;
#undef DO_
}

void CMsgDOTAHasItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAHasItemResponse)
  // optional bool has_item = 1;
  if (has_has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAHasItemResponse)
}

::google::protobuf::uint8* CMsgDOTAHasItemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAHasItemResponse)
  // optional bool has_item = 1;
  if (has_has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->has_item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAHasItemResponse)
  return target;
}

int CMsgDOTAHasItemResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool has_item = 1;
    if (has_has_item()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAHasItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAHasItemResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAHasItemResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAHasItemResponse::MergeFrom(const CMsgDOTAHasItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_has_item()) {
      set_has_item(from.has_item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAHasItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAHasItemResponse::CopyFrom(const CMsgDOTAHasItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAHasItemResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAHasItemResponse::Swap(CMsgDOTAHasItemResponse* other) {
  if (other != this) {
    std::swap(has_item_, other->has_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAHasItemResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAHasItemResponse_descriptor_;
  metadata.reflection = CMsgDOTAHasItemResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAHasItemDefsQuery::kAccountIdFieldNumber;
const int CMsgDOTAHasItemDefsQuery::kItemdefIdsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAHasItemDefsQuery::CMsgDOTAHasItemDefsQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAHasItemDefsQuery)
}

void CMsgDOTAHasItemDefsQuery::InitAsDefaultInstance() {
}

CMsgDOTAHasItemDefsQuery::CMsgDOTAHasItemDefsQuery(const CMsgDOTAHasItemDefsQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAHasItemDefsQuery)
}

void CMsgDOTAHasItemDefsQuery::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAHasItemDefsQuery::~CMsgDOTAHasItemDefsQuery() {
  // @@protoc_insertion_point(destructor:CMsgDOTAHasItemDefsQuery)
  SharedDtor();
}

void CMsgDOTAHasItemDefsQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAHasItemDefsQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAHasItemDefsQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAHasItemDefsQuery_descriptor_;
}

const CMsgDOTAHasItemDefsQuery& CMsgDOTAHasItemDefsQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAHasItemDefsQuery* CMsgDOTAHasItemDefsQuery::default_instance_ = NULL;

CMsgDOTAHasItemDefsQuery* CMsgDOTAHasItemDefsQuery::New() const {
  return new CMsgDOTAHasItemDefsQuery;
}

void CMsgDOTAHasItemDefsQuery::Clear() {
  account_id_ = 0u;
  itemdef_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAHasItemDefsQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAHasItemDefsQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemdef_ids;
        break;
      }

      // repeated uint32 itemdef_ids = 2;
      case 2: {
        if (tag == 16) {
         parse_itemdef_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_itemdef_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_itemdef_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemdef_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAHasItemDefsQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAHasItemDefsQuery)
  return false;
#undef DO_
}

void CMsgDOTAHasItemDefsQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAHasItemDefsQuery)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated uint32 itemdef_ids = 2;
  for (int i = 0; i < this->itemdef_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->itemdef_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAHasItemDefsQuery)
}

::google::protobuf::uint8* CMsgDOTAHasItemDefsQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAHasItemDefsQuery)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated uint32 itemdef_ids = 2;
  for (int i = 0; i < this->itemdef_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->itemdef_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAHasItemDefsQuery)
  return target;
}

int CMsgDOTAHasItemDefsQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  // repeated uint32 itemdef_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemdef_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->itemdef_ids(i));
    }
    total_size += 1 * this->itemdef_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAHasItemDefsQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAHasItemDefsQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAHasItemDefsQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAHasItemDefsQuery::MergeFrom(const CMsgDOTAHasItemDefsQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemdef_ids_.MergeFrom(from.itemdef_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAHasItemDefsQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAHasItemDefsQuery::CopyFrom(const CMsgDOTAHasItemDefsQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAHasItemDefsQuery::IsInitialized() const {

  return true;
}

void CMsgDOTAHasItemDefsQuery::Swap(CMsgDOTAHasItemDefsQuery* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    itemdef_ids_.Swap(&other->itemdef_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAHasItemDefsQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAHasItemDefsQuery_descriptor_;
  metadata.reflection = CMsgDOTAHasItemDefsQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAHasItemDefsResponse::kHasItemsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAHasItemDefsResponse::CMsgDOTAHasItemDefsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAHasItemDefsResponse)
}

void CMsgDOTAHasItemDefsResponse::InitAsDefaultInstance() {
}

CMsgDOTAHasItemDefsResponse::CMsgDOTAHasItemDefsResponse(const CMsgDOTAHasItemDefsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAHasItemDefsResponse)
}

void CMsgDOTAHasItemDefsResponse::SharedCtor() {
  _cached_size_ = 0;
  has_items_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAHasItemDefsResponse::~CMsgDOTAHasItemDefsResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAHasItemDefsResponse)
  SharedDtor();
}

void CMsgDOTAHasItemDefsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAHasItemDefsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAHasItemDefsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAHasItemDefsResponse_descriptor_;
}

const CMsgDOTAHasItemDefsResponse& CMsgDOTAHasItemDefsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAHasItemDefsResponse* CMsgDOTAHasItemDefsResponse::default_instance_ = NULL;

CMsgDOTAHasItemDefsResponse* CMsgDOTAHasItemDefsResponse::New() const {
  return new CMsgDOTAHasItemDefsResponse;
}

void CMsgDOTAHasItemDefsResponse::Clear() {
  has_items_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAHasItemDefsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAHasItemDefsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool has_items = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_items_)));
          set_has_has_items();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAHasItemDefsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAHasItemDefsResponse)
  return false;
#undef DO_
}

void CMsgDOTAHasItemDefsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAHasItemDefsResponse)
  // optional bool has_items = 1;
  if (has_has_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_items(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAHasItemDefsResponse)
}

::google::protobuf::uint8* CMsgDOTAHasItemDefsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAHasItemDefsResponse)
  // optional bool has_items = 1;
  if (has_has_items()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->has_items(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAHasItemDefsResponse)
  return target;
}

int CMsgDOTAHasItemDefsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool has_items = 1;
    if (has_has_items()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAHasItemDefsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAHasItemDefsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAHasItemDefsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAHasItemDefsResponse::MergeFrom(const CMsgDOTAHasItemDefsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_has_items()) {
      set_has_items(from.has_items());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAHasItemDefsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAHasItemDefsResponse::CopyFrom(const CMsgDOTAHasItemDefsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAHasItemDefsResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAHasItemDefsResponse::Swap(CMsgDOTAHasItemDefsResponse* other) {
  if (other != this) {
    std::swap(has_items_, other->has_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAHasItemDefsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAHasItemDefsResponse_descriptor_;
  metadata.reflection = CMsgDOTAHasItemDefsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCGetPlayerCardItemInfo::kAccountIdFieldNumber;
const int CMsgGCGetPlayerCardItemInfo::kPlayerCardItemIdsFieldNumber;
#endif  // !_MSC_VER

CMsgGCGetPlayerCardItemInfo::CMsgGCGetPlayerCardItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCGetPlayerCardItemInfo)
}

void CMsgGCGetPlayerCardItemInfo::InitAsDefaultInstance() {
}

CMsgGCGetPlayerCardItemInfo::CMsgGCGetPlayerCardItemInfo(const CMsgGCGetPlayerCardItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetPlayerCardItemInfo)
}

void CMsgGCGetPlayerCardItemInfo::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCGetPlayerCardItemInfo::~CMsgGCGetPlayerCardItemInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCGetPlayerCardItemInfo)
  SharedDtor();
}

void CMsgGCGetPlayerCardItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCGetPlayerCardItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGetPlayerCardItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCGetPlayerCardItemInfo_descriptor_;
}

const CMsgGCGetPlayerCardItemInfo& CMsgGCGetPlayerCardItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgGCGetPlayerCardItemInfo* CMsgGCGetPlayerCardItemInfo::default_instance_ = NULL;

CMsgGCGetPlayerCardItemInfo* CMsgGCGetPlayerCardItemInfo::New() const {
  return new CMsgGCGetPlayerCardItemInfo;
}

void CMsgGCGetPlayerCardItemInfo::Clear() {
  account_id_ = 0u;
  player_card_item_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCGetPlayerCardItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCGetPlayerCardItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_card_item_ids;
        break;
      }

      // repeated uint64 player_card_item_ids = 2;
      case 2: {
        if (tag == 16) {
         parse_player_card_item_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_player_card_item_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_player_card_item_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_card_item_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCGetPlayerCardItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCGetPlayerCardItemInfo)
  return false;
#undef DO_
}

void CMsgGCGetPlayerCardItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCGetPlayerCardItemInfo)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated uint64 player_card_item_ids = 2;
  for (int i = 0; i < this->player_card_item_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->player_card_item_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCGetPlayerCardItemInfo)
}

::google::protobuf::uint8* CMsgGCGetPlayerCardItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetPlayerCardItemInfo)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated uint64 player_card_item_ids = 2;
  for (int i = 0; i < this->player_card_item_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->player_card_item_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetPlayerCardItemInfo)
  return target;
}

int CMsgGCGetPlayerCardItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  // repeated uint64 player_card_item_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->player_card_item_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->player_card_item_ids(i));
    }
    total_size += 1 * this->player_card_item_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGetPlayerCardItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCGetPlayerCardItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCGetPlayerCardItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCGetPlayerCardItemInfo::MergeFrom(const CMsgGCGetPlayerCardItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_card_item_ids_.MergeFrom(from.player_card_item_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCGetPlayerCardItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetPlayerCardItemInfo::CopyFrom(const CMsgGCGetPlayerCardItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPlayerCardItemInfo::IsInitialized() const {

  return true;
}

void CMsgGCGetPlayerCardItemInfo::Swap(CMsgGCGetPlayerCardItemInfo* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    player_card_item_ids_.Swap(&other->player_card_item_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCGetPlayerCardItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCGetPlayerCardItemInfo_descriptor_;
  metadata.reflection = CMsgGCGetPlayerCardItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::kPlayerCardItemIdFieldNumber;
const int CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::kAccountIdFieldNumber;
const int CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::kPackedBonusesFieldNumber;
#endif  // !_MSC_VER

CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::InitAsDefaultInstance() {
}

CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo(const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::SharedCtor() {
  _cached_size_ = 0;
  player_card_item_id_ = GOOGLE_ULONGLONG(0);
  account_id_ = 0u;
  packed_bonuses_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::~CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  SharedDtor();
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_descriptor_;
}

const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::default_instance_ = NULL;

CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::New() const {
  return new CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo;
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(player_card_item_id_, account_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_card_item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_card_item_id_)));
          set_has_player_card_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }

      // optional uint32 account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_packed_bonuses;
        break;
      }

      // optional uint64 packed_bonuses = 3;
      case 3: {
        if (tag == 24) {
         parse_packed_bonuses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packed_bonuses_)));
          set_has_packed_bonuses();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  return false;
#undef DO_
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  // optional uint64 player_card_item_id = 1;
  if (has_player_card_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_card_item_id(), output);
  }

  // optional uint32 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }

  // optional uint64 packed_bonuses = 3;
  if (has_packed_bonuses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->packed_bonuses(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
}

::google::protobuf::uint8* CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  // optional uint64 player_card_item_id = 1;
  if (has_player_card_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_card_item_id(), target);
  }

  // optional uint32 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }

  // optional uint64 packed_bonuses = 3;
  if (has_packed_bonuses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->packed_bonuses(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  return target;
}

int CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_card_item_id = 1;
    if (has_player_card_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_card_item_id());
    }

    // optional uint32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint64 packed_bonuses = 3;
    if (has_packed_bonuses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packed_bonuses());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::MergeFrom(const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_card_item_id()) {
      set_player_card_item_id(from.player_card_item_id());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_packed_bonuses()) {
      set_packed_bonuses(from.packed_bonuses());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::CopyFrom(const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::IsInitialized() const {

  return true;
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::Swap(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* other) {
  if (other != this) {
    std::swap(player_card_item_id_, other->player_card_item_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(packed_bonuses_, other->packed_bonuses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_descriptor_;
  metadata.reflection = CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGCGetPlayerCardItemInfoResponse::kPlayerCardInfosFieldNumber;
#endif  // !_MSC_VER

CMsgGCGetPlayerCardItemInfoResponse::CMsgGCGetPlayerCardItemInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCGetPlayerCardItemInfoResponse)
}

void CMsgGCGetPlayerCardItemInfoResponse::InitAsDefaultInstance() {
}

CMsgGCGetPlayerCardItemInfoResponse::CMsgGCGetPlayerCardItemInfoResponse(const CMsgGCGetPlayerCardItemInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetPlayerCardItemInfoResponse)
}

void CMsgGCGetPlayerCardItemInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCGetPlayerCardItemInfoResponse::~CMsgGCGetPlayerCardItemInfoResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCGetPlayerCardItemInfoResponse)
  SharedDtor();
}

void CMsgGCGetPlayerCardItemInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCGetPlayerCardItemInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGetPlayerCardItemInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCGetPlayerCardItemInfoResponse_descriptor_;
}

const CMsgGCGetPlayerCardItemInfoResponse& CMsgGCGetPlayerCardItemInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgGCGetPlayerCardItemInfoResponse* CMsgGCGetPlayerCardItemInfoResponse::default_instance_ = NULL;

CMsgGCGetPlayerCardItemInfoResponse* CMsgGCGetPlayerCardItemInfoResponse::New() const {
  return new CMsgGCGetPlayerCardItemInfoResponse;
}

void CMsgGCGetPlayerCardItemInfoResponse::Clear() {
  player_card_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCGetPlayerCardItemInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCGetPlayerCardItemInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo player_card_infos = 1;
      case 1: {
        if (tag == 10) {
         parse_player_card_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_card_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_player_card_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCGetPlayerCardItemInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCGetPlayerCardItemInfoResponse)
  return false;
#undef DO_
}

void CMsgGCGetPlayerCardItemInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCGetPlayerCardItemInfoResponse)
  // repeated .CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo player_card_infos = 1;
  for (int i = 0; i < this->player_card_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_card_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCGetPlayerCardItemInfoResponse)
}

::google::protobuf::uint8* CMsgGCGetPlayerCardItemInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetPlayerCardItemInfoResponse)
  // repeated .CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo player_card_infos = 1;
  for (int i = 0; i < this->player_card_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_card_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetPlayerCardItemInfoResponse)
  return target;
}

int CMsgGCGetPlayerCardItemInfoResponse::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo player_card_infos = 1;
  total_size += 1 * this->player_card_infos_size();
  for (int i = 0; i < this->player_card_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_card_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGetPlayerCardItemInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCGetPlayerCardItemInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCGetPlayerCardItemInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCGetPlayerCardItemInfoResponse::MergeFrom(const CMsgGCGetPlayerCardItemInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_card_infos_.MergeFrom(from.player_card_infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCGetPlayerCardItemInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetPlayerCardItemInfoResponse::CopyFrom(const CMsgGCGetPlayerCardItemInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPlayerCardItemInfoResponse::IsInitialized() const {

  return true;
}

void CMsgGCGetPlayerCardItemInfoResponse::Swap(CMsgGCGetPlayerCardItemInfoResponse* other) {
  if (other != this) {
    player_card_infos_.Swap(&other->player_card_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCGetPlayerCardItemInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCGetPlayerCardItemInfoResponse_descriptor_;
  metadata.reflection = CMsgGCGetPlayerCardItemInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToGCFantasySetMatchLeague::kMatchIdFieldNumber;
const int CMsgGCToGCFantasySetMatchLeague::kLeagueIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCToGCFantasySetMatchLeague::CMsgGCToGCFantasySetMatchLeague()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToGCFantasySetMatchLeague)
}

void CMsgGCToGCFantasySetMatchLeague::InitAsDefaultInstance() {
}

CMsgGCToGCFantasySetMatchLeague::CMsgGCToGCFantasySetMatchLeague(const CMsgGCToGCFantasySetMatchLeague& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCFantasySetMatchLeague)
}

void CMsgGCToGCFantasySetMatchLeague::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  league_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCFantasySetMatchLeague::~CMsgGCToGCFantasySetMatchLeague() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCFantasySetMatchLeague)
  SharedDtor();
}

void CMsgGCToGCFantasySetMatchLeague::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCFantasySetMatchLeague::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCFantasySetMatchLeague::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCFantasySetMatchLeague_descriptor_;
}

const CMsgGCToGCFantasySetMatchLeague& CMsgGCToGCFantasySetMatchLeague::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgGCToGCFantasySetMatchLeague* CMsgGCToGCFantasySetMatchLeague::default_instance_ = NULL;

CMsgGCToGCFantasySetMatchLeague* CMsgGCToGCFantasySetMatchLeague::New() const {
  return new CMsgGCToGCFantasySetMatchLeague;
}

void CMsgGCToGCFantasySetMatchLeague::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGCToGCFantasySetMatchLeague*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(match_id_, league_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToGCFantasySetMatchLeague::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToGCFantasySetMatchLeague)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_league_id;
        break;
      }

      // optional uint32 league_id = 2;
      case 2: {
        if (tag == 16) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToGCFantasySetMatchLeague)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToGCFantasySetMatchLeague)
  return false;
#undef DO_
}

void CMsgGCToGCFantasySetMatchLeague::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToGCFantasySetMatchLeague)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 league_id = 2;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->league_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToGCFantasySetMatchLeague)
}

::google::protobuf::uint8* CMsgGCToGCFantasySetMatchLeague::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCFantasySetMatchLeague)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 league_id = 2;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->league_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCFantasySetMatchLeague)
  return target;
}

int CMsgGCToGCFantasySetMatchLeague::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 league_id = 2;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCFantasySetMatchLeague::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToGCFantasySetMatchLeague* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToGCFantasySetMatchLeague*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCFantasySetMatchLeague::MergeFrom(const CMsgGCToGCFantasySetMatchLeague& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToGCFantasySetMatchLeague::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCFantasySetMatchLeague::CopyFrom(const CMsgGCToGCFantasySetMatchLeague& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCFantasySetMatchLeague::IsInitialized() const {

  return true;
}

void CMsgGCToGCFantasySetMatchLeague::Swap(CMsgGCToGCFantasySetMatchLeague* other) {
  if (other != this) {
    std::swap(match_id_, other->match_id_);
    std::swap(league_id_, other->league_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToGCFantasySetMatchLeague::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCFantasySetMatchLeague_descriptor_;
  metadata.reflection = CMsgGCToGCFantasySetMatchLeague_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSODOTAMapLocationState::kAccountIdFieldNumber;
const int CSODOTAMapLocationState::kLocationIdFieldNumber;
const int CSODOTAMapLocationState::kCompletedFieldNumber;
#endif  // !_MSC_VER

CSODOTAMapLocationState::CSODOTAMapLocationState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSODOTAMapLocationState)
}

void CSODOTAMapLocationState::InitAsDefaultInstance() {
}

CSODOTAMapLocationState::CSODOTAMapLocationState(const CSODOTAMapLocationState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSODOTAMapLocationState)
}

void CSODOTAMapLocationState::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  location_id_ = 0;
  completed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTAMapLocationState::~CSODOTAMapLocationState() {
  // @@protoc_insertion_point(destructor:CSODOTAMapLocationState)
  SharedDtor();
}

void CSODOTAMapLocationState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSODOTAMapLocationState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTAMapLocationState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTAMapLocationState_descriptor_;
}

const CSODOTAMapLocationState& CSODOTAMapLocationState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CSODOTAMapLocationState* CSODOTAMapLocationState::default_instance_ = NULL;

CSODOTAMapLocationState* CSODOTAMapLocationState::New() const {
  return new CSODOTAMapLocationState;
}

void CSODOTAMapLocationState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSODOTAMapLocationState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(account_id_, completed_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSODOTAMapLocationState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSODOTAMapLocationState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_location_id;
        break;
      }

      // optional int32 location_id = 2;
      case 2: {
        if (tag == 16) {
         parse_location_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &location_id_)));
          set_has_location_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_completed;
        break;
      }

      // optional bool completed = 3;
      case 3: {
        if (tag == 24) {
         parse_completed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &completed_)));
          set_has_completed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSODOTAMapLocationState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSODOTAMapLocationState)
  return false;
#undef DO_
}

void CSODOTAMapLocationState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSODOTAMapLocationState)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional int32 location_id = 2;
  if (has_location_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->location_id(), output);
  }

  // optional bool completed = 3;
  if (has_completed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->completed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSODOTAMapLocationState)
}

::google::protobuf::uint8* CSODOTAMapLocationState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAMapLocationState)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional int32 location_id = 2;
  if (has_location_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->location_id(), target);
  }

  // optional bool completed = 3;
  if (has_completed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->completed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAMapLocationState)
  return target;
}

int CSODOTAMapLocationState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional int32 location_id = 2;
    if (has_location_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->location_id());
    }

    // optional bool completed = 3;
    if (has_completed()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTAMapLocationState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSODOTAMapLocationState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSODOTAMapLocationState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTAMapLocationState::MergeFrom(const CSODOTAMapLocationState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_location_id()) {
      set_location_id(from.location_id());
    }
    if (from.has_completed()) {
      set_completed(from.completed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSODOTAMapLocationState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAMapLocationState::CopyFrom(const CSODOTAMapLocationState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAMapLocationState::IsInitialized() const {

  return true;
}

void CSODOTAMapLocationState::Swap(CSODOTAMapLocationState* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(location_id_, other->location_id_);
    std::swap(completed_, other->completed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSODOTAMapLocationState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTAMapLocationState_descriptor_;
  metadata.reflection = CSODOTAMapLocationState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgLeagueAdminList::kAccountIdsFieldNumber;
#endif  // !_MSC_VER

CMsgLeagueAdminList::CMsgLeagueAdminList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgLeagueAdminList)
}

void CMsgLeagueAdminList::InitAsDefaultInstance() {
}

CMsgLeagueAdminList::CMsgLeagueAdminList(const CMsgLeagueAdminList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgLeagueAdminList)
}

void CMsgLeagueAdminList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLeagueAdminList::~CMsgLeagueAdminList() {
  // @@protoc_insertion_point(destructor:CMsgLeagueAdminList)
  SharedDtor();
}

void CMsgLeagueAdminList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLeagueAdminList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLeagueAdminList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLeagueAdminList_descriptor_;
}

const CMsgLeagueAdminList& CMsgLeagueAdminList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgLeagueAdminList* CMsgLeagueAdminList::default_instance_ = NULL;

CMsgLeagueAdminList* CMsgLeagueAdminList::New() const {
  return new CMsgLeagueAdminList;
}

void CMsgLeagueAdminList::Clear() {
  account_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLeagueAdminList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgLeagueAdminList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (tag == 8) {
         parse_account_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_account_ids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_account_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgLeagueAdminList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgLeagueAdminList)
  return false;
#undef DO_
}

void CMsgLeagueAdminList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgLeagueAdminList)
  // repeated uint32 account_ids = 1;
  for (int i = 0; i < this->account_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->account_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgLeagueAdminList)
}

::google::protobuf::uint8* CMsgLeagueAdminList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLeagueAdminList)
  // repeated uint32 account_ids = 1;
  for (int i = 0; i < this->account_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->account_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLeagueAdminList)
  return target;
}

int CMsgLeagueAdminList::ByteSize() const {
  int total_size = 0;

  // repeated uint32 account_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->account_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->account_ids(i));
    }
    total_size += 1 * this->account_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLeagueAdminList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLeagueAdminList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLeagueAdminList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLeagueAdminList::MergeFrom(const CMsgLeagueAdminList& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_ids_.MergeFrom(from.account_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLeagueAdminList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeagueAdminList::CopyFrom(const CMsgLeagueAdminList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeagueAdminList::IsInitialized() const {

  return true;
}

void CMsgLeagueAdminList::Swap(CMsgLeagueAdminList* other) {
  if (other != this) {
    account_ids_.Swap(&other->account_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLeagueAdminList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLeagueAdminList_descriptor_;
  metadata.reflection = CMsgLeagueAdminList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCompendiumTimestampedData::kGameTimeFieldNumber;
const int CCompendiumTimestampedData::kGpmFieldNumber;
const int CCompendiumTimestampedData::kXpmFieldNumber;
const int CCompendiumTimestampedData::kKillsFieldNumber;
const int CCompendiumTimestampedData::kDeathsFieldNumber;
const int CCompendiumTimestampedData::kItemPurchasesFieldNumber;
#endif  // !_MSC_VER

CCompendiumTimestampedData::CCompendiumTimestampedData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCompendiumTimestampedData)
}

void CCompendiumTimestampedData::InitAsDefaultInstance() {
}

CCompendiumTimestampedData::CCompendiumTimestampedData(const CCompendiumTimestampedData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CCompendiumTimestampedData)
}

void CCompendiumTimestampedData::SharedCtor() {
  _cached_size_ = 0;
  game_time_ = 0u;
  gpm_ = 0u;
  xpm_ = 0u;
  kills_ = 0u;
  deaths_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCompendiumTimestampedData::~CCompendiumTimestampedData() {
  // @@protoc_insertion_point(destructor:CCompendiumTimestampedData)
  SharedDtor();
}

void CCompendiumTimestampedData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCompendiumTimestampedData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCompendiumTimestampedData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCompendiumTimestampedData_descriptor_;
}

const CCompendiumTimestampedData& CCompendiumTimestampedData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CCompendiumTimestampedData* CCompendiumTimestampedData::default_instance_ = NULL;

CCompendiumTimestampedData* CCompendiumTimestampedData::New() const {
  return new CCompendiumTimestampedData;
}

void CCompendiumTimestampedData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CCompendiumTimestampedData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(game_time_, kills_);
    deaths_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  item_purchases_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCompendiumTimestampedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCompendiumTimestampedData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_time_)));
          set_has_game_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gpm;
        break;
      }

      // optional uint32 gpm = 2;
      case 2: {
        if (tag == 16) {
         parse_gpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpm_)));
          set_has_gpm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_xpm;
        break;
      }

      // optional uint32 xpm = 3;
      case 3: {
        if (tag == 24) {
         parse_xpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xpm_)));
          set_has_xpm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_kills;
        break;
      }

      // optional uint32 kills = 4;
      case 4: {
        if (tag == 32) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
          set_has_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_deaths;
        break;
      }

      // optional uint32 deaths = 5;
      case 5: {
        if (tag == 40) {
         parse_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
          set_has_deaths();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_item_purchases;
        break;
      }

      // repeated uint32 item_purchases = 6;
      case 6: {
        if (tag == 48) {
         parse_item_purchases:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_item_purchases())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_item_purchases())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_item_purchases;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCompendiumTimestampedData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCompendiumTimestampedData)
  return false;
#undef DO_
}

void CCompendiumTimestampedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCompendiumTimestampedData)
  // optional uint32 game_time = 1;
  if (has_game_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_time(), output);
  }

  // optional uint32 gpm = 2;
  if (has_gpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gpm(), output);
  }

  // optional uint32 xpm = 3;
  if (has_xpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->xpm(), output);
  }

  // optional uint32 kills = 4;
  if (has_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->kills(), output);
  }

  // optional uint32 deaths = 5;
  if (has_deaths()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->deaths(), output);
  }

  // repeated uint32 item_purchases = 6;
  for (int i = 0; i < this->item_purchases_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->item_purchases(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCompendiumTimestampedData)
}

::google::protobuf::uint8* CCompendiumTimestampedData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCompendiumTimestampedData)
  // optional uint32 game_time = 1;
  if (has_game_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_time(), target);
  }

  // optional uint32 gpm = 2;
  if (has_gpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gpm(), target);
  }

  // optional uint32 xpm = 3;
  if (has_xpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->xpm(), target);
  }

  // optional uint32 kills = 4;
  if (has_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->kills(), target);
  }

  // optional uint32 deaths = 5;
  if (has_deaths()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->deaths(), target);
  }

  // repeated uint32 item_purchases = 6;
  for (int i = 0; i < this->item_purchases_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->item_purchases(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCompendiumTimestampedData)
  return target;
}

int CCompendiumTimestampedData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_time = 1;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_time());
    }

    // optional uint32 gpm = 2;
    if (has_gpm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gpm());
    }

    // optional uint32 xpm = 3;
    if (has_xpm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xpm());
    }

    // optional uint32 kills = 4;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 5;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

  }
  // repeated uint32 item_purchases = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_purchases_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->item_purchases(i));
    }
    total_size += 1 * this->item_purchases_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCompendiumTimestampedData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCompendiumTimestampedData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCompendiumTimestampedData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCompendiumTimestampedData::MergeFrom(const CCompendiumTimestampedData& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_purchases_.MergeFrom(from.item_purchases_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_time()) {
      set_game_time(from.game_time());
    }
    if (from.has_gpm()) {
      set_gpm(from.gpm());
    }
    if (from.has_xpm()) {
      set_xpm(from.xpm());
    }
    if (from.has_kills()) {
      set_kills(from.kills());
    }
    if (from.has_deaths()) {
      set_deaths(from.deaths());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCompendiumTimestampedData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCompendiumTimestampedData::CopyFrom(const CCompendiumTimestampedData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCompendiumTimestampedData::IsInitialized() const {

  return true;
}

void CCompendiumTimestampedData::Swap(CCompendiumTimestampedData* other) {
  if (other != this) {
    std::swap(game_time_, other->game_time_);
    std::swap(gpm_, other->gpm_);
    std::swap(xpm_, other->xpm_);
    std::swap(kills_, other->kills_);
    std::swap(deaths_, other->deaths_);
    item_purchases_.Swap(&other->item_purchases_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCompendiumTimestampedData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCompendiumTimestampedData_descriptor_;
  metadata.reflection = CCompendiumTimestampedData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCompendiumGameTimeline::kDataFieldNumber;
const int CCompendiumGameTimeline::kTagsFieldNumber;
#endif  // !_MSC_VER

CCompendiumGameTimeline::CCompendiumGameTimeline()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCompendiumGameTimeline)
}

void CCompendiumGameTimeline::InitAsDefaultInstance() {
}

CCompendiumGameTimeline::CCompendiumGameTimeline(const CCompendiumGameTimeline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CCompendiumGameTimeline)
}

void CCompendiumGameTimeline::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCompendiumGameTimeline::~CCompendiumGameTimeline() {
  // @@protoc_insertion_point(destructor:CCompendiumGameTimeline)
  SharedDtor();
}

void CCompendiumGameTimeline::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCompendiumGameTimeline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCompendiumGameTimeline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCompendiumGameTimeline_descriptor_;
}

const CCompendiumGameTimeline& CCompendiumGameTimeline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CCompendiumGameTimeline* CCompendiumGameTimeline::default_instance_ = NULL;

CCompendiumGameTimeline* CCompendiumGameTimeline::New() const {
  return new CCompendiumGameTimeline;
}

void CCompendiumGameTimeline::Clear() {
  data_.Clear();
  tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCompendiumGameTimeline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCompendiumGameTimeline)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CCompendiumTimestampedData data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(18)) goto parse_tags;
        break;
      }

      // repeated string tags = 2;
      case 2: {
        if (tag == 18) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tags");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tags;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCompendiumGameTimeline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCompendiumGameTimeline)
  return false;
#undef DO_
}

void CCompendiumGameTimeline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCompendiumGameTimeline)
  // repeated .CCompendiumTimestampedData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // repeated string tags = 2;
  for (int i = 0; i < this->tags_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->tags(i).data(), this->tags(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tags(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCompendiumGameTimeline)
}

::google::protobuf::uint8* CCompendiumGameTimeline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCompendiumGameTimeline)
  // repeated .CCompendiumTimestampedData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // repeated string tags = 2;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->tags(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCompendiumGameTimeline)
  return target;
}

int CCompendiumGameTimeline::ByteSize() const {
  int total_size = 0;

  // repeated .CCompendiumTimestampedData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  // repeated string tags = 2;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCompendiumGameTimeline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCompendiumGameTimeline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCompendiumGameTimeline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCompendiumGameTimeline::MergeFrom(const CCompendiumGameTimeline& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  tags_.MergeFrom(from.tags_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCompendiumGameTimeline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCompendiumGameTimeline::CopyFrom(const CCompendiumGameTimeline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCompendiumGameTimeline::IsInitialized() const {

  return true;
}

void CCompendiumGameTimeline::Swap(CCompendiumGameTimeline* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    tags_.Swap(&other->tags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCompendiumGameTimeline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCompendiumGameTimeline_descriptor_;
  metadata.reflection = CCompendiumGameTimeline_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCompendiumGameList::kGamesFieldNumber;
#endif  // !_MSC_VER

CCompendiumGameList::CCompendiumGameList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCompendiumGameList)
}

void CCompendiumGameList::InitAsDefaultInstance() {
}

CCompendiumGameList::CCompendiumGameList(const CCompendiumGameList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CCompendiumGameList)
}

void CCompendiumGameList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCompendiumGameList::~CCompendiumGameList() {
  // @@protoc_insertion_point(destructor:CCompendiumGameList)
  SharedDtor();
}

void CCompendiumGameList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCompendiumGameList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCompendiumGameList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCompendiumGameList_descriptor_;
}

const CCompendiumGameList& CCompendiumGameList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CCompendiumGameList* CCompendiumGameList::default_instance_ = NULL;

CCompendiumGameList* CCompendiumGameList::New() const {
  return new CCompendiumGameList;
}

void CCompendiumGameList::Clear() {
  games_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCompendiumGameList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCompendiumGameList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CCompendiumGameTimeline games = 1;
      case 1: {
        if (tag == 10) {
         parse_games:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_games()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_games;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCompendiumGameList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCompendiumGameList)
  return false;
#undef DO_
}

void CCompendiumGameList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCompendiumGameList)
  // repeated .CCompendiumGameTimeline games = 1;
  for (int i = 0; i < this->games_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->games(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCompendiumGameList)
}

::google::protobuf::uint8* CCompendiumGameList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCompendiumGameList)
  // repeated .CCompendiumGameTimeline games = 1;
  for (int i = 0; i < this->games_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->games(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCompendiumGameList)
  return target;
}

int CCompendiumGameList::ByteSize() const {
  int total_size = 0;

  // repeated .CCompendiumGameTimeline games = 1;
  total_size += 1 * this->games_size();
  for (int i = 0; i < this->games_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->games(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCompendiumGameList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCompendiumGameList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCompendiumGameList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCompendiumGameList::MergeFrom(const CCompendiumGameList& from) {
  GOOGLE_CHECK_NE(&from, this);
  games_.MergeFrom(from.games_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCompendiumGameList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCompendiumGameList::CopyFrom(const CCompendiumGameList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCompendiumGameList::IsInitialized() const {

  return true;
}

void CCompendiumGameList::Swap(CCompendiumGameList* other) {
  if (other != this) {
    games_.Swap(&other->games_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCompendiumGameList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCompendiumGameList_descriptor_;
  metadata.reflection = CCompendiumGameList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAdditionalEquipSlot::kClassIdFieldNumber;
const int CAdditionalEquipSlot::kSlotIdFieldNumber;
const int CAdditionalEquipSlot::kDefIndexFieldNumber;
#endif  // !_MSC_VER

CAdditionalEquipSlot::CAdditionalEquipSlot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAdditionalEquipSlot)
}

void CAdditionalEquipSlot::InitAsDefaultInstance() {
}

CAdditionalEquipSlot::CAdditionalEquipSlot(const CAdditionalEquipSlot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CAdditionalEquipSlot)
}

void CAdditionalEquipSlot::SharedCtor() {
  _cached_size_ = 0;
  class_id_ = 0u;
  slot_id_ = 0u;
  def_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAdditionalEquipSlot::~CAdditionalEquipSlot() {
  // @@protoc_insertion_point(destructor:CAdditionalEquipSlot)
  SharedDtor();
}

void CAdditionalEquipSlot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CAdditionalEquipSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAdditionalEquipSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAdditionalEquipSlot_descriptor_;
}

const CAdditionalEquipSlot& CAdditionalEquipSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CAdditionalEquipSlot* CAdditionalEquipSlot::default_instance_ = NULL;

CAdditionalEquipSlot* CAdditionalEquipSlot::New() const {
  return new CAdditionalEquipSlot;
}

void CAdditionalEquipSlot::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CAdditionalEquipSlot*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(class_id_, def_index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAdditionalEquipSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAdditionalEquipSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 class_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_id_)));
          set_has_class_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slot_id;
        break;
      }

      // optional uint32 slot_id = 2;
      case 2: {
        if (tag == 16) {
         parse_slot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
          set_has_slot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_def_index;
        break;
      }

      // optional uint32 def_index = 3;
      case 3: {
        if (tag == 24) {
         parse_def_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
          set_has_def_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAdditionalEquipSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAdditionalEquipSlot)
  return false;
#undef DO_
}

void CAdditionalEquipSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAdditionalEquipSlot)
  // optional uint32 class_id = 1;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->class_id(), output);
  }

  // optional uint32 slot_id = 2;
  if (has_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot_id(), output);
  }

  // optional uint32 def_index = 3;
  if (has_def_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->def_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAdditionalEquipSlot)
}

::google::protobuf::uint8* CAdditionalEquipSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAdditionalEquipSlot)
  // optional uint32 class_id = 1;
  if (has_class_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->class_id(), target);
  }

  // optional uint32 slot_id = 2;
  if (has_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot_id(), target);
  }

  // optional uint32 def_index = 3;
  if (has_def_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->def_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAdditionalEquipSlot)
  return target;
}

int CAdditionalEquipSlot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 class_id = 1;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->class_id());
    }

    // optional uint32 slot_id = 2;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional uint32 def_index = 3;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAdditionalEquipSlot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAdditionalEquipSlot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAdditionalEquipSlot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAdditionalEquipSlot::MergeFrom(const CAdditionalEquipSlot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
    if (from.has_slot_id()) {
      set_slot_id(from.slot_id());
    }
    if (from.has_def_index()) {
      set_def_index(from.def_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAdditionalEquipSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAdditionalEquipSlot::CopyFrom(const CAdditionalEquipSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAdditionalEquipSlot::IsInitialized() const {

  return true;
}

void CAdditionalEquipSlot::Swap(CAdditionalEquipSlot* other) {
  if (other != this) {
    std::swap(class_id_, other->class_id_);
    std::swap(slot_id_, other->slot_id_);
    std::swap(def_index_, other->def_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAdditionalEquipSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAdditionalEquipSlot_descriptor_;
  metadata.reflection = CAdditionalEquipSlot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTACombatLogEntry::kTypeFieldNumber;
const int CMsgDOTACombatLogEntry::kTargetNameFieldNumber;
const int CMsgDOTACombatLogEntry::kTargetSourceNameFieldNumber;
const int CMsgDOTACombatLogEntry::kAttackerNameFieldNumber;
const int CMsgDOTACombatLogEntry::kDamageSourceNameFieldNumber;
const int CMsgDOTACombatLogEntry::kInflictorNameFieldNumber;
const int CMsgDOTACombatLogEntry::kIsAttackerIllusionFieldNumber;
const int CMsgDOTACombatLogEntry::kIsAttackerHeroFieldNumber;
const int CMsgDOTACombatLogEntry::kIsTargetIllusionFieldNumber;
const int CMsgDOTACombatLogEntry::kIsTargetHeroFieldNumber;
const int CMsgDOTACombatLogEntry::kIsVisibleRadiantFieldNumber;
const int CMsgDOTACombatLogEntry::kIsVisibleDireFieldNumber;
const int CMsgDOTACombatLogEntry::kValueFieldNumber;
const int CMsgDOTACombatLogEntry::kHealthFieldNumber;
const int CMsgDOTACombatLogEntry::kTimestampFieldNumber;
const int CMsgDOTACombatLogEntry::kStunDurationFieldNumber;
const int CMsgDOTACombatLogEntry::kSlowDurationFieldNumber;
const int CMsgDOTACombatLogEntry::kIsAbilityToggleOnFieldNumber;
const int CMsgDOTACombatLogEntry::kIsAbilityToggleOffFieldNumber;
const int CMsgDOTACombatLogEntry::kAbilityLevelFieldNumber;
const int CMsgDOTACombatLogEntry::kLocationXFieldNumber;
const int CMsgDOTACombatLogEntry::kLocationYFieldNumber;
const int CMsgDOTACombatLogEntry::kGoldReasonFieldNumber;
const int CMsgDOTACombatLogEntry::kTimestampRawFieldNumber;
const int CMsgDOTACombatLogEntry::kModifierDurationFieldNumber;
const int CMsgDOTACombatLogEntry::kXpReasonFieldNumber;
const int CMsgDOTACombatLogEntry::kLastHitsFieldNumber;
const int CMsgDOTACombatLogEntry::kAttackerTeamFieldNumber;
const int CMsgDOTACombatLogEntry::kTargetTeamFieldNumber;
const int CMsgDOTACombatLogEntry::kObsWardsPlacedFieldNumber;
const int CMsgDOTACombatLogEntry::kAssistPlayer0FieldNumber;
const int CMsgDOTACombatLogEntry::kAssistPlayer1FieldNumber;
const int CMsgDOTACombatLogEntry::kAssistPlayer2FieldNumber;
const int CMsgDOTACombatLogEntry::kAssistPlayer3FieldNumber;
const int CMsgDOTACombatLogEntry::kStackCountFieldNumber;
const int CMsgDOTACombatLogEntry::kHiddenModifierFieldNumber;
const int CMsgDOTACombatLogEntry::kIsTargetBuildingFieldNumber;
const int CMsgDOTACombatLogEntry::kNeutralCampTypeFieldNumber;
const int CMsgDOTACombatLogEntry::kRuneTypeFieldNumber;
const int CMsgDOTACombatLogEntry::kAssistPlayersFieldNumber;
const int CMsgDOTACombatLogEntry::kIsHealSaveFieldNumber;
const int CMsgDOTACombatLogEntry::kIsUltimateAbilityFieldNumber;
const int CMsgDOTACombatLogEntry::kAttackerHeroLevelFieldNumber;
const int CMsgDOTACombatLogEntry::kTargetHeroLevelFieldNumber;
const int CMsgDOTACombatLogEntry::kXpmFieldNumber;
const int CMsgDOTACombatLogEntry::kGpmFieldNumber;
const int CMsgDOTACombatLogEntry::kEventLocationFieldNumber;
const int CMsgDOTACombatLogEntry::kTargetIsSelfFieldNumber;
const int CMsgDOTACombatLogEntry::kDamageTypeFieldNumber;
const int CMsgDOTACombatLogEntry::kInvisibilityModifierFieldNumber;
const int CMsgDOTACombatLogEntry::kDamageCategoryFieldNumber;
const int CMsgDOTACombatLogEntry::kNetworthFieldNumber;
const int CMsgDOTACombatLogEntry::kBuildingTypeFieldNumber;
const int CMsgDOTACombatLogEntry::kModifierElapsedDurationFieldNumber;
const int CMsgDOTACombatLogEntry::kSilenceModifierFieldNumber;
const int CMsgDOTACombatLogEntry::kHealFromLifestealFieldNumber;
const int CMsgDOTACombatLogEntry::kModifierPurgedFieldNumber;
const int CMsgDOTACombatLogEntry::kSpellEvadedFieldNumber;
const int CMsgDOTACombatLogEntry::kMotionControllerModifierFieldNumber;
const int CMsgDOTACombatLogEntry::kLongRangeKillFieldNumber;
const int CMsgDOTACombatLogEntry::kModifierPurgeAbilityFieldNumber;
const int CMsgDOTACombatLogEntry::kModifierPurgeNpcFieldNumber;
#endif  // !_MSC_VER

CMsgDOTACombatLogEntry::CMsgDOTACombatLogEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTACombatLogEntry)
}

void CMsgDOTACombatLogEntry::InitAsDefaultInstance() {
}

CMsgDOTACombatLogEntry::CMsgDOTACombatLogEntry(const CMsgDOTACombatLogEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTACombatLogEntry)
}

void CMsgDOTACombatLogEntry::SharedCtor() {
  _cached_size_ = 0;
  type_ = -1;
  target_name_ = 0u;
  target_source_name_ = 0u;
  attacker_name_ = 0u;
  damage_source_name_ = 0u;
  inflictor_name_ = 0u;
  is_attacker_illusion_ = false;
  is_attacker_hero_ = false;
  is_target_illusion_ = false;
  is_target_hero_ = false;
  is_visible_radiant_ = false;
  is_visible_dire_ = false;
  value_ = 0u;
  health_ = 0;
  timestamp_ = 0;
  stun_duration_ = 0;
  slow_duration_ = 0;
  is_ability_toggle_on_ = false;
  is_ability_toggle_off_ = false;
  ability_level_ = 0u;
  location_x_ = 0;
  location_y_ = 0;
  gold_reason_ = 0u;
  timestamp_raw_ = 0;
  modifier_duration_ = 0;
  xp_reason_ = 0u;
  last_hits_ = 0u;
  attacker_team_ = 0u;
  target_team_ = 0u;
  obs_wards_placed_ = 0u;
  assist_player0_ = 0u;
  assist_player1_ = 0u;
  assist_player2_ = 0u;
  assist_player3_ = 0u;
  stack_count_ = 0u;
  hidden_modifier_ = false;
  is_target_building_ = false;
  neutral_camp_type_ = 0u;
  rune_type_ = 0u;
  is_heal_save_ = false;
  is_ultimate_ability_ = false;
  attacker_hero_level_ = 0u;
  target_hero_level_ = 0u;
  xpm_ = 0u;
  gpm_ = 0u;
  event_location_ = 0u;
  target_is_self_ = false;
  damage_type_ = 0u;
  invisibility_modifier_ = false;
  damage_category_ = 0u;
  networth_ = 0u;
  building_type_ = 0u;
  modifier_elapsed_duration_ = 0;
  silence_modifier_ = false;
  heal_from_lifesteal_ = false;
  modifier_purged_ = false;
  spell_evaded_ = false;
  motion_controller_modifier_ = false;
  long_range_kill_ = false;
  modifier_purge_ability_ = 0u;
  modifier_purge_npc_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTACombatLogEntry::~CMsgDOTACombatLogEntry() {
  // @@protoc_insertion_point(destructor:CMsgDOTACombatLogEntry)
  SharedDtor();
}

void CMsgDOTACombatLogEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTACombatLogEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTACombatLogEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTACombatLogEntry_descriptor_;
}

const CMsgDOTACombatLogEntry& CMsgDOTACombatLogEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTACombatLogEntry* CMsgDOTACombatLogEntry::default_instance_ = NULL;

CMsgDOTACombatLogEntry* CMsgDOTACombatLogEntry::New() const {
  return new CMsgDOTACombatLogEntry;
}

void CMsgDOTACombatLogEntry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTACombatLogEntry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(target_name_, is_attacker_hero_);
    type_ = -1;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(is_target_illusion_, is_visible_dire_);
    stun_duration_ = 0;
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(is_ability_toggle_on_, is_ability_toggle_off_);
    ZR_(slow_duration_, timestamp_raw_);
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(modifier_duration_, assist_player1_);
  }
  if (_has_bits_[32 / 32] & 127) {
    ZR_(assist_player2_, is_target_building_);
  }
  if (_has_bits_[40 / 32] & 65280) {
    ZR_(is_heal_save_, is_ultimate_ability_);
    ZR_(attacker_hero_level_, event_location_);
    target_is_self_ = false;
  }
  if (_has_bits_[48 / 32] & 16711680) {
    ZR_(damage_type_, networth_);
    ZR_(invisibility_modifier_, modifier_elapsed_duration_);
  }
  if (_has_bits_[56 / 32] & 1056964608) {
    ZR_(modifier_purged_, modifier_purge_npc_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  assist_players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTACombatLogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTACombatLogEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_INVALID];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_COMBATLOG_TYPES_IsValid(value)) {
            set_type(static_cast< ::DOTA_COMBATLOG_TYPES >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_target_name;
        break;
      }

      // optional uint32 target_name = 2;
      case 2: {
        if (tag == 16) {
         parse_target_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_name_)));
          set_has_target_name();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_target_source_name;
        break;
      }

      // optional uint32 target_source_name = 3;
      case 3: {
        if (tag == 24) {
         parse_target_source_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_source_name_)));
          set_has_target_source_name();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_attacker_name;
        break;
      }

      // optional uint32 attacker_name = 4;
      case 4: {
        if (tag == 32) {
         parse_attacker_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacker_name_)));
          set_has_attacker_name();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_damage_source_name;
        break;
      }

      // optional uint32 damage_source_name = 5;
      case 5: {
        if (tag == 40) {
         parse_damage_source_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_source_name_)));
          set_has_damage_source_name();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_inflictor_name;
        break;
      }

      // optional uint32 inflictor_name = 6;
      case 6: {
        if (tag == 48) {
         parse_inflictor_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inflictor_name_)));
          set_has_inflictor_name();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_attacker_illusion;
        break;
      }

      // optional bool is_attacker_illusion = 7;
      case 7: {
        if (tag == 56) {
         parse_is_attacker_illusion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attacker_illusion_)));
          set_has_is_attacker_illusion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_is_attacker_hero;
        break;
      }

      // optional bool is_attacker_hero = 8;
      case 8: {
        if (tag == 64) {
         parse_is_attacker_hero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attacker_hero_)));
          set_has_is_attacker_hero();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_is_target_illusion;
        break;
      }

      // optional bool is_target_illusion = 9;
      case 9: {
        if (tag == 72) {
         parse_is_target_illusion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_target_illusion_)));
          set_has_is_target_illusion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_is_target_hero;
        break;
      }

      // optional bool is_target_hero = 10;
      case 10: {
        if (tag == 80) {
         parse_is_target_hero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_target_hero_)));
          set_has_is_target_hero();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_is_visible_radiant;
        break;
      }

      // optional bool is_visible_radiant = 11;
      case 11: {
        if (tag == 88) {
         parse_is_visible_radiant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_visible_radiant_)));
          set_has_is_visible_radiant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_is_visible_dire;
        break;
      }

      // optional bool is_visible_dire = 12;
      case 12: {
        if (tag == 96) {
         parse_is_visible_dire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_visible_dire_)));
          set_has_is_visible_dire();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_value;
        break;
      }

      // optional uint32 value = 13;
      case 13: {
        if (tag == 104) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_health;
        break;
      }

      // optional int32 health = 14;
      case 14: {
        if (tag == 112) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_timestamp;
        break;
      }

      // optional float timestamp = 15;
      case 15: {
        if (tag == 125) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_stun_duration;
        break;
      }

      // optional float stun_duration = 16;
      case 16: {
        if (tag == 133) {
         parse_stun_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stun_duration_)));
          set_has_stun_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_slow_duration;
        break;
      }

      // optional float slow_duration = 17;
      case 17: {
        if (tag == 141) {
         parse_slow_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slow_duration_)));
          set_has_slow_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_is_ability_toggle_on;
        break;
      }

      // optional bool is_ability_toggle_on = 18;
      case 18: {
        if (tag == 144) {
         parse_is_ability_toggle_on:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ability_toggle_on_)));
          set_has_is_ability_toggle_on();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_is_ability_toggle_off;
        break;
      }

      // optional bool is_ability_toggle_off = 19;
      case 19: {
        if (tag == 152) {
         parse_is_ability_toggle_off:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ability_toggle_off_)));
          set_has_is_ability_toggle_off();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_ability_level;
        break;
      }

      // optional uint32 ability_level = 20;
      case 20: {
        if (tag == 160) {
         parse_ability_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_level_)));
          set_has_ability_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(173)) goto parse_location_x;
        break;
      }

      // optional float location_x = 21;
      case 21: {
        if (tag == 173) {
         parse_location_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &location_x_)));
          set_has_location_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(181)) goto parse_location_y;
        break;
      }

      // optional float location_y = 22;
      case 22: {
        if (tag == 181) {
         parse_location_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &location_y_)));
          set_has_location_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_gold_reason;
        break;
      }

      // optional uint32 gold_reason = 23;
      case 23: {
        if (tag == 184) {
         parse_gold_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_reason_)));
          set_has_gold_reason();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(197)) goto parse_timestamp_raw;
        break;
      }

      // optional float timestamp_raw = 24;
      case 24: {
        if (tag == 197) {
         parse_timestamp_raw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timestamp_raw_)));
          set_has_timestamp_raw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(205)) goto parse_modifier_duration;
        break;
      }

      // optional float modifier_duration = 25;
      case 25: {
        if (tag == 205) {
         parse_modifier_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &modifier_duration_)));
          set_has_modifier_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_xp_reason;
        break;
      }

      // optional uint32 xp_reason = 26;
      case 26: {
        if (tag == 208) {
         parse_xp_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_reason_)));
          set_has_xp_reason();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_last_hits;
        break;
      }

      // optional uint32 last_hits = 27;
      case 27: {
        if (tag == 216) {
         parse_last_hits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_hits_)));
          set_has_last_hits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_attacker_team;
        break;
      }

      // optional uint32 attacker_team = 28;
      case 28: {
        if (tag == 224) {
         parse_attacker_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacker_team_)));
          set_has_attacker_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_target_team;
        break;
      }

      // optional uint32 target_team = 29;
      case 29: {
        if (tag == 232) {
         parse_target_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_team_)));
          set_has_target_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_obs_wards_placed;
        break;
      }

      // optional uint32 obs_wards_placed = 30;
      case 30: {
        if (tag == 240) {
         parse_obs_wards_placed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obs_wards_placed_)));
          set_has_obs_wards_placed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_assist_player0;
        break;
      }

      // optional uint32 assist_player0 = 31;
      case 31: {
        if (tag == 248) {
         parse_assist_player0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assist_player0_)));
          set_has_assist_player0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_assist_player1;
        break;
      }

      // optional uint32 assist_player1 = 32;
      case 32: {
        if (tag == 256) {
         parse_assist_player1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assist_player1_)));
          set_has_assist_player1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_assist_player2;
        break;
      }

      // optional uint32 assist_player2 = 33;
      case 33: {
        if (tag == 264) {
         parse_assist_player2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assist_player2_)));
          set_has_assist_player2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_assist_player3;
        break;
      }

      // optional uint32 assist_player3 = 34;
      case 34: {
        if (tag == 272) {
         parse_assist_player3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assist_player3_)));
          set_has_assist_player3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_stack_count;
        break;
      }

      // optional uint32 stack_count = 35;
      case 35: {
        if (tag == 280) {
         parse_stack_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stack_count_)));
          set_has_stack_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_hidden_modifier;
        break;
      }

      // optional bool hidden_modifier = 36;
      case 36: {
        if (tag == 288) {
         parse_hidden_modifier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hidden_modifier_)));
          set_has_hidden_modifier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_is_target_building;
        break;
      }

      // optional bool is_target_building = 37;
      case 37: {
        if (tag == 296) {
         parse_is_target_building:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_target_building_)));
          set_has_is_target_building();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_neutral_camp_type;
        break;
      }

      // optional uint32 neutral_camp_type = 38;
      case 38: {
        if (tag == 304) {
         parse_neutral_camp_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &neutral_camp_type_)));
          set_has_neutral_camp_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_rune_type;
        break;
      }

      // optional uint32 rune_type = 39;
      case 39: {
        if (tag == 312) {
         parse_rune_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rune_type_)));
          set_has_rune_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_assist_players;
        break;
      }

      // repeated uint32 assist_players = 40;
      case 40: {
        if (tag == 320) {
         parse_assist_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 320, input, this->mutable_assist_players())));
        } else if (tag == 322) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_assist_players())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_assist_players;
        if (input->ExpectTag(328)) goto parse_is_heal_save;
        break;
      }

      // optional bool is_heal_save = 41;
      case 41: {
        if (tag == 328) {
         parse_is_heal_save:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_heal_save_)));
          set_has_is_heal_save();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_is_ultimate_ability;
        break;
      }

      // optional bool is_ultimate_ability = 42;
      case 42: {
        if (tag == 336) {
         parse_is_ultimate_ability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ultimate_ability_)));
          set_has_is_ultimate_ability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_attacker_hero_level;
        break;
      }

      // optional uint32 attacker_hero_level = 43;
      case 43: {
        if (tag == 344) {
         parse_attacker_hero_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacker_hero_level_)));
          set_has_attacker_hero_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_target_hero_level;
        break;
      }

      // optional uint32 target_hero_level = 44;
      case 44: {
        if (tag == 352) {
         parse_target_hero_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_hero_level_)));
          set_has_target_hero_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_xpm;
        break;
      }

      // optional uint32 xpm = 45;
      case 45: {
        if (tag == 360) {
         parse_xpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xpm_)));
          set_has_xpm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_gpm;
        break;
      }

      // optional uint32 gpm = 46;
      case 46: {
        if (tag == 368) {
         parse_gpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpm_)));
          set_has_gpm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_event_location;
        break;
      }

      // optional uint32 event_location = 47;
      case 47: {
        if (tag == 376) {
         parse_event_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_location_)));
          set_has_event_location();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_target_is_self;
        break;
      }

      // optional bool target_is_self = 48;
      case 48: {
        if (tag == 384) {
         parse_target_is_self:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &target_is_self_)));
          set_has_target_is_self();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_damage_type;
        break;
      }

      // optional uint32 damage_type = 49;
      case 49: {
        if (tag == 392) {
         parse_damage_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_type_)));
          set_has_damage_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_invisibility_modifier;
        break;
      }

      // optional bool invisibility_modifier = 50;
      case 50: {
        if (tag == 400) {
         parse_invisibility_modifier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invisibility_modifier_)));
          set_has_invisibility_modifier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_damage_category;
        break;
      }

      // optional uint32 damage_category = 51;
      case 51: {
        if (tag == 408) {
         parse_damage_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_category_)));
          set_has_damage_category();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_networth;
        break;
      }

      // optional uint32 networth = 52;
      case 52: {
        if (tag == 416) {
         parse_networth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &networth_)));
          set_has_networth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_building_type;
        break;
      }

      // optional uint32 building_type = 53;
      case 53: {
        if (tag == 424) {
         parse_building_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &building_type_)));
          set_has_building_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(437)) goto parse_modifier_elapsed_duration;
        break;
      }

      // optional float modifier_elapsed_duration = 54;
      case 54: {
        if (tag == 437) {
         parse_modifier_elapsed_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &modifier_elapsed_duration_)));
          set_has_modifier_elapsed_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_silence_modifier;
        break;
      }

      // optional bool silence_modifier = 55;
      case 55: {
        if (tag == 440) {
         parse_silence_modifier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &silence_modifier_)));
          set_has_silence_modifier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_heal_from_lifesteal;
        break;
      }

      // optional bool heal_from_lifesteal = 56;
      case 56: {
        if (tag == 448) {
         parse_heal_from_lifesteal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &heal_from_lifesteal_)));
          set_has_heal_from_lifesteal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(456)) goto parse_modifier_purged;
        break;
      }

      // optional bool modifier_purged = 57;
      case 57: {
        if (tag == 456) {
         parse_modifier_purged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &modifier_purged_)));
          set_has_modifier_purged();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(464)) goto parse_spell_evaded;
        break;
      }

      // optional bool spell_evaded = 58;
      case 58: {
        if (tag == 464) {
         parse_spell_evaded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &spell_evaded_)));
          set_has_spell_evaded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(472)) goto parse_motion_controller_modifier;
        break;
      }

      // optional bool motion_controller_modifier = 59;
      case 59: {
        if (tag == 472) {
         parse_motion_controller_modifier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &motion_controller_modifier_)));
          set_has_motion_controller_modifier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_long_range_kill;
        break;
      }

      // optional bool long_range_kill = 60;
      case 60: {
        if (tag == 480) {
         parse_long_range_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &long_range_kill_)));
          set_has_long_range_kill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_modifier_purge_ability;
        break;
      }

      // optional uint32 modifier_purge_ability = 61;
      case 61: {
        if (tag == 488) {
         parse_modifier_purge_ability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifier_purge_ability_)));
          set_has_modifier_purge_ability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(496)) goto parse_modifier_purge_npc;
        break;
      }

      // optional uint32 modifier_purge_npc = 62;
      case 62: {
        if (tag == 496) {
         parse_modifier_purge_npc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifier_purge_npc_)));
          set_has_modifier_purge_npc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTACombatLogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTACombatLogEntry)
  return false;
#undef DO_
}

void CMsgDOTACombatLogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTACombatLogEntry)
  // optional .DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_INVALID];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 target_name = 2;
  if (has_target_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_name(), output);
  }

  // optional uint32 target_source_name = 3;
  if (has_target_source_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_source_name(), output);
  }

  // optional uint32 attacker_name = 4;
  if (has_attacker_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attacker_name(), output);
  }

  // optional uint32 damage_source_name = 5;
  if (has_damage_source_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->damage_source_name(), output);
  }

  // optional uint32 inflictor_name = 6;
  if (has_inflictor_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->inflictor_name(), output);
  }

  // optional bool is_attacker_illusion = 7;
  if (has_is_attacker_illusion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_attacker_illusion(), output);
  }

  // optional bool is_attacker_hero = 8;
  if (has_is_attacker_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_attacker_hero(), output);
  }

  // optional bool is_target_illusion = 9;
  if (has_is_target_illusion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_target_illusion(), output);
  }

  // optional bool is_target_hero = 10;
  if (has_is_target_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_target_hero(), output);
  }

  // optional bool is_visible_radiant = 11;
  if (has_is_visible_radiant()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_visible_radiant(), output);
  }

  // optional bool is_visible_dire = 12;
  if (has_is_visible_dire()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_visible_dire(), output);
  }

  // optional uint32 value = 13;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->value(), output);
  }

  // optional int32 health = 14;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->health(), output);
  }

  // optional float timestamp = 15;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->timestamp(), output);
  }

  // optional float stun_duration = 16;
  if (has_stun_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->stun_duration(), output);
  }

  // optional float slow_duration = 17;
  if (has_slow_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->slow_duration(), output);
  }

  // optional bool is_ability_toggle_on = 18;
  if (has_is_ability_toggle_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->is_ability_toggle_on(), output);
  }

  // optional bool is_ability_toggle_off = 19;
  if (has_is_ability_toggle_off()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->is_ability_toggle_off(), output);
  }

  // optional uint32 ability_level = 20;
  if (has_ability_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->ability_level(), output);
  }

  // optional float location_x = 21;
  if (has_location_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->location_x(), output);
  }

  // optional float location_y = 22;
  if (has_location_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->location_y(), output);
  }

  // optional uint32 gold_reason = 23;
  if (has_gold_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->gold_reason(), output);
  }

  // optional float timestamp_raw = 24;
  if (has_timestamp_raw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->timestamp_raw(), output);
  }

  // optional float modifier_duration = 25;
  if (has_modifier_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->modifier_duration(), output);
  }

  // optional uint32 xp_reason = 26;
  if (has_xp_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->xp_reason(), output);
  }

  // optional uint32 last_hits = 27;
  if (has_last_hits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->last_hits(), output);
  }

  // optional uint32 attacker_team = 28;
  if (has_attacker_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->attacker_team(), output);
  }

  // optional uint32 target_team = 29;
  if (has_target_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->target_team(), output);
  }

  // optional uint32 obs_wards_placed = 30;
  if (has_obs_wards_placed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->obs_wards_placed(), output);
  }

  // optional uint32 assist_player0 = 31;
  if (has_assist_player0()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->assist_player0(), output);
  }

  // optional uint32 assist_player1 = 32;
  if (has_assist_player1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->assist_player1(), output);
  }

  // optional uint32 assist_player2 = 33;
  if (has_assist_player2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->assist_player2(), output);
  }

  // optional uint32 assist_player3 = 34;
  if (has_assist_player3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->assist_player3(), output);
  }

  // optional uint32 stack_count = 35;
  if (has_stack_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->stack_count(), output);
  }

  // optional bool hidden_modifier = 36;
  if (has_hidden_modifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->hidden_modifier(), output);
  }

  // optional bool is_target_building = 37;
  if (has_is_target_building()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->is_target_building(), output);
  }

  // optional uint32 neutral_camp_type = 38;
  if (has_neutral_camp_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->neutral_camp_type(), output);
  }

  // optional uint32 rune_type = 39;
  if (has_rune_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->rune_type(), output);
  }

  // repeated uint32 assist_players = 40;
  for (int i = 0; i < this->assist_players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      40, this->assist_players(i), output);
  }

  // optional bool is_heal_save = 41;
  if (has_is_heal_save()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->is_heal_save(), output);
  }

  // optional bool is_ultimate_ability = 42;
  if (has_is_ultimate_ability()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->is_ultimate_ability(), output);
  }

  // optional uint32 attacker_hero_level = 43;
  if (has_attacker_hero_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->attacker_hero_level(), output);
  }

  // optional uint32 target_hero_level = 44;
  if (has_target_hero_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->target_hero_level(), output);
  }

  // optional uint32 xpm = 45;
  if (has_xpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->xpm(), output);
  }

  // optional uint32 gpm = 46;
  if (has_gpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->gpm(), output);
  }

  // optional uint32 event_location = 47;
  if (has_event_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->event_location(), output);
  }

  // optional bool target_is_self = 48;
  if (has_target_is_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(48, this->target_is_self(), output);
  }

  // optional uint32 damage_type = 49;
  if (has_damage_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->damage_type(), output);
  }

  // optional bool invisibility_modifier = 50;
  if (has_invisibility_modifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->invisibility_modifier(), output);
  }

  // optional uint32 damage_category = 51;
  if (has_damage_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->damage_category(), output);
  }

  // optional uint32 networth = 52;
  if (has_networth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->networth(), output);
  }

  // optional uint32 building_type = 53;
  if (has_building_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->building_type(), output);
  }

  // optional float modifier_elapsed_duration = 54;
  if (has_modifier_elapsed_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(54, this->modifier_elapsed_duration(), output);
  }

  // optional bool silence_modifier = 55;
  if (has_silence_modifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(55, this->silence_modifier(), output);
  }

  // optional bool heal_from_lifesteal = 56;
  if (has_heal_from_lifesteal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(56, this->heal_from_lifesteal(), output);
  }

  // optional bool modifier_purged = 57;
  if (has_modifier_purged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(57, this->modifier_purged(), output);
  }

  // optional bool spell_evaded = 58;
  if (has_spell_evaded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(58, this->spell_evaded(), output);
  }

  // optional bool motion_controller_modifier = 59;
  if (has_motion_controller_modifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(59, this->motion_controller_modifier(), output);
  }

  // optional bool long_range_kill = 60;
  if (has_long_range_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(60, this->long_range_kill(), output);
  }

  // optional uint32 modifier_purge_ability = 61;
  if (has_modifier_purge_ability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->modifier_purge_ability(), output);
  }

  // optional uint32 modifier_purge_npc = 62;
  if (has_modifier_purge_npc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->modifier_purge_npc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTACombatLogEntry)
}

::google::protobuf::uint8* CMsgDOTACombatLogEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTACombatLogEntry)
  // optional .DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_INVALID];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 target_name = 2;
  if (has_target_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_name(), target);
  }

  // optional uint32 target_source_name = 3;
  if (has_target_source_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_source_name(), target);
  }

  // optional uint32 attacker_name = 4;
  if (has_attacker_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attacker_name(), target);
  }

  // optional uint32 damage_source_name = 5;
  if (has_damage_source_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->damage_source_name(), target);
  }

  // optional uint32 inflictor_name = 6;
  if (has_inflictor_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->inflictor_name(), target);
  }

  // optional bool is_attacker_illusion = 7;
  if (has_is_attacker_illusion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_attacker_illusion(), target);
  }

  // optional bool is_attacker_hero = 8;
  if (has_is_attacker_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_attacker_hero(), target);
  }

  // optional bool is_target_illusion = 9;
  if (has_is_target_illusion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_target_illusion(), target);
  }

  // optional bool is_target_hero = 10;
  if (has_is_target_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_target_hero(), target);
  }

  // optional bool is_visible_radiant = 11;
  if (has_is_visible_radiant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_visible_radiant(), target);
  }

  // optional bool is_visible_dire = 12;
  if (has_is_visible_dire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_visible_dire(), target);
  }

  // optional uint32 value = 13;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->value(), target);
  }

  // optional int32 health = 14;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->health(), target);
  }

  // optional float timestamp = 15;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->timestamp(), target);
  }

  // optional float stun_duration = 16;
  if (has_stun_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->stun_duration(), target);
  }

  // optional float slow_duration = 17;
  if (has_slow_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->slow_duration(), target);
  }

  // optional bool is_ability_toggle_on = 18;
  if (has_is_ability_toggle_on()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->is_ability_toggle_on(), target);
  }

  // optional bool is_ability_toggle_off = 19;
  if (has_is_ability_toggle_off()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->is_ability_toggle_off(), target);
  }

  // optional uint32 ability_level = 20;
  if (has_ability_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->ability_level(), target);
  }

  // optional float location_x = 21;
  if (has_location_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->location_x(), target);
  }

  // optional float location_y = 22;
  if (has_location_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->location_y(), target);
  }

  // optional uint32 gold_reason = 23;
  if (has_gold_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->gold_reason(), target);
  }

  // optional float timestamp_raw = 24;
  if (has_timestamp_raw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->timestamp_raw(), target);
  }

  // optional float modifier_duration = 25;
  if (has_modifier_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->modifier_duration(), target);
  }

  // optional uint32 xp_reason = 26;
  if (has_xp_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->xp_reason(), target);
  }

  // optional uint32 last_hits = 27;
  if (has_last_hits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->last_hits(), target);
  }

  // optional uint32 attacker_team = 28;
  if (has_attacker_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->attacker_team(), target);
  }

  // optional uint32 target_team = 29;
  if (has_target_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->target_team(), target);
  }

  // optional uint32 obs_wards_placed = 30;
  if (has_obs_wards_placed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->obs_wards_placed(), target);
  }

  // optional uint32 assist_player0 = 31;
  if (has_assist_player0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->assist_player0(), target);
  }

  // optional uint32 assist_player1 = 32;
  if (has_assist_player1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->assist_player1(), target);
  }

  // optional uint32 assist_player2 = 33;
  if (has_assist_player2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->assist_player2(), target);
  }

  // optional uint32 assist_player3 = 34;
  if (has_assist_player3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->assist_player3(), target);
  }

  // optional uint32 stack_count = 35;
  if (has_stack_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->stack_count(), target);
  }

  // optional bool hidden_modifier = 36;
  if (has_hidden_modifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->hidden_modifier(), target);
  }

  // optional bool is_target_building = 37;
  if (has_is_target_building()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->is_target_building(), target);
  }

  // optional uint32 neutral_camp_type = 38;
  if (has_neutral_camp_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->neutral_camp_type(), target);
  }

  // optional uint32 rune_type = 39;
  if (has_rune_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->rune_type(), target);
  }

  // repeated uint32 assist_players = 40;
  for (int i = 0; i < this->assist_players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(40, this->assist_players(i), target);
  }

  // optional bool is_heal_save = 41;
  if (has_is_heal_save()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->is_heal_save(), target);
  }

  // optional bool is_ultimate_ability = 42;
  if (has_is_ultimate_ability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->is_ultimate_ability(), target);
  }

  // optional uint32 attacker_hero_level = 43;
  if (has_attacker_hero_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->attacker_hero_level(), target);
  }

  // optional uint32 target_hero_level = 44;
  if (has_target_hero_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->target_hero_level(), target);
  }

  // optional uint32 xpm = 45;
  if (has_xpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->xpm(), target);
  }

  // optional uint32 gpm = 46;
  if (has_gpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->gpm(), target);
  }

  // optional uint32 event_location = 47;
  if (has_event_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->event_location(), target);
  }

  // optional bool target_is_self = 48;
  if (has_target_is_self()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(48, this->target_is_self(), target);
  }

  // optional uint32 damage_type = 49;
  if (has_damage_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->damage_type(), target);
  }

  // optional bool invisibility_modifier = 50;
  if (has_invisibility_modifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(50, this->invisibility_modifier(), target);
  }

  // optional uint32 damage_category = 51;
  if (has_damage_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->damage_category(), target);
  }

  // optional uint32 networth = 52;
  if (has_networth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->networth(), target);
  }

  // optional uint32 building_type = 53;
  if (has_building_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->building_type(), target);
  }

  // optional float modifier_elapsed_duration = 54;
  if (has_modifier_elapsed_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(54, this->modifier_elapsed_duration(), target);
  }

  // optional bool silence_modifier = 55;
  if (has_silence_modifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(55, this->silence_modifier(), target);
  }

  // optional bool heal_from_lifesteal = 56;
  if (has_heal_from_lifesteal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(56, this->heal_from_lifesteal(), target);
  }

  // optional bool modifier_purged = 57;
  if (has_modifier_purged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(57, this->modifier_purged(), target);
  }

  // optional bool spell_evaded = 58;
  if (has_spell_evaded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(58, this->spell_evaded(), target);
  }

  // optional bool motion_controller_modifier = 59;
  if (has_motion_controller_modifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(59, this->motion_controller_modifier(), target);
  }

  // optional bool long_range_kill = 60;
  if (has_long_range_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(60, this->long_range_kill(), target);
  }

  // optional uint32 modifier_purge_ability = 61;
  if (has_modifier_purge_ability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->modifier_purge_ability(), target);
  }

  // optional uint32 modifier_purge_npc = 62;
  if (has_modifier_purge_npc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(62, this->modifier_purge_npc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTACombatLogEntry)
  return target;
}

int CMsgDOTACombatLogEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_INVALID];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 target_name = 2;
    if (has_target_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_name());
    }

    // optional uint32 target_source_name = 3;
    if (has_target_source_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_source_name());
    }

    // optional uint32 attacker_name = 4;
    if (has_attacker_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacker_name());
    }

    // optional uint32 damage_source_name = 5;
    if (has_damage_source_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_source_name());
    }

    // optional uint32 inflictor_name = 6;
    if (has_inflictor_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inflictor_name());
    }

    // optional bool is_attacker_illusion = 7;
    if (has_is_attacker_illusion()) {
      total_size += 1 + 1;
    }

    // optional bool is_attacker_hero = 8;
    if (has_is_attacker_hero()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool is_target_illusion = 9;
    if (has_is_target_illusion()) {
      total_size += 1 + 1;
    }

    // optional bool is_target_hero = 10;
    if (has_is_target_hero()) {
      total_size += 1 + 1;
    }

    // optional bool is_visible_radiant = 11;
    if (has_is_visible_radiant()) {
      total_size += 1 + 1;
    }

    // optional bool is_visible_dire = 12;
    if (has_is_visible_dire()) {
      total_size += 1 + 1;
    }

    // optional uint32 value = 13;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional int32 health = 14;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

    // optional float timestamp = 15;
    if (has_timestamp()) {
      total_size += 1 + 4;
    }

    // optional float stun_duration = 16;
    if (has_stun_duration()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float slow_duration = 17;
    if (has_slow_duration()) {
      total_size += 2 + 4;
    }

    // optional bool is_ability_toggle_on = 18;
    if (has_is_ability_toggle_on()) {
      total_size += 2 + 1;
    }

    // optional bool is_ability_toggle_off = 19;
    if (has_is_ability_toggle_off()) {
      total_size += 2 + 1;
    }

    // optional uint32 ability_level = 20;
    if (has_ability_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_level());
    }

    // optional float location_x = 21;
    if (has_location_x()) {
      total_size += 2 + 4;
    }

    // optional float location_y = 22;
    if (has_location_y()) {
      total_size += 2 + 4;
    }

    // optional uint32 gold_reason = 23;
    if (has_gold_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_reason());
    }

    // optional float timestamp_raw = 24;
    if (has_timestamp_raw()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float modifier_duration = 25;
    if (has_modifier_duration()) {
      total_size += 2 + 4;
    }

    // optional uint32 xp_reason = 26;
    if (has_xp_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp_reason());
    }

    // optional uint32 last_hits = 27;
    if (has_last_hits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_hits());
    }

    // optional uint32 attacker_team = 28;
    if (has_attacker_team()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacker_team());
    }

    // optional uint32 target_team = 29;
    if (has_target_team()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_team());
    }

    // optional uint32 obs_wards_placed = 30;
    if (has_obs_wards_placed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->obs_wards_placed());
    }

    // optional uint32 assist_player0 = 31;
    if (has_assist_player0()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assist_player0());
    }

    // optional uint32 assist_player1 = 32;
    if (has_assist_player1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assist_player1());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 assist_player2 = 33;
    if (has_assist_player2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assist_player2());
    }

    // optional uint32 assist_player3 = 34;
    if (has_assist_player3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assist_player3());
    }

    // optional uint32 stack_count = 35;
    if (has_stack_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stack_count());
    }

    // optional bool hidden_modifier = 36;
    if (has_hidden_modifier()) {
      total_size += 2 + 1;
    }

    // optional bool is_target_building = 37;
    if (has_is_target_building()) {
      total_size += 2 + 1;
    }

    // optional uint32 neutral_camp_type = 38;
    if (has_neutral_camp_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->neutral_camp_type());
    }

    // optional uint32 rune_type = 39;
    if (has_rune_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rune_type());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional bool is_heal_save = 41;
    if (has_is_heal_save()) {
      total_size += 2 + 1;
    }

    // optional bool is_ultimate_ability = 42;
    if (has_is_ultimate_ability()) {
      total_size += 2 + 1;
    }

    // optional uint32 attacker_hero_level = 43;
    if (has_attacker_hero_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacker_hero_level());
    }

    // optional uint32 target_hero_level = 44;
    if (has_target_hero_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_hero_level());
    }

    // optional uint32 xpm = 45;
    if (has_xpm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xpm());
    }

    // optional uint32 gpm = 46;
    if (has_gpm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gpm());
    }

    // optional uint32 event_location = 47;
    if (has_event_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_location());
    }

    // optional bool target_is_self = 48;
    if (has_target_is_self()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional uint32 damage_type = 49;
    if (has_damage_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_type());
    }

    // optional bool invisibility_modifier = 50;
    if (has_invisibility_modifier()) {
      total_size += 2 + 1;
    }

    // optional uint32 damage_category = 51;
    if (has_damage_category()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_category());
    }

    // optional uint32 networth = 52;
    if (has_networth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->networth());
    }

    // optional uint32 building_type = 53;
    if (has_building_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->building_type());
    }

    // optional float modifier_elapsed_duration = 54;
    if (has_modifier_elapsed_duration()) {
      total_size += 2 + 4;
    }

    // optional bool silence_modifier = 55;
    if (has_silence_modifier()) {
      total_size += 2 + 1;
    }

    // optional bool heal_from_lifesteal = 56;
    if (has_heal_from_lifesteal()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional bool modifier_purged = 57;
    if (has_modifier_purged()) {
      total_size += 2 + 1;
    }

    // optional bool spell_evaded = 58;
    if (has_spell_evaded()) {
      total_size += 2 + 1;
    }

    // optional bool motion_controller_modifier = 59;
    if (has_motion_controller_modifier()) {
      total_size += 2 + 1;
    }

    // optional bool long_range_kill = 60;
    if (has_long_range_kill()) {
      total_size += 2 + 1;
    }

    // optional uint32 modifier_purge_ability = 61;
    if (has_modifier_purge_ability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifier_purge_ability());
    }

    // optional uint32 modifier_purge_npc = 62;
    if (has_modifier_purge_npc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifier_purge_npc());
    }

  }
  // repeated uint32 assist_players = 40;
  {
    int data_size = 0;
    for (int i = 0; i < this->assist_players_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->assist_players(i));
    }
    total_size += 2 * this->assist_players_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTACombatLogEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTACombatLogEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTACombatLogEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTACombatLogEntry::MergeFrom(const CMsgDOTACombatLogEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  assist_players_.MergeFrom(from.assist_players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_target_name()) {
      set_target_name(from.target_name());
    }
    if (from.has_target_source_name()) {
      set_target_source_name(from.target_source_name());
    }
    if (from.has_attacker_name()) {
      set_attacker_name(from.attacker_name());
    }
    if (from.has_damage_source_name()) {
      set_damage_source_name(from.damage_source_name());
    }
    if (from.has_inflictor_name()) {
      set_inflictor_name(from.inflictor_name());
    }
    if (from.has_is_attacker_illusion()) {
      set_is_attacker_illusion(from.is_attacker_illusion());
    }
    if (from.has_is_attacker_hero()) {
      set_is_attacker_hero(from.is_attacker_hero());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_target_illusion()) {
      set_is_target_illusion(from.is_target_illusion());
    }
    if (from.has_is_target_hero()) {
      set_is_target_hero(from.is_target_hero());
    }
    if (from.has_is_visible_radiant()) {
      set_is_visible_radiant(from.is_visible_radiant());
    }
    if (from.has_is_visible_dire()) {
      set_is_visible_dire(from.is_visible_dire());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_stun_duration()) {
      set_stun_duration(from.stun_duration());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_slow_duration()) {
      set_slow_duration(from.slow_duration());
    }
    if (from.has_is_ability_toggle_on()) {
      set_is_ability_toggle_on(from.is_ability_toggle_on());
    }
    if (from.has_is_ability_toggle_off()) {
      set_is_ability_toggle_off(from.is_ability_toggle_off());
    }
    if (from.has_ability_level()) {
      set_ability_level(from.ability_level());
    }
    if (from.has_location_x()) {
      set_location_x(from.location_x());
    }
    if (from.has_location_y()) {
      set_location_y(from.location_y());
    }
    if (from.has_gold_reason()) {
      set_gold_reason(from.gold_reason());
    }
    if (from.has_timestamp_raw()) {
      set_timestamp_raw(from.timestamp_raw());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_modifier_duration()) {
      set_modifier_duration(from.modifier_duration());
    }
    if (from.has_xp_reason()) {
      set_xp_reason(from.xp_reason());
    }
    if (from.has_last_hits()) {
      set_last_hits(from.last_hits());
    }
    if (from.has_attacker_team()) {
      set_attacker_team(from.attacker_team());
    }
    if (from.has_target_team()) {
      set_target_team(from.target_team());
    }
    if (from.has_obs_wards_placed()) {
      set_obs_wards_placed(from.obs_wards_placed());
    }
    if (from.has_assist_player0()) {
      set_assist_player0(from.assist_player0());
    }
    if (from.has_assist_player1()) {
      set_assist_player1(from.assist_player1());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_assist_player2()) {
      set_assist_player2(from.assist_player2());
    }
    if (from.has_assist_player3()) {
      set_assist_player3(from.assist_player3());
    }
    if (from.has_stack_count()) {
      set_stack_count(from.stack_count());
    }
    if (from.has_hidden_modifier()) {
      set_hidden_modifier(from.hidden_modifier());
    }
    if (from.has_is_target_building()) {
      set_is_target_building(from.is_target_building());
    }
    if (from.has_neutral_camp_type()) {
      set_neutral_camp_type(from.neutral_camp_type());
    }
    if (from.has_rune_type()) {
      set_rune_type(from.rune_type());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_is_heal_save()) {
      set_is_heal_save(from.is_heal_save());
    }
    if (from.has_is_ultimate_ability()) {
      set_is_ultimate_ability(from.is_ultimate_ability());
    }
    if (from.has_attacker_hero_level()) {
      set_attacker_hero_level(from.attacker_hero_level());
    }
    if (from.has_target_hero_level()) {
      set_target_hero_level(from.target_hero_level());
    }
    if (from.has_xpm()) {
      set_xpm(from.xpm());
    }
    if (from.has_gpm()) {
      set_gpm(from.gpm());
    }
    if (from.has_event_location()) {
      set_event_location(from.event_location());
    }
    if (from.has_target_is_self()) {
      set_target_is_self(from.target_is_self());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_damage_type()) {
      set_damage_type(from.damage_type());
    }
    if (from.has_invisibility_modifier()) {
      set_invisibility_modifier(from.invisibility_modifier());
    }
    if (from.has_damage_category()) {
      set_damage_category(from.damage_category());
    }
    if (from.has_networth()) {
      set_networth(from.networth());
    }
    if (from.has_building_type()) {
      set_building_type(from.building_type());
    }
    if (from.has_modifier_elapsed_duration()) {
      set_modifier_elapsed_duration(from.modifier_elapsed_duration());
    }
    if (from.has_silence_modifier()) {
      set_silence_modifier(from.silence_modifier());
    }
    if (from.has_heal_from_lifesteal()) {
      set_heal_from_lifesteal(from.heal_from_lifesteal());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_modifier_purged()) {
      set_modifier_purged(from.modifier_purged());
    }
    if (from.has_spell_evaded()) {
      set_spell_evaded(from.spell_evaded());
    }
    if (from.has_motion_controller_modifier()) {
      set_motion_controller_modifier(from.motion_controller_modifier());
    }
    if (from.has_long_range_kill()) {
      set_long_range_kill(from.long_range_kill());
    }
    if (from.has_modifier_purge_ability()) {
      set_modifier_purge_ability(from.modifier_purge_ability());
    }
    if (from.has_modifier_purge_npc()) {
      set_modifier_purge_npc(from.modifier_purge_npc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTACombatLogEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTACombatLogEntry::CopyFrom(const CMsgDOTACombatLogEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACombatLogEntry::IsInitialized() const {

  return true;
}

void CMsgDOTACombatLogEntry::Swap(CMsgDOTACombatLogEntry* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(target_name_, other->target_name_);
    std::swap(target_source_name_, other->target_source_name_);
    std::swap(attacker_name_, other->attacker_name_);
    std::swap(damage_source_name_, other->damage_source_name_);
    std::swap(inflictor_name_, other->inflictor_name_);
    std::swap(is_attacker_illusion_, other->is_attacker_illusion_);
    std::swap(is_attacker_hero_, other->is_attacker_hero_);
    std::swap(is_target_illusion_, other->is_target_illusion_);
    std::swap(is_target_hero_, other->is_target_hero_);
    std::swap(is_visible_radiant_, other->is_visible_radiant_);
    std::swap(is_visible_dire_, other->is_visible_dire_);
    std::swap(value_, other->value_);
    std::swap(health_, other->health_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(stun_duration_, other->stun_duration_);
    std::swap(slow_duration_, other->slow_duration_);
    std::swap(is_ability_toggle_on_, other->is_ability_toggle_on_);
    std::swap(is_ability_toggle_off_, other->is_ability_toggle_off_);
    std::swap(ability_level_, other->ability_level_);
    std::swap(location_x_, other->location_x_);
    std::swap(location_y_, other->location_y_);
    std::swap(gold_reason_, other->gold_reason_);
    std::swap(timestamp_raw_, other->timestamp_raw_);
    std::swap(modifier_duration_, other->modifier_duration_);
    std::swap(xp_reason_, other->xp_reason_);
    std::swap(last_hits_, other->last_hits_);
    std::swap(attacker_team_, other->attacker_team_);
    std::swap(target_team_, other->target_team_);
    std::swap(obs_wards_placed_, other->obs_wards_placed_);
    std::swap(assist_player0_, other->assist_player0_);
    std::swap(assist_player1_, other->assist_player1_);
    std::swap(assist_player2_, other->assist_player2_);
    std::swap(assist_player3_, other->assist_player3_);
    std::swap(stack_count_, other->stack_count_);
    std::swap(hidden_modifier_, other->hidden_modifier_);
    std::swap(is_target_building_, other->is_target_building_);
    std::swap(neutral_camp_type_, other->neutral_camp_type_);
    std::swap(rune_type_, other->rune_type_);
    assist_players_.Swap(&other->assist_players_);
    std::swap(is_heal_save_, other->is_heal_save_);
    std::swap(is_ultimate_ability_, other->is_ultimate_ability_);
    std::swap(attacker_hero_level_, other->attacker_hero_level_);
    std::swap(target_hero_level_, other->target_hero_level_);
    std::swap(xpm_, other->xpm_);
    std::swap(gpm_, other->gpm_);
    std::swap(event_location_, other->event_location_);
    std::swap(target_is_self_, other->target_is_self_);
    std::swap(damage_type_, other->damage_type_);
    std::swap(invisibility_modifier_, other->invisibility_modifier_);
    std::swap(damage_category_, other->damage_category_);
    std::swap(networth_, other->networth_);
    std::swap(building_type_, other->building_type_);
    std::swap(modifier_elapsed_duration_, other->modifier_elapsed_duration_);
    std::swap(silence_modifier_, other->silence_modifier_);
    std::swap(heal_from_lifesteal_, other->heal_from_lifesteal_);
    std::swap(modifier_purged_, other->modifier_purged_);
    std::swap(spell_evaded_, other->spell_evaded_);
    std::swap(motion_controller_modifier_, other->motion_controller_modifier_);
    std::swap(long_range_kill_, other->long_range_kill_);
    std::swap(modifier_purge_ability_, other->modifier_purge_ability_);
    std::swap(modifier_purge_npc_, other->modifier_purge_npc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTACombatLogEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTACombatLogEntry_descriptor_;
  metadata.reflection = CMsgDOTACombatLogEntry_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAProfileCard_EStatID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAProfileCard_EStatID_descriptor_;
}
bool CMsgDOTAProfileCard_EStatID_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_SoloRank;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_PartyRank;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_Wins;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_Commends;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_GamesPlayed;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_FirstMatchDate;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::EStatID_MIN;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::EStatID_MAX;
const int CMsgDOTAProfileCard::EStatID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAProfileCard_Slot_Trophy::kTrophyIdFieldNumber;
const int CMsgDOTAProfileCard_Slot_Trophy::kTrophyScoreFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAProfileCard_Slot_Trophy::CMsgDOTAProfileCard_Slot_Trophy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAProfileCard.Slot.Trophy)
}

void CMsgDOTAProfileCard_Slot_Trophy::InitAsDefaultInstance() {
}

CMsgDOTAProfileCard_Slot_Trophy::CMsgDOTAProfileCard_Slot_Trophy(const CMsgDOTAProfileCard_Slot_Trophy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard.Slot.Trophy)
}

void CMsgDOTAProfileCard_Slot_Trophy::SharedCtor() {
  _cached_size_ = 0;
  trophy_id_ = 0u;
  trophy_score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAProfileCard_Slot_Trophy::~CMsgDOTAProfileCard_Slot_Trophy() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard.Slot.Trophy)
  SharedDtor();
}

void CMsgDOTAProfileCard_Slot_Trophy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAProfileCard_Slot_Trophy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_Trophy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAProfileCard_Slot_Trophy_descriptor_;
}

const CMsgDOTAProfileCard_Slot_Trophy& CMsgDOTAProfileCard_Slot_Trophy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAProfileCard_Slot_Trophy* CMsgDOTAProfileCard_Slot_Trophy::default_instance_ = NULL;

CMsgDOTAProfileCard_Slot_Trophy* CMsgDOTAProfileCard_Slot_Trophy::New() const {
  return new CMsgDOTAProfileCard_Slot_Trophy;
}

void CMsgDOTAProfileCard_Slot_Trophy::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAProfileCard_Slot_Trophy*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(trophy_id_, trophy_score_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAProfileCard_Slot_Trophy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAProfileCard.Slot.Trophy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 trophy_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trophy_id_)));
          set_has_trophy_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_trophy_score;
        break;
      }

      // optional uint32 trophy_score = 2;
      case 2: {
        if (tag == 16) {
         parse_trophy_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trophy_score_)));
          set_has_trophy_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAProfileCard.Slot.Trophy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAProfileCard.Slot.Trophy)
  return false;
#undef DO_
}

void CMsgDOTAProfileCard_Slot_Trophy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAProfileCard.Slot.Trophy)
  // optional uint32 trophy_id = 1;
  if (has_trophy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->trophy_id(), output);
  }

  // optional uint32 trophy_score = 2;
  if (has_trophy_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trophy_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAProfileCard.Slot.Trophy)
}

::google::protobuf::uint8* CMsgDOTAProfileCard_Slot_Trophy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard.Slot.Trophy)
  // optional uint32 trophy_id = 1;
  if (has_trophy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->trophy_id(), target);
  }

  // optional uint32 trophy_score = 2;
  if (has_trophy_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trophy_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard.Slot.Trophy)
  return target;
}

int CMsgDOTAProfileCard_Slot_Trophy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 trophy_id = 1;
    if (has_trophy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trophy_id());
    }

    // optional uint32 trophy_score = 2;
    if (has_trophy_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trophy_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Trophy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAProfileCard_Slot_Trophy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAProfileCard_Slot_Trophy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Trophy::MergeFrom(const CMsgDOTAProfileCard_Slot_Trophy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trophy_id()) {
      set_trophy_id(from.trophy_id());
    }
    if (from.has_trophy_score()) {
      set_trophy_score(from.trophy_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAProfileCard_Slot_Trophy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Trophy::CopyFrom(const CMsgDOTAProfileCard_Slot_Trophy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Trophy::IsInitialized() const {

  return true;
}

void CMsgDOTAProfileCard_Slot_Trophy::Swap(CMsgDOTAProfileCard_Slot_Trophy* other) {
  if (other != this) {
    std::swap(trophy_id_, other->trophy_id_);
    std::swap(trophy_score_, other->trophy_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAProfileCard_Slot_Trophy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAProfileCard_Slot_Trophy_descriptor_;
  metadata.reflection = CMsgDOTAProfileCard_Slot_Trophy_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAProfileCard_Slot_Stat::kStatIdFieldNumber;
const int CMsgDOTAProfileCard_Slot_Stat::kStatScoreFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAProfileCard_Slot_Stat::CMsgDOTAProfileCard_Slot_Stat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAProfileCard.Slot.Stat)
}

void CMsgDOTAProfileCard_Slot_Stat::InitAsDefaultInstance() {
}

CMsgDOTAProfileCard_Slot_Stat::CMsgDOTAProfileCard_Slot_Stat(const CMsgDOTAProfileCard_Slot_Stat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard.Slot.Stat)
}

void CMsgDOTAProfileCard_Slot_Stat::SharedCtor() {
  _cached_size_ = 0;
  stat_id_ = 1;
  stat_score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAProfileCard_Slot_Stat::~CMsgDOTAProfileCard_Slot_Stat() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard.Slot.Stat)
  SharedDtor();
}

void CMsgDOTAProfileCard_Slot_Stat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAProfileCard_Slot_Stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_Stat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAProfileCard_Slot_Stat_descriptor_;
}

const CMsgDOTAProfileCard_Slot_Stat& CMsgDOTAProfileCard_Slot_Stat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAProfileCard_Slot_Stat* CMsgDOTAProfileCard_Slot_Stat::default_instance_ = NULL;

CMsgDOTAProfileCard_Slot_Stat* CMsgDOTAProfileCard_Slot_Stat::New() const {
  return new CMsgDOTAProfileCard_Slot_Stat;
}

void CMsgDOTAProfileCard_Slot_Stat::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    stat_id_ = 1;
    stat_score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAProfileCard_Slot_Stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAProfileCard.Slot.Stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_SoloRank];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAProfileCard_EStatID_IsValid(value)) {
            set_stat_id(static_cast< ::CMsgDOTAProfileCard_EStatID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stat_score;
        break;
      }

      // optional uint32 stat_score = 2;
      case 2: {
        if (tag == 16) {
         parse_stat_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_score_)));
          set_has_stat_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAProfileCard.Slot.Stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAProfileCard.Slot.Stat)
  return false;
#undef DO_
}

void CMsgDOTAProfileCard_Slot_Stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAProfileCard.Slot.Stat)
  // optional .CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_SoloRank];
  if (has_stat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stat_id(), output);
  }

  // optional uint32 stat_score = 2;
  if (has_stat_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stat_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAProfileCard.Slot.Stat)
}

::google::protobuf::uint8* CMsgDOTAProfileCard_Slot_Stat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard.Slot.Stat)
  // optional .CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_SoloRank];
  if (has_stat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stat_id(), target);
  }

  // optional uint32 stat_score = 2;
  if (has_stat_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stat_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard.Slot.Stat)
  return target;
}

int CMsgDOTAProfileCard_Slot_Stat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_SoloRank];
    if (has_stat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stat_id());
    }

    // optional uint32 stat_score = 2;
    if (has_stat_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Stat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAProfileCard_Slot_Stat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAProfileCard_Slot_Stat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Stat::MergeFrom(const CMsgDOTAProfileCard_Slot_Stat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stat_id()) {
      set_stat_id(from.stat_id());
    }
    if (from.has_stat_score()) {
      set_stat_score(from.stat_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAProfileCard_Slot_Stat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Stat::CopyFrom(const CMsgDOTAProfileCard_Slot_Stat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Stat::IsInitialized() const {

  return true;
}

void CMsgDOTAProfileCard_Slot_Stat::Swap(CMsgDOTAProfileCard_Slot_Stat* other) {
  if (other != this) {
    std::swap(stat_id_, other->stat_id_);
    std::swap(stat_score_, other->stat_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAProfileCard_Slot_Stat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAProfileCard_Slot_Stat_descriptor_;
  metadata.reflection = CMsgDOTAProfileCard_Slot_Stat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAProfileCard_Slot_Item::kSerializedItemFieldNumber;
const int CMsgDOTAProfileCard_Slot_Item::kItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAProfileCard_Slot_Item::CMsgDOTAProfileCard_Slot_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAProfileCard.Slot.Item)
}

void CMsgDOTAProfileCard_Slot_Item::InitAsDefaultInstance() {
}

CMsgDOTAProfileCard_Slot_Item::CMsgDOTAProfileCard_Slot_Item(const CMsgDOTAProfileCard_Slot_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard.Slot.Item)
}

void CMsgDOTAProfileCard_Slot_Item::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serialized_item_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAProfileCard_Slot_Item::~CMsgDOTAProfileCard_Slot_Item() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard.Slot.Item)
  SharedDtor();
}

void CMsgDOTAProfileCard_Slot_Item::SharedDtor() {
  if (serialized_item_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serialized_item_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTAProfileCard_Slot_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAProfileCard_Slot_Item_descriptor_;
}

const CMsgDOTAProfileCard_Slot_Item& CMsgDOTAProfileCard_Slot_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAProfileCard_Slot_Item* CMsgDOTAProfileCard_Slot_Item::default_instance_ = NULL;

CMsgDOTAProfileCard_Slot_Item* CMsgDOTAProfileCard_Slot_Item::New() const {
  return new CMsgDOTAProfileCard_Slot_Item;
}

void CMsgDOTAProfileCard_Slot_Item::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_serialized_item()) {
      if (serialized_item_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serialized_item_->clear();
      }
    }
    item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAProfileCard_Slot_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAProfileCard.Slot.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes serialized_item = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional uint64 item_id = 2;
      case 2: {
        if (tag == 16) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAProfileCard.Slot.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAProfileCard.Slot.Item)
  return false;
#undef DO_
}

void CMsgDOTAProfileCard_Slot_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAProfileCard.Slot.Item)
  // optional bytes serialized_item = 1;
  if (has_serialized_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->serialized_item(), output);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAProfileCard.Slot.Item)
}

::google::protobuf::uint8* CMsgDOTAProfileCard_Slot_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard.Slot.Item)
  // optional bytes serialized_item = 1;
  if (has_serialized_item()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->serialized_item(), target);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard.Slot.Item)
  return target;
}

int CMsgDOTAProfileCard_Slot_Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes serialized_item = 1;
    if (has_serialized_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_item());
    }

    // optional uint64 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAProfileCard_Slot_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAProfileCard_Slot_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Item::MergeFrom(const CMsgDOTAProfileCard_Slot_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialized_item()) {
      set_serialized_item(from.serialized_item());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAProfileCard_Slot_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Item::CopyFrom(const CMsgDOTAProfileCard_Slot_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Item::IsInitialized() const {

  return true;
}

void CMsgDOTAProfileCard_Slot_Item::Swap(CMsgDOTAProfileCard_Slot_Item* other) {
  if (other != this) {
    std::swap(serialized_item_, other->serialized_item_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAProfileCard_Slot_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAProfileCard_Slot_Item_descriptor_;
  metadata.reflection = CMsgDOTAProfileCard_Slot_Item_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAProfileCard_Slot_Hero::kHeroIdFieldNumber;
const int CMsgDOTAProfileCard_Slot_Hero::kHeroWinsFieldNumber;
const int CMsgDOTAProfileCard_Slot_Hero::kHeroLossesFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAProfileCard_Slot_Hero::CMsgDOTAProfileCard_Slot_Hero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAProfileCard.Slot.Hero)
}

void CMsgDOTAProfileCard_Slot_Hero::InitAsDefaultInstance() {
}

CMsgDOTAProfileCard_Slot_Hero::CMsgDOTAProfileCard_Slot_Hero(const CMsgDOTAProfileCard_Slot_Hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard.Slot.Hero)
}

void CMsgDOTAProfileCard_Slot_Hero::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0u;
  hero_wins_ = 0u;
  hero_losses_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAProfileCard_Slot_Hero::~CMsgDOTAProfileCard_Slot_Hero() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard.Slot.Hero)
  SharedDtor();
}

void CMsgDOTAProfileCard_Slot_Hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAProfileCard_Slot_Hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_Hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAProfileCard_Slot_Hero_descriptor_;
}

const CMsgDOTAProfileCard_Slot_Hero& CMsgDOTAProfileCard_Slot_Hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAProfileCard_Slot_Hero* CMsgDOTAProfileCard_Slot_Hero::default_instance_ = NULL;

CMsgDOTAProfileCard_Slot_Hero* CMsgDOTAProfileCard_Slot_Hero::New() const {
  return new CMsgDOTAProfileCard_Slot_Hero;
}

void CMsgDOTAProfileCard_Slot_Hero::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAProfileCard_Slot_Hero*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hero_id_, hero_losses_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAProfileCard_Slot_Hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAProfileCard.Slot.Hero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hero_wins;
        break;
      }

      // optional uint32 hero_wins = 2;
      case 2: {
        if (tag == 16) {
         parse_hero_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_wins_)));
          set_has_hero_wins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hero_losses;
        break;
      }

      // optional uint32 hero_losses = 3;
      case 3: {
        if (tag == 24) {
         parse_hero_losses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_losses_)));
          set_has_hero_losses();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAProfileCard.Slot.Hero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAProfileCard.Slot.Hero)
  return false;
#undef DO_
}

void CMsgDOTAProfileCard_Slot_Hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAProfileCard.Slot.Hero)
  // optional uint32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // optional uint32 hero_wins = 2;
  if (has_hero_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_wins(), output);
  }

  // optional uint32 hero_losses = 3;
  if (has_hero_losses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_losses(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAProfileCard.Slot.Hero)
}

::google::protobuf::uint8* CMsgDOTAProfileCard_Slot_Hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard.Slot.Hero)
  // optional uint32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // optional uint32 hero_wins = 2;
  if (has_hero_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_wins(), target);
  }

  // optional uint32 hero_losses = 3;
  if (has_hero_losses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_losses(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard.Slot.Hero)
  return target;
}

int CMsgDOTAProfileCard_Slot_Hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 hero_wins = 2;
    if (has_hero_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_wins());
    }

    // optional uint32 hero_losses = 3;
    if (has_hero_losses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_losses());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAProfileCard_Slot_Hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAProfileCard_Slot_Hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Hero::MergeFrom(const CMsgDOTAProfileCard_Slot_Hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_hero_wins()) {
      set_hero_wins(from.hero_wins());
    }
    if (from.has_hero_losses()) {
      set_hero_losses(from.hero_losses());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAProfileCard_Slot_Hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Hero::CopyFrom(const CMsgDOTAProfileCard_Slot_Hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Hero::IsInitialized() const {

  return true;
}

void CMsgDOTAProfileCard_Slot_Hero::Swap(CMsgDOTAProfileCard_Slot_Hero* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(hero_wins_, other->hero_wins_);
    std::swap(hero_losses_, other->hero_losses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAProfileCard_Slot_Hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAProfileCard_Slot_Hero_descriptor_;
  metadata.reflection = CMsgDOTAProfileCard_Slot_Hero_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAProfileCard_Slot_Emoticon::kEmoticonIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAProfileCard_Slot_Emoticon::CMsgDOTAProfileCard_Slot_Emoticon()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAProfileCard.Slot.Emoticon)
}

void CMsgDOTAProfileCard_Slot_Emoticon::InitAsDefaultInstance() {
}

CMsgDOTAProfileCard_Slot_Emoticon::CMsgDOTAProfileCard_Slot_Emoticon(const CMsgDOTAProfileCard_Slot_Emoticon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard.Slot.Emoticon)
}

void CMsgDOTAProfileCard_Slot_Emoticon::SharedCtor() {
  _cached_size_ = 0;
  emoticon_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAProfileCard_Slot_Emoticon::~CMsgDOTAProfileCard_Slot_Emoticon() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard.Slot.Emoticon)
  SharedDtor();
}

void CMsgDOTAProfileCard_Slot_Emoticon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAProfileCard_Slot_Emoticon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_Emoticon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAProfileCard_Slot_Emoticon_descriptor_;
}

const CMsgDOTAProfileCard_Slot_Emoticon& CMsgDOTAProfileCard_Slot_Emoticon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAProfileCard_Slot_Emoticon* CMsgDOTAProfileCard_Slot_Emoticon::default_instance_ = NULL;

CMsgDOTAProfileCard_Slot_Emoticon* CMsgDOTAProfileCard_Slot_Emoticon::New() const {
  return new CMsgDOTAProfileCard_Slot_Emoticon;
}

void CMsgDOTAProfileCard_Slot_Emoticon::Clear() {
  emoticon_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAProfileCard_Slot_Emoticon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAProfileCard.Slot.Emoticon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 emoticon_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &emoticon_id_)));
          set_has_emoticon_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAProfileCard.Slot.Emoticon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAProfileCard.Slot.Emoticon)
  return false;
#undef DO_
}

void CMsgDOTAProfileCard_Slot_Emoticon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAProfileCard.Slot.Emoticon)
  // optional uint32 emoticon_id = 1;
  if (has_emoticon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->emoticon_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAProfileCard.Slot.Emoticon)
}

::google::protobuf::uint8* CMsgDOTAProfileCard_Slot_Emoticon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard.Slot.Emoticon)
  // optional uint32 emoticon_id = 1;
  if (has_emoticon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->emoticon_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard.Slot.Emoticon)
  return target;
}

int CMsgDOTAProfileCard_Slot_Emoticon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 emoticon_id = 1;
    if (has_emoticon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->emoticon_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Emoticon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAProfileCard_Slot_Emoticon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAProfileCard_Slot_Emoticon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Emoticon::MergeFrom(const CMsgDOTAProfileCard_Slot_Emoticon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_emoticon_id()) {
      set_emoticon_id(from.emoticon_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAProfileCard_Slot_Emoticon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Emoticon::CopyFrom(const CMsgDOTAProfileCard_Slot_Emoticon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Emoticon::IsInitialized() const {

  return true;
}

void CMsgDOTAProfileCard_Slot_Emoticon::Swap(CMsgDOTAProfileCard_Slot_Emoticon* other) {
  if (other != this) {
    std::swap(emoticon_id_, other->emoticon_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAProfileCard_Slot_Emoticon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAProfileCard_Slot_Emoticon_descriptor_;
  metadata.reflection = CMsgDOTAProfileCard_Slot_Emoticon_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAProfileCard_Slot::kSlotIdFieldNumber;
const int CMsgDOTAProfileCard_Slot::kTrophyFieldNumber;
const int CMsgDOTAProfileCard_Slot::kStatFieldNumber;
const int CMsgDOTAProfileCard_Slot::kItemFieldNumber;
const int CMsgDOTAProfileCard_Slot::kHeroFieldNumber;
const int CMsgDOTAProfileCard_Slot::kEmoticonFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAProfileCard_Slot::CMsgDOTAProfileCard_Slot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAProfileCard.Slot)
}

void CMsgDOTAProfileCard_Slot::InitAsDefaultInstance() {
  trophy_ = const_cast< ::CMsgDOTAProfileCard_Slot_Trophy*>(&::CMsgDOTAProfileCard_Slot_Trophy::default_instance());
  stat_ = const_cast< ::CMsgDOTAProfileCard_Slot_Stat*>(&::CMsgDOTAProfileCard_Slot_Stat::default_instance());
  item_ = const_cast< ::CMsgDOTAProfileCard_Slot_Item*>(&::CMsgDOTAProfileCard_Slot_Item::default_instance());
  hero_ = const_cast< ::CMsgDOTAProfileCard_Slot_Hero*>(&::CMsgDOTAProfileCard_Slot_Hero::default_instance());
  emoticon_ = const_cast< ::CMsgDOTAProfileCard_Slot_Emoticon*>(&::CMsgDOTAProfileCard_Slot_Emoticon::default_instance());
}

CMsgDOTAProfileCard_Slot::CMsgDOTAProfileCard_Slot(const CMsgDOTAProfileCard_Slot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard.Slot)
}

void CMsgDOTAProfileCard_Slot::SharedCtor() {
  _cached_size_ = 0;
  slot_id_ = 0u;
  trophy_ = NULL;
  stat_ = NULL;
  item_ = NULL;
  hero_ = NULL;
  emoticon_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAProfileCard_Slot::~CMsgDOTAProfileCard_Slot() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard.Slot)
  SharedDtor();
}

void CMsgDOTAProfileCard_Slot::SharedDtor() {
  if (this != default_instance_) {
    delete trophy_;
    delete stat_;
    delete item_;
    delete hero_;
    delete emoticon_;
  }
}

void CMsgDOTAProfileCard_Slot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAProfileCard_Slot_descriptor_;
}

const CMsgDOTAProfileCard_Slot& CMsgDOTAProfileCard_Slot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAProfileCard_Slot* CMsgDOTAProfileCard_Slot::default_instance_ = NULL;

CMsgDOTAProfileCard_Slot* CMsgDOTAProfileCard_Slot::New() const {
  return new CMsgDOTAProfileCard_Slot;
}

void CMsgDOTAProfileCard_Slot::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    slot_id_ = 0u;
    if (has_trophy()) {
      if (trophy_ != NULL) trophy_->::CMsgDOTAProfileCard_Slot_Trophy::Clear();
    }
    if (has_stat()) {
      if (stat_ != NULL) stat_->::CMsgDOTAProfileCard_Slot_Stat::Clear();
    }
    if (has_item()) {
      if (item_ != NULL) item_->::CMsgDOTAProfileCard_Slot_Item::Clear();
    }
    if (has_hero()) {
      if (hero_ != NULL) hero_->::CMsgDOTAProfileCard_Slot_Hero::Clear();
    }
    if (has_emoticon()) {
      if (emoticon_ != NULL) emoticon_->::CMsgDOTAProfileCard_Slot_Emoticon::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAProfileCard_Slot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAProfileCard.Slot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
          set_has_slot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_trophy;
        break;
      }

      // optional .CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
      case 2: {
        if (tag == 18) {
         parse_trophy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trophy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stat;
        break;
      }

      // optional .CMsgDOTAProfileCard.Slot.Stat stat = 3;
      case 3: {
        if (tag == 26) {
         parse_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_item;
        break;
      }

      // optional .CMsgDOTAProfileCard.Slot.Item item = 4;
      case 4: {
        if (tag == 34) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_hero;
        break;
      }

      // optional .CMsgDOTAProfileCard.Slot.Hero hero = 5;
      case 5: {
        if (tag == 42) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_emoticon;
        break;
      }

      // optional .CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
      case 6: {
        if (tag == 50) {
         parse_emoticon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emoticon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAProfileCard.Slot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAProfileCard.Slot)
  return false;
#undef DO_
}

void CMsgDOTAProfileCard_Slot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAProfileCard.Slot)
  // optional uint32 slot_id = 1;
  if (has_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot_id(), output);
  }

  // optional .CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
  if (has_trophy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trophy(), output);
  }

  // optional .CMsgDOTAProfileCard.Slot.Stat stat = 3;
  if (has_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stat(), output);
  }

  // optional .CMsgDOTAProfileCard.Slot.Item item = 4;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item(), output);
  }

  // optional .CMsgDOTAProfileCard.Slot.Hero hero = 5;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->hero(), output);
  }

  // optional .CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
  if (has_emoticon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->emoticon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAProfileCard.Slot)
}

::google::protobuf::uint8* CMsgDOTAProfileCard_Slot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard.Slot)
  // optional uint32 slot_id = 1;
  if (has_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot_id(), target);
  }

  // optional .CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
  if (has_trophy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->trophy(), target);
  }

  // optional .CMsgDOTAProfileCard.Slot.Stat stat = 3;
  if (has_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stat(), target);
  }

  // optional .CMsgDOTAProfileCard.Slot.Item item = 4;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item(), target);
  }

  // optional .CMsgDOTAProfileCard.Slot.Hero hero = 5;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->hero(), target);
  }

  // optional .CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
  if (has_emoticon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->emoticon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard.Slot)
  return target;
}

int CMsgDOTAProfileCard_Slot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 slot_id = 1;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional .CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
    if (has_trophy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trophy());
    }

    // optional .CMsgDOTAProfileCard.Slot.Stat stat = 3;
    if (has_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stat());
    }

    // optional .CMsgDOTAProfileCard.Slot.Item item = 4;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // optional .CMsgDOTAProfileCard.Slot.Hero hero = 5;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }

    // optional .CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
    if (has_emoticon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emoticon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProfileCard_Slot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAProfileCard_Slot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAProfileCard_Slot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot::MergeFrom(const CMsgDOTAProfileCard_Slot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_id()) {
      set_slot_id(from.slot_id());
    }
    if (from.has_trophy()) {
      mutable_trophy()->::CMsgDOTAProfileCard_Slot_Trophy::MergeFrom(from.trophy());
    }
    if (from.has_stat()) {
      mutable_stat()->::CMsgDOTAProfileCard_Slot_Stat::MergeFrom(from.stat());
    }
    if (from.has_item()) {
      mutable_item()->::CMsgDOTAProfileCard_Slot_Item::MergeFrom(from.item());
    }
    if (from.has_hero()) {
      mutable_hero()->::CMsgDOTAProfileCard_Slot_Hero::MergeFrom(from.hero());
    }
    if (from.has_emoticon()) {
      mutable_emoticon()->::CMsgDOTAProfileCard_Slot_Emoticon::MergeFrom(from.emoticon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAProfileCard_Slot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot::CopyFrom(const CMsgDOTAProfileCard_Slot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot::IsInitialized() const {

  return true;
}

void CMsgDOTAProfileCard_Slot::Swap(CMsgDOTAProfileCard_Slot* other) {
  if (other != this) {
    std::swap(slot_id_, other->slot_id_);
    std::swap(trophy_, other->trophy_);
    std::swap(stat_, other->stat_);
    std::swap(item_, other->item_);
    std::swap(hero_, other->hero_);
    std::swap(emoticon_, other->emoticon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAProfileCard_Slot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAProfileCard_Slot_descriptor_;
  metadata.reflection = CMsgDOTAProfileCard_Slot_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAProfileCard::kAccountIdFieldNumber;
const int CMsgDOTAProfileCard::kBackgroundDefIndexFieldNumber;
const int CMsgDOTAProfileCard::kSlotsFieldNumber;
const int CMsgDOTAProfileCard::kBadgePointsFieldNumber;
const int CMsgDOTAProfileCard::kEventPointsFieldNumber;
const int CMsgDOTAProfileCard::kEventIdFieldNumber;
const int CMsgDOTAProfileCard::kRecentBattleCupVictoryFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAProfileCard::CMsgDOTAProfileCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAProfileCard)
}

void CMsgDOTAProfileCard::InitAsDefaultInstance() {
  recent_battle_cup_victory_ = const_cast< ::CMsgBattleCupVictory*>(&::CMsgBattleCupVictory::default_instance());
}

CMsgDOTAProfileCard::CMsgDOTAProfileCard(const CMsgDOTAProfileCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard)
}

void CMsgDOTAProfileCard::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  background_def_index_ = 0u;
  badge_points_ = 0u;
  event_points_ = 0u;
  event_id_ = 0u;
  recent_battle_cup_victory_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAProfileCard::~CMsgDOTAProfileCard() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard)
  SharedDtor();
}

void CMsgDOTAProfileCard::SharedDtor() {
  if (this != default_instance_) {
    delete recent_battle_cup_victory_;
  }
}

void CMsgDOTAProfileCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAProfileCard_descriptor_;
}

const CMsgDOTAProfileCard& CMsgDOTAProfileCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAProfileCard* CMsgDOTAProfileCard::default_instance_ = NULL;

CMsgDOTAProfileCard* CMsgDOTAProfileCard::New() const {
  return new CMsgDOTAProfileCard;
}

void CMsgDOTAProfileCard::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAProfileCard*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 123) {
    ZR_(account_id_, background_def_index_);
    ZR_(badge_points_, event_points_);
    event_id_ = 0u;
    if (has_recent_battle_cup_victory()) {
      if (recent_battle_cup_victory_ != NULL) recent_battle_cup_victory_->::CMsgBattleCupVictory::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  slots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAProfileCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAProfileCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_background_def_index;
        break;
      }

      // optional uint32 background_def_index = 2;
      case 2: {
        if (tag == 16) {
         parse_background_def_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &background_def_index_)));
          set_has_background_def_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_slots;
        break;
      }

      // repeated .CMsgDOTAProfileCard.Slot slots = 3;
      case 3: {
        if (tag == 26) {
         parse_slots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slots()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_slots;
        if (input->ExpectTag(32)) goto parse_badge_points;
        break;
      }

      // optional uint32 badge_points = 4;
      case 4: {
        if (tag == 32) {
         parse_badge_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badge_points_)));
          set_has_badge_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_event_points;
        break;
      }

      // optional uint32 event_points = 5;
      case 5: {
        if (tag == 40) {
         parse_event_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_points_)));
          set_has_event_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_event_id;
        break;
      }

      // optional uint32 event_id = 6;
      case 6: {
        if (tag == 48) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_recent_battle_cup_victory;
        break;
      }

      // optional .CMsgBattleCupVictory recent_battle_cup_victory = 7;
      case 7: {
        if (tag == 58) {
         parse_recent_battle_cup_victory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recent_battle_cup_victory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAProfileCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAProfileCard)
  return false;
#undef DO_
}

void CMsgDOTAProfileCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAProfileCard)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 background_def_index = 2;
  if (has_background_def_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->background_def_index(), output);
  }

  // repeated .CMsgDOTAProfileCard.Slot slots = 3;
  for (int i = 0; i < this->slots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slots(i), output);
  }

  // optional uint32 badge_points = 4;
  if (has_badge_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->badge_points(), output);
  }

  // optional uint32 event_points = 5;
  if (has_event_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->event_points(), output);
  }

  // optional uint32 event_id = 6;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->event_id(), output);
  }

  // optional .CMsgBattleCupVictory recent_battle_cup_victory = 7;
  if (has_recent_battle_cup_victory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->recent_battle_cup_victory(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAProfileCard)
}

::google::protobuf::uint8* CMsgDOTAProfileCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 background_def_index = 2;
  if (has_background_def_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->background_def_index(), target);
  }

  // repeated .CMsgDOTAProfileCard.Slot slots = 3;
  for (int i = 0; i < this->slots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->slots(i), target);
  }

  // optional uint32 badge_points = 4;
  if (has_badge_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->badge_points(), target);
  }

  // optional uint32 event_points = 5;
  if (has_event_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->event_points(), target);
  }

  // optional uint32 event_id = 6;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->event_id(), target);
  }

  // optional .CMsgBattleCupVictory recent_battle_cup_victory = 7;
  if (has_recent_battle_cup_victory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->recent_battle_cup_victory(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard)
  return target;
}

int CMsgDOTAProfileCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 background_def_index = 2;
    if (has_background_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->background_def_index());
    }

    // optional uint32 badge_points = 4;
    if (has_badge_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badge_points());
    }

    // optional uint32 event_points = 5;
    if (has_event_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_points());
    }

    // optional uint32 event_id = 6;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional .CMsgBattleCupVictory recent_battle_cup_victory = 7;
    if (has_recent_battle_cup_victory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recent_battle_cup_victory());
    }

  }
  // repeated .CMsgDOTAProfileCard.Slot slots = 3;
  total_size += 1 * this->slots_size();
  for (int i = 0; i < this->slots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slots(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProfileCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAProfileCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAProfileCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard::MergeFrom(const CMsgDOTAProfileCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  slots_.MergeFrom(from.slots_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_background_def_index()) {
      set_background_def_index(from.background_def_index());
    }
    if (from.has_badge_points()) {
      set_badge_points(from.badge_points());
    }
    if (from.has_event_points()) {
      set_event_points(from.event_points());
    }
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_recent_battle_cup_victory()) {
      mutable_recent_battle_cup_victory()->::CMsgBattleCupVictory::MergeFrom(from.recent_battle_cup_victory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAProfileCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard::CopyFrom(const CMsgDOTAProfileCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard::IsInitialized() const {

  return true;
}

void CMsgDOTAProfileCard::Swap(CMsgDOTAProfileCard* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(background_def_index_, other->background_def_index_);
    slots_.Swap(&other->slots_);
    std::swap(badge_points_, other->badge_points_);
    std::swap(event_points_, other->event_points_);
    std::swap(event_id_, other->event_id_);
    std::swap(recent_battle_cup_victory_, other->recent_battle_cup_victory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAProfileCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAProfileCard_descriptor_;
  metadata.reflection = CMsgDOTAProfileCard_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CSODOTAPlayerChallenge_EFlags_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTAPlayerChallenge_EFlags_descriptor_;
}
bool CSODOTAPlayerChallenge_EFlags_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CSODOTAPlayerChallenge_EFlags CSODOTAPlayerChallenge::eFlag_InstantRerollUncompleted;
const CSODOTAPlayerChallenge_EFlags CSODOTAPlayerChallenge::eFlag_QuestChallenge;
const CSODOTAPlayerChallenge_EFlags CSODOTAPlayerChallenge::EFlags_MIN;
const CSODOTAPlayerChallenge_EFlags CSODOTAPlayerChallenge::EFlags_MAX;
const int CSODOTAPlayerChallenge::EFlags_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CSODOTAPlayerChallenge::kAccountIdFieldNumber;
const int CSODOTAPlayerChallenge::kEventIdFieldNumber;
const int CSODOTAPlayerChallenge::kSlotIdFieldNumber;
const int CSODOTAPlayerChallenge::kChallengeTypeFieldNumber;
const int CSODOTAPlayerChallenge::kIntParam0FieldNumber;
const int CSODOTAPlayerChallenge::kIntParam1FieldNumber;
const int CSODOTAPlayerChallenge::kCreatedTimeFieldNumber;
const int CSODOTAPlayerChallenge::kCompletedFieldNumber;
const int CSODOTAPlayerChallenge::kSequenceIdFieldNumber;
const int CSODOTAPlayerChallenge::kChallengeTierFieldNumber;
const int CSODOTAPlayerChallenge::kFlagsFieldNumber;
const int CSODOTAPlayerChallenge::kAttemptsFieldNumber;
const int CSODOTAPlayerChallenge::kCompleteLimitFieldNumber;
const int CSODOTAPlayerChallenge::kQuestRankFieldNumber;
#endif  // !_MSC_VER

CSODOTAPlayerChallenge::CSODOTAPlayerChallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSODOTAPlayerChallenge)
}

void CSODOTAPlayerChallenge::InitAsDefaultInstance() {
}

CSODOTAPlayerChallenge::CSODOTAPlayerChallenge(const CSODOTAPlayerChallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSODOTAPlayerChallenge)
}

void CSODOTAPlayerChallenge::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  event_id_ = 0u;
  slot_id_ = 0u;
  challenge_type_ = 0u;
  int_param_0_ = 0u;
  int_param_1_ = 0u;
  created_time_ = 0u;
  completed_ = 0u;
  sequence_id_ = 0u;
  challenge_tier_ = 0u;
  flags_ = 0u;
  attempts_ = 0u;
  complete_limit_ = 0u;
  quest_rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTAPlayerChallenge::~CSODOTAPlayerChallenge() {
  // @@protoc_insertion_point(destructor:CSODOTAPlayerChallenge)
  SharedDtor();
}

void CSODOTAPlayerChallenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSODOTAPlayerChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTAPlayerChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTAPlayerChallenge_descriptor_;
}

const CSODOTAPlayerChallenge& CSODOTAPlayerChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CSODOTAPlayerChallenge* CSODOTAPlayerChallenge::default_instance_ = NULL;

CSODOTAPlayerChallenge* CSODOTAPlayerChallenge::New() const {
  return new CSODOTAPlayerChallenge;
}

void CSODOTAPlayerChallenge::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSODOTAPlayerChallenge*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(account_id_, completed_);
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(sequence_id_, quest_rank_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSODOTAPlayerChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSODOTAPlayerChallenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_event_id;
        break;
      }

      // optional uint32 event_id = 2;
      case 2: {
        if (tag == 16) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_slot_id;
        break;
      }

      // optional uint32 slot_id = 3;
      case 3: {
        if (tag == 24) {
         parse_slot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
          set_has_slot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_challenge_type;
        break;
      }

      // optional uint32 challenge_type = 4;
      case 4: {
        if (tag == 32) {
         parse_challenge_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_type_)));
          set_has_challenge_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_int_param_0;
        break;
      }

      // optional uint32 int_param_0 = 5;
      case 5: {
        if (tag == 40) {
         parse_int_param_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &int_param_0_)));
          set_has_int_param_0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_int_param_1;
        break;
      }

      // optional uint32 int_param_1 = 6;
      case 6: {
        if (tag == 48) {
         parse_int_param_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &int_param_1_)));
          set_has_int_param_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_created_time;
        break;
      }

      // optional uint32 created_time = 7;
      case 7: {
        if (tag == 56) {
         parse_created_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &created_time_)));
          set_has_created_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_completed;
        break;
      }

      // optional uint32 completed = 8;
      case 8: {
        if (tag == 64) {
         parse_completed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &completed_)));
          set_has_completed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sequence_id;
        break;
      }

      // optional uint32 sequence_id = 9;
      case 9: {
        if (tag == 72) {
         parse_sequence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_id_)));
          set_has_sequence_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_challenge_tier;
        break;
      }

      // optional uint32 challenge_tier = 10;
      case 10: {
        if (tag == 80) {
         parse_challenge_tier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_tier_)));
          set_has_challenge_tier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 11;
      case 11: {
        if (tag == 88) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_attempts;
        break;
      }

      // optional uint32 attempts = 12;
      case 12: {
        if (tag == 96) {
         parse_attempts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attempts_)));
          set_has_attempts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_complete_limit;
        break;
      }

      // optional uint32 complete_limit = 13;
      case 13: {
        if (tag == 104) {
         parse_complete_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &complete_limit_)));
          set_has_complete_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_quest_rank;
        break;
      }

      // optional uint32 quest_rank = 14;
      case 14: {
        if (tag == 112) {
         parse_quest_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quest_rank_)));
          set_has_quest_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSODOTAPlayerChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSODOTAPlayerChallenge)
  return false;
#undef DO_
}

void CSODOTAPlayerChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSODOTAPlayerChallenge)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 event_id = 2;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event_id(), output);
  }

  // optional uint32 slot_id = 3;
  if (has_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->slot_id(), output);
  }

  // optional uint32 challenge_type = 4;
  if (has_challenge_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->challenge_type(), output);
  }

  // optional uint32 int_param_0 = 5;
  if (has_int_param_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->int_param_0(), output);
  }

  // optional uint32 int_param_1 = 6;
  if (has_int_param_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->int_param_1(), output);
  }

  // optional uint32 created_time = 7;
  if (has_created_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->created_time(), output);
  }

  // optional uint32 completed = 8;
  if (has_completed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->completed(), output);
  }

  // optional uint32 sequence_id = 9;
  if (has_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sequence_id(), output);
  }

  // optional uint32 challenge_tier = 10;
  if (has_challenge_tier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->challenge_tier(), output);
  }

  // optional uint32 flags = 11;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->flags(), output);
  }

  // optional uint32 attempts = 12;
  if (has_attempts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->attempts(), output);
  }

  // optional uint32 complete_limit = 13;
  if (has_complete_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->complete_limit(), output);
  }

  // optional uint32 quest_rank = 14;
  if (has_quest_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->quest_rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSODOTAPlayerChallenge)
}

::google::protobuf::uint8* CSODOTAPlayerChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAPlayerChallenge)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 event_id = 2;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event_id(), target);
  }

  // optional uint32 slot_id = 3;
  if (has_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->slot_id(), target);
  }

  // optional uint32 challenge_type = 4;
  if (has_challenge_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->challenge_type(), target);
  }

  // optional uint32 int_param_0 = 5;
  if (has_int_param_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->int_param_0(), target);
  }

  // optional uint32 int_param_1 = 6;
  if (has_int_param_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->int_param_1(), target);
  }

  // optional uint32 created_time = 7;
  if (has_created_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->created_time(), target);
  }

  // optional uint32 completed = 8;
  if (has_completed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->completed(), target);
  }

  // optional uint32 sequence_id = 9;
  if (has_sequence_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sequence_id(), target);
  }

  // optional uint32 challenge_tier = 10;
  if (has_challenge_tier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->challenge_tier(), target);
  }

  // optional uint32 flags = 11;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->flags(), target);
  }

  // optional uint32 attempts = 12;
  if (has_attempts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->attempts(), target);
  }

  // optional uint32 complete_limit = 13;
  if (has_complete_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->complete_limit(), target);
  }

  // optional uint32 quest_rank = 14;
  if (has_quest_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->quest_rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAPlayerChallenge)
  return target;
}

int CSODOTAPlayerChallenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 event_id = 2;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 slot_id = 3;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional uint32 challenge_type = 4;
    if (has_challenge_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challenge_type());
    }

    // optional uint32 int_param_0 = 5;
    if (has_int_param_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->int_param_0());
    }

    // optional uint32 int_param_1 = 6;
    if (has_int_param_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->int_param_1());
    }

    // optional uint32 created_time = 7;
    if (has_created_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->created_time());
    }

    // optional uint32 completed = 8;
    if (has_completed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->completed());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 sequence_id = 9;
    if (has_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_id());
    }

    // optional uint32 challenge_tier = 10;
    if (has_challenge_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challenge_tier());
    }

    // optional uint32 flags = 11;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 attempts = 12;
    if (has_attempts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attempts());
    }

    // optional uint32 complete_limit = 13;
    if (has_complete_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->complete_limit());
    }

    // optional uint32 quest_rank = 14;
    if (has_quest_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quest_rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTAPlayerChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSODOTAPlayerChallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSODOTAPlayerChallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTAPlayerChallenge::MergeFrom(const CSODOTAPlayerChallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_slot_id()) {
      set_slot_id(from.slot_id());
    }
    if (from.has_challenge_type()) {
      set_challenge_type(from.challenge_type());
    }
    if (from.has_int_param_0()) {
      set_int_param_0(from.int_param_0());
    }
    if (from.has_int_param_1()) {
      set_int_param_1(from.int_param_1());
    }
    if (from.has_created_time()) {
      set_created_time(from.created_time());
    }
    if (from.has_completed()) {
      set_completed(from.completed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sequence_id()) {
      set_sequence_id(from.sequence_id());
    }
    if (from.has_challenge_tier()) {
      set_challenge_tier(from.challenge_tier());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_attempts()) {
      set_attempts(from.attempts());
    }
    if (from.has_complete_limit()) {
      set_complete_limit(from.complete_limit());
    }
    if (from.has_quest_rank()) {
      set_quest_rank(from.quest_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSODOTAPlayerChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAPlayerChallenge::CopyFrom(const CSODOTAPlayerChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAPlayerChallenge::IsInitialized() const {

  return true;
}

void CSODOTAPlayerChallenge::Swap(CSODOTAPlayerChallenge* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(event_id_, other->event_id_);
    std::swap(slot_id_, other->slot_id_);
    std::swap(challenge_type_, other->challenge_type_);
    std::swap(int_param_0_, other->int_param_0_);
    std::swap(int_param_1_, other->int_param_1_);
    std::swap(created_time_, other->created_time_);
    std::swap(completed_, other->completed_);
    std::swap(sequence_id_, other->sequence_id_);
    std::swap(challenge_tier_, other->challenge_tier_);
    std::swap(flags_, other->flags_);
    std::swap(attempts_, other->attempts_);
    std::swap(complete_limit_, other->complete_limit_);
    std::swap(quest_rank_, other->quest_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSODOTAPlayerChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTAPlayerChallenge_descriptor_;
  metadata.reflection = CSODOTAPlayerChallenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientToGCRerollPlayerChallenge::kEventIdFieldNumber;
const int CMsgClientToGCRerollPlayerChallenge::kSequenceIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientToGCRerollPlayerChallenge::CMsgClientToGCRerollPlayerChallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientToGCRerollPlayerChallenge)
}

void CMsgClientToGCRerollPlayerChallenge::InitAsDefaultInstance() {
}

CMsgClientToGCRerollPlayerChallenge::CMsgClientToGCRerollPlayerChallenge(const CMsgClientToGCRerollPlayerChallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRerollPlayerChallenge)
}

void CMsgClientToGCRerollPlayerChallenge::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  sequence_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientToGCRerollPlayerChallenge::~CMsgClientToGCRerollPlayerChallenge() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRerollPlayerChallenge)
  SharedDtor();
}

void CMsgClientToGCRerollPlayerChallenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientToGCRerollPlayerChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCRerollPlayerChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientToGCRerollPlayerChallenge_descriptor_;
}

const CMsgClientToGCRerollPlayerChallenge& CMsgClientToGCRerollPlayerChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgClientToGCRerollPlayerChallenge* CMsgClientToGCRerollPlayerChallenge::default_instance_ = NULL;

CMsgClientToGCRerollPlayerChallenge* CMsgClientToGCRerollPlayerChallenge::New() const {
  return new CMsgClientToGCRerollPlayerChallenge;
}

void CMsgClientToGCRerollPlayerChallenge::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgClientToGCRerollPlayerChallenge*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(event_id_, sequence_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientToGCRerollPlayerChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientToGCRerollPlayerChallenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sequence_id;
        break;
      }

      // optional uint32 sequence_id = 3;
      case 3: {
        if (tag == 24) {
         parse_sequence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_id_)));
          set_has_sequence_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientToGCRerollPlayerChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientToGCRerollPlayerChallenge)
  return false;
#undef DO_
}

void CMsgClientToGCRerollPlayerChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientToGCRerollPlayerChallenge)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint32 sequence_id = 3;
  if (has_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sequence_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientToGCRerollPlayerChallenge)
}

::google::protobuf::uint8* CMsgClientToGCRerollPlayerChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRerollPlayerChallenge)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint32 sequence_id = 3;
  if (has_sequence_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sequence_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRerollPlayerChallenge)
  return target;
}

int CMsgClientToGCRerollPlayerChallenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 sequence_id = 3;
    if (has_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCRerollPlayerChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientToGCRerollPlayerChallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientToGCRerollPlayerChallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientToGCRerollPlayerChallenge::MergeFrom(const CMsgClientToGCRerollPlayerChallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_sequence_id()) {
      set_sequence_id(from.sequence_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientToGCRerollPlayerChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCRerollPlayerChallenge::CopyFrom(const CMsgClientToGCRerollPlayerChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRerollPlayerChallenge::IsInitialized() const {

  return true;
}

void CMsgClientToGCRerollPlayerChallenge::Swap(CMsgClientToGCRerollPlayerChallenge* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(sequence_id_, other->sequence_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientToGCRerollPlayerChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientToGCRerollPlayerChallenge_descriptor_;
  metadata.reflection = CMsgClientToGCRerollPlayerChallenge_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgGCRerollPlayerChallengeResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCRerollPlayerChallengeResponse_EResult_descriptor_;
}
bool CMsgGCRerollPlayerChallengeResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::eResult_Success;
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::eResult_Dropped;
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::eResult_NotFound;
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::eResult_CantReroll;
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::eResult_ServerError;
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::EResult_MIN;
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::EResult_MAX;
const int CMsgGCRerollPlayerChallengeResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgGCRerollPlayerChallengeResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgGCRerollPlayerChallengeResponse::CMsgGCRerollPlayerChallengeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCRerollPlayerChallengeResponse)
}

void CMsgGCRerollPlayerChallengeResponse::InitAsDefaultInstance() {
}

CMsgGCRerollPlayerChallengeResponse::CMsgGCRerollPlayerChallengeResponse(const CMsgGCRerollPlayerChallengeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCRerollPlayerChallengeResponse)
}

void CMsgGCRerollPlayerChallengeResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCRerollPlayerChallengeResponse::~CMsgGCRerollPlayerChallengeResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCRerollPlayerChallengeResponse)
  SharedDtor();
}

void CMsgGCRerollPlayerChallengeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCRerollPlayerChallengeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCRerollPlayerChallengeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCRerollPlayerChallengeResponse_descriptor_;
}

const CMsgGCRerollPlayerChallengeResponse& CMsgGCRerollPlayerChallengeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgGCRerollPlayerChallengeResponse* CMsgGCRerollPlayerChallengeResponse::default_instance_ = NULL;

CMsgGCRerollPlayerChallengeResponse* CMsgGCRerollPlayerChallengeResponse::New() const {
  return new CMsgGCRerollPlayerChallengeResponse;
}

void CMsgGCRerollPlayerChallengeResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCRerollPlayerChallengeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCRerollPlayerChallengeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGCRerollPlayerChallengeResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgGCRerollPlayerChallengeResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCRerollPlayerChallengeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCRerollPlayerChallengeResponse)
  return false;
#undef DO_
}

void CMsgGCRerollPlayerChallengeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCRerollPlayerChallengeResponse)
  // optional .CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCRerollPlayerChallengeResponse)
}

::google::protobuf::uint8* CMsgGCRerollPlayerChallengeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCRerollPlayerChallengeResponse)
  // optional .CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCRerollPlayerChallengeResponse)
  return target;
}

int CMsgGCRerollPlayerChallengeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCRerollPlayerChallengeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCRerollPlayerChallengeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCRerollPlayerChallengeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCRerollPlayerChallengeResponse::MergeFrom(const CMsgGCRerollPlayerChallengeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCRerollPlayerChallengeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRerollPlayerChallengeResponse::CopyFrom(const CMsgGCRerollPlayerChallengeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRerollPlayerChallengeResponse::IsInitialized() const {

  return true;
}

void CMsgGCRerollPlayerChallengeResponse::Swap(CMsgGCRerollPlayerChallengeResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCRerollPlayerChallengeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCRerollPlayerChallengeResponse_descriptor_;
  metadata.reflection = CMsgGCRerollPlayerChallengeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCTopCustomGamesList::kTopCustomGamesFieldNumber;
const int CMsgGCTopCustomGamesList::kGameOfTheDayFieldNumber;
#endif  // !_MSC_VER

CMsgGCTopCustomGamesList::CMsgGCTopCustomGamesList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCTopCustomGamesList)
}

void CMsgGCTopCustomGamesList::InitAsDefaultInstance() {
}

CMsgGCTopCustomGamesList::CMsgGCTopCustomGamesList(const CMsgGCTopCustomGamesList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCTopCustomGamesList)
}

void CMsgGCTopCustomGamesList::SharedCtor() {
  _cached_size_ = 0;
  game_of_the_day_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCTopCustomGamesList::~CMsgGCTopCustomGamesList() {
  // @@protoc_insertion_point(destructor:CMsgGCTopCustomGamesList)
  SharedDtor();
}

void CMsgGCTopCustomGamesList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCTopCustomGamesList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCTopCustomGamesList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCTopCustomGamesList_descriptor_;
}

const CMsgGCTopCustomGamesList& CMsgGCTopCustomGamesList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgGCTopCustomGamesList* CMsgGCTopCustomGamesList::default_instance_ = NULL;

CMsgGCTopCustomGamesList* CMsgGCTopCustomGamesList::New() const {
  return new CMsgGCTopCustomGamesList;
}

void CMsgGCTopCustomGamesList::Clear() {
  game_of_the_day_ = GOOGLE_ULONGLONG(0);
  top_custom_games_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCTopCustomGamesList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCTopCustomGamesList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 top_custom_games = 1;
      case 1: {
        if (tag == 8) {
         parse_top_custom_games:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_top_custom_games())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_top_custom_games())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_top_custom_games;
        if (input->ExpectTag(16)) goto parse_game_of_the_day;
        break;
      }

      // optional uint64 game_of_the_day = 2;
      case 2: {
        if (tag == 16) {
         parse_game_of_the_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_of_the_day_)));
          set_has_game_of_the_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCTopCustomGamesList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCTopCustomGamesList)
  return false;
#undef DO_
}

void CMsgGCTopCustomGamesList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCTopCustomGamesList)
  // repeated uint64 top_custom_games = 1;
  for (int i = 0; i < this->top_custom_games_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->top_custom_games(i), output);
  }

  // optional uint64 game_of_the_day = 2;
  if (has_game_of_the_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->game_of_the_day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCTopCustomGamesList)
}

::google::protobuf::uint8* CMsgGCTopCustomGamesList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCTopCustomGamesList)
  // repeated uint64 top_custom_games = 1;
  for (int i = 0; i < this->top_custom_games_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->top_custom_games(i), target);
  }

  // optional uint64 game_of_the_day = 2;
  if (has_game_of_the_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->game_of_the_day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCTopCustomGamesList)
  return target;
}

int CMsgGCTopCustomGamesList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 game_of_the_day = 2;
    if (has_game_of_the_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->game_of_the_day());
    }

  }
  // repeated uint64 top_custom_games = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->top_custom_games_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->top_custom_games(i));
    }
    total_size += 1 * this->top_custom_games_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCTopCustomGamesList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCTopCustomGamesList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCTopCustomGamesList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCTopCustomGamesList::MergeFrom(const CMsgGCTopCustomGamesList& from) {
  GOOGLE_CHECK_NE(&from, this);
  top_custom_games_.MergeFrom(from.top_custom_games_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_game_of_the_day()) {
      set_game_of_the_day(from.game_of_the_day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCTopCustomGamesList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCTopCustomGamesList::CopyFrom(const CMsgGCTopCustomGamesList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCTopCustomGamesList::IsInitialized() const {

  return true;
}

void CMsgGCTopCustomGamesList::Swap(CMsgGCTopCustomGamesList* other) {
  if (other != this) {
    top_custom_games_.Swap(&other->top_custom_games_);
    std::swap(game_of_the_day_, other->game_of_the_day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCTopCustomGamesList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCTopCustomGamesList_descriptor_;
  metadata.reflection = CMsgGCTopCustomGamesList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_TeamDetails::kTeamNumberFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kTeamIdFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kTeamNameFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kTeamLogoFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kScoreFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kPlayersFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kOnlyTeamFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kCheersFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_TeamDetails::CMsgDOTARealtimeGameStats_TeamDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.TeamDetails)
}

void CMsgDOTARealtimeGameStats_TeamDetails::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_TeamDetails::CMsgDOTARealtimeGameStats_TeamDetails(const CMsgDOTARealtimeGameStats_TeamDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.TeamDetails)
}

void CMsgDOTARealtimeGameStats_TeamDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  team_number_ = 0u;
  team_id_ = 0u;
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_logo_ = GOOGLE_ULONGLONG(0);
  score_ = 0u;
  only_team_ = false;
  cheers_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_TeamDetails::~CMsgDOTARealtimeGameStats_TeamDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.TeamDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_TeamDetails::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_TeamDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_TeamDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_TeamDetails_descriptor_;
}

const CMsgDOTARealtimeGameStats_TeamDetails& CMsgDOTARealtimeGameStats_TeamDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_TeamDetails* CMsgDOTARealtimeGameStats_TeamDetails::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_TeamDetails* CMsgDOTARealtimeGameStats_TeamDetails::New() const {
  return new CMsgDOTARealtimeGameStats_TeamDetails;
}

void CMsgDOTARealtimeGameStats_TeamDetails::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTARealtimeGameStats_TeamDetails*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(team_number_, team_id_);
    ZR_(score_, cheers_);
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        team_name_->clear();
      }
    }
    team_logo_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARealtimeGameStats_TeamDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.TeamDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_number_)));
          set_has_team_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (tag == 16) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_team_name;
        break;
      }

      // optional string team_name = 3;
      case 3: {
        if (tag == 26) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_team_logo;
        break;
      }

      // optional fixed64 team_logo = 4;
      case 4: {
        if (tag == 33) {
         parse_team_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &team_logo_)));
          set_has_team_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // optional uint32 score = 5;
      case 5: {
        if (tag == 40) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_players;
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
      case 6: {
        if (tag == 50) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_players;
        if (input->ExpectTag(56)) goto parse_only_team;
        break;
      }

      // optional bool only_team = 7;
      case 7: {
        if (tag == 56) {
         parse_only_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_team_)));
          set_has_only_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_cheers;
        break;
      }

      // optional uint32 cheers = 8;
      case 8: {
        if (tag == 64) {
         parse_cheers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cheers_)));
          set_has_cheers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.TeamDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.TeamDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_TeamDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.TeamDetails)
  // optional uint32 team_number = 1;
  if (has_team_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_number(), output);
  }

  // optional uint32 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  // optional string team_name = 3;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_name(), output);
  }

  // optional fixed64 team_logo = 4;
  if (has_team_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->team_logo(), output);
  }

  // optional uint32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->score(), output);
  }

  // repeated .CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->players(i), output);
  }

  // optional bool only_team = 7;
  if (has_only_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->only_team(), output);
  }

  // optional uint32 cheers = 8;
  if (has_cheers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cheers(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.TeamDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_TeamDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.TeamDetails)
  // optional uint32 team_number = 1;
  if (has_team_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_number(), target);
  }

  // optional uint32 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  // optional string team_name = 3;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_name(), target);
  }

  // optional fixed64 team_logo = 4;
  if (has_team_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->team_logo(), target);
  }

  // optional uint32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->score(), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->players(i), target);
  }

  // optional bool only_team = 7;
  if (has_only_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->only_team(), target);
  }

  // optional uint32 cheers = 8;
  if (has_cheers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->cheers(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.TeamDetails)
  return target;
}

int CMsgDOTARealtimeGameStats_TeamDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 team_number = 1;
    if (has_team_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_number());
    }

    // optional uint32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional string team_name = 3;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional fixed64 team_logo = 4;
    if (has_team_logo()) {
      total_size += 1 + 8;
    }

    // optional uint32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional bool only_team = 7;
    if (has_only_team()) {
      total_size += 1 + 1;
    }

    // optional uint32 cheers = 8;
    if (has_cheers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cheers());
    }

  }
  // repeated .CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_TeamDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_TeamDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARealtimeGameStats_TeamDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_TeamDetails::MergeFrom(const CMsgDOTARealtimeGameStats_TeamDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_number()) {
      set_team_number(from.team_number());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
    if (from.has_team_logo()) {
      set_team_logo(from.team_logo());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_only_team()) {
      set_only_team(from.only_team());
    }
    if (from.has_cheers()) {
      set_cheers(from.cheers());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARealtimeGameStats_TeamDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_TeamDetails::CopyFrom(const CMsgDOTARealtimeGameStats_TeamDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_TeamDetails::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_TeamDetails::Swap(CMsgDOTARealtimeGameStats_TeamDetails* other) {
  if (other != this) {
    std::swap(team_number_, other->team_number_);
    std::swap(team_id_, other->team_id_);
    std::swap(team_name_, other->team_name_);
    std::swap(team_logo_, other->team_logo_);
    std::swap(score_, other->score_);
    players_.Swap(&other->players_);
    std::swap(only_team_, other->only_team_);
    std::swap(cheers_, other->cheers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_TeamDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_TeamDetails_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_TeamDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_ItemDetails::kIdFieldNumber;
const int CMsgDOTARealtimeGameStats_ItemDetails::kNameFieldNumber;
const int CMsgDOTARealtimeGameStats_ItemDetails::kTimeFieldNumber;
const int CMsgDOTARealtimeGameStats_ItemDetails::kSoldFieldNumber;
const int CMsgDOTARealtimeGameStats_ItemDetails::kStackcountFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_ItemDetails::CMsgDOTARealtimeGameStats_ItemDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.ItemDetails)
}

void CMsgDOTARealtimeGameStats_ItemDetails::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_ItemDetails::CMsgDOTARealtimeGameStats_ItemDetails(const CMsgDOTARealtimeGameStats_ItemDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.ItemDetails)
}

void CMsgDOTARealtimeGameStats_ItemDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0;
  sold_ = false;
  stackcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_ItemDetails::~CMsgDOTARealtimeGameStats_ItemDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.ItemDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_ItemDetails::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_ItemDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_ItemDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_ItemDetails_descriptor_;
}

const CMsgDOTARealtimeGameStats_ItemDetails& CMsgDOTARealtimeGameStats_ItemDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_ItemDetails::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_ItemDetails::New() const {
  return new CMsgDOTARealtimeGameStats_ItemDetails;
}

void CMsgDOTARealtimeGameStats_ItemDetails::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTARealtimeGameStats_ItemDetails*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, stackcount_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARealtimeGameStats_ItemDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.ItemDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sold;
        break;
      }

      // optional bool sold = 4;
      case 4: {
        if (tag == 32) {
         parse_sold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sold_)));
          set_has_sold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_stackcount;
        break;
      }

      // optional uint32 stackcount = 5;
      case 5: {
        if (tag == 40) {
         parse_stackcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stackcount_)));
          set_has_stackcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.ItemDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.ItemDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_ItemDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.ItemDetails)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // optional bool sold = 4;
  if (has_sold()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->sold(), output);
  }

  // optional uint32 stackcount = 5;
  if (has_stackcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->stackcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.ItemDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_ItemDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.ItemDetails)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // optional bool sold = 4;
  if (has_sold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->sold(), target);
  }

  // optional uint32 stackcount = 5;
  if (has_stackcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->stackcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.ItemDetails)
  return target;
}

int CMsgDOTARealtimeGameStats_ItemDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional bool sold = 4;
    if (has_sold()) {
      total_size += 1 + 1;
    }

    // optional uint32 stackcount = 5;
    if (has_stackcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stackcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_ItemDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_ItemDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARealtimeGameStats_ItemDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_ItemDetails::MergeFrom(const CMsgDOTARealtimeGameStats_ItemDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_sold()) {
      set_sold(from.sold());
    }
    if (from.has_stackcount()) {
      set_stackcount(from.stackcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARealtimeGameStats_ItemDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_ItemDetails::CopyFrom(const CMsgDOTARealtimeGameStats_ItemDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_ItemDetails::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_ItemDetails::Swap(CMsgDOTARealtimeGameStats_ItemDetails* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(time_, other->time_);
    std::swap(sold_, other->sold_);
    std::swap(stackcount_, other->stackcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_ItemDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_ItemDetails_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_ItemDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_AbilityDetails::kIdFieldNumber;
const int CMsgDOTARealtimeGameStats_AbilityDetails::kNameFieldNumber;
const int CMsgDOTARealtimeGameStats_AbilityDetails::kLevelFieldNumber;
const int CMsgDOTARealtimeGameStats_AbilityDetails::kCooldownFieldNumber;
const int CMsgDOTARealtimeGameStats_AbilityDetails::kCooldownMaxFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_AbilityDetails::CMsgDOTARealtimeGameStats_AbilityDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.AbilityDetails)
}

void CMsgDOTARealtimeGameStats_AbilityDetails::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_AbilityDetails::CMsgDOTARealtimeGameStats_AbilityDetails(const CMsgDOTARealtimeGameStats_AbilityDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.AbilityDetails)
}

void CMsgDOTARealtimeGameStats_AbilityDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  cooldown_ = 0;
  cooldown_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_AbilityDetails::~CMsgDOTARealtimeGameStats_AbilityDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.AbilityDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_AbilityDetails::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_AbilityDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_AbilityDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_AbilityDetails_descriptor_;
}

const CMsgDOTARealtimeGameStats_AbilityDetails& CMsgDOTARealtimeGameStats_AbilityDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_AbilityDetails* CMsgDOTARealtimeGameStats_AbilityDetails::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_AbilityDetails* CMsgDOTARealtimeGameStats_AbilityDetails::New() const {
  return new CMsgDOTARealtimeGameStats_AbilityDetails;
}

void CMsgDOTARealtimeGameStats_AbilityDetails::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTARealtimeGameStats_AbilityDetails*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, cooldown_max_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARealtimeGameStats_AbilityDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.AbilityDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_cooldown;
        break;
      }

      // optional float cooldown = 4;
      case 4: {
        if (tag == 37) {
         parse_cooldown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cooldown_)));
          set_has_cooldown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_cooldown_max;
        break;
      }

      // optional float cooldown_max = 5;
      case 5: {
        if (tag == 45) {
         parse_cooldown_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cooldown_max_)));
          set_has_cooldown_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.AbilityDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.AbilityDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_AbilityDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.AbilityDetails)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional float cooldown = 4;
  if (has_cooldown()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cooldown(), output);
  }

  // optional float cooldown_max = 5;
  if (has_cooldown_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->cooldown_max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.AbilityDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_AbilityDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.AbilityDetails)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional float cooldown = 4;
  if (has_cooldown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cooldown(), target);
  }

  // optional float cooldown_max = 5;
  if (has_cooldown_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->cooldown_max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.AbilityDetails)
  return target;
}

int CMsgDOTARealtimeGameStats_AbilityDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional float cooldown = 4;
    if (has_cooldown()) {
      total_size += 1 + 4;
    }

    // optional float cooldown_max = 5;
    if (has_cooldown_max()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_AbilityDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_AbilityDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARealtimeGameStats_AbilityDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_AbilityDetails::MergeFrom(const CMsgDOTARealtimeGameStats_AbilityDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_cooldown()) {
      set_cooldown(from.cooldown());
    }
    if (from.has_cooldown_max()) {
      set_cooldown_max(from.cooldown_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARealtimeGameStats_AbilityDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_AbilityDetails::CopyFrom(const CMsgDOTARealtimeGameStats_AbilityDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_AbilityDetails::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_AbilityDetails::Swap(CMsgDOTARealtimeGameStats_AbilityDetails* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(cooldown_, other->cooldown_);
    std::swap(cooldown_max_, other->cooldown_max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_AbilityDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_AbilityDetails_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_AbilityDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_HeroToHeroStats::kVictimidFieldNumber;
const int CMsgDOTARealtimeGameStats_HeroToHeroStats::kKillsFieldNumber;
const int CMsgDOTARealtimeGameStats_HeroToHeroStats::kAssistsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_HeroToHeroStats::CMsgDOTARealtimeGameStats_HeroToHeroStats()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.HeroToHeroStats)
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_HeroToHeroStats::CMsgDOTARealtimeGameStats_HeroToHeroStats(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.HeroToHeroStats)
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::SharedCtor() {
  _cached_size_ = 0;
  victimid_ = 0u;
  kills_ = 0u;
  assists_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_HeroToHeroStats::~CMsgDOTARealtimeGameStats_HeroToHeroStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.HeroToHeroStats)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_HeroToHeroStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_HeroToHeroStats_descriptor_;
}

const CMsgDOTARealtimeGameStats_HeroToHeroStats& CMsgDOTARealtimeGameStats_HeroToHeroStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_HeroToHeroStats* CMsgDOTARealtimeGameStats_HeroToHeroStats::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_HeroToHeroStats* CMsgDOTARealtimeGameStats_HeroToHeroStats::New() const {
  return new CMsgDOTARealtimeGameStats_HeroToHeroStats;
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTARealtimeGameStats_HeroToHeroStats*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(victimid_, assists_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARealtimeGameStats_HeroToHeroStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.HeroToHeroStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 victimid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &victimid_)));
          set_has_victimid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_kills;
        break;
      }

      // optional uint32 kills = 2;
      case 2: {
        if (tag == 16) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
          set_has_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_assists;
        break;
      }

      // optional uint32 assists = 3;
      case 3: {
        if (tag == 24) {
         parse_assists:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
          set_has_assists();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.HeroToHeroStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.HeroToHeroStats)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.HeroToHeroStats)
  // optional uint32 victimid = 1;
  if (has_victimid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->victimid(), output);
  }

  // optional uint32 kills = 2;
  if (has_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kills(), output);
  }

  // optional uint32 assists = 3;
  if (has_assists()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->assists(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.HeroToHeroStats)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_HeroToHeroStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.HeroToHeroStats)
  // optional uint32 victimid = 1;
  if (has_victimid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->victimid(), target);
  }

  // optional uint32 kills = 2;
  if (has_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kills(), target);
  }

  // optional uint32 assists = 3;
  if (has_assists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->assists(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.HeroToHeroStats)
  return target;
}

int CMsgDOTARealtimeGameStats_HeroToHeroStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 victimid = 1;
    if (has_victimid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->victimid());
    }

    // optional uint32 kills = 2;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 assists = 3;
    if (has_assists()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_HeroToHeroStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARealtimeGameStats_HeroToHeroStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::MergeFrom(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_victimid()) {
      set_victimid(from.victimid());
    }
    if (from.has_kills()) {
      set_kills(from.kills());
    }
    if (from.has_assists()) {
      set_assists(from.assists());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::CopyFrom(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_HeroToHeroStats::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::Swap(CMsgDOTARealtimeGameStats_HeroToHeroStats* other) {
  if (other != this) {
    std::swap(victimid_, other->victimid_);
    std::swap(kills_, other->kills_);
    std::swap(assists_, other->assists_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_HeroToHeroStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_HeroToHeroStats_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_HeroToHeroStats_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_AbilityList::kIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_AbilityList::CMsgDOTARealtimeGameStats_AbilityList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.AbilityList)
}

void CMsgDOTARealtimeGameStats_AbilityList::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_AbilityList::CMsgDOTARealtimeGameStats_AbilityList(const CMsgDOTARealtimeGameStats_AbilityList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.AbilityList)
}

void CMsgDOTARealtimeGameStats_AbilityList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_AbilityList::~CMsgDOTARealtimeGameStats_AbilityList() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.AbilityList)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_AbilityList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_AbilityList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_AbilityList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_AbilityList_descriptor_;
}

const CMsgDOTARealtimeGameStats_AbilityList& CMsgDOTARealtimeGameStats_AbilityList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_AbilityList* CMsgDOTARealtimeGameStats_AbilityList::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_AbilityList* CMsgDOTARealtimeGameStats_AbilityList::New() const {
  return new CMsgDOTARealtimeGameStats_AbilityList;
}

void CMsgDOTARealtimeGameStats_AbilityList::Clear() {
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARealtimeGameStats_AbilityList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.AbilityList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 id = 1;
      case 1: {
        if (tag == 8) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.AbilityList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.AbilityList)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_AbilityList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.AbilityList)
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.AbilityList)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_AbilityList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.AbilityList)
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.AbilityList)
  return target;
}

int CMsgDOTARealtimeGameStats_AbilityList::ByteSize() const {
  int total_size = 0;

  // repeated uint32 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_AbilityList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_AbilityList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARealtimeGameStats_AbilityList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_AbilityList::MergeFrom(const CMsgDOTARealtimeGameStats_AbilityList& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARealtimeGameStats_AbilityList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_AbilityList::CopyFrom(const CMsgDOTARealtimeGameStats_AbilityList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_AbilityList::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_AbilityList::Swap(CMsgDOTARealtimeGameStats_AbilityList* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_AbilityList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_AbilityList_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_AbilityList_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_PlayerDetails::kAccountidFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kPlayeridFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kNameFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kTeamFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHeroidFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHealthpointsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kMaxhealthpointsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHealthregenrateFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kManapointsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kMaxmanapointsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kManaregenrateFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kBaseStrengthFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kBaseAgilityFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kBaseIntelligenceFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kBaseArmorFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kBaseMovespeedFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kBaseDamageFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kStrengthFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kAgilityFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kIntelligenceFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kArmorFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kMovespeedFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kDamageFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHeroDamageFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kTowerDamageFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kAbilitiesFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kLevelFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kKillCountFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kDeathCountFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kAssistsCountFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kDeniesCountFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kLhCountFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHeroHealingFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kGoldPerMinFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kXpPerMinFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kNetGoldFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kGoldFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kXFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kYFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kRespawnTimeFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kUltimateCooldownFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHasBuybackFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kItemsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kStashitemsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kItemshoppinglistFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kLevelpointsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHeroToHeroStatsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHasUltimateFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHasUltimateManaFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_PlayerDetails::CMsgDOTARealtimeGameStats_PlayerDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.PlayerDetails)
}

void CMsgDOTARealtimeGameStats_PlayerDetails::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_PlayerDetails::CMsgDOTARealtimeGameStats_PlayerDetails(const CMsgDOTARealtimeGameStats_PlayerDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.PlayerDetails)
}

void CMsgDOTARealtimeGameStats_PlayerDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  accountid_ = 0u;
  playerid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_ = 0u;
  heroid_ = 0u;
  healthpoints_ = 0u;
  maxhealthpoints_ = 0u;
  healthregenrate_ = 0;
  manapoints_ = 0u;
  maxmanapoints_ = 0u;
  manaregenrate_ = 0;
  base_strength_ = 0u;
  base_agility_ = 0u;
  base_intelligence_ = 0u;
  base_armor_ = 0;
  base_movespeed_ = 0u;
  base_damage_ = 0u;
  strength_ = 0u;
  agility_ = 0u;
  intelligence_ = 0u;
  armor_ = 0;
  movespeed_ = 0u;
  damage_ = 0u;
  hero_damage_ = 0u;
  tower_damage_ = 0u;
  level_ = 0u;
  kill_count_ = 0u;
  death_count_ = 0u;
  assists_count_ = 0u;
  denies_count_ = 0u;
  lh_count_ = 0u;
  hero_healing_ = 0u;
  gold_per_min_ = 0u;
  xp_per_min_ = 0u;
  net_gold_ = 0u;
  gold_ = 0u;
  x_ = 0;
  y_ = 0;
  respawn_time_ = 0;
  ultimate_cooldown_ = 0u;
  has_buyback_ = false;
  has_ultimate_ = false;
  has_ultimate_mana_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_PlayerDetails::~CMsgDOTARealtimeGameStats_PlayerDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.PlayerDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_PlayerDetails::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_PlayerDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_PlayerDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_PlayerDetails_descriptor_;
}

const CMsgDOTARealtimeGameStats_PlayerDetails& CMsgDOTARealtimeGameStats_PlayerDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_PlayerDetails* CMsgDOTARealtimeGameStats_PlayerDetails::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_PlayerDetails* CMsgDOTARealtimeGameStats_PlayerDetails::New() const {
  return new CMsgDOTARealtimeGameStats_PlayerDetails;
}

void CMsgDOTARealtimeGameStats_PlayerDetails::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTARealtimeGameStats_PlayerDetails*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(accountid_, playerid_);
    ZR_(team_, healthregenrate_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(manapoints_, base_movespeed_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(base_damage_, hero_damage_);
  }
  if (_has_bits_[24 / 32] & 4244635648) {
    ZR_(level_, lh_count_);
    tower_damage_ = 0u;
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(hero_healing_, respawn_time_);
  }
  ZR_(ultimate_cooldown_, has_ultimate_);
  has_ultimate_mana_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  abilities_.Clear();
  items_.Clear();
  stashitems_.Clear();
  itemshoppinglist_.Clear();
  levelpoints_.Clear();
  hero_to_hero_stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARealtimeGameStats_PlayerDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.PlayerDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // optional uint32 playerid = 2;
      case 2: {
        if (tag == 16) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_team;
        break;
      }

      // optional uint32 team = 4;
      case 4: {
        if (tag == 32) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_heroid;
        break;
      }

      // optional uint32 heroid = 5;
      case 5: {
        if (tag == 40) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_healthpoints;
        break;
      }

      // optional uint32 healthpoints = 6;
      case 6: {
        if (tag == 48) {
         parse_healthpoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &healthpoints_)));
          set_has_healthpoints();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_maxhealthpoints;
        break;
      }

      // optional uint32 maxhealthpoints = 7;
      case 7: {
        if (tag == 56) {
         parse_maxhealthpoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhealthpoints_)));
          set_has_maxhealthpoints();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_healthregenrate;
        break;
      }

      // optional float healthregenrate = 8;
      case 8: {
        if (tag == 69) {
         parse_healthregenrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &healthregenrate_)));
          set_has_healthregenrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_manapoints;
        break;
      }

      // optional uint32 manapoints = 9;
      case 9: {
        if (tag == 72) {
         parse_manapoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manapoints_)));
          set_has_manapoints();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_maxmanapoints;
        break;
      }

      // optional uint32 maxmanapoints = 10;
      case 10: {
        if (tag == 80) {
         parse_maxmanapoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxmanapoints_)));
          set_has_maxmanapoints();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_manaregenrate;
        break;
      }

      // optional float manaregenrate = 11;
      case 11: {
        if (tag == 93) {
         parse_manaregenrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &manaregenrate_)));
          set_has_manaregenrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_base_strength;
        break;
      }

      // optional uint32 base_strength = 12;
      case 12: {
        if (tag == 96) {
         parse_base_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_strength_)));
          set_has_base_strength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_base_agility;
        break;
      }

      // optional uint32 base_agility = 13;
      case 13: {
        if (tag == 104) {
         parse_base_agility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_agility_)));
          set_has_base_agility();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_base_intelligence;
        break;
      }

      // optional uint32 base_intelligence = 14;
      case 14: {
        if (tag == 112) {
         parse_base_intelligence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_intelligence_)));
          set_has_base_intelligence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_base_armor;
        break;
      }

      // optional int32 base_armor = 15;
      case 15: {
        if (tag == 120) {
         parse_base_armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_armor_)));
          set_has_base_armor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_base_movespeed;
        break;
      }

      // optional uint32 base_movespeed = 16;
      case 16: {
        if (tag == 128) {
         parse_base_movespeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_movespeed_)));
          set_has_base_movespeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_base_damage;
        break;
      }

      // optional uint32 base_damage = 17;
      case 17: {
        if (tag == 136) {
         parse_base_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_damage_)));
          set_has_base_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_strength;
        break;
      }

      // optional uint32 strength = 18;
      case 18: {
        if (tag == 144) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_agility;
        break;
      }

      // optional uint32 agility = 19;
      case 19: {
        if (tag == 152) {
         parse_agility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agility_)));
          set_has_agility();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_intelligence;
        break;
      }

      // optional uint32 intelligence = 20;
      case 20: {
        if (tag == 160) {
         parse_intelligence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intelligence_)));
          set_has_intelligence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_armor;
        break;
      }

      // optional int32 armor = 21;
      case 21: {
        if (tag == 168) {
         parse_armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armor_)));
          set_has_armor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_movespeed;
        break;
      }

      // optional uint32 movespeed = 22;
      case 22: {
        if (tag == 176) {
         parse_movespeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_damage;
        break;
      }

      // optional uint32 damage = 23;
      case 23: {
        if (tag == 184) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_hero_damage;
        break;
      }

      // optional uint32 hero_damage = 24;
      case 24: {
        if (tag == 192) {
         parse_hero_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_damage_)));
          set_has_hero_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_tower_damage;
        break;
      }

      // optional uint32 tower_damage = 25;
      case 25: {
        if (tag == 200) {
         parse_tower_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_damage_)));
          set_has_tower_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_abilities;
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
      case 26: {
        if (tag == 210) {
         parse_abilities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_abilities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_abilities;
        if (input->ExpectTag(216)) goto parse_level;
        break;
      }

      // optional uint32 level = 27;
      case 27: {
        if (tag == 216) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_kill_count;
        break;
      }

      // optional uint32 kill_count = 28;
      case 28: {
        if (tag == 224) {
         parse_kill_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_count_)));
          set_has_kill_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_death_count;
        break;
      }

      // optional uint32 death_count = 29;
      case 29: {
        if (tag == 232) {
         parse_death_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &death_count_)));
          set_has_death_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_assists_count;
        break;
      }

      // optional uint32 assists_count = 30;
      case 30: {
        if (tag == 240) {
         parse_assists_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_count_)));
          set_has_assists_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_denies_count;
        break;
      }

      // optional uint32 denies_count = 31;
      case 31: {
        if (tag == 248) {
         parse_denies_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &denies_count_)));
          set_has_denies_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_lh_count;
        break;
      }

      // optional uint32 lh_count = 32;
      case 32: {
        if (tag == 256) {
         parse_lh_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lh_count_)));
          set_has_lh_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_hero_healing;
        break;
      }

      // optional uint32 hero_healing = 33;
      case 33: {
        if (tag == 264) {
         parse_hero_healing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_healing_)));
          set_has_hero_healing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_gold_per_min;
        break;
      }

      // optional uint32 gold_per_min = 34;
      case 34: {
        if (tag == 272) {
         parse_gold_per_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_per_min_)));
          set_has_gold_per_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_xp_per_min;
        break;
      }

      // optional uint32 xp_per_min = 35;
      case 35: {
        if (tag == 280) {
         parse_xp_per_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_per_min_)));
          set_has_xp_per_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_net_gold;
        break;
      }

      // optional uint32 net_gold = 36;
      case 36: {
        if (tag == 288) {
         parse_net_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_gold_)));
          set_has_net_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 37;
      case 37: {
        if (tag == 296) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(309)) goto parse_x;
        break;
      }

      // optional float x = 38;
      case 38: {
        if (tag == 309) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(317)) goto parse_y;
        break;
      }

      // optional float y = 39;
      case 39: {
        if (tag == 317) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_respawn_time;
        break;
      }

      // optional int32 respawn_time = 40;
      case 40: {
        if (tag == 320) {
         parse_respawn_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &respawn_time_)));
          set_has_respawn_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_ultimate_cooldown;
        break;
      }

      // optional uint32 ultimate_cooldown = 41;
      case 41: {
        if (tag == 328) {
         parse_ultimate_cooldown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ultimate_cooldown_)));
          set_has_ultimate_cooldown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_has_buyback;
        break;
      }

      // optional bool has_buyback = 42;
      case 42: {
        if (tag == 336) {
         parse_has_buyback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_buyback_)));
          set_has_has_buyback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_items;
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.ItemDetails items = 43;
      case 43: {
        if (tag == 346) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_items;
        if (input->ExpectTag(354)) goto parse_stashitems;
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
      case 44: {
        if (tag == 354) {
         parse_stashitems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stashitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(354)) goto parse_stashitems;
        if (input->ExpectTag(362)) goto parse_itemshoppinglist;
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
      case 45: {
        if (tag == 362) {
         parse_itemshoppinglist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemshoppinglist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(362)) goto parse_itemshoppinglist;
        if (input->ExpectTag(370)) goto parse_levelpoints;
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
      case 46: {
        if (tag == 370) {
         parse_levelpoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_levelpoints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse_levelpoints;
        if (input->ExpectTag(378)) goto parse_hero_to_hero_stats;
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
      case 47: {
        if (tag == 378) {
         parse_hero_to_hero_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero_to_hero_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse_hero_to_hero_stats;
        if (input->ExpectTag(384)) goto parse_has_ultimate;
        break;
      }

      // optional bool has_ultimate = 48;
      case 48: {
        if (tag == 384) {
         parse_has_ultimate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_ultimate_)));
          set_has_has_ultimate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_has_ultimate_mana;
        break;
      }

      // optional bool has_ultimate_mana = 49;
      case 49: {
        if (tag == 392) {
         parse_has_ultimate_mana:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_ultimate_mana_)));
          set_has_has_ultimate_mana();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.PlayerDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.PlayerDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_PlayerDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.PlayerDetails)
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional uint32 team = 4;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team(), output);
  }

  // optional uint32 heroid = 5;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->heroid(), output);
  }

  // optional uint32 healthpoints = 6;
  if (has_healthpoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->healthpoints(), output);
  }

  // optional uint32 maxhealthpoints = 7;
  if (has_maxhealthpoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->maxhealthpoints(), output);
  }

  // optional float healthregenrate = 8;
  if (has_healthregenrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->healthregenrate(), output);
  }

  // optional uint32 manapoints = 9;
  if (has_manapoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->manapoints(), output);
  }

  // optional uint32 maxmanapoints = 10;
  if (has_maxmanapoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->maxmanapoints(), output);
  }

  // optional float manaregenrate = 11;
  if (has_manaregenrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->manaregenrate(), output);
  }

  // optional uint32 base_strength = 12;
  if (has_base_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->base_strength(), output);
  }

  // optional uint32 base_agility = 13;
  if (has_base_agility()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->base_agility(), output);
  }

  // optional uint32 base_intelligence = 14;
  if (has_base_intelligence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->base_intelligence(), output);
  }

  // optional int32 base_armor = 15;
  if (has_base_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->base_armor(), output);
  }

  // optional uint32 base_movespeed = 16;
  if (has_base_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->base_movespeed(), output);
  }

  // optional uint32 base_damage = 17;
  if (has_base_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->base_damage(), output);
  }

  // optional uint32 strength = 18;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->strength(), output);
  }

  // optional uint32 agility = 19;
  if (has_agility()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->agility(), output);
  }

  // optional uint32 intelligence = 20;
  if (has_intelligence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->intelligence(), output);
  }

  // optional int32 armor = 21;
  if (has_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->armor(), output);
  }

  // optional uint32 movespeed = 22;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->movespeed(), output);
  }

  // optional uint32 damage = 23;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->damage(), output);
  }

  // optional uint32 hero_damage = 24;
  if (has_hero_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->hero_damage(), output);
  }

  // optional uint32 tower_damage = 25;
  if (has_tower_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->tower_damage(), output);
  }

  // repeated .CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
  for (int i = 0; i < this->abilities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->abilities(i), output);
  }

  // optional uint32 level = 27;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->level(), output);
  }

  // optional uint32 kill_count = 28;
  if (has_kill_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->kill_count(), output);
  }

  // optional uint32 death_count = 29;
  if (has_death_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->death_count(), output);
  }

  // optional uint32 assists_count = 30;
  if (has_assists_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->assists_count(), output);
  }

  // optional uint32 denies_count = 31;
  if (has_denies_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->denies_count(), output);
  }

  // optional uint32 lh_count = 32;
  if (has_lh_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->lh_count(), output);
  }

  // optional uint32 hero_healing = 33;
  if (has_hero_healing()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->hero_healing(), output);
  }

  // optional uint32 gold_per_min = 34;
  if (has_gold_per_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->gold_per_min(), output);
  }

  // optional uint32 xp_per_min = 35;
  if (has_xp_per_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->xp_per_min(), output);
  }

  // optional uint32 net_gold = 36;
  if (has_net_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->net_gold(), output);
  }

  // optional uint32 gold = 37;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->gold(), output);
  }

  // optional float x = 38;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->x(), output);
  }

  // optional float y = 39;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->y(), output);
  }

  // optional int32 respawn_time = 40;
  if (has_respawn_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->respawn_time(), output);
  }

  // optional uint32 ultimate_cooldown = 41;
  if (has_ultimate_cooldown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->ultimate_cooldown(), output);
  }

  // optional bool has_buyback = 42;
  if (has_has_buyback()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->has_buyback(), output);
  }

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails items = 43;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->items(i), output);
  }

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
  for (int i = 0; i < this->stashitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->stashitems(i), output);
  }

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
  for (int i = 0; i < this->itemshoppinglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->itemshoppinglist(i), output);
  }

  // repeated .CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
  for (int i = 0; i < this->levelpoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->levelpoints(i), output);
  }

  // repeated .CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
  for (int i = 0; i < this->hero_to_hero_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->hero_to_hero_stats(i), output);
  }

  // optional bool has_ultimate = 48;
  if (has_has_ultimate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(48, this->has_ultimate(), output);
  }

  // optional bool has_ultimate_mana = 49;
  if (has_has_ultimate_mana()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(49, this->has_ultimate_mana(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.PlayerDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_PlayerDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.PlayerDetails)
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 team = 4;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team(), target);
  }

  // optional uint32 heroid = 5;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->heroid(), target);
  }

  // optional uint32 healthpoints = 6;
  if (has_healthpoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->healthpoints(), target);
  }

  // optional uint32 maxhealthpoints = 7;
  if (has_maxhealthpoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->maxhealthpoints(), target);
  }

  // optional float healthregenrate = 8;
  if (has_healthregenrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->healthregenrate(), target);
  }

  // optional uint32 manapoints = 9;
  if (has_manapoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->manapoints(), target);
  }

  // optional uint32 maxmanapoints = 10;
  if (has_maxmanapoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->maxmanapoints(), target);
  }

  // optional float manaregenrate = 11;
  if (has_manaregenrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->manaregenrate(), target);
  }

  // optional uint32 base_strength = 12;
  if (has_base_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->base_strength(), target);
  }

  // optional uint32 base_agility = 13;
  if (has_base_agility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->base_agility(), target);
  }

  // optional uint32 base_intelligence = 14;
  if (has_base_intelligence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->base_intelligence(), target);
  }

  // optional int32 base_armor = 15;
  if (has_base_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->base_armor(), target);
  }

  // optional uint32 base_movespeed = 16;
  if (has_base_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->base_movespeed(), target);
  }

  // optional uint32 base_damage = 17;
  if (has_base_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->base_damage(), target);
  }

  // optional uint32 strength = 18;
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->strength(), target);
  }

  // optional uint32 agility = 19;
  if (has_agility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->agility(), target);
  }

  // optional uint32 intelligence = 20;
  if (has_intelligence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->intelligence(), target);
  }

  // optional int32 armor = 21;
  if (has_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->armor(), target);
  }

  // optional uint32 movespeed = 22;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->movespeed(), target);
  }

  // optional uint32 damage = 23;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->damage(), target);
  }

  // optional uint32 hero_damage = 24;
  if (has_hero_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->hero_damage(), target);
  }

  // optional uint32 tower_damage = 25;
  if (has_tower_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->tower_damage(), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
  for (int i = 0; i < this->abilities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->abilities(i), target);
  }

  // optional uint32 level = 27;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->level(), target);
  }

  // optional uint32 kill_count = 28;
  if (has_kill_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->kill_count(), target);
  }

  // optional uint32 death_count = 29;
  if (has_death_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->death_count(), target);
  }

  // optional uint32 assists_count = 30;
  if (has_assists_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->assists_count(), target);
  }

  // optional uint32 denies_count = 31;
  if (has_denies_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->denies_count(), target);
  }

  // optional uint32 lh_count = 32;
  if (has_lh_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->lh_count(), target);
  }

  // optional uint32 hero_healing = 33;
  if (has_hero_healing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->hero_healing(), target);
  }

  // optional uint32 gold_per_min = 34;
  if (has_gold_per_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->gold_per_min(), target);
  }

  // optional uint32 xp_per_min = 35;
  if (has_xp_per_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->xp_per_min(), target);
  }

  // optional uint32 net_gold = 36;
  if (has_net_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->net_gold(), target);
  }

  // optional uint32 gold = 37;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->gold(), target);
  }

  // optional float x = 38;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->x(), target);
  }

  // optional float y = 39;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->y(), target);
  }

  // optional int32 respawn_time = 40;
  if (has_respawn_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->respawn_time(), target);
  }

  // optional uint32 ultimate_cooldown = 41;
  if (has_ultimate_cooldown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->ultimate_cooldown(), target);
  }

  // optional bool has_buyback = 42;
  if (has_has_buyback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->has_buyback(), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails items = 43;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->items(i), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
  for (int i = 0; i < this->stashitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->stashitems(i), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
  for (int i = 0; i < this->itemshoppinglist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->itemshoppinglist(i), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
  for (int i = 0; i < this->levelpoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->levelpoints(i), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
  for (int i = 0; i < this->hero_to_hero_stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->hero_to_hero_stats(i), target);
  }

  // optional bool has_ultimate = 48;
  if (has_has_ultimate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(48, this->has_ultimate(), target);
  }

  // optional bool has_ultimate_mana = 49;
  if (has_has_ultimate_mana()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(49, this->has_ultimate_mana(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.PlayerDetails)
  return target;
}

int CMsgDOTARealtimeGameStats_PlayerDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 team = 4;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional uint32 heroid = 5;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint32 healthpoints = 6;
    if (has_healthpoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->healthpoints());
    }

    // optional uint32 maxhealthpoints = 7;
    if (has_maxhealthpoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhealthpoints());
    }

    // optional float healthregenrate = 8;
    if (has_healthregenrate()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 manapoints = 9;
    if (has_manapoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manapoints());
    }

    // optional uint32 maxmanapoints = 10;
    if (has_maxmanapoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxmanapoints());
    }

    // optional float manaregenrate = 11;
    if (has_manaregenrate()) {
      total_size += 1 + 4;
    }

    // optional uint32 base_strength = 12;
    if (has_base_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_strength());
    }

    // optional uint32 base_agility = 13;
    if (has_base_agility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_agility());
    }

    // optional uint32 base_intelligence = 14;
    if (has_base_intelligence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_intelligence());
    }

    // optional int32 base_armor = 15;
    if (has_base_armor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_armor());
    }

    // optional uint32 base_movespeed = 16;
    if (has_base_movespeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_movespeed());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 base_damage = 17;
    if (has_base_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_damage());
    }

    // optional uint32 strength = 18;
    if (has_strength()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strength());
    }

    // optional uint32 agility = 19;
    if (has_agility()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->agility());
    }

    // optional uint32 intelligence = 20;
    if (has_intelligence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intelligence());
    }

    // optional int32 armor = 21;
    if (has_armor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armor());
    }

    // optional uint32 movespeed = 22;
    if (has_movespeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->movespeed());
    }

    // optional uint32 damage = 23;
    if (has_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

    // optional uint32 hero_damage = 24;
    if (has_hero_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_damage());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 tower_damage = 25;
    if (has_tower_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_damage());
    }

    // optional uint32 level = 27;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 kill_count = 28;
    if (has_kill_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill_count());
    }

    // optional uint32 death_count = 29;
    if (has_death_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->death_count());
    }

    // optional uint32 assists_count = 30;
    if (has_assists_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists_count());
    }

    // optional uint32 denies_count = 31;
    if (has_denies_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->denies_count());
    }

    // optional uint32 lh_count = 32;
    if (has_lh_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lh_count());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 hero_healing = 33;
    if (has_hero_healing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_healing());
    }

    // optional uint32 gold_per_min = 34;
    if (has_gold_per_min()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_per_min());
    }

    // optional uint32 xp_per_min = 35;
    if (has_xp_per_min()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp_per_min());
    }

    // optional uint32 net_gold = 36;
    if (has_net_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_gold());
    }

    // optional uint32 gold = 37;
    if (has_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional float x = 38;
    if (has_x()) {
      total_size += 2 + 4;
    }

    // optional float y = 39;
    if (has_y()) {
      total_size += 2 + 4;
    }

    // optional int32 respawn_time = 40;
    if (has_respawn_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->respawn_time());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 ultimate_cooldown = 41;
    if (has_ultimate_cooldown()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ultimate_cooldown());
    }

    // optional bool has_buyback = 42;
    if (has_has_buyback()) {
      total_size += 2 + 1;
    }

    // optional bool has_ultimate = 48;
    if (has_has_ultimate()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional bool has_ultimate_mana = 49;
    if (has_has_ultimate_mana()) {
      total_size += 2 + 1;
    }

  }
  // repeated .CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
  total_size += 2 * this->abilities_size();
  for (int i = 0; i < this->abilities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->abilities(i));
  }

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails items = 43;
  total_size += 2 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
  total_size += 2 * this->stashitems_size();
  for (int i = 0; i < this->stashitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stashitems(i));
  }

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
  total_size += 2 * this->itemshoppinglist_size();
  for (int i = 0; i < this->itemshoppinglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemshoppinglist(i));
  }

  // repeated .CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
  total_size += 2 * this->levelpoints_size();
  for (int i = 0; i < this->levelpoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->levelpoints(i));
  }

  // repeated .CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
  total_size += 2 * this->hero_to_hero_stats_size();
  for (int i = 0; i < this->hero_to_hero_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero_to_hero_stats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_PlayerDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_PlayerDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARealtimeGameStats_PlayerDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_PlayerDetails::MergeFrom(const CMsgDOTARealtimeGameStats_PlayerDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  abilities_.MergeFrom(from.abilities_);
  items_.MergeFrom(from.items_);
  stashitems_.MergeFrom(from.stashitems_);
  itemshoppinglist_.MergeFrom(from.itemshoppinglist_);
  levelpoints_.MergeFrom(from.levelpoints_);
  hero_to_hero_stats_.MergeFrom(from.hero_to_hero_stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_healthpoints()) {
      set_healthpoints(from.healthpoints());
    }
    if (from.has_maxhealthpoints()) {
      set_maxhealthpoints(from.maxhealthpoints());
    }
    if (from.has_healthregenrate()) {
      set_healthregenrate(from.healthregenrate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_manapoints()) {
      set_manapoints(from.manapoints());
    }
    if (from.has_maxmanapoints()) {
      set_maxmanapoints(from.maxmanapoints());
    }
    if (from.has_manaregenrate()) {
      set_manaregenrate(from.manaregenrate());
    }
    if (from.has_base_strength()) {
      set_base_strength(from.base_strength());
    }
    if (from.has_base_agility()) {
      set_base_agility(from.base_agility());
    }
    if (from.has_base_intelligence()) {
      set_base_intelligence(from.base_intelligence());
    }
    if (from.has_base_armor()) {
      set_base_armor(from.base_armor());
    }
    if (from.has_base_movespeed()) {
      set_base_movespeed(from.base_movespeed());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_base_damage()) {
      set_base_damage(from.base_damage());
    }
    if (from.has_strength()) {
      set_strength(from.strength());
    }
    if (from.has_agility()) {
      set_agility(from.agility());
    }
    if (from.has_intelligence()) {
      set_intelligence(from.intelligence());
    }
    if (from.has_armor()) {
      set_armor(from.armor());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_hero_damage()) {
      set_hero_damage(from.hero_damage());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_tower_damage()) {
      set_tower_damage(from.tower_damage());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_kill_count()) {
      set_kill_count(from.kill_count());
    }
    if (from.has_death_count()) {
      set_death_count(from.death_count());
    }
    if (from.has_assists_count()) {
      set_assists_count(from.assists_count());
    }
    if (from.has_denies_count()) {
      set_denies_count(from.denies_count());
    }
    if (from.has_lh_count()) {
      set_lh_count(from.lh_count());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_hero_healing()) {
      set_hero_healing(from.hero_healing());
    }
    if (from.has_gold_per_min()) {
      set_gold_per_min(from.gold_per_min());
    }
    if (from.has_xp_per_min()) {
      set_xp_per_min(from.xp_per_min());
    }
    if (from.has_net_gold()) {
      set_net_gold(from.net_gold());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_respawn_time()) {
      set_respawn_time(from.respawn_time());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_ultimate_cooldown()) {
      set_ultimate_cooldown(from.ultimate_cooldown());
    }
    if (from.has_has_buyback()) {
      set_has_buyback(from.has_buyback());
    }
    if (from.has_has_ultimate()) {
      set_has_ultimate(from.has_ultimate());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_has_ultimate_mana()) {
      set_has_ultimate_mana(from.has_ultimate_mana());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARealtimeGameStats_PlayerDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_PlayerDetails::CopyFrom(const CMsgDOTARealtimeGameStats_PlayerDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_PlayerDetails::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_PlayerDetails::Swap(CMsgDOTARealtimeGameStats_PlayerDetails* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(team_, other->team_);
    std::swap(heroid_, other->heroid_);
    std::swap(healthpoints_, other->healthpoints_);
    std::swap(maxhealthpoints_, other->maxhealthpoints_);
    std::swap(healthregenrate_, other->healthregenrate_);
    std::swap(manapoints_, other->manapoints_);
    std::swap(maxmanapoints_, other->maxmanapoints_);
    std::swap(manaregenrate_, other->manaregenrate_);
    std::swap(base_strength_, other->base_strength_);
    std::swap(base_agility_, other->base_agility_);
    std::swap(base_intelligence_, other->base_intelligence_);
    std::swap(base_armor_, other->base_armor_);
    std::swap(base_movespeed_, other->base_movespeed_);
    std::swap(base_damage_, other->base_damage_);
    std::swap(strength_, other->strength_);
    std::swap(agility_, other->agility_);
    std::swap(intelligence_, other->intelligence_);
    std::swap(armor_, other->armor_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(damage_, other->damage_);
    std::swap(hero_damage_, other->hero_damage_);
    std::swap(tower_damage_, other->tower_damage_);
    abilities_.Swap(&other->abilities_);
    std::swap(level_, other->level_);
    std::swap(kill_count_, other->kill_count_);
    std::swap(death_count_, other->death_count_);
    std::swap(assists_count_, other->assists_count_);
    std::swap(denies_count_, other->denies_count_);
    std::swap(lh_count_, other->lh_count_);
    std::swap(hero_healing_, other->hero_healing_);
    std::swap(gold_per_min_, other->gold_per_min_);
    std::swap(xp_per_min_, other->xp_per_min_);
    std::swap(net_gold_, other->net_gold_);
    std::swap(gold_, other->gold_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(respawn_time_, other->respawn_time_);
    std::swap(ultimate_cooldown_, other->ultimate_cooldown_);
    std::swap(has_buyback_, other->has_buyback_);
    items_.Swap(&other->items_);
    stashitems_.Swap(&other->stashitems_);
    itemshoppinglist_.Swap(&other->itemshoppinglist_);
    levelpoints_.Swap(&other->levelpoints_);
    hero_to_hero_stats_.Swap(&other->hero_to_hero_stats_);
    std::swap(has_ultimate_, other->has_ultimate_);
    std::swap(has_ultimate_mana_, other->has_ultimate_mana_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_PlayerDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_PlayerDetails_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_PlayerDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_BuildingDetails::kTeamFieldNumber;
const int CMsgDOTARealtimeGameStats_BuildingDetails::kHeadingFieldNumber;
const int CMsgDOTARealtimeGameStats_BuildingDetails::kLaneFieldNumber;
const int CMsgDOTARealtimeGameStats_BuildingDetails::kTierFieldNumber;
const int CMsgDOTARealtimeGameStats_BuildingDetails::kTypeFieldNumber;
const int CMsgDOTARealtimeGameStats_BuildingDetails::kXFieldNumber;
const int CMsgDOTARealtimeGameStats_BuildingDetails::kYFieldNumber;
const int CMsgDOTARealtimeGameStats_BuildingDetails::kDestroyedFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_BuildingDetails::CMsgDOTARealtimeGameStats_BuildingDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.BuildingDetails)
}

void CMsgDOTARealtimeGameStats_BuildingDetails::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_BuildingDetails::CMsgDOTARealtimeGameStats_BuildingDetails(const CMsgDOTARealtimeGameStats_BuildingDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.BuildingDetails)
}

void CMsgDOTARealtimeGameStats_BuildingDetails::SharedCtor() {
  _cached_size_ = 0;
  team_ = 0u;
  heading_ = 0;
  lane_ = 0u;
  tier_ = 0u;
  type_ = 0u;
  x_ = 0;
  y_ = 0;
  destroyed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_BuildingDetails::~CMsgDOTARealtimeGameStats_BuildingDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.BuildingDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_BuildingDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_BuildingDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_BuildingDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_BuildingDetails_descriptor_;
}

const CMsgDOTARealtimeGameStats_BuildingDetails& CMsgDOTARealtimeGameStats_BuildingDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_BuildingDetails* CMsgDOTARealtimeGameStats_BuildingDetails::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_BuildingDetails* CMsgDOTARealtimeGameStats_BuildingDetails::New() const {
  return new CMsgDOTARealtimeGameStats_BuildingDetails;
}

void CMsgDOTARealtimeGameStats_BuildingDetails::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTARealtimeGameStats_BuildingDetails*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(team_, destroyed_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARealtimeGameStats_BuildingDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.BuildingDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_heading;
        break;
      }

      // optional float heading = 3;
      case 3: {
        if (tag == 29) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lane;
        break;
      }

      // optional uint32 lane = 4;
      case 4: {
        if (tag == 32) {
         parse_lane:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_)));
          set_has_lane();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tier;
        break;
      }

      // optional uint32 tier = 5;
      case 5: {
        if (tag == 40) {
         parse_tier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tier_)));
          set_has_tier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional uint32 type = 6;
      case 6: {
        if (tag == 48) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_x;
        break;
      }

      // optional float x = 7;
      case 7: {
        if (tag == 61) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_y;
        break;
      }

      // optional float y = 8;
      case 8: {
        if (tag == 69) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_destroyed;
        break;
      }

      // optional bool destroyed = 9;
      case 9: {
        if (tag == 72) {
         parse_destroyed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destroyed_)));
          set_has_destroyed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.BuildingDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.BuildingDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_BuildingDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.BuildingDetails)
  // optional uint32 team = 2;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team(), output);
  }

  // optional float heading = 3;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->heading(), output);
  }

  // optional uint32 lane = 4;
  if (has_lane()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lane(), output);
  }

  // optional uint32 tier = 5;
  if (has_tier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tier(), output);
  }

  // optional uint32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->type(), output);
  }

  // optional float x = 7;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->x(), output);
  }

  // optional float y = 8;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->y(), output);
  }

  // optional bool destroyed = 9;
  if (has_destroyed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->destroyed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.BuildingDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_BuildingDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.BuildingDetails)
  // optional uint32 team = 2;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team(), target);
  }

  // optional float heading = 3;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->heading(), target);
  }

  // optional uint32 lane = 4;
  if (has_lane()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lane(), target);
  }

  // optional uint32 tier = 5;
  if (has_tier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tier(), target);
  }

  // optional uint32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->type(), target);
  }

  // optional float x = 7;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->x(), target);
  }

  // optional float y = 8;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->y(), target);
  }

  // optional bool destroyed = 9;
  if (has_destroyed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->destroyed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.BuildingDetails)
  return target;
}

int CMsgDOTARealtimeGameStats_BuildingDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional float heading = 3;
    if (has_heading()) {
      total_size += 1 + 4;
    }

    // optional uint32 lane = 4;
    if (has_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lane());
    }

    // optional uint32 tier = 5;
    if (has_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tier());
    }

    // optional uint32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional float x = 7;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 8;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional bool destroyed = 9;
    if (has_destroyed()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_BuildingDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_BuildingDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARealtimeGameStats_BuildingDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_BuildingDetails::MergeFrom(const CMsgDOTARealtimeGameStats_BuildingDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_lane()) {
      set_lane(from.lane());
    }
    if (from.has_tier()) {
      set_tier(from.tier());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_destroyed()) {
      set_destroyed(from.destroyed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARealtimeGameStats_BuildingDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_BuildingDetails::CopyFrom(const CMsgDOTARealtimeGameStats_BuildingDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_BuildingDetails::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_BuildingDetails::Swap(CMsgDOTARealtimeGameStats_BuildingDetails* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(heading_, other->heading_);
    std::swap(lane_, other->lane_);
    std::swap(tier_, other->tier_);
    std::swap(type_, other->type_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(destroyed_, other->destroyed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_BuildingDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_BuildingDetails_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_BuildingDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_KillDetails::kPlayerIdFieldNumber;
const int CMsgDOTARealtimeGameStats_KillDetails::kDeathTimeFieldNumber;
const int CMsgDOTARealtimeGameStats_KillDetails::kKillerPlayerIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_KillDetails::CMsgDOTARealtimeGameStats_KillDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.KillDetails)
}

void CMsgDOTARealtimeGameStats_KillDetails::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_KillDetails::CMsgDOTARealtimeGameStats_KillDetails(const CMsgDOTARealtimeGameStats_KillDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.KillDetails)
}

void CMsgDOTARealtimeGameStats_KillDetails::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  death_time_ = 0;
  killer_player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_KillDetails::~CMsgDOTARealtimeGameStats_KillDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.KillDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_KillDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_KillDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_KillDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_KillDetails_descriptor_;
}

const CMsgDOTARealtimeGameStats_KillDetails& CMsgDOTARealtimeGameStats_KillDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_KillDetails* CMsgDOTARealtimeGameStats_KillDetails::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_KillDetails* CMsgDOTARealtimeGameStats_KillDetails::New() const {
  return new CMsgDOTARealtimeGameStats_KillDetails;
}

void CMsgDOTARealtimeGameStats_KillDetails::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTARealtimeGameStats_KillDetails*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(player_id_, killer_player_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARealtimeGameStats_KillDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.KillDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_death_time;
        break;
      }

      // optional int32 death_time = 2;
      case 2: {
        if (tag == 16) {
         parse_death_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &death_time_)));
          set_has_death_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_killer_player_id;
        break;
      }

      // optional uint32 killer_player_id = 3;
      case 3: {
        if (tag == 24) {
         parse_killer_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killer_player_id_)));
          set_has_killer_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.KillDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.KillDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_KillDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.KillDetails)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional int32 death_time = 2;
  if (has_death_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->death_time(), output);
  }

  // optional uint32 killer_player_id = 3;
  if (has_killer_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->killer_player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.KillDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_KillDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.KillDetails)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional int32 death_time = 2;
  if (has_death_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->death_time(), target);
  }

  // optional uint32 killer_player_id = 3;
  if (has_killer_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->killer_player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.KillDetails)
  return target;
}

int CMsgDOTARealtimeGameStats_KillDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional int32 death_time = 2;
    if (has_death_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->death_time());
    }

    // optional uint32 killer_player_id = 3;
    if (has_killer_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killer_player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_KillDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_KillDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARealtimeGameStats_KillDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_KillDetails::MergeFrom(const CMsgDOTARealtimeGameStats_KillDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_death_time()) {
      set_death_time(from.death_time());
    }
    if (from.has_killer_player_id()) {
      set_killer_player_id(from.killer_player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARealtimeGameStats_KillDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_KillDetails::CopyFrom(const CMsgDOTARealtimeGameStats_KillDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_KillDetails::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_KillDetails::Swap(CMsgDOTARealtimeGameStats_KillDetails* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(death_time_, other->death_time_);
    std::swap(killer_player_id_, other->killer_player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_KillDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_KillDetails_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_KillDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_BroadcasterDetails::kPlayerIdFieldNumber;
const int CMsgDOTARealtimeGameStats_BroadcasterDetails::kSelectedHeroFieldNumber;
const int CMsgDOTARealtimeGameStats_BroadcasterDetails::kSelectedGraphFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_BroadcasterDetails::CMsgDOTARealtimeGameStats_BroadcasterDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.BroadcasterDetails)
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_BroadcasterDetails::CMsgDOTARealtimeGameStats_BroadcasterDetails(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.BroadcasterDetails)
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  selected_hero_ = 0u;
  selected_graph_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_BroadcasterDetails::~CMsgDOTARealtimeGameStats_BroadcasterDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.BroadcasterDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_BroadcasterDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_BroadcasterDetails_descriptor_;
}

const CMsgDOTARealtimeGameStats_BroadcasterDetails& CMsgDOTARealtimeGameStats_BroadcasterDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_BroadcasterDetails* CMsgDOTARealtimeGameStats_BroadcasterDetails::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_BroadcasterDetails* CMsgDOTARealtimeGameStats_BroadcasterDetails::New() const {
  return new CMsgDOTARealtimeGameStats_BroadcasterDetails;
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTARealtimeGameStats_BroadcasterDetails*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(player_id_, selected_graph_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARealtimeGameStats_BroadcasterDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.BroadcasterDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_selected_hero;
        break;
      }

      // optional uint32 selected_hero = 2;
      case 2: {
        if (tag == 16) {
         parse_selected_hero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selected_hero_)));
          set_has_selected_hero();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_selected_graph;
        break;
      }

      // optional uint32 selected_graph = 3;
      case 3: {
        if (tag == 24) {
         parse_selected_graph:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selected_graph_)));
          set_has_selected_graph();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.BroadcasterDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.BroadcasterDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.BroadcasterDetails)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional uint32 selected_hero = 2;
  if (has_selected_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->selected_hero(), output);
  }

  // optional uint32 selected_graph = 3;
  if (has_selected_graph()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->selected_graph(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.BroadcasterDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_BroadcasterDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.BroadcasterDetails)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional uint32 selected_hero = 2;
  if (has_selected_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->selected_hero(), target);
  }

  // optional uint32 selected_graph = 3;
  if (has_selected_graph()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->selected_graph(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.BroadcasterDetails)
  return target;
}

int CMsgDOTARealtimeGameStats_BroadcasterDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional uint32 selected_hero = 2;
    if (has_selected_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selected_hero());
    }

    // optional uint32 selected_graph = 3;
    if (has_selected_graph()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selected_graph());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_BroadcasterDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARealtimeGameStats_BroadcasterDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::MergeFrom(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_selected_hero()) {
      set_selected_hero(from.selected_hero());
    }
    if (from.has_selected_graph()) {
      set_selected_graph(from.selected_graph());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::CopyFrom(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_BroadcasterDetails::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::Swap(CMsgDOTARealtimeGameStats_BroadcasterDetails* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(selected_hero_, other->selected_hero_);
    std::swap(selected_graph_, other->selected_graph_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_BroadcasterDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_BroadcasterDetails_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_BroadcasterDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_PickBanDetails::kHeroFieldNumber;
const int CMsgDOTARealtimeGameStats_PickBanDetails::kTeamFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_PickBanDetails::CMsgDOTARealtimeGameStats_PickBanDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.PickBanDetails)
}

void CMsgDOTARealtimeGameStats_PickBanDetails::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_PickBanDetails::CMsgDOTARealtimeGameStats_PickBanDetails(const CMsgDOTARealtimeGameStats_PickBanDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.PickBanDetails)
}

void CMsgDOTARealtimeGameStats_PickBanDetails::SharedCtor() {
  _cached_size_ = 0;
  hero_ = 0u;
  team_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_PickBanDetails::~CMsgDOTARealtimeGameStats_PickBanDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.PickBanDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_PickBanDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_PickBanDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_PickBanDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_PickBanDetails_descriptor_;
}

const CMsgDOTARealtimeGameStats_PickBanDetails& CMsgDOTARealtimeGameStats_PickBanDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_PickBanDetails::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_PickBanDetails::New() const {
  return new CMsgDOTARealtimeGameStats_PickBanDetails;
}

void CMsgDOTARealtimeGameStats_PickBanDetails::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTARealtimeGameStats_PickBanDetails*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hero_, team_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARealtimeGameStats_PickBanDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.PickBanDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_)));
          set_has_hero();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team;
        break;
      }

      // optional uint32 team = 2;
      case 2: {
        if (tag == 16) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.PickBanDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.PickBanDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_PickBanDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.PickBanDetails)
  // optional uint32 hero = 1;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero(), output);
  }

  // optional uint32 team = 2;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.PickBanDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_PickBanDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.PickBanDetails)
  // optional uint32 hero = 1;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero(), target);
  }

  // optional uint32 team = 2;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.PickBanDetails)
  return target;
}

int CMsgDOTARealtimeGameStats_PickBanDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 hero = 1;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero());
    }

    // optional uint32 team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_PickBanDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_PickBanDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARealtimeGameStats_PickBanDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_PickBanDetails::MergeFrom(const CMsgDOTARealtimeGameStats_PickBanDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero()) {
      set_hero(from.hero());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARealtimeGameStats_PickBanDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_PickBanDetails::CopyFrom(const CMsgDOTARealtimeGameStats_PickBanDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_PickBanDetails::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_PickBanDetails::Swap(CMsgDOTARealtimeGameStats_PickBanDetails* other) {
  if (other != this) {
    std::swap(hero_, other->hero_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_PickBanDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_PickBanDetails_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_PickBanDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_MatchDetails::kServerSteamIdFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kMatchidFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kTimestampFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kTimeOfDayFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kIsNightstalkerNightFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kGameTimeFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kTeamidRadiantFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kTeamidDireFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kPicksFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kBansFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kKillsFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kBroadcastersFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kGameModeFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kLeagueIdFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kSingleTeamFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kCheersPeakFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_MatchDetails::CMsgDOTARealtimeGameStats_MatchDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.MatchDetails)
}

void CMsgDOTARealtimeGameStats_MatchDetails::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_MatchDetails::CMsgDOTARealtimeGameStats_MatchDetails(const CMsgDOTARealtimeGameStats_MatchDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.MatchDetails)
}

void CMsgDOTARealtimeGameStats_MatchDetails::SharedCtor() {
  _cached_size_ = 0;
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  matchid_ = GOOGLE_ULONGLONG(0);
  timestamp_ = 0u;
  time_of_day_ = 0;
  is_nightstalker_night_ = false;
  game_time_ = 0;
  teamid_radiant_ = 0u;
  teamid_dire_ = 0u;
  game_mode_ = 0u;
  league_id_ = 0u;
  single_team_ = false;
  cheers_peak_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_MatchDetails::~CMsgDOTARealtimeGameStats_MatchDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.MatchDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_MatchDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_MatchDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_MatchDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_MatchDetails_descriptor_;
}

const CMsgDOTARealtimeGameStats_MatchDetails& CMsgDOTARealtimeGameStats_MatchDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_MatchDetails* CMsgDOTARealtimeGameStats_MatchDetails::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_MatchDetails* CMsgDOTARealtimeGameStats_MatchDetails::New() const {
  return new CMsgDOTARealtimeGameStats_MatchDetails;
}

void CMsgDOTARealtimeGameStats_MatchDetails::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTARealtimeGameStats_MatchDetails*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(server_steam_id_, teamid_radiant_);
    ZR_(teamid_dire_, is_nightstalker_night_);
  }
  if (_has_bits_[8 / 32] & 61440) {
    ZR_(game_mode_, cheers_peak_);
    single_team_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  picks_.Clear();
  bans_.Clear();
  kills_.Clear();
  broadcasters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARealtimeGameStats_MatchDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.MatchDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 server_steam_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steam_id_)));
          set_has_server_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_matchid;
        break;
      }

      // optional uint64 matchid = 2;
      case 2: {
        if (tag == 16) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_time_of_day;
        break;
      }

      // optional float time_of_day = 4;
      case 4: {
        if (tag == 37) {
         parse_time_of_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_of_day_)));
          set_has_time_of_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_nightstalker_night;
        break;
      }

      // optional bool is_nightstalker_night = 5;
      case 5: {
        if (tag == 40) {
         parse_is_nightstalker_night:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_nightstalker_night_)));
          set_has_is_nightstalker_night();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_game_time;
        break;
      }

      // optional int32 game_time = 6;
      case 6: {
        if (tag == 48) {
         parse_game_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_time_)));
          set_has_game_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_teamid_radiant;
        break;
      }

      // optional uint32 teamid_radiant = 8;
      case 8: {
        if (tag == 64) {
         parse_teamid_radiant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_radiant_)));
          set_has_teamid_radiant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_teamid_dire;
        break;
      }

      // optional uint32 teamid_dire = 9;
      case 9: {
        if (tag == 72) {
         parse_teamid_dire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_dire_)));
          set_has_teamid_dire();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_picks;
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
      case 10: {
        if (tag == 82) {
         parse_picks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_picks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_picks;
        if (input->ExpectTag(90)) goto parse_bans;
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
      case 11: {
        if (tag == 90) {
         parse_bans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bans()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_bans;
        if (input->ExpectTag(98)) goto parse_kills;
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.KillDetails kills = 12;
      case 12: {
        if (tag == 98) {
         parse_kills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kills()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_kills;
        if (input->ExpectTag(106)) goto parse_broadcasters;
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
      case 13: {
        if (tag == 106) {
         parse_broadcasters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_broadcasters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_broadcasters;
        if (input->ExpectTag(112)) goto parse_game_mode;
        break;
      }

      // optional uint32 game_mode = 14;
      case 14: {
        if (tag == 112) {
         parse_game_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
          set_has_game_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_league_id;
        break;
      }

      // optional uint32 league_id = 15;
      case 15: {
        if (tag == 120) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_single_team;
        break;
      }

      // optional bool single_team = 16;
      case 16: {
        if (tag == 128) {
         parse_single_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &single_team_)));
          set_has_single_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_cheers_peak;
        break;
      }

      // optional uint32 cheers_peak = 17;
      case 17: {
        if (tag == 136) {
         parse_cheers_peak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cheers_peak_)));
          set_has_cheers_peak();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.MatchDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.MatchDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_MatchDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.MatchDetails)
  // optional fixed64 server_steam_id = 1;
  if (has_server_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->server_steam_id(), output);
  }

  // optional uint64 matchid = 2;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->matchid(), output);
  }

  // optional uint32 timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timestamp(), output);
  }

  // optional float time_of_day = 4;
  if (has_time_of_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->time_of_day(), output);
  }

  // optional bool is_nightstalker_night = 5;
  if (has_is_nightstalker_night()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_nightstalker_night(), output);
  }

  // optional int32 game_time = 6;
  if (has_game_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->game_time(), output);
  }

  // optional uint32 teamid_radiant = 8;
  if (has_teamid_radiant()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->teamid_radiant(), output);
  }

  // optional uint32 teamid_dire = 9;
  if (has_teamid_dire()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->teamid_dire(), output);
  }

  // repeated .CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
  for (int i = 0; i < this->picks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->picks(i), output);
  }

  // repeated .CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
  for (int i = 0; i < this->bans_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->bans(i), output);
  }

  // repeated .CMsgDOTARealtimeGameStats.KillDetails kills = 12;
  for (int i = 0; i < this->kills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->kills(i), output);
  }

  // repeated .CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
  for (int i = 0; i < this->broadcasters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->broadcasters(i), output);
  }

  // optional uint32 game_mode = 14;
  if (has_game_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->game_mode(), output);
  }

  // optional uint32 league_id = 15;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->league_id(), output);
  }

  // optional bool single_team = 16;
  if (has_single_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->single_team(), output);
  }

  // optional uint32 cheers_peak = 17;
  if (has_cheers_peak()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->cheers_peak(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.MatchDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_MatchDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.MatchDetails)
  // optional fixed64 server_steam_id = 1;
  if (has_server_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->server_steam_id(), target);
  }

  // optional uint64 matchid = 2;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->matchid(), target);
  }

  // optional uint32 timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timestamp(), target);
  }

  // optional float time_of_day = 4;
  if (has_time_of_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->time_of_day(), target);
  }

  // optional bool is_nightstalker_night = 5;
  if (has_is_nightstalker_night()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_nightstalker_night(), target);
  }

  // optional int32 game_time = 6;
  if (has_game_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->game_time(), target);
  }

  // optional uint32 teamid_radiant = 8;
  if (has_teamid_radiant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->teamid_radiant(), target);
  }

  // optional uint32 teamid_dire = 9;
  if (has_teamid_dire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->teamid_dire(), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
  for (int i = 0; i < this->picks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->picks(i), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
  for (int i = 0; i < this->bans_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->bans(i), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.KillDetails kills = 12;
  for (int i = 0; i < this->kills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->kills(i), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
  for (int i = 0; i < this->broadcasters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->broadcasters(i), target);
  }

  // optional uint32 game_mode = 14;
  if (has_game_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->game_mode(), target);
  }

  // optional uint32 league_id = 15;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->league_id(), target);
  }

  // optional bool single_team = 16;
  if (has_single_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->single_team(), target);
  }

  // optional uint32 cheers_peak = 17;
  if (has_cheers_peak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->cheers_peak(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.MatchDetails)
  return target;
}

int CMsgDOTARealtimeGameStats_MatchDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 server_steam_id = 1;
    if (has_server_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint64 matchid = 2;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->matchid());
    }

    // optional uint32 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional float time_of_day = 4;
    if (has_time_of_day()) {
      total_size += 1 + 4;
    }

    // optional bool is_nightstalker_night = 5;
    if (has_is_nightstalker_night()) {
      total_size += 1 + 1;
    }

    // optional int32 game_time = 6;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_time());
    }

    // optional uint32 teamid_radiant = 8;
    if (has_teamid_radiant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid_radiant());
    }

    // optional uint32 teamid_dire = 9;
    if (has_teamid_dire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid_dire());
    }

  }
  if (_has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    // optional uint32 game_mode = 14;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

    // optional uint32 league_id = 15;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional bool single_team = 16;
    if (has_single_team()) {
      total_size += 2 + 1;
    }

    // optional uint32 cheers_peak = 17;
    if (has_cheers_peak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cheers_peak());
    }

  }
  // repeated .CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
  total_size += 1 * this->picks_size();
  for (int i = 0; i < this->picks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->picks(i));
  }

  // repeated .CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
  total_size += 1 * this->bans_size();
  for (int i = 0; i < this->bans_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bans(i));
  }

  // repeated .CMsgDOTARealtimeGameStats.KillDetails kills = 12;
  total_size += 1 * this->kills_size();
  for (int i = 0; i < this->kills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kills(i));
  }

  // repeated .CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
  total_size += 1 * this->broadcasters_size();
  for (int i = 0; i < this->broadcasters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->broadcasters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_MatchDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_MatchDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARealtimeGameStats_MatchDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_MatchDetails::MergeFrom(const CMsgDOTARealtimeGameStats_MatchDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  picks_.MergeFrom(from.picks_);
  bans_.MergeFrom(from.bans_);
  kills_.MergeFrom(from.kills_);
  broadcasters_.MergeFrom(from.broadcasters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_steam_id()) {
      set_server_steam_id(from.server_steam_id());
    }
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_time_of_day()) {
      set_time_of_day(from.time_of_day());
    }
    if (from.has_is_nightstalker_night()) {
      set_is_nightstalker_night(from.is_nightstalker_night());
    }
    if (from.has_game_time()) {
      set_game_time(from.game_time());
    }
    if (from.has_teamid_radiant()) {
      set_teamid_radiant(from.teamid_radiant());
    }
    if (from.has_teamid_dire()) {
      set_teamid_dire(from.teamid_dire());
    }
  }
  if (from._has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (from.has_game_mode()) {
      set_game_mode(from.game_mode());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_single_team()) {
      set_single_team(from.single_team());
    }
    if (from.has_cheers_peak()) {
      set_cheers_peak(from.cheers_peak());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARealtimeGameStats_MatchDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_MatchDetails::CopyFrom(const CMsgDOTARealtimeGameStats_MatchDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_MatchDetails::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_MatchDetails::Swap(CMsgDOTARealtimeGameStats_MatchDetails* other) {
  if (other != this) {
    std::swap(server_steam_id_, other->server_steam_id_);
    std::swap(matchid_, other->matchid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(time_of_day_, other->time_of_day_);
    std::swap(is_nightstalker_night_, other->is_nightstalker_night_);
    std::swap(game_time_, other->game_time_);
    std::swap(teamid_radiant_, other->teamid_radiant_);
    std::swap(teamid_dire_, other->teamid_dire_);
    picks_.Swap(&other->picks_);
    bans_.Swap(&other->bans_);
    kills_.Swap(&other->kills_);
    broadcasters_.Swap(&other->broadcasters_);
    std::swap(game_mode_, other->game_mode_);
    std::swap(league_id_, other->league_id_);
    std::swap(single_team_, other->single_team_);
    std::swap(cheers_peak_, other->cheers_peak_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_MatchDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_MatchDetails_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_MatchDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor_;
}
bool CMsgDOTARealtimeGameStats_GraphData_eStat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::CreepGoldEarned;
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::KillGoldEarned;
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::DeathAndBuybackGoldLost;
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::XPEarned;
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::eStat_MIN;
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::eStat_MAX;
const int CMsgDOTARealtimeGameStats_GraphData::eStat_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor_;
}
bool CMsgDOTARealtimeGameStats_GraphData_eLocation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::BotLane;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::MidLane;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::TopLane;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::Jungle;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::Ancients;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::Other;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::eLocation_MIN;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::eLocation_MAX;
const int CMsgDOTARealtimeGameStats_GraphData::eLocation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_GraphData_LocationStats::kStatsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_GraphData_LocationStats::CMsgDOTARealtimeGameStats_GraphData_LocationStats()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_GraphData_LocationStats::CMsgDOTARealtimeGameStats_GraphData_LocationStats(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_GraphData_LocationStats::~CMsgDOTARealtimeGameStats_GraphData_LocationStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_GraphData_LocationStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_GraphData_LocationStats_descriptor_;
}

const CMsgDOTARealtimeGameStats_GraphData_LocationStats& CMsgDOTARealtimeGameStats_GraphData_LocationStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_GraphData_LocationStats* CMsgDOTARealtimeGameStats_GraphData_LocationStats::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_GraphData_LocationStats* CMsgDOTARealtimeGameStats_GraphData_LocationStats::New() const {
  return new CMsgDOTARealtimeGameStats_GraphData_LocationStats;
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::Clear() {
  stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARealtimeGameStats_GraphData_LocationStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 stats = 1;
      case 1: {
        if (tag == 8) {
         parse_stats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_stats())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stats())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_stats;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  // repeated int32 stats = 1;
  for (int i = 0; i < this->stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->stats(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_GraphData_LocationStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  // repeated int32 stats = 1;
  for (int i = 0; i < this->stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->stats(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  return target;
}

int CMsgDOTARealtimeGameStats_GraphData_LocationStats::ByteSize() const {
  int total_size = 0;

  // repeated int32 stats = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->stats_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stats(i));
    }
    total_size += 1 * this->stats_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_GraphData_LocationStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARealtimeGameStats_GraphData_LocationStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::MergeFrom(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_.MergeFrom(from.stats_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::CopyFrom(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_GraphData_LocationStats::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::Swap(CMsgDOTARealtimeGameStats_GraphData_LocationStats* other) {
  if (other != this) {
    stats_.Swap(&other->stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_GraphData_LocationStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_GraphData_LocationStats_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_GraphData_LocationStats_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::kLocStatsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::~CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_descriptor_;
}

const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::New() const {
  return new CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats;
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::Clear() {
  loc_stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
      case 1: {
        if (tag == 10) {
         parse_loc_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_loc_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loc_stats;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  // repeated .CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
  for (int i = 0; i < this->loc_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->loc_stats(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  // repeated .CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
  for (int i = 0; i < this->loc_stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->loc_stats(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  return target;
}

int CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
  total_size += 1 * this->loc_stats_size();
  for (int i = 0; i < this->loc_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->loc_stats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::MergeFrom(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  loc_stats_.MergeFrom(from.loc_stats_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::CopyFrom(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::Swap(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* other) {
  if (other != this) {
    loc_stats_.Swap(&other->loc_stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats_GraphData::kGraphGoldFieldNumber;
const int CMsgDOTARealtimeGameStats_GraphData::kGraphXpFieldNumber;
const int CMsgDOTARealtimeGameStats_GraphData::kGraphKillFieldNumber;
const int CMsgDOTARealtimeGameStats_GraphData::kGraphTowerFieldNumber;
const int CMsgDOTARealtimeGameStats_GraphData::kGraphRaxFieldNumber;
const int CMsgDOTARealtimeGameStats_GraphData::kTeamLocStatsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats_GraphData::CMsgDOTARealtimeGameStats_GraphData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats.GraphData)
}

void CMsgDOTARealtimeGameStats_GraphData::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStats_GraphData::CMsgDOTARealtimeGameStats_GraphData(const CMsgDOTARealtimeGameStats_GraphData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.GraphData)
}

void CMsgDOTARealtimeGameStats_GraphData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats_GraphData::~CMsgDOTARealtimeGameStats_GraphData() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.GraphData)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_GraphData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStats_GraphData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_GraphData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_GraphData_descriptor_;
}

const CMsgDOTARealtimeGameStats_GraphData& CMsgDOTARealtimeGameStats_GraphData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats_GraphData* CMsgDOTARealtimeGameStats_GraphData::default_instance_ = NULL;

CMsgDOTARealtimeGameStats_GraphData* CMsgDOTARealtimeGameStats_GraphData::New() const {
  return new CMsgDOTARealtimeGameStats_GraphData;
}

void CMsgDOTARealtimeGameStats_GraphData::Clear() {
  graph_gold_.Clear();
  graph_xp_.Clear();
  graph_kill_.Clear();
  graph_tower_.Clear();
  graph_rax_.Clear();
  team_loc_stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARealtimeGameStats_GraphData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats.GraphData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 graph_gold = 1;
      case 1: {
        if (tag == 8) {
         parse_graph_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_graph_gold())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_graph_gold())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_graph_gold;
        if (input->ExpectTag(16)) goto parse_graph_xp;
        break;
      }

      // repeated int32 graph_xp = 2;
      case 2: {
        if (tag == 16) {
         parse_graph_xp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_graph_xp())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_graph_xp())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_graph_xp;
        if (input->ExpectTag(24)) goto parse_graph_kill;
        break;
      }

      // repeated int32 graph_kill = 3;
      case 3: {
        if (tag == 24) {
         parse_graph_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_graph_kill())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_graph_kill())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_graph_kill;
        if (input->ExpectTag(32)) goto parse_graph_tower;
        break;
      }

      // repeated int32 graph_tower = 4;
      case 4: {
        if (tag == 32) {
         parse_graph_tower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_graph_tower())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_graph_tower())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_graph_tower;
        if (input->ExpectTag(40)) goto parse_graph_rax;
        break;
      }

      // repeated int32 graph_rax = 5;
      case 5: {
        if (tag == 40) {
         parse_graph_rax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_graph_rax())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_graph_rax())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_graph_rax;
        if (input->ExpectTag(50)) goto parse_team_loc_stats;
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
      case 6: {
        if (tag == 50) {
         parse_team_loc_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_team_loc_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_team_loc_stats;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats.GraphData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats.GraphData)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_GraphData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats.GraphData)
  // repeated int32 graph_gold = 1;
  for (int i = 0; i < this->graph_gold_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->graph_gold(i), output);
  }

  // repeated int32 graph_xp = 2;
  for (int i = 0; i < this->graph_xp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->graph_xp(i), output);
  }

  // repeated int32 graph_kill = 3;
  for (int i = 0; i < this->graph_kill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->graph_kill(i), output);
  }

  // repeated int32 graph_tower = 4;
  for (int i = 0; i < this->graph_tower_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->graph_tower(i), output);
  }

  // repeated int32 graph_rax = 5;
  for (int i = 0; i < this->graph_rax_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->graph_rax(i), output);
  }

  // repeated .CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
  for (int i = 0; i < this->team_loc_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->team_loc_stats(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats.GraphData)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_GraphData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.GraphData)
  // repeated int32 graph_gold = 1;
  for (int i = 0; i < this->graph_gold_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->graph_gold(i), target);
  }

  // repeated int32 graph_xp = 2;
  for (int i = 0; i < this->graph_xp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->graph_xp(i), target);
  }

  // repeated int32 graph_kill = 3;
  for (int i = 0; i < this->graph_kill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->graph_kill(i), target);
  }

  // repeated int32 graph_tower = 4;
  for (int i = 0; i < this->graph_tower_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->graph_tower(i), target);
  }

  // repeated int32 graph_rax = 5;
  for (int i = 0; i < this->graph_rax_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->graph_rax(i), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
  for (int i = 0; i < this->team_loc_stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->team_loc_stats(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.GraphData)
  return target;
}

int CMsgDOTARealtimeGameStats_GraphData::ByteSize() const {
  int total_size = 0;

  // repeated int32 graph_gold = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->graph_gold_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->graph_gold(i));
    }
    total_size += 1 * this->graph_gold_size() + data_size;
  }

  // repeated int32 graph_xp = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->graph_xp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->graph_xp(i));
    }
    total_size += 1 * this->graph_xp_size() + data_size;
  }

  // repeated int32 graph_kill = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->graph_kill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->graph_kill(i));
    }
    total_size += 1 * this->graph_kill_size() + data_size;
  }

  // repeated int32 graph_tower = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->graph_tower_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->graph_tower(i));
    }
    total_size += 1 * this->graph_tower_size() + data_size;
  }

  // repeated int32 graph_rax = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->graph_rax_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->graph_rax(i));
    }
    total_size += 1 * this->graph_rax_size() + data_size;
  }

  // repeated .CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
  total_size += 1 * this->team_loc_stats_size();
  for (int i = 0; i < this->team_loc_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->team_loc_stats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_GraphData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_GraphData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARealtimeGameStats_GraphData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_GraphData::MergeFrom(const CMsgDOTARealtimeGameStats_GraphData& from) {
  GOOGLE_CHECK_NE(&from, this);
  graph_gold_.MergeFrom(from.graph_gold_);
  graph_xp_.MergeFrom(from.graph_xp_);
  graph_kill_.MergeFrom(from.graph_kill_);
  graph_tower_.MergeFrom(from.graph_tower_);
  graph_rax_.MergeFrom(from.graph_rax_);
  team_loc_stats_.MergeFrom(from.team_loc_stats_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARealtimeGameStats_GraphData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_GraphData::CopyFrom(const CMsgDOTARealtimeGameStats_GraphData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_GraphData::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats_GraphData::Swap(CMsgDOTARealtimeGameStats_GraphData* other) {
  if (other != this) {
    graph_gold_.Swap(&other->graph_gold_);
    graph_xp_.Swap(&other->graph_xp_);
    graph_kill_.Swap(&other->graph_kill_);
    graph_tower_.Swap(&other->graph_tower_);
    graph_rax_.Swap(&other->graph_rax_);
    team_loc_stats_.Swap(&other->team_loc_stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_GraphData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_GraphData_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_GraphData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStats::kMatchFieldNumber;
const int CMsgDOTARealtimeGameStats::kTeamsFieldNumber;
const int CMsgDOTARealtimeGameStats::kBuildingsFieldNumber;
const int CMsgDOTARealtimeGameStats::kGraphDataFieldNumber;
const int CMsgDOTARealtimeGameStats::kDeltaFrameFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStats::CMsgDOTARealtimeGameStats()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStats)
}

void CMsgDOTARealtimeGameStats::InitAsDefaultInstance() {
  match_ = const_cast< ::CMsgDOTARealtimeGameStats_MatchDetails*>(&::CMsgDOTARealtimeGameStats_MatchDetails::default_instance());
  graph_data_ = const_cast< ::CMsgDOTARealtimeGameStats_GraphData*>(&::CMsgDOTARealtimeGameStats_GraphData::default_instance());
}

CMsgDOTARealtimeGameStats::CMsgDOTARealtimeGameStats(const CMsgDOTARealtimeGameStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats)
}

void CMsgDOTARealtimeGameStats::SharedCtor() {
  _cached_size_ = 0;
  match_ = NULL;
  graph_data_ = NULL;
  delta_frame_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStats::~CMsgDOTARealtimeGameStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats::SharedDtor() {
  if (this != default_instance_) {
    delete match_;
    delete graph_data_;
  }
}

void CMsgDOTARealtimeGameStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStats_descriptor_;
}

const CMsgDOTARealtimeGameStats& CMsgDOTARealtimeGameStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStats* CMsgDOTARealtimeGameStats::default_instance_ = NULL;

CMsgDOTARealtimeGameStats* CMsgDOTARealtimeGameStats::New() const {
  return new CMsgDOTARealtimeGameStats;
}

void CMsgDOTARealtimeGameStats::Clear() {
  if (_has_bits_[0 / 32] & 25) {
    if (has_match()) {
      if (match_ != NULL) match_->::CMsgDOTARealtimeGameStats_MatchDetails::Clear();
    }
    if (has_graph_data()) {
      if (graph_data_ != NULL) graph_data_->::CMsgDOTARealtimeGameStats_GraphData::Clear();
    }
    delta_frame_ = false;
  }
  teams_.Clear();
  buildings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARealtimeGameStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTARealtimeGameStats.MatchDetails match = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_teams;
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
      case 2: {
        if (tag == 18) {
         parse_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_teams;
        if (input->ExpectTag(26)) goto parse_buildings;
        break;
      }

      // repeated .CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
      case 3: {
        if (tag == 26) {
         parse_buildings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_buildings;
        if (input->ExpectTag(34)) goto parse_graph_data;
        break;
      }

      // optional .CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
      case 4: {
        if (tag == 34) {
         parse_graph_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_graph_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_delta_frame;
        break;
      }

      // optional bool delta_frame = 5;
      case 5: {
        if (tag == 40) {
         parse_delta_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delta_frame_)));
          set_has_delta_frame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStats)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStats)
  // optional .CMsgDOTARealtimeGameStats.MatchDetails match = 1;
  if (has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->match(), output);
  }

  // repeated .CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
  for (int i = 0; i < this->teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teams(i), output);
  }

  // repeated .CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
  for (int i = 0; i < this->buildings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buildings(i), output);
  }

  // optional .CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
  if (has_graph_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->graph_data(), output);
  }

  // optional bool delta_frame = 5;
  if (has_delta_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->delta_frame(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStats)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats)
  // optional .CMsgDOTARealtimeGameStats.MatchDetails match = 1;
  if (has_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->match(), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
  for (int i = 0; i < this->teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teams(i), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
  for (int i = 0; i < this->buildings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->buildings(i), target);
  }

  // optional .CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
  if (has_graph_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->graph_data(), target);
  }

  // optional bool delta_frame = 5;
  if (has_delta_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->delta_frame(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats)
  return target;
}

int CMsgDOTARealtimeGameStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgDOTARealtimeGameStats.MatchDetails match = 1;
    if (has_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->match());
    }

    // optional .CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
    if (has_graph_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->graph_data());
    }

    // optional bool delta_frame = 5;
    if (has_delta_frame()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
  total_size += 1 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }

  // repeated .CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
  total_size += 1 * this->buildings_size();
  for (int i = 0; i < this->buildings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARealtimeGameStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats::MergeFrom(const CMsgDOTARealtimeGameStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  teams_.MergeFrom(from.teams_);
  buildings_.MergeFrom(from.buildings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match()) {
      mutable_match()->::CMsgDOTARealtimeGameStats_MatchDetails::MergeFrom(from.match());
    }
    if (from.has_graph_data()) {
      mutable_graph_data()->::CMsgDOTARealtimeGameStats_GraphData::MergeFrom(from.graph_data());
    }
    if (from.has_delta_frame()) {
      set_delta_frame(from.delta_frame());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARealtimeGameStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats::CopyFrom(const CMsgDOTARealtimeGameStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStats::Swap(CMsgDOTARealtimeGameStats* other) {
  if (other != this) {
    std::swap(match_, other->match_);
    teams_.Swap(&other->teams_);
    buildings_.Swap(&other->buildings_);
    std::swap(graph_data_, other->graph_data_);
    std::swap(delta_frame_, other->delta_frame_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStats_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStatsTerse_TeamDetails::kTeamNumberFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_TeamDetails::kTeamIdFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_TeamDetails::kTeamNameFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_TeamDetails::kTeamLogoFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_TeamDetails::kScoreFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_TeamDetails::kPlayersFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStatsTerse_TeamDetails::CMsgDOTARealtimeGameStatsTerse_TeamDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStatsTerse_TeamDetails::CMsgDOTARealtimeGameStatsTerse_TeamDetails(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  team_number_ = 0u;
  team_id_ = 0u;
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_logo_ = GOOGLE_ULONGLONG(0);
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStatsTerse_TeamDetails::~CMsgDOTARealtimeGameStatsTerse_TeamDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse_TeamDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStatsTerse_TeamDetails_descriptor_;
}

const CMsgDOTARealtimeGameStatsTerse_TeamDetails& CMsgDOTARealtimeGameStatsTerse_TeamDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStatsTerse_TeamDetails* CMsgDOTARealtimeGameStatsTerse_TeamDetails::default_instance_ = NULL;

CMsgDOTARealtimeGameStatsTerse_TeamDetails* CMsgDOTARealtimeGameStatsTerse_TeamDetails::New() const {
  return new CMsgDOTARealtimeGameStatsTerse_TeamDetails;
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTARealtimeGameStatsTerse_TeamDetails*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(team_number_, team_id_);
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        team_name_->clear();
      }
    }
    team_logo_ = GOOGLE_ULONGLONG(0);
    score_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_number_)));
          set_has_team_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (tag == 16) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_team_name;
        break;
      }

      // optional string team_name = 3;
      case 3: {
        if (tag == 26) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_team_logo;
        break;
      }

      // optional fixed64 team_logo = 4;
      case 4: {
        if (tag == 33) {
         parse_team_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &team_logo_)));
          set_has_team_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // optional uint32 score = 5;
      case 5: {
        if (tag == 40) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_players;
        break;
      }

      // repeated .CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
      case 6: {
        if (tag == 50) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_players;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  // optional uint32 team_number = 1;
  if (has_team_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_number(), output);
  }

  // optional uint32 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  // optional string team_name = 3;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_name(), output);
  }

  // optional fixed64 team_logo = 4;
  if (has_team_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->team_logo(), output);
  }

  // optional uint32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->score(), output);
  }

  // repeated .CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStatsTerse_TeamDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  // optional uint32 team_number = 1;
  if (has_team_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_number(), target);
  }

  // optional uint32 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  // optional string team_name = 3;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_name(), target);
  }

  // optional fixed64 team_logo = 4;
  if (has_team_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->team_logo(), target);
  }

  // optional uint32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->score(), target);
  }

  // repeated .CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  return target;
}

int CMsgDOTARealtimeGameStatsTerse_TeamDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 team_number = 1;
    if (has_team_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_number());
    }

    // optional uint32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional string team_name = 3;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional fixed64 team_logo = 4;
    if (has_team_logo()) {
      total_size += 1 + 8;
    }

    // optional uint32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  // repeated .CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStatsTerse_TeamDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARealtimeGameStatsTerse_TeamDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::MergeFrom(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_number()) {
      set_team_number(from.team_number());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
    if (from.has_team_logo()) {
      set_team_logo(from.team_logo());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::CopyFrom(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::Swap(CMsgDOTARealtimeGameStatsTerse_TeamDetails* other) {
  if (other != this) {
    std::swap(team_number_, other->team_number_);
    std::swap(team_id_, other->team_id_);
    std::swap(team_name_, other->team_name_);
    std::swap(team_logo_, other->team_logo_);
    std::swap(score_, other->score_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStatsTerse_TeamDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStatsTerse_TeamDetails_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStatsTerse_TeamDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kAccountidFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kPlayeridFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kNameFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kTeamFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kHeroidFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kLevelFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kKillCountFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kDeathCountFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kAssistsCountFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kDeniesCountFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kLhCountFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kGoldFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kXFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kYFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStatsTerse_PlayerDetails::CMsgDOTARealtimeGameStatsTerse_PlayerDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStatsTerse_PlayerDetails::CMsgDOTARealtimeGameStatsTerse_PlayerDetails(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  accountid_ = 0u;
  playerid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_ = 0u;
  heroid_ = 0u;
  level_ = 0u;
  kill_count_ = 0u;
  death_count_ = 0u;
  assists_count_ = 0u;
  denies_count_ = 0u;
  lh_count_ = 0u;
  gold_ = 0u;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStatsTerse_PlayerDetails::~CMsgDOTARealtimeGameStatsTerse_PlayerDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStatsTerse_PlayerDetails_descriptor_;
}

const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& CMsgDOTARealtimeGameStatsTerse_PlayerDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStatsTerse_PlayerDetails* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::default_instance_ = NULL;

CMsgDOTARealtimeGameStatsTerse_PlayerDetails* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::New() const {
  return new CMsgDOTARealtimeGameStatsTerse_PlayerDetails;
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTARealtimeGameStatsTerse_PlayerDetails*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(accountid_, playerid_);
    ZR_(team_, death_count_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(assists_count_, y_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // optional uint32 playerid = 2;
      case 2: {
        if (tag == 16) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_team;
        break;
      }

      // optional uint32 team = 4;
      case 4: {
        if (tag == 32) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_heroid;
        break;
      }

      // optional uint32 heroid = 5;
      case 5: {
        if (tag == 40) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional uint32 level = 6;
      case 6: {
        if (tag == 48) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_kill_count;
        break;
      }

      // optional uint32 kill_count = 7;
      case 7: {
        if (tag == 56) {
         parse_kill_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_count_)));
          set_has_kill_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_death_count;
        break;
      }

      // optional uint32 death_count = 8;
      case 8: {
        if (tag == 64) {
         parse_death_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &death_count_)));
          set_has_death_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_assists_count;
        break;
      }

      // optional uint32 assists_count = 9;
      case 9: {
        if (tag == 72) {
         parse_assists_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_count_)));
          set_has_assists_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_denies_count;
        break;
      }

      // optional uint32 denies_count = 10;
      case 10: {
        if (tag == 80) {
         parse_denies_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &denies_count_)));
          set_has_denies_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_lh_count;
        break;
      }

      // optional uint32 lh_count = 11;
      case 11: {
        if (tag == 88) {
         parse_lh_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lh_count_)));
          set_has_lh_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 12;
      case 12: {
        if (tag == 96) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_x;
        break;
      }

      // optional float x = 13;
      case 13: {
        if (tag == 109) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_y;
        break;
      }

      // optional float y = 14;
      case 14: {
        if (tag == 117) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional uint32 team = 4;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team(), output);
  }

  // optional uint32 heroid = 5;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->heroid(), output);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional uint32 kill_count = 7;
  if (has_kill_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->kill_count(), output);
  }

  // optional uint32 death_count = 8;
  if (has_death_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->death_count(), output);
  }

  // optional uint32 assists_count = 9;
  if (has_assists_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->assists_count(), output);
  }

  // optional uint32 denies_count = 10;
  if (has_denies_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->denies_count(), output);
  }

  // optional uint32 lh_count = 11;
  if (has_lh_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->lh_count(), output);
  }

  // optional uint32 gold = 12;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->gold(), output);
  }

  // optional float x = 13;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->x(), output);
  }

  // optional float y = 14;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 team = 4;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team(), target);
  }

  // optional uint32 heroid = 5;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->heroid(), target);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // optional uint32 kill_count = 7;
  if (has_kill_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->kill_count(), target);
  }

  // optional uint32 death_count = 8;
  if (has_death_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->death_count(), target);
  }

  // optional uint32 assists_count = 9;
  if (has_assists_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->assists_count(), target);
  }

  // optional uint32 denies_count = 10;
  if (has_denies_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->denies_count(), target);
  }

  // optional uint32 lh_count = 11;
  if (has_lh_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->lh_count(), target);
  }

  // optional uint32 gold = 12;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->gold(), target);
  }

  // optional float x = 13;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->x(), target);
  }

  // optional float y = 14;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  return target;
}

int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 team = 4;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional uint32 heroid = 5;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 kill_count = 7;
    if (has_kill_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill_count());
    }

    // optional uint32 death_count = 8;
    if (has_death_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->death_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 assists_count = 9;
    if (has_assists_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists_count());
    }

    // optional uint32 denies_count = 10;
    if (has_denies_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->denies_count());
    }

    // optional uint32 lh_count = 11;
    if (has_lh_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lh_count());
    }

    // optional uint32 gold = 12;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional float x = 13;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 14;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStatsTerse_PlayerDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARealtimeGameStatsTerse_PlayerDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::MergeFrom(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_kill_count()) {
      set_kill_count(from.kill_count());
    }
    if (from.has_death_count()) {
      set_death_count(from.death_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_assists_count()) {
      set_assists_count(from.assists_count());
    }
    if (from.has_denies_count()) {
      set_denies_count(from.denies_count());
    }
    if (from.has_lh_count()) {
      set_lh_count(from.lh_count());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::CopyFrom(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::Swap(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(team_, other->team_);
    std::swap(heroid_, other->heroid_);
    std::swap(level_, other->level_);
    std::swap(kill_count_, other->kill_count_);
    std::swap(death_count_, other->death_count_);
    std::swap(assists_count_, other->assists_count_);
    std::swap(denies_count_, other->denies_count_);
    std::swap(lh_count_, other->lh_count_);
    std::swap(gold_, other->gold_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStatsTerse_PlayerDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStatsTerse_PlayerDetails_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStatsTerse_PlayerDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kTeamFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kHeadingFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kTypeFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kLaneFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kTierFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kXFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kYFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kDestroyedFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStatsTerse_BuildingDetails::CMsgDOTARealtimeGameStatsTerse_BuildingDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStatsTerse_BuildingDetails::CMsgDOTARealtimeGameStatsTerse_BuildingDetails(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::SharedCtor() {
  _cached_size_ = 0;
  team_ = 0u;
  heading_ = 0;
  type_ = 0u;
  lane_ = 0u;
  tier_ = 0u;
  x_ = 0;
  y_ = 0;
  destroyed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStatsTerse_BuildingDetails::~CMsgDOTARealtimeGameStatsTerse_BuildingDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse_BuildingDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStatsTerse_BuildingDetails_descriptor_;
}

const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& CMsgDOTARealtimeGameStatsTerse_BuildingDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStatsTerse_BuildingDetails* CMsgDOTARealtimeGameStatsTerse_BuildingDetails::default_instance_ = NULL;

CMsgDOTARealtimeGameStatsTerse_BuildingDetails* CMsgDOTARealtimeGameStatsTerse_BuildingDetails::New() const {
  return new CMsgDOTARealtimeGameStatsTerse_BuildingDetails;
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTARealtimeGameStatsTerse_BuildingDetails*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(team_, destroyed_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_heading;
        break;
      }

      // optional float heading = 2;
      case 2: {
        if (tag == 21) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lane;
        break;
      }

      // optional uint32 lane = 4;
      case 4: {
        if (tag == 32) {
         parse_lane:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_)));
          set_has_lane();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tier;
        break;
      }

      // optional uint32 tier = 5;
      case 5: {
        if (tag == 40) {
         parse_tier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tier_)));
          set_has_tier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_x;
        break;
      }

      // optional float x = 6;
      case 6: {
        if (tag == 53) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_y;
        break;
      }

      // optional float y = 7;
      case 7: {
        if (tag == 61) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_destroyed;
        break;
      }

      // optional bool destroyed = 8;
      case 8: {
        if (tag == 64) {
         parse_destroyed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destroyed_)));
          set_has_destroyed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  // optional uint32 team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team(), output);
  }

  // optional float heading = 2;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->heading(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional uint32 lane = 4;
  if (has_lane()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lane(), output);
  }

  // optional uint32 tier = 5;
  if (has_tier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tier(), output);
  }

  // optional float x = 6;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->x(), output);
  }

  // optional float y = 7;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->y(), output);
  }

  // optional bool destroyed = 8;
  if (has_destroyed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->destroyed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStatsTerse_BuildingDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  // optional uint32 team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team(), target);
  }

  // optional float heading = 2;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->heading(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional uint32 lane = 4;
  if (has_lane()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lane(), target);
  }

  // optional uint32 tier = 5;
  if (has_tier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tier(), target);
  }

  // optional float x = 6;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->x(), target);
  }

  // optional float y = 7;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->y(), target);
  }

  // optional bool destroyed = 8;
  if (has_destroyed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->destroyed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  return target;
}

int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional float heading = 2;
    if (has_heading()) {
      total_size += 1 + 4;
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 lane = 4;
    if (has_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lane());
    }

    // optional uint32 tier = 5;
    if (has_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tier());
    }

    // optional float x = 6;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 7;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional bool destroyed = 8;
    if (has_destroyed()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStatsTerse_BuildingDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARealtimeGameStatsTerse_BuildingDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::MergeFrom(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_lane()) {
      set_lane(from.lane());
    }
    if (from.has_tier()) {
      set_tier(from.tier());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_destroyed()) {
      set_destroyed(from.destroyed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::CopyFrom(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::Swap(CMsgDOTARealtimeGameStatsTerse_BuildingDetails* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(heading_, other->heading_);
    std::swap(type_, other->type_);
    std::swap(lane_, other->lane_);
    std::swap(tier_, other->tier_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(destroyed_, other->destroyed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStatsTerse_BuildingDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStatsTerse_BuildingDetails_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStatsTerse_BuildingDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kServerSteamIdFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kMatchidFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kTimestampFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kGameTimeFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kSteamBroadcasterAccountIdsFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kGameModeFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kLeagueIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStatsTerse_MatchDetails::CMsgDOTARealtimeGameStatsTerse_MatchDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStatsTerse_MatchDetails::CMsgDOTARealtimeGameStatsTerse_MatchDetails(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::SharedCtor() {
  _cached_size_ = 0;
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  matchid_ = GOOGLE_ULONGLONG(0);
  timestamp_ = 0u;
  game_time_ = 0;
  game_mode_ = 0u;
  league_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStatsTerse_MatchDetails::~CMsgDOTARealtimeGameStatsTerse_MatchDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse_MatchDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStatsTerse_MatchDetails_descriptor_;
}

const CMsgDOTARealtimeGameStatsTerse_MatchDetails& CMsgDOTARealtimeGameStatsTerse_MatchDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStatsTerse_MatchDetails* CMsgDOTARealtimeGameStatsTerse_MatchDetails::default_instance_ = NULL;

CMsgDOTARealtimeGameStatsTerse_MatchDetails* CMsgDOTARealtimeGameStatsTerse_MatchDetails::New() const {
  return new CMsgDOTARealtimeGameStatsTerse_MatchDetails;
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTARealtimeGameStatsTerse_MatchDetails*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 111) {
    ZR_(server_steam_id_, game_time_);
    ZR_(game_mode_, league_id_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  steam_broadcaster_account_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 server_steam_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steam_id_)));
          set_has_server_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_matchid;
        break;
      }

      // optional uint64 matchid = 2;
      case 2: {
        if (tag == 16) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_game_time;
        break;
      }

      // optional int32 game_time = 4;
      case 4: {
        if (tag == 32) {
         parse_game_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_time_)));
          set_has_game_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_steam_broadcaster_account_ids;
        break;
      }

      // repeated uint32 steam_broadcaster_account_ids = 6;
      case 6: {
        if (tag == 48) {
         parse_steam_broadcaster_account_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_steam_broadcaster_account_ids())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_steam_broadcaster_account_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_steam_broadcaster_account_ids;
        if (input->ExpectTag(56)) goto parse_game_mode;
        break;
      }

      // optional uint32 game_mode = 7;
      case 7: {
        if (tag == 56) {
         parse_game_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
          set_has_game_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_league_id;
        break;
      }

      // optional uint32 league_id = 8;
      case 8: {
        if (tag == 64) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  // optional fixed64 server_steam_id = 1;
  if (has_server_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->server_steam_id(), output);
  }

  // optional uint64 matchid = 2;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->matchid(), output);
  }

  // optional uint32 timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timestamp(), output);
  }

  // optional int32 game_time = 4;
  if (has_game_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->game_time(), output);
  }

  // repeated uint32 steam_broadcaster_account_ids = 6;
  for (int i = 0; i < this->steam_broadcaster_account_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->steam_broadcaster_account_ids(i), output);
  }

  // optional uint32 game_mode = 7;
  if (has_game_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->game_mode(), output);
  }

  // optional uint32 league_id = 8;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->league_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStatsTerse_MatchDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  // optional fixed64 server_steam_id = 1;
  if (has_server_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->server_steam_id(), target);
  }

  // optional uint64 matchid = 2;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->matchid(), target);
  }

  // optional uint32 timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timestamp(), target);
  }

  // optional int32 game_time = 4;
  if (has_game_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->game_time(), target);
  }

  // repeated uint32 steam_broadcaster_account_ids = 6;
  for (int i = 0; i < this->steam_broadcaster_account_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->steam_broadcaster_account_ids(i), target);
  }

  // optional uint32 game_mode = 7;
  if (has_game_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->game_mode(), target);
  }

  // optional uint32 league_id = 8;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->league_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  return target;
}

int CMsgDOTARealtimeGameStatsTerse_MatchDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 server_steam_id = 1;
    if (has_server_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint64 matchid = 2;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->matchid());
    }

    // optional uint32 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional int32 game_time = 4;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_time());
    }

    // optional uint32 game_mode = 7;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

    // optional uint32 league_id = 8;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

  }
  // repeated uint32 steam_broadcaster_account_ids = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->steam_broadcaster_account_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->steam_broadcaster_account_ids(i));
    }
    total_size += 1 * this->steam_broadcaster_account_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStatsTerse_MatchDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARealtimeGameStatsTerse_MatchDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::MergeFrom(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  steam_broadcaster_account_ids_.MergeFrom(from.steam_broadcaster_account_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_steam_id()) {
      set_server_steam_id(from.server_steam_id());
    }
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_game_time()) {
      set_game_time(from.game_time());
    }
    if (from.has_game_mode()) {
      set_game_mode(from.game_mode());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::CopyFrom(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::Swap(CMsgDOTARealtimeGameStatsTerse_MatchDetails* other) {
  if (other != this) {
    std::swap(server_steam_id_, other->server_steam_id_);
    std::swap(matchid_, other->matchid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(game_time_, other->game_time_);
    steam_broadcaster_account_ids_.Swap(&other->steam_broadcaster_account_ids_);
    std::swap(game_mode_, other->game_mode_);
    std::swap(league_id_, other->league_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStatsTerse_MatchDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStatsTerse_MatchDetails_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStatsTerse_MatchDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStatsTerse_GraphData::kGraphGoldFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStatsTerse_GraphData::CMsgDOTARealtimeGameStatsTerse_GraphData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStatsTerse.GraphData)
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::InitAsDefaultInstance() {
}

CMsgDOTARealtimeGameStatsTerse_GraphData::CMsgDOTARealtimeGameStatsTerse_GraphData(const CMsgDOTARealtimeGameStatsTerse_GraphData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStatsTerse.GraphData)
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStatsTerse_GraphData::~CMsgDOTARealtimeGameStatsTerse_GraphData() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStatsTerse.GraphData)
  SharedDtor();
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse_GraphData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStatsTerse_GraphData_descriptor_;
}

const CMsgDOTARealtimeGameStatsTerse_GraphData& CMsgDOTARealtimeGameStatsTerse_GraphData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStatsTerse_GraphData* CMsgDOTARealtimeGameStatsTerse_GraphData::default_instance_ = NULL;

CMsgDOTARealtimeGameStatsTerse_GraphData* CMsgDOTARealtimeGameStatsTerse_GraphData::New() const {
  return new CMsgDOTARealtimeGameStatsTerse_GraphData;
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::Clear() {
  graph_gold_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARealtimeGameStatsTerse_GraphData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStatsTerse.GraphData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 graph_gold = 1;
      case 1: {
        if (tag == 8) {
         parse_graph_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_graph_gold())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_graph_gold())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_graph_gold;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStatsTerse.GraphData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStatsTerse.GraphData)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStatsTerse.GraphData)
  // repeated int32 graph_gold = 1;
  for (int i = 0; i < this->graph_gold_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->graph_gold(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStatsTerse.GraphData)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStatsTerse_GraphData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStatsTerse.GraphData)
  // repeated int32 graph_gold = 1;
  for (int i = 0; i < this->graph_gold_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->graph_gold(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStatsTerse.GraphData)
  return target;
}

int CMsgDOTARealtimeGameStatsTerse_GraphData::ByteSize() const {
  int total_size = 0;

  // repeated int32 graph_gold = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->graph_gold_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->graph_gold(i));
    }
    total_size += 1 * this->graph_gold_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStatsTerse_GraphData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARealtimeGameStatsTerse_GraphData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::MergeFrom(const CMsgDOTARealtimeGameStatsTerse_GraphData& from) {
  GOOGLE_CHECK_NE(&from, this);
  graph_gold_.MergeFrom(from.graph_gold_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::CopyFrom(const CMsgDOTARealtimeGameStatsTerse_GraphData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse_GraphData::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::Swap(CMsgDOTARealtimeGameStatsTerse_GraphData* other) {
  if (other != this) {
    graph_gold_.Swap(&other->graph_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStatsTerse_GraphData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStatsTerse_GraphData_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStatsTerse_GraphData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARealtimeGameStatsTerse::kMatchFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse::kTeamsFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse::kBuildingsFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse::kGraphDataFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse::kDeltaFrameFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARealtimeGameStatsTerse::CMsgDOTARealtimeGameStatsTerse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARealtimeGameStatsTerse)
}

void CMsgDOTARealtimeGameStatsTerse::InitAsDefaultInstance() {
  match_ = const_cast< ::CMsgDOTARealtimeGameStatsTerse_MatchDetails*>(&::CMsgDOTARealtimeGameStatsTerse_MatchDetails::default_instance());
  graph_data_ = const_cast< ::CMsgDOTARealtimeGameStatsTerse_GraphData*>(&::CMsgDOTARealtimeGameStatsTerse_GraphData::default_instance());
}

CMsgDOTARealtimeGameStatsTerse::CMsgDOTARealtimeGameStatsTerse(const CMsgDOTARealtimeGameStatsTerse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStatsTerse)
}

void CMsgDOTARealtimeGameStatsTerse::SharedCtor() {
  _cached_size_ = 0;
  match_ = NULL;
  graph_data_ = NULL;
  delta_frame_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARealtimeGameStatsTerse::~CMsgDOTARealtimeGameStatsTerse() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStatsTerse)
  SharedDtor();
}

void CMsgDOTARealtimeGameStatsTerse::SharedDtor() {
  if (this != default_instance_) {
    delete match_;
    delete graph_data_;
  }
}

void CMsgDOTARealtimeGameStatsTerse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARealtimeGameStatsTerse_descriptor_;
}

const CMsgDOTARealtimeGameStatsTerse& CMsgDOTARealtimeGameStatsTerse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTARealtimeGameStatsTerse* CMsgDOTARealtimeGameStatsTerse::default_instance_ = NULL;

CMsgDOTARealtimeGameStatsTerse* CMsgDOTARealtimeGameStatsTerse::New() const {
  return new CMsgDOTARealtimeGameStatsTerse;
}

void CMsgDOTARealtimeGameStatsTerse::Clear() {
  if (_has_bits_[0 / 32] & 25) {
    if (has_match()) {
      if (match_ != NULL) match_->::CMsgDOTARealtimeGameStatsTerse_MatchDetails::Clear();
    }
    if (has_graph_data()) {
      if (graph_data_ != NULL) graph_data_->::CMsgDOTARealtimeGameStatsTerse_GraphData::Clear();
    }
    delta_frame_ = false;
  }
  teams_.Clear();
  buildings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARealtimeGameStatsTerse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARealtimeGameStatsTerse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_teams;
        break;
      }

      // repeated .CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
      case 2: {
        if (tag == 18) {
         parse_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_teams;
        if (input->ExpectTag(26)) goto parse_buildings;
        break;
      }

      // repeated .CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
      case 3: {
        if (tag == 26) {
         parse_buildings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_buildings;
        if (input->ExpectTag(34)) goto parse_graph_data;
        break;
      }

      // optional .CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
      case 4: {
        if (tag == 34) {
         parse_graph_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_graph_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_delta_frame;
        break;
      }

      // optional bool delta_frame = 5;
      case 5: {
        if (tag == 40) {
         parse_delta_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delta_frame_)));
          set_has_delta_frame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARealtimeGameStatsTerse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARealtimeGameStatsTerse)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStatsTerse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARealtimeGameStatsTerse)
  // optional .CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
  if (has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->match(), output);
  }

  // repeated .CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
  for (int i = 0; i < this->teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teams(i), output);
  }

  // repeated .CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
  for (int i = 0; i < this->buildings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buildings(i), output);
  }

  // optional .CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
  if (has_graph_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->graph_data(), output);
  }

  // optional bool delta_frame = 5;
  if (has_delta_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->delta_frame(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARealtimeGameStatsTerse)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStatsTerse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStatsTerse)
  // optional .CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
  if (has_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->match(), target);
  }

  // repeated .CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
  for (int i = 0; i < this->teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teams(i), target);
  }

  // repeated .CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
  for (int i = 0; i < this->buildings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->buildings(i), target);
  }

  // optional .CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
  if (has_graph_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->graph_data(), target);
  }

  // optional bool delta_frame = 5;
  if (has_delta_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->delta_frame(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStatsTerse)
  return target;
}

int CMsgDOTARealtimeGameStatsTerse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
    if (has_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->match());
    }

    // optional .CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
    if (has_graph_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->graph_data());
    }

    // optional bool delta_frame = 5;
    if (has_delta_frame()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
  total_size += 1 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }

  // repeated .CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
  total_size += 1 * this->buildings_size();
  for (int i = 0; i < this->buildings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStatsTerse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARealtimeGameStatsTerse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse::MergeFrom(const CMsgDOTARealtimeGameStatsTerse& from) {
  GOOGLE_CHECK_NE(&from, this);
  teams_.MergeFrom(from.teams_);
  buildings_.MergeFrom(from.buildings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match()) {
      mutable_match()->::CMsgDOTARealtimeGameStatsTerse_MatchDetails::MergeFrom(from.match());
    }
    if (from.has_graph_data()) {
      mutable_graph_data()->::CMsgDOTARealtimeGameStatsTerse_GraphData::MergeFrom(from.graph_data());
    }
    if (from.has_delta_frame()) {
      set_delta_frame(from.delta_frame());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARealtimeGameStatsTerse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse::CopyFrom(const CMsgDOTARealtimeGameStatsTerse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse::IsInitialized() const {

  return true;
}

void CMsgDOTARealtimeGameStatsTerse::Swap(CMsgDOTARealtimeGameStatsTerse* other) {
  if (other != this) {
    std::swap(match_, other->match_);
    teams_.Swap(&other->teams_);
    buildings_.Swap(&other->buildings_);
    std::swap(graph_data_, other->graph_data_);
    std::swap(delta_frame_, other->delta_frame_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStatsTerse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARealtimeGameStatsTerse_descriptor_;
  metadata.reflection = CMsgDOTARealtimeGameStatsTerse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToClientMatchGroupsVersion::kMatchgroupsVersionFieldNumber;
#endif  // !_MSC_VER

CMsgGCToClientMatchGroupsVersion::CMsgGCToClientMatchGroupsVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToClientMatchGroupsVersion)
}

void CMsgGCToClientMatchGroupsVersion::InitAsDefaultInstance() {
}

CMsgGCToClientMatchGroupsVersion::CMsgGCToClientMatchGroupsVersion(const CMsgGCToClientMatchGroupsVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientMatchGroupsVersion)
}

void CMsgGCToClientMatchGroupsVersion::SharedCtor() {
  _cached_size_ = 0;
  matchgroups_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToClientMatchGroupsVersion::~CMsgGCToClientMatchGroupsVersion() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientMatchGroupsVersion)
  SharedDtor();
}

void CMsgGCToClientMatchGroupsVersion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToClientMatchGroupsVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToClientMatchGroupsVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToClientMatchGroupsVersion_descriptor_;
}

const CMsgGCToClientMatchGroupsVersion& CMsgGCToClientMatchGroupsVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgGCToClientMatchGroupsVersion* CMsgGCToClientMatchGroupsVersion::default_instance_ = NULL;

CMsgGCToClientMatchGroupsVersion* CMsgGCToClientMatchGroupsVersion::New() const {
  return new CMsgGCToClientMatchGroupsVersion;
}

void CMsgGCToClientMatchGroupsVersion::Clear() {
  matchgroups_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToClientMatchGroupsVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToClientMatchGroupsVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 matchgroups_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchgroups_version_)));
          set_has_matchgroups_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToClientMatchGroupsVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToClientMatchGroupsVersion)
  return false;
#undef DO_
}

void CMsgGCToClientMatchGroupsVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToClientMatchGroupsVersion)
  // optional uint32 matchgroups_version = 1;
  if (has_matchgroups_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchgroups_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToClientMatchGroupsVersion)
}

::google::protobuf::uint8* CMsgGCToClientMatchGroupsVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientMatchGroupsVersion)
  // optional uint32 matchgroups_version = 1;
  if (has_matchgroups_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchgroups_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientMatchGroupsVersion)
  return target;
}

int CMsgGCToClientMatchGroupsVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 matchgroups_version = 1;
    if (has_matchgroups_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchgroups_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToClientMatchGroupsVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToClientMatchGroupsVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToClientMatchGroupsVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToClientMatchGroupsVersion::MergeFrom(const CMsgGCToClientMatchGroupsVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchgroups_version()) {
      set_matchgroups_version(from.matchgroups_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToClientMatchGroupsVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientMatchGroupsVersion::CopyFrom(const CMsgGCToClientMatchGroupsVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientMatchGroupsVersion::IsInitialized() const {

  return true;
}

void CMsgGCToClientMatchGroupsVersion::Swap(CMsgGCToClientMatchGroupsVersion* other) {
  if (other != this) {
    std::swap(matchgroups_version_, other->matchgroups_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToClientMatchGroupsVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToClientMatchGroupsVersion_descriptor_;
  metadata.reflection = CMsgGCToClientMatchGroupsVersion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTASDOHeroStatsHistory::kMatchIdFieldNumber;
const int CMsgDOTASDOHeroStatsHistory::kGameModeFieldNumber;
const int CMsgDOTASDOHeroStatsHistory::kLobbyTypeFieldNumber;
const int CMsgDOTASDOHeroStatsHistory::kStartTimeFieldNumber;
const int CMsgDOTASDOHeroStatsHistory::kWonFieldNumber;
const int CMsgDOTASDOHeroStatsHistory::kGpmFieldNumber;
const int CMsgDOTASDOHeroStatsHistory::kXpmFieldNumber;
const int CMsgDOTASDOHeroStatsHistory::kKillsFieldNumber;
const int CMsgDOTASDOHeroStatsHistory::kDeathsFieldNumber;
const int CMsgDOTASDOHeroStatsHistory::kAssistsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTASDOHeroStatsHistory::CMsgDOTASDOHeroStatsHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTASDOHeroStatsHistory)
}

void CMsgDOTASDOHeroStatsHistory::InitAsDefaultInstance() {
}

CMsgDOTASDOHeroStatsHistory::CMsgDOTASDOHeroStatsHistory(const CMsgDOTASDOHeroStatsHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASDOHeroStatsHistory)
}

void CMsgDOTASDOHeroStatsHistory::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  game_mode_ = 0u;
  lobby_type_ = 0u;
  start_time_ = 0u;
  won_ = false;
  gpm_ = 0u;
  xpm_ = 0u;
  kills_ = 0u;
  deaths_ = 0u;
  assists_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTASDOHeroStatsHistory::~CMsgDOTASDOHeroStatsHistory() {
  // @@protoc_insertion_point(destructor:CMsgDOTASDOHeroStatsHistory)
  SharedDtor();
}

void CMsgDOTASDOHeroStatsHistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTASDOHeroStatsHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTASDOHeroStatsHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTASDOHeroStatsHistory_descriptor_;
}

const CMsgDOTASDOHeroStatsHistory& CMsgDOTASDOHeroStatsHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTASDOHeroStatsHistory* CMsgDOTASDOHeroStatsHistory::default_instance_ = NULL;

CMsgDOTASDOHeroStatsHistory* CMsgDOTASDOHeroStatsHistory::New() const {
  return new CMsgDOTASDOHeroStatsHistory;
}

void CMsgDOTASDOHeroStatsHistory::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTASDOHeroStatsHistory*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(match_id_, kills_);
  }
  ZR_(deaths_, assists_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTASDOHeroStatsHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTASDOHeroStatsHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_game_mode;
        break;
      }

      // optional uint32 game_mode = 2;
      case 2: {
        if (tag == 16) {
         parse_game_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
          set_has_game_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lobby_type;
        break;
      }

      // optional uint32 lobby_type = 3;
      case 3: {
        if (tag == 24) {
         parse_lobby_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_type_)));
          set_has_lobby_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start_time;
        break;
      }

      // optional uint32 start_time = 4;
      case 4: {
        if (tag == 32) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_won;
        break;
      }

      // optional bool won = 5;
      case 5: {
        if (tag == 40) {
         parse_won:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &won_)));
          set_has_won();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gpm;
        break;
      }

      // optional uint32 gpm = 6;
      case 6: {
        if (tag == 48) {
         parse_gpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpm_)));
          set_has_gpm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_xpm;
        break;
      }

      // optional uint32 xpm = 7;
      case 7: {
        if (tag == 56) {
         parse_xpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xpm_)));
          set_has_xpm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_kills;
        break;
      }

      // optional uint32 kills = 8;
      case 8: {
        if (tag == 64) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
          set_has_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_deaths;
        break;
      }

      // optional uint32 deaths = 9;
      case 9: {
        if (tag == 72) {
         parse_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
          set_has_deaths();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_assists;
        break;
      }

      // optional uint32 assists = 10;
      case 10: {
        if (tag == 80) {
         parse_assists:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
          set_has_assists();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTASDOHeroStatsHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTASDOHeroStatsHistory)
  return false;
#undef DO_
}

void CMsgDOTASDOHeroStatsHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTASDOHeroStatsHistory)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 game_mode = 2;
  if (has_game_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_mode(), output);
  }

  // optional uint32 lobby_type = 3;
  if (has_lobby_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lobby_type(), output);
  }

  // optional uint32 start_time = 4;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_time(), output);
  }

  // optional bool won = 5;
  if (has_won()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->won(), output);
  }

  // optional uint32 gpm = 6;
  if (has_gpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gpm(), output);
  }

  // optional uint32 xpm = 7;
  if (has_xpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->xpm(), output);
  }

  // optional uint32 kills = 8;
  if (has_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->kills(), output);
  }

  // optional uint32 deaths = 9;
  if (has_deaths()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->deaths(), output);
  }

  // optional uint32 assists = 10;
  if (has_assists()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->assists(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTASDOHeroStatsHistory)
}

::google::protobuf::uint8* CMsgDOTASDOHeroStatsHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASDOHeroStatsHistory)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 game_mode = 2;
  if (has_game_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_mode(), target);
  }

  // optional uint32 lobby_type = 3;
  if (has_lobby_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lobby_type(), target);
  }

  // optional uint32 start_time = 4;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_time(), target);
  }

  // optional bool won = 5;
  if (has_won()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->won(), target);
  }

  // optional uint32 gpm = 6;
  if (has_gpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gpm(), target);
  }

  // optional uint32 xpm = 7;
  if (has_xpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->xpm(), target);
  }

  // optional uint32 kills = 8;
  if (has_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->kills(), target);
  }

  // optional uint32 deaths = 9;
  if (has_deaths()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->deaths(), target);
  }

  // optional uint32 assists = 10;
  if (has_assists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->assists(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASDOHeroStatsHistory)
  return target;
}

int CMsgDOTASDOHeroStatsHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 game_mode = 2;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

    // optional uint32 lobby_type = 3;
    if (has_lobby_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_type());
    }

    // optional uint32 start_time = 4;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional bool won = 5;
    if (has_won()) {
      total_size += 1 + 1;
    }

    // optional uint32 gpm = 6;
    if (has_gpm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gpm());
    }

    // optional uint32 xpm = 7;
    if (has_xpm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xpm());
    }

    // optional uint32 kills = 8;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 deaths = 9;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 assists = 10;
    if (has_assists()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTASDOHeroStatsHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTASDOHeroStatsHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTASDOHeroStatsHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTASDOHeroStatsHistory::MergeFrom(const CMsgDOTASDOHeroStatsHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_game_mode()) {
      set_game_mode(from.game_mode());
    }
    if (from.has_lobby_type()) {
      set_lobby_type(from.lobby_type());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_won()) {
      set_won(from.won());
    }
    if (from.has_gpm()) {
      set_gpm(from.gpm());
    }
    if (from.has_xpm()) {
      set_xpm(from.xpm());
    }
    if (from.has_kills()) {
      set_kills(from.kills());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_deaths()) {
      set_deaths(from.deaths());
    }
    if (from.has_assists()) {
      set_assists(from.assists());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTASDOHeroStatsHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASDOHeroStatsHistory::CopyFrom(const CMsgDOTASDOHeroStatsHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASDOHeroStatsHistory::IsInitialized() const {

  return true;
}

void CMsgDOTASDOHeroStatsHistory::Swap(CMsgDOTASDOHeroStatsHistory* other) {
  if (other != this) {
    std::swap(match_id_, other->match_id_);
    std::swap(game_mode_, other->game_mode_);
    std::swap(lobby_type_, other->lobby_type_);
    std::swap(start_time_, other->start_time_);
    std::swap(won_, other->won_);
    std::swap(gpm_, other->gpm_);
    std::swap(xpm_, other->xpm_);
    std::swap(kills_, other->kills_);
    std::swap(deaths_, other->deaths_);
    std::swap(assists_, other->assists_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTASDOHeroStatsHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTASDOHeroStatsHistory_descriptor_;
  metadata.reflection = CMsgDOTASDOHeroStatsHistory_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonRewards_ERewardType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTASeasonRewards_ERewardType_descriptor_;
}
bool CMsgDOTASeasonRewards_ERewardType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards::EconItem;
const CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards::MysteryWheel;
const CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards::AbilityEffect;
const CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards::Other;
const CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards::ERewardType_MIN;
const CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards::ERewardType_MAX;
const int CMsgDOTASeasonRewards::ERewardType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTASeasonRewards_Reward::kNameFieldNumber;
const int CMsgDOTASeasonRewards_Reward::kItemdefFieldNumber;
const int CMsgDOTASeasonRewards_Reward::kImportanceFieldNumber;
const int CMsgDOTASeasonRewards_Reward::kBaseLevelFieldNumber;
const int CMsgDOTASeasonRewards_Reward::kRepeatLevelFieldNumber;
const int CMsgDOTASeasonRewards_Reward::kRewardTypeFieldNumber;
const int CMsgDOTASeasonRewards_Reward::kImageFieldNumber;
const int CMsgDOTASeasonRewards_Reward::kActionIdFieldNumber;
const int CMsgDOTASeasonRewards_Reward::kEffectIndexFieldNumber;
#endif  // !_MSC_VER

CMsgDOTASeasonRewards_Reward::CMsgDOTASeasonRewards_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTASeasonRewards.Reward)
}

void CMsgDOTASeasonRewards_Reward::InitAsDefaultInstance() {
}

CMsgDOTASeasonRewards_Reward::CMsgDOTASeasonRewards_Reward(const CMsgDOTASeasonRewards_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASeasonRewards.Reward)
}

void CMsgDOTASeasonRewards_Reward::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  itemdef_ = 0u;
  importance_ = 0u;
  base_level_ = 0u;
  repeat_level_ = 0u;
  reward_type_ = 0;
  image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_id_ = 0u;
  effect_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTASeasonRewards_Reward::~CMsgDOTASeasonRewards_Reward() {
  // @@protoc_insertion_point(destructor:CMsgDOTASeasonRewards.Reward)
  SharedDtor();
}

void CMsgDOTASeasonRewards_Reward::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTASeasonRewards_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTASeasonRewards_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTASeasonRewards_Reward_descriptor_;
}

const CMsgDOTASeasonRewards_Reward& CMsgDOTASeasonRewards_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTASeasonRewards_Reward* CMsgDOTASeasonRewards_Reward::default_instance_ = NULL;

CMsgDOTASeasonRewards_Reward* CMsgDOTASeasonRewards_Reward::New() const {
  return new CMsgDOTASeasonRewards_Reward;
}

void CMsgDOTASeasonRewards_Reward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTASeasonRewards_Reward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(itemdef_, repeat_level_);
    ZR_(reward_type_, action_id_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_image()) {
      if (image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_->clear();
      }
    }
  }
  effect_index_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTASeasonRewards_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTASeasonRewards.Reward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemdef;
        break;
      }

      // optional uint32 itemdef = 2;
      case 2: {
        if (tag == 16) {
         parse_itemdef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemdef_)));
          set_has_itemdef();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_importance;
        break;
      }

      // optional uint32 importance = 3;
      case 3: {
        if (tag == 24) {
         parse_importance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &importance_)));
          set_has_importance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_base_level;
        break;
      }

      // optional uint32 base_level = 4;
      case 4: {
        if (tag == 32) {
         parse_base_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_level_)));
          set_has_base_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_repeat_level;
        break;
      }

      // optional uint32 repeat_level = 5;
      case 5: {
        if (tag == 40) {
         parse_repeat_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeat_level_)));
          set_has_repeat_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_reward_type;
        break;
      }

      // optional .CMsgDOTASeasonRewards.ERewardType reward_type = 6 [default = EconItem];
      case 6: {
        if (tag == 48) {
         parse_reward_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTASeasonRewards_ERewardType_IsValid(value)) {
            set_reward_type(static_cast< ::CMsgDOTASeasonRewards_ERewardType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_image;
        break;
      }

      // optional string image = 7;
      case 7: {
        if (tag == 58) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image().data(), this->image().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "image");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_action_id;
        break;
      }

      // optional uint32 action_id = 8;
      case 8: {
        if (tag == 64) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_effect_index;
        break;
      }

      // optional uint32 effect_index = 9;
      case 9: {
        if (tag == 72) {
         parse_effect_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_index_)));
          set_has_effect_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTASeasonRewards.Reward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTASeasonRewards.Reward)
  return false;
#undef DO_
}

void CMsgDOTASeasonRewards_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTASeasonRewards.Reward)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 itemdef = 2;
  if (has_itemdef()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemdef(), output);
  }

  // optional uint32 importance = 3;
  if (has_importance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->importance(), output);
  }

  // optional uint32 base_level = 4;
  if (has_base_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->base_level(), output);
  }

  // optional uint32 repeat_level = 5;
  if (has_repeat_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->repeat_level(), output);
  }

  // optional .CMsgDOTASeasonRewards.ERewardType reward_type = 6 [default = EconItem];
  if (has_reward_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->reward_type(), output);
  }

  // optional string image = 7;
  if (has_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->image(), output);
  }

  // optional uint32 action_id = 8;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->action_id(), output);
  }

  // optional uint32 effect_index = 9;
  if (has_effect_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->effect_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTASeasonRewards.Reward)
}

::google::protobuf::uint8* CMsgDOTASeasonRewards_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASeasonRewards.Reward)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 itemdef = 2;
  if (has_itemdef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemdef(), target);
  }

  // optional uint32 importance = 3;
  if (has_importance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->importance(), target);
  }

  // optional uint32 base_level = 4;
  if (has_base_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->base_level(), target);
  }

  // optional uint32 repeat_level = 5;
  if (has_repeat_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->repeat_level(), target);
  }

  // optional .CMsgDOTASeasonRewards.ERewardType reward_type = 6 [default = EconItem];
  if (has_reward_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->reward_type(), target);
  }

  // optional string image = 7;
  if (has_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->image(), target);
  }

  // optional uint32 action_id = 8;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->action_id(), target);
  }

  // optional uint32 effect_index = 9;
  if (has_effect_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->effect_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASeasonRewards.Reward)
  return target;
}

int CMsgDOTASeasonRewards_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 itemdef = 2;
    if (has_itemdef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemdef());
    }

    // optional uint32 importance = 3;
    if (has_importance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->importance());
    }

    // optional uint32 base_level = 4;
    if (has_base_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_level());
    }

    // optional uint32 repeat_level = 5;
    if (has_repeat_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeat_level());
    }

    // optional .CMsgDOTASeasonRewards.ERewardType reward_type = 6 [default = EconItem];
    if (has_reward_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reward_type());
    }

    // optional string image = 7;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image());
    }

    // optional uint32 action_id = 8;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 effect_index = 9;
    if (has_effect_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTASeasonRewards_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTASeasonRewards_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTASeasonRewards_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonRewards_Reward::MergeFrom(const CMsgDOTASeasonRewards_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_itemdef()) {
      set_itemdef(from.itemdef());
    }
    if (from.has_importance()) {
      set_importance(from.importance());
    }
    if (from.has_base_level()) {
      set_base_level(from.base_level());
    }
    if (from.has_repeat_level()) {
      set_repeat_level(from.repeat_level());
    }
    if (from.has_reward_type()) {
      set_reward_type(from.reward_type());
    }
    if (from.has_image()) {
      set_image(from.image());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_effect_index()) {
      set_effect_index(from.effect_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTASeasonRewards_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonRewards_Reward::CopyFrom(const CMsgDOTASeasonRewards_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonRewards_Reward::IsInitialized() const {

  return true;
}

void CMsgDOTASeasonRewards_Reward::Swap(CMsgDOTASeasonRewards_Reward* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(itemdef_, other->itemdef_);
    std::swap(importance_, other->importance_);
    std::swap(base_level_, other->base_level_);
    std::swap(repeat_level_, other->repeat_level_);
    std::swap(reward_type_, other->reward_type_);
    std::swap(image_, other->image_);
    std::swap(action_id_, other->action_id_);
    std::swap(effect_index_, other->effect_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTASeasonRewards_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTASeasonRewards_Reward_descriptor_;
  metadata.reflection = CMsgDOTASeasonRewards_Reward_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTASeasonRewards::kRewardsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTASeasonRewards::CMsgDOTASeasonRewards()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTASeasonRewards)
}

void CMsgDOTASeasonRewards::InitAsDefaultInstance() {
}

CMsgDOTASeasonRewards::CMsgDOTASeasonRewards(const CMsgDOTASeasonRewards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASeasonRewards)
}

void CMsgDOTASeasonRewards::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTASeasonRewards::~CMsgDOTASeasonRewards() {
  // @@protoc_insertion_point(destructor:CMsgDOTASeasonRewards)
  SharedDtor();
}

void CMsgDOTASeasonRewards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTASeasonRewards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTASeasonRewards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTASeasonRewards_descriptor_;
}

const CMsgDOTASeasonRewards& CMsgDOTASeasonRewards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTASeasonRewards* CMsgDOTASeasonRewards::default_instance_ = NULL;

CMsgDOTASeasonRewards* CMsgDOTASeasonRewards::New() const {
  return new CMsgDOTASeasonRewards;
}

void CMsgDOTASeasonRewards::Clear() {
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTASeasonRewards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTASeasonRewards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgDOTASeasonRewards.Reward rewards = 1;
      case 1: {
        if (tag == 10) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_rewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTASeasonRewards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTASeasonRewards)
  return false;
#undef DO_
}

void CMsgDOTASeasonRewards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTASeasonRewards)
  // repeated .CMsgDOTASeasonRewards.Reward rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTASeasonRewards)
}

::google::protobuf::uint8* CMsgDOTASeasonRewards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASeasonRewards)
  // repeated .CMsgDOTASeasonRewards.Reward rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASeasonRewards)
  return target;
}

int CMsgDOTASeasonRewards::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgDOTASeasonRewards.Reward rewards = 1;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTASeasonRewards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTASeasonRewards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTASeasonRewards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonRewards::MergeFrom(const CMsgDOTASeasonRewards& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTASeasonRewards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonRewards::CopyFrom(const CMsgDOTASeasonRewards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonRewards::IsInitialized() const {

  return true;
}

void CMsgDOTASeasonRewards::Swap(CMsgDOTASeasonRewards* other) {
  if (other != this) {
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTASeasonRewards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTASeasonRewards_descriptor_;
  metadata.reflection = CMsgDOTASeasonRewards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTASeasonAchievements_Achievement::kNameFieldNumber;
const int CMsgDOTASeasonAchievements_Achievement::kDescriptionFieldNumber;
const int CMsgDOTASeasonAchievements_Achievement::kImageFieldNumber;
const int CMsgDOTASeasonAchievements_Achievement::kActionIdFieldNumber;
const int CMsgDOTASeasonAchievements_Achievement::kMaxGrantsFieldNumber;
const int CMsgDOTASeasonAchievements_Achievement::kNormalPointsFieldNumber;
const int CMsgDOTASeasonAchievements_Achievement::kTrackingAchievementFieldNumber;
const int CMsgDOTASeasonAchievements_Achievement::kAchievementGoalFieldNumber;
const int CMsgDOTASeasonAchievements_Achievement::kAchievementLevelFieldNumber;
#endif  // !_MSC_VER

CMsgDOTASeasonAchievements_Achievement::CMsgDOTASeasonAchievements_Achievement()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTASeasonAchievements.Achievement)
}

void CMsgDOTASeasonAchievements_Achievement::InitAsDefaultInstance() {
}

CMsgDOTASeasonAchievements_Achievement::CMsgDOTASeasonAchievements_Achievement(const CMsgDOTASeasonAchievements_Achievement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASeasonAchievements.Achievement)
}

void CMsgDOTASeasonAchievements_Achievement::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_id_ = 0u;
  max_grants_ = 0u;
  normal_points_ = 0u;
  tracking_achievement_ = 0u;
  achievement_goal_ = 0u;
  achievement_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTASeasonAchievements_Achievement::~CMsgDOTASeasonAchievements_Achievement() {
  // @@protoc_insertion_point(destructor:CMsgDOTASeasonAchievements.Achievement)
  SharedDtor();
}

void CMsgDOTASeasonAchievements_Achievement::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTASeasonAchievements_Achievement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTASeasonAchievements_Achievement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTASeasonAchievements_Achievement_descriptor_;
}

const CMsgDOTASeasonAchievements_Achievement& CMsgDOTASeasonAchievements_Achievement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTASeasonAchievements_Achievement* CMsgDOTASeasonAchievements_Achievement::default_instance_ = NULL;

CMsgDOTASeasonAchievements_Achievement* CMsgDOTASeasonAchievements_Achievement::New() const {
  return new CMsgDOTASeasonAchievements_Achievement;
}

void CMsgDOTASeasonAchievements_Achievement::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTASeasonAchievements_Achievement*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(action_id_, achievement_goal_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_image()) {
      if (image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_->clear();
      }
    }
  }
  achievement_level_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTASeasonAchievements_Achievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTASeasonAchievements.Achievement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_image;
        break;
      }

      // optional string image = 3;
      case 3: {
        if (tag == 26) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image().data(), this->image().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "image");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_action_id;
        break;
      }

      // optional uint32 action_id = 4;
      case 4: {
        if (tag == 32) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_max_grants;
        break;
      }

      // optional uint32 max_grants = 5;
      case 5: {
        if (tag == 40) {
         parse_max_grants:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_grants_)));
          set_has_max_grants();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_normal_points;
        break;
      }

      // optional uint32 normal_points = 6;
      case 6: {
        if (tag == 48) {
         parse_normal_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normal_points_)));
          set_has_normal_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_tracking_achievement;
        break;
      }

      // optional uint32 tracking_achievement = 7;
      case 7: {
        if (tag == 56) {
         parse_tracking_achievement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tracking_achievement_)));
          set_has_tracking_achievement();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_achievement_goal;
        break;
      }

      // optional uint32 achievement_goal = 8;
      case 8: {
        if (tag == 64) {
         parse_achievement_goal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievement_goal_)));
          set_has_achievement_goal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_achievement_level;
        break;
      }

      // optional uint32 achievement_level = 9;
      case 9: {
        if (tag == 72) {
         parse_achievement_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievement_level_)));
          set_has_achievement_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTASeasonAchievements.Achievement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTASeasonAchievements.Achievement)
  return false;
#undef DO_
}

void CMsgDOTASeasonAchievements_Achievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTASeasonAchievements.Achievement)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional string image = 3;
  if (has_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->image(), output);
  }

  // optional uint32 action_id = 4;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->action_id(), output);
  }

  // optional uint32 max_grants = 5;
  if (has_max_grants()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_grants(), output);
  }

  // optional uint32 normal_points = 6;
  if (has_normal_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->normal_points(), output);
  }

  // optional uint32 tracking_achievement = 7;
  if (has_tracking_achievement()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tracking_achievement(), output);
  }

  // optional uint32 achievement_goal = 8;
  if (has_achievement_goal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->achievement_goal(), output);
  }

  // optional uint32 achievement_level = 9;
  if (has_achievement_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->achievement_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTASeasonAchievements.Achievement)
}

::google::protobuf::uint8* CMsgDOTASeasonAchievements_Achievement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASeasonAchievements.Achievement)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional string image = 3;
  if (has_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->image(), target);
  }

  // optional uint32 action_id = 4;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->action_id(), target);
  }

  // optional uint32 max_grants = 5;
  if (has_max_grants()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_grants(), target);
  }

  // optional uint32 normal_points = 6;
  if (has_normal_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->normal_points(), target);
  }

  // optional uint32 tracking_achievement = 7;
  if (has_tracking_achievement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tracking_achievement(), target);
  }

  // optional uint32 achievement_goal = 8;
  if (has_achievement_goal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->achievement_goal(), target);
  }

  // optional uint32 achievement_level = 9;
  if (has_achievement_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->achievement_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASeasonAchievements.Achievement)
  return target;
}

int CMsgDOTASeasonAchievements_Achievement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string image = 3;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image());
    }

    // optional uint32 action_id = 4;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }

    // optional uint32 max_grants = 5;
    if (has_max_grants()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_grants());
    }

    // optional uint32 normal_points = 6;
    if (has_normal_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normal_points());
    }

    // optional uint32 tracking_achievement = 7;
    if (has_tracking_achievement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tracking_achievement());
    }

    // optional uint32 achievement_goal = 8;
    if (has_achievement_goal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievement_goal());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 achievement_level = 9;
    if (has_achievement_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievement_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTASeasonAchievements_Achievement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTASeasonAchievements_Achievement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTASeasonAchievements_Achievement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonAchievements_Achievement::MergeFrom(const CMsgDOTASeasonAchievements_Achievement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_image()) {
      set_image(from.image());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_max_grants()) {
      set_max_grants(from.max_grants());
    }
    if (from.has_normal_points()) {
      set_normal_points(from.normal_points());
    }
    if (from.has_tracking_achievement()) {
      set_tracking_achievement(from.tracking_achievement());
    }
    if (from.has_achievement_goal()) {
      set_achievement_goal(from.achievement_goal());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_achievement_level()) {
      set_achievement_level(from.achievement_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTASeasonAchievements_Achievement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonAchievements_Achievement::CopyFrom(const CMsgDOTASeasonAchievements_Achievement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonAchievements_Achievement::IsInitialized() const {

  return true;
}

void CMsgDOTASeasonAchievements_Achievement::Swap(CMsgDOTASeasonAchievements_Achievement* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(description_, other->description_);
    std::swap(image_, other->image_);
    std::swap(action_id_, other->action_id_);
    std::swap(max_grants_, other->max_grants_);
    std::swap(normal_points_, other->normal_points_);
    std::swap(tracking_achievement_, other->tracking_achievement_);
    std::swap(achievement_goal_, other->achievement_goal_);
    std::swap(achievement_level_, other->achievement_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTASeasonAchievements_Achievement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTASeasonAchievements_Achievement_descriptor_;
  metadata.reflection = CMsgDOTASeasonAchievements_Achievement_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTASeasonAchievements::kAchievementsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTASeasonAchievements::CMsgDOTASeasonAchievements()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTASeasonAchievements)
}

void CMsgDOTASeasonAchievements::InitAsDefaultInstance() {
}

CMsgDOTASeasonAchievements::CMsgDOTASeasonAchievements(const CMsgDOTASeasonAchievements& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASeasonAchievements)
}

void CMsgDOTASeasonAchievements::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTASeasonAchievements::~CMsgDOTASeasonAchievements() {
  // @@protoc_insertion_point(destructor:CMsgDOTASeasonAchievements)
  SharedDtor();
}

void CMsgDOTASeasonAchievements::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTASeasonAchievements::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTASeasonAchievements::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTASeasonAchievements_descriptor_;
}

const CMsgDOTASeasonAchievements& CMsgDOTASeasonAchievements::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTASeasonAchievements* CMsgDOTASeasonAchievements::default_instance_ = NULL;

CMsgDOTASeasonAchievements* CMsgDOTASeasonAchievements::New() const {
  return new CMsgDOTASeasonAchievements;
}

void CMsgDOTASeasonAchievements::Clear() {
  achievements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTASeasonAchievements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTASeasonAchievements)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgDOTASeasonAchievements.Achievement achievements = 1;
      case 1: {
        if (tag == 10) {
         parse_achievements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_achievements;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTASeasonAchievements)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTASeasonAchievements)
  return false;
#undef DO_
}

void CMsgDOTASeasonAchievements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTASeasonAchievements)
  // repeated .CMsgDOTASeasonAchievements.Achievement achievements = 1;
  for (int i = 0; i < this->achievements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->achievements(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTASeasonAchievements)
}

::google::protobuf::uint8* CMsgDOTASeasonAchievements::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASeasonAchievements)
  // repeated .CMsgDOTASeasonAchievements.Achievement achievements = 1;
  for (int i = 0; i < this->achievements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->achievements(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASeasonAchievements)
  return target;
}

int CMsgDOTASeasonAchievements::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgDOTASeasonAchievements.Achievement achievements = 1;
  total_size += 1 * this->achievements_size();
  for (int i = 0; i < this->achievements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievements(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTASeasonAchievements::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTASeasonAchievements* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTASeasonAchievements*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonAchievements::MergeFrom(const CMsgDOTASeasonAchievements& from) {
  GOOGLE_CHECK_NE(&from, this);
  achievements_.MergeFrom(from.achievements_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTASeasonAchievements::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonAchievements::CopyFrom(const CMsgDOTASeasonAchievements& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonAchievements::IsInitialized() const {

  return true;
}

void CMsgDOTASeasonAchievements::Swap(CMsgDOTASeasonAchievements* other) {
  if (other != this) {
    achievements_.Swap(&other->achievements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTASeasonAchievements::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTASeasonAchievements_descriptor_;
  metadata.reflection = CMsgDOTASeasonAchievements_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_ePredictionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTASeasonPredictions_ePredictionType_descriptor_;
}
bool CMsgDOTASeasonPredictions_ePredictionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions::Generic;
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions::Hero;
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions::Team;
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions::Player;
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions::Special;
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions::YesNo;
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions::ePredictionType_MIN;
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions::ePredictionType_MAX;
const int CMsgDOTASeasonPredictions::ePredictionType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_eAnswerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTASeasonPredictions_eAnswerType_descriptor_;
}
bool CMsgDOTASeasonPredictions_eAnswerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::SingleInt;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::SingleFloat;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::MultipleInt;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::MultipleFloat;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::AnswerTeam;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::SingleTime;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::MultipleTime;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::NoAnswer;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::eAnswerType_MIN;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::eAnswerType_MAX;
const int CMsgDOTASeasonPredictions::eAnswerType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_eResolutionType_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTASeasonPredictions_eResolutionType_t_descriptor_;
}
bool CMsgDOTASeasonPredictions_eResolutionType_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::InvalidQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::FirstToPassQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::LastToPassQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::LastRemainingQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::MaxToPassQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::MinToPassQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::SumQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::MaxTeamSumToPassQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::MinTeamSumToPassQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::eResolutionType_t_MIN;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::eResolutionType_t_MAX;
const int CMsgDOTASeasonPredictions::eResolutionType_t_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_descriptor_;
}
bool CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTASeasonPredictions_eRandomSelectionGroup_t CMsgDOTASeasonPredictions::EarlyGame;
const CMsgDOTASeasonPredictions_eRandomSelectionGroup_t CMsgDOTASeasonPredictions::MidGame;
const CMsgDOTASeasonPredictions_eRandomSelectionGroup_t CMsgDOTASeasonPredictions::LateGame;
const CMsgDOTASeasonPredictions_eRandomSelectionGroup_t CMsgDOTASeasonPredictions::Count;
const CMsgDOTASeasonPredictions_eRandomSelectionGroup_t CMsgDOTASeasonPredictions::eRandomSelectionGroup_t_MIN;
const CMsgDOTASeasonPredictions_eRandomSelectionGroup_t CMsgDOTASeasonPredictions::eRandomSelectionGroup_t_MAX;
const int CMsgDOTASeasonPredictions::eRandomSelectionGroup_t_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_eRawValueType_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTASeasonPredictions_eRawValueType_t_descriptor_;
}
bool CMsgDOTASeasonPredictions_eRawValueType_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTASeasonPredictions_eRawValueType_t CMsgDOTASeasonPredictions::Number;
const CMsgDOTASeasonPredictions_eRawValueType_t CMsgDOTASeasonPredictions::Time;
const CMsgDOTASeasonPredictions_eRawValueType_t CMsgDOTASeasonPredictions::eRawValueType_t_MIN;
const CMsgDOTASeasonPredictions_eRawValueType_t CMsgDOTASeasonPredictions::eRawValueType_t_MAX;
const int CMsgDOTASeasonPredictions::eRawValueType_t_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTASeasonPredictions_Choice::kValueFieldNumber;
const int CMsgDOTASeasonPredictions_Choice::kNameFieldNumber;
const int CMsgDOTASeasonPredictions_Choice::kMinRawValueFieldNumber;
const int CMsgDOTASeasonPredictions_Choice::kMaxRawValueFieldNumber;
#endif  // !_MSC_VER

CMsgDOTASeasonPredictions_Choice::CMsgDOTASeasonPredictions_Choice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTASeasonPredictions.Choice)
}

void CMsgDOTASeasonPredictions_Choice::InitAsDefaultInstance() {
}

CMsgDOTASeasonPredictions_Choice::CMsgDOTASeasonPredictions_Choice(const CMsgDOTASeasonPredictions_Choice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASeasonPredictions.Choice)
}

void CMsgDOTASeasonPredictions_Choice::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  min_raw_value_ = 0u;
  max_raw_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTASeasonPredictions_Choice::~CMsgDOTASeasonPredictions_Choice() {
  // @@protoc_insertion_point(destructor:CMsgDOTASeasonPredictions.Choice)
  SharedDtor();
}

void CMsgDOTASeasonPredictions_Choice::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTASeasonPredictions_Choice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTASeasonPredictions_Choice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTASeasonPredictions_Choice_descriptor_;
}

const CMsgDOTASeasonPredictions_Choice& CMsgDOTASeasonPredictions_Choice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTASeasonPredictions_Choice* CMsgDOTASeasonPredictions_Choice::default_instance_ = NULL;

CMsgDOTASeasonPredictions_Choice* CMsgDOTASeasonPredictions_Choice::New() const {
  return new CMsgDOTASeasonPredictions_Choice;
}

void CMsgDOTASeasonPredictions_Choice::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTASeasonPredictions_Choice*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(value_, max_raw_value_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTASeasonPredictions_Choice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTASeasonPredictions.Choice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_min_raw_value;
        break;
      }

      // optional uint32 min_raw_value = 3;
      case 3: {
        if (tag == 24) {
         parse_min_raw_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_raw_value_)));
          set_has_min_raw_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_raw_value;
        break;
      }

      // optional uint32 max_raw_value = 4;
      case 4: {
        if (tag == 32) {
         parse_max_raw_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_raw_value_)));
          set_has_max_raw_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTASeasonPredictions.Choice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTASeasonPredictions.Choice)
  return false;
#undef DO_
}

void CMsgDOTASeasonPredictions_Choice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTASeasonPredictions.Choice)
  // optional uint32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->value(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 min_raw_value = 3;
  if (has_min_raw_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->min_raw_value(), output);
  }

  // optional uint32 max_raw_value = 4;
  if (has_max_raw_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_raw_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTASeasonPredictions.Choice)
}

::google::protobuf::uint8* CMsgDOTASeasonPredictions_Choice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASeasonPredictions.Choice)
  // optional uint32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->value(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 min_raw_value = 3;
  if (has_min_raw_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->min_raw_value(), target);
  }

  // optional uint32 max_raw_value = 4;
  if (has_max_raw_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_raw_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASeasonPredictions.Choice)
  return target;
}

int CMsgDOTASeasonPredictions_Choice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 min_raw_value = 3;
    if (has_min_raw_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_raw_value());
    }

    // optional uint32 max_raw_value = 4;
    if (has_max_raw_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_raw_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTASeasonPredictions_Choice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTASeasonPredictions_Choice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTASeasonPredictions_Choice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonPredictions_Choice::MergeFrom(const CMsgDOTASeasonPredictions_Choice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_min_raw_value()) {
      set_min_raw_value(from.min_raw_value());
    }
    if (from.has_max_raw_value()) {
      set_max_raw_value(from.max_raw_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTASeasonPredictions_Choice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonPredictions_Choice::CopyFrom(const CMsgDOTASeasonPredictions_Choice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonPredictions_Choice::IsInitialized() const {

  return true;
}

void CMsgDOTASeasonPredictions_Choice::Swap(CMsgDOTASeasonPredictions_Choice* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(name_, other->name_);
    std::swap(min_raw_value_, other->min_raw_value_);
    std::swap(max_raw_value_, other->max_raw_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTASeasonPredictions_Choice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTASeasonPredictions_Choice_descriptor_;
  metadata.reflection = CMsgDOTASeasonPredictions_Choice_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTASeasonPredictions_Answers::kAnswerIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTASeasonPredictions_Answers::CMsgDOTASeasonPredictions_Answers()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTASeasonPredictions.Answers)
}

void CMsgDOTASeasonPredictions_Answers::InitAsDefaultInstance() {
}

CMsgDOTASeasonPredictions_Answers::CMsgDOTASeasonPredictions_Answers(const CMsgDOTASeasonPredictions_Answers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASeasonPredictions.Answers)
}

void CMsgDOTASeasonPredictions_Answers::SharedCtor() {
  _cached_size_ = 0;
  answer_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTASeasonPredictions_Answers::~CMsgDOTASeasonPredictions_Answers() {
  // @@protoc_insertion_point(destructor:CMsgDOTASeasonPredictions.Answers)
  SharedDtor();
}

void CMsgDOTASeasonPredictions_Answers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTASeasonPredictions_Answers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTASeasonPredictions_Answers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTASeasonPredictions_Answers_descriptor_;
}

const CMsgDOTASeasonPredictions_Answers& CMsgDOTASeasonPredictions_Answers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTASeasonPredictions_Answers* CMsgDOTASeasonPredictions_Answers::default_instance_ = NULL;

CMsgDOTASeasonPredictions_Answers* CMsgDOTASeasonPredictions_Answers::New() const {
  return new CMsgDOTASeasonPredictions_Answers;
}

void CMsgDOTASeasonPredictions_Answers::Clear() {
  answer_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTASeasonPredictions_Answers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTASeasonPredictions.Answers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 answer_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &answer_id_)));
          set_has_answer_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTASeasonPredictions.Answers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTASeasonPredictions.Answers)
  return false;
#undef DO_
}

void CMsgDOTASeasonPredictions_Answers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTASeasonPredictions.Answers)
  // optional uint32 answer_id = 1;
  if (has_answer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->answer_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTASeasonPredictions.Answers)
}

::google::protobuf::uint8* CMsgDOTASeasonPredictions_Answers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASeasonPredictions.Answers)
  // optional uint32 answer_id = 1;
  if (has_answer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->answer_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASeasonPredictions.Answers)
  return target;
}

int CMsgDOTASeasonPredictions_Answers::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 answer_id = 1;
    if (has_answer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->answer_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTASeasonPredictions_Answers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTASeasonPredictions_Answers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTASeasonPredictions_Answers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonPredictions_Answers::MergeFrom(const CMsgDOTASeasonPredictions_Answers& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_answer_id()) {
      set_answer_id(from.answer_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTASeasonPredictions_Answers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonPredictions_Answers::CopyFrom(const CMsgDOTASeasonPredictions_Answers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonPredictions_Answers::IsInitialized() const {

  return true;
}

void CMsgDOTASeasonPredictions_Answers::Swap(CMsgDOTASeasonPredictions_Answers* other) {
  if (other != this) {
    std::swap(answer_id_, other->answer_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTASeasonPredictions_Answers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTASeasonPredictions_Answers_descriptor_;
  metadata.reflection = CMsgDOTASeasonPredictions_Answers_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTASeasonPredictions_QueryKeyValues::kNameFieldNumber;
const int CMsgDOTASeasonPredictions_QueryKeyValues::kValueFieldNumber;
#endif  // !_MSC_VER

CMsgDOTASeasonPredictions_QueryKeyValues::CMsgDOTASeasonPredictions_QueryKeyValues()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTASeasonPredictions.QueryKeyValues)
}

void CMsgDOTASeasonPredictions_QueryKeyValues::InitAsDefaultInstance() {
}

CMsgDOTASeasonPredictions_QueryKeyValues::CMsgDOTASeasonPredictions_QueryKeyValues(const CMsgDOTASeasonPredictions_QueryKeyValues& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASeasonPredictions.QueryKeyValues)
}

void CMsgDOTASeasonPredictions_QueryKeyValues::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTASeasonPredictions_QueryKeyValues::~CMsgDOTASeasonPredictions_QueryKeyValues() {
  // @@protoc_insertion_point(destructor:CMsgDOTASeasonPredictions.QueryKeyValues)
  SharedDtor();
}

void CMsgDOTASeasonPredictions_QueryKeyValues::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTASeasonPredictions_QueryKeyValues::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTASeasonPredictions_QueryKeyValues::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTASeasonPredictions_QueryKeyValues_descriptor_;
}

const CMsgDOTASeasonPredictions_QueryKeyValues& CMsgDOTASeasonPredictions_QueryKeyValues::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTASeasonPredictions_QueryKeyValues* CMsgDOTASeasonPredictions_QueryKeyValues::default_instance_ = NULL;

CMsgDOTASeasonPredictions_QueryKeyValues* CMsgDOTASeasonPredictions_QueryKeyValues::New() const {
  return new CMsgDOTASeasonPredictions_QueryKeyValues;
}

void CMsgDOTASeasonPredictions_QueryKeyValues::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTASeasonPredictions_QueryKeyValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTASeasonPredictions.QueryKeyValues)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTASeasonPredictions.QueryKeyValues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTASeasonPredictions.QueryKeyValues)
  return false;
#undef DO_
}

void CMsgDOTASeasonPredictions_QueryKeyValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTASeasonPredictions.QueryKeyValues)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTASeasonPredictions.QueryKeyValues)
}

::google::protobuf::uint8* CMsgDOTASeasonPredictions_QueryKeyValues::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASeasonPredictions.QueryKeyValues)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASeasonPredictions.QueryKeyValues)
  return target;
}

int CMsgDOTASeasonPredictions_QueryKeyValues::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTASeasonPredictions_QueryKeyValues::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTASeasonPredictions_QueryKeyValues* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTASeasonPredictions_QueryKeyValues*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonPredictions_QueryKeyValues::MergeFrom(const CMsgDOTASeasonPredictions_QueryKeyValues& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTASeasonPredictions_QueryKeyValues::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonPredictions_QueryKeyValues::CopyFrom(const CMsgDOTASeasonPredictions_QueryKeyValues& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonPredictions_QueryKeyValues::IsInitialized() const {

  return true;
}

void CMsgDOTASeasonPredictions_QueryKeyValues::Swap(CMsgDOTASeasonPredictions_QueryKeyValues* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTASeasonPredictions_QueryKeyValues::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTASeasonPredictions_QueryKeyValues_descriptor_;
  metadata.reflection = CMsgDOTASeasonPredictions_QueryKeyValues_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTASeasonPredictions_Prediction::kTypeFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kQuestionFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kChoicesFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kSelectionIdFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kStartDateFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kLockDateFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kRewardFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kAnswerTypeFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kAnswerIdFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kAnswersFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kQueryNameFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kQueryBindParamsFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kLockOnSelectionIdFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kLockOnSelectionValueFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kLockOnSelectionSetFieldNumber;
#endif  // !_MSC_VER

CMsgDOTASeasonPredictions_Prediction::CMsgDOTASeasonPredictions_Prediction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTASeasonPredictions.Prediction)
}

void CMsgDOTASeasonPredictions_Prediction::InitAsDefaultInstance() {
}

CMsgDOTASeasonPredictions_Prediction::CMsgDOTASeasonPredictions_Prediction(const CMsgDOTASeasonPredictions_Prediction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASeasonPredictions.Prediction)
}

void CMsgDOTASeasonPredictions_Prediction::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  question_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  selection_id_ = 0u;
  start_date_ = 0u;
  lock_date_ = 0u;
  reward_ = 0u;
  answer_type_ = 0;
  answer_id_ = 0u;
  query_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_on_selection_id_ = 0u;
  lock_on_selection_value_ = 0u;
  lock_on_selection_set_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTASeasonPredictions_Prediction::~CMsgDOTASeasonPredictions_Prediction() {
  // @@protoc_insertion_point(destructor:CMsgDOTASeasonPredictions.Prediction)
  SharedDtor();
}

void CMsgDOTASeasonPredictions_Prediction::SharedDtor() {
  if (question_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete question_;
  }
  if (query_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete query_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTASeasonPredictions_Prediction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTASeasonPredictions_Prediction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTASeasonPredictions_Prediction_descriptor_;
}

const CMsgDOTASeasonPredictions_Prediction& CMsgDOTASeasonPredictions_Prediction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTASeasonPredictions_Prediction* CMsgDOTASeasonPredictions_Prediction::default_instance_ = NULL;

CMsgDOTASeasonPredictions_Prediction* CMsgDOTASeasonPredictions_Prediction::New() const {
  return new CMsgDOTASeasonPredictions_Prediction;
}

void CMsgDOTASeasonPredictions_Prediction::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTASeasonPredictions_Prediction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 251) {
    ZR_(type_, selection_id_);
    ZR_(start_date_, answer_type_);
    if (has_question()) {
      if (question_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        question_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 29952) {
    ZR_(answer_id_, lock_on_selection_id_);
    ZR_(lock_on_selection_value_, lock_on_selection_set_);
    if (has_query_name()) {
      if (query_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        query_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  choices_.Clear();
  answers_.Clear();
  query_bind_params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTASeasonPredictions_Prediction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTASeasonPredictions.Prediction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTASeasonPredictions.ePredictionType type = 1 [default = Generic];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTASeasonPredictions_ePredictionType_IsValid(value)) {
            set_type(static_cast< ::CMsgDOTASeasonPredictions_ePredictionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_question;
        break;
      }

      // optional string question = 2;
      case 2: {
        if (tag == 18) {
         parse_question:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_question()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->question().data(), this->question().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "question");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_choices;
        break;
      }

      // repeated .CMsgDOTASeasonPredictions.Choice choices = 3;
      case 3: {
        if (tag == 26) {
         parse_choices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_choices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_choices;
        if (input->ExpectTag(32)) goto parse_selection_id;
        break;
      }

      // optional uint32 selection_id = 4;
      case 4: {
        if (tag == 32) {
         parse_selection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selection_id_)));
          set_has_selection_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_start_date;
        break;
      }

      // optional uint32 start_date = 5;
      case 5: {
        if (tag == 40) {
         parse_start_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_date_)));
          set_has_start_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_lock_date;
        break;
      }

      // optional uint32 lock_date = 6;
      case 6: {
        if (tag == 48) {
         parse_lock_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lock_date_)));
          set_has_lock_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_reward;
        break;
      }

      // optional uint32 reward = 7;
      case 7: {
        if (tag == 56) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_answer_type;
        break;
      }

      // optional .CMsgDOTASeasonPredictions.eAnswerType answer_type = 8 [default = SingleInt];
      case 8: {
        if (tag == 64) {
         parse_answer_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTASeasonPredictions_eAnswerType_IsValid(value)) {
            set_answer_type(static_cast< ::CMsgDOTASeasonPredictions_eAnswerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_answer_id;
        break;
      }

      // optional uint32 answer_id = 9;
      case 9: {
        if (tag == 72) {
         parse_answer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &answer_id_)));
          set_has_answer_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_answers;
        break;
      }

      // repeated .CMsgDOTASeasonPredictions.Answers answers = 10;
      case 10: {
        if (tag == 82) {
         parse_answers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_answers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_answers;
        if (input->ExpectTag(90)) goto parse_query_name;
        break;
      }

      // optional string query_name = 11;
      case 11: {
        if (tag == 90) {
         parse_query_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query_name().data(), this->query_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "query_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_query_bind_params;
        break;
      }

      // repeated uint32 query_bind_params = 12;
      case 12: {
        if (tag == 96) {
         parse_query_bind_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96, input, this->mutable_query_bind_params())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_query_bind_params())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_query_bind_params;
        if (input->ExpectTag(104)) goto parse_lock_on_selection_id;
        break;
      }

      // optional uint32 lock_on_selection_id = 13;
      case 13: {
        if (tag == 104) {
         parse_lock_on_selection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lock_on_selection_id_)));
          set_has_lock_on_selection_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_lock_on_selection_value;
        break;
      }

      // optional uint32 lock_on_selection_value = 14;
      case 14: {
        if (tag == 112) {
         parse_lock_on_selection_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lock_on_selection_value_)));
          set_has_lock_on_selection_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_lock_on_selection_set;
        break;
      }

      // optional bool lock_on_selection_set = 15;
      case 15: {
        if (tag == 120) {
         parse_lock_on_selection_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lock_on_selection_set_)));
          set_has_lock_on_selection_set();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTASeasonPredictions.Prediction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTASeasonPredictions.Prediction)
  return false;
#undef DO_
}

void CMsgDOTASeasonPredictions_Prediction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTASeasonPredictions.Prediction)
  // optional .CMsgDOTASeasonPredictions.ePredictionType type = 1 [default = Generic];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string question = 2;
  if (has_question()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->question().data(), this->question().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "question");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->question(), output);
  }

  // repeated .CMsgDOTASeasonPredictions.Choice choices = 3;
  for (int i = 0; i < this->choices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->choices(i), output);
  }

  // optional uint32 selection_id = 4;
  if (has_selection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->selection_id(), output);
  }

  // optional uint32 start_date = 5;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->start_date(), output);
  }

  // optional uint32 lock_date = 6;
  if (has_lock_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lock_date(), output);
  }

  // optional uint32 reward = 7;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->reward(), output);
  }

  // optional .CMsgDOTASeasonPredictions.eAnswerType answer_type = 8 [default = SingleInt];
  if (has_answer_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->answer_type(), output);
  }

  // optional uint32 answer_id = 9;
  if (has_answer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->answer_id(), output);
  }

  // repeated .CMsgDOTASeasonPredictions.Answers answers = 10;
  for (int i = 0; i < this->answers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->answers(i), output);
  }

  // optional string query_name = 11;
  if (has_query_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_name().data(), this->query_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "query_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->query_name(), output);
  }

  // repeated uint32 query_bind_params = 12;
  for (int i = 0; i < this->query_bind_params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->query_bind_params(i), output);
  }

  // optional uint32 lock_on_selection_id = 13;
  if (has_lock_on_selection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->lock_on_selection_id(), output);
  }

  // optional uint32 lock_on_selection_value = 14;
  if (has_lock_on_selection_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->lock_on_selection_value(), output);
  }

  // optional bool lock_on_selection_set = 15;
  if (has_lock_on_selection_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->lock_on_selection_set(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTASeasonPredictions.Prediction)
}

::google::protobuf::uint8* CMsgDOTASeasonPredictions_Prediction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASeasonPredictions.Prediction)
  // optional .CMsgDOTASeasonPredictions.ePredictionType type = 1 [default = Generic];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string question = 2;
  if (has_question()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->question().data(), this->question().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "question");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->question(), target);
  }

  // repeated .CMsgDOTASeasonPredictions.Choice choices = 3;
  for (int i = 0; i < this->choices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->choices(i), target);
  }

  // optional uint32 selection_id = 4;
  if (has_selection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->selection_id(), target);
  }

  // optional uint32 start_date = 5;
  if (has_start_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->start_date(), target);
  }

  // optional uint32 lock_date = 6;
  if (has_lock_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->lock_date(), target);
  }

  // optional uint32 reward = 7;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->reward(), target);
  }

  // optional .CMsgDOTASeasonPredictions.eAnswerType answer_type = 8 [default = SingleInt];
  if (has_answer_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->answer_type(), target);
  }

  // optional uint32 answer_id = 9;
  if (has_answer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->answer_id(), target);
  }

  // repeated .CMsgDOTASeasonPredictions.Answers answers = 10;
  for (int i = 0; i < this->answers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->answers(i), target);
  }

  // optional string query_name = 11;
  if (has_query_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_name().data(), this->query_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "query_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->query_name(), target);
  }

  // repeated uint32 query_bind_params = 12;
  for (int i = 0; i < this->query_bind_params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(12, this->query_bind_params(i), target);
  }

  // optional uint32 lock_on_selection_id = 13;
  if (has_lock_on_selection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->lock_on_selection_id(), target);
  }

  // optional uint32 lock_on_selection_value = 14;
  if (has_lock_on_selection_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->lock_on_selection_value(), target);
  }

  // optional bool lock_on_selection_set = 15;
  if (has_lock_on_selection_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->lock_on_selection_set(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASeasonPredictions.Prediction)
  return target;
}

int CMsgDOTASeasonPredictions_Prediction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgDOTASeasonPredictions.ePredictionType type = 1 [default = Generic];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string question = 2;
    if (has_question()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->question());
    }

    // optional uint32 selection_id = 4;
    if (has_selection_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selection_id());
    }

    // optional uint32 start_date = 5;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_date());
    }

    // optional uint32 lock_date = 6;
    if (has_lock_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lock_date());
    }

    // optional uint32 reward = 7;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward());
    }

    // optional .CMsgDOTASeasonPredictions.eAnswerType answer_type = 8 [default = SingleInt];
    if (has_answer_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->answer_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 answer_id = 9;
    if (has_answer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->answer_id());
    }

    // optional string query_name = 11;
    if (has_query_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query_name());
    }

    // optional uint32 lock_on_selection_id = 13;
    if (has_lock_on_selection_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lock_on_selection_id());
    }

    // optional uint32 lock_on_selection_value = 14;
    if (has_lock_on_selection_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lock_on_selection_value());
    }

    // optional bool lock_on_selection_set = 15;
    if (has_lock_on_selection_set()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CMsgDOTASeasonPredictions.Choice choices = 3;
  total_size += 1 * this->choices_size();
  for (int i = 0; i < this->choices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->choices(i));
  }

  // repeated .CMsgDOTASeasonPredictions.Answers answers = 10;
  total_size += 1 * this->answers_size();
  for (int i = 0; i < this->answers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->answers(i));
  }

  // repeated uint32 query_bind_params = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->query_bind_params_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->query_bind_params(i));
    }
    total_size += 1 * this->query_bind_params_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTASeasonPredictions_Prediction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTASeasonPredictions_Prediction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTASeasonPredictions_Prediction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonPredictions_Prediction::MergeFrom(const CMsgDOTASeasonPredictions_Prediction& from) {
  GOOGLE_CHECK_NE(&from, this);
  choices_.MergeFrom(from.choices_);
  answers_.MergeFrom(from.answers_);
  query_bind_params_.MergeFrom(from.query_bind_params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_question()) {
      set_question(from.question());
    }
    if (from.has_selection_id()) {
      set_selection_id(from.selection_id());
    }
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_lock_date()) {
      set_lock_date(from.lock_date());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_answer_type()) {
      set_answer_type(from.answer_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_answer_id()) {
      set_answer_id(from.answer_id());
    }
    if (from.has_query_name()) {
      set_query_name(from.query_name());
    }
    if (from.has_lock_on_selection_id()) {
      set_lock_on_selection_id(from.lock_on_selection_id());
    }
    if (from.has_lock_on_selection_value()) {
      set_lock_on_selection_value(from.lock_on_selection_value());
    }
    if (from.has_lock_on_selection_set()) {
      set_lock_on_selection_set(from.lock_on_selection_set());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTASeasonPredictions_Prediction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonPredictions_Prediction::CopyFrom(const CMsgDOTASeasonPredictions_Prediction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonPredictions_Prediction::IsInitialized() const {

  return true;
}

void CMsgDOTASeasonPredictions_Prediction::Swap(CMsgDOTASeasonPredictions_Prediction* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(question_, other->question_);
    choices_.Swap(&other->choices_);
    std::swap(selection_id_, other->selection_id_);
    std::swap(start_date_, other->start_date_);
    std::swap(lock_date_, other->lock_date_);
    std::swap(reward_, other->reward_);
    std::swap(answer_type_, other->answer_type_);
    std::swap(answer_id_, other->answer_id_);
    answers_.Swap(&other->answers_);
    std::swap(query_name_, other->query_name_);
    query_bind_params_.Swap(&other->query_bind_params_);
    std::swap(lock_on_selection_id_, other->lock_on_selection_id_);
    std::swap(lock_on_selection_value_, other->lock_on_selection_value_);
    std::swap(lock_on_selection_set_, other->lock_on_selection_set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTASeasonPredictions_Prediction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTASeasonPredictions_Prediction_descriptor_;
  metadata.reflection = CMsgDOTASeasonPredictions_Prediction_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTASeasonPredictions_InGamePrediction::kIdFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kNameFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kTypeFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kGroupFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kQuestionFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kChoicesFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kRequiredHeroesFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kQueryNameFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kQueryValuesFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kAnswerResolutionTypeFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kPointsToGrantFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kRewardActionFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kDebugForceSelectionFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kRawValueTypeFieldNumber;
#endif  // !_MSC_VER

CMsgDOTASeasonPredictions_InGamePrediction::CMsgDOTASeasonPredictions_InGamePrediction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTASeasonPredictions.InGamePrediction)
}

void CMsgDOTASeasonPredictions_InGamePrediction::InitAsDefaultInstance() {
}

CMsgDOTASeasonPredictions_InGamePrediction::CMsgDOTASeasonPredictions_InGamePrediction(const CMsgDOTASeasonPredictions_InGamePrediction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASeasonPredictions.InGamePrediction)
}

void CMsgDOTASeasonPredictions_InGamePrediction::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  group_ = 0;
  question_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  answer_resolution_type_ = 0;
  points_to_grant_ = 0u;
  reward_action_ = 0u;
  debug_force_selection_ = 0u;
  raw_value_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTASeasonPredictions_InGamePrediction::~CMsgDOTASeasonPredictions_InGamePrediction() {
  // @@protoc_insertion_point(destructor:CMsgDOTASeasonPredictions.InGamePrediction)
  SharedDtor();
}

void CMsgDOTASeasonPredictions_InGamePrediction::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (question_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete question_;
  }
  if (query_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete query_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTASeasonPredictions_InGamePrediction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTASeasonPredictions_InGamePrediction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTASeasonPredictions_InGamePrediction_descriptor_;
}

const CMsgDOTASeasonPredictions_InGamePrediction& CMsgDOTASeasonPredictions_InGamePrediction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTASeasonPredictions_InGamePrediction* CMsgDOTASeasonPredictions_InGamePrediction::default_instance_ = NULL;

CMsgDOTASeasonPredictions_InGamePrediction* CMsgDOTASeasonPredictions_InGamePrediction::New() const {
  return new CMsgDOTASeasonPredictions_InGamePrediction;
}

void CMsgDOTASeasonPredictions_InGamePrediction::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTASeasonPredictions_InGamePrediction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 159) {
    ZR_(id_, type_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    group_ = 0;
    if (has_question()) {
      if (question_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        question_->clear();
      }
    }
    if (has_query_name()) {
      if (query_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        query_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 15872) {
    ZR_(points_to_grant_, raw_value_type_);
    answer_resolution_type_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  choices_.Clear();
  required_heroes_.Clear();
  query_values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTASeasonPredictions_InGamePrediction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTASeasonPredictions.InGamePrediction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .CMsgDOTASeasonPredictions.ePredictionType type = 3 [default = Generic];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTASeasonPredictions_ePredictionType_IsValid(value)) {
            set_type(static_cast< ::CMsgDOTASeasonPredictions_ePredictionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_group;
        break;
      }

      // optional .CMsgDOTASeasonPredictions.eRandomSelectionGroup_t group = 4 [default = EarlyGame];
      case 4: {
        if (tag == 32) {
         parse_group:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_IsValid(value)) {
            set_group(static_cast< ::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_question;
        break;
      }

      // optional string question = 5;
      case 5: {
        if (tag == 42) {
         parse_question:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_question()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->question().data(), this->question().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "question");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_choices;
        break;
      }

      // repeated .CMsgDOTASeasonPredictions.Choice choices = 6;
      case 6: {
        if (tag == 50) {
         parse_choices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_choices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_choices;
        if (input->ExpectTag(58)) goto parse_required_heroes;
        break;
      }

      // repeated string required_heroes = 7;
      case 7: {
        if (tag == 58) {
         parse_required_heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_required_heroes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->required_heroes(this->required_heroes_size() - 1).data(),
            this->required_heroes(this->required_heroes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "required_heroes");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_required_heroes;
        if (input->ExpectTag(66)) goto parse_query_name;
        break;
      }

      // optional string query_name = 8;
      case 8: {
        if (tag == 66) {
         parse_query_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query_name().data(), this->query_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "query_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_query_values;
        break;
      }

      // repeated .CMsgDOTASeasonPredictions.QueryKeyValues query_values = 9;
      case 9: {
        if (tag == 74) {
         parse_query_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_query_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_query_values;
        if (input->ExpectTag(80)) goto parse_answer_resolution_type;
        break;
      }

      // optional .CMsgDOTASeasonPredictions.eResolutionType_t answer_resolution_type = 10 [default = InvalidQuery];
      case 10: {
        if (tag == 80) {
         parse_answer_resolution_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTASeasonPredictions_eResolutionType_t_IsValid(value)) {
            set_answer_resolution_type(static_cast< ::CMsgDOTASeasonPredictions_eResolutionType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_points_to_grant;
        break;
      }

      // optional uint32 points_to_grant = 11;
      case 11: {
        if (tag == 88) {
         parse_points_to_grant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_to_grant_)));
          set_has_points_to_grant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_reward_action;
        break;
      }

      // optional uint32 reward_action = 12;
      case 12: {
        if (tag == 96) {
         parse_reward_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_action_)));
          set_has_reward_action();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_debug_force_selection;
        break;
      }

      // optional uint32 debug_force_selection = 13;
      case 13: {
        if (tag == 104) {
         parse_debug_force_selection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &debug_force_selection_)));
          set_has_debug_force_selection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_raw_value_type;
        break;
      }

      // optional .CMsgDOTASeasonPredictions.eRawValueType_t raw_value_type = 14 [default = Number];
      case 14: {
        if (tag == 112) {
         parse_raw_value_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTASeasonPredictions_eRawValueType_t_IsValid(value)) {
            set_raw_value_type(static_cast< ::CMsgDOTASeasonPredictions_eRawValueType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTASeasonPredictions.InGamePrediction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTASeasonPredictions.InGamePrediction)
  return false;
#undef DO_
}

void CMsgDOTASeasonPredictions_InGamePrediction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTASeasonPredictions.InGamePrediction)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .CMsgDOTASeasonPredictions.ePredictionType type = 3 [default = Generic];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .CMsgDOTASeasonPredictions.eRandomSelectionGroup_t group = 4 [default = EarlyGame];
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->group(), output);
  }

  // optional string question = 5;
  if (has_question()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->question().data(), this->question().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "question");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->question(), output);
  }

  // repeated .CMsgDOTASeasonPredictions.Choice choices = 6;
  for (int i = 0; i < this->choices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->choices(i), output);
  }

  // repeated string required_heroes = 7;
  for (int i = 0; i < this->required_heroes_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->required_heroes(i).data(), this->required_heroes(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "required_heroes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->required_heroes(i), output);
  }

  // optional string query_name = 8;
  if (has_query_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_name().data(), this->query_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "query_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->query_name(), output);
  }

  // repeated .CMsgDOTASeasonPredictions.QueryKeyValues query_values = 9;
  for (int i = 0; i < this->query_values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->query_values(i), output);
  }

  // optional .CMsgDOTASeasonPredictions.eResolutionType_t answer_resolution_type = 10 [default = InvalidQuery];
  if (has_answer_resolution_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->answer_resolution_type(), output);
  }

  // optional uint32 points_to_grant = 11;
  if (has_points_to_grant()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->points_to_grant(), output);
  }

  // optional uint32 reward_action = 12;
  if (has_reward_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->reward_action(), output);
  }

  // optional uint32 debug_force_selection = 13;
  if (has_debug_force_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->debug_force_selection(), output);
  }

  // optional .CMsgDOTASeasonPredictions.eRawValueType_t raw_value_type = 14 [default = Number];
  if (has_raw_value_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->raw_value_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTASeasonPredictions.InGamePrediction)
}

::google::protobuf::uint8* CMsgDOTASeasonPredictions_InGamePrediction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASeasonPredictions.InGamePrediction)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .CMsgDOTASeasonPredictions.ePredictionType type = 3 [default = Generic];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .CMsgDOTASeasonPredictions.eRandomSelectionGroup_t group = 4 [default = EarlyGame];
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->group(), target);
  }

  // optional string question = 5;
  if (has_question()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->question().data(), this->question().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "question");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->question(), target);
  }

  // repeated .CMsgDOTASeasonPredictions.Choice choices = 6;
  for (int i = 0; i < this->choices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->choices(i), target);
  }

  // repeated string required_heroes = 7;
  for (int i = 0; i < this->required_heroes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->required_heroes(i).data(), this->required_heroes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "required_heroes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->required_heroes(i), target);
  }

  // optional string query_name = 8;
  if (has_query_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_name().data(), this->query_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "query_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->query_name(), target);
  }

  // repeated .CMsgDOTASeasonPredictions.QueryKeyValues query_values = 9;
  for (int i = 0; i < this->query_values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->query_values(i), target);
  }

  // optional .CMsgDOTASeasonPredictions.eResolutionType_t answer_resolution_type = 10 [default = InvalidQuery];
  if (has_answer_resolution_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->answer_resolution_type(), target);
  }

  // optional uint32 points_to_grant = 11;
  if (has_points_to_grant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->points_to_grant(), target);
  }

  // optional uint32 reward_action = 12;
  if (has_reward_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->reward_action(), target);
  }

  // optional uint32 debug_force_selection = 13;
  if (has_debug_force_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->debug_force_selection(), target);
  }

  // optional .CMsgDOTASeasonPredictions.eRawValueType_t raw_value_type = 14 [default = Number];
  if (has_raw_value_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->raw_value_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASeasonPredictions.InGamePrediction)
  return target;
}

int CMsgDOTASeasonPredictions_InGamePrediction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .CMsgDOTASeasonPredictions.ePredictionType type = 3 [default = Generic];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .CMsgDOTASeasonPredictions.eRandomSelectionGroup_t group = 4 [default = EarlyGame];
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group());
    }

    // optional string question = 5;
    if (has_question()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->question());
    }

    // optional string query_name = 8;
    if (has_query_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query_name());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional .CMsgDOTASeasonPredictions.eResolutionType_t answer_resolution_type = 10 [default = InvalidQuery];
    if (has_answer_resolution_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->answer_resolution_type());
    }

    // optional uint32 points_to_grant = 11;
    if (has_points_to_grant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points_to_grant());
    }

    // optional uint32 reward_action = 12;
    if (has_reward_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_action());
    }

    // optional uint32 debug_force_selection = 13;
    if (has_debug_force_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->debug_force_selection());
    }

    // optional .CMsgDOTASeasonPredictions.eRawValueType_t raw_value_type = 14 [default = Number];
    if (has_raw_value_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->raw_value_type());
    }

  }
  // repeated .CMsgDOTASeasonPredictions.Choice choices = 6;
  total_size += 1 * this->choices_size();
  for (int i = 0; i < this->choices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->choices(i));
  }

  // repeated string required_heroes = 7;
  total_size += 1 * this->required_heroes_size();
  for (int i = 0; i < this->required_heroes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->required_heroes(i));
  }

  // repeated .CMsgDOTASeasonPredictions.QueryKeyValues query_values = 9;
  total_size += 1 * this->query_values_size();
  for (int i = 0; i < this->query_values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->query_values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTASeasonPredictions_InGamePrediction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTASeasonPredictions_InGamePrediction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTASeasonPredictions_InGamePrediction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonPredictions_InGamePrediction::MergeFrom(const CMsgDOTASeasonPredictions_InGamePrediction& from) {
  GOOGLE_CHECK_NE(&from, this);
  choices_.MergeFrom(from.choices_);
  required_heroes_.MergeFrom(from.required_heroes_);
  query_values_.MergeFrom(from.query_values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_question()) {
      set_question(from.question());
    }
    if (from.has_query_name()) {
      set_query_name(from.query_name());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_answer_resolution_type()) {
      set_answer_resolution_type(from.answer_resolution_type());
    }
    if (from.has_points_to_grant()) {
      set_points_to_grant(from.points_to_grant());
    }
    if (from.has_reward_action()) {
      set_reward_action(from.reward_action());
    }
    if (from.has_debug_force_selection()) {
      set_debug_force_selection(from.debug_force_selection());
    }
    if (from.has_raw_value_type()) {
      set_raw_value_type(from.raw_value_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTASeasonPredictions_InGamePrediction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonPredictions_InGamePrediction::CopyFrom(const CMsgDOTASeasonPredictions_InGamePrediction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonPredictions_InGamePrediction::IsInitialized() const {

  return true;
}

void CMsgDOTASeasonPredictions_InGamePrediction::Swap(CMsgDOTASeasonPredictions_InGamePrediction* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(group_, other->group_);
    std::swap(question_, other->question_);
    choices_.Swap(&other->choices_);
    required_heroes_.Swap(&other->required_heroes_);
    std::swap(query_name_, other->query_name_);
    query_values_.Swap(&other->query_values_);
    std::swap(answer_resolution_type_, other->answer_resolution_type_);
    std::swap(points_to_grant_, other->points_to_grant_);
    std::swap(reward_action_, other->reward_action_);
    std::swap(debug_force_selection_, other->debug_force_selection_);
    std::swap(raw_value_type_, other->raw_value_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTASeasonPredictions_InGamePrediction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTASeasonPredictions_InGamePrediction_descriptor_;
  metadata.reflection = CMsgDOTASeasonPredictions_InGamePrediction_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTASeasonPredictions::kPredictionsFieldNumber;
const int CMsgDOTASeasonPredictions::kInGamePredictionsFieldNumber;
const int CMsgDOTASeasonPredictions::kInGamePredictionCountPerGameFieldNumber;
const int CMsgDOTASeasonPredictions::kInGamePredictionVotingPeriodMinutesFieldNumber;
#endif  // !_MSC_VER

CMsgDOTASeasonPredictions::CMsgDOTASeasonPredictions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTASeasonPredictions)
}

void CMsgDOTASeasonPredictions::InitAsDefaultInstance() {
}

CMsgDOTASeasonPredictions::CMsgDOTASeasonPredictions(const CMsgDOTASeasonPredictions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASeasonPredictions)
}

void CMsgDOTASeasonPredictions::SharedCtor() {
  _cached_size_ = 0;
  in_game_prediction_count_per_game_ = 0u;
  in_game_prediction_voting_period_minutes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTASeasonPredictions::~CMsgDOTASeasonPredictions() {
  // @@protoc_insertion_point(destructor:CMsgDOTASeasonPredictions)
  SharedDtor();
}

void CMsgDOTASeasonPredictions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTASeasonPredictions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTASeasonPredictions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTASeasonPredictions_descriptor_;
}

const CMsgDOTASeasonPredictions& CMsgDOTASeasonPredictions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTASeasonPredictions* CMsgDOTASeasonPredictions::default_instance_ = NULL;

CMsgDOTASeasonPredictions* CMsgDOTASeasonPredictions::New() const {
  return new CMsgDOTASeasonPredictions;
}

void CMsgDOTASeasonPredictions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTASeasonPredictions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(in_game_prediction_count_per_game_, in_game_prediction_voting_period_minutes_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  predictions_.Clear();
  in_game_predictions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTASeasonPredictions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTASeasonPredictions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgDOTASeasonPredictions.Prediction predictions = 1;
      case 1: {
        if (tag == 10) {
         parse_predictions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_predictions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_predictions;
        if (input->ExpectTag(18)) goto parse_in_game_predictions;
        break;
      }

      // repeated .CMsgDOTASeasonPredictions.InGamePrediction in_game_predictions = 2;
      case 2: {
        if (tag == 18) {
         parse_in_game_predictions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_in_game_predictions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_in_game_predictions;
        if (input->ExpectTag(24)) goto parse_in_game_prediction_count_per_game;
        break;
      }

      // optional uint32 in_game_prediction_count_per_game = 3;
      case 3: {
        if (tag == 24) {
         parse_in_game_prediction_count_per_game:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_game_prediction_count_per_game_)));
          set_has_in_game_prediction_count_per_game();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_in_game_prediction_voting_period_minutes;
        break;
      }

      // optional uint32 in_game_prediction_voting_period_minutes = 4;
      case 4: {
        if (tag == 32) {
         parse_in_game_prediction_voting_period_minutes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_game_prediction_voting_period_minutes_)));
          set_has_in_game_prediction_voting_period_minutes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTASeasonPredictions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTASeasonPredictions)
  return false;
#undef DO_
}

void CMsgDOTASeasonPredictions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTASeasonPredictions)
  // repeated .CMsgDOTASeasonPredictions.Prediction predictions = 1;
  for (int i = 0; i < this->predictions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->predictions(i), output);
  }

  // repeated .CMsgDOTASeasonPredictions.InGamePrediction in_game_predictions = 2;
  for (int i = 0; i < this->in_game_predictions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->in_game_predictions(i), output);
  }

  // optional uint32 in_game_prediction_count_per_game = 3;
  if (has_in_game_prediction_count_per_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->in_game_prediction_count_per_game(), output);
  }

  // optional uint32 in_game_prediction_voting_period_minutes = 4;
  if (has_in_game_prediction_voting_period_minutes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->in_game_prediction_voting_period_minutes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTASeasonPredictions)
}

::google::protobuf::uint8* CMsgDOTASeasonPredictions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASeasonPredictions)
  // repeated .CMsgDOTASeasonPredictions.Prediction predictions = 1;
  for (int i = 0; i < this->predictions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->predictions(i), target);
  }

  // repeated .CMsgDOTASeasonPredictions.InGamePrediction in_game_predictions = 2;
  for (int i = 0; i < this->in_game_predictions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->in_game_predictions(i), target);
  }

  // optional uint32 in_game_prediction_count_per_game = 3;
  if (has_in_game_prediction_count_per_game()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->in_game_prediction_count_per_game(), target);
  }

  // optional uint32 in_game_prediction_voting_period_minutes = 4;
  if (has_in_game_prediction_voting_period_minutes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->in_game_prediction_voting_period_minutes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASeasonPredictions)
  return target;
}

int CMsgDOTASeasonPredictions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 in_game_prediction_count_per_game = 3;
    if (has_in_game_prediction_count_per_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_game_prediction_count_per_game());
    }

    // optional uint32 in_game_prediction_voting_period_minutes = 4;
    if (has_in_game_prediction_voting_period_minutes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_game_prediction_voting_period_minutes());
    }

  }
  // repeated .CMsgDOTASeasonPredictions.Prediction predictions = 1;
  total_size += 1 * this->predictions_size();
  for (int i = 0; i < this->predictions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->predictions(i));
  }

  // repeated .CMsgDOTASeasonPredictions.InGamePrediction in_game_predictions = 2;
  total_size += 1 * this->in_game_predictions_size();
  for (int i = 0; i < this->in_game_predictions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->in_game_predictions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTASeasonPredictions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTASeasonPredictions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTASeasonPredictions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonPredictions::MergeFrom(const CMsgDOTASeasonPredictions& from) {
  GOOGLE_CHECK_NE(&from, this);
  predictions_.MergeFrom(from.predictions_);
  in_game_predictions_.MergeFrom(from.in_game_predictions_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_in_game_prediction_count_per_game()) {
      set_in_game_prediction_count_per_game(from.in_game_prediction_count_per_game());
    }
    if (from.has_in_game_prediction_voting_period_minutes()) {
      set_in_game_prediction_voting_period_minutes(from.in_game_prediction_voting_period_minutes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTASeasonPredictions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonPredictions::CopyFrom(const CMsgDOTASeasonPredictions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonPredictions::IsInitialized() const {

  return true;
}

void CMsgDOTASeasonPredictions::Swap(CMsgDOTASeasonPredictions* other) {
  if (other != this) {
    predictions_.Swap(&other->predictions_);
    in_game_predictions_.Swap(&other->in_game_predictions_);
    std::swap(in_game_prediction_count_per_game_, other->in_game_prediction_count_per_game_);
    std::swap(in_game_prediction_voting_period_minutes_, other->in_game_prediction_voting_period_minutes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTASeasonPredictions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTASeasonPredictions_descriptor_;
  metadata.reflection = CMsgDOTASeasonPredictions_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAMatch_ReplayState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAMatch_ReplayState_descriptor_;
}
bool CMsgDOTAMatch_ReplayState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAMatch_ReplayState CMsgDOTAMatch::REPLAY_AVAILABLE;
const CMsgDOTAMatch_ReplayState CMsgDOTAMatch::REPLAY_NOT_RECORDED;
const CMsgDOTAMatch_ReplayState CMsgDOTAMatch::REPLAY_EXPIRED;
const CMsgDOTAMatch_ReplayState CMsgDOTAMatch::ReplayState_MIN;
const CMsgDOTAMatch_ReplayState CMsgDOTAMatch::ReplayState_MAX;
const int CMsgDOTAMatch::ReplayState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAMatch_Player_CustomGameData::kDotaTeamFieldNumber;
const int CMsgDOTAMatch_Player_CustomGameData::kWinnerFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAMatch_Player_CustomGameData::CMsgDOTAMatch_Player_CustomGameData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAMatch.Player.CustomGameData)
}

void CMsgDOTAMatch_Player_CustomGameData::InitAsDefaultInstance() {
}

CMsgDOTAMatch_Player_CustomGameData::CMsgDOTAMatch_Player_CustomGameData(const CMsgDOTAMatch_Player_CustomGameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAMatch.Player.CustomGameData)
}

void CMsgDOTAMatch_Player_CustomGameData::SharedCtor() {
  _cached_size_ = 0;
  dota_team_ = 0u;
  winner_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAMatch_Player_CustomGameData::~CMsgDOTAMatch_Player_CustomGameData() {
  // @@protoc_insertion_point(destructor:CMsgDOTAMatch.Player.CustomGameData)
  SharedDtor();
}

void CMsgDOTAMatch_Player_CustomGameData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAMatch_Player_CustomGameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAMatch_Player_CustomGameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAMatch_Player_CustomGameData_descriptor_;
}

const CMsgDOTAMatch_Player_CustomGameData& CMsgDOTAMatch_Player_CustomGameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAMatch_Player_CustomGameData* CMsgDOTAMatch_Player_CustomGameData::default_instance_ = NULL;

CMsgDOTAMatch_Player_CustomGameData* CMsgDOTAMatch_Player_CustomGameData::New() const {
  return new CMsgDOTAMatch_Player_CustomGameData;
}

void CMsgDOTAMatch_Player_CustomGameData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAMatch_Player_CustomGameData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(dota_team_, winner_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAMatch_Player_CustomGameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAMatch.Player.CustomGameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dota_team = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dota_team_)));
          set_has_dota_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_winner;
        break;
      }

      // optional bool winner = 2;
      case 2: {
        if (tag == 16) {
         parse_winner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &winner_)));
          set_has_winner();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAMatch.Player.CustomGameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAMatch.Player.CustomGameData)
  return false;
#undef DO_
}

void CMsgDOTAMatch_Player_CustomGameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAMatch.Player.CustomGameData)
  // optional uint32 dota_team = 1;
  if (has_dota_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dota_team(), output);
  }

  // optional bool winner = 2;
  if (has_winner()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->winner(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAMatch.Player.CustomGameData)
}

::google::protobuf::uint8* CMsgDOTAMatch_Player_CustomGameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAMatch.Player.CustomGameData)
  // optional uint32 dota_team = 1;
  if (has_dota_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dota_team(), target);
  }

  // optional bool winner = 2;
  if (has_winner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->winner(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAMatch.Player.CustomGameData)
  return target;
}

int CMsgDOTAMatch_Player_CustomGameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dota_team = 1;
    if (has_dota_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dota_team());
    }

    // optional bool winner = 2;
    if (has_winner()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAMatch_Player_CustomGameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAMatch_Player_CustomGameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAMatch_Player_CustomGameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAMatch_Player_CustomGameData::MergeFrom(const CMsgDOTAMatch_Player_CustomGameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dota_team()) {
      set_dota_team(from.dota_team());
    }
    if (from.has_winner()) {
      set_winner(from.winner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAMatch_Player_CustomGameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatch_Player_CustomGameData::CopyFrom(const CMsgDOTAMatch_Player_CustomGameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatch_Player_CustomGameData::IsInitialized() const {

  return true;
}

void CMsgDOTAMatch_Player_CustomGameData::Swap(CMsgDOTAMatch_Player_CustomGameData* other) {
  if (other != this) {
    std::swap(dota_team_, other->dota_team_);
    std::swap(winner_, other->winner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAMatch_Player_CustomGameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAMatch_Player_CustomGameData_descriptor_;
  metadata.reflection = CMsgDOTAMatch_Player_CustomGameData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAMatch_Player::kAccountIdFieldNumber;
const int CMsgDOTAMatch_Player::kPlayerSlotFieldNumber;
const int CMsgDOTAMatch_Player::kHeroIdFieldNumber;
const int CMsgDOTAMatch_Player::kItem0FieldNumber;
const int CMsgDOTAMatch_Player::kItem1FieldNumber;
const int CMsgDOTAMatch_Player::kItem2FieldNumber;
const int CMsgDOTAMatch_Player::kItem3FieldNumber;
const int CMsgDOTAMatch_Player::kItem4FieldNumber;
const int CMsgDOTAMatch_Player::kItem5FieldNumber;
const int CMsgDOTAMatch_Player::kItem6FieldNumber;
const int CMsgDOTAMatch_Player::kItem7FieldNumber;
const int CMsgDOTAMatch_Player::kItem8FieldNumber;
const int CMsgDOTAMatch_Player::kExpectedTeamContributionFieldNumber;
const int CMsgDOTAMatch_Player::kScaledMetricFieldNumber;
const int CMsgDOTAMatch_Player::kPreviousRankFieldNumber;
const int CMsgDOTAMatch_Player::kRankChangeFieldNumber;
const int CMsgDOTAMatch_Player::kSoloRankFieldNumber;
const int CMsgDOTAMatch_Player::kSeasonalRankFieldNumber;
const int CMsgDOTAMatch_Player::kKillsFieldNumber;
const int CMsgDOTAMatch_Player::kDeathsFieldNumber;
const int CMsgDOTAMatch_Player::kAssistsFieldNumber;
const int CMsgDOTAMatch_Player::kLeaverStatusFieldNumber;
const int CMsgDOTAMatch_Player::kGoldFieldNumber;
const int CMsgDOTAMatch_Player::kLastHitsFieldNumber;
const int CMsgDOTAMatch_Player::kDeniesFieldNumber;
const int CMsgDOTAMatch_Player::kGoldPerMinFieldNumber;
const int CMsgDOTAMatch_Player::kXPPerMinFieldNumber;
const int CMsgDOTAMatch_Player::kGoldSpentFieldNumber;
const int CMsgDOTAMatch_Player::kHeroDamageFieldNumber;
const int CMsgDOTAMatch_Player::kTowerDamageFieldNumber;
const int CMsgDOTAMatch_Player::kHeroHealingFieldNumber;
const int CMsgDOTAMatch_Player::kLevelFieldNumber;
const int CMsgDOTAMatch_Player::kTimeLastSeenFieldNumber;
const int CMsgDOTAMatch_Player::kPlayerNameFieldNumber;
const int CMsgDOTAMatch_Player::kSupportAbilityValueFieldNumber;
const int CMsgDOTAMatch_Player::kFeedingDetectedFieldNumber;
const int CMsgDOTAMatch_Player::kSearchRankFieldNumber;
const int CMsgDOTAMatch_Player::kSearchRankUncertaintyFieldNumber;
const int CMsgDOTAMatch_Player::kRankUncertaintyChangeFieldNumber;
const int CMsgDOTAMatch_Player::kHeroPlayCountFieldNumber;
const int CMsgDOTAMatch_Player::kPartyIdFieldNumber;
const int CMsgDOTAMatch_Player::kScaledHeroDamageFieldNumber;
const int CMsgDOTAMatch_Player::kScaledTowerDamageFieldNumber;
const int CMsgDOTAMatch_Player::kScaledHeroHealingFieldNumber;
const int CMsgDOTAMatch_Player::kScaledKillsFieldNumber;
const int CMsgDOTAMatch_Player::kScaledDeathsFieldNumber;
const int CMsgDOTAMatch_Player::kScaledAssistsFieldNumber;
const int CMsgDOTAMatch_Player::kClaimedFarmGoldFieldNumber;
const int CMsgDOTAMatch_Player::kSupportGoldFieldNumber;
const int CMsgDOTAMatch_Player::kClaimedDeniesFieldNumber;
const int CMsgDOTAMatch_Player::kClaimedMissesFieldNumber;
const int CMsgDOTAMatch_Player::kMissesFieldNumber;
const int CMsgDOTAMatch_Player::kAbilityUpgradesFieldNumber;
const int CMsgDOTAMatch_Player::kAdditionalUnitsInventoryFieldNumber;
const int CMsgDOTAMatch_Player::kPermanentBuffsFieldNumber;
const int CMsgDOTAMatch_Player::kCustomGameDataFieldNumber;
const int CMsgDOTAMatch_Player::kActiveBattlePassFieldNumber;
const int CMsgDOTAMatch_Player::kNetWorthFieldNumber;
const int CMsgDOTAMatch_Player::kBotDifficultyFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAMatch_Player::CMsgDOTAMatch_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAMatch.Player)
}

void CMsgDOTAMatch_Player::InitAsDefaultInstance() {
  custom_game_data_ = const_cast< ::CMsgDOTAMatch_Player_CustomGameData*>(&::CMsgDOTAMatch_Player_CustomGameData::default_instance());
}

CMsgDOTAMatch_Player::CMsgDOTAMatch_Player(const CMsgDOTAMatch_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAMatch.Player)
}

void CMsgDOTAMatch_Player::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_id_ = 0u;
  player_slot_ = 0u;
  hero_id_ = 0u;
  item_0_ = 0u;
  item_1_ = 0u;
  item_2_ = 0u;
  item_3_ = 0u;
  item_4_ = 0u;
  item_5_ = 0u;
  item_6_ = 0u;
  item_7_ = 0u;
  item_8_ = 0u;
  expected_team_contribution_ = 0;
  scaled_metric_ = 0;
  previous_rank_ = 0u;
  rank_change_ = 0;
  solo_rank_ = false;
  seasonal_rank_ = false;
  kills_ = 0u;
  deaths_ = 0u;
  assists_ = 0u;
  leaver_status_ = 0u;
  gold_ = 0u;
  last_hits_ = 0u;
  denies_ = 0u;
  gold_per_min_ = 0u;
  xp_per_min_ = 0u;
  gold_spent_ = 0u;
  hero_damage_ = 0u;
  tower_damage_ = 0u;
  hero_healing_ = 0u;
  level_ = 0u;
  time_last_seen_ = 0u;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  support_ability_value_ = 0u;
  feeding_detected_ = false;
  search_rank_ = 0u;
  search_rank_uncertainty_ = 0u;
  rank_uncertainty_change_ = 0;
  hero_play_count_ = 0u;
  party_id_ = GOOGLE_ULONGLONG(0);
  scaled_hero_damage_ = 0u;
  scaled_tower_damage_ = 0u;
  scaled_hero_healing_ = 0u;
  scaled_kills_ = 0;
  scaled_deaths_ = 0;
  scaled_assists_ = 0;
  claimed_farm_gold_ = 0u;
  support_gold_ = 0u;
  claimed_denies_ = 0u;
  claimed_misses_ = 0u;
  misses_ = 0u;
  custom_game_data_ = NULL;
  active_battle_pass_ = false;
  net_worth_ = 0u;
  bot_difficulty_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAMatch_Player::~CMsgDOTAMatch_Player() {
  // @@protoc_insertion_point(destructor:CMsgDOTAMatch.Player)
  SharedDtor();
}

void CMsgDOTAMatch_Player::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_name_;
  }
  if (this != default_instance_) {
    delete custom_game_data_;
  }
}

void CMsgDOTAMatch_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAMatch_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAMatch_Player_descriptor_;
}

const CMsgDOTAMatch_Player& CMsgDOTAMatch_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAMatch_Player* CMsgDOTAMatch_Player::default_instance_ = NULL;

CMsgDOTAMatch_Player* CMsgDOTAMatch_Player::New() const {
  return new CMsgDOTAMatch_Player;
}

void CMsgDOTAMatch_Player::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAMatch_Player*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(account_id_, item_4_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(item_5_, rank_change_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(kills_, last_hits_);
    ZR_(solo_rank_, seasonal_rank_);
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(denies_, level_);
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(support_ability_value_, rank_uncertainty_change_);
    time_last_seen_ = 0u;
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_name_->clear();
      }
    }
    feeding_detected_ = false;
    hero_play_count_ = 0u;
  }
  if (_has_bits_[40 / 32] & 65280) {
    ZR_(scaled_hero_damage_, claimed_farm_gold_);
    party_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[48 / 32] & 9371648) {
    ZR_(support_gold_, misses_);
    if (has_custom_game_data()) {
      if (custom_game_data_ != NULL) custom_game_data_->::CMsgDOTAMatch_Player_CustomGameData::Clear();
    }
  }
  if (_has_bits_[56 / 32] & 117440512) {
    ZR_(net_worth_, bot_difficulty_);
    active_battle_pass_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ability_upgrades_.Clear();
  additional_units_inventory_.Clear();
  permanent_buffs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAMatch_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAMatch.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_slot;
        break;
      }

      // optional uint32 player_slot = 2;
      case 2: {
        if (tag == 16) {
         parse_player_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_slot_)));
          set_has_player_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hero_id;
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (tag == 24) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_item_0;
        break;
      }

      // optional uint32 item_0 = 4;
      case 4: {
        if (tag == 32) {
         parse_item_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_0_)));
          set_has_item_0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_item_1;
        break;
      }

      // optional uint32 item_1 = 5;
      case 5: {
        if (tag == 40) {
         parse_item_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_1_)));
          set_has_item_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_item_2;
        break;
      }

      // optional uint32 item_2 = 6;
      case 6: {
        if (tag == 48) {
         parse_item_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_2_)));
          set_has_item_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_item_3;
        break;
      }

      // optional uint32 item_3 = 7;
      case 7: {
        if (tag == 56) {
         parse_item_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_3_)));
          set_has_item_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_item_4;
        break;
      }

      // optional uint32 item_4 = 8;
      case 8: {
        if (tag == 64) {
         parse_item_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_4_)));
          set_has_item_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_item_5;
        break;
      }

      // optional uint32 item_5 = 9;
      case 9: {
        if (tag == 72) {
         parse_item_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_5_)));
          set_has_item_5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_expected_team_contribution;
        break;
      }

      // optional float expected_team_contribution = 10;
      case 10: {
        if (tag == 85) {
         parse_expected_team_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &expected_team_contribution_)));
          set_has_expected_team_contribution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_scaled_metric;
        break;
      }

      // optional float scaled_metric = 11;
      case 11: {
        if (tag == 93) {
         parse_scaled_metric:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaled_metric_)));
          set_has_scaled_metric();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_previous_rank;
        break;
      }

      // optional uint32 previous_rank = 12;
      case 12: {
        if (tag == 96) {
         parse_previous_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &previous_rank_)));
          set_has_previous_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_rank_change;
        break;
      }

      // optional sint32 rank_change = 13;
      case 13: {
        if (tag == 104) {
         parse_rank_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rank_change_)));
          set_has_rank_change();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_kills;
        break;
      }

      // optional uint32 kills = 14;
      case 14: {
        if (tag == 112) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
          set_has_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_deaths;
        break;
      }

      // optional uint32 deaths = 15;
      case 15: {
        if (tag == 120) {
         parse_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
          set_has_deaths();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_assists;
        break;
      }

      // optional uint32 assists = 16;
      case 16: {
        if (tag == 128) {
         parse_assists:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
          set_has_assists();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_leaver_status;
        break;
      }

      // optional uint32 leaver_status = 17;
      case 17: {
        if (tag == 136) {
         parse_leaver_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaver_status_)));
          set_has_leaver_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 18;
      case 18: {
        if (tag == 144) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_last_hits;
        break;
      }

      // optional uint32 last_hits = 19;
      case 19: {
        if (tag == 152) {
         parse_last_hits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_hits_)));
          set_has_last_hits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_denies;
        break;
      }

      // optional uint32 denies = 20;
      case 20: {
        if (tag == 160) {
         parse_denies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &denies_)));
          set_has_denies();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_gold_per_min;
        break;
      }

      // optional uint32 gold_per_min = 21;
      case 21: {
        if (tag == 168) {
         parse_gold_per_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_per_min_)));
          set_has_gold_per_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_XP_per_min;
        break;
      }

      // optional uint32 XP_per_min = 22;
      case 22: {
        if (tag == 176) {
         parse_XP_per_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_per_min_)));
          set_has_xp_per_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_gold_spent;
        break;
      }

      // optional uint32 gold_spent = 23;
      case 23: {
        if (tag == 184) {
         parse_gold_spent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_spent_)));
          set_has_gold_spent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_hero_damage;
        break;
      }

      // optional uint32 hero_damage = 24;
      case 24: {
        if (tag == 192) {
         parse_hero_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_damage_)));
          set_has_hero_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_tower_damage;
        break;
      }

      // optional uint32 tower_damage = 25;
      case 25: {
        if (tag == 200) {
         parse_tower_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_damage_)));
          set_has_tower_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_hero_healing;
        break;
      }

      // optional uint32 hero_healing = 26;
      case 26: {
        if (tag == 208) {
         parse_hero_healing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_healing_)));
          set_has_hero_healing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_level;
        break;
      }

      // optional uint32 level = 27;
      case 27: {
        if (tag == 216) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_time_last_seen;
        break;
      }

      // optional uint32 time_last_seen = 28;
      case 28: {
        if (tag == 224) {
         parse_time_last_seen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_last_seen_)));
          set_has_time_last_seen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_player_name;
        break;
      }

      // optional string player_name = 29;
      case 29: {
        if (tag == 234) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "player_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_support_ability_value;
        break;
      }

      // optional uint32 support_ability_value = 30;
      case 30: {
        if (tag == 240) {
         parse_support_ability_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_ability_value_)));
          set_has_support_ability_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_feeding_detected;
        break;
      }

      // optional bool feeding_detected = 32;
      case 32: {
        if (tag == 256) {
         parse_feeding_detected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &feeding_detected_)));
          set_has_feeding_detected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_search_rank;
        break;
      }

      // optional uint32 search_rank = 34;
      case 34: {
        if (tag == 272) {
         parse_search_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_rank_)));
          set_has_search_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_search_rank_uncertainty;
        break;
      }

      // optional uint32 search_rank_uncertainty = 35;
      case 35: {
        if (tag == 280) {
         parse_search_rank_uncertainty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_rank_uncertainty_)));
          set_has_search_rank_uncertainty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_rank_uncertainty_change;
        break;
      }

      // optional int32 rank_uncertainty_change = 36;
      case 36: {
        if (tag == 288) {
         parse_rank_uncertainty_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_uncertainty_change_)));
          set_has_rank_uncertainty_change();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_hero_play_count;
        break;
      }

      // optional uint32 hero_play_count = 37;
      case 37: {
        if (tag == 296) {
         parse_hero_play_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_play_count_)));
          set_has_hero_play_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(305)) goto parse_party_id;
        break;
      }

      // optional fixed64 party_id = 38;
      case 38: {
        if (tag == 305) {
         parse_party_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &party_id_)));
          set_has_party_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(317)) goto parse_scaled_kills;
        break;
      }

      // optional float scaled_kills = 39;
      case 39: {
        if (tag == 317) {
         parse_scaled_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaled_kills_)));
          set_has_scaled_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(325)) goto parse_scaled_deaths;
        break;
      }

      // optional float scaled_deaths = 40;
      case 40: {
        if (tag == 325) {
         parse_scaled_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaled_deaths_)));
          set_has_scaled_deaths();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(333)) goto parse_scaled_assists;
        break;
      }

      // optional float scaled_assists = 41;
      case 41: {
        if (tag == 333) {
         parse_scaled_assists:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaled_assists_)));
          set_has_scaled_assists();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_claimed_farm_gold;
        break;
      }

      // optional uint32 claimed_farm_gold = 42;
      case 42: {
        if (tag == 336) {
         parse_claimed_farm_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claimed_farm_gold_)));
          set_has_claimed_farm_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_support_gold;
        break;
      }

      // optional uint32 support_gold = 43;
      case 43: {
        if (tag == 344) {
         parse_support_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_gold_)));
          set_has_support_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_claimed_denies;
        break;
      }

      // optional uint32 claimed_denies = 44;
      case 44: {
        if (tag == 352) {
         parse_claimed_denies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claimed_denies_)));
          set_has_claimed_denies();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_claimed_misses;
        break;
      }

      // optional uint32 claimed_misses = 45;
      case 45: {
        if (tag == 360) {
         parse_claimed_misses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claimed_misses_)));
          set_has_claimed_misses();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_misses;
        break;
      }

      // optional uint32 misses = 46;
      case 46: {
        if (tag == 368) {
         parse_misses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &misses_)));
          set_has_misses();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse_ability_upgrades;
        break;
      }

      // repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 47;
      case 47: {
        if (tag == 378) {
         parse_ability_upgrades:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ability_upgrades()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse_ability_upgrades;
        if (input->ExpectTag(386)) goto parse_additional_units_inventory;
        break;
      }

      // repeated .CMatchAdditionalUnitInventory additional_units_inventory = 48;
      case 48: {
        if (tag == 386) {
         parse_additional_units_inventory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_additional_units_inventory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(386)) goto parse_additional_units_inventory;
        if (input->ExpectTag(392)) goto parse_solo_rank;
        break;
      }

      // optional bool solo_rank = 49;
      case 49: {
        if (tag == 392) {
         parse_solo_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solo_rank_)));
          set_has_solo_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_custom_game_data;
        break;
      }

      // optional .CMsgDOTAMatch.Player.CustomGameData custom_game_data = 50;
      case 50: {
        if (tag == 402) {
         parse_custom_game_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_custom_game_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_active_battle_pass;
        break;
      }

      // optional bool active_battle_pass = 51;
      case 51: {
        if (tag == 408) {
         parse_active_battle_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_battle_pass_)));
          set_has_active_battle_pass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_net_worth;
        break;
      }

      // optional uint32 net_worth = 52;
      case 52: {
        if (tag == 416) {
         parse_net_worth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_worth_)));
          set_has_net_worth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_seasonal_rank;
        break;
      }

      // optional bool seasonal_rank = 53;
      case 53: {
        if (tag == 424) {
         parse_seasonal_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &seasonal_rank_)));
          set_has_seasonal_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_scaled_hero_damage;
        break;
      }

      // optional uint32 scaled_hero_damage = 54;
      case 54: {
        if (tag == 432) {
         parse_scaled_hero_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scaled_hero_damage_)));
          set_has_scaled_hero_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_scaled_tower_damage;
        break;
      }

      // optional uint32 scaled_tower_damage = 55;
      case 55: {
        if (tag == 440) {
         parse_scaled_tower_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scaled_tower_damage_)));
          set_has_scaled_tower_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_scaled_hero_healing;
        break;
      }

      // optional uint32 scaled_hero_healing = 56;
      case 56: {
        if (tag == 448) {
         parse_scaled_hero_healing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scaled_hero_healing_)));
          set_has_scaled_hero_healing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(458)) goto parse_permanent_buffs;
        break;
      }

      // repeated .CMatchPlayerPermanentBuff permanent_buffs = 57;
      case 57: {
        if (tag == 458) {
         parse_permanent_buffs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_permanent_buffs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(458)) goto parse_permanent_buffs;
        if (input->ExpectTag(464)) goto parse_bot_difficulty;
        break;
      }

      // optional uint32 bot_difficulty = 58;
      case 58: {
        if (tag == 464) {
         parse_bot_difficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bot_difficulty_)));
          set_has_bot_difficulty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(472)) goto parse_item_6;
        break;
      }

      // optional uint32 item_6 = 59;
      case 59: {
        if (tag == 472) {
         parse_item_6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_6_)));
          set_has_item_6();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_item_7;
        break;
      }

      // optional uint32 item_7 = 60;
      case 60: {
        if (tag == 480) {
         parse_item_7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_7_)));
          set_has_item_7();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_item_8;
        break;
      }

      // optional uint32 item_8 = 61;
      case 61: {
        if (tag == 488) {
         parse_item_8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_8_)));
          set_has_item_8();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAMatch.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAMatch.Player)
  return false;
#undef DO_
}

void CMsgDOTAMatch_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAMatch.Player)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 player_slot = 2;
  if (has_player_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_slot(), output);
  }

  // optional uint32 hero_id = 3;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  // optional uint32 item_0 = 4;
  if (has_item_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->item_0(), output);
  }

  // optional uint32 item_1 = 5;
  if (has_item_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->item_1(), output);
  }

  // optional uint32 item_2 = 6;
  if (has_item_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->item_2(), output);
  }

  // optional uint32 item_3 = 7;
  if (has_item_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->item_3(), output);
  }

  // optional uint32 item_4 = 8;
  if (has_item_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->item_4(), output);
  }

  // optional uint32 item_5 = 9;
  if (has_item_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->item_5(), output);
  }

  // optional float expected_team_contribution = 10;
  if (has_expected_team_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->expected_team_contribution(), output);
  }

  // optional float scaled_metric = 11;
  if (has_scaled_metric()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->scaled_metric(), output);
  }

  // optional uint32 previous_rank = 12;
  if (has_previous_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->previous_rank(), output);
  }

  // optional sint32 rank_change = 13;
  if (has_rank_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(13, this->rank_change(), output);
  }

  // optional uint32 kills = 14;
  if (has_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->kills(), output);
  }

  // optional uint32 deaths = 15;
  if (has_deaths()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->deaths(), output);
  }

  // optional uint32 assists = 16;
  if (has_assists()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->assists(), output);
  }

  // optional uint32 leaver_status = 17;
  if (has_leaver_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->leaver_status(), output);
  }

  // optional uint32 gold = 18;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->gold(), output);
  }

  // optional uint32 last_hits = 19;
  if (has_last_hits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->last_hits(), output);
  }

  // optional uint32 denies = 20;
  if (has_denies()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->denies(), output);
  }

  // optional uint32 gold_per_min = 21;
  if (has_gold_per_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->gold_per_min(), output);
  }

  // optional uint32 XP_per_min = 22;
  if (has_xp_per_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->xp_per_min(), output);
  }

  // optional uint32 gold_spent = 23;
  if (has_gold_spent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->gold_spent(), output);
  }

  // optional uint32 hero_damage = 24;
  if (has_hero_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->hero_damage(), output);
  }

  // optional uint32 tower_damage = 25;
  if (has_tower_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->tower_damage(), output);
  }

  // optional uint32 hero_healing = 26;
  if (has_hero_healing()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->hero_healing(), output);
  }

  // optional uint32 level = 27;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->level(), output);
  }

  // optional uint32 time_last_seen = 28;
  if (has_time_last_seen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->time_last_seen(), output);
  }

  // optional string player_name = 29;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->player_name(), output);
  }

  // optional uint32 support_ability_value = 30;
  if (has_support_ability_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->support_ability_value(), output);
  }

  // optional bool feeding_detected = 32;
  if (has_feeding_detected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->feeding_detected(), output);
  }

  // optional uint32 search_rank = 34;
  if (has_search_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->search_rank(), output);
  }

  // optional uint32 search_rank_uncertainty = 35;
  if (has_search_rank_uncertainty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->search_rank_uncertainty(), output);
  }

  // optional int32 rank_uncertainty_change = 36;
  if (has_rank_uncertainty_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->rank_uncertainty_change(), output);
  }

  // optional uint32 hero_play_count = 37;
  if (has_hero_play_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->hero_play_count(), output);
  }

  // optional fixed64 party_id = 38;
  if (has_party_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(38, this->party_id(), output);
  }

  // optional float scaled_kills = 39;
  if (has_scaled_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->scaled_kills(), output);
  }

  // optional float scaled_deaths = 40;
  if (has_scaled_deaths()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->scaled_deaths(), output);
  }

  // optional float scaled_assists = 41;
  if (has_scaled_assists()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(41, this->scaled_assists(), output);
  }

  // optional uint32 claimed_farm_gold = 42;
  if (has_claimed_farm_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->claimed_farm_gold(), output);
  }

  // optional uint32 support_gold = 43;
  if (has_support_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->support_gold(), output);
  }

  // optional uint32 claimed_denies = 44;
  if (has_claimed_denies()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->claimed_denies(), output);
  }

  // optional uint32 claimed_misses = 45;
  if (has_claimed_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->claimed_misses(), output);
  }

  // optional uint32 misses = 46;
  if (has_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->misses(), output);
  }

  // repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 47;
  for (int i = 0; i < this->ability_upgrades_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->ability_upgrades(i), output);
  }

  // repeated .CMatchAdditionalUnitInventory additional_units_inventory = 48;
  for (int i = 0; i < this->additional_units_inventory_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, this->additional_units_inventory(i), output);
  }

  // optional bool solo_rank = 49;
  if (has_solo_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(49, this->solo_rank(), output);
  }

  // optional .CMsgDOTAMatch.Player.CustomGameData custom_game_data = 50;
  if (has_custom_game_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->custom_game_data(), output);
  }

  // optional bool active_battle_pass = 51;
  if (has_active_battle_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(51, this->active_battle_pass(), output);
  }

  // optional uint32 net_worth = 52;
  if (has_net_worth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->net_worth(), output);
  }

  // optional bool seasonal_rank = 53;
  if (has_seasonal_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(53, this->seasonal_rank(), output);
  }

  // optional uint32 scaled_hero_damage = 54;
  if (has_scaled_hero_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->scaled_hero_damage(), output);
  }

  // optional uint32 scaled_tower_damage = 55;
  if (has_scaled_tower_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->scaled_tower_damage(), output);
  }

  // optional uint32 scaled_hero_healing = 56;
  if (has_scaled_hero_healing()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->scaled_hero_healing(), output);
  }

  // repeated .CMatchPlayerPermanentBuff permanent_buffs = 57;
  for (int i = 0; i < this->permanent_buffs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, this->permanent_buffs(i), output);
  }

  // optional uint32 bot_difficulty = 58;
  if (has_bot_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->bot_difficulty(), output);
  }

  // optional uint32 item_6 = 59;
  if (has_item_6()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(59, this->item_6(), output);
  }

  // optional uint32 item_7 = 60;
  if (has_item_7()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->item_7(), output);
  }

  // optional uint32 item_8 = 61;
  if (has_item_8()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->item_8(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAMatch.Player)
}

::google::protobuf::uint8* CMsgDOTAMatch_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAMatch.Player)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 player_slot = 2;
  if (has_player_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_slot(), target);
  }

  // optional uint32 hero_id = 3;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  // optional uint32 item_0 = 4;
  if (has_item_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->item_0(), target);
  }

  // optional uint32 item_1 = 5;
  if (has_item_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->item_1(), target);
  }

  // optional uint32 item_2 = 6;
  if (has_item_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->item_2(), target);
  }

  // optional uint32 item_3 = 7;
  if (has_item_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->item_3(), target);
  }

  // optional uint32 item_4 = 8;
  if (has_item_4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->item_4(), target);
  }

  // optional uint32 item_5 = 9;
  if (has_item_5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->item_5(), target);
  }

  // optional float expected_team_contribution = 10;
  if (has_expected_team_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->expected_team_contribution(), target);
  }

  // optional float scaled_metric = 11;
  if (has_scaled_metric()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->scaled_metric(), target);
  }

  // optional uint32 previous_rank = 12;
  if (has_previous_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->previous_rank(), target);
  }

  // optional sint32 rank_change = 13;
  if (has_rank_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(13, this->rank_change(), target);
  }

  // optional uint32 kills = 14;
  if (has_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->kills(), target);
  }

  // optional uint32 deaths = 15;
  if (has_deaths()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->deaths(), target);
  }

  // optional uint32 assists = 16;
  if (has_assists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->assists(), target);
  }

  // optional uint32 leaver_status = 17;
  if (has_leaver_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->leaver_status(), target);
  }

  // optional uint32 gold = 18;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->gold(), target);
  }

  // optional uint32 last_hits = 19;
  if (has_last_hits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->last_hits(), target);
  }

  // optional uint32 denies = 20;
  if (has_denies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->denies(), target);
  }

  // optional uint32 gold_per_min = 21;
  if (has_gold_per_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->gold_per_min(), target);
  }

  // optional uint32 XP_per_min = 22;
  if (has_xp_per_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->xp_per_min(), target);
  }

  // optional uint32 gold_spent = 23;
  if (has_gold_spent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->gold_spent(), target);
  }

  // optional uint32 hero_damage = 24;
  if (has_hero_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->hero_damage(), target);
  }

  // optional uint32 tower_damage = 25;
  if (has_tower_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->tower_damage(), target);
  }

  // optional uint32 hero_healing = 26;
  if (has_hero_healing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->hero_healing(), target);
  }

  // optional uint32 level = 27;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->level(), target);
  }

  // optional uint32 time_last_seen = 28;
  if (has_time_last_seen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->time_last_seen(), target);
  }

  // optional string player_name = 29;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->player_name(), target);
  }

  // optional uint32 support_ability_value = 30;
  if (has_support_ability_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->support_ability_value(), target);
  }

  // optional bool feeding_detected = 32;
  if (has_feeding_detected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->feeding_detected(), target);
  }

  // optional uint32 search_rank = 34;
  if (has_search_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->search_rank(), target);
  }

  // optional uint32 search_rank_uncertainty = 35;
  if (has_search_rank_uncertainty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->search_rank_uncertainty(), target);
  }

  // optional int32 rank_uncertainty_change = 36;
  if (has_rank_uncertainty_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->rank_uncertainty_change(), target);
  }

  // optional uint32 hero_play_count = 37;
  if (has_hero_play_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->hero_play_count(), target);
  }

  // optional fixed64 party_id = 38;
  if (has_party_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(38, this->party_id(), target);
  }

  // optional float scaled_kills = 39;
  if (has_scaled_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->scaled_kills(), target);
  }

  // optional float scaled_deaths = 40;
  if (has_scaled_deaths()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->scaled_deaths(), target);
  }

  // optional float scaled_assists = 41;
  if (has_scaled_assists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(41, this->scaled_assists(), target);
  }

  // optional uint32 claimed_farm_gold = 42;
  if (has_claimed_farm_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->claimed_farm_gold(), target);
  }

  // optional uint32 support_gold = 43;
  if (has_support_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->support_gold(), target);
  }

  // optional uint32 claimed_denies = 44;
  if (has_claimed_denies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->claimed_denies(), target);
  }

  // optional uint32 claimed_misses = 45;
  if (has_claimed_misses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->claimed_misses(), target);
  }

  // optional uint32 misses = 46;
  if (has_misses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->misses(), target);
  }

  // repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 47;
  for (int i = 0; i < this->ability_upgrades_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->ability_upgrades(i), target);
  }

  // repeated .CMatchAdditionalUnitInventory additional_units_inventory = 48;
  for (int i = 0; i < this->additional_units_inventory_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, this->additional_units_inventory(i), target);
  }

  // optional bool solo_rank = 49;
  if (has_solo_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(49, this->solo_rank(), target);
  }

  // optional .CMsgDOTAMatch.Player.CustomGameData custom_game_data = 50;
  if (has_custom_game_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->custom_game_data(), target);
  }

  // optional bool active_battle_pass = 51;
  if (has_active_battle_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(51, this->active_battle_pass(), target);
  }

  // optional uint32 net_worth = 52;
  if (has_net_worth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->net_worth(), target);
  }

  // optional bool seasonal_rank = 53;
  if (has_seasonal_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(53, this->seasonal_rank(), target);
  }

  // optional uint32 scaled_hero_damage = 54;
  if (has_scaled_hero_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->scaled_hero_damage(), target);
  }

  // optional uint32 scaled_tower_damage = 55;
  if (has_scaled_tower_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(55, this->scaled_tower_damage(), target);
  }

  // optional uint32 scaled_hero_healing = 56;
  if (has_scaled_hero_healing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->scaled_hero_healing(), target);
  }

  // repeated .CMatchPlayerPermanentBuff permanent_buffs = 57;
  for (int i = 0; i < this->permanent_buffs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        57, this->permanent_buffs(i), target);
  }

  // optional uint32 bot_difficulty = 58;
  if (has_bot_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(58, this->bot_difficulty(), target);
  }

  // optional uint32 item_6 = 59;
  if (has_item_6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(59, this->item_6(), target);
  }

  // optional uint32 item_7 = 60;
  if (has_item_7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->item_7(), target);
  }

  // optional uint32 item_8 = 61;
  if (has_item_8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->item_8(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAMatch.Player)
  return target;
}

int CMsgDOTAMatch_Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 player_slot = 2;
    if (has_player_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_slot());
    }

    // optional uint32 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 item_0 = 4;
    if (has_item_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_0());
    }

    // optional uint32 item_1 = 5;
    if (has_item_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_1());
    }

    // optional uint32 item_2 = 6;
    if (has_item_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_2());
    }

    // optional uint32 item_3 = 7;
    if (has_item_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_3());
    }

    // optional uint32 item_4 = 8;
    if (has_item_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_4());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 item_5 = 9;
    if (has_item_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_5());
    }

    // optional uint32 item_6 = 59;
    if (has_item_6()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_6());
    }

    // optional uint32 item_7 = 60;
    if (has_item_7()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_7());
    }

    // optional uint32 item_8 = 61;
    if (has_item_8()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_8());
    }

    // optional float expected_team_contribution = 10;
    if (has_expected_team_contribution()) {
      total_size += 1 + 4;
    }

    // optional float scaled_metric = 11;
    if (has_scaled_metric()) {
      total_size += 1 + 4;
    }

    // optional uint32 previous_rank = 12;
    if (has_previous_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->previous_rank());
    }

    // optional sint32 rank_change = 13;
    if (has_rank_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rank_change());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool solo_rank = 49;
    if (has_solo_rank()) {
      total_size += 2 + 1;
    }

    // optional bool seasonal_rank = 53;
    if (has_seasonal_rank()) {
      total_size += 2 + 1;
    }

    // optional uint32 kills = 14;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 15;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 assists = 16;
    if (has_assists()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

    // optional uint32 leaver_status = 17;
    if (has_leaver_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaver_status());
    }

    // optional uint32 gold = 18;
    if (has_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional uint32 last_hits = 19;
    if (has_last_hits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_hits());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 denies = 20;
    if (has_denies()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->denies());
    }

    // optional uint32 gold_per_min = 21;
    if (has_gold_per_min()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_per_min());
    }

    // optional uint32 XP_per_min = 22;
    if (has_xp_per_min()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp_per_min());
    }

    // optional uint32 gold_spent = 23;
    if (has_gold_spent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_spent());
    }

    // optional uint32 hero_damage = 24;
    if (has_hero_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_damage());
    }

    // optional uint32 tower_damage = 25;
    if (has_tower_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_damage());
    }

    // optional uint32 hero_healing = 26;
    if (has_hero_healing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_healing());
    }

    // optional uint32 level = 27;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 time_last_seen = 28;
    if (has_time_last_seen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_last_seen());
    }

    // optional string player_name = 29;
    if (has_player_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint32 support_ability_value = 30;
    if (has_support_ability_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support_ability_value());
    }

    // optional bool feeding_detected = 32;
    if (has_feeding_detected()) {
      total_size += 2 + 1;
    }

    // optional uint32 search_rank = 34;
    if (has_search_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_rank());
    }

    // optional uint32 search_rank_uncertainty = 35;
    if (has_search_rank_uncertainty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_rank_uncertainty());
    }

    // optional int32 rank_uncertainty_change = 36;
    if (has_rank_uncertainty_change()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_uncertainty_change());
    }

    // optional uint32 hero_play_count = 37;
    if (has_hero_play_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_play_count());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional fixed64 party_id = 38;
    if (has_party_id()) {
      total_size += 2 + 8;
    }

    // optional uint32 scaled_hero_damage = 54;
    if (has_scaled_hero_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scaled_hero_damage());
    }

    // optional uint32 scaled_tower_damage = 55;
    if (has_scaled_tower_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scaled_tower_damage());
    }

    // optional uint32 scaled_hero_healing = 56;
    if (has_scaled_hero_healing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scaled_hero_healing());
    }

    // optional float scaled_kills = 39;
    if (has_scaled_kills()) {
      total_size += 2 + 4;
    }

    // optional float scaled_deaths = 40;
    if (has_scaled_deaths()) {
      total_size += 2 + 4;
    }

    // optional float scaled_assists = 41;
    if (has_scaled_assists()) {
      total_size += 2 + 4;
    }

    // optional uint32 claimed_farm_gold = 42;
    if (has_claimed_farm_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->claimed_farm_gold());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional uint32 support_gold = 43;
    if (has_support_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support_gold());
    }

    // optional uint32 claimed_denies = 44;
    if (has_claimed_denies()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->claimed_denies());
    }

    // optional uint32 claimed_misses = 45;
    if (has_claimed_misses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->claimed_misses());
    }

    // optional uint32 misses = 46;
    if (has_misses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->misses());
    }

    // optional .CMsgDOTAMatch.Player.CustomGameData custom_game_data = 50;
    if (has_custom_game_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->custom_game_data());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional bool active_battle_pass = 51;
    if (has_active_battle_pass()) {
      total_size += 2 + 1;
    }

    // optional uint32 net_worth = 52;
    if (has_net_worth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_worth());
    }

    // optional uint32 bot_difficulty = 58;
    if (has_bot_difficulty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bot_difficulty());
    }

  }
  // repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 47;
  total_size += 2 * this->ability_upgrades_size();
  for (int i = 0; i < this->ability_upgrades_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ability_upgrades(i));
  }

  // repeated .CMatchAdditionalUnitInventory additional_units_inventory = 48;
  total_size += 2 * this->additional_units_inventory_size();
  for (int i = 0; i < this->additional_units_inventory_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->additional_units_inventory(i));
  }

  // repeated .CMatchPlayerPermanentBuff permanent_buffs = 57;
  total_size += 2 * this->permanent_buffs_size();
  for (int i = 0; i < this->permanent_buffs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->permanent_buffs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAMatch_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAMatch_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAMatch_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAMatch_Player::MergeFrom(const CMsgDOTAMatch_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  ability_upgrades_.MergeFrom(from.ability_upgrades_);
  additional_units_inventory_.MergeFrom(from.additional_units_inventory_);
  permanent_buffs_.MergeFrom(from.permanent_buffs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_player_slot()) {
      set_player_slot(from.player_slot());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_item_0()) {
      set_item_0(from.item_0());
    }
    if (from.has_item_1()) {
      set_item_1(from.item_1());
    }
    if (from.has_item_2()) {
      set_item_2(from.item_2());
    }
    if (from.has_item_3()) {
      set_item_3(from.item_3());
    }
    if (from.has_item_4()) {
      set_item_4(from.item_4());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_item_5()) {
      set_item_5(from.item_5());
    }
    if (from.has_item_6()) {
      set_item_6(from.item_6());
    }
    if (from.has_item_7()) {
      set_item_7(from.item_7());
    }
    if (from.has_item_8()) {
      set_item_8(from.item_8());
    }
    if (from.has_expected_team_contribution()) {
      set_expected_team_contribution(from.expected_team_contribution());
    }
    if (from.has_scaled_metric()) {
      set_scaled_metric(from.scaled_metric());
    }
    if (from.has_previous_rank()) {
      set_previous_rank(from.previous_rank());
    }
    if (from.has_rank_change()) {
      set_rank_change(from.rank_change());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_solo_rank()) {
      set_solo_rank(from.solo_rank());
    }
    if (from.has_seasonal_rank()) {
      set_seasonal_rank(from.seasonal_rank());
    }
    if (from.has_kills()) {
      set_kills(from.kills());
    }
    if (from.has_deaths()) {
      set_deaths(from.deaths());
    }
    if (from.has_assists()) {
      set_assists(from.assists());
    }
    if (from.has_leaver_status()) {
      set_leaver_status(from.leaver_status());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_last_hits()) {
      set_last_hits(from.last_hits());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_denies()) {
      set_denies(from.denies());
    }
    if (from.has_gold_per_min()) {
      set_gold_per_min(from.gold_per_min());
    }
    if (from.has_xp_per_min()) {
      set_xp_per_min(from.xp_per_min());
    }
    if (from.has_gold_spent()) {
      set_gold_spent(from.gold_spent());
    }
    if (from.has_hero_damage()) {
      set_hero_damage(from.hero_damage());
    }
    if (from.has_tower_damage()) {
      set_tower_damage(from.tower_damage());
    }
    if (from.has_hero_healing()) {
      set_hero_healing(from.hero_healing());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_time_last_seen()) {
      set_time_last_seen(from.time_last_seen());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_support_ability_value()) {
      set_support_ability_value(from.support_ability_value());
    }
    if (from.has_feeding_detected()) {
      set_feeding_detected(from.feeding_detected());
    }
    if (from.has_search_rank()) {
      set_search_rank(from.search_rank());
    }
    if (from.has_search_rank_uncertainty()) {
      set_search_rank_uncertainty(from.search_rank_uncertainty());
    }
    if (from.has_rank_uncertainty_change()) {
      set_rank_uncertainty_change(from.rank_uncertainty_change());
    }
    if (from.has_hero_play_count()) {
      set_hero_play_count(from.hero_play_count());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_party_id()) {
      set_party_id(from.party_id());
    }
    if (from.has_scaled_hero_damage()) {
      set_scaled_hero_damage(from.scaled_hero_damage());
    }
    if (from.has_scaled_tower_damage()) {
      set_scaled_tower_damage(from.scaled_tower_damage());
    }
    if (from.has_scaled_hero_healing()) {
      set_scaled_hero_healing(from.scaled_hero_healing());
    }
    if (from.has_scaled_kills()) {
      set_scaled_kills(from.scaled_kills());
    }
    if (from.has_scaled_deaths()) {
      set_scaled_deaths(from.scaled_deaths());
    }
    if (from.has_scaled_assists()) {
      set_scaled_assists(from.scaled_assists());
    }
    if (from.has_claimed_farm_gold()) {
      set_claimed_farm_gold(from.claimed_farm_gold());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_support_gold()) {
      set_support_gold(from.support_gold());
    }
    if (from.has_claimed_denies()) {
      set_claimed_denies(from.claimed_denies());
    }
    if (from.has_claimed_misses()) {
      set_claimed_misses(from.claimed_misses());
    }
    if (from.has_misses()) {
      set_misses(from.misses());
    }
    if (from.has_custom_game_data()) {
      mutable_custom_game_data()->::CMsgDOTAMatch_Player_CustomGameData::MergeFrom(from.custom_game_data());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_active_battle_pass()) {
      set_active_battle_pass(from.active_battle_pass());
    }
    if (from.has_net_worth()) {
      set_net_worth(from.net_worth());
    }
    if (from.has_bot_difficulty()) {
      set_bot_difficulty(from.bot_difficulty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAMatch_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatch_Player::CopyFrom(const CMsgDOTAMatch_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatch_Player::IsInitialized() const {

  return true;
}

void CMsgDOTAMatch_Player::Swap(CMsgDOTAMatch_Player* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(player_slot_, other->player_slot_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(item_0_, other->item_0_);
    std::swap(item_1_, other->item_1_);
    std::swap(item_2_, other->item_2_);
    std::swap(item_3_, other->item_3_);
    std::swap(item_4_, other->item_4_);
    std::swap(item_5_, other->item_5_);
    std::swap(item_6_, other->item_6_);
    std::swap(item_7_, other->item_7_);
    std::swap(item_8_, other->item_8_);
    std::swap(expected_team_contribution_, other->expected_team_contribution_);
    std::swap(scaled_metric_, other->scaled_metric_);
    std::swap(previous_rank_, other->previous_rank_);
    std::swap(rank_change_, other->rank_change_);
    std::swap(solo_rank_, other->solo_rank_);
    std::swap(seasonal_rank_, other->seasonal_rank_);
    std::swap(kills_, other->kills_);
    std::swap(deaths_, other->deaths_);
    std::swap(assists_, other->assists_);
    std::swap(leaver_status_, other->leaver_status_);
    std::swap(gold_, other->gold_);
    std::swap(last_hits_, other->last_hits_);
    std::swap(denies_, other->denies_);
    std::swap(gold_per_min_, other->gold_per_min_);
    std::swap(xp_per_min_, other->xp_per_min_);
    std::swap(gold_spent_, other->gold_spent_);
    std::swap(hero_damage_, other->hero_damage_);
    std::swap(tower_damage_, other->tower_damage_);
    std::swap(hero_healing_, other->hero_healing_);
    std::swap(level_, other->level_);
    std::swap(time_last_seen_, other->time_last_seen_);
    std::swap(player_name_, other->player_name_);
    std::swap(support_ability_value_, other->support_ability_value_);
    std::swap(feeding_detected_, other->feeding_detected_);
    std::swap(search_rank_, other->search_rank_);
    std::swap(search_rank_uncertainty_, other->search_rank_uncertainty_);
    std::swap(rank_uncertainty_change_, other->rank_uncertainty_change_);
    std::swap(hero_play_count_, other->hero_play_count_);
    std::swap(party_id_, other->party_id_);
    std::swap(scaled_hero_damage_, other->scaled_hero_damage_);
    std::swap(scaled_tower_damage_, other->scaled_tower_damage_);
    std::swap(scaled_hero_healing_, other->scaled_hero_healing_);
    std::swap(scaled_kills_, other->scaled_kills_);
    std::swap(scaled_deaths_, other->scaled_deaths_);
    std::swap(scaled_assists_, other->scaled_assists_);
    std::swap(claimed_farm_gold_, other->claimed_farm_gold_);
    std::swap(support_gold_, other->support_gold_);
    std::swap(claimed_denies_, other->claimed_denies_);
    std::swap(claimed_misses_, other->claimed_misses_);
    std::swap(misses_, other->misses_);
    ability_upgrades_.Swap(&other->ability_upgrades_);
    additional_units_inventory_.Swap(&other->additional_units_inventory_);
    permanent_buffs_.Swap(&other->permanent_buffs_);
    std::swap(custom_game_data_, other->custom_game_data_);
    std::swap(active_battle_pass_, other->active_battle_pass_);
    std::swap(net_worth_, other->net_worth_);
    std::swap(bot_difficulty_, other->bot_difficulty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAMatch_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAMatch_Player_descriptor_;
  metadata.reflection = CMsgDOTAMatch_Player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAMatch_BroadcasterInfo::kAccountIdFieldNumber;
const int CMsgDOTAMatch_BroadcasterInfo::kNameFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAMatch_BroadcasterInfo::CMsgDOTAMatch_BroadcasterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAMatch.BroadcasterInfo)
}

void CMsgDOTAMatch_BroadcasterInfo::InitAsDefaultInstance() {
}

CMsgDOTAMatch_BroadcasterInfo::CMsgDOTAMatch_BroadcasterInfo(const CMsgDOTAMatch_BroadcasterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAMatch.BroadcasterInfo)
}

void CMsgDOTAMatch_BroadcasterInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAMatch_BroadcasterInfo::~CMsgDOTAMatch_BroadcasterInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTAMatch.BroadcasterInfo)
  SharedDtor();
}

void CMsgDOTAMatch_BroadcasterInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTAMatch_BroadcasterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAMatch_BroadcasterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAMatch_BroadcasterInfo_descriptor_;
}

const CMsgDOTAMatch_BroadcasterInfo& CMsgDOTAMatch_BroadcasterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAMatch_BroadcasterInfo* CMsgDOTAMatch_BroadcasterInfo::default_instance_ = NULL;

CMsgDOTAMatch_BroadcasterInfo* CMsgDOTAMatch_BroadcasterInfo::New() const {
  return new CMsgDOTAMatch_BroadcasterInfo;
}

void CMsgDOTAMatch_BroadcasterInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    account_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAMatch_BroadcasterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAMatch.BroadcasterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAMatch.BroadcasterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAMatch.BroadcasterInfo)
  return false;
#undef DO_
}

void CMsgDOTAMatch_BroadcasterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAMatch.BroadcasterInfo)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAMatch.BroadcasterInfo)
}

::google::protobuf::uint8* CMsgDOTAMatch_BroadcasterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAMatch.BroadcasterInfo)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAMatch.BroadcasterInfo)
  return target;
}

int CMsgDOTAMatch_BroadcasterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAMatch_BroadcasterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAMatch_BroadcasterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAMatch_BroadcasterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAMatch_BroadcasterInfo::MergeFrom(const CMsgDOTAMatch_BroadcasterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAMatch_BroadcasterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatch_BroadcasterInfo::CopyFrom(const CMsgDOTAMatch_BroadcasterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatch_BroadcasterInfo::IsInitialized() const {

  return true;
}

void CMsgDOTAMatch_BroadcasterInfo::Swap(CMsgDOTAMatch_BroadcasterInfo* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAMatch_BroadcasterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAMatch_BroadcasterInfo_descriptor_;
  metadata.reflection = CMsgDOTAMatch_BroadcasterInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAMatch_BroadcasterChannel::kCountryCodeFieldNumber;
const int CMsgDOTAMatch_BroadcasterChannel::kDescriptionFieldNumber;
const int CMsgDOTAMatch_BroadcasterChannel::kBroadcasterInfosFieldNumber;
const int CMsgDOTAMatch_BroadcasterChannel::kLanguageCodeFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAMatch_BroadcasterChannel::CMsgDOTAMatch_BroadcasterChannel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAMatch.BroadcasterChannel)
}

void CMsgDOTAMatch_BroadcasterChannel::InitAsDefaultInstance() {
}

CMsgDOTAMatch_BroadcasterChannel::CMsgDOTAMatch_BroadcasterChannel(const CMsgDOTAMatch_BroadcasterChannel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAMatch.BroadcasterChannel)
}

void CMsgDOTAMatch_BroadcasterChannel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAMatch_BroadcasterChannel::~CMsgDOTAMatch_BroadcasterChannel() {
  // @@protoc_insertion_point(destructor:CMsgDOTAMatch.BroadcasterChannel)
  SharedDtor();
}

void CMsgDOTAMatch_BroadcasterChannel::SharedDtor() {
  if (country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_code_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (language_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete language_code_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTAMatch_BroadcasterChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAMatch_BroadcasterChannel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAMatch_BroadcasterChannel_descriptor_;
}

const CMsgDOTAMatch_BroadcasterChannel& CMsgDOTAMatch_BroadcasterChannel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAMatch_BroadcasterChannel* CMsgDOTAMatch_BroadcasterChannel::default_instance_ = NULL;

CMsgDOTAMatch_BroadcasterChannel* CMsgDOTAMatch_BroadcasterChannel::New() const {
  return new CMsgDOTAMatch_BroadcasterChannel;
}

void CMsgDOTAMatch_BroadcasterChannel::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    if (has_country_code()) {
      if (country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        country_code_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_language_code()) {
      if (language_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        language_code_->clear();
      }
    }
  }
  broadcaster_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAMatch_BroadcasterChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAMatch.BroadcasterChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string country_code = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "country_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_broadcaster_infos;
        break;
      }

      // repeated .CMsgDOTAMatch.BroadcasterInfo broadcaster_infos = 3;
      case 3: {
        if (tag == 26) {
         parse_broadcaster_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_broadcaster_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_broadcaster_infos;
        if (input->ExpectTag(34)) goto parse_language_code;
        break;
      }

      // optional string language_code = 4;
      case 4: {
        if (tag == 34) {
         parse_language_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language_code().data(), this->language_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "language_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAMatch.BroadcasterChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAMatch.BroadcasterChannel)
  return false;
#undef DO_
}

void CMsgDOTAMatch_BroadcasterChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAMatch.BroadcasterChannel)
  // optional string country_code = 1;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->country_code(), output);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // repeated .CMsgDOTAMatch.BroadcasterInfo broadcaster_infos = 3;
  for (int i = 0; i < this->broadcaster_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->broadcaster_infos(i), output);
  }

  // optional string language_code = 4;
  if (has_language_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language_code().data(), this->language_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->language_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAMatch.BroadcasterChannel)
}

::google::protobuf::uint8* CMsgDOTAMatch_BroadcasterChannel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAMatch.BroadcasterChannel)
  // optional string country_code = 1;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->country_code(), target);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // repeated .CMsgDOTAMatch.BroadcasterInfo broadcaster_infos = 3;
  for (int i = 0; i < this->broadcaster_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->broadcaster_infos(i), target);
  }

  // optional string language_code = 4;
  if (has_language_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language_code().data(), this->language_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->language_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAMatch.BroadcasterChannel)
  return target;
}

int CMsgDOTAMatch_BroadcasterChannel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string country_code = 1;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string language_code = 4;
    if (has_language_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language_code());
    }

  }
  // repeated .CMsgDOTAMatch.BroadcasterInfo broadcaster_infos = 3;
  total_size += 1 * this->broadcaster_infos_size();
  for (int i = 0; i < this->broadcaster_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->broadcaster_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAMatch_BroadcasterChannel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAMatch_BroadcasterChannel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAMatch_BroadcasterChannel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAMatch_BroadcasterChannel::MergeFrom(const CMsgDOTAMatch_BroadcasterChannel& from) {
  GOOGLE_CHECK_NE(&from, this);
  broadcaster_infos_.MergeFrom(from.broadcaster_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country_code()) {
      set_country_code(from.country_code());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_language_code()) {
      set_language_code(from.language_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAMatch_BroadcasterChannel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatch_BroadcasterChannel::CopyFrom(const CMsgDOTAMatch_BroadcasterChannel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatch_BroadcasterChannel::IsInitialized() const {

  return true;
}

void CMsgDOTAMatch_BroadcasterChannel::Swap(CMsgDOTAMatch_BroadcasterChannel* other) {
  if (other != this) {
    std::swap(country_code_, other->country_code_);
    std::swap(description_, other->description_);
    broadcaster_infos_.Swap(&other->broadcaster_infos_);
    std::swap(language_code_, other->language_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAMatch_BroadcasterChannel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAMatch_BroadcasterChannel_descriptor_;
  metadata.reflection = CMsgDOTAMatch_BroadcasterChannel_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAMatch_CustomGameData::kCustomGameIdFieldNumber;
const int CMsgDOTAMatch_CustomGameData::kMapNameFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAMatch_CustomGameData::CMsgDOTAMatch_CustomGameData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAMatch.CustomGameData)
}

void CMsgDOTAMatch_CustomGameData::InitAsDefaultInstance() {
}

CMsgDOTAMatch_CustomGameData::CMsgDOTAMatch_CustomGameData(const CMsgDOTAMatch_CustomGameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAMatch.CustomGameData)
}

void CMsgDOTAMatch_CustomGameData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  map_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAMatch_CustomGameData::~CMsgDOTAMatch_CustomGameData() {
  // @@protoc_insertion_point(destructor:CMsgDOTAMatch.CustomGameData)
  SharedDtor();
}

void CMsgDOTAMatch_CustomGameData::SharedDtor() {
  if (map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete map_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTAMatch_CustomGameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAMatch_CustomGameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAMatch_CustomGameData_descriptor_;
}

const CMsgDOTAMatch_CustomGameData& CMsgDOTAMatch_CustomGameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAMatch_CustomGameData* CMsgDOTAMatch_CustomGameData::default_instance_ = NULL;

CMsgDOTAMatch_CustomGameData* CMsgDOTAMatch_CustomGameData::New() const {
  return new CMsgDOTAMatch_CustomGameData;
}

void CMsgDOTAMatch_CustomGameData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    custom_game_id_ = GOOGLE_ULONGLONG(0);
    if (has_map_name()) {
      if (map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        map_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAMatch_CustomGameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAMatch.CustomGameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 custom_game_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
          set_has_custom_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_map_name;
        break;
      }

      // optional string map_name = 2;
      case 2: {
        if (tag == 18) {
         parse_map_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_name().data(), this->map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "map_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAMatch.CustomGameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAMatch.CustomGameData)
  return false;
#undef DO_
}

void CMsgDOTAMatch_CustomGameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAMatch.CustomGameData)
  // optional uint64 custom_game_id = 1;
  if (has_custom_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->custom_game_id(), output);
  }

  // optional string map_name = 2;
  if (has_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->map_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAMatch.CustomGameData)
}

::google::protobuf::uint8* CMsgDOTAMatch_CustomGameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAMatch.CustomGameData)
  // optional uint64 custom_game_id = 1;
  if (has_custom_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->custom_game_id(), target);
  }

  // optional string map_name = 2;
  if (has_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->map_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAMatch.CustomGameData)
  return target;
}

int CMsgDOTAMatch_CustomGameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 custom_game_id = 1;
    if (has_custom_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

    // optional string map_name = 2;
    if (has_map_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAMatch_CustomGameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAMatch_CustomGameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAMatch_CustomGameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAMatch_CustomGameData::MergeFrom(const CMsgDOTAMatch_CustomGameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_custom_game_id()) {
      set_custom_game_id(from.custom_game_id());
    }
    if (from.has_map_name()) {
      set_map_name(from.map_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAMatch_CustomGameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatch_CustomGameData::CopyFrom(const CMsgDOTAMatch_CustomGameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatch_CustomGameData::IsInitialized() const {

  return true;
}

void CMsgDOTAMatch_CustomGameData::Swap(CMsgDOTAMatch_CustomGameData* other) {
  if (other != this) {
    std::swap(custom_game_id_, other->custom_game_id_);
    std::swap(map_name_, other->map_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAMatch_CustomGameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAMatch_CustomGameData_descriptor_;
  metadata.reflection = CMsgDOTAMatch_CustomGameData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAMatch::kDurationFieldNumber;
const int CMsgDOTAMatch::kStartTimeFieldNumber;
const int CMsgDOTAMatch::kPlayersFieldNumber;
const int CMsgDOTAMatch::kMatchIdFieldNumber;
const int CMsgDOTAMatch::kTowerStatusFieldNumber;
const int CMsgDOTAMatch::kBarracksStatusFieldNumber;
const int CMsgDOTAMatch::kClusterFieldNumber;
const int CMsgDOTAMatch::kFirstBloodTimeFieldNumber;
const int CMsgDOTAMatch::kReplaySaltFieldNumber;
const int CMsgDOTAMatch::kServerIpFieldNumber;
const int CMsgDOTAMatch::kServerPortFieldNumber;
const int CMsgDOTAMatch::kLobbyTypeFieldNumber;
const int CMsgDOTAMatch::kHumanPlayersFieldNumber;
const int CMsgDOTAMatch::kAverageSkillFieldNumber;
const int CMsgDOTAMatch::kGameBalanceFieldNumber;
const int CMsgDOTAMatch::kRadiantTeamIdFieldNumber;
const int CMsgDOTAMatch::kDireTeamIdFieldNumber;
const int CMsgDOTAMatch::kLeagueidFieldNumber;
const int CMsgDOTAMatch::kRadiantTeamNameFieldNumber;
const int CMsgDOTAMatch::kDireTeamNameFieldNumber;
const int CMsgDOTAMatch::kRadiantTeamLogoFieldNumber;
const int CMsgDOTAMatch::kDireTeamLogoFieldNumber;
const int CMsgDOTAMatch::kRadiantTeamCompleteFieldNumber;
const int CMsgDOTAMatch::kDireTeamCompleteFieldNumber;
const int CMsgDOTAMatch::kPositiveVotesFieldNumber;
const int CMsgDOTAMatch::kNegativeVotesFieldNumber;
const int CMsgDOTAMatch::kGameModeFieldNumber;
const int CMsgDOTAMatch::kPicksBansFieldNumber;
const int CMsgDOTAMatch::kMatchSeqNumFieldNumber;
const int CMsgDOTAMatch::kReplayStateFieldNumber;
const int CMsgDOTAMatch::kRadiantGuildIdFieldNumber;
const int CMsgDOTAMatch::kDireGuildIdFieldNumber;
const int CMsgDOTAMatch::kRadiantTeamTagFieldNumber;
const int CMsgDOTAMatch::kDireTeamTagFieldNumber;
const int CMsgDOTAMatch::kSeriesIdFieldNumber;
const int CMsgDOTAMatch::kSeriesTypeFieldNumber;
const int CMsgDOTAMatch::kBroadcasterChannelsFieldNumber;
const int CMsgDOTAMatch::kEngineFieldNumber;
const int CMsgDOTAMatch::kCustomGameDataFieldNumber;
const int CMsgDOTAMatch::kMatchFlagsFieldNumber;
const int CMsgDOTAMatch::kPrivateMetadataKeyFieldNumber;
const int CMsgDOTAMatch::kRadiantTeamScoreFieldNumber;
const int CMsgDOTAMatch::kDireTeamScoreFieldNumber;
const int CMsgDOTAMatch::kMatchOutcomeFieldNumber;
const int CMsgDOTAMatch::kTournamentIdFieldNumber;
const int CMsgDOTAMatch::kTournamentRoundFieldNumber;
const int CMsgDOTAMatch::kPreGameDurationFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAMatch::CMsgDOTAMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAMatch)
}

void CMsgDOTAMatch::InitAsDefaultInstance() {
  custom_game_data_ = const_cast< ::CMsgDOTAMatch_CustomGameData*>(&::CMsgDOTAMatch_CustomGameData::default_instance());
}

CMsgDOTAMatch::CMsgDOTAMatch(const CMsgDOTAMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAMatch)
}

void CMsgDOTAMatch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  duration_ = 0u;
  starttime_ = 0u;
  match_id_ = GOOGLE_ULONGLONG(0);
  cluster_ = 0u;
  first_blood_time_ = 0u;
  replay_salt_ = 0u;
  server_ip_ = 0u;
  server_port_ = 0u;
  lobby_type_ = 0u;
  human_players_ = 0u;
  average_skill_ = 0u;
  game_balance_ = 0;
  radiant_team_id_ = 0u;
  dire_team_id_ = 0u;
  leagueid_ = 0u;
  radiant_team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dire_team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  radiant_team_logo_ = GOOGLE_ULONGLONG(0);
  dire_team_logo_ = GOOGLE_ULONGLONG(0);
  radiant_team_complete_ = 0u;
  dire_team_complete_ = 0u;
  positive_votes_ = 0u;
  negative_votes_ = 0u;
  game_mode_ = 0;
  match_seq_num_ = GOOGLE_ULONGLONG(0);
  replay_state_ = 0;
  radiant_guild_id_ = 0u;
  dire_guild_id_ = 0u;
  radiant_team_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dire_team_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  series_id_ = 0u;
  series_type_ = 0u;
  engine_ = 0u;
  custom_game_data_ = NULL;
  match_flags_ = 0u;
  private_metadata_key_ = 0u;
  radiant_team_score_ = 0u;
  dire_team_score_ = 0u;
  match_outcome_ = 0;
  tournament_id_ = 0u;
  tournament_round_ = 0u;
  pre_game_duration_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAMatch::~CMsgDOTAMatch() {
  // @@protoc_insertion_point(destructor:CMsgDOTAMatch)
  SharedDtor();
}

void CMsgDOTAMatch::SharedDtor() {
  if (radiant_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radiant_team_name_;
  }
  if (dire_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dire_team_name_;
  }
  if (radiant_team_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radiant_team_tag_;
  }
  if (dire_team_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dire_team_tag_;
  }
  if (this != default_instance_) {
    delete custom_game_data_;
  }
}

void CMsgDOTAMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAMatch_descriptor_;
}

const CMsgDOTAMatch& CMsgDOTAMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAMatch* CMsgDOTAMatch::default_instance_ = NULL;

CMsgDOTAMatch* CMsgDOTAMatch::New() const {
  return new CMsgDOTAMatch;
}

void CMsgDOTAMatch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAMatch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 203) {
    ZR_(duration_, starttime_);
    ZR_(cluster_, first_blood_time_);
    match_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(replay_salt_, radiant_team_id_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(dire_team_id_, leagueid_);
    ZR_(radiant_team_logo_, dire_team_complete_);
    if (has_radiant_team_name()) {
      if (radiant_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        radiant_team_name_->clear();
      }
    }
    if (has_dire_team_name()) {
      if (dire_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dire_team_name_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 4143972352) {
    ZR_(positive_votes_, negative_votes_);
    ZR_(game_mode_, dire_guild_id_);
  }
  if (_has_bits_[32 / 32] & 239) {
    ZR_(series_id_, series_type_);
    ZR_(engine_, match_flags_);
    if (has_radiant_team_tag()) {
      if (radiant_team_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        radiant_team_tag_->clear();
      }
    }
    if (has_dire_team_tag()) {
      if (dire_team_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dire_team_tag_->clear();
      }
    }
    if (has_custom_game_data()) {
      if (custom_game_data_ != NULL) custom_game_data_->::CMsgDOTAMatch_CustomGameData::Clear();
    }
  }
  if (_has_bits_[40 / 32] & 32512) {
    ZR_(private_metadata_key_, pre_game_duration_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  players_.Clear();
  tower_status_.Clear();
  barracks_status_.Clear();
  picks_bans_.Clear();
  broadcaster_channels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 duration = 3;
      case 3: {
        if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_startTime;
        break;
      }

      // optional fixed32 startTime = 4;
      case 4: {
        if (tag == 37) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_players;
        break;
      }

      // repeated .CMsgDOTAMatch.Player players = 5;
      case 5: {
        if (tag == 42) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_players;
        if (input->ExpectTag(48)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 6;
      case 6: {
        if (tag == 48) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_tower_status;
        break;
      }

      // repeated uint32 tower_status = 8;
      case 8: {
        if (tag == 64) {
         parse_tower_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_tower_status())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tower_status())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_tower_status;
        if (input->ExpectTag(72)) goto parse_barracks_status;
        break;
      }

      // repeated uint32 barracks_status = 9;
      case 9: {
        if (tag == 72) {
         parse_barracks_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_barracks_status())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_barracks_status())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_barracks_status;
        if (input->ExpectTag(80)) goto parse_cluster;
        break;
      }

      // optional uint32 cluster = 10;
      case 10: {
        if (tag == 80) {
         parse_cluster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cluster_)));
          set_has_cluster();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_first_blood_time;
        break;
      }

      // optional uint32 first_blood_time = 12;
      case 12: {
        if (tag == 96) {
         parse_first_blood_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_blood_time_)));
          set_has_first_blood_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_replay_salt;
        break;
      }

      // optional fixed32 replay_salt = 13;
      case 13: {
        if (tag == 109) {
         parse_replay_salt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &replay_salt_)));
          set_has_replay_salt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_server_ip;
        break;
      }

      // optional fixed32 server_ip = 14;
      case 14: {
        if (tag == 117) {
         parse_server_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_ip_)));
          set_has_server_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_server_port;
        break;
      }

      // optional uint32 server_port = 15;
      case 15: {
        if (tag == 120) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
          set_has_server_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_lobby_type;
        break;
      }

      // optional uint32 lobby_type = 16;
      case 16: {
        if (tag == 128) {
         parse_lobby_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_type_)));
          set_has_lobby_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_human_players;
        break;
      }

      // optional uint32 human_players = 17;
      case 17: {
        if (tag == 136) {
         parse_human_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &human_players_)));
          set_has_human_players();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_average_skill;
        break;
      }

      // optional uint32 average_skill = 18;
      case 18: {
        if (tag == 144) {
         parse_average_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &average_skill_)));
          set_has_average_skill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(157)) goto parse_game_balance;
        break;
      }

      // optional float game_balance = 19;
      case 19: {
        if (tag == 157) {
         parse_game_balance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &game_balance_)));
          set_has_game_balance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_radiant_team_id;
        break;
      }

      // optional uint32 radiant_team_id = 20;
      case 20: {
        if (tag == 160) {
         parse_radiant_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_team_id_)));
          set_has_radiant_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_dire_team_id;
        break;
      }

      // optional uint32 dire_team_id = 21;
      case 21: {
        if (tag == 168) {
         parse_dire_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_team_id_)));
          set_has_dire_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_leagueid;
        break;
      }

      // optional uint32 leagueid = 22;
      case 22: {
        if (tag == 176) {
         parse_leagueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leagueid_)));
          set_has_leagueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_radiant_team_name;
        break;
      }

      // optional string radiant_team_name = 23;
      case 23: {
        if (tag == 186) {
         parse_radiant_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radiant_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radiant_team_name().data(), this->radiant_team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "radiant_team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_dire_team_name;
        break;
      }

      // optional string dire_team_name = 24;
      case 24: {
        if (tag == 194) {
         parse_dire_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dire_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dire_team_name().data(), this->dire_team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dire_team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_radiant_team_logo;
        break;
      }

      // optional uint64 radiant_team_logo = 25;
      case 25: {
        if (tag == 200) {
         parse_radiant_team_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &radiant_team_logo_)));
          set_has_radiant_team_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_dire_team_logo;
        break;
      }

      // optional uint64 dire_team_logo = 26;
      case 26: {
        if (tag == 208) {
         parse_dire_team_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dire_team_logo_)));
          set_has_dire_team_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_radiant_team_complete;
        break;
      }

      // optional uint32 radiant_team_complete = 27;
      case 27: {
        if (tag == 216) {
         parse_radiant_team_complete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_team_complete_)));
          set_has_radiant_team_complete();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_dire_team_complete;
        break;
      }

      // optional uint32 dire_team_complete = 28;
      case 28: {
        if (tag == 224) {
         parse_dire_team_complete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_team_complete_)));
          set_has_dire_team_complete();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_positive_votes;
        break;
      }

      // optional uint32 positive_votes = 29;
      case 29: {
        if (tag == 232) {
         parse_positive_votes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &positive_votes_)));
          set_has_positive_votes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_negative_votes;
        break;
      }

      // optional uint32 negative_votes = 30;
      case 30: {
        if (tag == 240) {
         parse_negative_votes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &negative_votes_)));
          set_has_negative_votes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_game_mode;
        break;
      }

      // optional .DOTA_GameMode game_mode = 31 [default = DOTA_GAMEMODE_NONE];
      case 31: {
        if (tag == 248) {
         parse_game_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_GameMode_IsValid(value)) {
            set_game_mode(static_cast< ::DOTA_GameMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(31, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_picks_bans;
        break;
      }

      // repeated .CMatchHeroSelectEvent picks_bans = 32;
      case 32: {
        if (tag == 258) {
         parse_picks_bans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_picks_bans()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_picks_bans;
        if (input->ExpectTag(264)) goto parse_match_seq_num;
        break;
      }

      // optional uint64 match_seq_num = 33;
      case 33: {
        if (tag == 264) {
         parse_match_seq_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_seq_num_)));
          set_has_match_seq_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_replay_state;
        break;
      }

      // optional .CMsgDOTAMatch.ReplayState replay_state = 34 [default = REPLAY_AVAILABLE];
      case 34: {
        if (tag == 272) {
         parse_replay_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAMatch_ReplayState_IsValid(value)) {
            set_replay_state(static_cast< ::CMsgDOTAMatch_ReplayState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(34, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_radiant_guild_id;
        break;
      }

      // optional uint32 radiant_guild_id = 35;
      case 35: {
        if (tag == 280) {
         parse_radiant_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_guild_id_)));
          set_has_radiant_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_dire_guild_id;
        break;
      }

      // optional uint32 dire_guild_id = 36;
      case 36: {
        if (tag == 288) {
         parse_dire_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_guild_id_)));
          set_has_dire_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_radiant_team_tag;
        break;
      }

      // optional string radiant_team_tag = 37;
      case 37: {
        if (tag == 298) {
         parse_radiant_team_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radiant_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radiant_team_tag().data(), this->radiant_team_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "radiant_team_tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_dire_team_tag;
        break;
      }

      // optional string dire_team_tag = 38;
      case 38: {
        if (tag == 306) {
         parse_dire_team_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dire_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dire_team_tag().data(), this->dire_team_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dire_team_tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_series_id;
        break;
      }

      // optional uint32 series_id = 39;
      case 39: {
        if (tag == 312) {
         parse_series_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_id_)));
          set_has_series_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_series_type;
        break;
      }

      // optional uint32 series_type = 40;
      case 40: {
        if (tag == 320) {
         parse_series_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
          set_has_series_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_broadcaster_channels;
        break;
      }

      // repeated .CMsgDOTAMatch.BroadcasterChannel broadcaster_channels = 43;
      case 43: {
        if (tag == 346) {
         parse_broadcaster_channels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_broadcaster_channels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_broadcaster_channels;
        if (input->ExpectTag(352)) goto parse_engine;
        break;
      }

      // optional uint32 engine = 44;
      case 44: {
        if (tag == 352) {
         parse_engine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &engine_)));
          set_has_engine();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(362)) goto parse_custom_game_data;
        break;
      }

      // optional .CMsgDOTAMatch.CustomGameData custom_game_data = 45;
      case 45: {
        if (tag == 362) {
         parse_custom_game_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_custom_game_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_match_flags;
        break;
      }

      // optional uint32 match_flags = 46;
      case 46: {
        if (tag == 368) {
         parse_match_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_flags_)));
          set_has_match_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(381)) goto parse_private_metadata_key;
        break;
      }

      // optional fixed32 private_metadata_key = 47;
      case 47: {
        if (tag == 381) {
         parse_private_metadata_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &private_metadata_key_)));
          set_has_private_metadata_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_radiant_team_score;
        break;
      }

      // optional uint32 radiant_team_score = 48;
      case 48: {
        if (tag == 384) {
         parse_radiant_team_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_team_score_)));
          set_has_radiant_team_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_dire_team_score;
        break;
      }

      // optional uint32 dire_team_score = 49;
      case 49: {
        if (tag == 392) {
         parse_dire_team_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_team_score_)));
          set_has_dire_team_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_match_outcome;
        break;
      }

      // optional .EMatchOutcome match_outcome = 50 [default = k_EMatchOutcome_Unknown];
      case 50: {
        if (tag == 400) {
         parse_match_outcome:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EMatchOutcome_IsValid(value)) {
            set_match_outcome(static_cast< ::EMatchOutcome >(value));
          } else {
            mutable_unknown_fields()->AddVarint(50, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_tournament_id;
        break;
      }

      // optional uint32 tournament_id = 51;
      case 51: {
        if (tag == 408) {
         parse_tournament_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
          set_has_tournament_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_tournament_round;
        break;
      }

      // optional uint32 tournament_round = 52;
      case 52: {
        if (tag == 416) {
         parse_tournament_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_round_)));
          set_has_tournament_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_pre_game_duration;
        break;
      }

      // optional uint32 pre_game_duration = 53;
      case 53: {
        if (tag == 424) {
         parse_pre_game_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pre_game_duration_)));
          set_has_pre_game_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAMatch)
  return false;
#undef DO_
}

void CMsgDOTAMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAMatch)
  // optional uint32 duration = 3;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->duration(), output);
  }

  // optional fixed32 startTime = 4;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->starttime(), output);
  }

  // repeated .CMsgDOTAMatch.Player players = 5;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->players(i), output);
  }

  // optional uint64 match_id = 6;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->match_id(), output);
  }

  // repeated uint32 tower_status = 8;
  for (int i = 0; i < this->tower_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->tower_status(i), output);
  }

  // repeated uint32 barracks_status = 9;
  for (int i = 0; i < this->barracks_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->barracks_status(i), output);
  }

  // optional uint32 cluster = 10;
  if (has_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->cluster(), output);
  }

  // optional uint32 first_blood_time = 12;
  if (has_first_blood_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->first_blood_time(), output);
  }

  // optional fixed32 replay_salt = 13;
  if (has_replay_salt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(13, this->replay_salt(), output);
  }

  // optional fixed32 server_ip = 14;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(14, this->server_ip(), output);
  }

  // optional uint32 server_port = 15;
  if (has_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->server_port(), output);
  }

  // optional uint32 lobby_type = 16;
  if (has_lobby_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->lobby_type(), output);
  }

  // optional uint32 human_players = 17;
  if (has_human_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->human_players(), output);
  }

  // optional uint32 average_skill = 18;
  if (has_average_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->average_skill(), output);
  }

  // optional float game_balance = 19;
  if (has_game_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->game_balance(), output);
  }

  // optional uint32 radiant_team_id = 20;
  if (has_radiant_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->radiant_team_id(), output);
  }

  // optional uint32 dire_team_id = 21;
  if (has_dire_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->dire_team_id(), output);
  }

  // optional uint32 leagueid = 22;
  if (has_leagueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->leagueid(), output);
  }

  // optional string radiant_team_name = 23;
  if (has_radiant_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_name().data(), this->radiant_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radiant_team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->radiant_team_name(), output);
  }

  // optional string dire_team_name = 24;
  if (has_dire_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_name().data(), this->dire_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dire_team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->dire_team_name(), output);
  }

  // optional uint64 radiant_team_logo = 25;
  if (has_radiant_team_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(25, this->radiant_team_logo(), output);
  }

  // optional uint64 dire_team_logo = 26;
  if (has_dire_team_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(26, this->dire_team_logo(), output);
  }

  // optional uint32 radiant_team_complete = 27;
  if (has_radiant_team_complete()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->radiant_team_complete(), output);
  }

  // optional uint32 dire_team_complete = 28;
  if (has_dire_team_complete()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->dire_team_complete(), output);
  }

  // optional uint32 positive_votes = 29;
  if (has_positive_votes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->positive_votes(), output);
  }

  // optional uint32 negative_votes = 30;
  if (has_negative_votes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->negative_votes(), output);
  }

  // optional .DOTA_GameMode game_mode = 31 [default = DOTA_GAMEMODE_NONE];
  if (has_game_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      31, this->game_mode(), output);
  }

  // repeated .CMatchHeroSelectEvent picks_bans = 32;
  for (int i = 0; i < this->picks_bans_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->picks_bans(i), output);
  }

  // optional uint64 match_seq_num = 33;
  if (has_match_seq_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(33, this->match_seq_num(), output);
  }

  // optional .CMsgDOTAMatch.ReplayState replay_state = 34 [default = REPLAY_AVAILABLE];
  if (has_replay_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      34, this->replay_state(), output);
  }

  // optional uint32 radiant_guild_id = 35;
  if (has_radiant_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->radiant_guild_id(), output);
  }

  // optional uint32 dire_guild_id = 36;
  if (has_dire_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->dire_guild_id(), output);
  }

  // optional string radiant_team_tag = 37;
  if (has_radiant_team_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_tag().data(), this->radiant_team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radiant_team_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      37, this->radiant_team_tag(), output);
  }

  // optional string dire_team_tag = 38;
  if (has_dire_team_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_tag().data(), this->dire_team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dire_team_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      38, this->dire_team_tag(), output);
  }

  // optional uint32 series_id = 39;
  if (has_series_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->series_id(), output);
  }

  // optional uint32 series_type = 40;
  if (has_series_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->series_type(), output);
  }

  // repeated .CMsgDOTAMatch.BroadcasterChannel broadcaster_channels = 43;
  for (int i = 0; i < this->broadcaster_channels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->broadcaster_channels(i), output);
  }

  // optional uint32 engine = 44;
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->engine(), output);
  }

  // optional .CMsgDOTAMatch.CustomGameData custom_game_data = 45;
  if (has_custom_game_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->custom_game_data(), output);
  }

  // optional uint32 match_flags = 46;
  if (has_match_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->match_flags(), output);
  }

  // optional fixed32 private_metadata_key = 47;
  if (has_private_metadata_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(47, this->private_metadata_key(), output);
  }

  // optional uint32 radiant_team_score = 48;
  if (has_radiant_team_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->radiant_team_score(), output);
  }

  // optional uint32 dire_team_score = 49;
  if (has_dire_team_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->dire_team_score(), output);
  }

  // optional .EMatchOutcome match_outcome = 50 [default = k_EMatchOutcome_Unknown];
  if (has_match_outcome()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      50, this->match_outcome(), output);
  }

  // optional uint32 tournament_id = 51;
  if (has_tournament_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->tournament_id(), output);
  }

  // optional uint32 tournament_round = 52;
  if (has_tournament_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->tournament_round(), output);
  }

  // optional uint32 pre_game_duration = 53;
  if (has_pre_game_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->pre_game_duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAMatch)
}

::google::protobuf::uint8* CMsgDOTAMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAMatch)
  // optional uint32 duration = 3;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->duration(), target);
  }

  // optional fixed32 startTime = 4;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->starttime(), target);
  }

  // repeated .CMsgDOTAMatch.Player players = 5;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->players(i), target);
  }

  // optional uint64 match_id = 6;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->match_id(), target);
  }

  // repeated uint32 tower_status = 8;
  for (int i = 0; i < this->tower_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->tower_status(i), target);
  }

  // repeated uint32 barracks_status = 9;
  for (int i = 0; i < this->barracks_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->barracks_status(i), target);
  }

  // optional uint32 cluster = 10;
  if (has_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->cluster(), target);
  }

  // optional uint32 first_blood_time = 12;
  if (has_first_blood_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->first_blood_time(), target);
  }

  // optional fixed32 replay_salt = 13;
  if (has_replay_salt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(13, this->replay_salt(), target);
  }

  // optional fixed32 server_ip = 14;
  if (has_server_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(14, this->server_ip(), target);
  }

  // optional uint32 server_port = 15;
  if (has_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->server_port(), target);
  }

  // optional uint32 lobby_type = 16;
  if (has_lobby_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->lobby_type(), target);
  }

  // optional uint32 human_players = 17;
  if (has_human_players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->human_players(), target);
  }

  // optional uint32 average_skill = 18;
  if (has_average_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->average_skill(), target);
  }

  // optional float game_balance = 19;
  if (has_game_balance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->game_balance(), target);
  }

  // optional uint32 radiant_team_id = 20;
  if (has_radiant_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->radiant_team_id(), target);
  }

  // optional uint32 dire_team_id = 21;
  if (has_dire_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->dire_team_id(), target);
  }

  // optional uint32 leagueid = 22;
  if (has_leagueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->leagueid(), target);
  }

  // optional string radiant_team_name = 23;
  if (has_radiant_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_name().data(), this->radiant_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radiant_team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->radiant_team_name(), target);
  }

  // optional string dire_team_name = 24;
  if (has_dire_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_name().data(), this->dire_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dire_team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->dire_team_name(), target);
  }

  // optional uint64 radiant_team_logo = 25;
  if (has_radiant_team_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(25, this->radiant_team_logo(), target);
  }

  // optional uint64 dire_team_logo = 26;
  if (has_dire_team_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(26, this->dire_team_logo(), target);
  }

  // optional uint32 radiant_team_complete = 27;
  if (has_radiant_team_complete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->radiant_team_complete(), target);
  }

  // optional uint32 dire_team_complete = 28;
  if (has_dire_team_complete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->dire_team_complete(), target);
  }

  // optional uint32 positive_votes = 29;
  if (has_positive_votes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->positive_votes(), target);
  }

  // optional uint32 negative_votes = 30;
  if (has_negative_votes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->negative_votes(), target);
  }

  // optional .DOTA_GameMode game_mode = 31 [default = DOTA_GAMEMODE_NONE];
  if (has_game_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      31, this->game_mode(), target);
  }

  // repeated .CMatchHeroSelectEvent picks_bans = 32;
  for (int i = 0; i < this->picks_bans_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->picks_bans(i), target);
  }

  // optional uint64 match_seq_num = 33;
  if (has_match_seq_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(33, this->match_seq_num(), target);
  }

  // optional .CMsgDOTAMatch.ReplayState replay_state = 34 [default = REPLAY_AVAILABLE];
  if (has_replay_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      34, this->replay_state(), target);
  }

  // optional uint32 radiant_guild_id = 35;
  if (has_radiant_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->radiant_guild_id(), target);
  }

  // optional uint32 dire_guild_id = 36;
  if (has_dire_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->dire_guild_id(), target);
  }

  // optional string radiant_team_tag = 37;
  if (has_radiant_team_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_tag().data(), this->radiant_team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radiant_team_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->radiant_team_tag(), target);
  }

  // optional string dire_team_tag = 38;
  if (has_dire_team_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_tag().data(), this->dire_team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dire_team_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->dire_team_tag(), target);
  }

  // optional uint32 series_id = 39;
  if (has_series_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->series_id(), target);
  }

  // optional uint32 series_type = 40;
  if (has_series_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->series_type(), target);
  }

  // repeated .CMsgDOTAMatch.BroadcasterChannel broadcaster_channels = 43;
  for (int i = 0; i < this->broadcaster_channels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->broadcaster_channels(i), target);
  }

  // optional uint32 engine = 44;
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->engine(), target);
  }

  // optional .CMsgDOTAMatch.CustomGameData custom_game_data = 45;
  if (has_custom_game_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->custom_game_data(), target);
  }

  // optional uint32 match_flags = 46;
  if (has_match_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->match_flags(), target);
  }

  // optional fixed32 private_metadata_key = 47;
  if (has_private_metadata_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(47, this->private_metadata_key(), target);
  }

  // optional uint32 radiant_team_score = 48;
  if (has_radiant_team_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->radiant_team_score(), target);
  }

  // optional uint32 dire_team_score = 49;
  if (has_dire_team_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->dire_team_score(), target);
  }

  // optional .EMatchOutcome match_outcome = 50 [default = k_EMatchOutcome_Unknown];
  if (has_match_outcome()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      50, this->match_outcome(), target);
  }

  // optional uint32 tournament_id = 51;
  if (has_tournament_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->tournament_id(), target);
  }

  // optional uint32 tournament_round = 52;
  if (has_tournament_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->tournament_round(), target);
  }

  // optional uint32 pre_game_duration = 53;
  if (has_pre_game_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->pre_game_duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAMatch)
  return target;
}

int CMsgDOTAMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 duration = 3;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // optional fixed32 startTime = 4;
    if (has_starttime()) {
      total_size += 1 + 4;
    }

    // optional uint64 match_id = 6;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 cluster = 10;
    if (has_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cluster());
    }

    // optional uint32 first_blood_time = 12;
    if (has_first_blood_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_blood_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional fixed32 replay_salt = 13;
    if (has_replay_salt()) {
      total_size += 1 + 4;
    }

    // optional fixed32 server_ip = 14;
    if (has_server_ip()) {
      total_size += 1 + 4;
    }

    // optional uint32 server_port = 15;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }

    // optional uint32 lobby_type = 16;
    if (has_lobby_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_type());
    }

    // optional uint32 human_players = 17;
    if (has_human_players()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->human_players());
    }

    // optional uint32 average_skill = 18;
    if (has_average_skill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->average_skill());
    }

    // optional float game_balance = 19;
    if (has_game_balance()) {
      total_size += 2 + 4;
    }

    // optional uint32 radiant_team_id = 20;
    if (has_radiant_team_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_team_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 dire_team_id = 21;
    if (has_dire_team_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_team_id());
    }

    // optional uint32 leagueid = 22;
    if (has_leagueid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leagueid());
    }

    // optional string radiant_team_name = 23;
    if (has_radiant_team_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radiant_team_name());
    }

    // optional string dire_team_name = 24;
    if (has_dire_team_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dire_team_name());
    }

    // optional uint64 radiant_team_logo = 25;
    if (has_radiant_team_logo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->radiant_team_logo());
    }

    // optional uint64 dire_team_logo = 26;
    if (has_dire_team_logo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dire_team_logo());
    }

    // optional uint32 radiant_team_complete = 27;
    if (has_radiant_team_complete()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_team_complete());
    }

    // optional uint32 dire_team_complete = 28;
    if (has_dire_team_complete()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_team_complete());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 positive_votes = 29;
    if (has_positive_votes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->positive_votes());
    }

    // optional uint32 negative_votes = 30;
    if (has_negative_votes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->negative_votes());
    }

    // optional .DOTA_GameMode game_mode = 31 [default = DOTA_GAMEMODE_NONE];
    if (has_game_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_mode());
    }

    // optional uint64 match_seq_num = 33;
    if (has_match_seq_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_seq_num());
    }

    // optional .CMsgDOTAMatch.ReplayState replay_state = 34 [default = REPLAY_AVAILABLE];
    if (has_replay_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->replay_state());
    }

    // optional uint32 radiant_guild_id = 35;
    if (has_radiant_guild_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_guild_id());
    }

    // optional uint32 dire_guild_id = 36;
    if (has_dire_guild_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_guild_id());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string radiant_team_tag = 37;
    if (has_radiant_team_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radiant_team_tag());
    }

    // optional string dire_team_tag = 38;
    if (has_dire_team_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dire_team_tag());
    }

    // optional uint32 series_id = 39;
    if (has_series_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_id());
    }

    // optional uint32 series_type = 40;
    if (has_series_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

    // optional uint32 engine = 44;
    if (has_engine()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->engine());
    }

    // optional .CMsgDOTAMatch.CustomGameData custom_game_data = 45;
    if (has_custom_game_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->custom_game_data());
    }

    // optional uint32 match_flags = 46;
    if (has_match_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_flags());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional fixed32 private_metadata_key = 47;
    if (has_private_metadata_key()) {
      total_size += 2 + 4;
    }

    // optional uint32 radiant_team_score = 48;
    if (has_radiant_team_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_team_score());
    }

    // optional uint32 dire_team_score = 49;
    if (has_dire_team_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_team_score());
    }

    // optional .EMatchOutcome match_outcome = 50 [default = k_EMatchOutcome_Unknown];
    if (has_match_outcome()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_outcome());
    }

    // optional uint32 tournament_id = 51;
    if (has_tournament_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 tournament_round = 52;
    if (has_tournament_round()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_round());
    }

    // optional uint32 pre_game_duration = 53;
    if (has_pre_game_duration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pre_game_duration());
    }

  }
  // repeated .CMsgDOTAMatch.Player players = 5;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  // repeated uint32 tower_status = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->tower_status_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->tower_status(i));
    }
    total_size += 1 * this->tower_status_size() + data_size;
  }

  // repeated uint32 barracks_status = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->barracks_status_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->barracks_status(i));
    }
    total_size += 1 * this->barracks_status_size() + data_size;
  }

  // repeated .CMatchHeroSelectEvent picks_bans = 32;
  total_size += 2 * this->picks_bans_size();
  for (int i = 0; i < this->picks_bans_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->picks_bans(i));
  }

  // repeated .CMsgDOTAMatch.BroadcasterChannel broadcaster_channels = 43;
  total_size += 2 * this->broadcaster_channels_size();
  for (int i = 0; i < this->broadcaster_channels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->broadcaster_channels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAMatch::MergeFrom(const CMsgDOTAMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  tower_status_.MergeFrom(from.tower_status_);
  barracks_status_.MergeFrom(from.barracks_status_);
  picks_bans_.MergeFrom(from.picks_bans_);
  broadcaster_channels_.MergeFrom(from.broadcaster_channels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_cluster()) {
      set_cluster(from.cluster());
    }
    if (from.has_first_blood_time()) {
      set_first_blood_time(from.first_blood_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_replay_salt()) {
      set_replay_salt(from.replay_salt());
    }
    if (from.has_server_ip()) {
      set_server_ip(from.server_ip());
    }
    if (from.has_server_port()) {
      set_server_port(from.server_port());
    }
    if (from.has_lobby_type()) {
      set_lobby_type(from.lobby_type());
    }
    if (from.has_human_players()) {
      set_human_players(from.human_players());
    }
    if (from.has_average_skill()) {
      set_average_skill(from.average_skill());
    }
    if (from.has_game_balance()) {
      set_game_balance(from.game_balance());
    }
    if (from.has_radiant_team_id()) {
      set_radiant_team_id(from.radiant_team_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_dire_team_id()) {
      set_dire_team_id(from.dire_team_id());
    }
    if (from.has_leagueid()) {
      set_leagueid(from.leagueid());
    }
    if (from.has_radiant_team_name()) {
      set_radiant_team_name(from.radiant_team_name());
    }
    if (from.has_dire_team_name()) {
      set_dire_team_name(from.dire_team_name());
    }
    if (from.has_radiant_team_logo()) {
      set_radiant_team_logo(from.radiant_team_logo());
    }
    if (from.has_dire_team_logo()) {
      set_dire_team_logo(from.dire_team_logo());
    }
    if (from.has_radiant_team_complete()) {
      set_radiant_team_complete(from.radiant_team_complete());
    }
    if (from.has_dire_team_complete()) {
      set_dire_team_complete(from.dire_team_complete());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_positive_votes()) {
      set_positive_votes(from.positive_votes());
    }
    if (from.has_negative_votes()) {
      set_negative_votes(from.negative_votes());
    }
    if (from.has_game_mode()) {
      set_game_mode(from.game_mode());
    }
    if (from.has_match_seq_num()) {
      set_match_seq_num(from.match_seq_num());
    }
    if (from.has_replay_state()) {
      set_replay_state(from.replay_state());
    }
    if (from.has_radiant_guild_id()) {
      set_radiant_guild_id(from.radiant_guild_id());
    }
    if (from.has_dire_guild_id()) {
      set_dire_guild_id(from.dire_guild_id());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_radiant_team_tag()) {
      set_radiant_team_tag(from.radiant_team_tag());
    }
    if (from.has_dire_team_tag()) {
      set_dire_team_tag(from.dire_team_tag());
    }
    if (from.has_series_id()) {
      set_series_id(from.series_id());
    }
    if (from.has_series_type()) {
      set_series_type(from.series_type());
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
    if (from.has_custom_game_data()) {
      mutable_custom_game_data()->::CMsgDOTAMatch_CustomGameData::MergeFrom(from.custom_game_data());
    }
    if (from.has_match_flags()) {
      set_match_flags(from.match_flags());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_private_metadata_key()) {
      set_private_metadata_key(from.private_metadata_key());
    }
    if (from.has_radiant_team_score()) {
      set_radiant_team_score(from.radiant_team_score());
    }
    if (from.has_dire_team_score()) {
      set_dire_team_score(from.dire_team_score());
    }
    if (from.has_match_outcome()) {
      set_match_outcome(from.match_outcome());
    }
    if (from.has_tournament_id()) {
      set_tournament_id(from.tournament_id());
    }
    if (from.has_tournament_round()) {
      set_tournament_round(from.tournament_round());
    }
    if (from.has_pre_game_duration()) {
      set_pre_game_duration(from.pre_game_duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatch::CopyFrom(const CMsgDOTAMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatch::IsInitialized() const {

  return true;
}

void CMsgDOTAMatch::Swap(CMsgDOTAMatch* other) {
  if (other != this) {
    std::swap(duration_, other->duration_);
    std::swap(starttime_, other->starttime_);
    players_.Swap(&other->players_);
    std::swap(match_id_, other->match_id_);
    tower_status_.Swap(&other->tower_status_);
    barracks_status_.Swap(&other->barracks_status_);
    std::swap(cluster_, other->cluster_);
    std::swap(first_blood_time_, other->first_blood_time_);
    std::swap(replay_salt_, other->replay_salt_);
    std::swap(server_ip_, other->server_ip_);
    std::swap(server_port_, other->server_port_);
    std::swap(lobby_type_, other->lobby_type_);
    std::swap(human_players_, other->human_players_);
    std::swap(average_skill_, other->average_skill_);
    std::swap(game_balance_, other->game_balance_);
    std::swap(radiant_team_id_, other->radiant_team_id_);
    std::swap(dire_team_id_, other->dire_team_id_);
    std::swap(leagueid_, other->leagueid_);
    std::swap(radiant_team_name_, other->radiant_team_name_);
    std::swap(dire_team_name_, other->dire_team_name_);
    std::swap(radiant_team_logo_, other->radiant_team_logo_);
    std::swap(dire_team_logo_, other->dire_team_logo_);
    std::swap(radiant_team_complete_, other->radiant_team_complete_);
    std::swap(dire_team_complete_, other->dire_team_complete_);
    std::swap(positive_votes_, other->positive_votes_);
    std::swap(negative_votes_, other->negative_votes_);
    std::swap(game_mode_, other->game_mode_);
    picks_bans_.Swap(&other->picks_bans_);
    std::swap(match_seq_num_, other->match_seq_num_);
    std::swap(replay_state_, other->replay_state_);
    std::swap(radiant_guild_id_, other->radiant_guild_id_);
    std::swap(dire_guild_id_, other->dire_guild_id_);
    std::swap(radiant_team_tag_, other->radiant_team_tag_);
    std::swap(dire_team_tag_, other->dire_team_tag_);
    std::swap(series_id_, other->series_id_);
    std::swap(series_type_, other->series_type_);
    broadcaster_channels_.Swap(&other->broadcaster_channels_);
    std::swap(engine_, other->engine_);
    std::swap(custom_game_data_, other->custom_game_data_);
    std::swap(match_flags_, other->match_flags_);
    std::swap(private_metadata_key_, other->private_metadata_key_);
    std::swap(radiant_team_score_, other->radiant_team_score_);
    std::swap(dire_team_score_, other->dire_team_score_);
    std::swap(match_outcome_, other->match_outcome_);
    std::swap(tournament_id_, other->tournament_id_);
    std::swap(tournament_round_, other->tournament_round_);
    std::swap(pre_game_duration_, other->pre_game_duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAMatch_descriptor_;
  metadata.reflection = CMsgDOTAMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPlayerCard_StatModifier::kStatFieldNumber;
const int CMsgPlayerCard_StatModifier::kValueFieldNumber;
#endif  // !_MSC_VER

CMsgPlayerCard_StatModifier::CMsgPlayerCard_StatModifier()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPlayerCard.StatModifier)
}

void CMsgPlayerCard_StatModifier::InitAsDefaultInstance() {
}

CMsgPlayerCard_StatModifier::CMsgPlayerCard_StatModifier(const CMsgPlayerCard_StatModifier& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPlayerCard.StatModifier)
}

void CMsgPlayerCard_StatModifier::SharedCtor() {
  _cached_size_ = 0;
  stat_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPlayerCard_StatModifier::~CMsgPlayerCard_StatModifier() {
  // @@protoc_insertion_point(destructor:CMsgPlayerCard.StatModifier)
  SharedDtor();
}

void CMsgPlayerCard_StatModifier::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPlayerCard_StatModifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPlayerCard_StatModifier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPlayerCard_StatModifier_descriptor_;
}

const CMsgPlayerCard_StatModifier& CMsgPlayerCard_StatModifier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgPlayerCard_StatModifier* CMsgPlayerCard_StatModifier::default_instance_ = NULL;

CMsgPlayerCard_StatModifier* CMsgPlayerCard_StatModifier::New() const {
  return new CMsgPlayerCard_StatModifier;
}

void CMsgPlayerCard_StatModifier::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgPlayerCard_StatModifier*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(stat_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPlayerCard_StatModifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPlayerCard.StatModifier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stat = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_)));
          set_has_stat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPlayerCard.StatModifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPlayerCard.StatModifier)
  return false;
#undef DO_
}

void CMsgPlayerCard_StatModifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPlayerCard.StatModifier)
  // optional uint32 stat = 1;
  if (has_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stat(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPlayerCard.StatModifier)
}

::google::protobuf::uint8* CMsgPlayerCard_StatModifier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPlayerCard.StatModifier)
  // optional uint32 stat = 1;
  if (has_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stat(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPlayerCard.StatModifier)
  return target;
}

int CMsgPlayerCard_StatModifier::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stat = 1;
    if (has_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPlayerCard_StatModifier::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPlayerCard_StatModifier* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPlayerCard_StatModifier*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPlayerCard_StatModifier::MergeFrom(const CMsgPlayerCard_StatModifier& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stat()) {
      set_stat(from.stat());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPlayerCard_StatModifier::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerCard_StatModifier::CopyFrom(const CMsgPlayerCard_StatModifier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerCard_StatModifier::IsInitialized() const {

  return true;
}

void CMsgPlayerCard_StatModifier::Swap(CMsgPlayerCard_StatModifier* other) {
  if (other != this) {
    std::swap(stat_, other->stat_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPlayerCard_StatModifier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPlayerCard_StatModifier_descriptor_;
  metadata.reflection = CMsgPlayerCard_StatModifier_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgPlayerCard::kAccountIdFieldNumber;
const int CMsgPlayerCard::kStatModifierFieldNumber;
#endif  // !_MSC_VER

CMsgPlayerCard::CMsgPlayerCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPlayerCard)
}

void CMsgPlayerCard::InitAsDefaultInstance() {
}

CMsgPlayerCard::CMsgPlayerCard(const CMsgPlayerCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPlayerCard)
}

void CMsgPlayerCard::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPlayerCard::~CMsgPlayerCard() {
  // @@protoc_insertion_point(destructor:CMsgPlayerCard)
  SharedDtor();
}

void CMsgPlayerCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPlayerCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPlayerCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPlayerCard_descriptor_;
}

const CMsgPlayerCard& CMsgPlayerCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgPlayerCard* CMsgPlayerCard::default_instance_ = NULL;

CMsgPlayerCard* CMsgPlayerCard::New() const {
  return new CMsgPlayerCard;
}

void CMsgPlayerCard::Clear() {
  account_id_ = 0u;
  stat_modifier_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPlayerCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPlayerCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stat_modifier;
        break;
      }

      // repeated .CMsgPlayerCard.StatModifier stat_modifier = 2;
      case 2: {
        if (tag == 18) {
         parse_stat_modifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stat_modifier()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stat_modifier;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPlayerCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPlayerCard)
  return false;
#undef DO_
}

void CMsgPlayerCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPlayerCard)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated .CMsgPlayerCard.StatModifier stat_modifier = 2;
  for (int i = 0; i < this->stat_modifier_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stat_modifier(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPlayerCard)
}

::google::protobuf::uint8* CMsgPlayerCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPlayerCard)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated .CMsgPlayerCard.StatModifier stat_modifier = 2;
  for (int i = 0; i < this->stat_modifier_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stat_modifier(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPlayerCard)
  return target;
}

int CMsgPlayerCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  // repeated .CMsgPlayerCard.StatModifier stat_modifier = 2;
  total_size += 1 * this->stat_modifier_size();
  for (int i = 0; i < this->stat_modifier_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stat_modifier(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPlayerCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPlayerCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPlayerCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPlayerCard::MergeFrom(const CMsgPlayerCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  stat_modifier_.MergeFrom(from.stat_modifier_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPlayerCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerCard::CopyFrom(const CMsgPlayerCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerCard::IsInitialized() const {

  return true;
}

void CMsgPlayerCard::Swap(CMsgPlayerCard* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    stat_modifier_.Swap(&other->stat_modifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPlayerCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPlayerCard_descriptor_;
  metadata.reflection = CMsgPlayerCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyPlayerStats::kPlayerAccountIdFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kMatchIdFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kMatchCompletedFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kTeamIdFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kLeagueIdFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kDelayFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kSeriesIdFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kSeriesTypeFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kKillsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kDeathsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kCsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kGpmFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kTowerKillsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kRoshanKillsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kTeamfightParticipationFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kWardsPlacedFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kCampsStackedFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kRunesGrabbedFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kFirstBloodFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kStunsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyPlayerStats::CMsgDOTAFantasyPlayerStats()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyPlayerStats)
}

void CMsgDOTAFantasyPlayerStats::InitAsDefaultInstance() {
}

CMsgDOTAFantasyPlayerStats::CMsgDOTAFantasyPlayerStats(const CMsgDOTAFantasyPlayerStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerStats)
}

void CMsgDOTAFantasyPlayerStats::SharedCtor() {
  _cached_size_ = 0;
  player_account_id_ = 0u;
  match_id_ = GOOGLE_ULONGLONG(0);
  match_completed_ = false;
  team_id_ = 0u;
  league_id_ = 0u;
  delay_ = 0u;
  series_id_ = 0u;
  series_type_ = 0u;
  kills_ = 0u;
  deaths_ = 0u;
  cs_ = 0u;
  gpm_ = 0;
  tower_kills_ = 0u;
  roshan_kills_ = 0u;
  teamfight_participation_ = 0;
  wards_placed_ = 0u;
  camps_stacked_ = 0u;
  runes_grabbed_ = 0u;
  first_blood_ = 0u;
  stuns_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyPlayerStats::~CMsgDOTAFantasyPlayerStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerStats)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyPlayerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyPlayerStats_descriptor_;
}

const CMsgDOTAFantasyPlayerStats& CMsgDOTAFantasyPlayerStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyPlayerStats* CMsgDOTAFantasyPlayerStats::default_instance_ = NULL;

CMsgDOTAFantasyPlayerStats* CMsgDOTAFantasyPlayerStats::New() const {
  return new CMsgDOTAFantasyPlayerStats;
}

void CMsgDOTAFantasyPlayerStats::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAFantasyPlayerStats*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(match_id_, series_type_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(kills_, wards_placed_);
  }
  ZR_(camps_stacked_, stuns_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAFantasyPlayerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyPlayerStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_)));
          set_has_player_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (tag == 16) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_match_completed;
        break;
      }

      // optional bool match_completed = 3;
      case 3: {
        if (tag == 24) {
         parse_match_completed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &match_completed_)));
          set_has_match_completed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 4;
      case 4: {
        if (tag == 32) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_league_id;
        break;
      }

      // optional uint32 league_id = 5;
      case 5: {
        if (tag == 40) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_delay;
        break;
      }

      // optional uint32 delay = 6;
      case 6: {
        if (tag == 48) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_series_id;
        break;
      }

      // optional uint32 series_id = 7;
      case 7: {
        if (tag == 56) {
         parse_series_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_id_)));
          set_has_series_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_series_type;
        break;
      }

      // optional uint32 series_type = 8;
      case 8: {
        if (tag == 64) {
         parse_series_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
          set_has_series_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_kills;
        break;
      }

      // optional uint32 kills = 10;
      case 10: {
        if (tag == 80) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
          set_has_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_deaths;
        break;
      }

      // optional uint32 deaths = 11;
      case 11: {
        if (tag == 88) {
         parse_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
          set_has_deaths();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_cs;
        break;
      }

      // optional uint32 cs = 12;
      case 12: {
        if (tag == 96) {
         parse_cs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cs_)));
          set_has_cs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_gpm;
        break;
      }

      // optional float gpm = 13;
      case 13: {
        if (tag == 109) {
         parse_gpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gpm_)));
          set_has_gpm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_tower_kills;
        break;
      }

      // optional uint32 tower_kills = 14;
      case 14: {
        if (tag == 112) {
         parse_tower_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_kills_)));
          set_has_tower_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_roshan_kills;
        break;
      }

      // optional uint32 roshan_kills = 15;
      case 15: {
        if (tag == 120) {
         parse_roshan_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roshan_kills_)));
          set_has_roshan_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_teamfight_participation;
        break;
      }

      // optional float teamfight_participation = 16;
      case 16: {
        if (tag == 133) {
         parse_teamfight_participation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &teamfight_participation_)));
          set_has_teamfight_participation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_wards_placed;
        break;
      }

      // optional uint32 wards_placed = 17;
      case 17: {
        if (tag == 136) {
         parse_wards_placed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wards_placed_)));
          set_has_wards_placed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_camps_stacked;
        break;
      }

      // optional uint32 camps_stacked = 18;
      case 18: {
        if (tag == 144) {
         parse_camps_stacked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camps_stacked_)));
          set_has_camps_stacked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_runes_grabbed;
        break;
      }

      // optional uint32 runes_grabbed = 19;
      case 19: {
        if (tag == 152) {
         parse_runes_grabbed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &runes_grabbed_)));
          set_has_runes_grabbed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_first_blood;
        break;
      }

      // optional uint32 first_blood = 20;
      case 20: {
        if (tag == 160) {
         parse_first_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_blood_)));
          set_has_first_blood();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(173)) goto parse_stuns;
        break;
      }

      // optional float stuns = 21;
      case 21: {
        if (tag == 173) {
         parse_stuns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stuns_)));
          set_has_stuns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyPlayerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyPlayerStats)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyPlayerStats)
  // optional uint32 player_account_id = 1;
  if (has_player_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_account_id(), output);
  }

  // optional uint64 match_id = 2;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional bool match_completed = 3;
  if (has_match_completed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->match_completed(), output);
  }

  // optional uint32 team_id = 4;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team_id(), output);
  }

  // optional uint32 league_id = 5;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->league_id(), output);
  }

  // optional uint32 delay = 6;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->delay(), output);
  }

  // optional uint32 series_id = 7;
  if (has_series_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->series_id(), output);
  }

  // optional uint32 series_type = 8;
  if (has_series_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->series_type(), output);
  }

  // optional uint32 kills = 10;
  if (has_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->kills(), output);
  }

  // optional uint32 deaths = 11;
  if (has_deaths()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->deaths(), output);
  }

  // optional uint32 cs = 12;
  if (has_cs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->cs(), output);
  }

  // optional float gpm = 13;
  if (has_gpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->gpm(), output);
  }

  // optional uint32 tower_kills = 14;
  if (has_tower_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->tower_kills(), output);
  }

  // optional uint32 roshan_kills = 15;
  if (has_roshan_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->roshan_kills(), output);
  }

  // optional float teamfight_participation = 16;
  if (has_teamfight_participation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->teamfight_participation(), output);
  }

  // optional uint32 wards_placed = 17;
  if (has_wards_placed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->wards_placed(), output);
  }

  // optional uint32 camps_stacked = 18;
  if (has_camps_stacked()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->camps_stacked(), output);
  }

  // optional uint32 runes_grabbed = 19;
  if (has_runes_grabbed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->runes_grabbed(), output);
  }

  // optional uint32 first_blood = 20;
  if (has_first_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->first_blood(), output);
  }

  // optional float stuns = 21;
  if (has_stuns()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->stuns(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyPlayerStats)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerStats)
  // optional uint32 player_account_id = 1;
  if (has_player_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_account_id(), target);
  }

  // optional uint64 match_id = 2;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional bool match_completed = 3;
  if (has_match_completed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->match_completed(), target);
  }

  // optional uint32 team_id = 4;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team_id(), target);
  }

  // optional uint32 league_id = 5;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->league_id(), target);
  }

  // optional uint32 delay = 6;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->delay(), target);
  }

  // optional uint32 series_id = 7;
  if (has_series_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->series_id(), target);
  }

  // optional uint32 series_type = 8;
  if (has_series_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->series_type(), target);
  }

  // optional uint32 kills = 10;
  if (has_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->kills(), target);
  }

  // optional uint32 deaths = 11;
  if (has_deaths()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->deaths(), target);
  }

  // optional uint32 cs = 12;
  if (has_cs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->cs(), target);
  }

  // optional float gpm = 13;
  if (has_gpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->gpm(), target);
  }

  // optional uint32 tower_kills = 14;
  if (has_tower_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->tower_kills(), target);
  }

  // optional uint32 roshan_kills = 15;
  if (has_roshan_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->roshan_kills(), target);
  }

  // optional float teamfight_participation = 16;
  if (has_teamfight_participation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->teamfight_participation(), target);
  }

  // optional uint32 wards_placed = 17;
  if (has_wards_placed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->wards_placed(), target);
  }

  // optional uint32 camps_stacked = 18;
  if (has_camps_stacked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->camps_stacked(), target);
  }

  // optional uint32 runes_grabbed = 19;
  if (has_runes_grabbed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->runes_grabbed(), target);
  }

  // optional uint32 first_blood = 20;
  if (has_first_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->first_blood(), target);
  }

  // optional float stuns = 21;
  if (has_stuns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->stuns(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerStats)
  return target;
}

int CMsgDOTAFantasyPlayerStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_account_id = 1;
    if (has_player_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id());
    }

    // optional uint64 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional bool match_completed = 3;
    if (has_match_completed()) {
      total_size += 1 + 1;
    }

    // optional uint32 team_id = 4;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint32 league_id = 5;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 delay = 6;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

    // optional uint32 series_id = 7;
    if (has_series_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_id());
    }

    // optional uint32 series_type = 8;
    if (has_series_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 kills = 10;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 11;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 cs = 12;
    if (has_cs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cs());
    }

    // optional float gpm = 13;
    if (has_gpm()) {
      total_size += 1 + 4;
    }

    // optional uint32 tower_kills = 14;
    if (has_tower_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_kills());
    }

    // optional uint32 roshan_kills = 15;
    if (has_roshan_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roshan_kills());
    }

    // optional float teamfight_participation = 16;
    if (has_teamfight_participation()) {
      total_size += 2 + 4;
    }

    // optional uint32 wards_placed = 17;
    if (has_wards_placed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wards_placed());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 camps_stacked = 18;
    if (has_camps_stacked()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camps_stacked());
    }

    // optional uint32 runes_grabbed = 19;
    if (has_runes_grabbed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->runes_grabbed());
    }

    // optional uint32 first_blood = 20;
    if (has_first_blood()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_blood());
    }

    // optional float stuns = 21;
    if (has_stuns()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAFantasyPlayerStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerStats::MergeFrom(const CMsgDOTAFantasyPlayerStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_account_id()) {
      set_player_account_id(from.player_account_id());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_match_completed()) {
      set_match_completed(from.match_completed());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_series_id()) {
      set_series_id(from.series_id());
    }
    if (from.has_series_type()) {
      set_series_type(from.series_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_kills()) {
      set_kills(from.kills());
    }
    if (from.has_deaths()) {
      set_deaths(from.deaths());
    }
    if (from.has_cs()) {
      set_cs(from.cs());
    }
    if (from.has_gpm()) {
      set_gpm(from.gpm());
    }
    if (from.has_tower_kills()) {
      set_tower_kills(from.tower_kills());
    }
    if (from.has_roshan_kills()) {
      set_roshan_kills(from.roshan_kills());
    }
    if (from.has_teamfight_participation()) {
      set_teamfight_participation(from.teamfight_participation());
    }
    if (from.has_wards_placed()) {
      set_wards_placed(from.wards_placed());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_camps_stacked()) {
      set_camps_stacked(from.camps_stacked());
    }
    if (from.has_runes_grabbed()) {
      set_runes_grabbed(from.runes_grabbed());
    }
    if (from.has_first_blood()) {
      set_first_blood(from.first_blood());
    }
    if (from.has_stuns()) {
      set_stuns(from.stuns());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAFantasyPlayerStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerStats::CopyFrom(const CMsgDOTAFantasyPlayerStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerStats::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyPlayerStats::Swap(CMsgDOTAFantasyPlayerStats* other) {
  if (other != this) {
    std::swap(player_account_id_, other->player_account_id_);
    std::swap(match_id_, other->match_id_);
    std::swap(match_completed_, other->match_completed_);
    std::swap(team_id_, other->team_id_);
    std::swap(league_id_, other->league_id_);
    std::swap(delay_, other->delay_);
    std::swap(series_id_, other->series_id_);
    std::swap(series_type_, other->series_type_);
    std::swap(kills_, other->kills_);
    std::swap(deaths_, other->deaths_);
    std::swap(cs_, other->cs_);
    std::swap(gpm_, other->gpm_);
    std::swap(tower_kills_, other->tower_kills_);
    std::swap(roshan_kills_, other->roshan_kills_);
    std::swap(teamfight_participation_, other->teamfight_participation_);
    std::swap(wards_placed_, other->wards_placed_);
    std::swap(camps_stacked_, other->camps_stacked_);
    std::swap(runes_grabbed_, other->runes_grabbed_);
    std::swap(first_blood_, other->first_blood_);
    std::swap(stuns_, other->stuns_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyPlayerStats_descriptor_;
  metadata.reflection = CMsgDOTAFantasyPlayerStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyPlayerMatchStats::kMatchesFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyPlayerMatchStats::CMsgDOTAFantasyPlayerMatchStats()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyPlayerMatchStats)
}

void CMsgDOTAFantasyPlayerMatchStats::InitAsDefaultInstance() {
}

CMsgDOTAFantasyPlayerMatchStats::CMsgDOTAFantasyPlayerMatchStats(const CMsgDOTAFantasyPlayerMatchStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerMatchStats)
}

void CMsgDOTAFantasyPlayerMatchStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyPlayerMatchStats::~CMsgDOTAFantasyPlayerMatchStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerMatchStats)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerMatchStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyPlayerMatchStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerMatchStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyPlayerMatchStats_descriptor_;
}

const CMsgDOTAFantasyPlayerMatchStats& CMsgDOTAFantasyPlayerMatchStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyPlayerMatchStats* CMsgDOTAFantasyPlayerMatchStats::default_instance_ = NULL;

CMsgDOTAFantasyPlayerMatchStats* CMsgDOTAFantasyPlayerMatchStats::New() const {
  return new CMsgDOTAFantasyPlayerMatchStats;
}

void CMsgDOTAFantasyPlayerMatchStats::Clear() {
  matches_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAFantasyPlayerMatchStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyPlayerMatchStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgDOTAFantasyPlayerStats matches = 1;
      case 1: {
        if (tag == 10) {
         parse_matches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_matches;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyPlayerMatchStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyPlayerMatchStats)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerMatchStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyPlayerMatchStats)
  // repeated .CMsgDOTAFantasyPlayerStats matches = 1;
  for (int i = 0; i < this->matches_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->matches(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyPlayerMatchStats)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerMatchStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerMatchStats)
  // repeated .CMsgDOTAFantasyPlayerStats matches = 1;
  for (int i = 0; i < this->matches_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->matches(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerMatchStats)
  return target;
}

int CMsgDOTAFantasyPlayerMatchStats::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgDOTAFantasyPlayerStats matches = 1;
  total_size += 1 * this->matches_size();
  for (int i = 0; i < this->matches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matches(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerMatchStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerMatchStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAFantasyPlayerMatchStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerMatchStats::MergeFrom(const CMsgDOTAFantasyPlayerMatchStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  matches_.MergeFrom(from.matches_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAFantasyPlayerMatchStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerMatchStats::CopyFrom(const CMsgDOTAFantasyPlayerMatchStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerMatchStats::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyPlayerMatchStats::Swap(CMsgDOTAFantasyPlayerMatchStats* other) {
  if (other != this) {
    matches_.Swap(&other->matches_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerMatchStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyPlayerMatchStats_descriptor_;
  metadata.reflection = CMsgDOTAFantasyPlayerMatchStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTABotDebugInfo_Bot_Mode::kModeIdFieldNumber;
const int CMsgDOTABotDebugInfo_Bot_Mode::kDesireFieldNumber;
const int CMsgDOTABotDebugInfo_Bot_Mode::kTargetEntityFieldNumber;
const int CMsgDOTABotDebugInfo_Bot_Mode::kTargetXFieldNumber;
const int CMsgDOTABotDebugInfo_Bot_Mode::kTargetYFieldNumber;
const int CMsgDOTABotDebugInfo_Bot_Mode::kTargetZFieldNumber;
#endif  // !_MSC_VER

CMsgDOTABotDebugInfo_Bot_Mode::CMsgDOTABotDebugInfo_Bot_Mode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTABotDebugInfo.Bot.Mode)
}

void CMsgDOTABotDebugInfo_Bot_Mode::InitAsDefaultInstance() {
}

CMsgDOTABotDebugInfo_Bot_Mode::CMsgDOTABotDebugInfo_Bot_Mode(const CMsgDOTABotDebugInfo_Bot_Mode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTABotDebugInfo.Bot.Mode)
}

void CMsgDOTABotDebugInfo_Bot_Mode::SharedCtor() {
  _cached_size_ = 0;
  mode_id_ = 0u;
  desire_ = 0;
  target_entity_ = 0u;
  target_x_ = 0u;
  target_y_ = 0u;
  target_z_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTABotDebugInfo_Bot_Mode::~CMsgDOTABotDebugInfo_Bot_Mode() {
  // @@protoc_insertion_point(destructor:CMsgDOTABotDebugInfo.Bot.Mode)
  SharedDtor();
}

void CMsgDOTABotDebugInfo_Bot_Mode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTABotDebugInfo_Bot_Mode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTABotDebugInfo_Bot_Mode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTABotDebugInfo_Bot_Mode_descriptor_;
}

const CMsgDOTABotDebugInfo_Bot_Mode& CMsgDOTABotDebugInfo_Bot_Mode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTABotDebugInfo_Bot_Mode* CMsgDOTABotDebugInfo_Bot_Mode::default_instance_ = NULL;

CMsgDOTABotDebugInfo_Bot_Mode* CMsgDOTABotDebugInfo_Bot_Mode::New() const {
  return new CMsgDOTABotDebugInfo_Bot_Mode;
}

void CMsgDOTABotDebugInfo_Bot_Mode::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTABotDebugInfo_Bot_Mode*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(mode_id_, target_z_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTABotDebugInfo_Bot_Mode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTABotDebugInfo.Bot.Mode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mode_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_id_)));
          set_has_mode_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_desire;
        break;
      }

      // optional float desire = 2;
      case 2: {
        if (tag == 21) {
         parse_desire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_)));
          set_has_desire();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_target_entity;
        break;
      }

      // optional uint32 target_entity = 3;
      case 3: {
        if (tag == 24) {
         parse_target_entity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entity_)));
          set_has_target_entity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_target_x;
        break;
      }

      // optional uint32 target_x = 4;
      case 4: {
        if (tag == 32) {
         parse_target_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_x_)));
          set_has_target_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_target_y;
        break;
      }

      // optional uint32 target_y = 5;
      case 5: {
        if (tag == 40) {
         parse_target_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_y_)));
          set_has_target_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_target_z;
        break;
      }

      // optional uint32 target_z = 6;
      case 6: {
        if (tag == 48) {
         parse_target_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_z_)));
          set_has_target_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTABotDebugInfo.Bot.Mode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTABotDebugInfo.Bot.Mode)
  return false;
#undef DO_
}

void CMsgDOTABotDebugInfo_Bot_Mode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTABotDebugInfo.Bot.Mode)
  // optional uint32 mode_id = 1;
  if (has_mode_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mode_id(), output);
  }

  // optional float desire = 2;
  if (has_desire()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->desire(), output);
  }

  // optional uint32 target_entity = 3;
  if (has_target_entity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_entity(), output);
  }

  // optional uint32 target_x = 4;
  if (has_target_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->target_x(), output);
  }

  // optional uint32 target_y = 5;
  if (has_target_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->target_y(), output);
  }

  // optional uint32 target_z = 6;
  if (has_target_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->target_z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTABotDebugInfo.Bot.Mode)
}

::google::protobuf::uint8* CMsgDOTABotDebugInfo_Bot_Mode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTABotDebugInfo.Bot.Mode)
  // optional uint32 mode_id = 1;
  if (has_mode_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mode_id(), target);
  }

  // optional float desire = 2;
  if (has_desire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->desire(), target);
  }

  // optional uint32 target_entity = 3;
  if (has_target_entity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_entity(), target);
  }

  // optional uint32 target_x = 4;
  if (has_target_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->target_x(), target);
  }

  // optional uint32 target_y = 5;
  if (has_target_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->target_y(), target);
  }

  // optional uint32 target_z = 6;
  if (has_target_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->target_z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTABotDebugInfo.Bot.Mode)
  return target;
}

int CMsgDOTABotDebugInfo_Bot_Mode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mode_id = 1;
    if (has_mode_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode_id());
    }

    // optional float desire = 2;
    if (has_desire()) {
      total_size += 1 + 4;
    }

    // optional uint32 target_entity = 3;
    if (has_target_entity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entity());
    }

    // optional uint32 target_x = 4;
    if (has_target_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_x());
    }

    // optional uint32 target_y = 5;
    if (has_target_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_y());
    }

    // optional uint32 target_z = 6;
    if (has_target_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_z());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTABotDebugInfo_Bot_Mode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTABotDebugInfo_Bot_Mode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTABotDebugInfo_Bot_Mode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTABotDebugInfo_Bot_Mode::MergeFrom(const CMsgDOTABotDebugInfo_Bot_Mode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode_id()) {
      set_mode_id(from.mode_id());
    }
    if (from.has_desire()) {
      set_desire(from.desire());
    }
    if (from.has_target_entity()) {
      set_target_entity(from.target_entity());
    }
    if (from.has_target_x()) {
      set_target_x(from.target_x());
    }
    if (from.has_target_y()) {
      set_target_y(from.target_y());
    }
    if (from.has_target_z()) {
      set_target_z(from.target_z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTABotDebugInfo_Bot_Mode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABotDebugInfo_Bot_Mode::CopyFrom(const CMsgDOTABotDebugInfo_Bot_Mode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABotDebugInfo_Bot_Mode::IsInitialized() const {

  return true;
}

void CMsgDOTABotDebugInfo_Bot_Mode::Swap(CMsgDOTABotDebugInfo_Bot_Mode* other) {
  if (other != this) {
    std::swap(mode_id_, other->mode_id_);
    std::swap(desire_, other->desire_);
    std::swap(target_entity_, other->target_entity_);
    std::swap(target_x_, other->target_x_);
    std::swap(target_y_, other->target_y_);
    std::swap(target_z_, other->target_z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTABotDebugInfo_Bot_Mode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTABotDebugInfo_Bot_Mode_descriptor_;
  metadata.reflection = CMsgDOTABotDebugInfo_Bot_Mode_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTABotDebugInfo_Bot_Action::kActionIdFieldNumber;
const int CMsgDOTABotDebugInfo_Bot_Action::kActionTargetFieldNumber;
#endif  // !_MSC_VER

CMsgDOTABotDebugInfo_Bot_Action::CMsgDOTABotDebugInfo_Bot_Action()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTABotDebugInfo.Bot.Action)
}

void CMsgDOTABotDebugInfo_Bot_Action::InitAsDefaultInstance() {
}

CMsgDOTABotDebugInfo_Bot_Action::CMsgDOTABotDebugInfo_Bot_Action(const CMsgDOTABotDebugInfo_Bot_Action& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTABotDebugInfo.Bot.Action)
}

void CMsgDOTABotDebugInfo_Bot_Action::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  action_id_ = 0u;
  action_target_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTABotDebugInfo_Bot_Action::~CMsgDOTABotDebugInfo_Bot_Action() {
  // @@protoc_insertion_point(destructor:CMsgDOTABotDebugInfo.Bot.Action)
  SharedDtor();
}

void CMsgDOTABotDebugInfo_Bot_Action::SharedDtor() {
  if (action_target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete action_target_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTABotDebugInfo_Bot_Action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTABotDebugInfo_Bot_Action::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTABotDebugInfo_Bot_Action_descriptor_;
}

const CMsgDOTABotDebugInfo_Bot_Action& CMsgDOTABotDebugInfo_Bot_Action::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTABotDebugInfo_Bot_Action* CMsgDOTABotDebugInfo_Bot_Action::default_instance_ = NULL;

CMsgDOTABotDebugInfo_Bot_Action* CMsgDOTABotDebugInfo_Bot_Action::New() const {
  return new CMsgDOTABotDebugInfo_Bot_Action;
}

void CMsgDOTABotDebugInfo_Bot_Action::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    action_id_ = 0u;
    if (has_action_target()) {
      if (action_target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        action_target_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTABotDebugInfo_Bot_Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTABotDebugInfo.Bot.Action)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 action_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_action_target;
        break;
      }

      // optional string action_target = 2;
      case 2: {
        if (tag == 18) {
         parse_action_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->action_target().data(), this->action_target().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "action_target");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTABotDebugInfo.Bot.Action)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTABotDebugInfo.Bot.Action)
  return false;
#undef DO_
}

void CMsgDOTABotDebugInfo_Bot_Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTABotDebugInfo.Bot.Action)
  // optional uint32 action_id = 1;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->action_id(), output);
  }

  // optional string action_target = 2;
  if (has_action_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action_target().data(), this->action_target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "action_target");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->action_target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTABotDebugInfo.Bot.Action)
}

::google::protobuf::uint8* CMsgDOTABotDebugInfo_Bot_Action::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTABotDebugInfo.Bot.Action)
  // optional uint32 action_id = 1;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->action_id(), target);
  }

  // optional string action_target = 2;
  if (has_action_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action_target().data(), this->action_target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "action_target");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->action_target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTABotDebugInfo.Bot.Action)
  return target;
}

int CMsgDOTABotDebugInfo_Bot_Action::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 action_id = 1;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }

    // optional string action_target = 2;
    if (has_action_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action_target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTABotDebugInfo_Bot_Action::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTABotDebugInfo_Bot_Action* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTABotDebugInfo_Bot_Action*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTABotDebugInfo_Bot_Action::MergeFrom(const CMsgDOTABotDebugInfo_Bot_Action& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_action_target()) {
      set_action_target(from.action_target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTABotDebugInfo_Bot_Action::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABotDebugInfo_Bot_Action::CopyFrom(const CMsgDOTABotDebugInfo_Bot_Action& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABotDebugInfo_Bot_Action::IsInitialized() const {

  return true;
}

void CMsgDOTABotDebugInfo_Bot_Action::Swap(CMsgDOTABotDebugInfo_Bot_Action* other) {
  if (other != this) {
    std::swap(action_id_, other->action_id_);
    std::swap(action_target_, other->action_target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTABotDebugInfo_Bot_Action::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTABotDebugInfo_Bot_Action_descriptor_;
  metadata.reflection = CMsgDOTABotDebugInfo_Bot_Action_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTABotDebugInfo_Bot::kPlayerOwnerIdFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kHeroIdFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kDifficultyFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kPowerCurrentFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kPowerMaxFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kMoveTargetXFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kMoveTargetYFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kMoveTargetZFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kActiveModeIdFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kExecutionTimeFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kModesFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kActionFieldNumber;
#endif  // !_MSC_VER

CMsgDOTABotDebugInfo_Bot::CMsgDOTABotDebugInfo_Bot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTABotDebugInfo.Bot)
}

void CMsgDOTABotDebugInfo_Bot::InitAsDefaultInstance() {
  action_ = const_cast< ::CMsgDOTABotDebugInfo_Bot_Action*>(&::CMsgDOTABotDebugInfo_Bot_Action::default_instance());
}

CMsgDOTABotDebugInfo_Bot::CMsgDOTABotDebugInfo_Bot(const CMsgDOTABotDebugInfo_Bot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTABotDebugInfo.Bot)
}

void CMsgDOTABotDebugInfo_Bot::SharedCtor() {
  _cached_size_ = 0;
  player_owner_id_ = 0u;
  hero_id_ = 0u;
  difficulty_ = 0u;
  power_current_ = 0u;
  power_max_ = 0u;
  move_target_x_ = 0u;
  move_target_y_ = 0u;
  move_target_z_ = 0u;
  active_mode_id_ = 0u;
  execution_time_ = 0;
  action_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTABotDebugInfo_Bot::~CMsgDOTABotDebugInfo_Bot() {
  // @@protoc_insertion_point(destructor:CMsgDOTABotDebugInfo.Bot)
  SharedDtor();
}

void CMsgDOTABotDebugInfo_Bot::SharedDtor() {
  if (this != default_instance_) {
    delete action_;
  }
}

void CMsgDOTABotDebugInfo_Bot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTABotDebugInfo_Bot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTABotDebugInfo_Bot_descriptor_;
}

const CMsgDOTABotDebugInfo_Bot& CMsgDOTABotDebugInfo_Bot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTABotDebugInfo_Bot* CMsgDOTABotDebugInfo_Bot::default_instance_ = NULL;

CMsgDOTABotDebugInfo_Bot* CMsgDOTABotDebugInfo_Bot::New() const {
  return new CMsgDOTABotDebugInfo_Bot;
}

void CMsgDOTABotDebugInfo_Bot::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTABotDebugInfo_Bot*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(player_owner_id_, move_target_z_);
  }
  if (_has_bits_[8 / 32] & 2816) {
    ZR_(active_mode_id_, execution_time_);
    if (has_action()) {
      if (action_ != NULL) action_->::CMsgDOTABotDebugInfo_Bot_Action::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  modes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTABotDebugInfo_Bot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTABotDebugInfo.Bot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_owner_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_owner_id_)));
          set_has_player_owner_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint32 hero_id = 2;
      case 2: {
        if (tag == 16) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_difficulty;
        break;
      }

      // optional uint32 difficulty = 3;
      case 3: {
        if (tag == 24) {
         parse_difficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
          set_has_difficulty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_power_current;
        break;
      }

      // optional uint32 power_current = 4;
      case 4: {
        if (tag == 32) {
         parse_power_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_current_)));
          set_has_power_current();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_power_max;
        break;
      }

      // optional uint32 power_max = 5;
      case 5: {
        if (tag == 40) {
         parse_power_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_max_)));
          set_has_power_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_move_target_x;
        break;
      }

      // optional uint32 move_target_x = 6;
      case 6: {
        if (tag == 48) {
         parse_move_target_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &move_target_x_)));
          set_has_move_target_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_move_target_y;
        break;
      }

      // optional uint32 move_target_y = 7;
      case 7: {
        if (tag == 56) {
         parse_move_target_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &move_target_y_)));
          set_has_move_target_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_move_target_z;
        break;
      }

      // optional uint32 move_target_z = 8;
      case 8: {
        if (tag == 64) {
         parse_move_target_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &move_target_z_)));
          set_has_move_target_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_active_mode_id;
        break;
      }

      // optional uint32 active_mode_id = 9;
      case 9: {
        if (tag == 72) {
         parse_active_mode_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_mode_id_)));
          set_has_active_mode_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_execution_time;
        break;
      }

      // optional float execution_time = 10;
      case 10: {
        if (tag == 85) {
         parse_execution_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &execution_time_)));
          set_has_execution_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_modes;
        break;
      }

      // repeated .CMsgDOTABotDebugInfo.Bot.Mode modes = 11;
      case 11: {
        if (tag == 90) {
         parse_modes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_modes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_modes;
        if (input->ExpectTag(98)) goto parse_action;
        break;
      }

      // optional .CMsgDOTABotDebugInfo.Bot.Action action = 12;
      case 12: {
        if (tag == 98) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTABotDebugInfo.Bot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTABotDebugInfo.Bot)
  return false;
#undef DO_
}

void CMsgDOTABotDebugInfo_Bot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTABotDebugInfo.Bot)
  // optional uint32 player_owner_id = 1;
  if (has_player_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_owner_id(), output);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // optional uint32 difficulty = 3;
  if (has_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->difficulty(), output);
  }

  // optional uint32 power_current = 4;
  if (has_power_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->power_current(), output);
  }

  // optional uint32 power_max = 5;
  if (has_power_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->power_max(), output);
  }

  // optional uint32 move_target_x = 6;
  if (has_move_target_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->move_target_x(), output);
  }

  // optional uint32 move_target_y = 7;
  if (has_move_target_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->move_target_y(), output);
  }

  // optional uint32 move_target_z = 8;
  if (has_move_target_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->move_target_z(), output);
  }

  // optional uint32 active_mode_id = 9;
  if (has_active_mode_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->active_mode_id(), output);
  }

  // optional float execution_time = 10;
  if (has_execution_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->execution_time(), output);
  }

  // repeated .CMsgDOTABotDebugInfo.Bot.Mode modes = 11;
  for (int i = 0; i < this->modes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->modes(i), output);
  }

  // optional .CMsgDOTABotDebugInfo.Bot.Action action = 12;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTABotDebugInfo.Bot)
}

::google::protobuf::uint8* CMsgDOTABotDebugInfo_Bot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTABotDebugInfo.Bot)
  // optional uint32 player_owner_id = 1;
  if (has_player_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_owner_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // optional uint32 difficulty = 3;
  if (has_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->difficulty(), target);
  }

  // optional uint32 power_current = 4;
  if (has_power_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->power_current(), target);
  }

  // optional uint32 power_max = 5;
  if (has_power_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->power_max(), target);
  }

  // optional uint32 move_target_x = 6;
  if (has_move_target_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->move_target_x(), target);
  }

  // optional uint32 move_target_y = 7;
  if (has_move_target_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->move_target_y(), target);
  }

  // optional uint32 move_target_z = 8;
  if (has_move_target_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->move_target_z(), target);
  }

  // optional uint32 active_mode_id = 9;
  if (has_active_mode_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->active_mode_id(), target);
  }

  // optional float execution_time = 10;
  if (has_execution_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->execution_time(), target);
  }

  // repeated .CMsgDOTABotDebugInfo.Bot.Mode modes = 11;
  for (int i = 0; i < this->modes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->modes(i), target);
  }

  // optional .CMsgDOTABotDebugInfo.Bot.Action action = 12;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTABotDebugInfo.Bot)
  return target;
}

int CMsgDOTABotDebugInfo_Bot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_owner_id = 1;
    if (has_player_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_owner_id());
    }

    // optional uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 difficulty = 3;
    if (has_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficulty());
    }

    // optional uint32 power_current = 4;
    if (has_power_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power_current());
    }

    // optional uint32 power_max = 5;
    if (has_power_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power_max());
    }

    // optional uint32 move_target_x = 6;
    if (has_move_target_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->move_target_x());
    }

    // optional uint32 move_target_y = 7;
    if (has_move_target_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->move_target_y());
    }

    // optional uint32 move_target_z = 8;
    if (has_move_target_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->move_target_z());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 active_mode_id = 9;
    if (has_active_mode_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_mode_id());
    }

    // optional float execution_time = 10;
    if (has_execution_time()) {
      total_size += 1 + 4;
    }

    // optional .CMsgDOTABotDebugInfo.Bot.Action action = 12;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->action());
    }

  }
  // repeated .CMsgDOTABotDebugInfo.Bot.Mode modes = 11;
  total_size += 1 * this->modes_size();
  for (int i = 0; i < this->modes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->modes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTABotDebugInfo_Bot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTABotDebugInfo_Bot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTABotDebugInfo_Bot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTABotDebugInfo_Bot::MergeFrom(const CMsgDOTABotDebugInfo_Bot& from) {
  GOOGLE_CHECK_NE(&from, this);
  modes_.MergeFrom(from.modes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_owner_id()) {
      set_player_owner_id(from.player_owner_id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_difficulty()) {
      set_difficulty(from.difficulty());
    }
    if (from.has_power_current()) {
      set_power_current(from.power_current());
    }
    if (from.has_power_max()) {
      set_power_max(from.power_max());
    }
    if (from.has_move_target_x()) {
      set_move_target_x(from.move_target_x());
    }
    if (from.has_move_target_y()) {
      set_move_target_y(from.move_target_y());
    }
    if (from.has_move_target_z()) {
      set_move_target_z(from.move_target_z());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_active_mode_id()) {
      set_active_mode_id(from.active_mode_id());
    }
    if (from.has_execution_time()) {
      set_execution_time(from.execution_time());
    }
    if (from.has_action()) {
      mutable_action()->::CMsgDOTABotDebugInfo_Bot_Action::MergeFrom(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTABotDebugInfo_Bot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABotDebugInfo_Bot::CopyFrom(const CMsgDOTABotDebugInfo_Bot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABotDebugInfo_Bot::IsInitialized() const {

  return true;
}

void CMsgDOTABotDebugInfo_Bot::Swap(CMsgDOTABotDebugInfo_Bot* other) {
  if (other != this) {
    std::swap(player_owner_id_, other->player_owner_id_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(difficulty_, other->difficulty_);
    std::swap(power_current_, other->power_current_);
    std::swap(power_max_, other->power_max_);
    std::swap(move_target_x_, other->move_target_x_);
    std::swap(move_target_y_, other->move_target_y_);
    std::swap(move_target_z_, other->move_target_z_);
    std::swap(active_mode_id_, other->active_mode_id_);
    std::swap(execution_time_, other->execution_time_);
    modes_.Swap(&other->modes_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTABotDebugInfo_Bot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTABotDebugInfo_Bot_descriptor_;
  metadata.reflection = CMsgDOTABotDebugInfo_Bot_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTABotDebugInfo::kBotsFieldNumber;
const int CMsgDOTABotDebugInfo::kDesirePushLaneTopFieldNumber;
const int CMsgDOTABotDebugInfo::kDesirePushLaneMidFieldNumber;
const int CMsgDOTABotDebugInfo::kDesirePushLaneBotFieldNumber;
const int CMsgDOTABotDebugInfo::kDesireDefendLaneTopFieldNumber;
const int CMsgDOTABotDebugInfo::kDesireDefendLaneMidFieldNumber;
const int CMsgDOTABotDebugInfo::kDesireDefendLaneBotFieldNumber;
const int CMsgDOTABotDebugInfo::kDesireFarmLaneTopFieldNumber;
const int CMsgDOTABotDebugInfo::kDesireFarmLaneMidFieldNumber;
const int CMsgDOTABotDebugInfo::kDesireFarmLaneBotFieldNumber;
const int CMsgDOTABotDebugInfo::kDesireFarmRoshanFieldNumber;
const int CMsgDOTABotDebugInfo::kExecutionTimeFieldNumber;
#endif  // !_MSC_VER

CMsgDOTABotDebugInfo::CMsgDOTABotDebugInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTABotDebugInfo)
}

void CMsgDOTABotDebugInfo::InitAsDefaultInstance() {
}

CMsgDOTABotDebugInfo::CMsgDOTABotDebugInfo(const CMsgDOTABotDebugInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTABotDebugInfo)
}

void CMsgDOTABotDebugInfo::SharedCtor() {
  _cached_size_ = 0;
  desire_push_lane_top_ = 0;
  desire_push_lane_mid_ = 0;
  desire_push_lane_bot_ = 0;
  desire_defend_lane_top_ = 0;
  desire_defend_lane_mid_ = 0;
  desire_defend_lane_bot_ = 0;
  desire_farm_lane_top_ = 0;
  desire_farm_lane_mid_ = 0;
  desire_farm_lane_bot_ = 0;
  desire_farm_roshan_ = 0;
  execution_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTABotDebugInfo::~CMsgDOTABotDebugInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTABotDebugInfo)
  SharedDtor();
}

void CMsgDOTABotDebugInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTABotDebugInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTABotDebugInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTABotDebugInfo_descriptor_;
}

const CMsgDOTABotDebugInfo& CMsgDOTABotDebugInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  return *default_instance_;
}

CMsgDOTABotDebugInfo* CMsgDOTABotDebugInfo::default_instance_ = NULL;

CMsgDOTABotDebugInfo* CMsgDOTABotDebugInfo::New() const {
  return new CMsgDOTABotDebugInfo;
}

void CMsgDOTABotDebugInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTABotDebugInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 254) {
    ZR_(desire_push_lane_top_, desire_farm_lane_top_);
  }
  ZR_(desire_farm_lane_mid_, execution_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  bots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTABotDebugInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTABotDebugInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgDOTABotDebugInfo.Bot bots = 1;
      case 1: {
        if (tag == 10) {
         parse_bots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bots()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_bots;
        if (input->ExpectTag(21)) goto parse_desire_push_lane_top;
        break;
      }

      // optional float desire_push_lane_top = 2;
      case 2: {
        if (tag == 21) {
         parse_desire_push_lane_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_push_lane_top_)));
          set_has_desire_push_lane_top();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_desire_push_lane_mid;
        break;
      }

      // optional float desire_push_lane_mid = 3;
      case 3: {
        if (tag == 29) {
         parse_desire_push_lane_mid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_push_lane_mid_)));
          set_has_desire_push_lane_mid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_desire_push_lane_bot;
        break;
      }

      // optional float desire_push_lane_bot = 4;
      case 4: {
        if (tag == 37) {
         parse_desire_push_lane_bot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_push_lane_bot_)));
          set_has_desire_push_lane_bot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_desire_defend_lane_top;
        break;
      }

      // optional float desire_defend_lane_top = 5;
      case 5: {
        if (tag == 45) {
         parse_desire_defend_lane_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_defend_lane_top_)));
          set_has_desire_defend_lane_top();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_desire_defend_lane_mid;
        break;
      }

      // optional float desire_defend_lane_mid = 6;
      case 6: {
        if (tag == 53) {
         parse_desire_defend_lane_mid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_defend_lane_mid_)));
          set_has_desire_defend_lane_mid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_desire_defend_lane_bot;
        break;
      }

      // optional float desire_defend_lane_bot = 7;
      case 7: {
        if (tag == 61) {
         parse_desire_defend_lane_bot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_defend_lane_bot_)));
          set_has_desire_defend_lane_bot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_desire_farm_lane_top;
        break;
      }

      // optional float desire_farm_lane_top = 8;
      case 8: {
        if (tag == 69) {
         parse_desire_farm_lane_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_farm_lane_top_)));
          set_has_desire_farm_lane_top();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_desire_farm_lane_mid;
        break;
      }

      // optional float desire_farm_lane_mid = 9;
      case 9: {
        if (tag == 77) {
         parse_desire_farm_lane_mid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_farm_lane_mid_)));
          set_has_desire_farm_lane_mid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_desire_farm_lane_bot;
        break;
      }

      // optional float desire_farm_lane_bot = 10;
      case 10: {
        if (tag == 85) {
         parse_desire_farm_lane_bot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_farm_lane_bot_)));
          set_has_desire_farm_lane_bot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_desire_farm_roshan;
        break;
      }

      // optional float desire_farm_roshan = 11;
      case 11: {
        if (tag == 93) {
         parse_desire_farm_roshan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_farm_roshan_)));
          set_has_desire_farm_roshan();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_execution_time;
        break;
      }

      // optional float execution_time = 12;
      case 12: {
        if (tag == 101) {
         parse_execution_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &execution_time_)));
          set_has_execution_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTABotDebugInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTABotDebugInfo)
  return false;
#undef DO_
}

void CMsgDOTABotDebugInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTABotDebugInfo)
  // repeated .CMsgDOTABotDebugInfo.Bot bots = 1;
  for (int i = 0; i < this->bots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bots(i), output);
  }

  // optional float desire_push_lane_top = 2;
  if (has_desire_push_lane_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->desire_push_lane_top(), output);
  }

  // optional float desire_push_lane_mid = 3;
  if (has_desire_push_lane_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->desire_push_lane_mid(), output);
  }

  // optional float desire_push_lane_bot = 4;
  if (has_desire_push_lane_bot()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->desire_push_lane_bot(), output);
  }

  // optional float desire_defend_lane_top = 5;
  if (has_desire_defend_lane_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->desire_defend_lane_top(), output);
  }

  // optional float desire_defend_lane_mid = 6;
  if (has_desire_defend_lane_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->desire_defend_lane_mid(), output);
  }

  // optional float desire_defend_lane_bot = 7;
  if (has_desire_defend_lane_bot()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->desire_defend_lane_bot(), output);
  }

  // optional float desire_farm_lane_top = 8;
  if (has_desire_farm_lane_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->desire_farm_lane_top(), output);
  }

  // optional float desire_farm_lane_mid = 9;
  if (has_desire_farm_lane_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->desire_farm_lane_mid(), output);
  }

  // optional float desire_farm_lane_bot = 10;
  if (has_desire_farm_lane_bot()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->desire_farm_lane_bot(), output);
  }

  // optional float desire_farm_roshan = 11;
  if (has_desire_farm_roshan()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->desire_farm_roshan(), output);
  }

  // optional float execution_time = 12;
  if (has_execution_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->execution_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTABotDebugInfo)
}

::google::protobuf::uint8* CMsgDOTABotDebugInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTABotDebugInfo)
  // repeated .CMsgDOTABotDebugInfo.Bot bots = 1;
  for (int i = 0; i < this->bots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bots(i), target);
  }

  // optional float desire_push_lane_top = 2;
  if (has_desire_push_lane_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->desire_push_lane_top(), target);
  }

  // optional float desire_push_lane_mid = 3;
  if (has_desire_push_lane_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->desire_push_lane_mid(), target);
  }

  // optional float desire_push_lane_bot = 4;
  if (has_desire_push_lane_bot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->desire_push_lane_bot(), target);
  }

  // optional float desire_defend_lane_top = 5;
  if (has_desire_defend_lane_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->desire_defend_lane_top(), target);
  }

  // optional float desire_defend_lane_mid = 6;
  if (has_desire_defend_lane_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->desire_defend_lane_mid(), target);
  }

  // optional float desire_defend_lane_bot = 7;
  if (has_desire_defend_lane_bot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->desire_defend_lane_bot(), target);
  }

  // optional float desire_farm_lane_top = 8;
  if (has_desire_farm_lane_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->desire_farm_lane_top(), target);
  }

  // optional float desire_farm_lane_mid = 9;
  if (has_desire_farm_lane_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->desire_farm_lane_mid(), target);
  }

  // optional float desire_farm_lane_bot = 10;
  if (has_desire_farm_lane_bot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->desire_farm_lane_bot(), target);
  }

  // optional float desire_farm_roshan = 11;
  if (has_desire_farm_roshan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->desire_farm_roshan(), target);
  }

  // optional float execution_time = 12;
  if (has_execution_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->execution_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTABotDebugInfo)
  return target;
}

int CMsgDOTABotDebugInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional float desire_push_lane_top = 2;
    if (has_desire_push_lane_top()) {
      total_size += 1 + 4;
    }

    // optional float desire_push_lane_mid = 3;
    if (has_desire_push_lane_mid()) {
      total_size += 1 + 4;
    }

    // optional float desire_push_lane_bot = 4;
    if (has_desire_push_lane_bot()) {
      total_size += 1 + 4;
    }

    // optional float desire_defend_lane_top = 5;
    if (has_desire_defend_lane_top()) {
      total_size += 1 + 4;
    }

    // optional float desire_defend_lane_mid = 6;
    if (has_desire_defend_lane_mid()) {
      total_size += 1 + 4;
    }

    // optional float desire_defend_lane_bot = 7;
    if (has_desire_defend_lane_bot()) {
      total_size += 1 + 4;
    }

    // optional float desire_farm_lane_top = 8;
    if (has_desire_farm_lane_top()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float desire_farm_lane_mid = 9;
    if (has_desire_farm_lane_mid()) {
      total_size += 1 + 4;
    }

    // optional float desire_farm_lane_bot = 10;
    if (has_desire_farm_lane_bot()) {
      total_size += 1 + 4;
    }

    // optional float desire_farm_roshan = 11;
    if (has_desire_farm_roshan()) {
      total_size += 1 + 4;
    }

    // optional float execution_time = 12;
    if (has_execution_time()) {
      total_size += 1 + 4;
    }

  }
  // repeated .CMsgDOTABotDebugInfo.Bot bots = 1;
  total_size += 1 * this->bots_size();
  for (int i = 0; i < this->bots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bots(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTABotDebugInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTABotDebugInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTABotDebugInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTABotDebugInfo::MergeFrom(const CMsgDOTABotDebugInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  bots_.MergeFrom(from.bots_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_desire_push_lane_top()) {
      set_desire_push_lane_top(from.desire_push_lane_top());
    }
    if (from.has_desire_push_lane_mid()) {
      set_desire_push_lane_mid(from.desire_push_lane_mid());
    }
    if (from.has_desire_push_lane_bot()) {
      set_desire_push_lane_bot(from.desire_push_lane_bot());
    }
    if (from.has_desire_defend_lane_top()) {
      set_desire_defend_lane_top(from.desire_defend_lane_top());
    }
    if (from.has_desire_defend_lane_mid()) {
      set_desire_defend_lane_mid(from.desire_defend_lane_mid());
    }
    if (from.has_desire_defend_lane_bot()) {
      set_desire_defend_lane_bot(from.desire_defend_lane_bot());
    }
    if (from.has_desire_farm_lane_top()) {
      set_desire_farm_lane_top(from.desire_farm_lane_top());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_desire_farm_lane_mid()) {
      set_desire_farm_lane_mid(from.desire_farm_lane_mid());
    }
    if (from.has_desire_farm_lane_bot()) {
      set_desire_farm_lane_bot(from.desire_farm_lane_bot());
    }
    if (from.has_desire_farm_roshan()) {
      set_desire_farm_roshan(from.desire_farm_roshan());
    }
    if (from.has_execution_time()) {
      set_execution_time(from.execution_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTABotDebugInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABotDebugInfo::CopyFrom(const CMsgDOTABotDebugInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABotDebugInfo::IsInitialized() const {

  return true;
}

void CMsgDOTABotDebugInfo::Swap(CMsgDOTABotDebugInfo* other) {
  if (other != this) {
    bots_.Swap(&other->bots_);
    std::swap(desire_push_lane_top_, other->desire_push_lane_top_);
    std::swap(desire_push_lane_mid_, other->desire_push_lane_mid_);
    std::swap(desire_push_lane_bot_, other->desire_push_lane_bot_);
    std::swap(desire_defend_lane_top_, other->desire_defend_lane_top_);
    std::swap(desire_defend_lane_mid_, other->desire_defend_lane_mid_);
    std::swap(desire_defend_lane_bot_, other->desire_defend_lane_bot_);
    std::swap(desire_farm_lane_top_, other->desire_farm_lane_top_);
    std::swap(desire_farm_lane_mid_, other->desire_farm_lane_mid_);
    std::swap(desire_farm_lane_bot_, other->desire_farm_lane_bot_);
    std::swap(desire_farm_roshan_, other->desire_farm_roshan_);
    std::swap(execution_time_, other->execution_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTABotDebugInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTABotDebugInfo_descriptor_;
  metadata.reflection = CMsgDOTABotDebugInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
