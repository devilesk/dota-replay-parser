// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common.proto

#ifndef PROTOBUF_dota_5fgcmessages_5fcommon_2eproto__INCLUDED
#define PROTOBUF_dota_5fgcmessages_5fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages.pb.h"
#include "gcsdk_gcmessages.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

class CSODOTAGameAccountClient;
class CSODOTAPartyMember;
class CSODOTAParty;
class CSODOTAPartyInvite;
class CSODOTAPartyInvite_PartyMember;
class CSODOTALobbyInvite;
class CSODOTALobbyInvite_LobbyMember;
class CDOTAClientHardwareSpecs;
class CDOTASaveGame;
class CDOTASaveGame_Player;
class CDOTASaveGame_SaveInstance;
class CDOTASaveGame_SaveInstance_PlayerPositions;
class CMsgLeaverState;
class CDOTALobbyMember;
class CDOTALobbyMember_CDOTALobbyMemberXPBonus;
class CLobbyTeamDetails;
class CLobbyTimedRewardDetails;
class CLobbyBroadcastChannelInfo;
class CSODOTALobby;
class CSODOTALobby_CExtraMsg;
class CMsgLobbyEventPoints;
class CMsgLobbyEventPoints_AccountPoints;
class CMsgDOTAGenericResult;
class CMsgDOTABroadcastNotification;
class CMsgDOTAPCBangTimedReward;
class CAttribute_String;
class CAttribute_ItemDynamicRecipeComponent;
class CProtoItemHeroStatue;
class CProtoItemTeamShowcase;
class CProtoItemSocket;
class CProtoItemSocket_Empty;
class CProtoItemSocket_Effect;
class CProtoItemSocket_Color;
class CProtoItemSocket_Strange;
class CProtoItemSocket_Spectator;
class CProtoItemSocket_AssetModifier;
class CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY;
class CProtoItemSocket_Autograph;
class CProtoItemSocket_StaticVisuals;
class CMatchPlayerAbilityUpgrade;
class CMatchAdditionalUnitInventory;
class CMatchHeroSelectEvent;
class CMsgDOTAProcessFantasyScheduledEvent;
class CMsgDOTAHasItemQuery;
class CMsgDOTAHasItemResponse;
class CMsgDOTAHasItemDefsQuery;
class CMsgDOTAHasItemDefsResponse;
class CMsgDOTAConsumeFantasyTicket;
class CMsgDOTAConsumeFantasyTicketFailure;
class CMsgGCToGCFantasySetMatchLeague;
class CSODOTAMapLocationState;
class CMsgNexonPartnerUpdate;
class CMsgMakeOffering;
class CMsgRequestOfferings;
class CMsgRequestOfferingsResponse;
class CMsgRequestOfferingsResponse_NewYearsOffering;
class CMsgLeagueAdminList;
class CMsgPerfectWorldUserLookupRequest;
class CMsgPerfectWorldUserLookupResponse;
class CCompendiumTimestampedData;
class CCompendiumGameTimeline;
class CCompendiumGameList;
class CAdditionalEquipSlot;
class CMsgDOTARedeemItem;
class CMsgDOTARedeemItemResponse;
class CMsgDOTACombatLogEntry;
class CMsgDOTAProfileCard;
class CMsgDOTAProfileCard_Slot;
class CMsgDOTAProfileCard_Slot_Trophy;
class CMsgDOTAProfileCard_Slot_Stat;
class CMsgDOTAProfileCard_Slot_Item;
class CMsgDOTAProfileCard_Slot_Hero;
class CMsgDOTAProfileCard_Slot_Emoticon;
class CMsgGCToClientNewBloomTimingUpdated;
class CSODOTAPlayerChallenge;
class CMsgClientToGCRerollPlayerChallenge;
class CMsgGCRerollPlayerChallengeResponse;
class CMsgGCTopCustomGamesList;
class CMsgDOTARealtimeGameStats;
class CMsgDOTARealtimeGameStats_TeamDetails;
class CMsgDOTARealtimeGameStats_ItemDetails;
class CMsgDOTARealtimeGameStats_AbilityDetails;
class CMsgDOTARealtimeGameStats_HeroToHeroStats;
class CMsgDOTARealtimeGameStats_AbilityList;
class CMsgDOTARealtimeGameStats_PlayerDetails;
class CMsgDOTARealtimeGameStats_BuildingDetails;
class CMsgDOTARealtimeGameStats_KillDetails;
class CMsgDOTARealtimeGameStats_BroadcasterDetails;
class CMsgDOTARealtimeGameStats_PickBanDetails;
class CMsgDOTARealtimeGameStats_MatchDetails;
class CMsgDOTARealtimeGameStats_GraphData;
class CMsgDOTARealtimeGameStats_GraphData_LocationStats;
class CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats;
class CMsgDOTARealtimeGameStatsTerse;
class CMsgDOTARealtimeGameStatsTerse_TeamDetails;
class CMsgDOTARealtimeGameStatsTerse_PlayerDetails;
class CMsgDOTARealtimeGameStatsTerse_BuildingDetails;
class CMsgDOTARealtimeGameStatsTerse_MatchDetails;
class CMsgDOTARealtimeGameStatsTerse_GraphData;

enum CSODOTAParty_State {
  CSODOTAParty_State_UI = 0,
  CSODOTAParty_State_FINDING_MATCH = 1,
  CSODOTAParty_State_IN_MATCH = 2
};
bool CSODOTAParty_State_IsValid(int value);
const CSODOTAParty_State CSODOTAParty_State_State_MIN = CSODOTAParty_State_UI;
const CSODOTAParty_State CSODOTAParty_State_State_MAX = CSODOTAParty_State_IN_MATCH;
const int CSODOTAParty_State_State_ARRAYSIZE = CSODOTAParty_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSODOTAParty_State_descriptor();
inline const ::std::string& CSODOTAParty_State_Name(CSODOTAParty_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSODOTAParty_State_descriptor(), value);
}
inline bool CSODOTAParty_State_Parse(
    const ::std::string& name, CSODOTAParty_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSODOTAParty_State>(
    CSODOTAParty_State_descriptor(), name, value);
}
enum CSODOTALobby_State {
  CSODOTALobby_State_UI = 0,
  CSODOTALobby_State_READYUP = 4,
  CSODOTALobby_State_SERVERSETUP = 1,
  CSODOTALobby_State_RUN = 2,
  CSODOTALobby_State_POSTGAME = 3,
  CSODOTALobby_State_NOTREADY = 5,
  CSODOTALobby_State_SERVERASSIGN = 6
};
bool CSODOTALobby_State_IsValid(int value);
const CSODOTALobby_State CSODOTALobby_State_State_MIN = CSODOTALobby_State_UI;
const CSODOTALobby_State CSODOTALobby_State_State_MAX = CSODOTALobby_State_SERVERASSIGN;
const int CSODOTALobby_State_State_ARRAYSIZE = CSODOTALobby_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSODOTALobby_State_descriptor();
inline const ::std::string& CSODOTALobby_State_Name(CSODOTALobby_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSODOTALobby_State_descriptor(), value);
}
inline bool CSODOTALobby_State_Parse(
    const ::std::string& name, CSODOTALobby_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSODOTALobby_State>(
    CSODOTALobby_State_descriptor(), name, value);
}
enum CSODOTALobby_LobbyType {
  CSODOTALobby_LobbyType_INVALID = -1,
  CSODOTALobby_LobbyType_CASUAL_MATCH = 0,
  CSODOTALobby_LobbyType_PRACTICE = 1,
  CSODOTALobby_LobbyType_TOURNAMENT = 2,
  CSODOTALobby_LobbyType_COOP_BOT_MATCH = 4,
  CSODOTALobby_LobbyType_LEGACY_TEAM_MATCH = 5,
  CSODOTALobby_LobbyType_LEGACY_SOLO_QUEUE_MATCH = 6,
  CSODOTALobby_LobbyType_COMPETITIVE_MATCH = 7,
  CSODOTALobby_LobbyType_CASUAL_1V1_MATCH = 8,
  CSODOTALobby_LobbyType_WEEKEND_TOURNEY = 9,
  CSODOTALobby_LobbyType_LOCAL_BOT_MATCH = 10
};
bool CSODOTALobby_LobbyType_IsValid(int value);
const CSODOTALobby_LobbyType CSODOTALobby_LobbyType_LobbyType_MIN = CSODOTALobby_LobbyType_INVALID;
const CSODOTALobby_LobbyType CSODOTALobby_LobbyType_LobbyType_MAX = CSODOTALobby_LobbyType_LOCAL_BOT_MATCH;
const int CSODOTALobby_LobbyType_LobbyType_ARRAYSIZE = CSODOTALobby_LobbyType_LobbyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSODOTALobby_LobbyType_descriptor();
inline const ::std::string& CSODOTALobby_LobbyType_Name(CSODOTALobby_LobbyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSODOTALobby_LobbyType_descriptor(), value);
}
inline bool CSODOTALobby_LobbyType_Parse(
    const ::std::string& name, CSODOTALobby_LobbyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSODOTALobby_LobbyType>(
    CSODOTALobby_LobbyType_descriptor(), name, value);
}
enum CMsgPerfectWorldUserLookupResponse_EResultCode {
  CMsgPerfectWorldUserLookupResponse_EResultCode_SUCCESS_ACCOUNT_FOUND = 0,
  CMsgPerfectWorldUserLookupResponse_EResultCode_ERROR_UNKNOWN = 1,
  CMsgPerfectWorldUserLookupResponse_EResultCode_ERROR_USER_NAME_WRONG_FORMAT = 2,
  CMsgPerfectWorldUserLookupResponse_EResultCode_ERROR_NO_PERFECT_WORLD_ACCOUNT_FOUND = 3,
  CMsgPerfectWorldUserLookupResponse_EResultCode_ERROR_NO_LINKED_STEAM_ACCOUNT_FOUND = 4
};
bool CMsgPerfectWorldUserLookupResponse_EResultCode_IsValid(int value);
const CMsgPerfectWorldUserLookupResponse_EResultCode CMsgPerfectWorldUserLookupResponse_EResultCode_EResultCode_MIN = CMsgPerfectWorldUserLookupResponse_EResultCode_SUCCESS_ACCOUNT_FOUND;
const CMsgPerfectWorldUserLookupResponse_EResultCode CMsgPerfectWorldUserLookupResponse_EResultCode_EResultCode_MAX = CMsgPerfectWorldUserLookupResponse_EResultCode_ERROR_NO_LINKED_STEAM_ACCOUNT_FOUND;
const int CMsgPerfectWorldUserLookupResponse_EResultCode_EResultCode_ARRAYSIZE = CMsgPerfectWorldUserLookupResponse_EResultCode_EResultCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgPerfectWorldUserLookupResponse_EResultCode_descriptor();
inline const ::std::string& CMsgPerfectWorldUserLookupResponse_EResultCode_Name(CMsgPerfectWorldUserLookupResponse_EResultCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgPerfectWorldUserLookupResponse_EResultCode_descriptor(), value);
}
inline bool CMsgPerfectWorldUserLookupResponse_EResultCode_Parse(
    const ::std::string& name, CMsgPerfectWorldUserLookupResponse_EResultCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgPerfectWorldUserLookupResponse_EResultCode>(
    CMsgPerfectWorldUserLookupResponse_EResultCode_descriptor(), name, value);
}
enum CMsgDOTAProfileCard_EStatID {
  CMsgDOTAProfileCard_EStatID_k_eStat_SoloRank = 1,
  CMsgDOTAProfileCard_EStatID_k_eStat_PartyRank = 2,
  CMsgDOTAProfileCard_EStatID_k_eStat_Wins = 3,
  CMsgDOTAProfileCard_EStatID_k_eStat_Commends = 4,
  CMsgDOTAProfileCard_EStatID_k_eStat_GamesPlayed = 5,
  CMsgDOTAProfileCard_EStatID_k_eStat_FirstMatchDate = 6
};
bool CMsgDOTAProfileCard_EStatID_IsValid(int value);
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard_EStatID_EStatID_MIN = CMsgDOTAProfileCard_EStatID_k_eStat_SoloRank;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard_EStatID_EStatID_MAX = CMsgDOTAProfileCard_EStatID_k_eStat_FirstMatchDate;
const int CMsgDOTAProfileCard_EStatID_EStatID_ARRAYSIZE = CMsgDOTAProfileCard_EStatID_EStatID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTAProfileCard_EStatID_descriptor();
inline const ::std::string& CMsgDOTAProfileCard_EStatID_Name(CMsgDOTAProfileCard_EStatID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTAProfileCard_EStatID_descriptor(), value);
}
inline bool CMsgDOTAProfileCard_EStatID_Parse(
    const ::std::string& name, CMsgDOTAProfileCard_EStatID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTAProfileCard_EStatID>(
    CMsgDOTAProfileCard_EStatID_descriptor(), name, value);
}
enum CSODOTAPlayerChallenge_EFlags {
  CSODOTAPlayerChallenge_EFlags_eFlag_InstantRerollUncompleted = 1
};
bool CSODOTAPlayerChallenge_EFlags_IsValid(int value);
const CSODOTAPlayerChallenge_EFlags CSODOTAPlayerChallenge_EFlags_EFlags_MIN = CSODOTAPlayerChallenge_EFlags_eFlag_InstantRerollUncompleted;
const CSODOTAPlayerChallenge_EFlags CSODOTAPlayerChallenge_EFlags_EFlags_MAX = CSODOTAPlayerChallenge_EFlags_eFlag_InstantRerollUncompleted;
const int CSODOTAPlayerChallenge_EFlags_EFlags_ARRAYSIZE = CSODOTAPlayerChallenge_EFlags_EFlags_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSODOTAPlayerChallenge_EFlags_descriptor();
inline const ::std::string& CSODOTAPlayerChallenge_EFlags_Name(CSODOTAPlayerChallenge_EFlags value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSODOTAPlayerChallenge_EFlags_descriptor(), value);
}
inline bool CSODOTAPlayerChallenge_EFlags_Parse(
    const ::std::string& name, CSODOTAPlayerChallenge_EFlags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSODOTAPlayerChallenge_EFlags>(
    CSODOTAPlayerChallenge_EFlags_descriptor(), name, value);
}
enum CMsgGCRerollPlayerChallengeResponse_EResult {
  CMsgGCRerollPlayerChallengeResponse_EResult_eResult_Success = 0,
  CMsgGCRerollPlayerChallengeResponse_EResult_eResult_Dropped = 1,
  CMsgGCRerollPlayerChallengeResponse_EResult_eResult_NotFound = 2,
  CMsgGCRerollPlayerChallengeResponse_EResult_eResult_CantReroll = 3,
  CMsgGCRerollPlayerChallengeResponse_EResult_eResult_ServerError = 4
};
bool CMsgGCRerollPlayerChallengeResponse_EResult_IsValid(int value);
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse_EResult_EResult_MIN = CMsgGCRerollPlayerChallengeResponse_EResult_eResult_Success;
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse_EResult_EResult_MAX = CMsgGCRerollPlayerChallengeResponse_EResult_eResult_ServerError;
const int CMsgGCRerollPlayerChallengeResponse_EResult_EResult_ARRAYSIZE = CMsgGCRerollPlayerChallengeResponse_EResult_EResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgGCRerollPlayerChallengeResponse_EResult_descriptor();
inline const ::std::string& CMsgGCRerollPlayerChallengeResponse_EResult_Name(CMsgGCRerollPlayerChallengeResponse_EResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgGCRerollPlayerChallengeResponse_EResult_descriptor(), value);
}
inline bool CMsgGCRerollPlayerChallengeResponse_EResult_Parse(
    const ::std::string& name, CMsgGCRerollPlayerChallengeResponse_EResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgGCRerollPlayerChallengeResponse_EResult>(
    CMsgGCRerollPlayerChallengeResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTARealtimeGameStats_GraphData_eStat {
  CMsgDOTARealtimeGameStats_GraphData_eStat_CreepGoldEarned = 0,
  CMsgDOTARealtimeGameStats_GraphData_eStat_KillGoldEarned = 1,
  CMsgDOTARealtimeGameStats_GraphData_eStat_DeathAndBuybackGoldLost = 2,
  CMsgDOTARealtimeGameStats_GraphData_eStat_XPEarned = 3
};
bool CMsgDOTARealtimeGameStats_GraphData_eStat_IsValid(int value);
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_MIN = CMsgDOTARealtimeGameStats_GraphData_eStat_CreepGoldEarned;
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_MAX = CMsgDOTARealtimeGameStats_GraphData_eStat_XPEarned;
const int CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_ARRAYSIZE = CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor();
inline const ::std::string& CMsgDOTARealtimeGameStats_GraphData_eStat_Name(CMsgDOTARealtimeGameStats_GraphData_eStat value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor(), value);
}
inline bool CMsgDOTARealtimeGameStats_GraphData_eStat_Parse(
    const ::std::string& name, CMsgDOTARealtimeGameStats_GraphData_eStat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTARealtimeGameStats_GraphData_eStat>(
    CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor(), name, value);
}
enum CMsgDOTARealtimeGameStats_GraphData_eLocation {
  CMsgDOTARealtimeGameStats_GraphData_eLocation_BotLane = 0,
  CMsgDOTARealtimeGameStats_GraphData_eLocation_MidLane = 1,
  CMsgDOTARealtimeGameStats_GraphData_eLocation_TopLane = 2,
  CMsgDOTARealtimeGameStats_GraphData_eLocation_Jungle = 3,
  CMsgDOTARealtimeGameStats_GraphData_eLocation_Ancients = 4,
  CMsgDOTARealtimeGameStats_GraphData_eLocation_Other = 5
};
bool CMsgDOTARealtimeGameStats_GraphData_eLocation_IsValid(int value);
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_MIN = CMsgDOTARealtimeGameStats_GraphData_eLocation_BotLane;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_MAX = CMsgDOTARealtimeGameStats_GraphData_eLocation_Other;
const int CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_ARRAYSIZE = CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor();
inline const ::std::string& CMsgDOTARealtimeGameStats_GraphData_eLocation_Name(CMsgDOTARealtimeGameStats_GraphData_eLocation value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor(), value);
}
inline bool CMsgDOTARealtimeGameStats_GraphData_eLocation_Parse(
    const ::std::string& name, CMsgDOTARealtimeGameStats_GraphData_eLocation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTARealtimeGameStats_GraphData_eLocation>(
    CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor(), name, value);
}
enum EDOTAGCMsg {
  k_EMsgGCDOTABase = 7000,
  k_EMsgGCGeneralResponse = 7001,
  k_EMsgGCGameMatchSignOut = 7004,
  k_EMsgGCGameMatchSignOutResponse = 7005,
  k_EMsgGCJoinChatChannel = 7009,
  k_EMsgGCJoinChatChannelResponse = 7010,
  k_EMsgGCOtherJoinedChannel = 7013,
  k_EMsgGCOtherLeftChannel = 7014,
  k_EMsgGCMatchHistoryList = 7017,
  k_EMsgServerToGCRequestStatus = 7026,
  k_EMsgGCGetRecentMatches = 7027,
  k_EMsgGCRecentMatchesResponse = 7028,
  k_EMsgGCFindSourceTVGames = 7031,
  k_EMsgGCSourceTVGamesResponse = 7032,
  k_EMsgGCStartFindingMatch = 7033,
  k_EMsgGCConnectedPlayers = 7034,
  k_EMsgGCAbandonCurrentGame = 7035,
  k_EMsgGCStopFindingMatch = 7036,
  k_EMsgGCPracticeLobbyCreate = 7038,
  k_EMsgGCPracticeLobbyLeave = 7040,
  k_EMsgGCPracticeLobbyLaunch = 7041,
  k_EMsgGCPracticeLobbyList = 7042,
  k_EMsgGCPracticeLobbyListResponse = 7043,
  k_EMsgGCPracticeLobbyJoin = 7044,
  k_EMsgGCPracticeLobbySetDetails = 7046,
  k_EMsgGCPracticeLobbySetTeamSlot = 7047,
  k_EMsgGCInitialQuestionnaireResponse = 7049,
  k_EMsgGCTournamentRequest = 7051,
  k_EMsgGCTournamentResponse = 7052,
  k_EMsgGCPracticeLobbyResponse = 7055,
  k_EMsgGCBroadcastNotification = 7056,
  k_EMsgGCLiveScoreboardUpdate = 7057,
  k_EMsgGCRequestChatChannelList = 7060,
  k_EMsgGCRequestChatChannelListResponse = 7061,
  k_EMsgGCRequestMatches = 7064,
  k_EMsgGCRequestMatchesResponse = 7065,
  k_EMsgGCRequestPlayerResources = 7068,
  k_EMsgGCRequestPlayerResourcesResponse = 7069,
  k_EMsgGCReadyUp = 7070,
  k_EMsgGCKickedFromMatchmakingQueue = 7071,
  k_EMsgGCLeaverDetected = 7072,
  k_EMsgGCSpectateFriendGame = 7073,
  k_EMsgGCSpectateFriendGameResponse = 7074,
  k_EMsgGCPlayerReports = 7075,
  k_EMsgGCReportsRemainingRequest = 7076,
  k_EMsgGCReportsRemainingResponse = 7077,
  k_EMsgGCSubmitPlayerReport = 7078,
  k_EMsgGCSubmitPlayerReportResponse = 7079,
  k_EMsgGCGameChatLog = 7080,
  k_EMsgGCPracticeLobbyKick = 7081,
  k_EMsgGCReportCountsRequest = 7082,
  k_EMsgGCReportCountsResponse = 7083,
  k_EMsgGCRequestSaveGames = 7084,
  k_EMsgGCRequestSaveGamesServer = 7085,
  k_EMsgGCRequestSaveGamesResponse = 7086,
  k_EMsgGCLeaverDetectedResponse = 7087,
  k_EMsgGCPlayerFailedToConnect = 7088,
  k_EMsgGCGCToRelayConnect = 7089,
  k_EMsgGCGCToRelayConnectresponse = 7090,
  k_EMsgGCWatchGame = 7091,
  k_EMsgGCWatchGameResponse = 7092,
  k_EMsgGCBanStatusRequest = 7093,
  k_EMsgGCBanStatusResponse = 7094,
  k_EMsgGCMatchDetailsRequest = 7095,
  k_EMsgGCMatchDetailsResponse = 7096,
  k_EMsgGCCancelWatchGame = 7097,
  k_EMsgGCProfileRequest = 7098,
  k_EMsgGCProfileResponse = 7099,
  k_EMsgGCPopup = 7102,
  k_EMsgGCDOTAClearNotifySuccessfulReport = 7104,
  k_EMsgGCGenericResult = 7108,
  k_EMsgGCFriendPracticeLobbyListRequest = 7111,
  k_EMsgGCFriendPracticeLobbyListResponse = 7112,
  k_EMsgGCPracticeLobbyJoinResponse = 7113,
  k_EMsgClientEconNotification_Job = 7114,
  k_EMsgGCCreateTeam = 7115,
  k_EMsgGCCreateTeamResponse = 7116,
  k_EMsgGCDisbandTeam = 7117,
  k_EMsgGCDisbandTeamResponse = 7118,
  k_EMsgGCRequestTeamData = 7119,
  k_EMsgGCRequestTeamDataResponse = 7120,
  k_EMsgGCTeamData = 7121,
  k_EMsgGCTeamInvite_InviterToGC = 7122,
  k_EMsgGCTeamInvite_GCImmediateResponseToInviter = 7123,
  k_EMsgGCTeamInvite_GCRequestToInvitee = 7124,
  k_EMsgGCTeamInvite_InviteeResponseToGC = 7125,
  k_EMsgGCTeamInvite_GCResponseToInviter = 7126,
  k_EMsgGCTeamInvite_GCResponseToInvitee = 7127,
  k_EMsgGCKickTeamMember = 7128,
  k_EMsgGCKickTeamMemberResponse = 7129,
  k_EMsgGCLeaveTeam = 7130,
  k_EMsgGCLeaveTeamResponse = 7131,
  k_EMsgGCSuggestTeamMatchmaking = 7132,
  k_EMsgGCPlayerHeroesFavoritesAdd = 7133,
  k_EMsgGCPlayerHeroesFavoritesRemove = 7134,
  k_EMsgGCEditTeamLogo = 7139,
  k_EMsgGCEditTeamLogoResponse = 7140,
  k_EMsgGCSetShowcaseHero = 7141,
  k_EMsgGCApplyTeamToPracticeLobby = 7142,
  k_EMsgGCRequestInternatinalTicketEmail = 7143,
  k_EMsgGCTransferTeamAdmin = 7144,
  k_EMsgGCClearTournamentGame = 7145,
  k_EMsgRequestLeagueInfo = 7147,
  k_EMsgResponseLeagueInfo = 7148,
  k_EMsgGCPracticeLobbyJoinBroadcastChannel = 7149,
  k_EMsgGC_TournamentItemEvent = 7150,
  k_EMsgGC_TournamentItemEventResponse = 7151,
  k_EMsgCastMatchVote = 7152,
  k_EMsgCastMatchVoteResponse = 7153,
  k_EMsgRetrieveMatchVote = 7154,
  k_EMsgRetrieveMatchVoteResponse = 7155,
  k_EMsgTeamFanfare = 7156,
  k_EMsgResponseTeamFanfare = 7157,
  k_EMsgGC_GameServerUploadSaveGame = 7158,
  k_EMsgGC_GameServerSaveGameResult = 7159,
  k_EMsgGC_GameServerGetLoadGame = 7160,
  k_EMsgGC_GameServerGetLoadGameResult = 7161,
  k_EMsgGCTeamProfileRequest = 7164,
  k_EMsgGCTeamProfileResponse = 7165,
  k_EMsgGCEditTeamDetails = 7166,
  k_EMsgGCEditTeamDetailsResponse = 7167,
  k_EMsgGCProTeamListRequest = 7168,
  k_EMsgGCProTeamListResponse = 7169,
  k_EMsgGCReadyUpStatus = 7170,
  k_EMsgGCHallOfFame = 7171,
  k_EMsgGCHallOfFameRequest = 7172,
  k_EMsgGCHallOfFameResponse = 7173,
  k_EMsgGCGenerateDiretidePrizeList = 7174,
  k_EMsgGCRewardDiretidePrizes = 7176,
  k_EMsgGCDiretidePrizesRewardedResponse = 7177,
  k_EMsgGCHalloweenHighScoreRequest = 7178,
  k_EMsgGCHalloweenHighScoreResponse = 7179,
  k_EMsgGCGenerateDiretidePrizeListResponse = 7180,
  k_EMsgGCStorePromoPagesRequest = 7182,
  k_EMsgGCStorePromoPagesResponse = 7183,
  k_EMsgGCSpawnLootGreevil = 7184,
  k_EMsgGCDismissLootGreevil = 7185,
  k_EMsgGCToGCMatchCompleted = 7186,
  k_EMsgGCDismissLootGreevilResponse = 7187,
  k_EMsgGCBalancedShuffleLobby = 7188,
  k_EMsgGCToGCCheckLeaguePermission = 7189,
  k_EMsgGCToGCCheckLeaguePermissionResponse = 7190,
  k_EMsgGCLeagueScheduleRequest = 7191,
  k_EMsgGCLeagueScheduleResponse = 7192,
  k_EMsgGCLeagueScheduleEdit = 7193,
  k_EMsgGCLeagueScheduleEditResponse = 7194,
  k_EMsgGCLeaguesInMonthRequest = 7195,
  k_EMsgGCLeaguesInMonthResponse = 7196,
  k_EMsgGCMatchmakingStatsRequest = 7197,
  k_EMsgGCMatchmakingStatsResponse = 7198,
  k_EMsgGCBotGameCreate = 7199,
  k_EMsgGCSetMatchHistoryAccess = 7200,
  k_EMsgGCSetMatchHistoryAccessResponse = 7201,
  k_EMsgUpgradeLeagueItem = 7203,
  k_EMsgUpgradeLeagueItemResponse = 7204,
  k_EMsgGCTeamMemberProfileRequest = 7205,
  k_EMsgGCWatchDownloadedReplay = 7206,
  k_EMsgGCSetMapLocationState = 7207,
  k_EMsgGCSetMapLocationStateResponse = 7208,
  k_EMsgGCResetMapLocations = 7209,
  k_EMsgGCResetMapLocationsResponse = 7210,
  k_EMsgGCTeamOnProfile = 7211,
  k_EMsgGCSetFeaturedItems = 7212,
  k_EMsgGCFeaturedItems = 7215,
  k_EMsgRefreshPartnerAccountLink = 7216,
  k_EMsgClientsRejoinChatChannels = 7217,
  k_EMsgGCToGCGetUserChatInfo = 7218,
  k_EMsgGCToGCGetUserChatInfoResponse = 7219,
  k_EMsgGCToGCLeaveAllChatChannels = 7220,
  k_EMsgGCToGCUpdateAccountChatBan = 7221,
  k_EMsgGCGuildCreateRequest = 7222,
  k_EMsgGCGuildCreateResponse = 7223,
  k_EMsgGCGuildSetAccountRoleRequest = 7224,
  k_EMsgGCGuildSetAccountRoleResponse = 7225,
  k_EMsgGCRequestGuildData = 7226,
  k_EMsgGCGuildData = 7227,
  k_EMsgGCGuildInviteAccountRequest = 7228,
  k_EMsgGCGuildInviteAccountResponse = 7229,
  k_EMsgGCGuildCancelInviteRequest = 7230,
  k_EMsgGCGuildCancelInviteResponse = 7231,
  k_EMsgGCGuildUpdateDetailsRequest = 7232,
  k_EMsgGCGuildUpdateDetailsResponse = 7233,
  k_EMsgGCToGCCanInviteUser = 7234,
  k_EMsgGCToGCCanInviteUserResponse = 7235,
  k_EMsgGCToGCGetUserRank = 7236,
  k_EMsgGCToGCGetUserRankResponse = 7237,
  k_EMsgGCToGCUpdateTeamStats = 7240,
  k_EMsgGCToGCGetTeamRank = 7241,
  k_EMsgGCToGCGetTeamRankResponse = 7242,
  k_EMsgGCTeamIDByNameRequest = 7245,
  k_EMsgGCTeamIDByNameResponse = 7246,
  k_EMsgGCEditTeam = 7247,
  k_EMsgGCPassportDataRequest = 7248,
  k_EMsgGCPassportDataResponse = 7249,
  k_EMsgGCNotInGuildData = 7251,
  k_EMsgGCGuildInviteData = 7254,
  k_EMsgGCToGCGetLeagueAdmin = 7255,
  k_EMsgGCToGCGetLeagueAdminResponse = 7256,
  k_EMsgGCRequestLeaguePrizePool = 7258,
  k_EMsgGCRequestLeaguePrizePoolResponse = 7259,
  k_EMsgGCToGCUpdateOpenGuildPartyRequest = 7261,
  k_EMsgGCToGCUpdateOpenGuildPartyResponse = 7262,
  k_EMsgGCToGCDestroyOpenGuildPartyRequest = 7263,
  k_EMsgGCToGCDestroyOpenGuildPartyResponse = 7264,
  k_EMsgGCGuildUpdateMessage = 7265,
  k_EMsgGCPartySetOpenGuildRequest = 7266,
  k_EMsgGCPartySetOpenGuildResponse = 7267,
  k_EMsgGCGuildOpenPartyRefresh = 7268,
  k_EMsgGCJoinOpenGuildPartyRequest = 7269,
  k_EMsgGCJoinOpenGuildPartyResponse = 7270,
  k_EMsgGCLeaveChatChannel = 7272,
  k_EMsgGCChatMessage = 7273,
  k_EMsgGCGetHeroStandings = 7274,
  k_EMsgGCGetHeroStandingsResponse = 7275,
  k_EMsgGCGuildEditLogoRequest = 7279,
  k_EMsgGCGuildEditLogoResponse = 7280,
  k_EMsgGCGuildmatePracticeLobbyListRequest = 7281,
  k_EMsgGCGuildmatePracticeLobbyListResponse = 7282,
  k_EMsgGCItemEditorReservationsRequest = 7283,
  k_EMsgGCItemEditorReservationsResponse = 7284,
  k_EMsgGCItemEditorReserveItemDef = 7285,
  k_EMsgGCItemEditorReserveItemDefResponse = 7286,
  k_EMsgGCItemEditorReleaseReservation = 7287,
  k_EMsgGCItemEditorReleaseReservationResponse = 7288,
  k_EMsgGCRewardTutorialPrizes = 7289,
  k_EMsgGCLastHitChallengeHighScorePost = 7290,
  k_EMsgGCLastHitChallengeHighScoreRequest = 7291,
  k_EMsgGCLastHitChallengeHighScoreResponse = 7292,
  k_EMsgGCCreateFantasyLeagueRequest = 7293,
  k_EMsgGCCreateFantasyLeagueResponse = 7294,
  k_EMsgGCFantasyLeagueInfoRequest = 7297,
  k_EMsgGCFantasyLeagueInfoResponse = 7298,
  k_EMsgGCFantasyLeagueInfo = 7299,
  k_EMsgGCCreateFantasyTeamRequest = 7300,
  k_EMsgGCCreateFantasyTeamResponse = 7301,
  k_EMsgGCEditFantasyTeamRequest = 7302,
  k_EMsgGCEditFantasyTeamResponse = 7303,
  k_EMsgGCFantasyTeamInfoRequestByFantasyLeagueID = 7304,
  k_EMsgGCFantasyTeamInfoRequestByOwnerAccountID = 7305,
  k_EMsgGCFantasyTeamInfoResponse = 7306,
  k_EMsgGCFantasyTeamInfo = 7307,
  k_EMsgGCFantasyLivePlayerStats = 7308,
  k_EMsgGCFantasyFinalPlayerStats = 7309,
  k_EMsgGCFantasyMatch = 7310,
  k_EMsgGCToGCReloadVersions = 7311,
  k_EMsgGCFantasyTeamScoreRequest = 7312,
  k_EMsgGCFantasyTeamScoreResponse = 7313,
  k_EMsgGCFantasyTeamStandingsRequest = 7314,
  k_EMsgGCFantasyTeamStandingsResponse = 7315,
  k_EMsgGCFantasyPlayerScoreRequest = 7316,
  k_EMsgGCFantasyPlayerScoreResponse = 7317,
  k_EMsgGCFantasyPlayerStandingsRequest = 7318,
  k_EMsgGCFantasyPlayerStandingsResponse = 7319,
  k_EMsgGCFlipLobbyTeams = 7320,
  k_EMsgGCCustomGameCreate = 7321,
  k_EMsgGCFantasyPlayerInfoRequest = 7322,
  k_EMsgGCFantasyPlayerInfoResponse = 7323,
  k_EMsgGCToGCProcessPlayerReportForTarget = 7324,
  k_EMsgGCToGCProcessReportSuccess = 7325,
  k_EMsgGCNotifyAccountFlagsChange = 7326,
  k_EMsgGCSetProfilePrivacy = 7327,
  k_EMsgGCSetProfilePrivacyResponse = 7328,
  k_EMsgGCSteamProfileRequest = 7329,
  k_EMsgGCSteamProfileRequestResponse = 7330,
  k_EMsgGCFantasyLeagueCreateInfoRequest = 7331,
  k_EMsgGCFantasyLeagueCreateInfoResponse = 7332,
  k_EMsgGCFantasyLeagueInviteInfoRequest = 7333,
  k_EMsgGCFantasyLeagueInviteInfoResponse = 7334,
  k_EMsgGCClientIgnoredUser = 7335,
  k_EMsgGCFantasyLeagueCreateRequest = 7336,
  k_EMsgGCFantasyLeagueCreateResponse = 7337,
  k_EMsgGCFantasyTeamCreateRequest = 7338,
  k_EMsgGCFantasyTeamCreateResponse = 7339,
  k_EMsgGCFantasyLeagueFriendJoinListRequest = 7340,
  k_EMsgGCFantasyLeagueFriendJoinListResponse = 7341,
  k_EMsgGCClientSuspended = 7342,
  k_EMsgGCPartyMemberSetCoach = 7343,
  k_EMsgGCFantasyLeagueEditInvitesRequest = 7344,
  k_EMsgGCFantasyLeagueEditInvitesResponse = 7345,
  k_EMsgGCPracticeLobbySetCoach = 7346,
  k_EMsgGCFantasyLeagueEditInfoRequest = 7347,
  k_EMsgGCFantasyLeagueEditInfoResponse = 7348,
  k_EMsgGCFantasyLeagueDraftStatusRequest = 7349,
  k_EMsgGCFantasyLeagueDraftStatus = 7350,
  k_EMsgGCFantasyLeagueDraftPlayerRequest = 7351,
  k_EMsgGCFantasyLeagueDraftPlayerResponse = 7352,
  k_EMsgGCFantasyLeagueMatchupsRequest = 7353,
  k_EMsgGCFantasyLeagueMatchupsResponse = 7354,
  k_EMsgGCFantasyTeamRosterSwapRequest = 7355,
  k_EMsgGCFantasyTeamRosterSwapResponse = 7356,
  k_EMsgGCFantasyTeamRosterRequest = 7357,
  k_EMsgGCFantasyTeamRosterResponse = 7358,
  k_EMsgGCNexonPartnerUpdate = 7359,
  k_EMsgGCToGCProcessPCBangRewardPoints = 7360,
  k_EMsgGCFantasyTeamRosterAddDropRequest = 7361,
  k_EMsgGCFantasyTeamRosterAddDropResponse = 7362,
  k_EMsgPresentedClientTerminateDlg = 7363,
  k_EMsgGCFantasyPlayerHisoricalStatsRequest = 7364,
  k_EMsgGCFantasyPlayerHisoricalStatsResponse = 7365,
  k_EMsgGCPCBangTimedRewardMessage = 7366,
  k_EMsgGCLobbyUpdateBroadcastChannelInfo = 7367,
  k_EMsgGCFantasyTeamTradesRequest = 7368,
  k_EMsgGCFantasyTeamTradesResponse = 7369,
  k_EMsgGCFantasyTeamTradeCancelRequest = 7370,
  k_EMsgGCFantasyTeamTradeCancelResponse = 7371,
  k_EMsgGCToGCGrantTournamentItem = 7372,
  k_EMsgGCProcessFantasyScheduledEvent = 7373,
  k_EMsgGCToGCGrantPCBangRewardItem = 7374,
  k_EMsgGCToGCUpgradeTwitchViewerItems = 7375,
  k_EMsgGCToGCGetLiveMatchAffiliates = 7376,
  k_EMsgGCToGCGetLiveMatchAffiliatesResponse = 7377,
  k_EMsgGCToGCUpdatePlayerPennantCounts = 7378,
  k_EMsgGCToGCGetPlayerPennantCounts = 7379,
  k_EMsgGCToGCGetPlayerPennantCountsResponse = 7380,
  k_EMsgGCGameMatchSignOutPermissionRequest = 7381,
  k_EMsgGCGameMatchSignOutPermissionResponse = 7382,
  k_EMsgDOTAChatChannelMemberUpdate = 7383,
  k_EMsgDOTAAwardEventPoints = 7384,
  k_EMsgDOTARedeemEventPrize = 7385,
  k_EMsgDOTARedeemEventPrizeResponse = 7386,
  k_EMsgDOTAGetEventPoints = 7387,
  k_EMsgDOTAGetEventPointsResponse = 7388,
  k_EMsgGCToGCSignoutAwardEventPoints = 7390,
  k_EMsgDOTASendFriendRecruits = 7393,
  k_EMsgDOTAFriendRecruitsRequest = 7394,
  k_EMsgDOTAFriendRecruitsResponse = 7395,
  k_EMsgDOTAFriendRecruitInviteAcceptDecline = 7396,
  k_EMsgGCPartyLeaderWatchGamePrompt = 7397,
  k_EMsgDOTAFrostivusTimeElapsed = 7398,
  k_EMsgGCToGCGrantEarnedLicense = 7399,
  k_EMsgDOTALiveLeagueGameUpdate = 7402,
  k_EMsgDOTAChatGetUserList = 7403,
  k_EMsgDOTAChatGetUserListResponse = 7404,
  k_EMsgGCCompendiumSetSelection = 7405,
  k_EMsgGCCompendiumDataRequest = 7406,
  k_EMsgGCCompendiumDataResponse = 7407,
  k_EMsgDOTAGetPlayerMatchHistory = 7408,
  k_EMsgDOTAGetPlayerMatchHistoryResponse = 7409,
  k_EMsgGCToGCMatchmakingAddParty = 7410,
  k_EMsgGCToGCMatchmakingRemoveParty = 7411,
  k_EMsgGCToGCMatchmakingRemoveAllParties = 7412,
  k_EMsgGCToGCMatchmakingMatchFound = 7413,
  k_EMsgGCToGCUpdateMatchManagementStats = 7414,
  k_EMsgGCToGCUpdateMatchmakingStats = 7415,
  k_EMsgGCToServerPingRequest = 7416,
  k_EMsgGCToServerPingResponse = 7417,
  k_EMsgGCToServerConsoleCommand = 7418,
  k_EMsgGCToGCUpdateLiveLeagueGameInfo = 7420,
  k_EMsgGCMakeOffering = 7423,
  k_EMsgGCRequestOfferings = 7424,
  k_EMsgGCRequestOfferingsResponse = 7425,
  k_EMsgGCToGCProcessMatchLeaver = 7426,
  k_EMsgGCNotificationsRequest = 7427,
  k_EMsgGCNotificationsResponse = 7428,
  k_EMsgGCToGCModifyNotification = 7429,
  k_EMsgGCToGCSetNewNotifications = 7430,
  k_EMsgGCToGCSetIsLeagueAdmin = 7431,
  k_EMsgGCLeagueAdminState = 7432,
  k_EMsgGCToGCSendLeagueAdminState = 7433,
  k_EMsgGCLeagueAdminList = 7434,
  k_EMsgGCNotificationsMarkReadRequest = 7435,
  k_EMsgGCFantasyMessageAdd = 7436,
  k_EMsgGCFantasyMessagesRequest = 7437,
  k_EMsgGCFantasyMessagesResponse = 7438,
  k_EMsgGCFantasyScheduledMatchesRequest = 7439,
  k_EMsgGCFantasyScheduledMatchesResponse = 7440,
  k_EMsgGCToGCGrantLeagueAccess = 7441,
  k_EMsgGCEventGameCreate = 7443,
  k_EMsgGCPerfectWorldUserLookupRequest = 7444,
  k_EMsgGCPerfectWorldUserLookupResponse = 7445,
  k_EMsgGCToGCIncrementRecruitmentSDO = 7446,
  k_EMsgGCToGCIncrementRecruitmentLevel = 7447,
  k_EMsgGCFantasyRemoveOwner = 7448,
  k_EMsgGCFantasyRemoveOwnerResponse = 7449,
  k_EMsgGCRequestBatchPlayerResources = 7450,
  k_EMsgGCRequestBatchPlayerResourcesResponse = 7451,
  k_EMsgGCToGCSendUpdateLeagues = 7452,
  k_EMsgGCCompendiumSetSelectionResponse = 7453,
  k_EMsgGCPlayerInfoRequest = 7454,
  k_EMsgGCPlayerInfo = 7455,
  k_EMsgGCPlayerInfoSubmit = 7456,
  k_EMsgGCPlayerInfoSubmitResponse = 7457,
  k_EMsgGCToGCGetAccountLevel = 7458,
  k_EMsgGCToGCGetAccountLevelResponse = 7459,
  k_EMsgGCToGCGetAccountPartner = 7460,
  k_EMsgGCToGCGetAccountPartnerResponse = 7461,
  k_EMsgGCToGCGetAccountProfile = 7462,
  k_EMsgGCToGCGetAccountProfileResponse = 7463,
  k_EMsgDOTAGetWeekendTourneySchedule = 7464,
  k_EMsgDOTAWeekendTourneySchedule = 7465,
  k_EMsgGCJoinableCustomGameModesRequest = 7466,
  k_EMsgGCJoinableCustomGameModesResponse = 7467,
  k_EMsgGCJoinableCustomLobbiesRequest = 7468,
  k_EMsgGCJoinableCustomLobbiesResponse = 7469,
  k_EMsgGCQuickJoinCustomLobby = 7470,
  k_EMsgGCQuickJoinCustomLobbyResponse = 7471,
  k_EMsgGCToGCGrantEventPointAction = 7472,
  k_EMsgServerGetEventPoints = 7473,
  k_EMsgServerGetEventPointsResponse = 7474,
  k_EMsgServerGrantSurveyPermission = 7475,
  k_EMsgServerGrantSurveyPermissionResponse = 7476,
  k_EMsgClientProvideSurveyResult = 7477,
  k_EMsgGCToGCSetCompendiumSelection = 7478,
  k_EMsgGCToGCUpdateTI4HeroQuest = 7480,
  k_EMsgGCCompendiumDataChanged = 7481,
  k_EMsgDOTAFantasyLeagueFindRequest = 7482,
  k_EMsgDOTAFantasyLeagueFindResponse = 7483,
  k_EMsgGCHasItemQuery = 7484,
  k_EMsgGCHasItemResponse = 7485,
  k_EMsgGCConsumeFantasyTicket = 7486,
  k_EMsgGCConsumeFantasyTicketFailure = 7487,
  k_EMsgGCToGCGrantEventPointActionMsg = 7488,
  k_EMsgClientToGCTrackDialogResult = 7489,
  k_EMsgGCFantasyLeaveLeagueRequest = 7490,
  k_EMsgGCFantasyLeaveLeagueResponse = 7491,
  k_EMsgGCToGCGetCompendiumSelections = 7492,
  k_EMsgGCToGCGetCompendiumSelectionsResponse = 7493,
  k_EMsgServerToGCMatchConnectionStats = 7494,
  k_EMsgGCToClientTournamentItemDrop = 7495,
  k_EMsgSQLDelayedGrantLeagueDrop = 7496,
  k_EMsgServerGCUpdateSpectatorCount = 7497,
  k_EMsgDOTAStartDailyHeroChallengeRequest = 7498,
  k_EMsgGCFantasyPlayerScoreDetailsRequest = 7499,
  k_EMsgGCFantasyPlayerScoreDetailsResponse = 7500,
  k_EMsgGCToGCEmoticonUnlock = 7501,
  k_EMsgSignOutDraftInfo = 7502,
  k_EMsgClientToGCEmoticonDataRequest = 7503,
  k_EMsgGCToClientEmoticonData = 7504,
  k_EMsgGCPracticeLobbyToggleBroadcastChannelCameramanStatus = 7505,
  k_EMsgGCToGCCreateWeekendTourneyRequest = 7506,
  k_EMsgGCToGCCreateWeekendTourneyResponse = 7507,
  k_EMsgGCToGCCreateGenericTeamsRequest = 7510,
  k_EMsgGCToGCCreateGenericTeamsResponse = 7511,
  k_EMsgSQLLaunchOneWeekendTourney = 7512,
  k_EMsgClientToGCSetAdditionalEquips = 7513,
  k_EMsgClientToGCGetAdditionalEquips = 7514,
  k_EMsgClientToGCGetAdditionalEquipsResponse = 7515,
  k_EMsgServerToGCGetAdditionalEquips = 7516,
  k_EMsgServerToGCGetAdditionalEquipsResponse = 7517,
  k_EMsgDOTARedeemItem = 7518,
  k_EMsgDOTARedeemItemResponse = 7519,
  k_EMsgSQLGCToGCGrantAllHeroProgress = 7520,
  k_EMsgClientToGCGetAllHeroProgress = 7521,
  k_EMsgClientToGCGetAllHeroProgressResponse = 7522,
  k_EMsgGCToGCGetServerForClient = 7523,
  k_EMsgGCToGCGetServerForClientResponse = 7524,
  k_EMsgSQLProcessTournamentGameOutcome = 7525,
  k_EMsgSQLGrantTrophyToAccount = 7526,
  k_EMsgClientToGCGetTrophyList = 7527,
  k_EMsgClientToGCGetTrophyListResponse = 7528,
  k_EMsgGCToClientTrophyAwarded = 7529,
  k_EMsgGCGameBotMatchSignOut = 7530,
  k_EMsgGCGameBotMatchSignOutPermissionRequest = 7531,
  k_EMsgSignOutBotInfo = 7532,
  k_EMsgGCToGCUpdateProfileCards = 7533,
  k_EMsgClientToGCGetProfileCard = 7534,
  k_EMsgClientToGCGetProfileCardResponse = 7535,
  k_EMsgServerToGCGetProfileCard = 7536,
  k_EMsgServerToGCGetProfileCardResponse = 7537,
  k_EMsgClientToGCSetProfileCardSlots = 7538,
  k_EMsgGCToClientProfileCardUpdated = 7539,
  k_EMsgServerToGCVictoryPredictions = 7540,
  k_EMsgClientToGCMarkNotificationListRead = 7542,
  k_EMsgGCToClientNewNotificationAdded = 7543,
  k_EMsgServerToGCSuspiciousActivity = 7544,
  k_EMsgSignOutCommunicationSummary = 7545,
  k_EMsgServerToGCRequestStatus_Response = 7546,
  k_EMsgClientToGCCreateHeroStatue = 7547,
  k_EMsgGCToClientHeroStatueCreateResult = 7548,
  k_EMsgGCGCToLANServerRelayConnect = 7549,
  k_EMsgSignOutAssassinMiniGameInfo = 7550,
  k_EMsgServerToGCGetIngameEventData = 7551,
  k_EMsgGCToGCUpdateIngameEventDataBroadcast = 7552,
  k_EMsgGCToServerIngameEventData_OraclePA = 7553,
  k_EMsgServerToGCReportKillSummaries = 7554,
  k_EMsgGCToGCReportKillSummaries = 7555,
  k_EMsgGCToGCUpdateAssassinMinigame = 7556,
  k_EMsgGCToGCFantasySetMatchLeague = 7557,
  k_EMsgClientToGCRecordCompendiumStats = 7558,
  k_EMsgGCItemEditorRequestLeagueInfo = 7559,
  k_EMsgGCItemEditorLeagueInfoResponse = 7560,
  k_EMsgGCToGCUpdatePlayerPredictions = 7561,
  k_EMsgGCToServerPredictionResult = 7562,
  k_EMsgServerToGCSignoutAwardAdditionalDrops = 7563,
  k_EMsgGCToGCSignoutAwardAdditionalDrops = 7564,
  k_EMsgGCToClientEventStatusChanged = 7565,
  k_EMsgGCHasItemDefsQuery = 7566,
  k_EMsgGCHasItemDefsResponse = 7567,
  k_EMsgGCToGCReplayMonitorValidateReplay = 7569,
  k_EMsgClientToGCExchangeItemsForOffering = 7570,
  k_EMsgClientToGCExchangeItemsForOfferingResponse = 7571,
  k_EMsgLobbyEventPoints = 7572,
  k_EMsgGCToGCGetCustomGameTickets = 7573,
  k_EMsgGCToGCGetCustomGameTicketsResponse = 7574,
  k_EMsgGCToClientNewBloomTimingUpdated = 7575,
  k_EMsgGCToGCCustomGamePlayed = 7576,
  k_EMsgGCToGCGrantEventPointsToUser = 7577,
  k_EMsgGCToGCSetEventMMPanicFlushTime = 7578,
  k_EMsgGameserverCrashReport = 7579,
  k_EMsgGameserverCrashReportResponse = 7580,
  k_EMsgGCToClientSteamDatagramTicket = 7581,
  k_EMsgGCToGCGrantEventOwnership = 7582,
  k_EMsgGCToGCSendAccountsEventPoints = 7583,
  k_EMsgClientToGCRerollPlayerChallenge = 7584,
  k_EMsgServerToGCRerollPlayerChallenge = 7585,
  k_EMsgGCRerollPlayerChallengeResponse = 7586,
  k_EMsgSignOutUpdatePlayerChallenge = 7587,
  k_EMsgClientToGCSetPartyLeader = 7588,
  k_EMsgClientToGCCancelPartyInvites = 7589,
  k_EMsgGCToGCMasterReloadAccount = 7590,
  k_EMsgSQLGCToGCGrantBackpackSlots = 7591,
  k_EMsgSQLGrantLeagueMatchToTicketHolders = 7592,
  k_EMsgClientToGCSetAdditionalEquipsResponse = 7593,
  k_EMsgGCToGCEmoticonUnlockNoRollback = 7594,
  k_EMsgGCToGCGetCompendiumFanfare = 7595,
  k_EMsgServerToGCHoldEventPoints = 7596,
  k_EMsgSignOutReleaseEventPointHolds = 7597,
  k_EMsgGCToGCChatNewUserSession = 7598,
  k_EMsgClientToGCGetLeagueSeries = 7599,
  k_EMsgClientToGCGetLeagueSeriesResponse = 7600,
  k_EMsgSQLGCToGCSignoutUpdateLeagueSchedule = 7601,
  k_EMsgGCToServerUpdateBroadcastCheers = 7602,
  k_EMsgClientToGCApplyGemCombiner = 7603,
  k_EMsgClientToGCCreateStaticRecipe = 7604,
  k_EMsgClientToGCCreateStaticRecipeResponse = 7605,
  k_EMsgClientToGCGetAllHeroOrder = 7606,
  k_EMsgClientToGCGetAllHeroOrderResponse = 7607,
  k_EMsgSQLGCToGCGrantBadgePoints = 7608,
  k_EMsgGCDev_GrantWarKill = 8001,
  k_EMsgClientToGCCreateTeamShowcase = 8002,
  k_EMsgGCToClientTeamShowcaseCreateResult = 8003,
  k_EMsgServerToGCLockCharmTrading = 8004,
  k_EMsgDOTACNY2015EventPointUsage = 8005,
  k_EMsgClientToGCPlayerStatsRequest = 8006,
  k_EMsgGCToClientPlayerStatsResponse = 8007,
  k_EMsgGCClearPracticeLobbyTeam = 8008,
  k_EMsgClientToGCFindTopSourceTVGames = 8009,
  k_EMsgGCToClientFindTopSourceTVGamesResponse = 8010,
  k_EMsgGCLobbyList = 8011,
  k_EMsgGCLobbyListResponse = 8012,
  k_EMsgGCPlayerStatsMatchSignOut = 8013,
  k_EMsgClientToGCCustomGamePlayerCountRequest = 8014,
  k_EMsgGCToClientCustomGamePlayerCountResponse = 8015,
  k_EMsgClientToGCSocialFeedPostCommentRequest = 8016,
  k_EMsgGCToClientSocialFeedPostCommentResponse = 8017,
  k_EMsgClientToGCCustomGamesFriendsPlayedRequest = 8018,
  k_EMsgGCToClientCustomGamesFriendsPlayedResponse = 8019,
  k_EMsgClientToGCFriendsPlayedCustomGameRequest = 8020,
  k_EMsgGCToClientFriendsPlayedCustomGameResponse = 8021,
  k_EMsgClientToGCFeaturedHeroesRequest = 8022,
  k_EMsgGCToClientFeaturedHeroesResponse = 8023,
  k_EMsgGCTopCustomGamesList = 8024,
  k_EMsgClientToGCSocialMatchPostCommentRequest = 8025,
  k_EMsgGCToClientSocialMatchPostCommentResponse = 8026,
  k_EMsgClientToGCSocialMatchDetailsRequest = 8027,
  k_EMsgGCToClientSocialMatchDetailsResponse = 8028,
  k_EMsgClientToGCSetPartyOpen = 8029,
  k_EMsgClientToGCMergePartyInvite = 8030,
  k_EMsgGCToClientMergeGroupInviteReply = 8031,
  k_EMsgClientToGCMergePartyResponse = 8032,
  k_EMsgGCToClientMergePartyResponseReply = 8033,
  k_EMsgClientToGCGetProfileCardStats = 8034,
  k_EMsgClientToGCGetProfileCardStatsResponse = 8035,
  k_EMsgClientToGCTopLeagueMatchesRequest = 8036,
  k_EMsgClientToGCTopFriendMatchesRequest = 8037,
  k_EMsgGCToClientProfileCardStatsUpdated = 8040,
  k_EMsgServerToGCRealtimeStats = 8041,
  k_EMsgGCToServerRealtimeStatsStartStop = 8042,
  k_EMsgGCToGCGetServersForClients = 8045,
  k_EMsgGCToGCGetServersForClientsResponse = 8046,
  k_EMsgGCPracticeLobbyKickFromTeam = 8047,
  k_EMsgDOTAChatGetMemberCount = 8048,
  k_EMsgDOTAChatGetMemberCountResponse = 8049,
  k_EMsgClientToGCSocialFeedPostMessageRequest = 8050,
  k_EMsgGCToClientSocialFeedPostMessageResponse = 8051,
  k_EMsgCustomGameListenServerStartedLoading = 8052,
  k_EMsgCustomGameClientFinishedLoading = 8053,
  k_EMsgGCPracticeLobbyCloseBroadcastChannel = 8054,
  k_EMsgGCStartFindingMatchResponse = 8055,
  k_EMsgSQLGCToGCUpdateHeroMMR = 8056,
  k_EMsgSQLGCToGCGrantAccountFlag = 8057,
  k_EMsgGCToGCGetAccountFlags = 8058,
  k_EMsgGCToGCGetAccountFlagsResponse = 8059,
  k_EMsgSignOutWagerStats = 8060,
  k_EMsgGCToClientTopLeagueMatchesResponse = 8061,
  k_EMsgGCToClientTopFriendMatchesResponse = 8062,
  k_EMsgClientToGCMatchesMinimalRequest = 8063,
  k_EMsgClientToGCMatchesMinimalResponse = 8064,
  k_EMsgGCToGCGetProfileBadgePoints = 8065,
  k_EMsgGCToGCGetProfileBadgePointsResponse = 8066,
  k_EMsgGCToClientChatRegionsEnabled = 8067
};
bool EDOTAGCMsg_IsValid(int value);
const EDOTAGCMsg EDOTAGCMsg_MIN = k_EMsgGCDOTABase;
const EDOTAGCMsg EDOTAGCMsg_MAX = k_EMsgGCToClientChatRegionsEnabled;
const int EDOTAGCMsg_ARRAYSIZE = EDOTAGCMsg_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDOTAGCMsg_descriptor();
inline const ::std::string& EDOTAGCMsg_Name(EDOTAGCMsg value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDOTAGCMsg_descriptor(), value);
}
inline bool EDOTAGCMsg_Parse(
    const ::std::string& name, EDOTAGCMsg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDOTAGCMsg>(
    EDOTAGCMsg_descriptor(), name, value);
}
enum DOTA_GameMode {
  DOTA_GAMEMODE_NONE = 0,
  DOTA_GAMEMODE_AP = 1,
  DOTA_GAMEMODE_CM = 2,
  DOTA_GAMEMODE_RD = 3,
  DOTA_GAMEMODE_SD = 4,
  DOTA_GAMEMODE_AR = 5,
  DOTA_GAMEMODE_INTRO = 6,
  DOTA_GAMEMODE_HW = 7,
  DOTA_GAMEMODE_REVERSE_CM = 8,
  DOTA_GAMEMODE_XMAS = 9,
  DOTA_GAMEMODE_TUTORIAL = 10,
  DOTA_GAMEMODE_MO = 11,
  DOTA_GAMEMODE_LP = 12,
  DOTA_GAMEMODE_POOL1 = 13,
  DOTA_GAMEMODE_FH = 14,
  DOTA_GAMEMODE_CUSTOM = 15,
  DOTA_GAMEMODE_CD = 16,
  DOTA_GAMEMODE_BD = 17,
  DOTA_GAMEMODE_ABILITY_DRAFT = 18,
  DOTA_GAMEMODE_EVENT = 19,
  DOTA_GAMEMODE_ARDM = 20,
  DOTA_GAMEMODE_1V1MID = 21,
  DOTA_GAMEMODE_ALL_DRAFT = 22
};
bool DOTA_GameMode_IsValid(int value);
const DOTA_GameMode DOTA_GameMode_MIN = DOTA_GAMEMODE_NONE;
const DOTA_GameMode DOTA_GameMode_MAX = DOTA_GAMEMODE_ALL_DRAFT;
const int DOTA_GameMode_ARRAYSIZE = DOTA_GameMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_GameMode_descriptor();
inline const ::std::string& DOTA_GameMode_Name(DOTA_GameMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_GameMode_descriptor(), value);
}
inline bool DOTA_GameMode_Parse(
    const ::std::string& name, DOTA_GameMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_GameMode>(
    DOTA_GameMode_descriptor(), name, value);
}
enum DOTA_GameState {
  DOTA_GAMERULES_STATE_INIT = 0,
  DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD = 1,
  DOTA_GAMERULES_STATE_HERO_SELECTION = 2,
  DOTA_GAMERULES_STATE_STRATEGY_TIME = 3,
  DOTA_GAMERULES_STATE_PRE_GAME = 4,
  DOTA_GAMERULES_STATE_GAME_IN_PROGRESS = 5,
  DOTA_GAMERULES_STATE_POST_GAME = 6,
  DOTA_GAMERULES_STATE_DISCONNECT = 7,
  DOTA_GAMERULES_STATE_TEAM_SHOWCASE = 8,
  DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP = 9,
  DOTA_GAMERULES_STATE_LAST = 10
};
bool DOTA_GameState_IsValid(int value);
const DOTA_GameState DOTA_GameState_MIN = DOTA_GAMERULES_STATE_INIT;
const DOTA_GameState DOTA_GameState_MAX = DOTA_GAMERULES_STATE_LAST;
const int DOTA_GameState_ARRAYSIZE = DOTA_GameState_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_GameState_descriptor();
inline const ::std::string& DOTA_GameState_Name(DOTA_GameState value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_GameState_descriptor(), value);
}
inline bool DOTA_GameState_Parse(
    const ::std::string& name, DOTA_GameState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_GameState>(
    DOTA_GameState_descriptor(), name, value);
}
enum DOTA_GC_TEAM {
  DOTA_GC_TEAM_GOOD_GUYS = 0,
  DOTA_GC_TEAM_BAD_GUYS = 1,
  DOTA_GC_TEAM_BROADCASTER = 2,
  DOTA_GC_TEAM_SPECTATOR = 3,
  DOTA_GC_TEAM_PLAYER_POOL = 4,
  DOTA_GC_TEAM_NOTEAM = 5
};
bool DOTA_GC_TEAM_IsValid(int value);
const DOTA_GC_TEAM DOTA_GC_TEAM_MIN = DOTA_GC_TEAM_GOOD_GUYS;
const DOTA_GC_TEAM DOTA_GC_TEAM_MAX = DOTA_GC_TEAM_NOTEAM;
const int DOTA_GC_TEAM_ARRAYSIZE = DOTA_GC_TEAM_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_GC_TEAM_descriptor();
inline const ::std::string& DOTA_GC_TEAM_Name(DOTA_GC_TEAM value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_GC_TEAM_descriptor(), value);
}
inline bool DOTA_GC_TEAM_Parse(
    const ::std::string& name, DOTA_GC_TEAM* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_GC_TEAM>(
    DOTA_GC_TEAM_descriptor(), name, value);
}
enum DOTA_CM_PICK {
  DOTA_CM_RANDOM = 0,
  DOTA_CM_GOOD_GUYS = 1,
  DOTA_CM_BAD_GUYS = 2
};
bool DOTA_CM_PICK_IsValid(int value);
const DOTA_CM_PICK DOTA_CM_PICK_MIN = DOTA_CM_RANDOM;
const DOTA_CM_PICK DOTA_CM_PICK_MAX = DOTA_CM_BAD_GUYS;
const int DOTA_CM_PICK_ARRAYSIZE = DOTA_CM_PICK_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_CM_PICK_descriptor();
inline const ::std::string& DOTA_CM_PICK_Name(DOTA_CM_PICK value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_CM_PICK_descriptor(), value);
}
inline bool DOTA_CM_PICK_Parse(
    const ::std::string& name, DOTA_CM_PICK* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_CM_PICK>(
    DOTA_CM_PICK_descriptor(), name, value);
}
enum DOTAConnectionState_t {
  DOTA_CONNECTION_STATE_UNKNOWN = 0,
  DOTA_CONNECTION_STATE_NOT_YET_CONNECTED = 1,
  DOTA_CONNECTION_STATE_CONNECTED = 2,
  DOTA_CONNECTION_STATE_DISCONNECTED = 3,
  DOTA_CONNECTION_STATE_ABANDONED = 4,
  DOTA_CONNECTION_STATE_LOADING = 5,
  DOTA_CONNECTION_STATE_FAILED = 6
};
bool DOTAConnectionState_t_IsValid(int value);
const DOTAConnectionState_t DOTAConnectionState_t_MIN = DOTA_CONNECTION_STATE_UNKNOWN;
const DOTAConnectionState_t DOTAConnectionState_t_MAX = DOTA_CONNECTION_STATE_FAILED;
const int DOTAConnectionState_t_ARRAYSIZE = DOTAConnectionState_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTAConnectionState_t_descriptor();
inline const ::std::string& DOTAConnectionState_t_Name(DOTAConnectionState_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTAConnectionState_t_descriptor(), value);
}
inline bool DOTAConnectionState_t_Parse(
    const ::std::string& name, DOTAConnectionState_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTAConnectionState_t>(
    DOTAConnectionState_t_descriptor(), name, value);
}
enum DOTALeaverStatus_t {
  DOTA_LEAVER_NONE = 0,
  DOTA_LEAVER_DISCONNECTED = 1,
  DOTA_LEAVER_DISCONNECTED_TOO_LONG = 2,
  DOTA_LEAVER_ABANDONED = 3,
  DOTA_LEAVER_AFK = 4,
  DOTA_LEAVER_NEVER_CONNECTED = 5,
  DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG = 6,
  DOTA_LEAVER_FAILED_TO_READY_UP = 7,
  DOTA_LEAVER_DECLINED = 8
};
bool DOTALeaverStatus_t_IsValid(int value);
const DOTALeaverStatus_t DOTALeaverStatus_t_MIN = DOTA_LEAVER_NONE;
const DOTALeaverStatus_t DOTALeaverStatus_t_MAX = DOTA_LEAVER_DECLINED;
const int DOTALeaverStatus_t_ARRAYSIZE = DOTALeaverStatus_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTALeaverStatus_t_descriptor();
inline const ::std::string& DOTALeaverStatus_t_Name(DOTALeaverStatus_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTALeaverStatus_t_descriptor(), value);
}
inline bool DOTALeaverStatus_t_Parse(
    const ::std::string& name, DOTALeaverStatus_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTALeaverStatus_t>(
    DOTALeaverStatus_t_descriptor(), name, value);
}
enum DOTALowPriorityBanType {
  DOTA_LOW_PRIORITY_BAN_ABANDON = 0,
  DOTA_LOW_PRIORITY_BAN_REPORTS = 1,
  DOTA_LOW_PRIORITY_BAN_SECONDARY_ABANDON = 2
};
bool DOTALowPriorityBanType_IsValid(int value);
const DOTALowPriorityBanType DOTALowPriorityBanType_MIN = DOTA_LOW_PRIORITY_BAN_ABANDON;
const DOTALowPriorityBanType DOTALowPriorityBanType_MAX = DOTA_LOW_PRIORITY_BAN_SECONDARY_ABANDON;
const int DOTALowPriorityBanType_ARRAYSIZE = DOTALowPriorityBanType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTALowPriorityBanType_descriptor();
inline const ::std::string& DOTALowPriorityBanType_Name(DOTALowPriorityBanType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTALowPriorityBanType_descriptor(), value);
}
inline bool DOTALowPriorityBanType_Parse(
    const ::std::string& name, DOTALowPriorityBanType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTALowPriorityBanType>(
    DOTALowPriorityBanType_descriptor(), name, value);
}
enum DOTALobbyReadyState {
  DOTALobbyReadyState_UNDECLARED = 0,
  DOTALobbyReadyState_ACCEPTED = 1,
  DOTALobbyReadyState_DECLINED = 2
};
bool DOTALobbyReadyState_IsValid(int value);
const DOTALobbyReadyState DOTALobbyReadyState_MIN = DOTALobbyReadyState_UNDECLARED;
const DOTALobbyReadyState DOTALobbyReadyState_MAX = DOTALobbyReadyState_DECLINED;
const int DOTALobbyReadyState_ARRAYSIZE = DOTALobbyReadyState_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTALobbyReadyState_descriptor();
inline const ::std::string& DOTALobbyReadyState_Name(DOTALobbyReadyState value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTALobbyReadyState_descriptor(), value);
}
inline bool DOTALobbyReadyState_Parse(
    const ::std::string& name, DOTALobbyReadyState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTALobbyReadyState>(
    DOTALobbyReadyState_descriptor(), name, value);
}
enum DOTAGameVersion {
  GAME_VERSION_CURRENT = 0,
  GAME_VERSION_STABLE = 1
};
bool DOTAGameVersion_IsValid(int value);
const DOTAGameVersion DOTAGameVersion_MIN = GAME_VERSION_CURRENT;
const DOTAGameVersion DOTAGameVersion_MAX = GAME_VERSION_STABLE;
const int DOTAGameVersion_ARRAYSIZE = DOTAGameVersion_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTAGameVersion_descriptor();
inline const ::std::string& DOTAGameVersion_Name(DOTAGameVersion value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTAGameVersion_descriptor(), value);
}
inline bool DOTAGameVersion_Parse(
    const ::std::string& name, DOTAGameVersion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTAGameVersion>(
    DOTAGameVersion_descriptor(), name, value);
}
enum DOTAJoinLobbyResult {
  DOTA_JOIN_RESULT_SUCCESS = 0,
  DOTA_JOIN_RESULT_ALREADY_IN_GAME = 1,
  DOTA_JOIN_RESULT_INVALID_LOBBY = 2,
  DOTA_JOIN_RESULT_INCORRECT_PASSWORD = 3,
  DOTA_JOIN_RESULT_ACCESS_DENIED = 4,
  DOTA_JOIN_RESULT_GENERIC_ERROR = 5,
  DOTA_JOIN_RESULT_INCORRECT_VERSION = 6,
  DOTA_JOIN_RESULT_IN_TEAM_PARTY = 7,
  DOTA_JOIN_RESULT_NO_LOBBY_FOUND = 8,
  DOTA_JOIN_RESULT_LOBBY_FULL = 9,
  DOTA_JOIN_RESULT_CUSTOM_GAME_INCORRECT_VERSION = 10
};
bool DOTAJoinLobbyResult_IsValid(int value);
const DOTAJoinLobbyResult DOTAJoinLobbyResult_MIN = DOTA_JOIN_RESULT_SUCCESS;
const DOTAJoinLobbyResult DOTAJoinLobbyResult_MAX = DOTA_JOIN_RESULT_CUSTOM_GAME_INCORRECT_VERSION;
const int DOTAJoinLobbyResult_ARRAYSIZE = DOTAJoinLobbyResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTAJoinLobbyResult_descriptor();
inline const ::std::string& DOTAJoinLobbyResult_Name(DOTAJoinLobbyResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTAJoinLobbyResult_descriptor(), value);
}
inline bool DOTAJoinLobbyResult_Parse(
    const ::std::string& name, DOTAJoinLobbyResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTAJoinLobbyResult>(
    DOTAJoinLobbyResult_descriptor(), name, value);
}
enum DOTAMatchVote {
  DOTAMatchVote_INVALID = 0,
  DOTAMatchVote_POSITIVE = 1,
  DOTAMatchVote_NEGATIVE = 2
};
bool DOTAMatchVote_IsValid(int value);
const DOTAMatchVote DOTAMatchVote_MIN = DOTAMatchVote_INVALID;
const DOTAMatchVote DOTAMatchVote_MAX = DOTAMatchVote_NEGATIVE;
const int DOTAMatchVote_ARRAYSIZE = DOTAMatchVote_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTAMatchVote_descriptor();
inline const ::std::string& DOTAMatchVote_Name(DOTAMatchVote value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTAMatchVote_descriptor(), value);
}
inline bool DOTAMatchVote_Parse(
    const ::std::string& name, DOTAMatchVote* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTAMatchVote>(
    DOTAMatchVote_descriptor(), name, value);
}
enum DOTA_LobbyMemberXPBonus {
  DOTA_LobbyMemberXPBonus_DEFAULT = 0,
  DOTA_LobbyMemberXPBonus_BATTLE_BOOSTER = 1,
  DOTA_LobbyMemberXPBonus_SHARE_BONUS = 2,
  DOTA_LobbyMemberXPBonus_PARTY = 3,
  DOTA_LobbyMemberXPBonus_RECRUITMENT = 4,
  DOTA_LobbyMemberXPBonus_PCBANG = 5
};
bool DOTA_LobbyMemberXPBonus_IsValid(int value);
const DOTA_LobbyMemberXPBonus DOTA_LobbyMemberXPBonus_MIN = DOTA_LobbyMemberXPBonus_DEFAULT;
const DOTA_LobbyMemberXPBonus DOTA_LobbyMemberXPBonus_MAX = DOTA_LobbyMemberXPBonus_PCBANG;
const int DOTA_LobbyMemberXPBonus_ARRAYSIZE = DOTA_LobbyMemberXPBonus_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_LobbyMemberXPBonus_descriptor();
inline const ::std::string& DOTA_LobbyMemberXPBonus_Name(DOTA_LobbyMemberXPBonus value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_LobbyMemberXPBonus_descriptor(), value);
}
inline bool DOTA_LobbyMemberXPBonus_Parse(
    const ::std::string& name, DOTA_LobbyMemberXPBonus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_LobbyMemberXPBonus>(
    DOTA_LobbyMemberXPBonus_descriptor(), name, value);
}
enum DOTALobbyVisibility {
  DOTALobbyVisibility_Public = 0,
  DOTALobbyVisibility_Friends = 1,
  DOTALobbyVisibility_Unlisted = 2
};
bool DOTALobbyVisibility_IsValid(int value);
const DOTALobbyVisibility DOTALobbyVisibility_MIN = DOTALobbyVisibility_Public;
const DOTALobbyVisibility DOTALobbyVisibility_MAX = DOTALobbyVisibility_Unlisted;
const int DOTALobbyVisibility_ARRAYSIZE = DOTALobbyVisibility_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTALobbyVisibility_descriptor();
inline const ::std::string& DOTALobbyVisibility_Name(DOTALobbyVisibility value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTALobbyVisibility_descriptor(), value);
}
inline bool DOTALobbyVisibility_Parse(
    const ::std::string& name, DOTALobbyVisibility* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTALobbyVisibility>(
    DOTALobbyVisibility_descriptor(), name, value);
}
enum EDOTAPlayerMMRType {
  k_EDOTAPlayerMMRType_Invalid = 0,
  k_EDOTAPlayerMMRType_GeneralHidden = 1,
  k_EDOTAPlayerMMRType_SoloHidden = 2,
  k_EDOTAPlayerMMRType_GeneralCompetitive = 3,
  k_EDOTAPlayerMMRType_SoloCompetitive = 4,
  k_EDOTAPlayerMMRType_1v1Competitive = 5
};
bool EDOTAPlayerMMRType_IsValid(int value);
const EDOTAPlayerMMRType EDOTAPlayerMMRType_MIN = k_EDOTAPlayerMMRType_Invalid;
const EDOTAPlayerMMRType EDOTAPlayerMMRType_MAX = k_EDOTAPlayerMMRType_1v1Competitive;
const int EDOTAPlayerMMRType_ARRAYSIZE = EDOTAPlayerMMRType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDOTAPlayerMMRType_descriptor();
inline const ::std::string& EDOTAPlayerMMRType_Name(EDOTAPlayerMMRType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDOTAPlayerMMRType_descriptor(), value);
}
inline bool EDOTAPlayerMMRType_Parse(
    const ::std::string& name, EDOTAPlayerMMRType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDOTAPlayerMMRType>(
    EDOTAPlayerMMRType_descriptor(), name, value);
}
enum MatchType {
  MATCH_TYPE_CASUAL = 0,
  MATCH_TYPE_COOP_BOTS = 1,
  MATCH_TYPE_TEAM_RANKED = 2,
  MATCH_TYPE_LEGACY_SOLO_QUEUE = 3,
  MATCH_TYPE_COMPETITIVE = 4,
  MATCH_TYPE_WEEKEND_TOURNEY = 5,
  MATCH_TYPE_CASUAL_1V1 = 6,
  MATCH_TYPE_EVENT = 7
};
bool MatchType_IsValid(int value);
const MatchType MatchType_MIN = MATCH_TYPE_CASUAL;
const MatchType MatchType_MAX = MATCH_TYPE_EVENT;
const int MatchType_ARRAYSIZE = MatchType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MatchType_descriptor();
inline const ::std::string& MatchType_Name(MatchType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MatchType_descriptor(), value);
}
inline bool MatchType_Parse(
    const ::std::string& name, MatchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MatchType>(
    MatchType_descriptor(), name, value);
}
enum DOTABotDifficulty {
  BOT_DIFFICULTY_PASSIVE = 0,
  BOT_DIFFICULTY_EASY = 1,
  BOT_DIFFICULTY_MEDIUM = 2,
  BOT_DIFFICULTY_HARD = 3,
  BOT_DIFFICULTY_UNFAIR = 4,
  BOT_DIFFICULTY_INVALID = 5,
  BOT_DIFFICULTY_EXTRA1 = 6,
  BOT_DIFFICULTY_EXTRA2 = 7,
  BOT_DIFFICULTY_EXTRA3 = 8
};
bool DOTABotDifficulty_IsValid(int value);
const DOTABotDifficulty DOTABotDifficulty_MIN = BOT_DIFFICULTY_PASSIVE;
const DOTABotDifficulty DOTABotDifficulty_MAX = BOT_DIFFICULTY_EXTRA3;
const int DOTABotDifficulty_ARRAYSIZE = DOTABotDifficulty_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTABotDifficulty_descriptor();
inline const ::std::string& DOTABotDifficulty_Name(DOTABotDifficulty value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTABotDifficulty_descriptor(), value);
}
inline bool DOTABotDifficulty_Parse(
    const ::std::string& name, DOTABotDifficulty* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTABotDifficulty>(
    DOTABotDifficulty_descriptor(), name, value);
}
enum MatchLanguages {
  MATCH_LANGUAGE_INVALID = 0,
  MATCH_LANGUAGE_ENGLISH = 1,
  MATCH_LANGUAGE_RUSSIAN = 2,
  MATCH_LANGUAGE_CHINESE = 3,
  MATCH_LANGUAGE_KOREAN = 4,
  MATCH_LANGUAGE_SPANISH = 5,
  MATCH_LANGUAGE_PORTUGUESE = 6,
  MATCH_LANGUAGE_ENGLISH2 = 7
};
bool MatchLanguages_IsValid(int value);
const MatchLanguages MatchLanguages_MIN = MATCH_LANGUAGE_INVALID;
const MatchLanguages MatchLanguages_MAX = MATCH_LANGUAGE_ENGLISH2;
const int MatchLanguages_ARRAYSIZE = MatchLanguages_MAX + 1;

const ::google::protobuf::EnumDescriptor* MatchLanguages_descriptor();
inline const ::std::string& MatchLanguages_Name(MatchLanguages value) {
  return ::google::protobuf::internal::NameOfEnum(
    MatchLanguages_descriptor(), value);
}
inline bool MatchLanguages_Parse(
    const ::std::string& name, MatchLanguages* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MatchLanguages>(
    MatchLanguages_descriptor(), name, value);
}
enum ETournamentTemplate {
  k_ETournamentTemplate_None = 0,
  k_ETournamentTemplate_SingleElimination = 1
};
bool ETournamentTemplate_IsValid(int value);
const ETournamentTemplate ETournamentTemplate_MIN = k_ETournamentTemplate_None;
const ETournamentTemplate ETournamentTemplate_MAX = k_ETournamentTemplate_SingleElimination;
const int ETournamentTemplate_ARRAYSIZE = ETournamentTemplate_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETournamentTemplate_descriptor();
inline const ::std::string& ETournamentTemplate_Name(ETournamentTemplate value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETournamentTemplate_descriptor(), value);
}
inline bool ETournamentTemplate_Parse(
    const ::std::string& name, ETournamentTemplate* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETournamentTemplate>(
    ETournamentTemplate_descriptor(), name, value);
}
enum ETournamentType {
  k_ETournamentType_Unknown = 0,
  k_ETournamentType_WeeklyDivision = 1
};
bool ETournamentType_IsValid(int value);
const ETournamentType ETournamentType_MIN = k_ETournamentType_Unknown;
const ETournamentType ETournamentType_MAX = k_ETournamentType_WeeklyDivision;
const int ETournamentType_ARRAYSIZE = ETournamentType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETournamentType_descriptor();
inline const ::std::string& ETournamentType_Name(ETournamentType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETournamentType_descriptor(), value);
}
inline bool ETournamentType_Parse(
    const ::std::string& name, ETournamentType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETournamentType>(
    ETournamentType_descriptor(), name, value);
}
enum EEvent {
  EVENT_ID_NONE = 0,
  EVENT_ID_DIRETIDE = 1,
  EVENT_ID_SPRING_FESTIVAL = 2,
  EVENT_ID_FROSTIVUS_2013 = 3,
  EVENT_ID_COMPENDIUM_2014 = 4,
  EVENT_ID_NEXON_PC_BANG = 5,
  EVENT_ID_PWRD_DAC_2015 = 6,
  EVENT_ID_NEW_BLOOM_2015 = 7,
  EVENT_ID_INTERNATIONAL_2015 = 8,
  EVENT_ID_FALL_MAJOR_2015 = 9,
  EVENT_ID_ORACLE_PA = 10,
  EVENT_ID_NEW_BLOOM_2015_PREBEAST = 11,
  EVENT_ID_FROSTIVUS = 12
};
bool EEvent_IsValid(int value);
const EEvent EEvent_MIN = EVENT_ID_NONE;
const EEvent EEvent_MAX = EVENT_ID_FROSTIVUS;
const int EEvent_ARRAYSIZE = EEvent_MAX + 1;

const ::google::protobuf::EnumDescriptor* EEvent_descriptor();
inline const ::std::string& EEvent_Name(EEvent value) {
  return ::google::protobuf::internal::NameOfEnum(
    EEvent_descriptor(), value);
}
inline bool EEvent_Parse(
    const ::std::string& name, EEvent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EEvent>(
    EEvent_descriptor(), name, value);
}
enum LobbyDotaTVDelay {
  LobbyDotaTV_10 = 0,
  LobbyDotaTV_120 = 1,
  LobbyDotaTV_300 = 2
};
bool LobbyDotaTVDelay_IsValid(int value);
const LobbyDotaTVDelay LobbyDotaTVDelay_MIN = LobbyDotaTV_10;
const LobbyDotaTVDelay LobbyDotaTVDelay_MAX = LobbyDotaTV_300;
const int LobbyDotaTVDelay_ARRAYSIZE = LobbyDotaTVDelay_MAX + 1;

const ::google::protobuf::EnumDescriptor* LobbyDotaTVDelay_descriptor();
inline const ::std::string& LobbyDotaTVDelay_Name(LobbyDotaTVDelay value) {
  return ::google::protobuf::internal::NameOfEnum(
    LobbyDotaTVDelay_descriptor(), value);
}
inline bool LobbyDotaTVDelay_Parse(
    const ::std::string& name, LobbyDotaTVDelay* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LobbyDotaTVDelay>(
    LobbyDotaTVDelay_descriptor(), name, value);
}
enum EMatchOutcome {
  k_EMatchOutcome_Unknown = 0,
  k_EMatchOutcome_RadVictory = 2,
  k_EMatchOutcome_DireVictory = 3,
  k_EMatchOutcome_NotScored_PoorNetworkConditions = 64,
  k_EMatchOutcome_NotScored_Leaver = 65,
  k_EMatchOutcome_NotScored_ServerCrash = 66,
  k_EMatchOutcome_NotScored_NeverStarted = 67
};
bool EMatchOutcome_IsValid(int value);
const EMatchOutcome EMatchOutcome_MIN = k_EMatchOutcome_Unknown;
const EMatchOutcome EMatchOutcome_MAX = k_EMatchOutcome_NotScored_NeverStarted;
const int EMatchOutcome_ARRAYSIZE = EMatchOutcome_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMatchOutcome_descriptor();
inline const ::std::string& EMatchOutcome_Name(EMatchOutcome value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMatchOutcome_descriptor(), value);
}
inline bool EMatchOutcome_Parse(
    const ::std::string& name, EMatchOutcome* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMatchOutcome>(
    EMatchOutcome_descriptor(), name, value);
}
enum EDOTAGCSessionNeed {
  k_EDOTAGCSessionNeed_Unknown = 0,
  k_EDOTAGCSessionNeed_UserNoSessionNeeded = 100,
  k_EDOTAGCSessionNeed_UserInOnlineGame = 101,
  k_EDOTAGCSessionNeed_UserInLocalGame = 102,
  k_EDOTAGCSessionNeed_UserInUIWasConnected = 103,
  k_EDOTAGCSessionNeed_UserInUINeverConnected = 104,
  k_EDOTAGCSessionNeed_UserTutorials = 105,
  k_EDOTAGCSessionNeed_GameServerOnline = 200,
  k_EDOTAGCSessionNeed_GameServerLocal = 201,
  k_EDOTAGCSessionNeed_GameServerIdle = 202,
  k_EDOTAGCSessionNeed_GameServerRelay = 203,
  k_EDOTAGCSessionNeed_GameServerLocalUpload = 204
};
bool EDOTAGCSessionNeed_IsValid(int value);
const EDOTAGCSessionNeed EDOTAGCSessionNeed_MIN = k_EDOTAGCSessionNeed_Unknown;
const EDOTAGCSessionNeed EDOTAGCSessionNeed_MAX = k_EDOTAGCSessionNeed_GameServerLocalUpload;
const int EDOTAGCSessionNeed_ARRAYSIZE = EDOTAGCSessionNeed_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDOTAGCSessionNeed_descriptor();
inline const ::std::string& EDOTAGCSessionNeed_Name(EDOTAGCSessionNeed value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDOTAGCSessionNeed_descriptor(), value);
}
inline bool EDOTAGCSessionNeed_Parse(
    const ::std::string& name, EDOTAGCSessionNeed* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDOTAGCSessionNeed>(
    EDOTAGCSessionNeed_descriptor(), name, value);
}
enum Fantasy_Roles {
  FANTASY_ROLE_UNDEFINED = 0,
  FANTASY_ROLE_CORE = 1,
  FANTASY_ROLE_SUPPORT = 2
};
bool Fantasy_Roles_IsValid(int value);
const Fantasy_Roles Fantasy_Roles_MIN = FANTASY_ROLE_UNDEFINED;
const Fantasy_Roles Fantasy_Roles_MAX = FANTASY_ROLE_SUPPORT;
const int Fantasy_Roles_ARRAYSIZE = Fantasy_Roles_MAX + 1;

const ::google::protobuf::EnumDescriptor* Fantasy_Roles_descriptor();
inline const ::std::string& Fantasy_Roles_Name(Fantasy_Roles value) {
  return ::google::protobuf::internal::NameOfEnum(
    Fantasy_Roles_descriptor(), value);
}
inline bool Fantasy_Roles_Parse(
    const ::std::string& name, Fantasy_Roles* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Fantasy_Roles>(
    Fantasy_Roles_descriptor(), name, value);
}
enum Fantasy_Team_Slots {
  FANTASY_SLOT_NONE = 0,
  FANTASY_SLOT_CORE = 1,
  FANTASY_SLOT_SUPPORT = 2,
  FANTASY_SLOT_ANY = 3,
  FANTASY_SLOT_BENCH = 4
};
bool Fantasy_Team_Slots_IsValid(int value);
const Fantasy_Team_Slots Fantasy_Team_Slots_MIN = FANTASY_SLOT_NONE;
const Fantasy_Team_Slots Fantasy_Team_Slots_MAX = FANTASY_SLOT_BENCH;
const int Fantasy_Team_Slots_ARRAYSIZE = Fantasy_Team_Slots_MAX + 1;

const ::google::protobuf::EnumDescriptor* Fantasy_Team_Slots_descriptor();
inline const ::std::string& Fantasy_Team_Slots_Name(Fantasy_Team_Slots value) {
  return ::google::protobuf::internal::NameOfEnum(
    Fantasy_Team_Slots_descriptor(), value);
}
inline bool Fantasy_Team_Slots_Parse(
    const ::std::string& name, Fantasy_Team_Slots* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Fantasy_Team_Slots>(
    Fantasy_Team_Slots_descriptor(), name, value);
}
enum Fantasy_Selection_Mode {
  FANTASY_SELECTION_INVALID = 0,
  FANTASY_SELECTION_LOCKED = 1,
  FANTASY_SELECTION_SHUFFLE = 2,
  FANTASY_SELECTION_FREE_PICK = 3,
  FANTASY_SELECTION_ENDED = 4,
  FANTASY_SELECTION_PRE_SEASON = 5,
  FANTASY_SELECTION_PRE_DRAFT = 6,
  FANTASY_SELECTION_DRAFTING = 7,
  FANTASY_SELECTION_REGULAR_SEASON = 8
};
bool Fantasy_Selection_Mode_IsValid(int value);
const Fantasy_Selection_Mode Fantasy_Selection_Mode_MIN = FANTASY_SELECTION_INVALID;
const Fantasy_Selection_Mode Fantasy_Selection_Mode_MAX = FANTASY_SELECTION_REGULAR_SEASON;
const int Fantasy_Selection_Mode_ARRAYSIZE = Fantasy_Selection_Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Fantasy_Selection_Mode_descriptor();
inline const ::std::string& Fantasy_Selection_Mode_Name(Fantasy_Selection_Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Fantasy_Selection_Mode_descriptor(), value);
}
inline bool Fantasy_Selection_Mode_Parse(
    const ::std::string& name, Fantasy_Selection_Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Fantasy_Selection_Mode>(
    Fantasy_Selection_Mode_descriptor(), name, value);
}
enum DOTA_TournamentEvents {
  TE_FIRST_BLOOD = 0,
  TE_GAME_END = 1,
  TE_MULTI_KILL = 2,
  TE_HERO_DENY = 3,
  TE_AEGIS_DENY = 4,
  TE_AEGIS_STOLEN = 5,
  TE_GODLIKE = 6,
  TE_COURIER_KILL = 7,
  TE_ECHOSLAM = 8,
  TE_RAPIER = 9,
  TE_EARLY_ROSHAN = 10,
  TE_BLACK_HOLE = 11
};
bool DOTA_TournamentEvents_IsValid(int value);
const DOTA_TournamentEvents DOTA_TournamentEvents_MIN = TE_FIRST_BLOOD;
const DOTA_TournamentEvents DOTA_TournamentEvents_MAX = TE_BLACK_HOLE;
const int DOTA_TournamentEvents_ARRAYSIZE = DOTA_TournamentEvents_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_TournamentEvents_descriptor();
inline const ::std::string& DOTA_TournamentEvents_Name(DOTA_TournamentEvents value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_TournamentEvents_descriptor(), value);
}
inline bool DOTA_TournamentEvents_Parse(
    const ::std::string& name, DOTA_TournamentEvents* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_TournamentEvents>(
    DOTA_TournamentEvents_descriptor(), name, value);
}
enum DOTA_COMBATLOG_TYPES {
  DOTA_COMBATLOG_DAMAGE = 0,
  DOTA_COMBATLOG_HEAL = 1,
  DOTA_COMBATLOG_MODIFIER_ADD = 2,
  DOTA_COMBATLOG_MODIFIER_REMOVE = 3,
  DOTA_COMBATLOG_DEATH = 4,
  DOTA_COMBATLOG_ABILITY = 5,
  DOTA_COMBATLOG_ITEM = 6,
  DOTA_COMBATLOG_LOCATION = 7,
  DOTA_COMBATLOG_GOLD = 8,
  DOTA_COMBATLOG_GAME_STATE = 9,
  DOTA_COMBATLOG_XP = 10,
  DOTA_COMBATLOG_PURCHASE = 11,
  DOTA_COMBATLOG_BUYBACK = 12,
  DOTA_COMBATLOG_ABILITY_TRIGGER = 13,
  DOTA_COMBATLOG_PLAYERSTATS = 14,
  DOTA_COMBATLOG_MULTIKILL = 15,
  DOTA_COMBATLOG_KILLSTREAK = 16,
  DOTA_COMBATLOG_TEAM_BUILDING_KILL = 17,
  DOTA_COMBATLOG_FIRST_BLOOD = 18,
  DOTA_COMBATLOG_MODIFIER_REFRESH = 19,
  DOTA_COMBATLOG_NEUTRAL_CAMP_STACK = 20,
  DOTA_COMBATLOG_PICKUP_RUNE = 21
};
bool DOTA_COMBATLOG_TYPES_IsValid(int value);
const DOTA_COMBATLOG_TYPES DOTA_COMBATLOG_TYPES_MIN = DOTA_COMBATLOG_DAMAGE;
const DOTA_COMBATLOG_TYPES DOTA_COMBATLOG_TYPES_MAX = DOTA_COMBATLOG_PICKUP_RUNE;
const int DOTA_COMBATLOG_TYPES_ARRAYSIZE = DOTA_COMBATLOG_TYPES_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_COMBATLOG_TYPES_descriptor();
inline const ::std::string& DOTA_COMBATLOG_TYPES_Name(DOTA_COMBATLOG_TYPES value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_COMBATLOG_TYPES_descriptor(), value);
}
inline bool DOTA_COMBATLOG_TYPES_Parse(
    const ::std::string& name, DOTA_COMBATLOG_TYPES* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_COMBATLOG_TYPES>(
    DOTA_COMBATLOG_TYPES_descriptor(), name, value);
}
enum DOTAChatChannelType_t {
  DOTAChannelType_Regional = 0,
  DOTAChannelType_Custom = 1,
  DOTAChannelType_Party = 2,
  DOTAChannelType_Lobby = 3,
  DOTAChannelType_Team = 4,
  DOTAChannelType_Guild = 5,
  DOTAChannelType_Fantasy = 6,
  DOTAChannelType_Whisper = 7,
  DOTAChannelType_Console = 8,
  DOTAChannelType_Tab = 9,
  DOTAChannelType_Invalid = 10,
  DOTAChannelType_GameAll = 11,
  DOTAChannelType_GameAllies = 12,
  DOTAChannelType_GameSpectator = 13,
  DOTAChannelType_GameCoaching = 14,
  DOTAChannelType_Cafe = 15,
  DOTAChannelType_CustomGame = 16
};
bool DOTAChatChannelType_t_IsValid(int value);
const DOTAChatChannelType_t DOTAChatChannelType_t_MIN = DOTAChannelType_Regional;
const DOTAChatChannelType_t DOTAChatChannelType_t_MAX = DOTAChannelType_CustomGame;
const int DOTAChatChannelType_t_ARRAYSIZE = DOTAChatChannelType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTAChatChannelType_t_descriptor();
inline const ::std::string& DOTAChatChannelType_t_Name(DOTAChatChannelType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTAChatChannelType_t_descriptor(), value);
}
inline bool DOTAChatChannelType_t_Parse(
    const ::std::string& name, DOTAChatChannelType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTAChatChannelType_t>(
    DOTAChatChannelType_t_descriptor(), name, value);
}
// ===================================================================

class CSODOTAGameAccountClient : public ::google::protobuf::Message {
 public:
  CSODOTAGameAccountClient();
  virtual ~CSODOTAGameAccountClient();

  CSODOTAGameAccountClient(const CSODOTAGameAccountClient& from);

  inline CSODOTAGameAccountClient& operator=(const CSODOTAGameAccountClient& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAGameAccountClient& default_instance();

  void Swap(CSODOTAGameAccountClient* other);

  // implements Message ----------------------------------------------

  CSODOTAGameAccountClient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTAGameAccountClient& from);
  void MergeFrom(const CSODOTAGameAccountClient& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 wins = 3;
  inline bool has_wins() const;
  inline void clear_wins();
  static const int kWinsFieldNumber = 3;
  inline ::google::protobuf::uint32 wins() const;
  inline void set_wins(::google::protobuf::uint32 value);

  // optional uint32 losses = 4;
  inline bool has_losses() const;
  inline void clear_losses();
  static const int kLossesFieldNumber = 4;
  inline ::google::protobuf::uint32 losses() const;
  inline void set_losses(::google::protobuf::uint32 value);

  // optional uint32 xp = 12;
  inline bool has_xp() const;
  inline void clear_xp();
  static const int kXpFieldNumber = 12;
  inline ::google::protobuf::uint32 xp() const;
  inline void set_xp(::google::protobuf::uint32 value);

  // optional uint32 level = 13;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 13;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 initial_skill = 14;
  inline bool has_initial_skill() const;
  inline void clear_initial_skill();
  static const int kInitialSkillFieldNumber = 14;
  inline ::google::protobuf::uint32 initial_skill() const;
  inline void set_initial_skill(::google::protobuf::uint32 value);

  // optional uint32 leaver_count = 15;
  inline bool has_leaver_count() const;
  inline void clear_leaver_count();
  static const int kLeaverCountFieldNumber = 15;
  inline ::google::protobuf::uint32 leaver_count() const;
  inline void set_leaver_count(::google::protobuf::uint32 value);

  // optional uint32 secondary_leaver_count = 58;
  inline bool has_secondary_leaver_count() const;
  inline void clear_secondary_leaver_count();
  static const int kSecondaryLeaverCountFieldNumber = 58;
  inline ::google::protobuf::uint32 secondary_leaver_count() const;
  inline void set_secondary_leaver_count(::google::protobuf::uint32 value);

  // optional uint32 low_priority_until_date = 18;
  inline bool has_low_priority_until_date() const;
  inline void clear_low_priority_until_date();
  static const int kLowPriorityUntilDateFieldNumber = 18;
  inline ::google::protobuf::uint32 low_priority_until_date() const;
  inline void set_low_priority_until_date(::google::protobuf::uint32 value);

  // optional uint32 prevent_text_chat_until_date = 20;
  inline bool has_prevent_text_chat_until_date() const;
  inline void clear_prevent_text_chat_until_date();
  static const int kPreventTextChatUntilDateFieldNumber = 20;
  inline ::google::protobuf::uint32 prevent_text_chat_until_date() const;
  inline void set_prevent_text_chat_until_date(::google::protobuf::uint32 value);

  // optional uint32 prevent_voice_until_date = 21;
  inline bool has_prevent_voice_until_date() const;
  inline void clear_prevent_voice_until_date();
  static const int kPreventVoiceUntilDateFieldNumber = 21;
  inline ::google::protobuf::uint32 prevent_voice_until_date() const;
  inline void set_prevent_voice_until_date(::google::protobuf::uint32 value);

  // optional uint32 last_abandoned_game_date = 22;
  inline bool has_last_abandoned_game_date() const;
  inline void clear_last_abandoned_game_date();
  static const int kLastAbandonedGameDateFieldNumber = 22;
  inline ::google::protobuf::uint32 last_abandoned_game_date() const;
  inline void set_last_abandoned_game_date(::google::protobuf::uint32 value);

  // optional uint32 last_secondary_abandoned_game_date = 59;
  inline bool has_last_secondary_abandoned_game_date() const;
  inline void clear_last_secondary_abandoned_game_date();
  static const int kLastSecondaryAbandonedGameDateFieldNumber = 59;
  inline ::google::protobuf::uint32 last_secondary_abandoned_game_date() const;
  inline void set_last_secondary_abandoned_game_date(::google::protobuf::uint32 value);

  // optional uint32 leaver_penalty_count = 23;
  inline bool has_leaver_penalty_count() const;
  inline void clear_leaver_penalty_count();
  static const int kLeaverPenaltyCountFieldNumber = 23;
  inline ::google::protobuf::uint32 leaver_penalty_count() const;
  inline void set_leaver_penalty_count(::google::protobuf::uint32 value);

  // optional uint32 completed_game_streak = 24;
  inline bool has_completed_game_streak() const;
  inline void clear_completed_game_streak();
  static const int kCompletedGameStreakFieldNumber = 24;
  inline ::google::protobuf::uint32 completed_game_streak() const;
  inline void set_completed_game_streak(::google::protobuf::uint32 value);

  // optional uint32 teaching = 28;
  inline bool has_teaching() const;
  inline void clear_teaching();
  static const int kTeachingFieldNumber = 28;
  inline ::google::protobuf::uint32 teaching() const;
  inline void set_teaching(::google::protobuf::uint32 value);

  // optional uint32 leadership = 29;
  inline bool has_leadership() const;
  inline void clear_leadership();
  static const int kLeadershipFieldNumber = 29;
  inline ::google::protobuf::uint32 leadership() const;
  inline void set_leadership(::google::protobuf::uint32 value);

  // optional uint32 friendly = 30;
  inline bool has_friendly() const;
  inline void clear_friendly();
  static const int kFriendlyFieldNumber = 30;
  inline ::google::protobuf::uint32 friendly() const;
  inline void set_friendly(::google::protobuf::uint32 value);

  // optional uint32 forgiving = 31;
  inline bool has_forgiving() const;
  inline void clear_forgiving();
  static const int kForgivingFieldNumber = 31;
  inline ::google::protobuf::uint32 forgiving() const;
  inline void set_forgiving(::google::protobuf::uint32 value);

  // optional uint32 account_disabled_until_date = 38;
  inline bool has_account_disabled_until_date() const;
  inline void clear_account_disabled_until_date();
  static const int kAccountDisabledUntilDateFieldNumber = 38;
  inline ::google::protobuf::uint32 account_disabled_until_date() const;
  inline void set_account_disabled_until_date(::google::protobuf::uint32 value);

  // optional uint32 account_disabled_count = 39;
  inline bool has_account_disabled_count() const;
  inline void clear_account_disabled_count();
  static const int kAccountDisabledCountFieldNumber = 39;
  inline ::google::protobuf::uint32 account_disabled_count() const;
  inline void set_account_disabled_count(::google::protobuf::uint32 value);

  // optional uint32 showcase_hero_id = 40;
  inline bool has_showcase_hero_id() const;
  inline void clear_showcase_hero_id();
  static const int kShowcaseHeroIdFieldNumber = 40;
  inline ::google::protobuf::uint32 showcase_hero_id() const;
  inline void set_showcase_hero_id(::google::protobuf::uint32 value);

  // optional uint32 match_disabled_until_date = 41;
  inline bool has_match_disabled_until_date() const;
  inline void clear_match_disabled_until_date();
  static const int kMatchDisabledUntilDateFieldNumber = 41;
  inline ::google::protobuf::uint32 match_disabled_until_date() const;
  inline void set_match_disabled_until_date(::google::protobuf::uint32 value);

  // optional uint32 match_disabled_count = 42;
  inline bool has_match_disabled_count() const;
  inline void clear_match_disabled_count();
  static const int kMatchDisabledCountFieldNumber = 42;
  inline ::google::protobuf::uint32 match_disabled_count() const;
  inline void set_match_disabled_count(::google::protobuf::uint32 value);

  // optional .PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
  inline bool has_partner_account_type() const;
  inline void clear_partner_account_type();
  static const int kPartnerAccountTypeFieldNumber = 44;
  inline ::PartnerAccountType partner_account_type() const;
  inline void set_partner_account_type(::PartnerAccountType value);

  // optional uint32 partner_account_state = 45;
  inline bool has_partner_account_state() const;
  inline void clear_partner_account_state();
  static const int kPartnerAccountStateFieldNumber = 45;
  inline ::google::protobuf::uint32 partner_account_state() const;
  inline void set_partner_account_state(::google::protobuf::uint32 value);

  // optional uint32 shutdownlawterminatetimestamp = 47;
  inline bool has_shutdownlawterminatetimestamp() const;
  inline void clear_shutdownlawterminatetimestamp();
  static const int kShutdownlawterminatetimestampFieldNumber = 47;
  inline ::google::protobuf::uint32 shutdownlawterminatetimestamp() const;
  inline void set_shutdownlawterminatetimestamp(::google::protobuf::uint32 value);

  // optional uint32 low_priority_games_remaining = 48;
  inline bool has_low_priority_games_remaining() const;
  inline void clear_low_priority_games_remaining();
  static const int kLowPriorityGamesRemainingFieldNumber = 48;
  inline ::google::protobuf::uint32 low_priority_games_remaining() const;
  inline void set_low_priority_games_remaining(::google::protobuf::uint32 value);

  // optional uint32 competitive_rank = 49;
  inline bool has_competitive_rank() const;
  inline void clear_competitive_rank();
  static const int kCompetitiveRankFieldNumber = 49;
  inline ::google::protobuf::uint32 competitive_rank() const;
  inline void set_competitive_rank(::google::protobuf::uint32 value);

  // optional uint32 calibration_games_remaining = 51;
  inline bool has_calibration_games_remaining() const;
  inline void clear_calibration_games_remaining();
  static const int kCalibrationGamesRemainingFieldNumber = 51;
  inline ::google::protobuf::uint32 calibration_games_remaining() const;
  inline void set_calibration_games_remaining(::google::protobuf::uint32 value);

  // optional uint32 solo_competitive_rank = 52;
  inline bool has_solo_competitive_rank() const;
  inline void clear_solo_competitive_rank();
  static const int kSoloCompetitiveRankFieldNumber = 52;
  inline ::google::protobuf::uint32 solo_competitive_rank() const;
  inline void set_solo_competitive_rank(::google::protobuf::uint32 value);

  // optional uint32 solo_calibration_games_remaining = 54;
  inline bool has_solo_calibration_games_remaining() const;
  inline void clear_solo_calibration_games_remaining();
  static const int kSoloCalibrationGamesRemainingFieldNumber = 54;
  inline ::google::protobuf::uint32 solo_calibration_games_remaining() const;
  inline void set_solo_calibration_games_remaining(::google::protobuf::uint32 value);

  // optional uint32 competitive_1v1_rank = 63;
  inline bool has_competitive_1v1_rank() const;
  inline void clear_competitive_1v1_rank();
  static const int kCompetitive1V1RankFieldNumber = 63;
  inline ::google::protobuf::uint32 competitive_1v1_rank() const;
  inline void set_competitive_1v1_rank(::google::protobuf::uint32 value);

  // optional uint32 competitive_1v1_calibration_games_remaining = 64;
  inline bool has_competitive_1v1_calibration_games_remaining() const;
  inline void clear_competitive_1v1_calibration_games_remaining();
  static const int kCompetitive1V1CalibrationGamesRemainingFieldNumber = 64;
  inline ::google::protobuf::uint32 competitive_1v1_calibration_games_remaining() const;
  inline void set_competitive_1v1_calibration_games_remaining(::google::protobuf::uint32 value);

  // optional uint32 recruitment_level = 55;
  inline bool has_recruitment_level() const;
  inline void clear_recruitment_level();
  static const int kRecruitmentLevelFieldNumber = 55;
  inline ::google::protobuf::uint32 recruitment_level() const;
  inline void set_recruitment_level(::google::protobuf::uint32 value);

  // optional bool has_new_notifications = 56;
  inline bool has_has_new_notifications() const;
  inline void clear_has_new_notifications();
  static const int kHasNewNotificationsFieldNumber = 56;
  inline bool has_new_notifications() const;
  inline void set_has_new_notifications(bool value);

  // optional bool is_league_admin = 57;
  inline bool has_is_league_admin() const;
  inline void clear_is_league_admin();
  static const int kIsLeagueAdminFieldNumber = 57;
  inline bool is_league_admin() const;
  inline void set_is_league_admin(bool value);

  // optional uint32 casual_games_played = 60;
  inline bool has_casual_games_played() const;
  inline void clear_casual_games_played();
  static const int kCasualGamesPlayedFieldNumber = 60;
  inline ::google::protobuf::uint32 casual_games_played() const;
  inline void set_casual_games_played(::google::protobuf::uint32 value);

  // optional uint32 solo_competitive_games_played = 61;
  inline bool has_solo_competitive_games_played() const;
  inline void clear_solo_competitive_games_played();
  static const int kSoloCompetitiveGamesPlayedFieldNumber = 61;
  inline ::google::protobuf::uint32 solo_competitive_games_played() const;
  inline void set_solo_competitive_games_played(::google::protobuf::uint32 value);

  // optional uint32 party_competitive_games_played = 62;
  inline bool has_party_competitive_games_played() const;
  inline void clear_party_competitive_games_played();
  static const int kPartyCompetitiveGamesPlayedFieldNumber = 62;
  inline ::google::protobuf::uint32 party_competitive_games_played() const;
  inline void set_party_competitive_games_played(::google::protobuf::uint32 value);

  // optional uint32 casual_1v1_games_played = 65;
  inline bool has_casual_1v1_games_played() const;
  inline void clear_casual_1v1_games_played();
  static const int kCasual1V1GamesPlayedFieldNumber = 65;
  inline ::google::protobuf::uint32 casual_1v1_games_played() const;
  inline void set_casual_1v1_games_played(::google::protobuf::uint32 value);

  // optional uint32 competitive_team_games_played = 66;
  inline bool has_competitive_team_games_played() const;
  inline void clear_competitive_team_games_played();
  static const int kCompetitiveTeamGamesPlayedFieldNumber = 66;
  inline ::google::protobuf::uint32 competitive_team_games_played() const;
  inline void set_competitive_team_games_played(::google::protobuf::uint32 value);

  // optional uint32 curr_all_hero_challenge_id = 67;
  inline bool has_curr_all_hero_challenge_id() const;
  inline void clear_curr_all_hero_challenge_id();
  static const int kCurrAllHeroChallengeIdFieldNumber = 67;
  inline ::google::protobuf::uint32 curr_all_hero_challenge_id() const;
  inline void set_curr_all_hero_challenge_id(::google::protobuf::uint32 value);

  // optional uint32 play_time_points = 68;
  inline bool has_play_time_points() const;
  inline void clear_play_time_points();
  static const int kPlayTimePointsFieldNumber = 68;
  inline ::google::protobuf::uint32 play_time_points() const;
  inline void set_play_time_points(::google::protobuf::uint32 value);

  // optional uint32 account_flags = 69;
  inline bool has_account_flags() const;
  inline void clear_account_flags();
  static const int kAccountFlagsFieldNumber = 69;
  inline ::google::protobuf::uint32 account_flags() const;
  inline void set_account_flags(::google::protobuf::uint32 value);

  // optional uint32 play_time_level = 70;
  inline bool has_play_time_level() const;
  inline void clear_play_time_level();
  static const int kPlayTimeLevelFieldNumber = 70;
  inline ::google::protobuf::uint32 play_time_level() const;
  inline void set_play_time_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSODOTAGameAccountClient)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_wins();
  inline void clear_has_wins();
  inline void set_has_losses();
  inline void clear_has_losses();
  inline void set_has_xp();
  inline void clear_has_xp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_initial_skill();
  inline void clear_has_initial_skill();
  inline void set_has_leaver_count();
  inline void clear_has_leaver_count();
  inline void set_has_secondary_leaver_count();
  inline void clear_has_secondary_leaver_count();
  inline void set_has_low_priority_until_date();
  inline void clear_has_low_priority_until_date();
  inline void set_has_prevent_text_chat_until_date();
  inline void clear_has_prevent_text_chat_until_date();
  inline void set_has_prevent_voice_until_date();
  inline void clear_has_prevent_voice_until_date();
  inline void set_has_last_abandoned_game_date();
  inline void clear_has_last_abandoned_game_date();
  inline void set_has_last_secondary_abandoned_game_date();
  inline void clear_has_last_secondary_abandoned_game_date();
  inline void set_has_leaver_penalty_count();
  inline void clear_has_leaver_penalty_count();
  inline void set_has_completed_game_streak();
  inline void clear_has_completed_game_streak();
  inline void set_has_teaching();
  inline void clear_has_teaching();
  inline void set_has_leadership();
  inline void clear_has_leadership();
  inline void set_has_friendly();
  inline void clear_has_friendly();
  inline void set_has_forgiving();
  inline void clear_has_forgiving();
  inline void set_has_account_disabled_until_date();
  inline void clear_has_account_disabled_until_date();
  inline void set_has_account_disabled_count();
  inline void clear_has_account_disabled_count();
  inline void set_has_showcase_hero_id();
  inline void clear_has_showcase_hero_id();
  inline void set_has_match_disabled_until_date();
  inline void clear_has_match_disabled_until_date();
  inline void set_has_match_disabled_count();
  inline void clear_has_match_disabled_count();
  inline void set_has_partner_account_type();
  inline void clear_has_partner_account_type();
  inline void set_has_partner_account_state();
  inline void clear_has_partner_account_state();
  inline void set_has_shutdownlawterminatetimestamp();
  inline void clear_has_shutdownlawterminatetimestamp();
  inline void set_has_low_priority_games_remaining();
  inline void clear_has_low_priority_games_remaining();
  inline void set_has_competitive_rank();
  inline void clear_has_competitive_rank();
  inline void set_has_calibration_games_remaining();
  inline void clear_has_calibration_games_remaining();
  inline void set_has_solo_competitive_rank();
  inline void clear_has_solo_competitive_rank();
  inline void set_has_solo_calibration_games_remaining();
  inline void clear_has_solo_calibration_games_remaining();
  inline void set_has_competitive_1v1_rank();
  inline void clear_has_competitive_1v1_rank();
  inline void set_has_competitive_1v1_calibration_games_remaining();
  inline void clear_has_competitive_1v1_calibration_games_remaining();
  inline void set_has_recruitment_level();
  inline void clear_has_recruitment_level();
  inline void set_has_has_new_notifications();
  inline void clear_has_has_new_notifications();
  inline void set_has_is_league_admin();
  inline void clear_has_is_league_admin();
  inline void set_has_casual_games_played();
  inline void clear_has_casual_games_played();
  inline void set_has_solo_competitive_games_played();
  inline void clear_has_solo_competitive_games_played();
  inline void set_has_party_competitive_games_played();
  inline void clear_has_party_competitive_games_played();
  inline void set_has_casual_1v1_games_played();
  inline void clear_has_casual_1v1_games_played();
  inline void set_has_competitive_team_games_played();
  inline void clear_has_competitive_team_games_played();
  inline void set_has_curr_all_hero_challenge_id();
  inline void clear_has_curr_all_hero_challenge_id();
  inline void set_has_play_time_points();
  inline void clear_has_play_time_points();
  inline void set_has_account_flags();
  inline void clear_has_account_flags();
  inline void set_has_play_time_level();
  inline void clear_has_play_time_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 wins_;
  ::google::protobuf::uint32 losses_;
  ::google::protobuf::uint32 xp_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 initial_skill_;
  ::google::protobuf::uint32 leaver_count_;
  ::google::protobuf::uint32 secondary_leaver_count_;
  ::google::protobuf::uint32 low_priority_until_date_;
  ::google::protobuf::uint32 prevent_text_chat_until_date_;
  ::google::protobuf::uint32 prevent_voice_until_date_;
  ::google::protobuf::uint32 last_abandoned_game_date_;
  ::google::protobuf::uint32 last_secondary_abandoned_game_date_;
  ::google::protobuf::uint32 leaver_penalty_count_;
  ::google::protobuf::uint32 completed_game_streak_;
  ::google::protobuf::uint32 teaching_;
  ::google::protobuf::uint32 leadership_;
  ::google::protobuf::uint32 friendly_;
  ::google::protobuf::uint32 forgiving_;
  ::google::protobuf::uint32 account_disabled_until_date_;
  ::google::protobuf::uint32 account_disabled_count_;
  ::google::protobuf::uint32 showcase_hero_id_;
  ::google::protobuf::uint32 match_disabled_until_date_;
  ::google::protobuf::uint32 match_disabled_count_;
  int partner_account_type_;
  ::google::protobuf::uint32 partner_account_state_;
  ::google::protobuf::uint32 shutdownlawterminatetimestamp_;
  ::google::protobuf::uint32 low_priority_games_remaining_;
  ::google::protobuf::uint32 competitive_rank_;
  ::google::protobuf::uint32 calibration_games_remaining_;
  ::google::protobuf::uint32 solo_competitive_rank_;
  ::google::protobuf::uint32 solo_calibration_games_remaining_;
  ::google::protobuf::uint32 competitive_1v1_rank_;
  ::google::protobuf::uint32 competitive_1v1_calibration_games_remaining_;
  ::google::protobuf::uint32 recruitment_level_;
  bool has_new_notifications_;
  bool is_league_admin_;
  ::google::protobuf::uint32 casual_games_played_;
  ::google::protobuf::uint32 solo_competitive_games_played_;
  ::google::protobuf::uint32 party_competitive_games_played_;
  ::google::protobuf::uint32 casual_1v1_games_played_;
  ::google::protobuf::uint32 competitive_team_games_played_;
  ::google::protobuf::uint32 curr_all_hero_challenge_id_;
  ::google::protobuf::uint32 play_time_points_;
  ::google::protobuf::uint32 account_flags_;
  ::google::protobuf::uint32 play_time_level_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CSODOTAGameAccountClient* default_instance_;
};
// -------------------------------------------------------------------

class CSODOTAPartyMember : public ::google::protobuf::Message {
 public:
  CSODOTAPartyMember();
  virtual ~CSODOTAPartyMember();

  CSODOTAPartyMember(const CSODOTAPartyMember& from);

  inline CSODOTAPartyMember& operator=(const CSODOTAPartyMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAPartyMember& default_instance();

  void Swap(CSODOTAPartyMember* other);

  // implements Message ----------------------------------------------

  CSODOTAPartyMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTAPartyMember& from);
  void MergeFrom(const CSODOTAPartyMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
  inline bool has_partner_type() const;
  inline void clear_partner_type();
  static const int kPartnerTypeFieldNumber = 1;
  inline ::PartnerAccountType partner_type() const;
  inline void set_partner_type(::PartnerAccountType value);

  // optional bool is_coach = 2;
  inline bool has_is_coach() const;
  inline void clear_is_coach();
  static const int kIsCoachFieldNumber = 2;
  inline bool is_coach() const;
  inline void set_is_coach(bool value);

  // @@protoc_insertion_point(class_scope:CSODOTAPartyMember)
 private:
  inline void set_has_partner_type();
  inline void clear_has_partner_type();
  inline void set_has_is_coach();
  inline void clear_has_is_coach();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int partner_type_;
  bool is_coach_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CSODOTAPartyMember* default_instance_;
};
// -------------------------------------------------------------------

class CSODOTAParty : public ::google::protobuf::Message {
 public:
  CSODOTAParty();
  virtual ~CSODOTAParty();

  CSODOTAParty(const CSODOTAParty& from);

  inline CSODOTAParty& operator=(const CSODOTAParty& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAParty& default_instance();

  void Swap(CSODOTAParty* other);

  // implements Message ----------------------------------------------

  CSODOTAParty* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTAParty& from);
  void MergeFrom(const CSODOTAParty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CSODOTAParty_State State;
  static const State UI = CSODOTAParty_State_UI;
  static const State FINDING_MATCH = CSODOTAParty_State_FINDING_MATCH;
  static const State IN_MATCH = CSODOTAParty_State_IN_MATCH;
  static inline bool State_IsValid(int value) {
    return CSODOTAParty_State_IsValid(value);
  }
  static const State State_MIN =
    CSODOTAParty_State_State_MIN;
  static const State State_MAX =
    CSODOTAParty_State_State_MAX;
  static const int State_ARRAYSIZE =
    CSODOTAParty_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return CSODOTAParty_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return CSODOTAParty_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return CSODOTAParty_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 party_id = 1;
  inline bool has_party_id() const;
  inline void clear_party_id();
  static const int kPartyIdFieldNumber = 1;
  inline ::google::protobuf::uint64 party_id() const;
  inline void set_party_id(::google::protobuf::uint64 value);

  // optional fixed64 leader_id = 2;
  inline bool has_leader_id() const;
  inline void clear_leader_id();
  static const int kLeaderIdFieldNumber = 2;
  inline ::google::protobuf::uint64 leader_id() const;
  inline void set_leader_id(::google::protobuf::uint64 value);

  // repeated fixed64 member_ids = 3;
  inline int member_ids_size() const;
  inline void clear_member_ids();
  static const int kMemberIdsFieldNumber = 3;
  inline ::google::protobuf::uint64 member_ids(int index) const;
  inline void set_member_ids(int index, ::google::protobuf::uint64 value);
  inline void add_member_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      member_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_member_ids();

  // optional uint32 game_modes = 4;
  inline bool has_game_modes() const;
  inline void clear_game_modes();
  static const int kGameModesFieldNumber = 4;
  inline ::google::protobuf::uint32 game_modes() const;
  inline void set_game_modes(::google::protobuf::uint32 value);

  // optional .CSODOTAParty.State state = 6 [default = UI];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 6;
  inline ::CSODOTAParty_State state() const;
  inline void set_state(::CSODOTAParty_State value);

  // optional uint32 effective_started_matchmaking_time = 7;
  inline bool has_effective_started_matchmaking_time() const;
  inline void clear_effective_started_matchmaking_time();
  static const int kEffectiveStartedMatchmakingTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 effective_started_matchmaking_time() const;
  inline void set_effective_started_matchmaking_time(::google::protobuf::uint32 value);

  // optional uint32 raw_started_matchmaking_time = 32;
  inline bool has_raw_started_matchmaking_time() const;
  inline void clear_raw_started_matchmaking_time();
  static const int kRawStartedMatchmakingTimeFieldNumber = 32;
  inline ::google::protobuf::uint32 raw_started_matchmaking_time() const;
  inline void set_raw_started_matchmaking_time(::google::protobuf::uint32 value);

  // optional uint32 attempt_start_time = 33;
  inline bool has_attempt_start_time() const;
  inline void clear_attempt_start_time();
  static const int kAttemptStartTimeFieldNumber = 33;
  inline ::google::protobuf::uint32 attempt_start_time() const;
  inline void set_attempt_start_time(::google::protobuf::uint32 value);

  // optional uint32 attempt_num = 34;
  inline bool has_attempt_num() const;
  inline void clear_attempt_num();
  static const int kAttemptNumFieldNumber = 34;
  inline ::google::protobuf::uint32 attempt_num() const;
  inline void set_attempt_num(::google::protobuf::uint32 value);

  // optional uint32 matchgroups = 11;
  inline bool has_matchgroups() const;
  inline void clear_matchgroups();
  static const int kMatchgroupsFieldNumber = 11;
  inline ::google::protobuf::uint32 matchgroups() const;
  inline void set_matchgroups(::google::protobuf::uint32 value);

  // optional uint32 low_priority_account_id = 19;
  inline bool has_low_priority_account_id() const;
  inline void clear_low_priority_account_id();
  static const int kLowPriorityAccountIdFieldNumber = 19;
  inline ::google::protobuf::uint32 low_priority_account_id() const;
  inline void set_low_priority_account_id(::google::protobuf::uint32 value);

  // optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
  inline bool has_match_type() const;
  inline void clear_match_type();
  static const int kMatchTypeFieldNumber = 21;
  inline ::MatchType match_type() const;
  inline void set_match_type(::MatchType value);

  // optional .DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
  inline bool has_bot_difficulty() const;
  inline void clear_bot_difficulty();
  static const int kBotDifficultyFieldNumber = 22;
  inline ::DOTABotDifficulty bot_difficulty() const;
  inline void set_bot_difficulty(::DOTABotDifficulty value);

  // optional uint32 team_id = 23;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 23;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // optional uint32 match_disabled_until_date = 24;
  inline bool has_match_disabled_until_date() const;
  inline void clear_match_disabled_until_date();
  static const int kMatchDisabledUntilDateFieldNumber = 24;
  inline ::google::protobuf::uint32 match_disabled_until_date() const;
  inline void set_match_disabled_until_date(::google::protobuf::uint32 value);

  // optional uint32 match_disabled_account_id = 25;
  inline bool has_match_disabled_account_id() const;
  inline void clear_match_disabled_account_id();
  static const int kMatchDisabledAccountIdFieldNumber = 25;
  inline ::google::protobuf::uint32 match_disabled_account_id() const;
  inline void set_match_disabled_account_id(::google::protobuf::uint32 value);

  // optional uint32 matchmaking_max_range_minutes = 26;
  inline bool has_matchmaking_max_range_minutes() const;
  inline void clear_matchmaking_max_range_minutes();
  static const int kMatchmakingMaxRangeMinutesFieldNumber = 26;
  inline ::google::protobuf::uint32 matchmaking_max_range_minutes() const;
  inline void set_matchmaking_max_range_minutes(::google::protobuf::uint32 value);

  // optional uint32 matchlanguages = 27;
  inline bool has_matchlanguages() const;
  inline void clear_matchlanguages();
  static const int kMatchlanguagesFieldNumber = 27;
  inline ::google::protobuf::uint32 matchlanguages() const;
  inline void set_matchlanguages(::google::protobuf::uint32 value);

  // optional uint32 map_preference = 38;
  inline bool has_map_preference() const;
  inline void clear_map_preference();
  static const int kMapPreferenceFieldNumber = 38;
  inline ::google::protobuf::uint32 map_preference() const;
  inline void set_map_preference(::google::protobuf::uint32 value);

  // repeated .CSODOTAPartyMember members = 29;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 29;
  inline const ::CSODOTAPartyMember& members(int index) const;
  inline ::CSODOTAPartyMember* mutable_members(int index);
  inline ::CSODOTAPartyMember* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyMember >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyMember >*
      mutable_members();

  // optional uint32 open_guild_id = 30;
  inline bool has_open_guild_id() const;
  inline void clear_open_guild_id();
  static const int kOpenGuildIdFieldNumber = 30;
  inline ::google::protobuf::uint32 open_guild_id() const;
  inline void set_open_guild_id(::google::protobuf::uint32 value);

  // repeated uint32 common_guilds = 31;
  inline int common_guilds_size() const;
  inline void clear_common_guilds();
  static const int kCommonGuildsFieldNumber = 31;
  inline ::google::protobuf::uint32 common_guilds(int index) const;
  inline void set_common_guilds(int index, ::google::protobuf::uint32 value);
  inline void add_common_guilds(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      common_guilds() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_common_guilds();

  // optional uint32 low_priority_games_remaining = 35;
  inline bool has_low_priority_games_remaining() const;
  inline void clear_low_priority_games_remaining();
  static const int kLowPriorityGamesRemainingFieldNumber = 35;
  inline ::google::protobuf::uint32 low_priority_games_remaining() const;
  inline void set_low_priority_games_remaining(::google::protobuf::uint32 value);

  // optional uint32 min_level = 36;
  inline bool has_min_level() const;
  inline void clear_min_level();
  static const int kMinLevelFieldNumber = 36;
  inline ::google::protobuf::uint32 min_level() const;
  inline void set_min_level(::google::protobuf::uint32 value);

  // optional uint32 max_level = 37;
  inline bool has_max_level() const;
  inline void clear_max_level();
  static const int kMaxLevelFieldNumber = 37;
  inline ::google::protobuf::uint32 max_level() const;
  inline void set_max_level(::google::protobuf::uint32 value);

  // repeated .EEvent active_ingame_events = 39;
  inline int active_ingame_events_size() const;
  inline void clear_active_ingame_events();
  static const int kActiveIngameEventsFieldNumber = 39;
  inline ::EEvent active_ingame_events(int index) const;
  inline void set_active_ingame_events(int index, ::EEvent value);
  inline void add_active_ingame_events(::EEvent value);
  inline const ::google::protobuf::RepeatedField<int>& active_ingame_events() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_active_ingame_events();

  // optional bool open_for_join_requests = 40;
  inline bool has_open_for_join_requests() const;
  inline void clear_open_for_join_requests();
  static const int kOpenForJoinRequestsFieldNumber = 40;
  inline bool open_for_join_requests() const;
  inline void set_open_for_join_requests(bool value);

  // repeated .CSODOTAPartyInvite sent_invites = 41;
  inline int sent_invites_size() const;
  inline void clear_sent_invites();
  static const int kSentInvitesFieldNumber = 41;
  inline const ::CSODOTAPartyInvite& sent_invites(int index) const;
  inline ::CSODOTAPartyInvite* mutable_sent_invites(int index);
  inline ::CSODOTAPartyInvite* add_sent_invites();
  inline const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite >&
      sent_invites() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite >*
      mutable_sent_invites();

  // repeated .CSODOTAPartyInvite recv_invites = 42;
  inline int recv_invites_size() const;
  inline void clear_recv_invites();
  static const int kRecvInvitesFieldNumber = 42;
  inline const ::CSODOTAPartyInvite& recv_invites(int index) const;
  inline ::CSODOTAPartyInvite* mutable_recv_invites(int index);
  inline ::CSODOTAPartyInvite* add_recv_invites();
  inline const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite >&
      recv_invites() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite >*
      mutable_recv_invites();

  // optional uint32 account_flags = 43;
  inline bool has_account_flags() const;
  inline void clear_account_flags();
  static const int kAccountFlagsFieldNumber = 43;
  inline ::google::protobuf::uint32 account_flags() const;
  inline void set_account_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSODOTAParty)
 private:
  inline void set_has_party_id();
  inline void clear_has_party_id();
  inline void set_has_leader_id();
  inline void clear_has_leader_id();
  inline void set_has_game_modes();
  inline void clear_has_game_modes();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_effective_started_matchmaking_time();
  inline void clear_has_effective_started_matchmaking_time();
  inline void set_has_raw_started_matchmaking_time();
  inline void clear_has_raw_started_matchmaking_time();
  inline void set_has_attempt_start_time();
  inline void clear_has_attempt_start_time();
  inline void set_has_attempt_num();
  inline void clear_has_attempt_num();
  inline void set_has_matchgroups();
  inline void clear_has_matchgroups();
  inline void set_has_low_priority_account_id();
  inline void clear_has_low_priority_account_id();
  inline void set_has_match_type();
  inline void clear_has_match_type();
  inline void set_has_bot_difficulty();
  inline void clear_has_bot_difficulty();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_match_disabled_until_date();
  inline void clear_has_match_disabled_until_date();
  inline void set_has_match_disabled_account_id();
  inline void clear_has_match_disabled_account_id();
  inline void set_has_matchmaking_max_range_minutes();
  inline void clear_has_matchmaking_max_range_minutes();
  inline void set_has_matchlanguages();
  inline void clear_has_matchlanguages();
  inline void set_has_map_preference();
  inline void clear_has_map_preference();
  inline void set_has_open_guild_id();
  inline void clear_has_open_guild_id();
  inline void set_has_low_priority_games_remaining();
  inline void clear_has_low_priority_games_remaining();
  inline void set_has_min_level();
  inline void clear_has_min_level();
  inline void set_has_max_level();
  inline void clear_has_max_level();
  inline void set_has_open_for_join_requests();
  inline void clear_has_open_for_join_requests();
  inline void set_has_account_flags();
  inline void clear_has_account_flags();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 party_id_;
  ::google::protobuf::uint64 leader_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > member_ids_;
  ::google::protobuf::uint32 game_modes_;
  int state_;
  ::google::protobuf::uint32 effective_started_matchmaking_time_;
  ::google::protobuf::uint32 raw_started_matchmaking_time_;
  ::google::protobuf::uint32 attempt_start_time_;
  ::google::protobuf::uint32 attempt_num_;
  ::google::protobuf::uint32 matchgroups_;
  ::google::protobuf::uint32 low_priority_account_id_;
  int match_type_;
  int bot_difficulty_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 match_disabled_until_date_;
  ::google::protobuf::uint32 match_disabled_account_id_;
  ::google::protobuf::uint32 matchmaking_max_range_minutes_;
  ::google::protobuf::uint32 matchlanguages_;
  ::google::protobuf::uint32 map_preference_;
  ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyMember > members_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > common_guilds_;
  ::google::protobuf::uint32 open_guild_id_;
  ::google::protobuf::uint32 low_priority_games_remaining_;
  ::google::protobuf::uint32 min_level_;
  ::google::protobuf::uint32 max_level_;
  ::google::protobuf::RepeatedField<int> active_ingame_events_;
  ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite > sent_invites_;
  bool open_for_join_requests_;
  ::google::protobuf::uint32 account_flags_;
  ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite > recv_invites_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CSODOTAParty* default_instance_;
};
// -------------------------------------------------------------------

class CSODOTAPartyInvite_PartyMember : public ::google::protobuf::Message {
 public:
  CSODOTAPartyInvite_PartyMember();
  virtual ~CSODOTAPartyInvite_PartyMember();

  CSODOTAPartyInvite_PartyMember(const CSODOTAPartyInvite_PartyMember& from);

  inline CSODOTAPartyInvite_PartyMember& operator=(const CSODOTAPartyInvite_PartyMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAPartyInvite_PartyMember& default_instance();

  void Swap(CSODOTAPartyInvite_PartyMember* other);

  // implements Message ----------------------------------------------

  CSODOTAPartyInvite_PartyMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTAPartyInvite_PartyMember& from);
  void MergeFrom(const CSODOTAPartyInvite_PartyMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional fixed64 steam_id = 2;
  inline bool has_steam_id() const;
  inline void clear_steam_id();
  static const int kSteamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 steam_id() const;
  inline void set_steam_id(::google::protobuf::uint64 value);

  // optional bool is_coach = 4;
  inline bool has_is_coach() const;
  inline void clear_is_coach();
  static const int kIsCoachFieldNumber = 4;
  inline bool is_coach() const;
  inline void set_is_coach(bool value);

  // @@protoc_insertion_point(class_scope:CSODOTAPartyInvite.PartyMember)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_steam_id();
  inline void clear_has_steam_id();
  inline void set_has_is_coach();
  inline void clear_has_is_coach();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint64 steam_id_;
  bool is_coach_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CSODOTAPartyInvite_PartyMember* default_instance_;
};
// -------------------------------------------------------------------

class CSODOTAPartyInvite : public ::google::protobuf::Message {
 public:
  CSODOTAPartyInvite();
  virtual ~CSODOTAPartyInvite();

  CSODOTAPartyInvite(const CSODOTAPartyInvite& from);

  inline CSODOTAPartyInvite& operator=(const CSODOTAPartyInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAPartyInvite& default_instance();

  void Swap(CSODOTAPartyInvite* other);

  // implements Message ----------------------------------------------

  CSODOTAPartyInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTAPartyInvite& from);
  void MergeFrom(const CSODOTAPartyInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CSODOTAPartyInvite_PartyMember PartyMember;

  // accessors -------------------------------------------------------

  // optional uint64 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint64 group_id() const;
  inline void set_group_id(::google::protobuf::uint64 value);

  // optional fixed64 sender_id = 2;
  inline bool has_sender_id() const;
  inline void clear_sender_id();
  static const int kSenderIdFieldNumber = 2;
  inline ::google::protobuf::uint64 sender_id() const;
  inline void set_sender_id(::google::protobuf::uint64 value);

  // optional string sender_name = 3;
  inline bool has_sender_name() const;
  inline void clear_sender_name();
  static const int kSenderNameFieldNumber = 3;
  inline const ::std::string& sender_name() const;
  inline void set_sender_name(const ::std::string& value);
  inline void set_sender_name(const char* value);
  inline void set_sender_name(const char* value, size_t size);
  inline ::std::string* mutable_sender_name();
  inline ::std::string* release_sender_name();
  inline void set_allocated_sender_name(::std::string* sender_name);

  // repeated .CSODOTAPartyInvite.PartyMember members = 4;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 4;
  inline const ::CSODOTAPartyInvite_PartyMember& members(int index) const;
  inline ::CSODOTAPartyInvite_PartyMember* mutable_members(int index);
  inline ::CSODOTAPartyInvite_PartyMember* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember >*
      mutable_members();

  // optional uint32 team_id = 5;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 5;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // optional bool low_priority_status = 6;
  inline bool has_low_priority_status() const;
  inline void clear_low_priority_status();
  static const int kLowPriorityStatusFieldNumber = 6;
  inline bool low_priority_status() const;
  inline void set_low_priority_status(bool value);

  // optional bool as_coach = 7;
  inline bool has_as_coach() const;
  inline void clear_as_coach();
  static const int kAsCoachFieldNumber = 7;
  inline bool as_coach() const;
  inline void set_as_coach(bool value);

  // optional fixed64 invite_gid = 8;
  inline bool has_invite_gid() const;
  inline void clear_invite_gid();
  static const int kInviteGidFieldNumber = 8;
  inline ::google::protobuf::uint64 invite_gid() const;
  inline void set_invite_gid(::google::protobuf::uint64 value);

  // optional uint32 engine = 9;
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 9;
  inline ::google::protobuf::uint32 engine() const;
  inline void set_engine(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSODOTAPartyInvite)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_sender_id();
  inline void clear_has_sender_id();
  inline void set_has_sender_name();
  inline void clear_has_sender_name();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_low_priority_status();
  inline void clear_has_low_priority_status();
  inline void set_has_as_coach();
  inline void clear_has_as_coach();
  inline void set_has_invite_gid();
  inline void clear_has_invite_gid();
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 group_id_;
  ::google::protobuf::uint64 sender_id_;
  ::std::string* sender_name_;
  ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember > members_;
  ::google::protobuf::uint32 team_id_;
  bool low_priority_status_;
  bool as_coach_;
  ::google::protobuf::uint64 invite_gid_;
  ::google::protobuf::uint32 engine_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CSODOTAPartyInvite* default_instance_;
};
// -------------------------------------------------------------------

class CSODOTALobbyInvite_LobbyMember : public ::google::protobuf::Message {
 public:
  CSODOTALobbyInvite_LobbyMember();
  virtual ~CSODOTALobbyInvite_LobbyMember();

  CSODOTALobbyInvite_LobbyMember(const CSODOTALobbyInvite_LobbyMember& from);

  inline CSODOTALobbyInvite_LobbyMember& operator=(const CSODOTALobbyInvite_LobbyMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTALobbyInvite_LobbyMember& default_instance();

  void Swap(CSODOTALobbyInvite_LobbyMember* other);

  // implements Message ----------------------------------------------

  CSODOTALobbyInvite_LobbyMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTALobbyInvite_LobbyMember& from);
  void MergeFrom(const CSODOTALobbyInvite_LobbyMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional fixed64 steam_id = 2;
  inline bool has_steam_id() const;
  inline void clear_steam_id();
  static const int kSteamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 steam_id() const;
  inline void set_steam_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CSODOTALobbyInvite.LobbyMember)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_steam_id();
  inline void clear_has_steam_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint64 steam_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CSODOTALobbyInvite_LobbyMember* default_instance_;
};
// -------------------------------------------------------------------

class CSODOTALobbyInvite : public ::google::protobuf::Message {
 public:
  CSODOTALobbyInvite();
  virtual ~CSODOTALobbyInvite();

  CSODOTALobbyInvite(const CSODOTALobbyInvite& from);

  inline CSODOTALobbyInvite& operator=(const CSODOTALobbyInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTALobbyInvite& default_instance();

  void Swap(CSODOTALobbyInvite* other);

  // implements Message ----------------------------------------------

  CSODOTALobbyInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTALobbyInvite& from);
  void MergeFrom(const CSODOTALobbyInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CSODOTALobbyInvite_LobbyMember LobbyMember;

  // accessors -------------------------------------------------------

  // optional uint64 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint64 group_id() const;
  inline void set_group_id(::google::protobuf::uint64 value);

  // optional fixed64 sender_id = 2;
  inline bool has_sender_id() const;
  inline void clear_sender_id();
  static const int kSenderIdFieldNumber = 2;
  inline ::google::protobuf::uint64 sender_id() const;
  inline void set_sender_id(::google::protobuf::uint64 value);

  // optional string sender_name = 3;
  inline bool has_sender_name() const;
  inline void clear_sender_name();
  static const int kSenderNameFieldNumber = 3;
  inline const ::std::string& sender_name() const;
  inline void set_sender_name(const ::std::string& value);
  inline void set_sender_name(const char* value);
  inline void set_sender_name(const char* value, size_t size);
  inline ::std::string* mutable_sender_name();
  inline ::std::string* release_sender_name();
  inline void set_allocated_sender_name(::std::string* sender_name);

  // repeated .CSODOTALobbyInvite.LobbyMember members = 4;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 4;
  inline const ::CSODOTALobbyInvite_LobbyMember& members(int index) const;
  inline ::CSODOTALobbyInvite_LobbyMember* mutable_members(int index);
  inline ::CSODOTALobbyInvite_LobbyMember* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::CSODOTALobbyInvite_LobbyMember >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSODOTALobbyInvite_LobbyMember >*
      mutable_members();

  // optional uint64 custom_game_id = 5;
  inline bool has_custom_game_id() const;
  inline void clear_custom_game_id();
  static const int kCustomGameIdFieldNumber = 5;
  inline ::google::protobuf::uint64 custom_game_id() const;
  inline void set_custom_game_id(::google::protobuf::uint64 value);

  // optional fixed64 invite_gid = 6;
  inline bool has_invite_gid() const;
  inline void clear_invite_gid();
  static const int kInviteGidFieldNumber = 6;
  inline ::google::protobuf::uint64 invite_gid() const;
  inline void set_invite_gid(::google::protobuf::uint64 value);

  // optional fixed64 custom_game_crc = 7;
  inline bool has_custom_game_crc() const;
  inline void clear_custom_game_crc();
  static const int kCustomGameCrcFieldNumber = 7;
  inline ::google::protobuf::uint64 custom_game_crc() const;
  inline void set_custom_game_crc(::google::protobuf::uint64 value);

  // optional fixed32 custom_game_timestamp = 8;
  inline bool has_custom_game_timestamp() const;
  inline void clear_custom_game_timestamp();
  static const int kCustomGameTimestampFieldNumber = 8;
  inline ::google::protobuf::uint32 custom_game_timestamp() const;
  inline void set_custom_game_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSODOTALobbyInvite)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_sender_id();
  inline void clear_has_sender_id();
  inline void set_has_sender_name();
  inline void clear_has_sender_name();
  inline void set_has_custom_game_id();
  inline void clear_has_custom_game_id();
  inline void set_has_invite_gid();
  inline void clear_has_invite_gid();
  inline void set_has_custom_game_crc();
  inline void clear_has_custom_game_crc();
  inline void set_has_custom_game_timestamp();
  inline void clear_has_custom_game_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 group_id_;
  ::google::protobuf::uint64 sender_id_;
  ::std::string* sender_name_;
  ::google::protobuf::RepeatedPtrField< ::CSODOTALobbyInvite_LobbyMember > members_;
  ::google::protobuf::uint64 custom_game_id_;
  ::google::protobuf::uint64 invite_gid_;
  ::google::protobuf::uint64 custom_game_crc_;
  ::google::protobuf::uint32 custom_game_timestamp_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CSODOTALobbyInvite* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAClientHardwareSpecs : public ::google::protobuf::Message {
 public:
  CDOTAClientHardwareSpecs();
  virtual ~CDOTAClientHardwareSpecs();

  CDOTAClientHardwareSpecs(const CDOTAClientHardwareSpecs& from);

  inline CDOTAClientHardwareSpecs& operator=(const CDOTAClientHardwareSpecs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAClientHardwareSpecs& default_instance();

  void Swap(CDOTAClientHardwareSpecs* other);

  // implements Message ----------------------------------------------

  CDOTAClientHardwareSpecs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAClientHardwareSpecs& from);
  void MergeFrom(const CDOTAClientHardwareSpecs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 logical_processors = 1;
  inline bool has_logical_processors() const;
  inline void clear_logical_processors();
  static const int kLogicalProcessorsFieldNumber = 1;
  inline ::google::protobuf::uint32 logical_processors() const;
  inline void set_logical_processors(::google::protobuf::uint32 value);

  // optional fixed64 cpu_cycles_per_second = 2;
  inline bool has_cpu_cycles_per_second() const;
  inline void clear_cpu_cycles_per_second();
  static const int kCpuCyclesPerSecondFieldNumber = 2;
  inline ::google::protobuf::uint64 cpu_cycles_per_second() const;
  inline void set_cpu_cycles_per_second(::google::protobuf::uint64 value);

  // optional fixed64 total_physical_memory = 3;
  inline bool has_total_physical_memory() const;
  inline void clear_total_physical_memory();
  static const int kTotalPhysicalMemoryFieldNumber = 3;
  inline ::google::protobuf::uint64 total_physical_memory() const;
  inline void set_total_physical_memory(::google::protobuf::uint64 value);

  // optional bool is_64_bit_os = 4;
  inline bool has_is_64_bit_os() const;
  inline void clear_is_64_bit_os();
  static const int kIs64BitOsFieldNumber = 4;
  inline bool is_64_bit_os() const;
  inline void set_is_64_bit_os(bool value);

  // optional uint64 upload_measurement = 5;
  inline bool has_upload_measurement() const;
  inline void clear_upload_measurement();
  static const int kUploadMeasurementFieldNumber = 5;
  inline ::google::protobuf::uint64 upload_measurement() const;
  inline void set_upload_measurement(::google::protobuf::uint64 value);

  // optional bool prefer_not_host = 6;
  inline bool has_prefer_not_host() const;
  inline void clear_prefer_not_host();
  static const int kPreferNotHostFieldNumber = 6;
  inline bool prefer_not_host() const;
  inline void set_prefer_not_host(bool value);

  // @@protoc_insertion_point(class_scope:CDOTAClientHardwareSpecs)
 private:
  inline void set_has_logical_processors();
  inline void clear_has_logical_processors();
  inline void set_has_cpu_cycles_per_second();
  inline void clear_has_cpu_cycles_per_second();
  inline void set_has_total_physical_memory();
  inline void clear_has_total_physical_memory();
  inline void set_has_is_64_bit_os();
  inline void clear_has_is_64_bit_os();
  inline void set_has_upload_measurement();
  inline void clear_has_upload_measurement();
  inline void set_has_prefer_not_host();
  inline void clear_has_prefer_not_host();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 cpu_cycles_per_second_;
  ::google::protobuf::uint64 total_physical_memory_;
  ::google::protobuf::uint32 logical_processors_;
  bool is_64_bit_os_;
  bool prefer_not_host_;
  ::google::protobuf::uint64 upload_measurement_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CDOTAClientHardwareSpecs* default_instance_;
};
// -------------------------------------------------------------------

class CDOTASaveGame_Player : public ::google::protobuf::Message {
 public:
  CDOTASaveGame_Player();
  virtual ~CDOTASaveGame_Player();

  CDOTASaveGame_Player(const CDOTASaveGame_Player& from);

  inline CDOTASaveGame_Player& operator=(const CDOTASaveGame_Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTASaveGame_Player& default_instance();

  void Swap(CDOTASaveGame_Player* other);

  // implements Message ----------------------------------------------

  CDOTASaveGame_Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTASaveGame_Player& from);
  void MergeFrom(const CDOTASaveGame_Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 1;
  inline ::DOTA_GC_TEAM team() const;
  inline void set_team(::DOTA_GC_TEAM value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string hero = 3;
  inline bool has_hero() const;
  inline void clear_hero();
  static const int kHeroFieldNumber = 3;
  inline const ::std::string& hero() const;
  inline void set_hero(const ::std::string& value);
  inline void set_hero(const char* value);
  inline void set_hero(const char* value, size_t size);
  inline ::std::string* mutable_hero();
  inline ::std::string* release_hero();
  inline void set_allocated_hero(::std::string* hero);

  // @@protoc_insertion_point(class_scope:CDOTASaveGame.Player)
 private:
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_hero();
  inline void clear_has_hero();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* hero_;
  int team_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CDOTASaveGame_Player* default_instance_;
};
// -------------------------------------------------------------------

class CDOTASaveGame_SaveInstance_PlayerPositions : public ::google::protobuf::Message {
 public:
  CDOTASaveGame_SaveInstance_PlayerPositions();
  virtual ~CDOTASaveGame_SaveInstance_PlayerPositions();

  CDOTASaveGame_SaveInstance_PlayerPositions(const CDOTASaveGame_SaveInstance_PlayerPositions& from);

  inline CDOTASaveGame_SaveInstance_PlayerPositions& operator=(const CDOTASaveGame_SaveInstance_PlayerPositions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTASaveGame_SaveInstance_PlayerPositions& default_instance();

  void Swap(CDOTASaveGame_SaveInstance_PlayerPositions* other);

  // implements Message ----------------------------------------------

  CDOTASaveGame_SaveInstance_PlayerPositions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTASaveGame_SaveInstance_PlayerPositions& from);
  void MergeFrom(const CDOTASaveGame_SaveInstance_PlayerPositions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:CDOTASaveGame.SaveInstance.PlayerPositions)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CDOTASaveGame_SaveInstance_PlayerPositions* default_instance_;
};
// -------------------------------------------------------------------

class CDOTASaveGame_SaveInstance : public ::google::protobuf::Message {
 public:
  CDOTASaveGame_SaveInstance();
  virtual ~CDOTASaveGame_SaveInstance();

  CDOTASaveGame_SaveInstance(const CDOTASaveGame_SaveInstance& from);

  inline CDOTASaveGame_SaveInstance& operator=(const CDOTASaveGame_SaveInstance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTASaveGame_SaveInstance& default_instance();

  void Swap(CDOTASaveGame_SaveInstance* other);

  // implements Message ----------------------------------------------

  CDOTASaveGame_SaveInstance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTASaveGame_SaveInstance& from);
  void MergeFrom(const CDOTASaveGame_SaveInstance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CDOTASaveGame_SaveInstance_PlayerPositions PlayerPositions;

  // accessors -------------------------------------------------------

  // optional uint32 game_time = 2;
  inline bool has_game_time() const;
  inline void clear_game_time();
  static const int kGameTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 game_time() const;
  inline void set_game_time(::google::protobuf::uint32 value);

  // optional uint32 team1_score = 3;
  inline bool has_team1_score() const;
  inline void clear_team1_score();
  static const int kTeam1ScoreFieldNumber = 3;
  inline ::google::protobuf::uint32 team1_score() const;
  inline void set_team1_score(::google::protobuf::uint32 value);

  // optional uint32 team2_score = 4;
  inline bool has_team2_score() const;
  inline void clear_team2_score();
  static const int kTeam2ScoreFieldNumber = 4;
  inline ::google::protobuf::uint32 team2_score() const;
  inline void set_team2_score(::google::protobuf::uint32 value);

  // repeated .CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
  inline int player_positions_size() const;
  inline void clear_player_positions();
  static const int kPlayerPositionsFieldNumber = 5;
  inline const ::CDOTASaveGame_SaveInstance_PlayerPositions& player_positions(int index) const;
  inline ::CDOTASaveGame_SaveInstance_PlayerPositions* mutable_player_positions(int index);
  inline ::CDOTASaveGame_SaveInstance_PlayerPositions* add_player_positions();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance_PlayerPositions >&
      player_positions() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance_PlayerPositions >*
      mutable_player_positions();

  // optional uint32 save_id = 6;
  inline bool has_save_id() const;
  inline void clear_save_id();
  static const int kSaveIdFieldNumber = 6;
  inline ::google::protobuf::uint32 save_id() const;
  inline void set_save_id(::google::protobuf::uint32 value);

  // optional uint32 save_time = 7;
  inline bool has_save_time() const;
  inline void clear_save_time();
  static const int kSaveTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 save_time() const;
  inline void set_save_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CDOTASaveGame.SaveInstance)
 private:
  inline void set_has_game_time();
  inline void clear_has_game_time();
  inline void set_has_team1_score();
  inline void clear_has_team1_score();
  inline void set_has_team2_score();
  inline void clear_has_team2_score();
  inline void set_has_save_id();
  inline void clear_has_save_id();
  inline void set_has_save_time();
  inline void clear_has_save_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 game_time_;
  ::google::protobuf::uint32 team1_score_;
  ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance_PlayerPositions > player_positions_;
  ::google::protobuf::uint32 team2_score_;
  ::google::protobuf::uint32 save_id_;
  ::google::protobuf::uint32 save_time_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CDOTASaveGame_SaveInstance* default_instance_;
};
// -------------------------------------------------------------------

class CDOTASaveGame : public ::google::protobuf::Message {
 public:
  CDOTASaveGame();
  virtual ~CDOTASaveGame();

  CDOTASaveGame(const CDOTASaveGame& from);

  inline CDOTASaveGame& operator=(const CDOTASaveGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTASaveGame& default_instance();

  void Swap(CDOTASaveGame* other);

  // implements Message ----------------------------------------------

  CDOTASaveGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTASaveGame& from);
  void MergeFrom(const CDOTASaveGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CDOTASaveGame_Player Player;
  typedef CDOTASaveGame_SaveInstance SaveInstance;

  // accessors -------------------------------------------------------

  // optional uint64 match_id = 5;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 5;
  inline ::google::protobuf::uint64 match_id() const;
  inline void set_match_id(::google::protobuf::uint64 value);

  // optional uint32 save_time = 2;
  inline bool has_save_time() const;
  inline void clear_save_time();
  static const int kSaveTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 save_time() const;
  inline void set_save_time(::google::protobuf::uint32 value);

  // repeated .CDOTASaveGame.Player players = 3;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 3;
  inline const ::CDOTASaveGame_Player& players(int index) const;
  inline ::CDOTASaveGame_Player* mutable_players(int index);
  inline ::CDOTASaveGame_Player* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_Player >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_Player >*
      mutable_players();

  // repeated .CDOTASaveGame.SaveInstance save_instances = 4;
  inline int save_instances_size() const;
  inline void clear_save_instances();
  static const int kSaveInstancesFieldNumber = 4;
  inline const ::CDOTASaveGame_SaveInstance& save_instances(int index) const;
  inline ::CDOTASaveGame_SaveInstance* mutable_save_instances(int index);
  inline ::CDOTASaveGame_SaveInstance* add_save_instances();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance >&
      save_instances() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance >*
      mutable_save_instances();

  // @@protoc_insertion_point(class_scope:CDOTASaveGame)
 private:
  inline void set_has_match_id();
  inline void clear_has_match_id();
  inline void set_has_save_time();
  inline void clear_has_save_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 match_id_;
  ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_Player > players_;
  ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance > save_instances_;
  ::google::protobuf::uint32 save_time_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CDOTASaveGame* default_instance_;
};
// -------------------------------------------------------------------

class CMsgLeaverState : public ::google::protobuf::Message {
 public:
  CMsgLeaverState();
  virtual ~CMsgLeaverState();

  CMsgLeaverState(const CMsgLeaverState& from);

  inline CMsgLeaverState& operator=(const CMsgLeaverState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgLeaverState& default_instance();

  void Swap(CMsgLeaverState* other);

  // implements Message ----------------------------------------------

  CMsgLeaverState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgLeaverState& from);
  void MergeFrom(const CMsgLeaverState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 lobby_state = 1;
  inline bool has_lobby_state() const;
  inline void clear_lobby_state();
  static const int kLobbyStateFieldNumber = 1;
  inline ::google::protobuf::uint32 lobby_state() const;
  inline void set_lobby_state(::google::protobuf::uint32 value);

  // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  inline bool has_game_state() const;
  inline void clear_game_state();
  static const int kGameStateFieldNumber = 2;
  inline ::DOTA_GameState game_state() const;
  inline void set_game_state(::DOTA_GameState value);

  // optional bool leaver_detected = 3;
  inline bool has_leaver_detected() const;
  inline void clear_leaver_detected();
  static const int kLeaverDetectedFieldNumber = 3;
  inline bool leaver_detected() const;
  inline void set_leaver_detected(bool value);

  // optional bool first_blood_happened = 4;
  inline bool has_first_blood_happened() const;
  inline void clear_first_blood_happened();
  static const int kFirstBloodHappenedFieldNumber = 4;
  inline bool first_blood_happened() const;
  inline void set_first_blood_happened(bool value);

  // optional bool discard_match_results = 5;
  inline bool has_discard_match_results() const;
  inline void clear_discard_match_results();
  static const int kDiscardMatchResultsFieldNumber = 5;
  inline bool discard_match_results() const;
  inline void set_discard_match_results(bool value);

  // optional bool mass_disconnect = 6;
  inline bool has_mass_disconnect() const;
  inline void clear_mass_disconnect();
  static const int kMassDisconnectFieldNumber = 6;
  inline bool mass_disconnect() const;
  inline void set_mass_disconnect(bool value);

  // @@protoc_insertion_point(class_scope:CMsgLeaverState)
 private:
  inline void set_has_lobby_state();
  inline void clear_has_lobby_state();
  inline void set_has_game_state();
  inline void clear_has_game_state();
  inline void set_has_leaver_detected();
  inline void clear_has_leaver_detected();
  inline void set_has_first_blood_happened();
  inline void clear_has_first_blood_happened();
  inline void set_has_discard_match_results();
  inline void clear_has_discard_match_results();
  inline void set_has_mass_disconnect();
  inline void clear_has_mass_disconnect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 lobby_state_;
  int game_state_;
  bool leaver_detected_;
  bool first_blood_happened_;
  bool discard_match_results_;
  bool mass_disconnect_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgLeaverState* default_instance_;
};
// -------------------------------------------------------------------

class CDOTALobbyMember_CDOTALobbyMemberXPBonus : public ::google::protobuf::Message {
 public:
  CDOTALobbyMember_CDOTALobbyMemberXPBonus();
  virtual ~CDOTALobbyMember_CDOTALobbyMemberXPBonus();

  CDOTALobbyMember_CDOTALobbyMemberXPBonus(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from);

  inline CDOTALobbyMember_CDOTALobbyMemberXPBonus& operator=(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTALobbyMember_CDOTALobbyMemberXPBonus& default_instance();

  void Swap(CDOTALobbyMember_CDOTALobbyMemberXPBonus* other);

  // implements Message ----------------------------------------------

  CDOTALobbyMember_CDOTALobbyMemberXPBonus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from);
  void MergeFrom(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional float xp_bonus = 2;
  inline bool has_xp_bonus() const;
  inline void clear_xp_bonus();
  static const int kXpBonusFieldNumber = 2;
  inline float xp_bonus() const;
  inline void set_xp_bonus(float value);

  // optional uint64 source_key = 3;
  inline bool has_source_key() const;
  inline void clear_source_key();
  static const int kSourceKeyFieldNumber = 3;
  inline ::google::protobuf::uint64 source_key() const;
  inline void set_source_key(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CDOTALobbyMember.CDOTALobbyMemberXPBonus)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_xp_bonus();
  inline void clear_has_xp_bonus();
  inline void set_has_source_key();
  inline void clear_has_source_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 type_;
  float xp_bonus_;
  ::google::protobuf::uint64 source_key_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CDOTALobbyMember_CDOTALobbyMemberXPBonus* default_instance_;
};
// -------------------------------------------------------------------

class CDOTALobbyMember : public ::google::protobuf::Message {
 public:
  CDOTALobbyMember();
  virtual ~CDOTALobbyMember();

  CDOTALobbyMember(const CDOTALobbyMember& from);

  inline CDOTALobbyMember& operator=(const CDOTALobbyMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTALobbyMember& default_instance();

  void Swap(CDOTALobbyMember* other);

  // implements Message ----------------------------------------------

  CDOTALobbyMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTALobbyMember& from);
  void MergeFrom(const CDOTALobbyMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CDOTALobbyMember_CDOTALobbyMemberXPBonus CDOTALobbyMemberXPBonus;

  // accessors -------------------------------------------------------

  // optional fixed64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint32 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 3;
  inline ::DOTA_GC_TEAM team() const;
  inline void set_team(::DOTA_GC_TEAM value);

  // optional string name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 slot = 7;
  inline bool has_slot() const;
  inline void clear_slot();
  static const int kSlotFieldNumber = 7;
  inline ::google::protobuf::uint32 slot() const;
  inline void set_slot(::google::protobuf::uint32 value);

  // optional uint64 party_id = 12;
  inline bool has_party_id() const;
  inline void clear_party_id();
  static const int kPartyIdFieldNumber = 12;
  inline ::google::protobuf::uint64 party_id() const;
  inline void set_party_id(::google::protobuf::uint64 value);

  // optional uint32 meta_level = 13;
  inline bool has_meta_level() const;
  inline void clear_meta_level();
  static const int kMetaLevelFieldNumber = 13;
  inline ::google::protobuf::uint32 meta_level() const;
  inline void set_meta_level(::google::protobuf::uint32 value);

  // optional uint32 meta_xp = 14;
  inline bool has_meta_xp() const;
  inline void clear_meta_xp();
  static const int kMetaXpFieldNumber = 14;
  inline ::google::protobuf::uint32 meta_xp() const;
  inline void set_meta_xp(::google::protobuf::uint32 value);

  // optional uint32 meta_xp_awarded = 15;
  inline bool has_meta_xp_awarded() const;
  inline void clear_meta_xp_awarded();
  static const int kMetaXpAwardedFieldNumber = 15;
  inline ::google::protobuf::uint32 meta_xp_awarded() const;
  inline void set_meta_xp_awarded(::google::protobuf::uint32 value);

  // optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
  inline bool has_leaver_status() const;
  inline void clear_leaver_status();
  static const int kLeaverStatusFieldNumber = 16;
  inline ::DOTALeaverStatus_t leaver_status() const;
  inline void set_leaver_status(::DOTALeaverStatus_t value);

  // optional uint32 leaver_actions = 28;
  inline bool has_leaver_actions() const;
  inline void clear_leaver_actions();
  static const int kLeaverActionsFieldNumber = 28;
  inline ::google::protobuf::uint32 leaver_actions() const;
  inline void set_leaver_actions(::google::protobuf::uint32 value);

  // optional uint32 channel = 17;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 17;
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);

  // optional uint32 prize_def_index = 18;
  inline bool has_prize_def_index() const;
  inline void clear_prize_def_index();
  static const int kPrizeDefIndexFieldNumber = 18;
  inline ::google::protobuf::uint32 prize_def_index() const;
  inline void set_prize_def_index(::google::protobuf::uint32 value);

  // repeated uint32 disabled_hero_id = 20;
  inline int disabled_hero_id_size() const;
  inline void clear_disabled_hero_id();
  static const int kDisabledHeroIdFieldNumber = 20;
  inline ::google::protobuf::uint32 disabled_hero_id(int index) const;
  inline void set_disabled_hero_id(int index, ::google::protobuf::uint32 value);
  inline void add_disabled_hero_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      disabled_hero_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_disabled_hero_id();

  // optional .PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
  inline bool has_partner_account_type() const;
  inline void clear_partner_account_type();
  static const int kPartnerAccountTypeFieldNumber = 21;
  inline ::PartnerAccountType partner_account_type() const;
  inline void set_partner_account_type(::PartnerAccountType value);

  // repeated uint32 enabled_hero_id = 22;
  inline int enabled_hero_id_size() const;
  inline void clear_enabled_hero_id();
  static const int kEnabledHeroIdFieldNumber = 22;
  inline ::google::protobuf::uint32 enabled_hero_id(int index) const;
  inline void set_enabled_hero_id(int index, ::google::protobuf::uint32 value);
  inline void add_enabled_hero_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      enabled_hero_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_enabled_hero_id();

  // optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_GOOD_GUYS];
  inline bool has_coach_team() const;
  inline void clear_coach_team();
  static const int kCoachTeamFieldNumber = 23;
  inline ::DOTA_GC_TEAM coach_team() const;
  inline void set_coach_team(::DOTA_GC_TEAM value);

  // optional uint32 nexon_pc_bang_no = 24;
  inline bool has_nexon_pc_bang_no() const;
  inline void clear_nexon_pc_bang_no();
  static const int kNexonPcBangNoFieldNumber = 24;
  inline ::google::protobuf::uint32 nexon_pc_bang_no() const;
  inline void set_nexon_pc_bang_no(::google::protobuf::uint32 value);

  // optional string nexon_pc_bang_name = 25;
  inline bool has_nexon_pc_bang_name() const;
  inline void clear_nexon_pc_bang_name();
  static const int kNexonPcBangNameFieldNumber = 25;
  inline const ::std::string& nexon_pc_bang_name() const;
  inline void set_nexon_pc_bang_name(const ::std::string& value);
  inline void set_nexon_pc_bang_name(const char* value);
  inline void set_nexon_pc_bang_name(const char* value, size_t size);
  inline ::std::string* mutable_nexon_pc_bang_name();
  inline ::std::string* release_nexon_pc_bang_name();
  inline void set_allocated_nexon_pc_bang_name(::std::string* nexon_pc_bang_name);

  // repeated .CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
  inline int xp_bonuses_size() const;
  inline void clear_xp_bonuses();
  static const int kXpBonusesFieldNumber = 27;
  inline const ::CDOTALobbyMember_CDOTALobbyMemberXPBonus& xp_bonuses(int index) const;
  inline ::CDOTALobbyMember_CDOTALobbyMemberXPBonus* mutable_xp_bonuses(int index);
  inline ::CDOTALobbyMember_CDOTALobbyMemberXPBonus* add_xp_bonuses();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember_CDOTALobbyMemberXPBonus >&
      xp_bonuses() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember_CDOTALobbyMemberXPBonus >*
      mutable_xp_bonuses();

  // optional sint32 rank_change = 29;
  inline bool has_rank_change() const;
  inline void clear_rank_change();
  static const int kRankChangeFieldNumber = 29;
  inline ::google::protobuf::int32 rank_change() const;
  inline void set_rank_change(::google::protobuf::int32 value);

  // optional bool cameraman = 30;
  inline bool has_cameraman() const;
  inline void clear_cameraman();
  static const int kCameramanFieldNumber = 30;
  inline bool cameraman() const;
  inline void set_cameraman(bool value);

  // repeated uint32 custom_game_product_ids = 31;
  inline int custom_game_product_ids_size() const;
  inline void clear_custom_game_product_ids();
  static const int kCustomGameProductIdsFieldNumber = 31;
  inline ::google::protobuf::uint32 custom_game_product_ids(int index) const;
  inline void set_custom_game_product_ids(int index, ::google::protobuf::uint32 value);
  inline void add_custom_game_product_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      custom_game_product_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_custom_game_product_ids();

  // @@protoc_insertion_point(class_scope:CDOTALobbyMember)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_slot();
  inline void clear_has_slot();
  inline void set_has_party_id();
  inline void clear_has_party_id();
  inline void set_has_meta_level();
  inline void clear_has_meta_level();
  inline void set_has_meta_xp();
  inline void clear_has_meta_xp();
  inline void set_has_meta_xp_awarded();
  inline void clear_has_meta_xp_awarded();
  inline void set_has_leaver_status();
  inline void clear_has_leaver_status();
  inline void set_has_leaver_actions();
  inline void clear_has_leaver_actions();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_prize_def_index();
  inline void clear_has_prize_def_index();
  inline void set_has_partner_account_type();
  inline void clear_has_partner_account_type();
  inline void set_has_coach_team();
  inline void clear_has_coach_team();
  inline void set_has_nexon_pc_bang_no();
  inline void clear_has_nexon_pc_bang_no();
  inline void set_has_nexon_pc_bang_name();
  inline void clear_has_nexon_pc_bang_name();
  inline void set_has_rank_change();
  inline void clear_has_rank_change();
  inline void set_has_cameraman();
  inline void clear_has_cameraman();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 hero_id_;
  int team_;
  ::std::string* name_;
  ::google::protobuf::uint64 party_id_;
  ::google::protobuf::uint32 slot_;
  ::google::protobuf::uint32 meta_level_;
  ::google::protobuf::uint32 meta_xp_;
  ::google::protobuf::uint32 meta_xp_awarded_;
  int leaver_status_;
  ::google::protobuf::uint32 leaver_actions_;
  ::google::protobuf::uint32 channel_;
  ::google::protobuf::uint32 prize_def_index_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > disabled_hero_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > enabled_hero_id_;
  int partner_account_type_;
  int coach_team_;
  ::std::string* nexon_pc_bang_name_;
  ::google::protobuf::uint32 nexon_pc_bang_no_;
  ::google::protobuf::int32 rank_change_;
  ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember_CDOTALobbyMemberXPBonus > xp_bonuses_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > custom_game_product_ids_;
  bool cameraman_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CDOTALobbyMember* default_instance_;
};
// -------------------------------------------------------------------

class CLobbyTeamDetails : public ::google::protobuf::Message {
 public:
  CLobbyTeamDetails();
  virtual ~CLobbyTeamDetails();

  CLobbyTeamDetails(const CLobbyTeamDetails& from);

  inline CLobbyTeamDetails& operator=(const CLobbyTeamDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CLobbyTeamDetails& default_instance();

  void Swap(CLobbyTeamDetails* other);

  // implements Message ----------------------------------------------

  CLobbyTeamDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CLobbyTeamDetails& from);
  void MergeFrom(const CLobbyTeamDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string team_name = 1;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 1;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const char* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  inline void set_allocated_team_name(::std::string* team_name);

  // optional string team_tag = 3;
  inline bool has_team_tag() const;
  inline void clear_team_tag();
  static const int kTeamTagFieldNumber = 3;
  inline const ::std::string& team_tag() const;
  inline void set_team_tag(const ::std::string& value);
  inline void set_team_tag(const char* value);
  inline void set_team_tag(const char* value, size_t size);
  inline ::std::string* mutable_team_tag();
  inline ::std::string* release_team_tag();
  inline void set_allocated_team_tag(::std::string* team_tag);

  // optional uint32 team_id = 4;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 4;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // optional uint64 team_logo = 5;
  inline bool has_team_logo() const;
  inline void clear_team_logo();
  static const int kTeamLogoFieldNumber = 5;
  inline ::google::protobuf::uint64 team_logo() const;
  inline void set_team_logo(::google::protobuf::uint64 value);

  // optional uint64 team_base_logo = 6;
  inline bool has_team_base_logo() const;
  inline void clear_team_base_logo();
  static const int kTeamBaseLogoFieldNumber = 6;
  inline ::google::protobuf::uint64 team_base_logo() const;
  inline void set_team_base_logo(::google::protobuf::uint64 value);

  // optional uint64 team_banner_logo = 7;
  inline bool has_team_banner_logo() const;
  inline void clear_team_banner_logo();
  static const int kTeamBannerLogoFieldNumber = 7;
  inline ::google::protobuf::uint64 team_banner_logo() const;
  inline void set_team_banner_logo(::google::protobuf::uint64 value);

  // optional bool team_complete = 8;
  inline bool has_team_complete() const;
  inline void clear_team_complete();
  static const int kTeamCompleteFieldNumber = 8;
  inline bool team_complete() const;
  inline void set_team_complete(bool value);

  // optional string guild_name = 9;
  inline bool has_guild_name() const;
  inline void clear_guild_name();
  static const int kGuildNameFieldNumber = 9;
  inline const ::std::string& guild_name() const;
  inline void set_guild_name(const ::std::string& value);
  inline void set_guild_name(const char* value);
  inline void set_guild_name(const char* value, size_t size);
  inline ::std::string* mutable_guild_name();
  inline ::std::string* release_guild_name();
  inline void set_allocated_guild_name(::std::string* guild_name);

  // optional string guild_tag = 10;
  inline bool has_guild_tag() const;
  inline void clear_guild_tag();
  static const int kGuildTagFieldNumber = 10;
  inline const ::std::string& guild_tag() const;
  inline void set_guild_tag(const ::std::string& value);
  inline void set_guild_tag(const char* value);
  inline void set_guild_tag(const char* value, size_t size);
  inline ::std::string* mutable_guild_tag();
  inline ::std::string* release_guild_tag();
  inline void set_allocated_guild_tag(::std::string* guild_tag);

  // optional uint32 guild_id = 11;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 11;
  inline ::google::protobuf::uint32 guild_id() const;
  inline void set_guild_id(::google::protobuf::uint32 value);

  // optional uint64 guild_logo = 12;
  inline bool has_guild_logo() const;
  inline void clear_guild_logo();
  static const int kGuildLogoFieldNumber = 12;
  inline ::google::protobuf::uint64 guild_logo() const;
  inline void set_guild_logo(::google::protobuf::uint64 value);

  // optional uint64 guild_base_logo = 13;
  inline bool has_guild_base_logo() const;
  inline void clear_guild_base_logo();
  static const int kGuildBaseLogoFieldNumber = 13;
  inline ::google::protobuf::uint64 guild_base_logo() const;
  inline void set_guild_base_logo(::google::protobuf::uint64 value);

  // optional uint64 guild_banner_logo = 14;
  inline bool has_guild_banner_logo() const;
  inline void clear_guild_banner_logo();
  static const int kGuildBannerLogoFieldNumber = 14;
  inline ::google::protobuf::uint64 guild_banner_logo() const;
  inline void set_guild_banner_logo(::google::protobuf::uint64 value);

  // optional uint32 rank = 15;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 15;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional sint32 rank_change = 16;
  inline bool has_rank_change() const;
  inline void clear_rank_change();
  static const int kRankChangeFieldNumber = 16;
  inline ::google::protobuf::int32 rank_change() const;
  inline void set_rank_change(::google::protobuf::int32 value);

  // optional bool is_home_team = 17;
  inline bool has_is_home_team() const;
  inline void clear_is_home_team();
  static const int kIsHomeTeamFieldNumber = 17;
  inline bool is_home_team() const;
  inline void set_is_home_team(bool value);

  // @@protoc_insertion_point(class_scope:CLobbyTeamDetails)
 private:
  inline void set_has_team_name();
  inline void clear_has_team_name();
  inline void set_has_team_tag();
  inline void clear_has_team_tag();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_team_logo();
  inline void clear_has_team_logo();
  inline void set_has_team_base_logo();
  inline void clear_has_team_base_logo();
  inline void set_has_team_banner_logo();
  inline void clear_has_team_banner_logo();
  inline void set_has_team_complete();
  inline void clear_has_team_complete();
  inline void set_has_guild_name();
  inline void clear_has_guild_name();
  inline void set_has_guild_tag();
  inline void clear_has_guild_tag();
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_guild_logo();
  inline void clear_has_guild_logo();
  inline void set_has_guild_base_logo();
  inline void clear_has_guild_base_logo();
  inline void set_has_guild_banner_logo();
  inline void clear_has_guild_banner_logo();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_rank_change();
  inline void clear_has_rank_change();
  inline void set_has_is_home_team();
  inline void clear_has_is_home_team();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* team_name_;
  ::std::string* team_tag_;
  ::google::protobuf::uint64 team_logo_;
  ::google::protobuf::uint64 team_base_logo_;
  ::google::protobuf::uint64 team_banner_logo_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 guild_id_;
  ::std::string* guild_name_;
  ::std::string* guild_tag_;
  ::google::protobuf::uint64 guild_logo_;
  ::google::protobuf::uint64 guild_base_logo_;
  bool team_complete_;
  bool is_home_team_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint64 guild_banner_logo_;
  ::google::protobuf::int32 rank_change_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CLobbyTeamDetails* default_instance_;
};
// -------------------------------------------------------------------

class CLobbyTimedRewardDetails : public ::google::protobuf::Message {
 public:
  CLobbyTimedRewardDetails();
  virtual ~CLobbyTimedRewardDetails();

  CLobbyTimedRewardDetails(const CLobbyTimedRewardDetails& from);

  inline CLobbyTimedRewardDetails& operator=(const CLobbyTimedRewardDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CLobbyTimedRewardDetails& default_instance();

  void Swap(CLobbyTimedRewardDetails* other);

  // implements Message ----------------------------------------------

  CLobbyTimedRewardDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CLobbyTimedRewardDetails& from);
  void MergeFrom(const CLobbyTimedRewardDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 item_def_index = 2;
  inline bool has_item_def_index() const;
  inline void clear_item_def_index();
  static const int kItemDefIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 item_def_index() const;
  inline void set_item_def_index(::google::protobuf::uint32 value);

  // optional bool is_supply_crate = 3;
  inline bool has_is_supply_crate() const;
  inline void clear_is_supply_crate();
  static const int kIsSupplyCrateFieldNumber = 3;
  inline bool is_supply_crate() const;
  inline void set_is_supply_crate(bool value);

  // optional bool is_timed_drop = 4;
  inline bool has_is_timed_drop() const;
  inline void clear_is_timed_drop();
  static const int kIsTimedDropFieldNumber = 4;
  inline bool is_timed_drop() const;
  inline void set_is_timed_drop(bool value);

  // optional uint32 account_id = 5;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 5;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 origin = 6;
  inline bool has_origin() const;
  inline void clear_origin();
  static const int kOriginFieldNumber = 6;
  inline ::google::protobuf::uint32 origin() const;
  inline void set_origin(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CLobbyTimedRewardDetails)
 private:
  inline void set_has_item_def_index();
  inline void clear_has_item_def_index();
  inline void set_has_is_supply_crate();
  inline void clear_has_is_supply_crate();
  inline void set_has_is_timed_drop();
  inline void clear_has_is_timed_drop();
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_origin();
  inline void clear_has_origin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 item_def_index_;
  bool is_supply_crate_;
  bool is_timed_drop_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 origin_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CLobbyTimedRewardDetails* default_instance_;
};
// -------------------------------------------------------------------

class CLobbyBroadcastChannelInfo : public ::google::protobuf::Message {
 public:
  CLobbyBroadcastChannelInfo();
  virtual ~CLobbyBroadcastChannelInfo();

  CLobbyBroadcastChannelInfo(const CLobbyBroadcastChannelInfo& from);

  inline CLobbyBroadcastChannelInfo& operator=(const CLobbyBroadcastChannelInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CLobbyBroadcastChannelInfo& default_instance();

  void Swap(CLobbyBroadcastChannelInfo* other);

  // implements Message ----------------------------------------------

  CLobbyBroadcastChannelInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CLobbyBroadcastChannelInfo& from);
  void MergeFrom(const CLobbyBroadcastChannelInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 channel_id = 1;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);

  // optional string country_code = 2;
  inline bool has_country_code() const;
  inline void clear_country_code();
  static const int kCountryCodeFieldNumber = 2;
  inline const ::std::string& country_code() const;
  inline void set_country_code(const ::std::string& value);
  inline void set_country_code(const char* value);
  inline void set_country_code(const char* value, size_t size);
  inline ::std::string* mutable_country_code();
  inline ::std::string* release_country_code();
  inline void set_allocated_country_code(::std::string* country_code);

  // optional string description = 3;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 3;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional string language_code = 4;
  inline bool has_language_code() const;
  inline void clear_language_code();
  static const int kLanguageCodeFieldNumber = 4;
  inline const ::std::string& language_code() const;
  inline void set_language_code(const ::std::string& value);
  inline void set_language_code(const char* value);
  inline void set_language_code(const char* value, size_t size);
  inline ::std::string* mutable_language_code();
  inline ::std::string* release_language_code();
  inline void set_allocated_language_code(::std::string* language_code);

  // @@protoc_insertion_point(class_scope:CLobbyBroadcastChannelInfo)
 private:
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_country_code();
  inline void clear_has_country_code();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_language_code();
  inline void clear_has_language_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* country_code_;
  ::std::string* description_;
  ::std::string* language_code_;
  ::google::protobuf::uint32 channel_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CLobbyBroadcastChannelInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSODOTALobby_CExtraMsg : public ::google::protobuf::Message {
 public:
  CSODOTALobby_CExtraMsg();
  virtual ~CSODOTALobby_CExtraMsg();

  CSODOTALobby_CExtraMsg(const CSODOTALobby_CExtraMsg& from);

  inline CSODOTALobby_CExtraMsg& operator=(const CSODOTALobby_CExtraMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTALobby_CExtraMsg& default_instance();

  void Swap(CSODOTALobby_CExtraMsg* other);

  // implements Message ----------------------------------------------

  CSODOTALobby_CExtraMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTALobby_CExtraMsg& from);
  void MergeFrom(const CSODOTALobby_CExtraMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional bytes contents = 2;
  inline bool has_contents() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 2;
  inline const ::std::string& contents() const;
  inline void set_contents(const ::std::string& value);
  inline void set_contents(const char* value);
  inline void set_contents(const void* value, size_t size);
  inline ::std::string* mutable_contents();
  inline ::std::string* release_contents();
  inline void set_allocated_contents(::std::string* contents);

  // @@protoc_insertion_point(class_scope:CSODOTALobby.CExtraMsg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_contents();
  inline void clear_has_contents();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* contents_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CSODOTALobby_CExtraMsg* default_instance_;
};
// -------------------------------------------------------------------

class CSODOTALobby : public ::google::protobuf::Message {
 public:
  CSODOTALobby();
  virtual ~CSODOTALobby();

  CSODOTALobby(const CSODOTALobby& from);

  inline CSODOTALobby& operator=(const CSODOTALobby& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTALobby& default_instance();

  void Swap(CSODOTALobby* other);

  // implements Message ----------------------------------------------

  CSODOTALobby* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTALobby& from);
  void MergeFrom(const CSODOTALobby& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CSODOTALobby_CExtraMsg CExtraMsg;

  typedef CSODOTALobby_State State;
  static const State UI = CSODOTALobby_State_UI;
  static const State READYUP = CSODOTALobby_State_READYUP;
  static const State SERVERSETUP = CSODOTALobby_State_SERVERSETUP;
  static const State RUN = CSODOTALobby_State_RUN;
  static const State POSTGAME = CSODOTALobby_State_POSTGAME;
  static const State NOTREADY = CSODOTALobby_State_NOTREADY;
  static const State SERVERASSIGN = CSODOTALobby_State_SERVERASSIGN;
  static inline bool State_IsValid(int value) {
    return CSODOTALobby_State_IsValid(value);
  }
  static const State State_MIN =
    CSODOTALobby_State_State_MIN;
  static const State State_MAX =
    CSODOTALobby_State_State_MAX;
  static const int State_ARRAYSIZE =
    CSODOTALobby_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return CSODOTALobby_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return CSODOTALobby_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return CSODOTALobby_State_Parse(name, value);
  }

  typedef CSODOTALobby_LobbyType LobbyType;
  static const LobbyType INVALID = CSODOTALobby_LobbyType_INVALID;
  static const LobbyType CASUAL_MATCH = CSODOTALobby_LobbyType_CASUAL_MATCH;
  static const LobbyType PRACTICE = CSODOTALobby_LobbyType_PRACTICE;
  static const LobbyType TOURNAMENT = CSODOTALobby_LobbyType_TOURNAMENT;
  static const LobbyType COOP_BOT_MATCH = CSODOTALobby_LobbyType_COOP_BOT_MATCH;
  static const LobbyType LEGACY_TEAM_MATCH = CSODOTALobby_LobbyType_LEGACY_TEAM_MATCH;
  static const LobbyType LEGACY_SOLO_QUEUE_MATCH = CSODOTALobby_LobbyType_LEGACY_SOLO_QUEUE_MATCH;
  static const LobbyType COMPETITIVE_MATCH = CSODOTALobby_LobbyType_COMPETITIVE_MATCH;
  static const LobbyType CASUAL_1V1_MATCH = CSODOTALobby_LobbyType_CASUAL_1V1_MATCH;
  static const LobbyType WEEKEND_TOURNEY = CSODOTALobby_LobbyType_WEEKEND_TOURNEY;
  static const LobbyType LOCAL_BOT_MATCH = CSODOTALobby_LobbyType_LOCAL_BOT_MATCH;
  static inline bool LobbyType_IsValid(int value) {
    return CSODOTALobby_LobbyType_IsValid(value);
  }
  static const LobbyType LobbyType_MIN =
    CSODOTALobby_LobbyType_LobbyType_MIN;
  static const LobbyType LobbyType_MAX =
    CSODOTALobby_LobbyType_LobbyType_MAX;
  static const int LobbyType_ARRAYSIZE =
    CSODOTALobby_LobbyType_LobbyType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LobbyType_descriptor() {
    return CSODOTALobby_LobbyType_descriptor();
  }
  static inline const ::std::string& LobbyType_Name(LobbyType value) {
    return CSODOTALobby_LobbyType_Name(value);
  }
  static inline bool LobbyType_Parse(const ::std::string& name,
      LobbyType* value) {
    return CSODOTALobby_LobbyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 lobby_id = 1;
  inline bool has_lobby_id() const;
  inline void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 1;
  inline ::google::protobuf::uint64 lobby_id() const;
  inline void set_lobby_id(::google::protobuf::uint64 value);

  // repeated .CDOTALobbyMember members = 2;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 2;
  inline const ::CDOTALobbyMember& members(int index) const;
  inline ::CDOTALobbyMember* mutable_members(int index);
  inline ::CDOTALobbyMember* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >*
      mutable_members();

  // repeated .CDOTALobbyMember left_members = 7;
  inline int left_members_size() const;
  inline void clear_left_members();
  static const int kLeftMembersFieldNumber = 7;
  inline const ::CDOTALobbyMember& left_members(int index) const;
  inline ::CDOTALobbyMember* mutable_left_members(int index);
  inline ::CDOTALobbyMember* add_left_members();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >&
      left_members() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >*
      mutable_left_members();

  // optional fixed64 leader_id = 11;
  inline bool has_leader_id() const;
  inline void clear_leader_id();
  static const int kLeaderIdFieldNumber = 11;
  inline ::google::protobuf::uint64 leader_id() const;
  inline void set_leader_id(::google::protobuf::uint64 value);

  // optional fixed64 server_id = 6 [default = 0];
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 6;
  inline ::google::protobuf::uint64 server_id() const;
  inline void set_server_id(::google::protobuf::uint64 value);

  // optional uint32 game_mode = 3;
  inline bool has_game_mode() const;
  inline void clear_game_mode();
  static const int kGameModeFieldNumber = 3;
  inline ::google::protobuf::uint32 game_mode() const;
  inline void set_game_mode(::google::protobuf::uint32 value);

  // repeated fixed64 pending_invites = 10;
  inline int pending_invites_size() const;
  inline void clear_pending_invites();
  static const int kPendingInvitesFieldNumber = 10;
  inline ::google::protobuf::uint64 pending_invites(int index) const;
  inline void set_pending_invites(int index, ::google::protobuf::uint64 value);
  inline void add_pending_invites(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      pending_invites() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_pending_invites();

  // optional .CSODOTALobby.State state = 4 [default = UI];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ::CSODOTALobby_State state() const;
  inline void set_state(::CSODOTALobby_State value);

  // optional string connect = 5;
  inline bool has_connect() const;
  inline void clear_connect();
  static const int kConnectFieldNumber = 5;
  inline const ::std::string& connect() const;
  inline void set_connect(const ::std::string& value);
  inline void set_connect(const char* value);
  inline void set_connect(const char* value, size_t size);
  inline ::std::string* mutable_connect();
  inline ::std::string* release_connect();
  inline void set_allocated_connect(::std::string* connect);

  // optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
  inline bool has_lobby_type() const;
  inline void clear_lobby_type();
  static const int kLobbyTypeFieldNumber = 12;
  inline ::CSODOTALobby_LobbyType lobby_type() const;
  inline void set_lobby_type(::CSODOTALobby_LobbyType value);

  // optional bool allow_cheats = 13;
  inline bool has_allow_cheats() const;
  inline void clear_allow_cheats();
  static const int kAllowCheatsFieldNumber = 13;
  inline bool allow_cheats() const;
  inline void set_allow_cheats(bool value);

  // optional bool fill_with_bots = 14;
  inline bool has_fill_with_bots() const;
  inline void clear_fill_with_bots();
  static const int kFillWithBotsFieldNumber = 14;
  inline bool fill_with_bots() const;
  inline void set_fill_with_bots(bool value);

  // optional bool intro_mode = 15;
  inline bool has_intro_mode() const;
  inline void clear_intro_mode();
  static const int kIntroModeFieldNumber = 15;
  inline bool intro_mode() const;
  inline void set_intro_mode(bool value);

  // optional string game_name = 16;
  inline bool has_game_name() const;
  inline void clear_game_name();
  static const int kGameNameFieldNumber = 16;
  inline const ::std::string& game_name() const;
  inline void set_game_name(const ::std::string& value);
  inline void set_game_name(const char* value);
  inline void set_game_name(const char* value, size_t size);
  inline ::std::string* mutable_game_name();
  inline ::std::string* release_game_name();
  inline void set_allocated_game_name(::std::string* game_name);

  // repeated .CLobbyTeamDetails team_details = 17;
  inline int team_details_size() const;
  inline void clear_team_details();
  static const int kTeamDetailsFieldNumber = 17;
  inline const ::CLobbyTeamDetails& team_details(int index) const;
  inline ::CLobbyTeamDetails* mutable_team_details(int index);
  inline ::CLobbyTeamDetails* add_team_details();
  inline const ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >&
      team_details() const;
  inline ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >*
      mutable_team_details();

  // optional uint32 tutorial_lesson = 18;
  inline bool has_tutorial_lesson() const;
  inline void clear_tutorial_lesson();
  static const int kTutorialLessonFieldNumber = 18;
  inline ::google::protobuf::uint32 tutorial_lesson() const;
  inline void set_tutorial_lesson(::google::protobuf::uint32 value);

  // optional uint32 tournament_id = 19;
  inline bool has_tournament_id() const;
  inline void clear_tournament_id();
  static const int kTournamentIdFieldNumber = 19;
  inline ::google::protobuf::uint32 tournament_id() const;
  inline void set_tournament_id(::google::protobuf::uint32 value);

  // optional uint32 tournament_game_id = 20;
  inline bool has_tournament_game_id() const;
  inline void clear_tournament_game_id();
  static const int kTournamentGameIdFieldNumber = 20;
  inline ::google::protobuf::uint32 tournament_game_id() const;
  inline void set_tournament_game_id(::google::protobuf::uint32 value);

  // optional uint32 server_region = 21 [default = 0];
  inline bool has_server_region() const;
  inline void clear_server_region();
  static const int kServerRegionFieldNumber = 21;
  inline ::google::protobuf::uint32 server_region() const;
  inline void set_server_region(::google::protobuf::uint32 value);

  // optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
  inline bool has_game_state() const;
  inline void clear_game_state();
  static const int kGameStateFieldNumber = 22;
  inline ::DOTA_GameState game_state() const;
  inline void set_game_state(::DOTA_GameState value);

  // optional uint32 num_spectators = 23;
  inline bool has_num_spectators() const;
  inline void clear_num_spectators();
  static const int kNumSpectatorsFieldNumber = 23;
  inline ::google::protobuf::uint32 num_spectators() const;
  inline void set_num_spectators(::google::protobuf::uint32 value);

  // optional uint32 matchgroup = 25;
  inline bool has_matchgroup() const;
  inline void clear_matchgroup();
  static const int kMatchgroupFieldNumber = 25;
  inline ::google::protobuf::uint32 matchgroup() const;
  inline void set_matchgroup(::google::protobuf::uint32 value);

  // optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
  inline bool has_cm_pick() const;
  inline void clear_cm_pick();
  static const int kCmPickFieldNumber = 28;
  inline ::DOTA_CM_PICK cm_pick() const;
  inline void set_cm_pick(::DOTA_CM_PICK value);

  // optional uint64 match_id = 30;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 30;
  inline ::google::protobuf::uint64 match_id() const;
  inline void set_match_id(::google::protobuf::uint64 value);

  // optional bool allow_spectating = 31 [default = true];
  inline bool has_allow_spectating() const;
  inline void clear_allow_spectating();
  static const int kAllowSpectatingFieldNumber = 31;
  inline bool allow_spectating() const;
  inline void set_allow_spectating(bool value);

  // optional .DOTABotDifficulty bot_difficulty = 36 [default = BOT_DIFFICULTY_HARD];
  inline bool has_bot_difficulty() const;
  inline void clear_bot_difficulty();
  static const int kBotDifficultyFieldNumber = 36;
  inline ::DOTABotDifficulty bot_difficulty() const;
  inline void set_bot_difficulty(::DOTABotDifficulty value);

  // optional .DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
  inline bool has_game_version() const;
  inline void clear_game_version();
  static const int kGameVersionFieldNumber = 37;
  inline ::DOTAGameVersion game_version() const;
  inline void set_game_version(::DOTAGameVersion value);

  // repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
  inline int timed_reward_details_size() const;
  inline void clear_timed_reward_details();
  static const int kTimedRewardDetailsFieldNumber = 38;
  inline const ::CLobbyTimedRewardDetails& timed_reward_details(int index) const;
  inline ::CLobbyTimedRewardDetails* mutable_timed_reward_details(int index);
  inline ::CLobbyTimedRewardDetails* add_timed_reward_details();
  inline const ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >&
      timed_reward_details() const;
  inline ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >*
      mutable_timed_reward_details();

  // optional string pass_key = 39;
  inline bool has_pass_key() const;
  inline void clear_pass_key();
  static const int kPassKeyFieldNumber = 39;
  inline const ::std::string& pass_key() const;
  inline void set_pass_key(const ::std::string& value);
  inline void set_pass_key(const char* value);
  inline void set_pass_key(const char* value, size_t size);
  inline ::std::string* mutable_pass_key();
  inline ::std::string* release_pass_key();
  inline void set_allocated_pass_key(::std::string* pass_key);

  // repeated .DOTABotDifficulty bot_slot_difficulty = 41;
  inline int bot_slot_difficulty_size() const;
  inline void clear_bot_slot_difficulty();
  static const int kBotSlotDifficultyFieldNumber = 41;
  inline ::DOTABotDifficulty bot_slot_difficulty(int index) const;
  inline void set_bot_slot_difficulty(int index, ::DOTABotDifficulty value);
  inline void add_bot_slot_difficulty(::DOTABotDifficulty value);
  inline const ::google::protobuf::RepeatedField<int>& bot_slot_difficulty() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_bot_slot_difficulty();

  // optional uint32 leagueid = 42;
  inline bool has_leagueid() const;
  inline void clear_leagueid();
  static const int kLeagueidFieldNumber = 42;
  inline ::google::protobuf::uint32 leagueid() const;
  inline void set_leagueid(::google::protobuf::uint32 value);

  // optional uint32 penalty_level_radiant = 43 [default = 0];
  inline bool has_penalty_level_radiant() const;
  inline void clear_penalty_level_radiant();
  static const int kPenaltyLevelRadiantFieldNumber = 43;
  inline ::google::protobuf::uint32 penalty_level_radiant() const;
  inline void set_penalty_level_radiant(::google::protobuf::uint32 value);

  // optional uint32 penalty_level_dire = 44 [default = 0];
  inline bool has_penalty_level_dire() const;
  inline void clear_penalty_level_dire();
  static const int kPenaltyLevelDireFieldNumber = 44;
  inline ::google::protobuf::uint32 penalty_level_dire() const;
  inline void set_penalty_level_dire(::google::protobuf::uint32 value);

  // optional uint32 load_game_id = 45;
  inline bool has_load_game_id() const;
  inline void clear_load_game_id();
  static const int kLoadGameIdFieldNumber = 45;
  inline ::google::protobuf::uint32 load_game_id() const;
  inline void set_load_game_id(::google::protobuf::uint32 value);

  // optional uint32 series_type = 46;
  inline bool has_series_type() const;
  inline void clear_series_type();
  static const int kSeriesTypeFieldNumber = 46;
  inline ::google::protobuf::uint32 series_type() const;
  inline void set_series_type(::google::protobuf::uint32 value);

  // optional uint32 radiant_series_wins = 47;
  inline bool has_radiant_series_wins() const;
  inline void clear_radiant_series_wins();
  static const int kRadiantSeriesWinsFieldNumber = 47;
  inline ::google::protobuf::uint32 radiant_series_wins() const;
  inline void set_radiant_series_wins(::google::protobuf::uint32 value);

  // optional uint32 dire_series_wins = 48;
  inline bool has_dire_series_wins() const;
  inline void clear_dire_series_wins();
  static const int kDireSeriesWinsFieldNumber = 48;
  inline ::google::protobuf::uint32 dire_series_wins() const;
  inline void set_dire_series_wins(::google::protobuf::uint32 value);

  // optional uint32 loot_generated = 49;
  inline bool has_loot_generated() const;
  inline void clear_loot_generated();
  static const int kLootGeneratedFieldNumber = 49;
  inline ::google::protobuf::uint32 loot_generated() const;
  inline void set_loot_generated(::google::protobuf::uint32 value);

  // optional uint32 loot_awarded = 50;
  inline bool has_loot_awarded() const;
  inline void clear_loot_awarded();
  static const int kLootAwardedFieldNumber = 50;
  inline ::google::protobuf::uint32 loot_awarded() const;
  inline void set_loot_awarded(::google::protobuf::uint32 value);

  // optional bool allchat = 51 [default = false];
  inline bool has_allchat() const;
  inline void clear_allchat();
  static const int kAllchatFieldNumber = 51;
  inline bool allchat() const;
  inline void set_allchat(bool value);

  // optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
  inline bool has_dota_tv_delay() const;
  inline void clear_dota_tv_delay();
  static const int kDotaTvDelayFieldNumber = 53;
  inline ::LobbyDotaTVDelay dota_tv_delay() const;
  inline void set_dota_tv_delay(::LobbyDotaTVDelay value);

  // optional string custom_game_mode = 54;
  inline bool has_custom_game_mode() const;
  inline void clear_custom_game_mode();
  static const int kCustomGameModeFieldNumber = 54;
  inline const ::std::string& custom_game_mode() const;
  inline void set_custom_game_mode(const ::std::string& value);
  inline void set_custom_game_mode(const char* value);
  inline void set_custom_game_mode(const char* value, size_t size);
  inline ::std::string* mutable_custom_game_mode();
  inline ::std::string* release_custom_game_mode();
  inline void set_allocated_custom_game_mode(::std::string* custom_game_mode);

  // optional string custom_map_name = 55;
  inline bool has_custom_map_name() const;
  inline void clear_custom_map_name();
  static const int kCustomMapNameFieldNumber = 55;
  inline const ::std::string& custom_map_name() const;
  inline void set_custom_map_name(const ::std::string& value);
  inline void set_custom_map_name(const char* value);
  inline void set_custom_map_name(const char* value, size_t size);
  inline ::std::string* mutable_custom_map_name();
  inline ::std::string* release_custom_map_name();
  inline void set_allocated_custom_map_name(::std::string* custom_map_name);

  // optional uint32 custom_difficulty = 56;
  inline bool has_custom_difficulty() const;
  inline void clear_custom_difficulty();
  static const int kCustomDifficultyFieldNumber = 56;
  inline ::google::protobuf::uint32 custom_difficulty() const;
  inline void set_custom_difficulty(::google::protobuf::uint32 value);

  // optional bool lan = 57;
  inline bool has_lan() const;
  inline void clear_lan();
  static const int kLanFieldNumber = 57;
  inline bool lan() const;
  inline void set_lan(bool value);

  // repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
  inline int broadcast_channel_info_size() const;
  inline void clear_broadcast_channel_info();
  static const int kBroadcastChannelInfoFieldNumber = 58;
  inline const ::CLobbyBroadcastChannelInfo& broadcast_channel_info(int index) const;
  inline ::CLobbyBroadcastChannelInfo* mutable_broadcast_channel_info(int index);
  inline ::CLobbyBroadcastChannelInfo* add_broadcast_channel_info();
  inline const ::google::protobuf::RepeatedPtrField< ::CLobbyBroadcastChannelInfo >&
      broadcast_channel_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::CLobbyBroadcastChannelInfo >*
      mutable_broadcast_channel_info();

  // optional uint32 first_leaver_accountid = 59;
  inline bool has_first_leaver_accountid() const;
  inline void clear_first_leaver_accountid();
  static const int kFirstLeaverAccountidFieldNumber = 59;
  inline ::google::protobuf::uint32 first_leaver_accountid() const;
  inline void set_first_leaver_accountid(::google::protobuf::uint32 value);

  // optional uint32 series_id = 60;
  inline bool has_series_id() const;
  inline void clear_series_id();
  static const int kSeriesIdFieldNumber = 60;
  inline ::google::protobuf::uint32 series_id() const;
  inline void set_series_id(::google::protobuf::uint32 value);

  // optional bool low_priority = 61;
  inline bool has_low_priority() const;
  inline void clear_low_priority();
  static const int kLowPriorityFieldNumber = 61;
  inline bool low_priority() const;
  inline void set_low_priority(bool value);

  // repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
  inline int extra_messages_size() const;
  inline void clear_extra_messages();
  static const int kExtraMessagesFieldNumber = 62;
  inline const ::CSODOTALobby_CExtraMsg& extra_messages(int index) const;
  inline ::CSODOTALobby_CExtraMsg* mutable_extra_messages(int index);
  inline ::CSODOTALobby_CExtraMsg* add_extra_messages();
  inline const ::google::protobuf::RepeatedPtrField< ::CSODOTALobby_CExtraMsg >&
      extra_messages() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSODOTALobby_CExtraMsg >*
      mutable_extra_messages();

  // optional .CDOTASaveGame save_game = 63;
  inline bool has_save_game() const;
  inline void clear_save_game();
  static const int kSaveGameFieldNumber = 63;
  inline const ::CDOTASaveGame& save_game() const;
  inline ::CDOTASaveGame* mutable_save_game();
  inline ::CDOTASaveGame* release_save_game();
  inline void set_allocated_save_game(::CDOTASaveGame* save_game);

  // optional bool first_blood_happened = 65;
  inline bool has_first_blood_happened() const;
  inline void clear_first_blood_happened();
  static const int kFirstBloodHappenedFieldNumber = 65;
  inline bool first_blood_happened() const;
  inline void set_first_blood_happened(bool value);

  // optional .EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
  inline bool has_match_outcome() const;
  inline void clear_match_outcome();
  static const int kMatchOutcomeFieldNumber = 70;
  inline ::EMatchOutcome match_outcome() const;
  inline void set_match_outcome(::EMatchOutcome value);

  // optional bool mass_disconnect = 67;
  inline bool has_mass_disconnect() const;
  inline void clear_mass_disconnect();
  static const int kMassDisconnectFieldNumber = 67;
  inline bool mass_disconnect() const;
  inline void set_mass_disconnect(bool value);

  // optional uint64 custom_game_id = 68;
  inline bool has_custom_game_id() const;
  inline void clear_custom_game_id();
  static const int kCustomGameIdFieldNumber = 68;
  inline ::google::protobuf::uint64 custom_game_id() const;
  inline void set_custom_game_id(::google::protobuf::uint64 value);

  // repeated .EEvent active_ingame_events = 69;
  inline int active_ingame_events_size() const;
  inline void clear_active_ingame_events();
  static const int kActiveIngameEventsFieldNumber = 69;
  inline ::EEvent active_ingame_events(int index) const;
  inline void set_active_ingame_events(int index, ::EEvent value);
  inline void add_active_ingame_events(::EEvent value);
  inline const ::google::protobuf::RepeatedField<int>& active_ingame_events() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_active_ingame_events();

  // optional uint32 custom_min_players = 71;
  inline bool has_custom_min_players() const;
  inline void clear_custom_min_players();
  static const int kCustomMinPlayersFieldNumber = 71;
  inline ::google::protobuf::uint32 custom_min_players() const;
  inline void set_custom_min_players(::google::protobuf::uint32 value);

  // optional uint32 custom_max_players = 72;
  inline bool has_custom_max_players() const;
  inline void clear_custom_max_players();
  static const int kCustomMaxPlayersFieldNumber = 72;
  inline ::google::protobuf::uint32 custom_max_players() const;
  inline void set_custom_max_players(::google::protobuf::uint32 value);

  // optional .PartnerAccountType partner_type = 73 [default = PARTNER_NONE];
  inline bool has_partner_type() const;
  inline void clear_partner_type();
  static const int kPartnerTypeFieldNumber = 73;
  inline ::PartnerAccountType partner_type() const;
  inline void set_partner_type(::PartnerAccountType value);

  // optional uint32 lan_host_ping_to_server_region = 74;
  inline bool has_lan_host_ping_to_server_region() const;
  inline void clear_lan_host_ping_to_server_region();
  static const int kLanHostPingToServerRegionFieldNumber = 74;
  inline ::google::protobuf::uint32 lan_host_ping_to_server_region() const;
  inline void set_lan_host_ping_to_server_region(::google::protobuf::uint32 value);

  // optional .DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
  inline bool has_visibility() const;
  inline void clear_visibility();
  static const int kVisibilityFieldNumber = 75;
  inline ::DOTALobbyVisibility visibility() const;
  inline void set_visibility(::DOTALobbyVisibility value);

  // optional fixed64 custom_game_crc = 76;
  inline bool has_custom_game_crc() const;
  inline void clear_custom_game_crc();
  static const int kCustomGameCrcFieldNumber = 76;
  inline ::google::protobuf::uint64 custom_game_crc() const;
  inline void set_custom_game_crc(::google::protobuf::uint64 value);

  // optional bool custom_game_auto_created_lobby = 77;
  inline bool has_custom_game_auto_created_lobby() const;
  inline void clear_custom_game_auto_created_lobby();
  static const int kCustomGameAutoCreatedLobbyFieldNumber = 77;
  inline bool custom_game_auto_created_lobby() const;
  inline void set_custom_game_auto_created_lobby(bool value);

  // optional uint32 league_series_id = 78;
  inline bool has_league_series_id() const;
  inline void clear_league_series_id();
  static const int kLeagueSeriesIdFieldNumber = 78;
  inline ::google::protobuf::uint32 league_series_id() const;
  inline void set_league_series_id(::google::protobuf::uint32 value);

  // optional uint32 league_game_id = 79;
  inline bool has_league_game_id() const;
  inline void clear_league_game_id();
  static const int kLeagueGameIdFieldNumber = 79;
  inline ::google::protobuf::uint32 league_game_id() const;
  inline void set_league_game_id(::google::protobuf::uint32 value);

  // optional fixed32 custom_game_timestamp = 80;
  inline bool has_custom_game_timestamp() const;
  inline void clear_custom_game_timestamp();
  static const int kCustomGameTimestampFieldNumber = 80;
  inline ::google::protobuf::uint32 custom_game_timestamp() const;
  inline void set_custom_game_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSODOTALobby)
 private:
  inline void set_has_lobby_id();
  inline void clear_has_lobby_id();
  inline void set_has_leader_id();
  inline void clear_has_leader_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_game_mode();
  inline void clear_has_game_mode();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_connect();
  inline void clear_has_connect();
  inline void set_has_lobby_type();
  inline void clear_has_lobby_type();
  inline void set_has_allow_cheats();
  inline void clear_has_allow_cheats();
  inline void set_has_fill_with_bots();
  inline void clear_has_fill_with_bots();
  inline void set_has_intro_mode();
  inline void clear_has_intro_mode();
  inline void set_has_game_name();
  inline void clear_has_game_name();
  inline void set_has_tutorial_lesson();
  inline void clear_has_tutorial_lesson();
  inline void set_has_tournament_id();
  inline void clear_has_tournament_id();
  inline void set_has_tournament_game_id();
  inline void clear_has_tournament_game_id();
  inline void set_has_server_region();
  inline void clear_has_server_region();
  inline void set_has_game_state();
  inline void clear_has_game_state();
  inline void set_has_num_spectators();
  inline void clear_has_num_spectators();
  inline void set_has_matchgroup();
  inline void clear_has_matchgroup();
  inline void set_has_cm_pick();
  inline void clear_has_cm_pick();
  inline void set_has_match_id();
  inline void clear_has_match_id();
  inline void set_has_allow_spectating();
  inline void clear_has_allow_spectating();
  inline void set_has_bot_difficulty();
  inline void clear_has_bot_difficulty();
  inline void set_has_game_version();
  inline void clear_has_game_version();
  inline void set_has_pass_key();
  inline void clear_has_pass_key();
  inline void set_has_leagueid();
  inline void clear_has_leagueid();
  inline void set_has_penalty_level_radiant();
  inline void clear_has_penalty_level_radiant();
  inline void set_has_penalty_level_dire();
  inline void clear_has_penalty_level_dire();
  inline void set_has_load_game_id();
  inline void clear_has_load_game_id();
  inline void set_has_series_type();
  inline void clear_has_series_type();
  inline void set_has_radiant_series_wins();
  inline void clear_has_radiant_series_wins();
  inline void set_has_dire_series_wins();
  inline void clear_has_dire_series_wins();
  inline void set_has_loot_generated();
  inline void clear_has_loot_generated();
  inline void set_has_loot_awarded();
  inline void clear_has_loot_awarded();
  inline void set_has_allchat();
  inline void clear_has_allchat();
  inline void set_has_dota_tv_delay();
  inline void clear_has_dota_tv_delay();
  inline void set_has_custom_game_mode();
  inline void clear_has_custom_game_mode();
  inline void set_has_custom_map_name();
  inline void clear_has_custom_map_name();
  inline void set_has_custom_difficulty();
  inline void clear_has_custom_difficulty();
  inline void set_has_lan();
  inline void clear_has_lan();
  inline void set_has_first_leaver_accountid();
  inline void clear_has_first_leaver_accountid();
  inline void set_has_series_id();
  inline void clear_has_series_id();
  inline void set_has_low_priority();
  inline void clear_has_low_priority();
  inline void set_has_save_game();
  inline void clear_has_save_game();
  inline void set_has_first_blood_happened();
  inline void clear_has_first_blood_happened();
  inline void set_has_match_outcome();
  inline void clear_has_match_outcome();
  inline void set_has_mass_disconnect();
  inline void clear_has_mass_disconnect();
  inline void set_has_custom_game_id();
  inline void clear_has_custom_game_id();
  inline void set_has_custom_min_players();
  inline void clear_has_custom_min_players();
  inline void set_has_custom_max_players();
  inline void clear_has_custom_max_players();
  inline void set_has_partner_type();
  inline void clear_has_partner_type();
  inline void set_has_lan_host_ping_to_server_region();
  inline void clear_has_lan_host_ping_to_server_region();
  inline void set_has_visibility();
  inline void clear_has_visibility();
  inline void set_has_custom_game_crc();
  inline void clear_has_custom_game_crc();
  inline void set_has_custom_game_auto_created_lobby();
  inline void clear_has_custom_game_auto_created_lobby();
  inline void set_has_league_series_id();
  inline void clear_has_league_series_id();
  inline void set_has_league_game_id();
  inline void clear_has_league_game_id();
  inline void set_has_custom_game_timestamp();
  inline void clear_has_custom_game_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[3];
  mutable int _cached_size_;
  ::google::protobuf::uint64 lobby_id_;
  ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember > members_;
  ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember > left_members_;
  ::google::protobuf::uint64 leader_id_;
  ::google::protobuf::uint64 server_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > pending_invites_;
  ::google::protobuf::uint32 game_mode_;
  int state_;
  ::std::string* connect_;
  ::std::string* game_name_;
  int lobby_type_;
  bool allow_cheats_;
  bool fill_with_bots_;
  bool intro_mode_;
  bool allow_spectating_;
  ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails > team_details_;
  ::google::protobuf::uint32 tutorial_lesson_;
  ::google::protobuf::uint32 tournament_id_;
  ::google::protobuf::uint32 tournament_game_id_;
  ::google::protobuf::uint32 server_region_;
  int game_state_;
  ::google::protobuf::uint32 num_spectators_;
  ::google::protobuf::uint32 matchgroup_;
  int cm_pick_;
  ::google::protobuf::uint64 match_id_;
  int bot_difficulty_;
  int game_version_;
  ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails > timed_reward_details_;
  ::std::string* pass_key_;
  ::google::protobuf::RepeatedField<int> bot_slot_difficulty_;
  ::google::protobuf::uint32 leagueid_;
  ::google::protobuf::uint32 penalty_level_radiant_;
  ::google::protobuf::uint32 penalty_level_dire_;
  ::google::protobuf::uint32 load_game_id_;
  ::google::protobuf::uint32 series_type_;
  ::google::protobuf::uint32 radiant_series_wins_;
  ::google::protobuf::uint32 dire_series_wins_;
  ::google::protobuf::uint32 loot_generated_;
  ::google::protobuf::uint32 loot_awarded_;
  int dota_tv_delay_;
  ::std::string* custom_game_mode_;
  ::std::string* custom_map_name_;
  ::google::protobuf::RepeatedPtrField< ::CLobbyBroadcastChannelInfo > broadcast_channel_info_;
  ::google::protobuf::uint32 custom_difficulty_;
  bool allchat_;
  bool lan_;
  bool low_priority_;
  bool first_blood_happened_;
  ::google::protobuf::uint32 first_leaver_accountid_;
  ::google::protobuf::uint32 series_id_;
  ::google::protobuf::RepeatedPtrField< ::CSODOTALobby_CExtraMsg > extra_messages_;
  ::CDOTASaveGame* save_game_;
  ::google::protobuf::uint64 custom_game_id_;
  int match_outcome_;
  ::google::protobuf::uint32 custom_min_players_;
  ::google::protobuf::RepeatedField<int> active_ingame_events_;
  ::google::protobuf::uint32 custom_max_players_;
  bool mass_disconnect_;
  bool custom_game_auto_created_lobby_;
  int partner_type_;
  ::google::protobuf::uint32 lan_host_ping_to_server_region_;
  ::google::protobuf::uint64 custom_game_crc_;
  int visibility_;
  ::google::protobuf::uint32 league_series_id_;
  ::google::protobuf::uint32 league_game_id_;
  ::google::protobuf::uint32 custom_game_timestamp_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CSODOTALobby* default_instance_;
};
// -------------------------------------------------------------------

class CMsgLobbyEventPoints_AccountPoints : public ::google::protobuf::Message {
 public:
  CMsgLobbyEventPoints_AccountPoints();
  virtual ~CMsgLobbyEventPoints_AccountPoints();

  CMsgLobbyEventPoints_AccountPoints(const CMsgLobbyEventPoints_AccountPoints& from);

  inline CMsgLobbyEventPoints_AccountPoints& operator=(const CMsgLobbyEventPoints_AccountPoints& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgLobbyEventPoints_AccountPoints& default_instance();

  void Swap(CMsgLobbyEventPoints_AccountPoints* other);

  // implements Message ----------------------------------------------

  CMsgLobbyEventPoints_AccountPoints* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgLobbyEventPoints_AccountPoints& from);
  void MergeFrom(const CMsgLobbyEventPoints_AccountPoints& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 normal_points = 2;
  inline bool has_normal_points() const;
  inline void clear_normal_points();
  static const int kNormalPointsFieldNumber = 2;
  inline ::google::protobuf::uint32 normal_points() const;
  inline void set_normal_points(::google::protobuf::uint32 value);

  // optional uint32 premium_points = 3;
  inline bool has_premium_points() const;
  inline void clear_premium_points();
  static const int kPremiumPointsFieldNumber = 3;
  inline ::google::protobuf::uint32 premium_points() const;
  inline void set_premium_points(::google::protobuf::uint32 value);

  // optional bool owned = 4;
  inline bool has_owned() const;
  inline void clear_owned();
  static const int kOwnedFieldNumber = 4;
  inline bool owned() const;
  inline void set_owned(bool value);

  // optional uint32 favorite_team = 5;
  inline bool has_favorite_team() const;
  inline void clear_favorite_team();
  static const int kFavoriteTeamFieldNumber = 5;
  inline ::google::protobuf::uint32 favorite_team() const;
  inline void set_favorite_team(::google::protobuf::uint32 value);

  // optional uint32 favorite_team_level = 6;
  inline bool has_favorite_team_level() const;
  inline void clear_favorite_team_level();
  static const int kFavoriteTeamLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 favorite_team_level() const;
  inline void set_favorite_team_level(::google::protobuf::uint32 value);

  // optional uint32 points_held = 7;
  inline bool has_points_held() const;
  inline void clear_points_held();
  static const int kPointsHeldFieldNumber = 7;
  inline ::google::protobuf::uint32 points_held() const;
  inline void set_points_held(::google::protobuf::uint32 value);

  // optional uint32 premium_points_held = 8;
  inline bool has_premium_points_held() const;
  inline void clear_premium_points_held();
  static const int kPremiumPointsHeldFieldNumber = 8;
  inline ::google::protobuf::uint32 premium_points_held() const;
  inline void set_premium_points_held(::google::protobuf::uint32 value);

  // optional uint32 favorite_team_foil_level = 9;
  inline bool has_favorite_team_foil_level() const;
  inline void clear_favorite_team_foil_level();
  static const int kFavoriteTeamFoilLevelFieldNumber = 9;
  inline ::google::protobuf::uint32 favorite_team_foil_level() const;
  inline void set_favorite_team_foil_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgLobbyEventPoints.AccountPoints)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_normal_points();
  inline void clear_has_normal_points();
  inline void set_has_premium_points();
  inline void clear_has_premium_points();
  inline void set_has_owned();
  inline void clear_has_owned();
  inline void set_has_favorite_team();
  inline void clear_has_favorite_team();
  inline void set_has_favorite_team_level();
  inline void clear_has_favorite_team_level();
  inline void set_has_points_held();
  inline void clear_has_points_held();
  inline void set_has_premium_points_held();
  inline void clear_has_premium_points_held();
  inline void set_has_favorite_team_foil_level();
  inline void clear_has_favorite_team_foil_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 normal_points_;
  ::google::protobuf::uint32 premium_points_;
  bool owned_;
  ::google::protobuf::uint32 favorite_team_;
  ::google::protobuf::uint32 favorite_team_level_;
  ::google::protobuf::uint32 points_held_;
  ::google::protobuf::uint32 premium_points_held_;
  ::google::protobuf::uint32 favorite_team_foil_level_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgLobbyEventPoints_AccountPoints* default_instance_;
};
// -------------------------------------------------------------------

class CMsgLobbyEventPoints : public ::google::protobuf::Message {
 public:
  CMsgLobbyEventPoints();
  virtual ~CMsgLobbyEventPoints();

  CMsgLobbyEventPoints(const CMsgLobbyEventPoints& from);

  inline CMsgLobbyEventPoints& operator=(const CMsgLobbyEventPoints& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgLobbyEventPoints& default_instance();

  void Swap(CMsgLobbyEventPoints* other);

  // implements Message ----------------------------------------------

  CMsgLobbyEventPoints* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgLobbyEventPoints& from);
  void MergeFrom(const CMsgLobbyEventPoints& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgLobbyEventPoints_AccountPoints AccountPoints;

  // accessors -------------------------------------------------------

  // optional uint32 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint32 event_id() const;
  inline void set_event_id(::google::protobuf::uint32 value);

  // repeated .CMsgLobbyEventPoints.AccountPoints account_points = 2;
  inline int account_points_size() const;
  inline void clear_account_points();
  static const int kAccountPointsFieldNumber = 2;
  inline const ::CMsgLobbyEventPoints_AccountPoints& account_points(int index) const;
  inline ::CMsgLobbyEventPoints_AccountPoints* mutable_account_points(int index);
  inline ::CMsgLobbyEventPoints_AccountPoints* add_account_points();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgLobbyEventPoints_AccountPoints >&
      account_points() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgLobbyEventPoints_AccountPoints >*
      mutable_account_points();

  // @@protoc_insertion_point(class_scope:CMsgLobbyEventPoints)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgLobbyEventPoints_AccountPoints > account_points_;
  ::google::protobuf::uint32 event_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgLobbyEventPoints* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAGenericResult : public ::google::protobuf::Message {
 public:
  CMsgDOTAGenericResult();
  virtual ~CMsgDOTAGenericResult();

  CMsgDOTAGenericResult(const CMsgDOTAGenericResult& from);

  inline CMsgDOTAGenericResult& operator=(const CMsgDOTAGenericResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGenericResult& default_instance();

  void Swap(CMsgDOTAGenericResult* other);

  // implements Message ----------------------------------------------

  CMsgDOTAGenericResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAGenericResult& from);
  void MergeFrom(const CMsgDOTAGenericResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 eresult = 1 [default = 2];
  inline bool has_eresult() const;
  inline void clear_eresult();
  static const int kEresultFieldNumber = 1;
  inline ::google::protobuf::uint32 eresult() const;
  inline void set_eresult(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGenericResult)
 private:
  inline void set_has_eresult();
  inline void clear_has_eresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 eresult_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAGenericResult* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTABroadcastNotification : public ::google::protobuf::Message {
 public:
  CMsgDOTABroadcastNotification();
  virtual ~CMsgDOTABroadcastNotification();

  CMsgDOTABroadcastNotification(const CMsgDOTABroadcastNotification& from);

  inline CMsgDOTABroadcastNotification& operator=(const CMsgDOTABroadcastNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTABroadcastNotification& default_instance();

  void Swap(CMsgDOTABroadcastNotification* other);

  // implements Message ----------------------------------------------

  CMsgDOTABroadcastNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTABroadcastNotification& from);
  void MergeFrom(const CMsgDOTABroadcastNotification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:CMsgDOTABroadcastNotification)
 private:
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* message_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTABroadcastNotification* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAPCBangTimedReward : public ::google::protobuf::Message {
 public:
  CMsgDOTAPCBangTimedReward();
  virtual ~CMsgDOTAPCBangTimedReward();

  CMsgDOTAPCBangTimedReward(const CMsgDOTAPCBangTimedReward& from);

  inline CMsgDOTAPCBangTimedReward& operator=(const CMsgDOTAPCBangTimedReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAPCBangTimedReward& default_instance();

  void Swap(CMsgDOTAPCBangTimedReward* other);

  // implements Message ----------------------------------------------

  CMsgDOTAPCBangTimedReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAPCBangTimedReward& from);
  void MergeFrom(const CMsgDOTAPCBangTimedReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string persona = 1;
  inline bool has_persona() const;
  inline void clear_persona();
  static const int kPersonaFieldNumber = 1;
  inline const ::std::string& persona() const;
  inline void set_persona(const ::std::string& value);
  inline void set_persona(const char* value);
  inline void set_persona(const char* value, size_t size);
  inline ::std::string* mutable_persona();
  inline ::std::string* release_persona();
  inline void set_allocated_persona(::std::string* persona);

  // optional uint32 itemdef = 2;
  inline bool has_itemdef() const;
  inline void clear_itemdef();
  static const int kItemdefFieldNumber = 2;
  inline ::google::protobuf::uint32 itemdef() const;
  inline void set_itemdef(::google::protobuf::uint32 value);

  // optional string pcbangname = 3;
  inline bool has_pcbangname() const;
  inline void clear_pcbangname();
  static const int kPcbangnameFieldNumber = 3;
  inline const ::std::string& pcbangname() const;
  inline void set_pcbangname(const ::std::string& value);
  inline void set_pcbangname(const char* value);
  inline void set_pcbangname(const char* value, size_t size);
  inline ::std::string* mutable_pcbangname();
  inline ::std::string* release_pcbangname();
  inline void set_allocated_pcbangname(::std::string* pcbangname);

  // @@protoc_insertion_point(class_scope:CMsgDOTAPCBangTimedReward)
 private:
  inline void set_has_persona();
  inline void clear_has_persona();
  inline void set_has_itemdef();
  inline void clear_has_itemdef();
  inline void set_has_pcbangname();
  inline void clear_has_pcbangname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* persona_;
  ::std::string* pcbangname_;
  ::google::protobuf::uint32 itemdef_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAPCBangTimedReward* default_instance_;
};
// -------------------------------------------------------------------

class CAttribute_String : public ::google::protobuf::Message {
 public:
  CAttribute_String();
  virtual ~CAttribute_String();

  CAttribute_String(const CAttribute_String& from);

  inline CAttribute_String& operator=(const CAttribute_String& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAttribute_String& default_instance();

  void Swap(CAttribute_String* other);

  // implements Message ----------------------------------------------

  CAttribute_String* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAttribute_String& from);
  void MergeFrom(const CAttribute_String& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:CAttribute_String)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CAttribute_String* default_instance_;
};
// -------------------------------------------------------------------

class CAttribute_ItemDynamicRecipeComponent : public ::google::protobuf::Message {
 public:
  CAttribute_ItemDynamicRecipeComponent();
  virtual ~CAttribute_ItemDynamicRecipeComponent();

  CAttribute_ItemDynamicRecipeComponent(const CAttribute_ItemDynamicRecipeComponent& from);

  inline CAttribute_ItemDynamicRecipeComponent& operator=(const CAttribute_ItemDynamicRecipeComponent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAttribute_ItemDynamicRecipeComponent& default_instance();

  void Swap(CAttribute_ItemDynamicRecipeComponent* other);

  // implements Message ----------------------------------------------

  CAttribute_ItemDynamicRecipeComponent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAttribute_ItemDynamicRecipeComponent& from);
  void MergeFrom(const CAttribute_ItemDynamicRecipeComponent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 item_def = 1;
  inline bool has_item_def() const;
  inline void clear_item_def();
  static const int kItemDefFieldNumber = 1;
  inline ::google::protobuf::uint32 item_def() const;
  inline void set_item_def(::google::protobuf::uint32 value);

  // optional uint32 item_quality = 2;
  inline bool has_item_quality() const;
  inline void clear_item_quality();
  static const int kItemQualityFieldNumber = 2;
  inline ::google::protobuf::uint32 item_quality() const;
  inline void set_item_quality(::google::protobuf::uint32 value);

  // optional uint32 item_flags = 3;
  inline bool has_item_flags() const;
  inline void clear_item_flags();
  static const int kItemFlagsFieldNumber = 3;
  inline ::google::protobuf::uint32 item_flags() const;
  inline void set_item_flags(::google::protobuf::uint32 value);

  // optional string attributes_string = 4;
  inline bool has_attributes_string() const;
  inline void clear_attributes_string();
  static const int kAttributesStringFieldNumber = 4;
  inline const ::std::string& attributes_string() const;
  inline void set_attributes_string(const ::std::string& value);
  inline void set_attributes_string(const char* value);
  inline void set_attributes_string(const char* value, size_t size);
  inline ::std::string* mutable_attributes_string();
  inline ::std::string* release_attributes_string();
  inline void set_allocated_attributes_string(::std::string* attributes_string);

  // optional uint32 item_count = 5;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 5;
  inline ::google::protobuf::uint32 item_count() const;
  inline void set_item_count(::google::protobuf::uint32 value);

  // optional uint32 items_fulfilled = 6;
  inline bool has_items_fulfilled() const;
  inline void clear_items_fulfilled();
  static const int kItemsFulfilledFieldNumber = 6;
  inline ::google::protobuf::uint32 items_fulfilled() const;
  inline void set_items_fulfilled(::google::protobuf::uint32 value);

  // optional uint32 item_rarity = 7;
  inline bool has_item_rarity() const;
  inline void clear_item_rarity();
  static const int kItemRarityFieldNumber = 7;
  inline ::google::protobuf::uint32 item_rarity() const;
  inline void set_item_rarity(::google::protobuf::uint32 value);

  // optional string lootlist = 8;
  inline bool has_lootlist() const;
  inline void clear_lootlist();
  static const int kLootlistFieldNumber = 8;
  inline const ::std::string& lootlist() const;
  inline void set_lootlist(const ::std::string& value);
  inline void set_lootlist(const char* value);
  inline void set_lootlist(const char* value, size_t size);
  inline ::std::string* mutable_lootlist();
  inline ::std::string* release_lootlist();
  inline void set_allocated_lootlist(::std::string* lootlist);

  // optional uint64 fulfilled_item_id = 9;
  inline bool has_fulfilled_item_id() const;
  inline void clear_fulfilled_item_id();
  static const int kFulfilledItemIdFieldNumber = 9;
  inline ::google::protobuf::uint64 fulfilled_item_id() const;
  inline void set_fulfilled_item_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CAttribute_ItemDynamicRecipeComponent)
 private:
  inline void set_has_item_def();
  inline void clear_has_item_def();
  inline void set_has_item_quality();
  inline void clear_has_item_quality();
  inline void set_has_item_flags();
  inline void clear_has_item_flags();
  inline void set_has_attributes_string();
  inline void clear_has_attributes_string();
  inline void set_has_item_count();
  inline void clear_has_item_count();
  inline void set_has_items_fulfilled();
  inline void clear_has_items_fulfilled();
  inline void set_has_item_rarity();
  inline void clear_has_item_rarity();
  inline void set_has_lootlist();
  inline void clear_has_lootlist();
  inline void set_has_fulfilled_item_id();
  inline void clear_has_fulfilled_item_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 item_def_;
  ::google::protobuf::uint32 item_quality_;
  ::std::string* attributes_string_;
  ::google::protobuf::uint32 item_flags_;
  ::google::protobuf::uint32 item_count_;
  ::google::protobuf::uint32 items_fulfilled_;
  ::google::protobuf::uint32 item_rarity_;
  ::std::string* lootlist_;
  ::google::protobuf::uint64 fulfilled_item_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CAttribute_ItemDynamicRecipeComponent* default_instance_;
};
// -------------------------------------------------------------------

class CProtoItemHeroStatue : public ::google::protobuf::Message {
 public:
  CProtoItemHeroStatue();
  virtual ~CProtoItemHeroStatue();

  CProtoItemHeroStatue(const CProtoItemHeroStatue& from);

  inline CProtoItemHeroStatue& operator=(const CProtoItemHeroStatue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProtoItemHeroStatue& default_instance();

  void Swap(CProtoItemHeroStatue* other);

  // implements Message ----------------------------------------------

  CProtoItemHeroStatue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProtoItemHeroStatue& from);
  void MergeFrom(const CProtoItemHeroStatue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hero_id = 1;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 status_effect_index = 2;
  inline bool has_status_effect_index() const;
  inline void clear_status_effect_index();
  static const int kStatusEffectIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 status_effect_index() const;
  inline void set_status_effect_index(::google::protobuf::uint32 value);

  // optional string sequence_name = 3;
  inline bool has_sequence_name() const;
  inline void clear_sequence_name();
  static const int kSequenceNameFieldNumber = 3;
  inline const ::std::string& sequence_name() const;
  inline void set_sequence_name(const ::std::string& value);
  inline void set_sequence_name(const char* value);
  inline void set_sequence_name(const char* value, size_t size);
  inline ::std::string* mutable_sequence_name();
  inline ::std::string* release_sequence_name();
  inline void set_allocated_sequence_name(::std::string* sequence_name);

  // optional float cycle = 4;
  inline bool has_cycle() const;
  inline void clear_cycle();
  static const int kCycleFieldNumber = 4;
  inline float cycle() const;
  inline void set_cycle(float value);

  // repeated uint32 wearable = 5;
  inline int wearable_size() const;
  inline void clear_wearable();
  static const int kWearableFieldNumber = 5;
  inline ::google::protobuf::uint32 wearable(int index) const;
  inline void set_wearable(int index, ::google::protobuf::uint32 value);
  inline void add_wearable(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      wearable() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_wearable();

  // optional string inscription = 6;
  inline bool has_inscription() const;
  inline void clear_inscription();
  static const int kInscriptionFieldNumber = 6;
  inline const ::std::string& inscription() const;
  inline void set_inscription(const ::std::string& value);
  inline void set_inscription(const char* value);
  inline void set_inscription(const char* value, size_t size);
  inline ::std::string* mutable_inscription();
  inline ::std::string* release_inscription();
  inline void set_allocated_inscription(::std::string* inscription);

  // repeated uint32 style = 7;
  inline int style_size() const;
  inline void clear_style();
  static const int kStyleFieldNumber = 7;
  inline ::google::protobuf::uint32 style(int index) const;
  inline void set_style(int index, ::google::protobuf::uint32 value);
  inline void add_style(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      style() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_style();

  // optional bool tournament_drop = 8;
  inline bool has_tournament_drop() const;
  inline void clear_tournament_drop();
  static const int kTournamentDropFieldNumber = 8;
  inline bool tournament_drop() const;
  inline void set_tournament_drop(bool value);

  // @@protoc_insertion_point(class_scope:CProtoItemHeroStatue)
 private:
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_status_effect_index();
  inline void clear_has_status_effect_index();
  inline void set_has_sequence_name();
  inline void clear_has_sequence_name();
  inline void set_has_cycle();
  inline void clear_has_cycle();
  inline void set_has_inscription();
  inline void clear_has_inscription();
  inline void set_has_tournament_drop();
  inline void clear_has_tournament_drop();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 status_effect_index_;
  ::std::string* sequence_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > wearable_;
  ::std::string* inscription_;
  float cycle_;
  bool tournament_drop_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > style_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CProtoItemHeroStatue* default_instance_;
};
// -------------------------------------------------------------------

class CProtoItemTeamShowcase : public ::google::protobuf::Message {
 public:
  CProtoItemTeamShowcase();
  virtual ~CProtoItemTeamShowcase();

  CProtoItemTeamShowcase(const CProtoItemTeamShowcase& from);

  inline CProtoItemTeamShowcase& operator=(const CProtoItemTeamShowcase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProtoItemTeamShowcase& default_instance();

  void Swap(CProtoItemTeamShowcase* other);

  // implements Message ----------------------------------------------

  CProtoItemTeamShowcase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProtoItemTeamShowcase& from);
  void MergeFrom(const CProtoItemTeamShowcase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hero_id = 1;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 status_effect_index = 2;
  inline bool has_status_effect_index() const;
  inline void clear_status_effect_index();
  static const int kStatusEffectIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 status_effect_index() const;
  inline void set_status_effect_index(::google::protobuf::uint32 value);

  // optional string sequence_name = 3;
  inline bool has_sequence_name() const;
  inline void clear_sequence_name();
  static const int kSequenceNameFieldNumber = 3;
  inline const ::std::string& sequence_name() const;
  inline void set_sequence_name(const ::std::string& value);
  inline void set_sequence_name(const char* value);
  inline void set_sequence_name(const char* value, size_t size);
  inline ::std::string* mutable_sequence_name();
  inline ::std::string* release_sequence_name();
  inline void set_allocated_sequence_name(::std::string* sequence_name);

  // optional float cycle = 4;
  inline bool has_cycle() const;
  inline void clear_cycle();
  static const int kCycleFieldNumber = 4;
  inline float cycle() const;
  inline void set_cycle(float value);

  // repeated uint32 wearable = 5;
  inline int wearable_size() const;
  inline void clear_wearable();
  static const int kWearableFieldNumber = 5;
  inline ::google::protobuf::uint32 wearable(int index) const;
  inline void set_wearable(int index, ::google::protobuf::uint32 value);
  inline void add_wearable(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      wearable() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_wearable();

  // optional string inscription = 6;
  inline bool has_inscription() const;
  inline void clear_inscription();
  static const int kInscriptionFieldNumber = 6;
  inline const ::std::string& inscription() const;
  inline void set_inscription(const ::std::string& value);
  inline void set_inscription(const char* value);
  inline void set_inscription(const char* value, size_t size);
  inline ::std::string* mutable_inscription();
  inline ::std::string* release_inscription();
  inline void set_allocated_inscription(::std::string* inscription);

  // repeated uint32 style = 7;
  inline int style_size() const;
  inline void clear_style();
  static const int kStyleFieldNumber = 7;
  inline ::google::protobuf::uint32 style(int index) const;
  inline void set_style(int index, ::google::protobuf::uint32 value);
  inline void add_style(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      style() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_style();

  // @@protoc_insertion_point(class_scope:CProtoItemTeamShowcase)
 private:
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_status_effect_index();
  inline void clear_has_status_effect_index();
  inline void set_has_sequence_name();
  inline void clear_has_sequence_name();
  inline void set_has_cycle();
  inline void clear_has_cycle();
  inline void set_has_inscription();
  inline void clear_has_inscription();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 status_effect_index_;
  ::std::string* sequence_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > wearable_;
  ::std::string* inscription_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > style_;
  float cycle_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CProtoItemTeamShowcase* default_instance_;
};
// -------------------------------------------------------------------

class CProtoItemSocket : public ::google::protobuf::Message {
 public:
  CProtoItemSocket();
  virtual ~CProtoItemSocket();

  CProtoItemSocket(const CProtoItemSocket& from);

  inline CProtoItemSocket& operator=(const CProtoItemSocket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProtoItemSocket& default_instance();

  void Swap(CProtoItemSocket* other);

  // implements Message ----------------------------------------------

  CProtoItemSocket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProtoItemSocket& from);
  void MergeFrom(const CProtoItemSocket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint64 item_id() const;
  inline void set_item_id(::google::protobuf::uint64 value);

  // optional uint32 attr_def_index = 2;
  inline bool has_attr_def_index() const;
  inline void clear_attr_def_index();
  static const int kAttrDefIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 attr_def_index() const;
  inline void set_attr_def_index(::google::protobuf::uint32 value);

  // optional uint32 required_type = 3;
  inline bool has_required_type() const;
  inline void clear_required_type();
  static const int kRequiredTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 required_type() const;
  inline void set_required_type(::google::protobuf::uint32 value);

  // optional string required_hero = 4;
  inline bool has_required_hero() const;
  inline void clear_required_hero();
  static const int kRequiredHeroFieldNumber = 4;
  inline const ::std::string& required_hero() const;
  inline void set_required_hero(const ::std::string& value);
  inline void set_required_hero(const char* value);
  inline void set_required_hero(const char* value, size_t size);
  inline ::std::string* mutable_required_hero();
  inline ::std::string* release_required_hero();
  inline void set_allocated_required_hero(::std::string* required_hero);

  // optional uint32 gem_def_index = 5;
  inline bool has_gem_def_index() const;
  inline void clear_gem_def_index();
  static const int kGemDefIndexFieldNumber = 5;
  inline ::google::protobuf::uint32 gem_def_index() const;
  inline void set_gem_def_index(::google::protobuf::uint32 value);

  // optional bool not_tradable = 6;
  inline bool has_not_tradable() const;
  inline void clear_not_tradable();
  static const int kNotTradableFieldNumber = 6;
  inline bool not_tradable() const;
  inline void set_not_tradable(bool value);

  // optional string required_item_slot = 7;
  inline bool has_required_item_slot() const;
  inline void clear_required_item_slot();
  static const int kRequiredItemSlotFieldNumber = 7;
  inline const ::std::string& required_item_slot() const;
  inline void set_required_item_slot(const ::std::string& value);
  inline void set_required_item_slot(const char* value);
  inline void set_required_item_slot(const char* value, size_t size);
  inline ::std::string* mutable_required_item_slot();
  inline ::std::string* release_required_item_slot();
  inline void set_allocated_required_item_slot(::std::string* required_item_slot);

  // @@protoc_insertion_point(class_scope:CProtoItemSocket)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_attr_def_index();
  inline void clear_has_attr_def_index();
  inline void set_has_required_type();
  inline void clear_has_required_type();
  inline void set_has_required_hero();
  inline void clear_has_required_hero();
  inline void set_has_gem_def_index();
  inline void clear_has_gem_def_index();
  inline void set_has_not_tradable();
  inline void clear_has_not_tradable();
  inline void set_has_required_item_slot();
  inline void clear_has_required_item_slot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 item_id_;
  ::google::protobuf::uint32 attr_def_index_;
  ::google::protobuf::uint32 required_type_;
  ::std::string* required_hero_;
  ::google::protobuf::uint32 gem_def_index_;
  bool not_tradable_;
  ::std::string* required_item_slot_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CProtoItemSocket* default_instance_;
};
// -------------------------------------------------------------------

class CProtoItemSocket_Empty : public ::google::protobuf::Message {
 public:
  CProtoItemSocket_Empty();
  virtual ~CProtoItemSocket_Empty();

  CProtoItemSocket_Empty(const CProtoItemSocket_Empty& from);

  inline CProtoItemSocket_Empty& operator=(const CProtoItemSocket_Empty& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProtoItemSocket_Empty& default_instance();

  void Swap(CProtoItemSocket_Empty* other);

  // implements Message ----------------------------------------------

  CProtoItemSocket_Empty* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProtoItemSocket_Empty& from);
  void MergeFrom(const CProtoItemSocket_Empty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CProtoItemSocket socket = 1;
  inline bool has_socket() const;
  inline void clear_socket();
  static const int kSocketFieldNumber = 1;
  inline const ::CProtoItemSocket& socket() const;
  inline ::CProtoItemSocket* mutable_socket();
  inline ::CProtoItemSocket* release_socket();
  inline void set_allocated_socket(::CProtoItemSocket* socket);

  // @@protoc_insertion_point(class_scope:CProtoItemSocket_Empty)
 private:
  inline void set_has_socket();
  inline void clear_has_socket();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CProtoItemSocket* socket_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CProtoItemSocket_Empty* default_instance_;
};
// -------------------------------------------------------------------

class CProtoItemSocket_Effect : public ::google::protobuf::Message {
 public:
  CProtoItemSocket_Effect();
  virtual ~CProtoItemSocket_Effect();

  CProtoItemSocket_Effect(const CProtoItemSocket_Effect& from);

  inline CProtoItemSocket_Effect& operator=(const CProtoItemSocket_Effect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProtoItemSocket_Effect& default_instance();

  void Swap(CProtoItemSocket_Effect* other);

  // implements Message ----------------------------------------------

  CProtoItemSocket_Effect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProtoItemSocket_Effect& from);
  void MergeFrom(const CProtoItemSocket_Effect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CProtoItemSocket socket = 1;
  inline bool has_socket() const;
  inline void clear_socket();
  static const int kSocketFieldNumber = 1;
  inline const ::CProtoItemSocket& socket() const;
  inline ::CProtoItemSocket* mutable_socket();
  inline ::CProtoItemSocket* release_socket();
  inline void set_allocated_socket(::CProtoItemSocket* socket);

  // optional uint32 effect = 2;
  inline bool has_effect() const;
  inline void clear_effect();
  static const int kEffectFieldNumber = 2;
  inline ::google::protobuf::uint32 effect() const;
  inline void set_effect(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CProtoItemSocket_Effect)
 private:
  inline void set_has_socket();
  inline void clear_has_socket();
  inline void set_has_effect();
  inline void clear_has_effect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CProtoItemSocket* socket_;
  ::google::protobuf::uint32 effect_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CProtoItemSocket_Effect* default_instance_;
};
// -------------------------------------------------------------------

class CProtoItemSocket_Color : public ::google::protobuf::Message {
 public:
  CProtoItemSocket_Color();
  virtual ~CProtoItemSocket_Color();

  CProtoItemSocket_Color(const CProtoItemSocket_Color& from);

  inline CProtoItemSocket_Color& operator=(const CProtoItemSocket_Color& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProtoItemSocket_Color& default_instance();

  void Swap(CProtoItemSocket_Color* other);

  // implements Message ----------------------------------------------

  CProtoItemSocket_Color* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProtoItemSocket_Color& from);
  void MergeFrom(const CProtoItemSocket_Color& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CProtoItemSocket socket = 1;
  inline bool has_socket() const;
  inline void clear_socket();
  static const int kSocketFieldNumber = 1;
  inline const ::CProtoItemSocket& socket() const;
  inline ::CProtoItemSocket* mutable_socket();
  inline ::CProtoItemSocket* release_socket();
  inline void set_allocated_socket(::CProtoItemSocket* socket);

  // optional uint32 red = 2;
  inline bool has_red() const;
  inline void clear_red();
  static const int kRedFieldNumber = 2;
  inline ::google::protobuf::uint32 red() const;
  inline void set_red(::google::protobuf::uint32 value);

  // optional uint32 green = 3;
  inline bool has_green() const;
  inline void clear_green();
  static const int kGreenFieldNumber = 3;
  inline ::google::protobuf::uint32 green() const;
  inline void set_green(::google::protobuf::uint32 value);

  // optional uint32 blue = 4;
  inline bool has_blue() const;
  inline void clear_blue();
  static const int kBlueFieldNumber = 4;
  inline ::google::protobuf::uint32 blue() const;
  inline void set_blue(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CProtoItemSocket_Color)
 private:
  inline void set_has_socket();
  inline void clear_has_socket();
  inline void set_has_red();
  inline void clear_has_red();
  inline void set_has_green();
  inline void clear_has_green();
  inline void set_has_blue();
  inline void clear_has_blue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CProtoItemSocket* socket_;
  ::google::protobuf::uint32 red_;
  ::google::protobuf::uint32 green_;
  ::google::protobuf::uint32 blue_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CProtoItemSocket_Color* default_instance_;
};
// -------------------------------------------------------------------

class CProtoItemSocket_Strange : public ::google::protobuf::Message {
 public:
  CProtoItemSocket_Strange();
  virtual ~CProtoItemSocket_Strange();

  CProtoItemSocket_Strange(const CProtoItemSocket_Strange& from);

  inline CProtoItemSocket_Strange& operator=(const CProtoItemSocket_Strange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProtoItemSocket_Strange& default_instance();

  void Swap(CProtoItemSocket_Strange* other);

  // implements Message ----------------------------------------------

  CProtoItemSocket_Strange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProtoItemSocket_Strange& from);
  void MergeFrom(const CProtoItemSocket_Strange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CProtoItemSocket socket = 1;
  inline bool has_socket() const;
  inline void clear_socket();
  static const int kSocketFieldNumber = 1;
  inline const ::CProtoItemSocket& socket() const;
  inline ::CProtoItemSocket* mutable_socket();
  inline ::CProtoItemSocket* release_socket();
  inline void set_allocated_socket(::CProtoItemSocket* socket);

  // optional uint32 strange_type = 2;
  inline bool has_strange_type() const;
  inline void clear_strange_type();
  static const int kStrangeTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 strange_type() const;
  inline void set_strange_type(::google::protobuf::uint32 value);

  // optional uint32 strange_value = 3;
  inline bool has_strange_value() const;
  inline void clear_strange_value();
  static const int kStrangeValueFieldNumber = 3;
  inline ::google::protobuf::uint32 strange_value() const;
  inline void set_strange_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CProtoItemSocket_Strange)
 private:
  inline void set_has_socket();
  inline void clear_has_socket();
  inline void set_has_strange_type();
  inline void clear_has_strange_type();
  inline void set_has_strange_value();
  inline void clear_has_strange_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CProtoItemSocket* socket_;
  ::google::protobuf::uint32 strange_type_;
  ::google::protobuf::uint32 strange_value_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CProtoItemSocket_Strange* default_instance_;
};
// -------------------------------------------------------------------

class CProtoItemSocket_Spectator : public ::google::protobuf::Message {
 public:
  CProtoItemSocket_Spectator();
  virtual ~CProtoItemSocket_Spectator();

  CProtoItemSocket_Spectator(const CProtoItemSocket_Spectator& from);

  inline CProtoItemSocket_Spectator& operator=(const CProtoItemSocket_Spectator& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProtoItemSocket_Spectator& default_instance();

  void Swap(CProtoItemSocket_Spectator* other);

  // implements Message ----------------------------------------------

  CProtoItemSocket_Spectator* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProtoItemSocket_Spectator& from);
  void MergeFrom(const CProtoItemSocket_Spectator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CProtoItemSocket socket = 1;
  inline bool has_socket() const;
  inline void clear_socket();
  static const int kSocketFieldNumber = 1;
  inline const ::CProtoItemSocket& socket() const;
  inline ::CProtoItemSocket* mutable_socket();
  inline ::CProtoItemSocket* release_socket();
  inline void set_allocated_socket(::CProtoItemSocket* socket);

  // optional uint32 games_viewed = 2;
  inline bool has_games_viewed() const;
  inline void clear_games_viewed();
  static const int kGamesViewedFieldNumber = 2;
  inline ::google::protobuf::uint32 games_viewed() const;
  inline void set_games_viewed(::google::protobuf::uint32 value);

  // optional uint32 corporation_id = 3;
  inline bool has_corporation_id() const;
  inline void clear_corporation_id();
  static const int kCorporationIdFieldNumber = 3;
  inline ::google::protobuf::uint32 corporation_id() const;
  inline void set_corporation_id(::google::protobuf::uint32 value);

  // optional uint32 league_id = 4;
  inline bool has_league_id() const;
  inline void clear_league_id();
  static const int kLeagueIdFieldNumber = 4;
  inline ::google::protobuf::uint32 league_id() const;
  inline void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 team_id = 5;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 5;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CProtoItemSocket_Spectator)
 private:
  inline void set_has_socket();
  inline void clear_has_socket();
  inline void set_has_games_viewed();
  inline void clear_has_games_viewed();
  inline void set_has_corporation_id();
  inline void clear_has_corporation_id();
  inline void set_has_league_id();
  inline void clear_has_league_id();
  inline void set_has_team_id();
  inline void clear_has_team_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CProtoItemSocket* socket_;
  ::google::protobuf::uint32 games_viewed_;
  ::google::protobuf::uint32 corporation_id_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 team_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CProtoItemSocket_Spectator* default_instance_;
};
// -------------------------------------------------------------------

class CProtoItemSocket_AssetModifier : public ::google::protobuf::Message {
 public:
  CProtoItemSocket_AssetModifier();
  virtual ~CProtoItemSocket_AssetModifier();

  CProtoItemSocket_AssetModifier(const CProtoItemSocket_AssetModifier& from);

  inline CProtoItemSocket_AssetModifier& operator=(const CProtoItemSocket_AssetModifier& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProtoItemSocket_AssetModifier& default_instance();

  void Swap(CProtoItemSocket_AssetModifier* other);

  // implements Message ----------------------------------------------

  CProtoItemSocket_AssetModifier* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProtoItemSocket_AssetModifier& from);
  void MergeFrom(const CProtoItemSocket_AssetModifier& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CProtoItemSocket socket = 1;
  inline bool has_socket() const;
  inline void clear_socket();
  static const int kSocketFieldNumber = 1;
  inline const ::CProtoItemSocket& socket() const;
  inline ::CProtoItemSocket* mutable_socket();
  inline ::CProtoItemSocket* release_socket();
  inline void set_allocated_socket(::CProtoItemSocket* socket);

  // optional uint32 asset_modifier = 2;
  inline bool has_asset_modifier() const;
  inline void clear_asset_modifier();
  static const int kAssetModifierFieldNumber = 2;
  inline ::google::protobuf::uint32 asset_modifier() const;
  inline void set_asset_modifier(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CProtoItemSocket_AssetModifier)
 private:
  inline void set_has_socket();
  inline void clear_has_socket();
  inline void set_has_asset_modifier();
  inline void clear_has_asset_modifier();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CProtoItemSocket* socket_;
  ::google::protobuf::uint32 asset_modifier_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CProtoItemSocket_AssetModifier* default_instance_;
};
// -------------------------------------------------------------------

class CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY : public ::google::protobuf::Message {
 public:
  CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY();
  virtual ~CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY();

  CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY(const CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY& from);

  inline CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY& operator=(const CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY& default_instance();

  void Swap(CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY* other);

  // implements Message ----------------------------------------------

  CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY& from);
  void MergeFrom(const CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CProtoItemSocket socket = 1;
  inline bool has_socket() const;
  inline void clear_socket();
  static const int kSocketFieldNumber = 1;
  inline const ::CProtoItemSocket& socket() const;
  inline ::CProtoItemSocket* mutable_socket();
  inline ::CProtoItemSocket* release_socket();
  inline void set_allocated_socket(::CProtoItemSocket* socket);

  // optional uint32 asset_modifier = 2;
  inline bool has_asset_modifier() const;
  inline void clear_asset_modifier();
  static const int kAssetModifierFieldNumber = 2;
  inline ::google::protobuf::uint32 asset_modifier() const;
  inline void set_asset_modifier(::google::protobuf::uint32 value);

  // optional uint32 anim_modifier = 3;
  inline bool has_anim_modifier() const;
  inline void clear_anim_modifier();
  static const int kAnimModifierFieldNumber = 3;
  inline ::google::protobuf::uint32 anim_modifier() const;
  inline void set_anim_modifier(::google::protobuf::uint32 value);

  // optional uint32 ability_effect = 4;
  inline bool has_ability_effect() const;
  inline void clear_ability_effect();
  static const int kAbilityEffectFieldNumber = 4;
  inline ::google::protobuf::uint32 ability_effect() const;
  inline void set_ability_effect(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
 private:
  inline void set_has_socket();
  inline void clear_has_socket();
  inline void set_has_asset_modifier();
  inline void clear_has_asset_modifier();
  inline void set_has_anim_modifier();
  inline void clear_has_anim_modifier();
  inline void set_has_ability_effect();
  inline void clear_has_ability_effect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CProtoItemSocket* socket_;
  ::google::protobuf::uint32 asset_modifier_;
  ::google::protobuf::uint32 anim_modifier_;
  ::google::protobuf::uint32 ability_effect_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY* default_instance_;
};
// -------------------------------------------------------------------

class CProtoItemSocket_Autograph : public ::google::protobuf::Message {
 public:
  CProtoItemSocket_Autograph();
  virtual ~CProtoItemSocket_Autograph();

  CProtoItemSocket_Autograph(const CProtoItemSocket_Autograph& from);

  inline CProtoItemSocket_Autograph& operator=(const CProtoItemSocket_Autograph& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProtoItemSocket_Autograph& default_instance();

  void Swap(CProtoItemSocket_Autograph* other);

  // implements Message ----------------------------------------------

  CProtoItemSocket_Autograph* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProtoItemSocket_Autograph& from);
  void MergeFrom(const CProtoItemSocket_Autograph& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CProtoItemSocket socket = 1;
  inline bool has_socket() const;
  inline void clear_socket();
  static const int kSocketFieldNumber = 1;
  inline const ::CProtoItemSocket& socket() const;
  inline ::CProtoItemSocket* mutable_socket();
  inline ::CProtoItemSocket* release_socket();
  inline void set_allocated_socket(::CProtoItemSocket* socket);

  // optional string autograph = 2;
  inline bool has_autograph() const;
  inline void clear_autograph();
  static const int kAutographFieldNumber = 2;
  inline const ::std::string& autograph() const;
  inline void set_autograph(const ::std::string& value);
  inline void set_autograph(const char* value);
  inline void set_autograph(const char* value, size_t size);
  inline ::std::string* mutable_autograph();
  inline ::std::string* release_autograph();
  inline void set_allocated_autograph(::std::string* autograph);

  // optional uint32 autograph_id = 3;
  inline bool has_autograph_id() const;
  inline void clear_autograph_id();
  static const int kAutographIdFieldNumber = 3;
  inline ::google::protobuf::uint32 autograph_id() const;
  inline void set_autograph_id(::google::protobuf::uint32 value);

  // optional uint32 autograph_score = 4;
  inline bool has_autograph_score() const;
  inline void clear_autograph_score();
  static const int kAutographScoreFieldNumber = 4;
  inline ::google::protobuf::uint32 autograph_score() const;
  inline void set_autograph_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CProtoItemSocket_Autograph)
 private:
  inline void set_has_socket();
  inline void clear_has_socket();
  inline void set_has_autograph();
  inline void clear_has_autograph();
  inline void set_has_autograph_id();
  inline void clear_has_autograph_id();
  inline void set_has_autograph_score();
  inline void clear_has_autograph_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CProtoItemSocket* socket_;
  ::std::string* autograph_;
  ::google::protobuf::uint32 autograph_id_;
  ::google::protobuf::uint32 autograph_score_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CProtoItemSocket_Autograph* default_instance_;
};
// -------------------------------------------------------------------

class CProtoItemSocket_StaticVisuals : public ::google::protobuf::Message {
 public:
  CProtoItemSocket_StaticVisuals();
  virtual ~CProtoItemSocket_StaticVisuals();

  CProtoItemSocket_StaticVisuals(const CProtoItemSocket_StaticVisuals& from);

  inline CProtoItemSocket_StaticVisuals& operator=(const CProtoItemSocket_StaticVisuals& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProtoItemSocket_StaticVisuals& default_instance();

  void Swap(CProtoItemSocket_StaticVisuals* other);

  // implements Message ----------------------------------------------

  CProtoItemSocket_StaticVisuals* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProtoItemSocket_StaticVisuals& from);
  void MergeFrom(const CProtoItemSocket_StaticVisuals& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CProtoItemSocket socket = 1;
  inline bool has_socket() const;
  inline void clear_socket();
  static const int kSocketFieldNumber = 1;
  inline const ::CProtoItemSocket& socket() const;
  inline ::CProtoItemSocket* mutable_socket();
  inline ::CProtoItemSocket* release_socket();
  inline void set_allocated_socket(::CProtoItemSocket* socket);

  // @@protoc_insertion_point(class_scope:CProtoItemSocket_StaticVisuals)
 private:
  inline void set_has_socket();
  inline void clear_has_socket();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CProtoItemSocket* socket_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CProtoItemSocket_StaticVisuals* default_instance_;
};
// -------------------------------------------------------------------

class CMatchPlayerAbilityUpgrade : public ::google::protobuf::Message {
 public:
  CMatchPlayerAbilityUpgrade();
  virtual ~CMatchPlayerAbilityUpgrade();

  CMatchPlayerAbilityUpgrade(const CMatchPlayerAbilityUpgrade& from);

  inline CMatchPlayerAbilityUpgrade& operator=(const CMatchPlayerAbilityUpgrade& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMatchPlayerAbilityUpgrade& default_instance();

  void Swap(CMatchPlayerAbilityUpgrade* other);

  // implements Message ----------------------------------------------

  CMatchPlayerAbilityUpgrade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMatchPlayerAbilityUpgrade& from);
  void MergeFrom(const CMatchPlayerAbilityUpgrade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ability = 1;
  inline bool has_ability() const;
  inline void clear_ability();
  static const int kAbilityFieldNumber = 1;
  inline ::google::protobuf::uint32 ability() const;
  inline void set_ability(::google::protobuf::uint32 value);

  // optional uint32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMatchPlayerAbilityUpgrade)
 private:
  inline void set_has_ability();
  inline void clear_has_ability();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 ability_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMatchPlayerAbilityUpgrade* default_instance_;
};
// -------------------------------------------------------------------

class CMatchAdditionalUnitInventory : public ::google::protobuf::Message {
 public:
  CMatchAdditionalUnitInventory();
  virtual ~CMatchAdditionalUnitInventory();

  CMatchAdditionalUnitInventory(const CMatchAdditionalUnitInventory& from);

  inline CMatchAdditionalUnitInventory& operator=(const CMatchAdditionalUnitInventory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMatchAdditionalUnitInventory& default_instance();

  void Swap(CMatchAdditionalUnitInventory* other);

  // implements Message ----------------------------------------------

  CMatchAdditionalUnitInventory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMatchAdditionalUnitInventory& from);
  void MergeFrom(const CMatchAdditionalUnitInventory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string unit_name = 1;
  inline bool has_unit_name() const;
  inline void clear_unit_name();
  static const int kUnitNameFieldNumber = 1;
  inline const ::std::string& unit_name() const;
  inline void set_unit_name(const ::std::string& value);
  inline void set_unit_name(const char* value);
  inline void set_unit_name(const char* value, size_t size);
  inline ::std::string* mutable_unit_name();
  inline ::std::string* release_unit_name();
  inline void set_allocated_unit_name(::std::string* unit_name);

  // repeated uint32 items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline ::google::protobuf::uint32 items(int index) const;
  inline void set_items(int index, ::google::protobuf::uint32 value);
  inline void add_items(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      items() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:CMatchAdditionalUnitInventory)
 private:
  inline void set_has_unit_name();
  inline void clear_has_unit_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* unit_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > items_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMatchAdditionalUnitInventory* default_instance_;
};
// -------------------------------------------------------------------

class CMatchHeroSelectEvent : public ::google::protobuf::Message {
 public:
  CMatchHeroSelectEvent();
  virtual ~CMatchHeroSelectEvent();

  CMatchHeroSelectEvent(const CMatchHeroSelectEvent& from);

  inline CMatchHeroSelectEvent& operator=(const CMatchHeroSelectEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMatchHeroSelectEvent& default_instance();

  void Swap(CMatchHeroSelectEvent* other);

  // implements Message ----------------------------------------------

  CMatchHeroSelectEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMatchHeroSelectEvent& from);
  void MergeFrom(const CMatchHeroSelectEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_pick = 1;
  inline bool has_is_pick() const;
  inline void clear_is_pick();
  static const int kIsPickFieldNumber = 1;
  inline bool is_pick() const;
  inline void set_is_pick(bool value);

  // optional uint32 team = 2;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 2;
  inline ::google::protobuf::uint32 team() const;
  inline void set_team(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 3;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMatchHeroSelectEvent)
 private:
  inline void set_has_is_pick();
  inline void clear_has_is_pick();
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool is_pick_;
  ::google::protobuf::uint32 team_;
  ::google::protobuf::uint32 hero_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMatchHeroSelectEvent* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAProcessFantasyScheduledEvent : public ::google::protobuf::Message {
 public:
  CMsgDOTAProcessFantasyScheduledEvent();
  virtual ~CMsgDOTAProcessFantasyScheduledEvent();

  CMsgDOTAProcessFantasyScheduledEvent(const CMsgDOTAProcessFantasyScheduledEvent& from);

  inline CMsgDOTAProcessFantasyScheduledEvent& operator=(const CMsgDOTAProcessFantasyScheduledEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProcessFantasyScheduledEvent& default_instance();

  void Swap(CMsgDOTAProcessFantasyScheduledEvent* other);

  // implements Message ----------------------------------------------

  CMsgDOTAProcessFantasyScheduledEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAProcessFantasyScheduledEvent& from);
  void MergeFrom(const CMsgDOTAProcessFantasyScheduledEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 event = 1;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 1;
  inline ::google::protobuf::uint32 event() const;
  inline void set_event(::google::protobuf::uint32 value);

  // optional uint32 timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // optional uint32 fantasy_league_id = 3;
  inline bool has_fantasy_league_id() const;
  inline void clear_fantasy_league_id();
  static const int kFantasyLeagueIdFieldNumber = 3;
  inline ::google::protobuf::uint32 fantasy_league_id() const;
  inline void set_fantasy_league_id(::google::protobuf::uint32 value);

  // optional uint32 season = 4;
  inline bool has_season() const;
  inline void clear_season();
  static const int kSeasonFieldNumber = 4;
  inline ::google::protobuf::uint32 season() const;
  inline void set_season(::google::protobuf::uint32 value);

  // optional uint32 reference_data = 5;
  inline bool has_reference_data() const;
  inline void clear_reference_data();
  static const int kReferenceDataFieldNumber = 5;
  inline ::google::protobuf::uint32 reference_data() const;
  inline void set_reference_data(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAProcessFantasyScheduledEvent)
 private:
  inline void set_has_event();
  inline void clear_has_event();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_fantasy_league_id();
  inline void clear_has_fantasy_league_id();
  inline void set_has_season();
  inline void clear_has_season();
  inline void set_has_reference_data();
  inline void clear_has_reference_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 event_;
  ::google::protobuf::uint32 timestamp_;
  ::google::protobuf::uint32 fantasy_league_id_;
  ::google::protobuf::uint32 season_;
  ::google::protobuf::uint32 reference_data_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAProcessFantasyScheduledEvent* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAHasItemQuery : public ::google::protobuf::Message {
 public:
  CMsgDOTAHasItemQuery();
  virtual ~CMsgDOTAHasItemQuery();

  CMsgDOTAHasItemQuery(const CMsgDOTAHasItemQuery& from);

  inline CMsgDOTAHasItemQuery& operator=(const CMsgDOTAHasItemQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAHasItemQuery& default_instance();

  void Swap(CMsgDOTAHasItemQuery* other);

  // implements Message ----------------------------------------------

  CMsgDOTAHasItemQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAHasItemQuery& from);
  void MergeFrom(const CMsgDOTAHasItemQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint64 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint64 item_id() const;
  inline void set_item_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAHasItemQuery)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_item_id();
  inline void clear_has_item_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 item_id_;
  ::google::protobuf::uint32 account_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAHasItemQuery* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAHasItemResponse : public ::google::protobuf::Message {
 public:
  CMsgDOTAHasItemResponse();
  virtual ~CMsgDOTAHasItemResponse();

  CMsgDOTAHasItemResponse(const CMsgDOTAHasItemResponse& from);

  inline CMsgDOTAHasItemResponse& operator=(const CMsgDOTAHasItemResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAHasItemResponse& default_instance();

  void Swap(CMsgDOTAHasItemResponse* other);

  // implements Message ----------------------------------------------

  CMsgDOTAHasItemResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAHasItemResponse& from);
  void MergeFrom(const CMsgDOTAHasItemResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool has_item = 1;
  inline bool has_has_item() const;
  inline void clear_has_item();
  static const int kHasItemFieldNumber = 1;
  inline bool has_item() const;
  inline void set_has_item(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAHasItemResponse)
 private:
  inline void set_has_has_item();
  inline void clear_has_has_item();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool has_item_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAHasItemResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAHasItemDefsQuery : public ::google::protobuf::Message {
 public:
  CMsgDOTAHasItemDefsQuery();
  virtual ~CMsgDOTAHasItemDefsQuery();

  CMsgDOTAHasItemDefsQuery(const CMsgDOTAHasItemDefsQuery& from);

  inline CMsgDOTAHasItemDefsQuery& operator=(const CMsgDOTAHasItemDefsQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAHasItemDefsQuery& default_instance();

  void Swap(CMsgDOTAHasItemDefsQuery* other);

  // implements Message ----------------------------------------------

  CMsgDOTAHasItemDefsQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAHasItemDefsQuery& from);
  void MergeFrom(const CMsgDOTAHasItemDefsQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // repeated uint32 itemdef_ids = 2;
  inline int itemdef_ids_size() const;
  inline void clear_itemdef_ids();
  static const int kItemdefIdsFieldNumber = 2;
  inline ::google::protobuf::uint32 itemdef_ids(int index) const;
  inline void set_itemdef_ids(int index, ::google::protobuf::uint32 value);
  inline void add_itemdef_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      itemdef_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_itemdef_ids();

  // @@protoc_insertion_point(class_scope:CMsgDOTAHasItemDefsQuery)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > itemdef_ids_;
  ::google::protobuf::uint32 account_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAHasItemDefsQuery* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAHasItemDefsResponse : public ::google::protobuf::Message {
 public:
  CMsgDOTAHasItemDefsResponse();
  virtual ~CMsgDOTAHasItemDefsResponse();

  CMsgDOTAHasItemDefsResponse(const CMsgDOTAHasItemDefsResponse& from);

  inline CMsgDOTAHasItemDefsResponse& operator=(const CMsgDOTAHasItemDefsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAHasItemDefsResponse& default_instance();

  void Swap(CMsgDOTAHasItemDefsResponse* other);

  // implements Message ----------------------------------------------

  CMsgDOTAHasItemDefsResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAHasItemDefsResponse& from);
  void MergeFrom(const CMsgDOTAHasItemDefsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool has_items = 1;
  inline bool has_has_items() const;
  inline void clear_has_items();
  static const int kHasItemsFieldNumber = 1;
  inline bool has_items() const;
  inline void set_has_items(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAHasItemDefsResponse)
 private:
  inline void set_has_has_items();
  inline void clear_has_has_items();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool has_items_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAHasItemDefsResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAConsumeFantasyTicket : public ::google::protobuf::Message {
 public:
  CMsgDOTAConsumeFantasyTicket();
  virtual ~CMsgDOTAConsumeFantasyTicket();

  CMsgDOTAConsumeFantasyTicket(const CMsgDOTAConsumeFantasyTicket& from);

  inline CMsgDOTAConsumeFantasyTicket& operator=(const CMsgDOTAConsumeFantasyTicket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAConsumeFantasyTicket& default_instance();

  void Swap(CMsgDOTAConsumeFantasyTicket* other);

  // implements Message ----------------------------------------------

  CMsgDOTAConsumeFantasyTicket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAConsumeFantasyTicket& from);
  void MergeFrom(const CMsgDOTAConsumeFantasyTicket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint64 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint64 item_id() const;
  inline void set_item_id(::google::protobuf::uint64 value);

  // optional uint32 fantasy_league_id = 3;
  inline bool has_fantasy_league_id() const;
  inline void clear_fantasy_league_id();
  static const int kFantasyLeagueIdFieldNumber = 3;
  inline ::google::protobuf::uint32 fantasy_league_id() const;
  inline void set_fantasy_league_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAConsumeFantasyTicket)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_fantasy_league_id();
  inline void clear_has_fantasy_league_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 item_id_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 fantasy_league_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAConsumeFantasyTicket* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAConsumeFantasyTicketFailure : public ::google::protobuf::Message {
 public:
  CMsgDOTAConsumeFantasyTicketFailure();
  virtual ~CMsgDOTAConsumeFantasyTicketFailure();

  CMsgDOTAConsumeFantasyTicketFailure(const CMsgDOTAConsumeFantasyTicketFailure& from);

  inline CMsgDOTAConsumeFantasyTicketFailure& operator=(const CMsgDOTAConsumeFantasyTicketFailure& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAConsumeFantasyTicketFailure& default_instance();

  void Swap(CMsgDOTAConsumeFantasyTicketFailure* other);

  // implements Message ----------------------------------------------

  CMsgDOTAConsumeFantasyTicketFailure* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAConsumeFantasyTicketFailure& from);
  void MergeFrom(const CMsgDOTAConsumeFantasyTicketFailure& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint64 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint64 item_id() const;
  inline void set_item_id(::google::protobuf::uint64 value);

  // optional uint32 fantasy_league_id = 3;
  inline bool has_fantasy_league_id() const;
  inline void clear_fantasy_league_id();
  static const int kFantasyLeagueIdFieldNumber = 3;
  inline ::google::protobuf::uint32 fantasy_league_id() const;
  inline void set_fantasy_league_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAConsumeFantasyTicketFailure)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_fantasy_league_id();
  inline void clear_has_fantasy_league_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 item_id_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 fantasy_league_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAConsumeFantasyTicketFailure* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCToGCFantasySetMatchLeague : public ::google::protobuf::Message {
 public:
  CMsgGCToGCFantasySetMatchLeague();
  virtual ~CMsgGCToGCFantasySetMatchLeague();

  CMsgGCToGCFantasySetMatchLeague(const CMsgGCToGCFantasySetMatchLeague& from);

  inline CMsgGCToGCFantasySetMatchLeague& operator=(const CMsgGCToGCFantasySetMatchLeague& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToGCFantasySetMatchLeague& default_instance();

  void Swap(CMsgGCToGCFantasySetMatchLeague* other);

  // implements Message ----------------------------------------------

  CMsgGCToGCFantasySetMatchLeague* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCToGCFantasySetMatchLeague& from);
  void MergeFrom(const CMsgGCToGCFantasySetMatchLeague& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 match_id = 1;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  inline ::google::protobuf::uint64 match_id() const;
  inline void set_match_id(::google::protobuf::uint64 value);

  // optional uint32 league_id = 2;
  inline bool has_league_id() const;
  inline void clear_league_id();
  static const int kLeagueIdFieldNumber = 2;
  inline ::google::protobuf::uint32 league_id() const;
  inline void set_league_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCToGCFantasySetMatchLeague)
 private:
  inline void set_has_match_id();
  inline void clear_has_match_id();
  inline void set_has_league_id();
  inline void clear_has_league_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 match_id_;
  ::google::protobuf::uint32 league_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCToGCFantasySetMatchLeague* default_instance_;
};
// -------------------------------------------------------------------

class CSODOTAMapLocationState : public ::google::protobuf::Message {
 public:
  CSODOTAMapLocationState();
  virtual ~CSODOTAMapLocationState();

  CSODOTAMapLocationState(const CSODOTAMapLocationState& from);

  inline CSODOTAMapLocationState& operator=(const CSODOTAMapLocationState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAMapLocationState& default_instance();

  void Swap(CSODOTAMapLocationState* other);

  // implements Message ----------------------------------------------

  CSODOTAMapLocationState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTAMapLocationState& from);
  void MergeFrom(const CSODOTAMapLocationState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional int32 location_id = 2;
  inline bool has_location_id() const;
  inline void clear_location_id();
  static const int kLocationIdFieldNumber = 2;
  inline ::google::protobuf::int32 location_id() const;
  inline void set_location_id(::google::protobuf::int32 value);

  // optional bool completed = 3;
  inline bool has_completed() const;
  inline void clear_completed();
  static const int kCompletedFieldNumber = 3;
  inline bool completed() const;
  inline void set_completed(bool value);

  // @@protoc_insertion_point(class_scope:CSODOTAMapLocationState)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_location_id();
  inline void clear_has_location_id();
  inline void set_has_completed();
  inline void clear_has_completed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::int32 location_id_;
  bool completed_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CSODOTAMapLocationState* default_instance_;
};
// -------------------------------------------------------------------

class CMsgNexonPartnerUpdate : public ::google::protobuf::Message {
 public:
  CMsgNexonPartnerUpdate();
  virtual ~CMsgNexonPartnerUpdate();

  CMsgNexonPartnerUpdate(const CMsgNexonPartnerUpdate& from);

  inline CMsgNexonPartnerUpdate& operator=(const CMsgNexonPartnerUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgNexonPartnerUpdate& default_instance();

  void Swap(CMsgNexonPartnerUpdate* other);

  // implements Message ----------------------------------------------

  CMsgNexonPartnerUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgNexonPartnerUpdate& from);
  void MergeFrom(const CMsgNexonPartnerUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 messagetype = 1;
  inline bool has_messagetype() const;
  inline void clear_messagetype();
  static const int kMessagetypeFieldNumber = 1;
  inline ::google::protobuf::uint32 messagetype() const;
  inline void set_messagetype(::google::protobuf::uint32 value);

  // optional uint32 timeremaining = 2;
  inline bool has_timeremaining() const;
  inline void clear_timeremaining();
  static const int kTimeremainingFieldNumber = 2;
  inline ::google::protobuf::uint32 timeremaining() const;
  inline void set_timeremaining(::google::protobuf::uint32 value);

  // optional bool terminate = 3;
  inline bool has_terminate() const;
  inline void clear_terminate();
  static const int kTerminateFieldNumber = 3;
  inline bool terminate() const;
  inline void set_terminate(bool value);

  // @@protoc_insertion_point(class_scope:CMsgNexonPartnerUpdate)
 private:
  inline void set_has_messagetype();
  inline void clear_has_messagetype();
  inline void set_has_timeremaining();
  inline void clear_has_timeremaining();
  inline void set_has_terminate();
  inline void clear_has_terminate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 messagetype_;
  ::google::protobuf::uint32 timeremaining_;
  bool terminate_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgNexonPartnerUpdate* default_instance_;
};
// -------------------------------------------------------------------

class CMsgMakeOffering : public ::google::protobuf::Message {
 public:
  CMsgMakeOffering();
  virtual ~CMsgMakeOffering();

  CMsgMakeOffering(const CMsgMakeOffering& from);

  inline CMsgMakeOffering& operator=(const CMsgMakeOffering& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgMakeOffering& default_instance();

  void Swap(CMsgMakeOffering* other);

  // implements Message ----------------------------------------------

  CMsgMakeOffering* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgMakeOffering& from);
  void MergeFrom(const CMsgMakeOffering& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint64 item_id() const;
  inline void set_item_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgMakeOffering)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 item_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgMakeOffering* default_instance_;
};
// -------------------------------------------------------------------

class CMsgRequestOfferings : public ::google::protobuf::Message {
 public:
  CMsgRequestOfferings();
  virtual ~CMsgRequestOfferings();

  CMsgRequestOfferings(const CMsgRequestOfferings& from);

  inline CMsgRequestOfferings& operator=(const CMsgRequestOfferings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgRequestOfferings& default_instance();

  void Swap(CMsgRequestOfferings* other);

  // implements Message ----------------------------------------------

  CMsgRequestOfferings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgRequestOfferings& from);
  void MergeFrom(const CMsgRequestOfferings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgRequestOfferings)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgRequestOfferings* default_instance_;
};
// -------------------------------------------------------------------

class CMsgRequestOfferingsResponse_NewYearsOffering : public ::google::protobuf::Message {
 public:
  CMsgRequestOfferingsResponse_NewYearsOffering();
  virtual ~CMsgRequestOfferingsResponse_NewYearsOffering();

  CMsgRequestOfferingsResponse_NewYearsOffering(const CMsgRequestOfferingsResponse_NewYearsOffering& from);

  inline CMsgRequestOfferingsResponse_NewYearsOffering& operator=(const CMsgRequestOfferingsResponse_NewYearsOffering& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgRequestOfferingsResponse_NewYearsOffering& default_instance();

  void Swap(CMsgRequestOfferingsResponse_NewYearsOffering* other);

  // implements Message ----------------------------------------------

  CMsgRequestOfferingsResponse_NewYearsOffering* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgRequestOfferingsResponse_NewYearsOffering& from);
  void MergeFrom(const CMsgRequestOfferingsResponse_NewYearsOffering& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 def_index = 1;
  inline bool has_def_index() const;
  inline void clear_def_index();
  static const int kDefIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 def_index() const;
  inline void set_def_index(::google::protobuf::uint32 value);

  // optional uint64 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint64 item_id() const;
  inline void set_item_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgRequestOfferingsResponse.NewYearsOffering)
 private:
  inline void set_has_def_index();
  inline void clear_has_def_index();
  inline void set_has_item_id();
  inline void clear_has_item_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 item_id_;
  ::google::protobuf::uint32 def_index_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgRequestOfferingsResponse_NewYearsOffering* default_instance_;
};
// -------------------------------------------------------------------

class CMsgRequestOfferingsResponse : public ::google::protobuf::Message {
 public:
  CMsgRequestOfferingsResponse();
  virtual ~CMsgRequestOfferingsResponse();

  CMsgRequestOfferingsResponse(const CMsgRequestOfferingsResponse& from);

  inline CMsgRequestOfferingsResponse& operator=(const CMsgRequestOfferingsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgRequestOfferingsResponse& default_instance();

  void Swap(CMsgRequestOfferingsResponse* other);

  // implements Message ----------------------------------------------

  CMsgRequestOfferingsResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgRequestOfferingsResponse& from);
  void MergeFrom(const CMsgRequestOfferingsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgRequestOfferingsResponse_NewYearsOffering NewYearsOffering;

  // accessors -------------------------------------------------------

  // repeated .CMsgRequestOfferingsResponse.NewYearsOffering offerings = 1;
  inline int offerings_size() const;
  inline void clear_offerings();
  static const int kOfferingsFieldNumber = 1;
  inline const ::CMsgRequestOfferingsResponse_NewYearsOffering& offerings(int index) const;
  inline ::CMsgRequestOfferingsResponse_NewYearsOffering* mutable_offerings(int index);
  inline ::CMsgRequestOfferingsResponse_NewYearsOffering* add_offerings();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgRequestOfferingsResponse_NewYearsOffering >&
      offerings() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgRequestOfferingsResponse_NewYearsOffering >*
      mutable_offerings();

  // optional bool completed = 2;
  inline bool has_completed() const;
  inline void clear_completed();
  static const int kCompletedFieldNumber = 2;
  inline bool completed() const;
  inline void set_completed(bool value);

  // @@protoc_insertion_point(class_scope:CMsgRequestOfferingsResponse)
 private:
  inline void set_has_completed();
  inline void clear_has_completed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgRequestOfferingsResponse_NewYearsOffering > offerings_;
  bool completed_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgRequestOfferingsResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgLeagueAdminList : public ::google::protobuf::Message {
 public:
  CMsgLeagueAdminList();
  virtual ~CMsgLeagueAdminList();

  CMsgLeagueAdminList(const CMsgLeagueAdminList& from);

  inline CMsgLeagueAdminList& operator=(const CMsgLeagueAdminList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgLeagueAdminList& default_instance();

  void Swap(CMsgLeagueAdminList* other);

  // implements Message ----------------------------------------------

  CMsgLeagueAdminList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgLeagueAdminList& from);
  void MergeFrom(const CMsgLeagueAdminList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 account_ids = 1;
  inline int account_ids_size() const;
  inline void clear_account_ids();
  static const int kAccountIdsFieldNumber = 1;
  inline ::google::protobuf::uint32 account_ids(int index) const;
  inline void set_account_ids(int index, ::google::protobuf::uint32 value);
  inline void add_account_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      account_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_account_ids();

  // @@protoc_insertion_point(class_scope:CMsgLeagueAdminList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > account_ids_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgLeagueAdminList* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPerfectWorldUserLookupRequest : public ::google::protobuf::Message {
 public:
  CMsgPerfectWorldUserLookupRequest();
  virtual ~CMsgPerfectWorldUserLookupRequest();

  CMsgPerfectWorldUserLookupRequest(const CMsgPerfectWorldUserLookupRequest& from);

  inline CMsgPerfectWorldUserLookupRequest& operator=(const CMsgPerfectWorldUserLookupRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPerfectWorldUserLookupRequest& default_instance();

  void Swap(CMsgPerfectWorldUserLookupRequest* other);

  // implements Message ----------------------------------------------

  CMsgPerfectWorldUserLookupRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPerfectWorldUserLookupRequest& from);
  void MergeFrom(const CMsgPerfectWorldUserLookupRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // @@protoc_insertion_point(class_scope:CMsgPerfectWorldUserLookupRequest)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_name_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgPerfectWorldUserLookupRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPerfectWorldUserLookupResponse : public ::google::protobuf::Message {
 public:
  CMsgPerfectWorldUserLookupResponse();
  virtual ~CMsgPerfectWorldUserLookupResponse();

  CMsgPerfectWorldUserLookupResponse(const CMsgPerfectWorldUserLookupResponse& from);

  inline CMsgPerfectWorldUserLookupResponse& operator=(const CMsgPerfectWorldUserLookupResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPerfectWorldUserLookupResponse& default_instance();

  void Swap(CMsgPerfectWorldUserLookupResponse* other);

  // implements Message ----------------------------------------------

  CMsgPerfectWorldUserLookupResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPerfectWorldUserLookupResponse& from);
  void MergeFrom(const CMsgPerfectWorldUserLookupResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgPerfectWorldUserLookupResponse_EResultCode EResultCode;
  static const EResultCode SUCCESS_ACCOUNT_FOUND = CMsgPerfectWorldUserLookupResponse_EResultCode_SUCCESS_ACCOUNT_FOUND;
  static const EResultCode ERROR_UNKNOWN = CMsgPerfectWorldUserLookupResponse_EResultCode_ERROR_UNKNOWN;
  static const EResultCode ERROR_USER_NAME_WRONG_FORMAT = CMsgPerfectWorldUserLookupResponse_EResultCode_ERROR_USER_NAME_WRONG_FORMAT;
  static const EResultCode ERROR_NO_PERFECT_WORLD_ACCOUNT_FOUND = CMsgPerfectWorldUserLookupResponse_EResultCode_ERROR_NO_PERFECT_WORLD_ACCOUNT_FOUND;
  static const EResultCode ERROR_NO_LINKED_STEAM_ACCOUNT_FOUND = CMsgPerfectWorldUserLookupResponse_EResultCode_ERROR_NO_LINKED_STEAM_ACCOUNT_FOUND;
  static inline bool EResultCode_IsValid(int value) {
    return CMsgPerfectWorldUserLookupResponse_EResultCode_IsValid(value);
  }
  static const EResultCode EResultCode_MIN =
    CMsgPerfectWorldUserLookupResponse_EResultCode_EResultCode_MIN;
  static const EResultCode EResultCode_MAX =
    CMsgPerfectWorldUserLookupResponse_EResultCode_EResultCode_MAX;
  static const int EResultCode_ARRAYSIZE =
    CMsgPerfectWorldUserLookupResponse_EResultCode_EResultCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EResultCode_descriptor() {
    return CMsgPerfectWorldUserLookupResponse_EResultCode_descriptor();
  }
  static inline const ::std::string& EResultCode_Name(EResultCode value) {
    return CMsgPerfectWorldUserLookupResponse_EResultCode_Name(value);
  }
  static inline bool EResultCode_Parse(const ::std::string& name,
      EResultCode* value) {
    return CMsgPerfectWorldUserLookupResponse_EResultCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CMsgPerfectWorldUserLookupResponse.EResultCode result_code = 1 [default = SUCCESS_ACCOUNT_FOUND];
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::CMsgPerfectWorldUserLookupResponse_EResultCode result_code() const;
  inline void set_result_code(::CMsgPerfectWorldUserLookupResponse_EResultCode value);

  // optional uint32 account_id = 2;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 2;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgPerfectWorldUserLookupResponse)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_account_id();
  inline void clear_has_account_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int result_code_;
  ::google::protobuf::uint32 account_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgPerfectWorldUserLookupResponse* default_instance_;
};
// -------------------------------------------------------------------

class CCompendiumTimestampedData : public ::google::protobuf::Message {
 public:
  CCompendiumTimestampedData();
  virtual ~CCompendiumTimestampedData();

  CCompendiumTimestampedData(const CCompendiumTimestampedData& from);

  inline CCompendiumTimestampedData& operator=(const CCompendiumTimestampedData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CCompendiumTimestampedData& default_instance();

  void Swap(CCompendiumTimestampedData* other);

  // implements Message ----------------------------------------------

  CCompendiumTimestampedData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CCompendiumTimestampedData& from);
  void MergeFrom(const CCompendiumTimestampedData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 game_time = 1;
  inline bool has_game_time() const;
  inline void clear_game_time();
  static const int kGameTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 game_time() const;
  inline void set_game_time(::google::protobuf::uint32 value);

  // optional uint32 gpm = 2;
  inline bool has_gpm() const;
  inline void clear_gpm();
  static const int kGpmFieldNumber = 2;
  inline ::google::protobuf::uint32 gpm() const;
  inline void set_gpm(::google::protobuf::uint32 value);

  // optional uint32 xpm = 3;
  inline bool has_xpm() const;
  inline void clear_xpm();
  static const int kXpmFieldNumber = 3;
  inline ::google::protobuf::uint32 xpm() const;
  inline void set_xpm(::google::protobuf::uint32 value);

  // optional uint32 kills = 4;
  inline bool has_kills() const;
  inline void clear_kills();
  static const int kKillsFieldNumber = 4;
  inline ::google::protobuf::uint32 kills() const;
  inline void set_kills(::google::protobuf::uint32 value);

  // optional uint32 deaths = 5;
  inline bool has_deaths() const;
  inline void clear_deaths();
  static const int kDeathsFieldNumber = 5;
  inline ::google::protobuf::uint32 deaths() const;
  inline void set_deaths(::google::protobuf::uint32 value);

  // repeated uint32 item_purchases = 6;
  inline int item_purchases_size() const;
  inline void clear_item_purchases();
  static const int kItemPurchasesFieldNumber = 6;
  inline ::google::protobuf::uint32 item_purchases(int index) const;
  inline void set_item_purchases(int index, ::google::protobuf::uint32 value);
  inline void add_item_purchases(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      item_purchases() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_item_purchases();

  // @@protoc_insertion_point(class_scope:CCompendiumTimestampedData)
 private:
  inline void set_has_game_time();
  inline void clear_has_game_time();
  inline void set_has_gpm();
  inline void clear_has_gpm();
  inline void set_has_xpm();
  inline void clear_has_xpm();
  inline void set_has_kills();
  inline void clear_has_kills();
  inline void set_has_deaths();
  inline void clear_has_deaths();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 game_time_;
  ::google::protobuf::uint32 gpm_;
  ::google::protobuf::uint32 xpm_;
  ::google::protobuf::uint32 kills_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > item_purchases_;
  ::google::protobuf::uint32 deaths_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CCompendiumTimestampedData* default_instance_;
};
// -------------------------------------------------------------------

class CCompendiumGameTimeline : public ::google::protobuf::Message {
 public:
  CCompendiumGameTimeline();
  virtual ~CCompendiumGameTimeline();

  CCompendiumGameTimeline(const CCompendiumGameTimeline& from);

  inline CCompendiumGameTimeline& operator=(const CCompendiumGameTimeline& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CCompendiumGameTimeline& default_instance();

  void Swap(CCompendiumGameTimeline* other);

  // implements Message ----------------------------------------------

  CCompendiumGameTimeline* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CCompendiumGameTimeline& from);
  void MergeFrom(const CCompendiumGameTimeline& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CCompendiumTimestampedData data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::CCompendiumTimestampedData& data(int index) const;
  inline ::CCompendiumTimestampedData* mutable_data(int index);
  inline ::CCompendiumTimestampedData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::CCompendiumTimestampedData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::CCompendiumTimestampedData >*
      mutable_data();

  // repeated string tags = 2;
  inline int tags_size() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 2;
  inline const ::std::string& tags(int index) const;
  inline ::std::string* mutable_tags(int index);
  inline void set_tags(int index, const ::std::string& value);
  inline void set_tags(int index, const char* value);
  inline void set_tags(int index, const char* value, size_t size);
  inline ::std::string* add_tags();
  inline void add_tags(const ::std::string& value);
  inline void add_tags(const char* value);
  inline void add_tags(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // @@protoc_insertion_point(class_scope:CCompendiumGameTimeline)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CCompendiumTimestampedData > data_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CCompendiumGameTimeline* default_instance_;
};
// -------------------------------------------------------------------

class CCompendiumGameList : public ::google::protobuf::Message {
 public:
  CCompendiumGameList();
  virtual ~CCompendiumGameList();

  CCompendiumGameList(const CCompendiumGameList& from);

  inline CCompendiumGameList& operator=(const CCompendiumGameList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CCompendiumGameList& default_instance();

  void Swap(CCompendiumGameList* other);

  // implements Message ----------------------------------------------

  CCompendiumGameList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CCompendiumGameList& from);
  void MergeFrom(const CCompendiumGameList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CCompendiumGameTimeline games = 1;
  inline int games_size() const;
  inline void clear_games();
  static const int kGamesFieldNumber = 1;
  inline const ::CCompendiumGameTimeline& games(int index) const;
  inline ::CCompendiumGameTimeline* mutable_games(int index);
  inline ::CCompendiumGameTimeline* add_games();
  inline const ::google::protobuf::RepeatedPtrField< ::CCompendiumGameTimeline >&
      games() const;
  inline ::google::protobuf::RepeatedPtrField< ::CCompendiumGameTimeline >*
      mutable_games();

  // @@protoc_insertion_point(class_scope:CCompendiumGameList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CCompendiumGameTimeline > games_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CCompendiumGameList* default_instance_;
};
// -------------------------------------------------------------------

class CAdditionalEquipSlot : public ::google::protobuf::Message {
 public:
  CAdditionalEquipSlot();
  virtual ~CAdditionalEquipSlot();

  CAdditionalEquipSlot(const CAdditionalEquipSlot& from);

  inline CAdditionalEquipSlot& operator=(const CAdditionalEquipSlot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAdditionalEquipSlot& default_instance();

  void Swap(CAdditionalEquipSlot* other);

  // implements Message ----------------------------------------------

  CAdditionalEquipSlot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAdditionalEquipSlot& from);
  void MergeFrom(const CAdditionalEquipSlot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 class_id = 1;
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 1;
  inline ::google::protobuf::uint32 class_id() const;
  inline void set_class_id(::google::protobuf::uint32 value);

  // optional uint32 slot_id = 2;
  inline bool has_slot_id() const;
  inline void clear_slot_id();
  static const int kSlotIdFieldNumber = 2;
  inline ::google::protobuf::uint32 slot_id() const;
  inline void set_slot_id(::google::protobuf::uint32 value);

  // optional uint32 def_index = 3;
  inline bool has_def_index() const;
  inline void clear_def_index();
  static const int kDefIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 def_index() const;
  inline void set_def_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CAdditionalEquipSlot)
 private:
  inline void set_has_class_id();
  inline void clear_has_class_id();
  inline void set_has_slot_id();
  inline void clear_has_slot_id();
  inline void set_has_def_index();
  inline void clear_has_def_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 class_id_;
  ::google::protobuf::uint32 slot_id_;
  ::google::protobuf::uint32 def_index_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CAdditionalEquipSlot* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARedeemItem : public ::google::protobuf::Message {
 public:
  CMsgDOTARedeemItem();
  virtual ~CMsgDOTARedeemItem();

  CMsgDOTARedeemItem(const CMsgDOTARedeemItem& from);

  inline CMsgDOTARedeemItem& operator=(const CMsgDOTARedeemItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARedeemItem& default_instance();

  void Swap(CMsgDOTARedeemItem* other);

  // implements Message ----------------------------------------------

  CMsgDOTARedeemItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARedeemItem& from);
  void MergeFrom(const CMsgDOTARedeemItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 currency_id = 1;
  inline bool has_currency_id() const;
  inline void clear_currency_id();
  static const int kCurrencyIdFieldNumber = 1;
  inline ::google::protobuf::uint64 currency_id() const;
  inline void set_currency_id(::google::protobuf::uint64 value);

  // optional uint32 purchase_def = 2;
  inline bool has_purchase_def() const;
  inline void clear_purchase_def();
  static const int kPurchaseDefFieldNumber = 2;
  inline ::google::protobuf::uint32 purchase_def() const;
  inline void set_purchase_def(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARedeemItem)
 private:
  inline void set_has_currency_id();
  inline void clear_has_currency_id();
  inline void set_has_purchase_def();
  inline void clear_has_purchase_def();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 currency_id_;
  ::google::protobuf::uint32 purchase_def_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARedeemItem* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARedeemItemResponse : public ::google::protobuf::Message {
 public:
  CMsgDOTARedeemItemResponse();
  virtual ~CMsgDOTARedeemItemResponse();

  CMsgDOTARedeemItemResponse(const CMsgDOTARedeemItemResponse& from);

  inline CMsgDOTARedeemItemResponse& operator=(const CMsgDOTARedeemItemResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARedeemItemResponse& default_instance();

  void Swap(CMsgDOTARedeemItemResponse* other);

  // implements Message ----------------------------------------------

  CMsgDOTARedeemItemResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARedeemItemResponse& from);
  void MergeFrom(const CMsgDOTARedeemItemResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgDOTARedeemItemResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARedeemItemResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTACombatLogEntry : public ::google::protobuf::Message {
 public:
  CMsgDOTACombatLogEntry();
  virtual ~CMsgDOTACombatLogEntry();

  CMsgDOTACombatLogEntry(const CMsgDOTACombatLogEntry& from);

  inline CMsgDOTACombatLogEntry& operator=(const CMsgDOTACombatLogEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTACombatLogEntry& default_instance();

  void Swap(CMsgDOTACombatLogEntry* other);

  // implements Message ----------------------------------------------

  CMsgDOTACombatLogEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTACombatLogEntry& from);
  void MergeFrom(const CMsgDOTACombatLogEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_DAMAGE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::DOTA_COMBATLOG_TYPES type() const;
  inline void set_type(::DOTA_COMBATLOG_TYPES value);

  // optional uint32 target_name = 2;
  inline bool has_target_name() const;
  inline void clear_target_name();
  static const int kTargetNameFieldNumber = 2;
  inline ::google::protobuf::uint32 target_name() const;
  inline void set_target_name(::google::protobuf::uint32 value);

  // optional uint32 target_source_name = 3;
  inline bool has_target_source_name() const;
  inline void clear_target_source_name();
  static const int kTargetSourceNameFieldNumber = 3;
  inline ::google::protobuf::uint32 target_source_name() const;
  inline void set_target_source_name(::google::protobuf::uint32 value);

  // optional uint32 attacker_name = 4;
  inline bool has_attacker_name() const;
  inline void clear_attacker_name();
  static const int kAttackerNameFieldNumber = 4;
  inline ::google::protobuf::uint32 attacker_name() const;
  inline void set_attacker_name(::google::protobuf::uint32 value);

  // optional uint32 damage_source_name = 5;
  inline bool has_damage_source_name() const;
  inline void clear_damage_source_name();
  static const int kDamageSourceNameFieldNumber = 5;
  inline ::google::protobuf::uint32 damage_source_name() const;
  inline void set_damage_source_name(::google::protobuf::uint32 value);

  // optional uint32 inflictor_name = 6;
  inline bool has_inflictor_name() const;
  inline void clear_inflictor_name();
  static const int kInflictorNameFieldNumber = 6;
  inline ::google::protobuf::uint32 inflictor_name() const;
  inline void set_inflictor_name(::google::protobuf::uint32 value);

  // optional bool is_attacker_illusion = 7;
  inline bool has_is_attacker_illusion() const;
  inline void clear_is_attacker_illusion();
  static const int kIsAttackerIllusionFieldNumber = 7;
  inline bool is_attacker_illusion() const;
  inline void set_is_attacker_illusion(bool value);

  // optional bool is_attacker_hero = 8;
  inline bool has_is_attacker_hero() const;
  inline void clear_is_attacker_hero();
  static const int kIsAttackerHeroFieldNumber = 8;
  inline bool is_attacker_hero() const;
  inline void set_is_attacker_hero(bool value);

  // optional bool is_target_illusion = 9;
  inline bool has_is_target_illusion() const;
  inline void clear_is_target_illusion();
  static const int kIsTargetIllusionFieldNumber = 9;
  inline bool is_target_illusion() const;
  inline void set_is_target_illusion(bool value);

  // optional bool is_target_hero = 10;
  inline bool has_is_target_hero() const;
  inline void clear_is_target_hero();
  static const int kIsTargetHeroFieldNumber = 10;
  inline bool is_target_hero() const;
  inline void set_is_target_hero(bool value);

  // optional bool is_visible_radiant = 11;
  inline bool has_is_visible_radiant() const;
  inline void clear_is_visible_radiant();
  static const int kIsVisibleRadiantFieldNumber = 11;
  inline bool is_visible_radiant() const;
  inline void set_is_visible_radiant(bool value);

  // optional bool is_visible_dire = 12;
  inline bool has_is_visible_dire() const;
  inline void clear_is_visible_dire();
  static const int kIsVisibleDireFieldNumber = 12;
  inline bool is_visible_dire() const;
  inline void set_is_visible_dire(bool value);

  // optional uint32 value = 13;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 13;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // optional int32 health = 14;
  inline bool has_health() const;
  inline void clear_health();
  static const int kHealthFieldNumber = 14;
  inline ::google::protobuf::int32 health() const;
  inline void set_health(::google::protobuf::int32 value);

  // optional float timestamp = 15;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 15;
  inline float timestamp() const;
  inline void set_timestamp(float value);

  // optional float stun_duration = 16;
  inline bool has_stun_duration() const;
  inline void clear_stun_duration();
  static const int kStunDurationFieldNumber = 16;
  inline float stun_duration() const;
  inline void set_stun_duration(float value);

  // optional float slow_duration = 17;
  inline bool has_slow_duration() const;
  inline void clear_slow_duration();
  static const int kSlowDurationFieldNumber = 17;
  inline float slow_duration() const;
  inline void set_slow_duration(float value);

  // optional bool is_ability_toggle_on = 18;
  inline bool has_is_ability_toggle_on() const;
  inline void clear_is_ability_toggle_on();
  static const int kIsAbilityToggleOnFieldNumber = 18;
  inline bool is_ability_toggle_on() const;
  inline void set_is_ability_toggle_on(bool value);

  // optional bool is_ability_toggle_off = 19;
  inline bool has_is_ability_toggle_off() const;
  inline void clear_is_ability_toggle_off();
  static const int kIsAbilityToggleOffFieldNumber = 19;
  inline bool is_ability_toggle_off() const;
  inline void set_is_ability_toggle_off(bool value);

  // optional uint32 ability_level = 20;
  inline bool has_ability_level() const;
  inline void clear_ability_level();
  static const int kAbilityLevelFieldNumber = 20;
  inline ::google::protobuf::uint32 ability_level() const;
  inline void set_ability_level(::google::protobuf::uint32 value);

  // optional float location_x = 21;
  inline bool has_location_x() const;
  inline void clear_location_x();
  static const int kLocationXFieldNumber = 21;
  inline float location_x() const;
  inline void set_location_x(float value);

  // optional float location_y = 22;
  inline bool has_location_y() const;
  inline void clear_location_y();
  static const int kLocationYFieldNumber = 22;
  inline float location_y() const;
  inline void set_location_y(float value);

  // optional uint32 gold_reason = 23;
  inline bool has_gold_reason() const;
  inline void clear_gold_reason();
  static const int kGoldReasonFieldNumber = 23;
  inline ::google::protobuf::uint32 gold_reason() const;
  inline void set_gold_reason(::google::protobuf::uint32 value);

  // optional float timestamp_raw = 24;
  inline bool has_timestamp_raw() const;
  inline void clear_timestamp_raw();
  static const int kTimestampRawFieldNumber = 24;
  inline float timestamp_raw() const;
  inline void set_timestamp_raw(float value);

  // optional float modifier_duration = 25;
  inline bool has_modifier_duration() const;
  inline void clear_modifier_duration();
  static const int kModifierDurationFieldNumber = 25;
  inline float modifier_duration() const;
  inline void set_modifier_duration(float value);

  // optional uint32 xp_reason = 26;
  inline bool has_xp_reason() const;
  inline void clear_xp_reason();
  static const int kXpReasonFieldNumber = 26;
  inline ::google::protobuf::uint32 xp_reason() const;
  inline void set_xp_reason(::google::protobuf::uint32 value);

  // optional uint32 last_hits = 27;
  inline bool has_last_hits() const;
  inline void clear_last_hits();
  static const int kLastHitsFieldNumber = 27;
  inline ::google::protobuf::uint32 last_hits() const;
  inline void set_last_hits(::google::protobuf::uint32 value);

  // optional uint32 attacker_team = 28;
  inline bool has_attacker_team() const;
  inline void clear_attacker_team();
  static const int kAttackerTeamFieldNumber = 28;
  inline ::google::protobuf::uint32 attacker_team() const;
  inline void set_attacker_team(::google::protobuf::uint32 value);

  // optional uint32 target_team = 29;
  inline bool has_target_team() const;
  inline void clear_target_team();
  static const int kTargetTeamFieldNumber = 29;
  inline ::google::protobuf::uint32 target_team() const;
  inline void set_target_team(::google::protobuf::uint32 value);

  // optional uint32 obs_wards_placed = 30;
  inline bool has_obs_wards_placed() const;
  inline void clear_obs_wards_placed();
  static const int kObsWardsPlacedFieldNumber = 30;
  inline ::google::protobuf::uint32 obs_wards_placed() const;
  inline void set_obs_wards_placed(::google::protobuf::uint32 value);

  // optional uint32 assist_player0 = 31;
  inline bool has_assist_player0() const;
  inline void clear_assist_player0();
  static const int kAssistPlayer0FieldNumber = 31;
  inline ::google::protobuf::uint32 assist_player0() const;
  inline void set_assist_player0(::google::protobuf::uint32 value);

  // optional uint32 assist_player1 = 32;
  inline bool has_assist_player1() const;
  inline void clear_assist_player1();
  static const int kAssistPlayer1FieldNumber = 32;
  inline ::google::protobuf::uint32 assist_player1() const;
  inline void set_assist_player1(::google::protobuf::uint32 value);

  // optional uint32 assist_player2 = 33;
  inline bool has_assist_player2() const;
  inline void clear_assist_player2();
  static const int kAssistPlayer2FieldNumber = 33;
  inline ::google::protobuf::uint32 assist_player2() const;
  inline void set_assist_player2(::google::protobuf::uint32 value);

  // optional uint32 assist_player3 = 34;
  inline bool has_assist_player3() const;
  inline void clear_assist_player3();
  static const int kAssistPlayer3FieldNumber = 34;
  inline ::google::protobuf::uint32 assist_player3() const;
  inline void set_assist_player3(::google::protobuf::uint32 value);

  // optional uint32 stack_count = 35;
  inline bool has_stack_count() const;
  inline void clear_stack_count();
  static const int kStackCountFieldNumber = 35;
  inline ::google::protobuf::uint32 stack_count() const;
  inline void set_stack_count(::google::protobuf::uint32 value);

  // optional bool hidden_modifier = 36;
  inline bool has_hidden_modifier() const;
  inline void clear_hidden_modifier();
  static const int kHiddenModifierFieldNumber = 36;
  inline bool hidden_modifier() const;
  inline void set_hidden_modifier(bool value);

  // optional bool is_target_building = 37;
  inline bool has_is_target_building() const;
  inline void clear_is_target_building();
  static const int kIsTargetBuildingFieldNumber = 37;
  inline bool is_target_building() const;
  inline void set_is_target_building(bool value);

  // optional uint32 neutral_camp_type = 38;
  inline bool has_neutral_camp_type() const;
  inline void clear_neutral_camp_type();
  static const int kNeutralCampTypeFieldNumber = 38;
  inline ::google::protobuf::uint32 neutral_camp_type() const;
  inline void set_neutral_camp_type(::google::protobuf::uint32 value);

  // optional uint32 rune_type = 39;
  inline bool has_rune_type() const;
  inline void clear_rune_type();
  static const int kRuneTypeFieldNumber = 39;
  inline ::google::protobuf::uint32 rune_type() const;
  inline void set_rune_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTACombatLogEntry)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_target_name();
  inline void clear_has_target_name();
  inline void set_has_target_source_name();
  inline void clear_has_target_source_name();
  inline void set_has_attacker_name();
  inline void clear_has_attacker_name();
  inline void set_has_damage_source_name();
  inline void clear_has_damage_source_name();
  inline void set_has_inflictor_name();
  inline void clear_has_inflictor_name();
  inline void set_has_is_attacker_illusion();
  inline void clear_has_is_attacker_illusion();
  inline void set_has_is_attacker_hero();
  inline void clear_has_is_attacker_hero();
  inline void set_has_is_target_illusion();
  inline void clear_has_is_target_illusion();
  inline void set_has_is_target_hero();
  inline void clear_has_is_target_hero();
  inline void set_has_is_visible_radiant();
  inline void clear_has_is_visible_radiant();
  inline void set_has_is_visible_dire();
  inline void clear_has_is_visible_dire();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_health();
  inline void clear_has_health();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_stun_duration();
  inline void clear_has_stun_duration();
  inline void set_has_slow_duration();
  inline void clear_has_slow_duration();
  inline void set_has_is_ability_toggle_on();
  inline void clear_has_is_ability_toggle_on();
  inline void set_has_is_ability_toggle_off();
  inline void clear_has_is_ability_toggle_off();
  inline void set_has_ability_level();
  inline void clear_has_ability_level();
  inline void set_has_location_x();
  inline void clear_has_location_x();
  inline void set_has_location_y();
  inline void clear_has_location_y();
  inline void set_has_gold_reason();
  inline void clear_has_gold_reason();
  inline void set_has_timestamp_raw();
  inline void clear_has_timestamp_raw();
  inline void set_has_modifier_duration();
  inline void clear_has_modifier_duration();
  inline void set_has_xp_reason();
  inline void clear_has_xp_reason();
  inline void set_has_last_hits();
  inline void clear_has_last_hits();
  inline void set_has_attacker_team();
  inline void clear_has_attacker_team();
  inline void set_has_target_team();
  inline void clear_has_target_team();
  inline void set_has_obs_wards_placed();
  inline void clear_has_obs_wards_placed();
  inline void set_has_assist_player0();
  inline void clear_has_assist_player0();
  inline void set_has_assist_player1();
  inline void clear_has_assist_player1();
  inline void set_has_assist_player2();
  inline void clear_has_assist_player2();
  inline void set_has_assist_player3();
  inline void clear_has_assist_player3();
  inline void set_has_stack_count();
  inline void clear_has_stack_count();
  inline void set_has_hidden_modifier();
  inline void clear_has_hidden_modifier();
  inline void set_has_is_target_building();
  inline void clear_has_is_target_building();
  inline void set_has_neutral_camp_type();
  inline void clear_has_neutral_camp_type();
  inline void set_has_rune_type();
  inline void clear_has_rune_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  int type_;
  ::google::protobuf::uint32 target_name_;
  ::google::protobuf::uint32 target_source_name_;
  ::google::protobuf::uint32 attacker_name_;
  ::google::protobuf::uint32 damage_source_name_;
  ::google::protobuf::uint32 inflictor_name_;
  bool is_attacker_illusion_;
  bool is_attacker_hero_;
  bool is_target_illusion_;
  bool is_target_hero_;
  ::google::protobuf::uint32 value_;
  ::google::protobuf::int32 health_;
  float timestamp_;
  bool is_visible_radiant_;
  bool is_visible_dire_;
  bool is_ability_toggle_on_;
  bool is_ability_toggle_off_;
  float stun_duration_;
  float slow_duration_;
  ::google::protobuf::uint32 ability_level_;
  float location_x_;
  float location_y_;
  ::google::protobuf::uint32 gold_reason_;
  float timestamp_raw_;
  float modifier_duration_;
  ::google::protobuf::uint32 xp_reason_;
  ::google::protobuf::uint32 last_hits_;
  ::google::protobuf::uint32 attacker_team_;
  ::google::protobuf::uint32 target_team_;
  ::google::protobuf::uint32 obs_wards_placed_;
  ::google::protobuf::uint32 assist_player0_;
  ::google::protobuf::uint32 assist_player1_;
  ::google::protobuf::uint32 assist_player2_;
  ::google::protobuf::uint32 assist_player3_;
  ::google::protobuf::uint32 stack_count_;
  bool hidden_modifier_;
  bool is_target_building_;
  ::google::protobuf::uint32 neutral_camp_type_;
  ::google::protobuf::uint32 rune_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTACombatLogEntry* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Trophy : public ::google::protobuf::Message {
 public:
  CMsgDOTAProfileCard_Slot_Trophy();
  virtual ~CMsgDOTAProfileCard_Slot_Trophy();

  CMsgDOTAProfileCard_Slot_Trophy(const CMsgDOTAProfileCard_Slot_Trophy& from);

  inline CMsgDOTAProfileCard_Slot_Trophy& operator=(const CMsgDOTAProfileCard_Slot_Trophy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProfileCard_Slot_Trophy& default_instance();

  void Swap(CMsgDOTAProfileCard_Slot_Trophy* other);

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard_Slot_Trophy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Trophy& from);
  void MergeFrom(const CMsgDOTAProfileCard_Slot_Trophy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 trophy_id = 1;
  inline bool has_trophy_id() const;
  inline void clear_trophy_id();
  static const int kTrophyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 trophy_id() const;
  inline void set_trophy_id(::google::protobuf::uint32 value);

  // optional uint32 trophy_score = 2;
  inline bool has_trophy_score() const;
  inline void clear_trophy_score();
  static const int kTrophyScoreFieldNumber = 2;
  inline ::google::protobuf::uint32 trophy_score() const;
  inline void set_trophy_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard.Slot.Trophy)
 private:
  inline void set_has_trophy_id();
  inline void clear_has_trophy_id();
  inline void set_has_trophy_score();
  inline void clear_has_trophy_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 trophy_id_;
  ::google::protobuf::uint32 trophy_score_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAProfileCard_Slot_Trophy* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Stat : public ::google::protobuf::Message {
 public:
  CMsgDOTAProfileCard_Slot_Stat();
  virtual ~CMsgDOTAProfileCard_Slot_Stat();

  CMsgDOTAProfileCard_Slot_Stat(const CMsgDOTAProfileCard_Slot_Stat& from);

  inline CMsgDOTAProfileCard_Slot_Stat& operator=(const CMsgDOTAProfileCard_Slot_Stat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProfileCard_Slot_Stat& default_instance();

  void Swap(CMsgDOTAProfileCard_Slot_Stat* other);

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard_Slot_Stat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Stat& from);
  void MergeFrom(const CMsgDOTAProfileCard_Slot_Stat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_SoloRank];
  inline bool has_stat_id() const;
  inline void clear_stat_id();
  static const int kStatIdFieldNumber = 1;
  inline ::CMsgDOTAProfileCard_EStatID stat_id() const;
  inline void set_stat_id(::CMsgDOTAProfileCard_EStatID value);

  // optional uint32 stat_score = 2;
  inline bool has_stat_score() const;
  inline void clear_stat_score();
  static const int kStatScoreFieldNumber = 2;
  inline ::google::protobuf::uint32 stat_score() const;
  inline void set_stat_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard.Slot.Stat)
 private:
  inline void set_has_stat_id();
  inline void clear_has_stat_id();
  inline void set_has_stat_score();
  inline void clear_has_stat_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int stat_id_;
  ::google::protobuf::uint32 stat_score_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAProfileCard_Slot_Stat* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Item : public ::google::protobuf::Message {
 public:
  CMsgDOTAProfileCard_Slot_Item();
  virtual ~CMsgDOTAProfileCard_Slot_Item();

  CMsgDOTAProfileCard_Slot_Item(const CMsgDOTAProfileCard_Slot_Item& from);

  inline CMsgDOTAProfileCard_Slot_Item& operator=(const CMsgDOTAProfileCard_Slot_Item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProfileCard_Slot_Item& default_instance();

  void Swap(CMsgDOTAProfileCard_Slot_Item* other);

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard_Slot_Item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Item& from);
  void MergeFrom(const CMsgDOTAProfileCard_Slot_Item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes serialized_item = 1;
  inline bool has_serialized_item() const;
  inline void clear_serialized_item();
  static const int kSerializedItemFieldNumber = 1;
  inline const ::std::string& serialized_item() const;
  inline void set_serialized_item(const ::std::string& value);
  inline void set_serialized_item(const char* value);
  inline void set_serialized_item(const void* value, size_t size);
  inline ::std::string* mutable_serialized_item();
  inline ::std::string* release_serialized_item();
  inline void set_allocated_serialized_item(::std::string* serialized_item);

  // optional uint64 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint64 item_id() const;
  inline void set_item_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard.Slot.Item)
 private:
  inline void set_has_serialized_item();
  inline void clear_has_serialized_item();
  inline void set_has_item_id();
  inline void clear_has_item_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* serialized_item_;
  ::google::protobuf::uint64 item_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAProfileCard_Slot_Item* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Hero : public ::google::protobuf::Message {
 public:
  CMsgDOTAProfileCard_Slot_Hero();
  virtual ~CMsgDOTAProfileCard_Slot_Hero();

  CMsgDOTAProfileCard_Slot_Hero(const CMsgDOTAProfileCard_Slot_Hero& from);

  inline CMsgDOTAProfileCard_Slot_Hero& operator=(const CMsgDOTAProfileCard_Slot_Hero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProfileCard_Slot_Hero& default_instance();

  void Swap(CMsgDOTAProfileCard_Slot_Hero* other);

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard_Slot_Hero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Hero& from);
  void MergeFrom(const CMsgDOTAProfileCard_Slot_Hero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hero_id = 1;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 hero_wins = 2;
  inline bool has_hero_wins() const;
  inline void clear_hero_wins();
  static const int kHeroWinsFieldNumber = 2;
  inline ::google::protobuf::uint32 hero_wins() const;
  inline void set_hero_wins(::google::protobuf::uint32 value);

  // optional uint32 hero_losses = 3;
  inline bool has_hero_losses() const;
  inline void clear_hero_losses();
  static const int kHeroLossesFieldNumber = 3;
  inline ::google::protobuf::uint32 hero_losses() const;
  inline void set_hero_losses(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard.Slot.Hero)
 private:
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_hero_wins();
  inline void clear_has_hero_wins();
  inline void set_has_hero_losses();
  inline void clear_has_hero_losses();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 hero_wins_;
  ::google::protobuf::uint32 hero_losses_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAProfileCard_Slot_Hero* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Emoticon : public ::google::protobuf::Message {
 public:
  CMsgDOTAProfileCard_Slot_Emoticon();
  virtual ~CMsgDOTAProfileCard_Slot_Emoticon();

  CMsgDOTAProfileCard_Slot_Emoticon(const CMsgDOTAProfileCard_Slot_Emoticon& from);

  inline CMsgDOTAProfileCard_Slot_Emoticon& operator=(const CMsgDOTAProfileCard_Slot_Emoticon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProfileCard_Slot_Emoticon& default_instance();

  void Swap(CMsgDOTAProfileCard_Slot_Emoticon* other);

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard_Slot_Emoticon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Emoticon& from);
  void MergeFrom(const CMsgDOTAProfileCard_Slot_Emoticon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 emoticon_id = 1;
  inline bool has_emoticon_id() const;
  inline void clear_emoticon_id();
  static const int kEmoticonIdFieldNumber = 1;
  inline ::google::protobuf::uint32 emoticon_id() const;
  inline void set_emoticon_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard.Slot.Emoticon)
 private:
  inline void set_has_emoticon_id();
  inline void clear_has_emoticon_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 emoticon_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAProfileCard_Slot_Emoticon* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot : public ::google::protobuf::Message {
 public:
  CMsgDOTAProfileCard_Slot();
  virtual ~CMsgDOTAProfileCard_Slot();

  CMsgDOTAProfileCard_Slot(const CMsgDOTAProfileCard_Slot& from);

  inline CMsgDOTAProfileCard_Slot& operator=(const CMsgDOTAProfileCard_Slot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProfileCard_Slot& default_instance();

  void Swap(CMsgDOTAProfileCard_Slot* other);

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard_Slot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAProfileCard_Slot& from);
  void MergeFrom(const CMsgDOTAProfileCard_Slot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAProfileCard_Slot_Trophy Trophy;
  typedef CMsgDOTAProfileCard_Slot_Stat Stat;
  typedef CMsgDOTAProfileCard_Slot_Item Item;
  typedef CMsgDOTAProfileCard_Slot_Hero Hero;
  typedef CMsgDOTAProfileCard_Slot_Emoticon Emoticon;

  // accessors -------------------------------------------------------

  // optional uint32 slot_id = 1;
  inline bool has_slot_id() const;
  inline void clear_slot_id();
  static const int kSlotIdFieldNumber = 1;
  inline ::google::protobuf::uint32 slot_id() const;
  inline void set_slot_id(::google::protobuf::uint32 value);

  // optional .CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
  inline bool has_trophy() const;
  inline void clear_trophy();
  static const int kTrophyFieldNumber = 2;
  inline const ::CMsgDOTAProfileCard_Slot_Trophy& trophy() const;
  inline ::CMsgDOTAProfileCard_Slot_Trophy* mutable_trophy();
  inline ::CMsgDOTAProfileCard_Slot_Trophy* release_trophy();
  inline void set_allocated_trophy(::CMsgDOTAProfileCard_Slot_Trophy* trophy);

  // optional .CMsgDOTAProfileCard.Slot.Stat stat = 3;
  inline bool has_stat() const;
  inline void clear_stat();
  static const int kStatFieldNumber = 3;
  inline const ::CMsgDOTAProfileCard_Slot_Stat& stat() const;
  inline ::CMsgDOTAProfileCard_Slot_Stat* mutable_stat();
  inline ::CMsgDOTAProfileCard_Slot_Stat* release_stat();
  inline void set_allocated_stat(::CMsgDOTAProfileCard_Slot_Stat* stat);

  // optional .CMsgDOTAProfileCard.Slot.Item item = 4;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 4;
  inline const ::CMsgDOTAProfileCard_Slot_Item& item() const;
  inline ::CMsgDOTAProfileCard_Slot_Item* mutable_item();
  inline ::CMsgDOTAProfileCard_Slot_Item* release_item();
  inline void set_allocated_item(::CMsgDOTAProfileCard_Slot_Item* item);

  // optional .CMsgDOTAProfileCard.Slot.Hero hero = 5;
  inline bool has_hero() const;
  inline void clear_hero();
  static const int kHeroFieldNumber = 5;
  inline const ::CMsgDOTAProfileCard_Slot_Hero& hero() const;
  inline ::CMsgDOTAProfileCard_Slot_Hero* mutable_hero();
  inline ::CMsgDOTAProfileCard_Slot_Hero* release_hero();
  inline void set_allocated_hero(::CMsgDOTAProfileCard_Slot_Hero* hero);

  // optional .CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
  inline bool has_emoticon() const;
  inline void clear_emoticon();
  static const int kEmoticonFieldNumber = 6;
  inline const ::CMsgDOTAProfileCard_Slot_Emoticon& emoticon() const;
  inline ::CMsgDOTAProfileCard_Slot_Emoticon* mutable_emoticon();
  inline ::CMsgDOTAProfileCard_Slot_Emoticon* release_emoticon();
  inline void set_allocated_emoticon(::CMsgDOTAProfileCard_Slot_Emoticon* emoticon);

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard.Slot)
 private:
  inline void set_has_slot_id();
  inline void clear_has_slot_id();
  inline void set_has_trophy();
  inline void clear_has_trophy();
  inline void set_has_stat();
  inline void clear_has_stat();
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_hero();
  inline void clear_has_hero();
  inline void set_has_emoticon();
  inline void clear_has_emoticon();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgDOTAProfileCard_Slot_Trophy* trophy_;
  ::CMsgDOTAProfileCard_Slot_Stat* stat_;
  ::CMsgDOTAProfileCard_Slot_Item* item_;
  ::CMsgDOTAProfileCard_Slot_Hero* hero_;
  ::CMsgDOTAProfileCard_Slot_Emoticon* emoticon_;
  ::google::protobuf::uint32 slot_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAProfileCard_Slot* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard : public ::google::protobuf::Message {
 public:
  CMsgDOTAProfileCard();
  virtual ~CMsgDOTAProfileCard();

  CMsgDOTAProfileCard(const CMsgDOTAProfileCard& from);

  inline CMsgDOTAProfileCard& operator=(const CMsgDOTAProfileCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProfileCard& default_instance();

  void Swap(CMsgDOTAProfileCard* other);

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAProfileCard& from);
  void MergeFrom(const CMsgDOTAProfileCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAProfileCard_Slot Slot;

  typedef CMsgDOTAProfileCard_EStatID EStatID;
  static const EStatID k_eStat_SoloRank = CMsgDOTAProfileCard_EStatID_k_eStat_SoloRank;
  static const EStatID k_eStat_PartyRank = CMsgDOTAProfileCard_EStatID_k_eStat_PartyRank;
  static const EStatID k_eStat_Wins = CMsgDOTAProfileCard_EStatID_k_eStat_Wins;
  static const EStatID k_eStat_Commends = CMsgDOTAProfileCard_EStatID_k_eStat_Commends;
  static const EStatID k_eStat_GamesPlayed = CMsgDOTAProfileCard_EStatID_k_eStat_GamesPlayed;
  static const EStatID k_eStat_FirstMatchDate = CMsgDOTAProfileCard_EStatID_k_eStat_FirstMatchDate;
  static inline bool EStatID_IsValid(int value) {
    return CMsgDOTAProfileCard_EStatID_IsValid(value);
  }
  static const EStatID EStatID_MIN =
    CMsgDOTAProfileCard_EStatID_EStatID_MIN;
  static const EStatID EStatID_MAX =
    CMsgDOTAProfileCard_EStatID_EStatID_MAX;
  static const int EStatID_ARRAYSIZE =
    CMsgDOTAProfileCard_EStatID_EStatID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EStatID_descriptor() {
    return CMsgDOTAProfileCard_EStatID_descriptor();
  }
  static inline const ::std::string& EStatID_Name(EStatID value) {
    return CMsgDOTAProfileCard_EStatID_Name(value);
  }
  static inline bool EStatID_Parse(const ::std::string& name,
      EStatID* value) {
    return CMsgDOTAProfileCard_EStatID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 background_def_index = 2;
  inline bool has_background_def_index() const;
  inline void clear_background_def_index();
  static const int kBackgroundDefIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 background_def_index() const;
  inline void set_background_def_index(::google::protobuf::uint32 value);

  // repeated .CMsgDOTAProfileCard.Slot slots = 3;
  inline int slots_size() const;
  inline void clear_slots();
  static const int kSlotsFieldNumber = 3;
  inline const ::CMsgDOTAProfileCard_Slot& slots(int index) const;
  inline ::CMsgDOTAProfileCard_Slot* mutable_slots(int index);
  inline ::CMsgDOTAProfileCard_Slot* add_slots();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProfileCard_Slot >&
      slots() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProfileCard_Slot >*
      mutable_slots();

  // optional uint32 badge_points = 4;
  inline bool has_badge_points() const;
  inline void clear_badge_points();
  static const int kBadgePointsFieldNumber = 4;
  inline ::google::protobuf::uint32 badge_points() const;
  inline void set_badge_points(::google::protobuf::uint32 value);

  // optional uint32 event_points = 5;
  inline bool has_event_points() const;
  inline void clear_event_points();
  static const int kEventPointsFieldNumber = 5;
  inline ::google::protobuf::uint32 event_points() const;
  inline void set_event_points(::google::protobuf::uint32 value);

  // optional uint32 event_id = 6;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 6;
  inline ::google::protobuf::uint32 event_id() const;
  inline void set_event_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_background_def_index();
  inline void clear_has_background_def_index();
  inline void set_has_badge_points();
  inline void clear_has_badge_points();
  inline void set_has_event_points();
  inline void clear_has_event_points();
  inline void set_has_event_id();
  inline void clear_has_event_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 background_def_index_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProfileCard_Slot > slots_;
  ::google::protobuf::uint32 badge_points_;
  ::google::protobuf::uint32 event_points_;
  ::google::protobuf::uint32 event_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAProfileCard* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCToClientNewBloomTimingUpdated : public ::google::protobuf::Message {
 public:
  CMsgGCToClientNewBloomTimingUpdated();
  virtual ~CMsgGCToClientNewBloomTimingUpdated();

  CMsgGCToClientNewBloomTimingUpdated(const CMsgGCToClientNewBloomTimingUpdated& from);

  inline CMsgGCToClientNewBloomTimingUpdated& operator=(const CMsgGCToClientNewBloomTimingUpdated& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToClientNewBloomTimingUpdated& default_instance();

  void Swap(CMsgGCToClientNewBloomTimingUpdated* other);

  // implements Message ----------------------------------------------

  CMsgGCToClientNewBloomTimingUpdated* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCToClientNewBloomTimingUpdated& from);
  void MergeFrom(const CMsgGCToClientNewBloomTimingUpdated& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_active = 1;
  inline bool has_is_active() const;
  inline void clear_is_active();
  static const int kIsActiveFieldNumber = 1;
  inline bool is_active() const;
  inline void set_is_active(bool value);

  // optional uint32 next_transition_time = 2;
  inline bool has_next_transition_time() const;
  inline void clear_next_transition_time();
  static const int kNextTransitionTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 next_transition_time() const;
  inline void set_next_transition_time(::google::protobuf::uint32 value);

  // optional uint32 bonus_amount = 3;
  inline bool has_bonus_amount() const;
  inline void clear_bonus_amount();
  static const int kBonusAmountFieldNumber = 3;
  inline ::google::protobuf::uint32 bonus_amount() const;
  inline void set_bonus_amount(::google::protobuf::uint32 value);

  // optional uint32 standby_duration = 4;
  inline bool has_standby_duration() const;
  inline void clear_standby_duration();
  static const int kStandbyDurationFieldNumber = 4;
  inline ::google::protobuf::uint32 standby_duration() const;
  inline void set_standby_duration(::google::protobuf::uint32 value);

  // optional uint32 transition_time = 5;
  inline bool has_transition_time() const;
  inline void clear_transition_time();
  static const int kTransitionTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 transition_time() const;
  inline void set_transition_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCToClientNewBloomTimingUpdated)
 private:
  inline void set_has_is_active();
  inline void clear_has_is_active();
  inline void set_has_next_transition_time();
  inline void clear_has_next_transition_time();
  inline void set_has_bonus_amount();
  inline void clear_has_bonus_amount();
  inline void set_has_standby_duration();
  inline void clear_has_standby_duration();
  inline void set_has_transition_time();
  inline void clear_has_transition_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool is_active_;
  ::google::protobuf::uint32 next_transition_time_;
  ::google::protobuf::uint32 bonus_amount_;
  ::google::protobuf::uint32 standby_duration_;
  ::google::protobuf::uint32 transition_time_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCToClientNewBloomTimingUpdated* default_instance_;
};
// -------------------------------------------------------------------

class CSODOTAPlayerChallenge : public ::google::protobuf::Message {
 public:
  CSODOTAPlayerChallenge();
  virtual ~CSODOTAPlayerChallenge();

  CSODOTAPlayerChallenge(const CSODOTAPlayerChallenge& from);

  inline CSODOTAPlayerChallenge& operator=(const CSODOTAPlayerChallenge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAPlayerChallenge& default_instance();

  void Swap(CSODOTAPlayerChallenge* other);

  // implements Message ----------------------------------------------

  CSODOTAPlayerChallenge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTAPlayerChallenge& from);
  void MergeFrom(const CSODOTAPlayerChallenge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CSODOTAPlayerChallenge_EFlags EFlags;
  static const EFlags eFlag_InstantRerollUncompleted = CSODOTAPlayerChallenge_EFlags_eFlag_InstantRerollUncompleted;
  static inline bool EFlags_IsValid(int value) {
    return CSODOTAPlayerChallenge_EFlags_IsValid(value);
  }
  static const EFlags EFlags_MIN =
    CSODOTAPlayerChallenge_EFlags_EFlags_MIN;
  static const EFlags EFlags_MAX =
    CSODOTAPlayerChallenge_EFlags_EFlags_MAX;
  static const int EFlags_ARRAYSIZE =
    CSODOTAPlayerChallenge_EFlags_EFlags_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EFlags_descriptor() {
    return CSODOTAPlayerChallenge_EFlags_descriptor();
  }
  static inline const ::std::string& EFlags_Name(EFlags value) {
    return CSODOTAPlayerChallenge_EFlags_Name(value);
  }
  static inline bool EFlags_Parse(const ::std::string& name,
      EFlags* value) {
    return CSODOTAPlayerChallenge_EFlags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 event_id = 2;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 2;
  inline ::google::protobuf::uint32 event_id() const;
  inline void set_event_id(::google::protobuf::uint32 value);

  // optional uint32 slot_id = 3;
  inline bool has_slot_id() const;
  inline void clear_slot_id();
  static const int kSlotIdFieldNumber = 3;
  inline ::google::protobuf::uint32 slot_id() const;
  inline void set_slot_id(::google::protobuf::uint32 value);

  // optional uint32 challenge_type = 4;
  inline bool has_challenge_type() const;
  inline void clear_challenge_type();
  static const int kChallengeTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 challenge_type() const;
  inline void set_challenge_type(::google::protobuf::uint32 value);

  // optional uint32 int_param_0 = 5;
  inline bool has_int_param_0() const;
  inline void clear_int_param_0();
  static const int kIntParam0FieldNumber = 5;
  inline ::google::protobuf::uint32 int_param_0() const;
  inline void set_int_param_0(::google::protobuf::uint32 value);

  // optional uint32 int_param_1 = 6;
  inline bool has_int_param_1() const;
  inline void clear_int_param_1();
  static const int kIntParam1FieldNumber = 6;
  inline ::google::protobuf::uint32 int_param_1() const;
  inline void set_int_param_1(::google::protobuf::uint32 value);

  // optional uint32 created_time = 7;
  inline bool has_created_time() const;
  inline void clear_created_time();
  static const int kCreatedTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 created_time() const;
  inline void set_created_time(::google::protobuf::uint32 value);

  // optional uint32 completed = 8;
  inline bool has_completed() const;
  inline void clear_completed();
  static const int kCompletedFieldNumber = 8;
  inline ::google::protobuf::uint32 completed() const;
  inline void set_completed(::google::protobuf::uint32 value);

  // optional uint32 sequence_id = 9;
  inline bool has_sequence_id() const;
  inline void clear_sequence_id();
  static const int kSequenceIdFieldNumber = 9;
  inline ::google::protobuf::uint32 sequence_id() const;
  inline void set_sequence_id(::google::protobuf::uint32 value);

  // optional uint32 challenge_tier = 10;
  inline bool has_challenge_tier() const;
  inline void clear_challenge_tier();
  static const int kChallengeTierFieldNumber = 10;
  inline ::google::protobuf::uint32 challenge_tier() const;
  inline void set_challenge_tier(::google::protobuf::uint32 value);

  // optional uint32 flags = 11;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 11;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSODOTAPlayerChallenge)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_slot_id();
  inline void clear_has_slot_id();
  inline void set_has_challenge_type();
  inline void clear_has_challenge_type();
  inline void set_has_int_param_0();
  inline void clear_has_int_param_0();
  inline void set_has_int_param_1();
  inline void clear_has_int_param_1();
  inline void set_has_created_time();
  inline void clear_has_created_time();
  inline void set_has_completed();
  inline void clear_has_completed();
  inline void set_has_sequence_id();
  inline void clear_has_sequence_id();
  inline void set_has_challenge_tier();
  inline void clear_has_challenge_tier();
  inline void set_has_flags();
  inline void clear_has_flags();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 event_id_;
  ::google::protobuf::uint32 slot_id_;
  ::google::protobuf::uint32 challenge_type_;
  ::google::protobuf::uint32 int_param_0_;
  ::google::protobuf::uint32 int_param_1_;
  ::google::protobuf::uint32 created_time_;
  ::google::protobuf::uint32 completed_;
  ::google::protobuf::uint32 sequence_id_;
  ::google::protobuf::uint32 challenge_tier_;
  ::google::protobuf::uint32 flags_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CSODOTAPlayerChallenge* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientToGCRerollPlayerChallenge : public ::google::protobuf::Message {
 public:
  CMsgClientToGCRerollPlayerChallenge();
  virtual ~CMsgClientToGCRerollPlayerChallenge();

  CMsgClientToGCRerollPlayerChallenge(const CMsgClientToGCRerollPlayerChallenge& from);

  inline CMsgClientToGCRerollPlayerChallenge& operator=(const CMsgClientToGCRerollPlayerChallenge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientToGCRerollPlayerChallenge& default_instance();

  void Swap(CMsgClientToGCRerollPlayerChallenge* other);

  // implements Message ----------------------------------------------

  CMsgClientToGCRerollPlayerChallenge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientToGCRerollPlayerChallenge& from);
  void MergeFrom(const CMsgClientToGCRerollPlayerChallenge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint32 event_id() const;
  inline void set_event_id(::google::protobuf::uint32 value);

  // optional uint32 sequence_id = 3;
  inline bool has_sequence_id() const;
  inline void clear_sequence_id();
  static const int kSequenceIdFieldNumber = 3;
  inline ::google::protobuf::uint32 sequence_id() const;
  inline void set_sequence_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientToGCRerollPlayerChallenge)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_sequence_id();
  inline void clear_has_sequence_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 event_id_;
  ::google::protobuf::uint32 sequence_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientToGCRerollPlayerChallenge* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCRerollPlayerChallengeResponse : public ::google::protobuf::Message {
 public:
  CMsgGCRerollPlayerChallengeResponse();
  virtual ~CMsgGCRerollPlayerChallengeResponse();

  CMsgGCRerollPlayerChallengeResponse(const CMsgGCRerollPlayerChallengeResponse& from);

  inline CMsgGCRerollPlayerChallengeResponse& operator=(const CMsgGCRerollPlayerChallengeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCRerollPlayerChallengeResponse& default_instance();

  void Swap(CMsgGCRerollPlayerChallengeResponse* other);

  // implements Message ----------------------------------------------

  CMsgGCRerollPlayerChallengeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCRerollPlayerChallengeResponse& from);
  void MergeFrom(const CMsgGCRerollPlayerChallengeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgGCRerollPlayerChallengeResponse_EResult EResult;
  static const EResult eResult_Success = CMsgGCRerollPlayerChallengeResponse_EResult_eResult_Success;
  static const EResult eResult_Dropped = CMsgGCRerollPlayerChallengeResponse_EResult_eResult_Dropped;
  static const EResult eResult_NotFound = CMsgGCRerollPlayerChallengeResponse_EResult_eResult_NotFound;
  static const EResult eResult_CantReroll = CMsgGCRerollPlayerChallengeResponse_EResult_eResult_CantReroll;
  static const EResult eResult_ServerError = CMsgGCRerollPlayerChallengeResponse_EResult_eResult_ServerError;
  static inline bool EResult_IsValid(int value) {
    return CMsgGCRerollPlayerChallengeResponse_EResult_IsValid(value);
  }
  static const EResult EResult_MIN =
    CMsgGCRerollPlayerChallengeResponse_EResult_EResult_MIN;
  static const EResult EResult_MAX =
    CMsgGCRerollPlayerChallengeResponse_EResult_EResult_MAX;
  static const int EResult_ARRAYSIZE =
    CMsgGCRerollPlayerChallengeResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EResult_descriptor() {
    return CMsgGCRerollPlayerChallengeResponse_EResult_descriptor();
  }
  static inline const ::std::string& EResult_Name(EResult value) {
    return CMsgGCRerollPlayerChallengeResponse_EResult_Name(value);
  }
  static inline bool EResult_Parse(const ::std::string& name,
      EResult* value) {
    return CMsgGCRerollPlayerChallengeResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::CMsgGCRerollPlayerChallengeResponse_EResult result() const;
  inline void set_result(::CMsgGCRerollPlayerChallengeResponse_EResult value);

  // @@protoc_insertion_point(class_scope:CMsgGCRerollPlayerChallengeResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int result_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCRerollPlayerChallengeResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCTopCustomGamesList : public ::google::protobuf::Message {
 public:
  CMsgGCTopCustomGamesList();
  virtual ~CMsgGCTopCustomGamesList();

  CMsgGCTopCustomGamesList(const CMsgGCTopCustomGamesList& from);

  inline CMsgGCTopCustomGamesList& operator=(const CMsgGCTopCustomGamesList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCTopCustomGamesList& default_instance();

  void Swap(CMsgGCTopCustomGamesList* other);

  // implements Message ----------------------------------------------

  CMsgGCTopCustomGamesList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCTopCustomGamesList& from);
  void MergeFrom(const CMsgGCTopCustomGamesList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 top_custom_games = 1;
  inline int top_custom_games_size() const;
  inline void clear_top_custom_games();
  static const int kTopCustomGamesFieldNumber = 1;
  inline ::google::protobuf::uint64 top_custom_games(int index) const;
  inline void set_top_custom_games(int index, ::google::protobuf::uint64 value);
  inline void add_top_custom_games(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      top_custom_games() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_top_custom_games();

  // @@protoc_insertion_point(class_scope:CMsgGCTopCustomGamesList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > top_custom_games_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCTopCustomGamesList* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_TeamDetails : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_TeamDetails();
  virtual ~CMsgDOTARealtimeGameStats_TeamDetails();

  CMsgDOTARealtimeGameStats_TeamDetails(const CMsgDOTARealtimeGameStats_TeamDetails& from);

  inline CMsgDOTARealtimeGameStats_TeamDetails& operator=(const CMsgDOTARealtimeGameStats_TeamDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_TeamDetails& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_TeamDetails* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_TeamDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_TeamDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_TeamDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 team_number = 1;
  inline bool has_team_number() const;
  inline void clear_team_number();
  static const int kTeamNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 team_number() const;
  inline void set_team_number(::google::protobuf::uint32 value);

  // optional uint32 team_id = 2;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // optional string team_name = 3;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 3;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const char* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  inline void set_allocated_team_name(::std::string* team_name);

  // optional fixed64 team_logo = 4;
  inline bool has_team_logo() const;
  inline void clear_team_logo();
  static const int kTeamLogoFieldNumber = 4;
  inline ::google::protobuf::uint64 team_logo() const;
  inline void set_team_logo(::google::protobuf::uint64 value);

  // optional uint32 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // repeated .CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 6;
  inline const ::CMsgDOTARealtimeGameStats_PlayerDetails& players(int index) const;
  inline ::CMsgDOTARealtimeGameStats_PlayerDetails* mutable_players(int index);
  inline ::CMsgDOTARealtimeGameStats_PlayerDetails* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PlayerDetails >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PlayerDetails >*
      mutable_players();

  // optional bool only_team = 7;
  inline bool has_only_team() const;
  inline void clear_only_team();
  static const int kOnlyTeamFieldNumber = 7;
  inline bool only_team() const;
  inline void set_only_team(bool value);

  // optional uint32 cheers = 8;
  inline bool has_cheers() const;
  inline void clear_cheers();
  static const int kCheersFieldNumber = 8;
  inline ::google::protobuf::uint32 cheers() const;
  inline void set_cheers(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.TeamDetails)
 private:
  inline void set_has_team_number();
  inline void clear_has_team_number();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_team_name();
  inline void clear_has_team_name();
  inline void set_has_team_logo();
  inline void clear_has_team_logo();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_only_team();
  inline void clear_has_only_team();
  inline void set_has_cheers();
  inline void clear_has_cheers();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 team_number_;
  ::google::protobuf::uint32 team_id_;
  ::std::string* team_name_;
  ::google::protobuf::uint64 team_logo_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PlayerDetails > players_;
  ::google::protobuf::uint32 score_;
  bool only_team_;
  ::google::protobuf::uint32 cheers_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_TeamDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_ItemDetails : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_ItemDetails();
  virtual ~CMsgDOTARealtimeGameStats_ItemDetails();

  CMsgDOTARealtimeGameStats_ItemDetails(const CMsgDOTARealtimeGameStats_ItemDetails& from);

  inline CMsgDOTARealtimeGameStats_ItemDetails& operator=(const CMsgDOTARealtimeGameStats_ItemDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_ItemDetails& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_ItemDetails* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_ItemDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_ItemDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_ItemDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional bool sold = 4;
  inline bool has_sold() const;
  inline void clear_sold();
  static const int kSoldFieldNumber = 4;
  inline bool sold() const;
  inline void set_sold(bool value);

  // optional uint32 stackcount = 5;
  inline bool has_stackcount() const;
  inline void clear_stackcount();
  static const int kStackcountFieldNumber = 5;
  inline ::google::protobuf::uint32 stackcount() const;
  inline void set_stackcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.ItemDetails)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_sold();
  inline void clear_has_sold();
  inline void set_has_stackcount();
  inline void clear_has_stackcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 time_;
  bool sold_;
  ::google::protobuf::uint32 stackcount_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_ItemDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_AbilityDetails : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_AbilityDetails();
  virtual ~CMsgDOTARealtimeGameStats_AbilityDetails();

  CMsgDOTARealtimeGameStats_AbilityDetails(const CMsgDOTARealtimeGameStats_AbilityDetails& from);

  inline CMsgDOTARealtimeGameStats_AbilityDetails& operator=(const CMsgDOTARealtimeGameStats_AbilityDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_AbilityDetails& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_AbilityDetails* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_AbilityDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_AbilityDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_AbilityDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional float cooldown = 4;
  inline bool has_cooldown() const;
  inline void clear_cooldown();
  static const int kCooldownFieldNumber = 4;
  inline float cooldown() const;
  inline void set_cooldown(float value);

  // optional float cooldown_max = 5;
  inline bool has_cooldown_max() const;
  inline void clear_cooldown_max();
  static const int kCooldownMaxFieldNumber = 5;
  inline float cooldown_max() const;
  inline void set_cooldown_max(float value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.AbilityDetails)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_cooldown();
  inline void clear_has_cooldown();
  inline void set_has_cooldown_max();
  inline void clear_has_cooldown_max();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 level_;
  float cooldown_;
  float cooldown_max_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_AbilityDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_HeroToHeroStats : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_HeroToHeroStats();
  virtual ~CMsgDOTARealtimeGameStats_HeroToHeroStats();

  CMsgDOTARealtimeGameStats_HeroToHeroStats(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from);

  inline CMsgDOTARealtimeGameStats_HeroToHeroStats& operator=(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_HeroToHeroStats& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_HeroToHeroStats* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_HeroToHeroStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 victimid = 1;
  inline bool has_victimid() const;
  inline void clear_victimid();
  static const int kVictimidFieldNumber = 1;
  inline ::google::protobuf::uint32 victimid() const;
  inline void set_victimid(::google::protobuf::uint32 value);

  // optional uint32 kills = 2;
  inline bool has_kills() const;
  inline void clear_kills();
  static const int kKillsFieldNumber = 2;
  inline ::google::protobuf::uint32 kills() const;
  inline void set_kills(::google::protobuf::uint32 value);

  // optional uint32 assists = 3;
  inline bool has_assists() const;
  inline void clear_assists();
  static const int kAssistsFieldNumber = 3;
  inline ::google::protobuf::uint32 assists() const;
  inline void set_assists(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.HeroToHeroStats)
 private:
  inline void set_has_victimid();
  inline void clear_has_victimid();
  inline void set_has_kills();
  inline void clear_has_kills();
  inline void set_has_assists();
  inline void clear_has_assists();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 victimid_;
  ::google::protobuf::uint32 kills_;
  ::google::protobuf::uint32 assists_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_HeroToHeroStats* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_AbilityList : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_AbilityList();
  virtual ~CMsgDOTARealtimeGameStats_AbilityList();

  CMsgDOTARealtimeGameStats_AbilityList(const CMsgDOTARealtimeGameStats_AbilityList& from);

  inline CMsgDOTARealtimeGameStats_AbilityList& operator=(const CMsgDOTARealtimeGameStats_AbilityList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_AbilityList& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_AbilityList* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_AbilityList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_AbilityList& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_AbilityList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 id = 1;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::uint32 value);
  inline void add_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id();

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.AbilityList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_AbilityList* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_PlayerDetails : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_PlayerDetails();
  virtual ~CMsgDOTARealtimeGameStats_PlayerDetails();

  CMsgDOTARealtimeGameStats_PlayerDetails(const CMsgDOTARealtimeGameStats_PlayerDetails& from);

  inline CMsgDOTARealtimeGameStats_PlayerDetails& operator=(const CMsgDOTARealtimeGameStats_PlayerDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_PlayerDetails& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_PlayerDetails* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_PlayerDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_PlayerDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_PlayerDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 accountid = 1;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // optional uint32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 team = 4;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 4;
  inline ::google::protobuf::uint32 team() const;
  inline void set_team(::google::protobuf::uint32 value);

  // optional uint32 heroid = 5;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroidFieldNumber = 5;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint32 healthpoints = 6;
  inline bool has_healthpoints() const;
  inline void clear_healthpoints();
  static const int kHealthpointsFieldNumber = 6;
  inline ::google::protobuf::uint32 healthpoints() const;
  inline void set_healthpoints(::google::protobuf::uint32 value);

  // optional uint32 maxhealthpoints = 7;
  inline bool has_maxhealthpoints() const;
  inline void clear_maxhealthpoints();
  static const int kMaxhealthpointsFieldNumber = 7;
  inline ::google::protobuf::uint32 maxhealthpoints() const;
  inline void set_maxhealthpoints(::google::protobuf::uint32 value);

  // optional float healthregenrate = 8;
  inline bool has_healthregenrate() const;
  inline void clear_healthregenrate();
  static const int kHealthregenrateFieldNumber = 8;
  inline float healthregenrate() const;
  inline void set_healthregenrate(float value);

  // optional uint32 manapoints = 9;
  inline bool has_manapoints() const;
  inline void clear_manapoints();
  static const int kManapointsFieldNumber = 9;
  inline ::google::protobuf::uint32 manapoints() const;
  inline void set_manapoints(::google::protobuf::uint32 value);

  // optional uint32 maxmanapoints = 10;
  inline bool has_maxmanapoints() const;
  inline void clear_maxmanapoints();
  static const int kMaxmanapointsFieldNumber = 10;
  inline ::google::protobuf::uint32 maxmanapoints() const;
  inline void set_maxmanapoints(::google::protobuf::uint32 value);

  // optional float manaregenrate = 11;
  inline bool has_manaregenrate() const;
  inline void clear_manaregenrate();
  static const int kManaregenrateFieldNumber = 11;
  inline float manaregenrate() const;
  inline void set_manaregenrate(float value);

  // optional uint32 base_strength = 12;
  inline bool has_base_strength() const;
  inline void clear_base_strength();
  static const int kBaseStrengthFieldNumber = 12;
  inline ::google::protobuf::uint32 base_strength() const;
  inline void set_base_strength(::google::protobuf::uint32 value);

  // optional uint32 base_agility = 13;
  inline bool has_base_agility() const;
  inline void clear_base_agility();
  static const int kBaseAgilityFieldNumber = 13;
  inline ::google::protobuf::uint32 base_agility() const;
  inline void set_base_agility(::google::protobuf::uint32 value);

  // optional uint32 base_intelligence = 14;
  inline bool has_base_intelligence() const;
  inline void clear_base_intelligence();
  static const int kBaseIntelligenceFieldNumber = 14;
  inline ::google::protobuf::uint32 base_intelligence() const;
  inline void set_base_intelligence(::google::protobuf::uint32 value);

  // optional int32 base_armor = 15;
  inline bool has_base_armor() const;
  inline void clear_base_armor();
  static const int kBaseArmorFieldNumber = 15;
  inline ::google::protobuf::int32 base_armor() const;
  inline void set_base_armor(::google::protobuf::int32 value);

  // optional uint32 base_movespeed = 16;
  inline bool has_base_movespeed() const;
  inline void clear_base_movespeed();
  static const int kBaseMovespeedFieldNumber = 16;
  inline ::google::protobuf::uint32 base_movespeed() const;
  inline void set_base_movespeed(::google::protobuf::uint32 value);

  // optional uint32 base_damage = 17;
  inline bool has_base_damage() const;
  inline void clear_base_damage();
  static const int kBaseDamageFieldNumber = 17;
  inline ::google::protobuf::uint32 base_damage() const;
  inline void set_base_damage(::google::protobuf::uint32 value);

  // optional uint32 strength = 18;
  inline bool has_strength() const;
  inline void clear_strength();
  static const int kStrengthFieldNumber = 18;
  inline ::google::protobuf::uint32 strength() const;
  inline void set_strength(::google::protobuf::uint32 value);

  // optional uint32 agility = 19;
  inline bool has_agility() const;
  inline void clear_agility();
  static const int kAgilityFieldNumber = 19;
  inline ::google::protobuf::uint32 agility() const;
  inline void set_agility(::google::protobuf::uint32 value);

  // optional uint32 intelligence = 20;
  inline bool has_intelligence() const;
  inline void clear_intelligence();
  static const int kIntelligenceFieldNumber = 20;
  inline ::google::protobuf::uint32 intelligence() const;
  inline void set_intelligence(::google::protobuf::uint32 value);

  // optional int32 armor = 21;
  inline bool has_armor() const;
  inline void clear_armor();
  static const int kArmorFieldNumber = 21;
  inline ::google::protobuf::int32 armor() const;
  inline void set_armor(::google::protobuf::int32 value);

  // optional uint32 movespeed = 22;
  inline bool has_movespeed() const;
  inline void clear_movespeed();
  static const int kMovespeedFieldNumber = 22;
  inline ::google::protobuf::uint32 movespeed() const;
  inline void set_movespeed(::google::protobuf::uint32 value);

  // optional uint32 damage = 23;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 23;
  inline ::google::protobuf::uint32 damage() const;
  inline void set_damage(::google::protobuf::uint32 value);

  // optional uint32 hero_damage = 24;
  inline bool has_hero_damage() const;
  inline void clear_hero_damage();
  static const int kHeroDamageFieldNumber = 24;
  inline ::google::protobuf::uint32 hero_damage() const;
  inline void set_hero_damage(::google::protobuf::uint32 value);

  // optional uint32 tower_damage = 25;
  inline bool has_tower_damage() const;
  inline void clear_tower_damage();
  static const int kTowerDamageFieldNumber = 25;
  inline ::google::protobuf::uint32 tower_damage() const;
  inline void set_tower_damage(::google::protobuf::uint32 value);

  // repeated .CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
  inline int abilities_size() const;
  inline void clear_abilities();
  static const int kAbilitiesFieldNumber = 26;
  inline const ::CMsgDOTARealtimeGameStats_AbilityDetails& abilities(int index) const;
  inline ::CMsgDOTARealtimeGameStats_AbilityDetails* mutable_abilities(int index);
  inline ::CMsgDOTARealtimeGameStats_AbilityDetails* add_abilities();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityDetails >&
      abilities() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityDetails >*
      mutable_abilities();

  // optional uint32 level = 27;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 27;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 kill_count = 28;
  inline bool has_kill_count() const;
  inline void clear_kill_count();
  static const int kKillCountFieldNumber = 28;
  inline ::google::protobuf::uint32 kill_count() const;
  inline void set_kill_count(::google::protobuf::uint32 value);

  // optional uint32 death_count = 29;
  inline bool has_death_count() const;
  inline void clear_death_count();
  static const int kDeathCountFieldNumber = 29;
  inline ::google::protobuf::uint32 death_count() const;
  inline void set_death_count(::google::protobuf::uint32 value);

  // optional uint32 assists_count = 30;
  inline bool has_assists_count() const;
  inline void clear_assists_count();
  static const int kAssistsCountFieldNumber = 30;
  inline ::google::protobuf::uint32 assists_count() const;
  inline void set_assists_count(::google::protobuf::uint32 value);

  // optional uint32 denies_count = 31;
  inline bool has_denies_count() const;
  inline void clear_denies_count();
  static const int kDeniesCountFieldNumber = 31;
  inline ::google::protobuf::uint32 denies_count() const;
  inline void set_denies_count(::google::protobuf::uint32 value);

  // optional uint32 lh_count = 32;
  inline bool has_lh_count() const;
  inline void clear_lh_count();
  static const int kLhCountFieldNumber = 32;
  inline ::google::protobuf::uint32 lh_count() const;
  inline void set_lh_count(::google::protobuf::uint32 value);

  // optional uint32 hero_healing = 33;
  inline bool has_hero_healing() const;
  inline void clear_hero_healing();
  static const int kHeroHealingFieldNumber = 33;
  inline ::google::protobuf::uint32 hero_healing() const;
  inline void set_hero_healing(::google::protobuf::uint32 value);

  // optional uint32 gold_per_min = 34;
  inline bool has_gold_per_min() const;
  inline void clear_gold_per_min();
  static const int kGoldPerMinFieldNumber = 34;
  inline ::google::protobuf::uint32 gold_per_min() const;
  inline void set_gold_per_min(::google::protobuf::uint32 value);

  // optional uint32 xp_per_min = 35;
  inline bool has_xp_per_min() const;
  inline void clear_xp_per_min();
  static const int kXpPerMinFieldNumber = 35;
  inline ::google::protobuf::uint32 xp_per_min() const;
  inline void set_xp_per_min(::google::protobuf::uint32 value);

  // optional uint32 net_gold = 36;
  inline bool has_net_gold() const;
  inline void clear_net_gold();
  static const int kNetGoldFieldNumber = 36;
  inline ::google::protobuf::uint32 net_gold() const;
  inline void set_net_gold(::google::protobuf::uint32 value);

  // optional uint32 gold = 37;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 37;
  inline ::google::protobuf::uint32 gold() const;
  inline void set_gold(::google::protobuf::uint32 value);

  // optional float x = 38;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 38;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 39;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 39;
  inline float y() const;
  inline void set_y(float value);

  // optional int32 respawn_time = 40;
  inline bool has_respawn_time() const;
  inline void clear_respawn_time();
  static const int kRespawnTimeFieldNumber = 40;
  inline ::google::protobuf::int32 respawn_time() const;
  inline void set_respawn_time(::google::protobuf::int32 value);

  // optional uint32 ultimate_cooldown = 41;
  inline bool has_ultimate_cooldown() const;
  inline void clear_ultimate_cooldown();
  static const int kUltimateCooldownFieldNumber = 41;
  inline ::google::protobuf::uint32 ultimate_cooldown() const;
  inline void set_ultimate_cooldown(::google::protobuf::uint32 value);

  // optional bool has_buyback = 42;
  inline bool has_has_buyback() const;
  inline void clear_has_buyback();
  static const int kHasBuybackFieldNumber = 42;
  inline bool has_buyback() const;
  inline void set_has_buyback(bool value);

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails items = 43;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 43;
  inline const ::CMsgDOTARealtimeGameStats_ItemDetails& items(int index) const;
  inline ::CMsgDOTARealtimeGameStats_ItemDetails* mutable_items(int index);
  inline ::CMsgDOTARealtimeGameStats_ItemDetails* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >*
      mutable_items();

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
  inline int stashitems_size() const;
  inline void clear_stashitems();
  static const int kStashitemsFieldNumber = 44;
  inline const ::CMsgDOTARealtimeGameStats_ItemDetails& stashitems(int index) const;
  inline ::CMsgDOTARealtimeGameStats_ItemDetails* mutable_stashitems(int index);
  inline ::CMsgDOTARealtimeGameStats_ItemDetails* add_stashitems();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >&
      stashitems() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >*
      mutable_stashitems();

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
  inline int itemshoppinglist_size() const;
  inline void clear_itemshoppinglist();
  static const int kItemshoppinglistFieldNumber = 45;
  inline const ::CMsgDOTARealtimeGameStats_ItemDetails& itemshoppinglist(int index) const;
  inline ::CMsgDOTARealtimeGameStats_ItemDetails* mutable_itemshoppinglist(int index);
  inline ::CMsgDOTARealtimeGameStats_ItemDetails* add_itemshoppinglist();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >&
      itemshoppinglist() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >*
      mutable_itemshoppinglist();

  // repeated .CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
  inline int levelpoints_size() const;
  inline void clear_levelpoints();
  static const int kLevelpointsFieldNumber = 46;
  inline const ::CMsgDOTARealtimeGameStats_AbilityList& levelpoints(int index) const;
  inline ::CMsgDOTARealtimeGameStats_AbilityList* mutable_levelpoints(int index);
  inline ::CMsgDOTARealtimeGameStats_AbilityList* add_levelpoints();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityList >&
      levelpoints() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityList >*
      mutable_levelpoints();

  // repeated .CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
  inline int hero_to_hero_stats_size() const;
  inline void clear_hero_to_hero_stats();
  static const int kHeroToHeroStatsFieldNumber = 47;
  inline const ::CMsgDOTARealtimeGameStats_HeroToHeroStats& hero_to_hero_stats(int index) const;
  inline ::CMsgDOTARealtimeGameStats_HeroToHeroStats* mutable_hero_to_hero_stats(int index);
  inline ::CMsgDOTARealtimeGameStats_HeroToHeroStats* add_hero_to_hero_stats();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_HeroToHeroStats >&
      hero_to_hero_stats() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_HeroToHeroStats >*
      mutable_hero_to_hero_stats();

  // optional bool has_ultimate = 48;
  inline bool has_has_ultimate() const;
  inline void clear_has_ultimate();
  static const int kHasUltimateFieldNumber = 48;
  inline bool has_ultimate() const;
  inline void set_has_ultimate(bool value);

  // optional bool has_ultimate_mana = 49;
  inline bool has_has_ultimate_mana() const;
  inline void clear_has_ultimate_mana();
  static const int kHasUltimateManaFieldNumber = 49;
  inline bool has_ultimate_mana() const;
  inline void set_has_ultimate_mana(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.PlayerDetails)
 private:
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_healthpoints();
  inline void clear_has_healthpoints();
  inline void set_has_maxhealthpoints();
  inline void clear_has_maxhealthpoints();
  inline void set_has_healthregenrate();
  inline void clear_has_healthregenrate();
  inline void set_has_manapoints();
  inline void clear_has_manapoints();
  inline void set_has_maxmanapoints();
  inline void clear_has_maxmanapoints();
  inline void set_has_manaregenrate();
  inline void clear_has_manaregenrate();
  inline void set_has_base_strength();
  inline void clear_has_base_strength();
  inline void set_has_base_agility();
  inline void clear_has_base_agility();
  inline void set_has_base_intelligence();
  inline void clear_has_base_intelligence();
  inline void set_has_base_armor();
  inline void clear_has_base_armor();
  inline void set_has_base_movespeed();
  inline void clear_has_base_movespeed();
  inline void set_has_base_damage();
  inline void clear_has_base_damage();
  inline void set_has_strength();
  inline void clear_has_strength();
  inline void set_has_agility();
  inline void clear_has_agility();
  inline void set_has_intelligence();
  inline void clear_has_intelligence();
  inline void set_has_armor();
  inline void clear_has_armor();
  inline void set_has_movespeed();
  inline void clear_has_movespeed();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_hero_damage();
  inline void clear_has_hero_damage();
  inline void set_has_tower_damage();
  inline void clear_has_tower_damage();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_kill_count();
  inline void clear_has_kill_count();
  inline void set_has_death_count();
  inline void clear_has_death_count();
  inline void set_has_assists_count();
  inline void clear_has_assists_count();
  inline void set_has_denies_count();
  inline void clear_has_denies_count();
  inline void set_has_lh_count();
  inline void clear_has_lh_count();
  inline void set_has_hero_healing();
  inline void clear_has_hero_healing();
  inline void set_has_gold_per_min();
  inline void clear_has_gold_per_min();
  inline void set_has_xp_per_min();
  inline void clear_has_xp_per_min();
  inline void set_has_net_gold();
  inline void clear_has_net_gold();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_respawn_time();
  inline void clear_has_respawn_time();
  inline void set_has_ultimate_cooldown();
  inline void clear_has_ultimate_cooldown();
  inline void set_has_has_buyback();
  inline void clear_has_has_buyback();
  inline void set_has_has_ultimate();
  inline void clear_has_has_ultimate();
  inline void set_has_has_ultimate_mana();
  inline void clear_has_has_ultimate_mana();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::uint32 accountid_;
  ::google::protobuf::uint32 playerid_;
  ::std::string* name_;
  ::google::protobuf::uint32 team_;
  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 healthpoints_;
  ::google::protobuf::uint32 maxhealthpoints_;
  float healthregenrate_;
  ::google::protobuf::uint32 manapoints_;
  ::google::protobuf::uint32 maxmanapoints_;
  float manaregenrate_;
  ::google::protobuf::uint32 base_strength_;
  ::google::protobuf::uint32 base_agility_;
  ::google::protobuf::uint32 base_intelligence_;
  ::google::protobuf::int32 base_armor_;
  ::google::protobuf::uint32 base_movespeed_;
  ::google::protobuf::uint32 base_damage_;
  ::google::protobuf::uint32 strength_;
  ::google::protobuf::uint32 agility_;
  ::google::protobuf::uint32 intelligence_;
  ::google::protobuf::int32 armor_;
  ::google::protobuf::uint32 movespeed_;
  ::google::protobuf::uint32 damage_;
  ::google::protobuf::uint32 hero_damage_;
  ::google::protobuf::uint32 tower_damage_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityDetails > abilities_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 kill_count_;
  ::google::protobuf::uint32 death_count_;
  ::google::protobuf::uint32 assists_count_;
  ::google::protobuf::uint32 denies_count_;
  ::google::protobuf::uint32 lh_count_;
  ::google::protobuf::uint32 hero_healing_;
  ::google::protobuf::uint32 gold_per_min_;
  ::google::protobuf::uint32 xp_per_min_;
  ::google::protobuf::uint32 net_gold_;
  ::google::protobuf::uint32 gold_;
  float x_;
  float y_;
  ::google::protobuf::int32 respawn_time_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails > items_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails > stashitems_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails > itemshoppinglist_;
  ::google::protobuf::uint32 ultimate_cooldown_;
  bool has_buyback_;
  bool has_ultimate_;
  bool has_ultimate_mana_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityList > levelpoints_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_HeroToHeroStats > hero_to_hero_stats_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_PlayerDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_BuildingDetails : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_BuildingDetails();
  virtual ~CMsgDOTARealtimeGameStats_BuildingDetails();

  CMsgDOTARealtimeGameStats_BuildingDetails(const CMsgDOTARealtimeGameStats_BuildingDetails& from);

  inline CMsgDOTARealtimeGameStats_BuildingDetails& operator=(const CMsgDOTARealtimeGameStats_BuildingDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_BuildingDetails& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_BuildingDetails* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_BuildingDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_BuildingDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_BuildingDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 team = 2;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 2;
  inline ::google::protobuf::uint32 team() const;
  inline void set_team(::google::protobuf::uint32 value);

  // optional float heading = 3;
  inline bool has_heading() const;
  inline void clear_heading();
  static const int kHeadingFieldNumber = 3;
  inline float heading() const;
  inline void set_heading(float value);

  // optional uint32 lane = 4;
  inline bool has_lane() const;
  inline void clear_lane();
  static const int kLaneFieldNumber = 4;
  inline ::google::protobuf::uint32 lane() const;
  inline void set_lane(::google::protobuf::uint32 value);

  // optional uint32 tier = 5;
  inline bool has_tier() const;
  inline void clear_tier();
  static const int kTierFieldNumber = 5;
  inline ::google::protobuf::uint32 tier() const;
  inline void set_tier(::google::protobuf::uint32 value);

  // optional uint32 type = 6;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional float x = 7;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 7;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 8;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 8;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.BuildingDetails)
 private:
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_heading();
  inline void clear_has_heading();
  inline void set_has_lane();
  inline void clear_has_lane();
  inline void set_has_tier();
  inline void clear_has_tier();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 team_;
  float heading_;
  ::google::protobuf::uint32 lane_;
  ::google::protobuf::uint32 tier_;
  ::google::protobuf::uint32 type_;
  float x_;
  float y_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_BuildingDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_KillDetails : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_KillDetails();
  virtual ~CMsgDOTARealtimeGameStats_KillDetails();

  CMsgDOTARealtimeGameStats_KillDetails(const CMsgDOTARealtimeGameStats_KillDetails& from);

  inline CMsgDOTARealtimeGameStats_KillDetails& operator=(const CMsgDOTARealtimeGameStats_KillDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_KillDetails& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_KillDetails* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_KillDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_KillDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_KillDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 player_id() const;
  inline void set_player_id(::google::protobuf::uint32 value);

  // optional int32 death_time = 2;
  inline bool has_death_time() const;
  inline void clear_death_time();
  static const int kDeathTimeFieldNumber = 2;
  inline ::google::protobuf::int32 death_time() const;
  inline void set_death_time(::google::protobuf::int32 value);

  // optional uint32 killer_player_id = 3;
  inline bool has_killer_player_id() const;
  inline void clear_killer_player_id();
  static const int kKillerPlayerIdFieldNumber = 3;
  inline ::google::protobuf::uint32 killer_player_id() const;
  inline void set_killer_player_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.KillDetails)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_death_time();
  inline void clear_has_death_time();
  inline void set_has_killer_player_id();
  inline void clear_has_killer_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 player_id_;
  ::google::protobuf::int32 death_time_;
  ::google::protobuf::uint32 killer_player_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_KillDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_BroadcasterDetails : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_BroadcasterDetails();
  virtual ~CMsgDOTARealtimeGameStats_BroadcasterDetails();

  CMsgDOTARealtimeGameStats_BroadcasterDetails(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from);

  inline CMsgDOTARealtimeGameStats_BroadcasterDetails& operator=(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_BroadcasterDetails& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_BroadcasterDetails* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_BroadcasterDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 player_id() const;
  inline void set_player_id(::google::protobuf::uint32 value);

  // optional uint32 selected_hero = 2;
  inline bool has_selected_hero() const;
  inline void clear_selected_hero();
  static const int kSelectedHeroFieldNumber = 2;
  inline ::google::protobuf::uint32 selected_hero() const;
  inline void set_selected_hero(::google::protobuf::uint32 value);

  // optional uint32 selected_graph = 3;
  inline bool has_selected_graph() const;
  inline void clear_selected_graph();
  static const int kSelectedGraphFieldNumber = 3;
  inline ::google::protobuf::uint32 selected_graph() const;
  inline void set_selected_graph(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.BroadcasterDetails)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_selected_hero();
  inline void clear_has_selected_hero();
  inline void set_has_selected_graph();
  inline void clear_has_selected_graph();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 player_id_;
  ::google::protobuf::uint32 selected_hero_;
  ::google::protobuf::uint32 selected_graph_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_BroadcasterDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_PickBanDetails : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_PickBanDetails();
  virtual ~CMsgDOTARealtimeGameStats_PickBanDetails();

  CMsgDOTARealtimeGameStats_PickBanDetails(const CMsgDOTARealtimeGameStats_PickBanDetails& from);

  inline CMsgDOTARealtimeGameStats_PickBanDetails& operator=(const CMsgDOTARealtimeGameStats_PickBanDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_PickBanDetails& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_PickBanDetails* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_PickBanDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_PickBanDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_PickBanDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hero = 1;
  inline bool has_hero() const;
  inline void clear_hero();
  static const int kHeroFieldNumber = 1;
  inline ::google::protobuf::uint32 hero() const;
  inline void set_hero(::google::protobuf::uint32 value);

  // optional uint32 team = 2;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 2;
  inline ::google::protobuf::uint32 team() const;
  inline void set_team(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.PickBanDetails)
 private:
  inline void set_has_hero();
  inline void clear_has_hero();
  inline void set_has_team();
  inline void clear_has_team();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hero_;
  ::google::protobuf::uint32 team_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_PickBanDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_MatchDetails : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_MatchDetails();
  virtual ~CMsgDOTARealtimeGameStats_MatchDetails();

  CMsgDOTARealtimeGameStats_MatchDetails(const CMsgDOTARealtimeGameStats_MatchDetails& from);

  inline CMsgDOTARealtimeGameStats_MatchDetails& operator=(const CMsgDOTARealtimeGameStats_MatchDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_MatchDetails& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_MatchDetails* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_MatchDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_MatchDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_MatchDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 server_steam_id = 1;
  inline bool has_server_steam_id() const;
  inline void clear_server_steam_id();
  static const int kServerSteamIdFieldNumber = 1;
  inline ::google::protobuf::uint64 server_steam_id() const;
  inline void set_server_steam_id(::google::protobuf::uint64 value);

  // optional uint64 matchid = 2;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 2;
  inline ::google::protobuf::uint64 matchid() const;
  inline void set_matchid(::google::protobuf::uint64 value);

  // optional uint32 timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // optional float time_of_day = 4;
  inline bool has_time_of_day() const;
  inline void clear_time_of_day();
  static const int kTimeOfDayFieldNumber = 4;
  inline float time_of_day() const;
  inline void set_time_of_day(float value);

  // optional bool is_nightstalker_night = 5;
  inline bool has_is_nightstalker_night() const;
  inline void clear_is_nightstalker_night();
  static const int kIsNightstalkerNightFieldNumber = 5;
  inline bool is_nightstalker_night() const;
  inline void set_is_nightstalker_night(bool value);

  // optional int32 game_time = 6;
  inline bool has_game_time() const;
  inline void clear_game_time();
  static const int kGameTimeFieldNumber = 6;
  inline ::google::protobuf::int32 game_time() const;
  inline void set_game_time(::google::protobuf::int32 value);

  // optional uint32 teamid_radiant = 8;
  inline bool has_teamid_radiant() const;
  inline void clear_teamid_radiant();
  static const int kTeamidRadiantFieldNumber = 8;
  inline ::google::protobuf::uint32 teamid_radiant() const;
  inline void set_teamid_radiant(::google::protobuf::uint32 value);

  // optional uint32 teamid_dire = 9;
  inline bool has_teamid_dire() const;
  inline void clear_teamid_dire();
  static const int kTeamidDireFieldNumber = 9;
  inline ::google::protobuf::uint32 teamid_dire() const;
  inline void set_teamid_dire(::google::protobuf::uint32 value);

  // repeated .CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
  inline int picks_size() const;
  inline void clear_picks();
  static const int kPicksFieldNumber = 10;
  inline const ::CMsgDOTARealtimeGameStats_PickBanDetails& picks(int index) const;
  inline ::CMsgDOTARealtimeGameStats_PickBanDetails* mutable_picks(int index);
  inline ::CMsgDOTARealtimeGameStats_PickBanDetails* add_picks();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >&
      picks() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >*
      mutable_picks();

  // repeated .CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
  inline int bans_size() const;
  inline void clear_bans();
  static const int kBansFieldNumber = 11;
  inline const ::CMsgDOTARealtimeGameStats_PickBanDetails& bans(int index) const;
  inline ::CMsgDOTARealtimeGameStats_PickBanDetails* mutable_bans(int index);
  inline ::CMsgDOTARealtimeGameStats_PickBanDetails* add_bans();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >&
      bans() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >*
      mutable_bans();

  // repeated .CMsgDOTARealtimeGameStats.KillDetails kills = 12;
  inline int kills_size() const;
  inline void clear_kills();
  static const int kKillsFieldNumber = 12;
  inline const ::CMsgDOTARealtimeGameStats_KillDetails& kills(int index) const;
  inline ::CMsgDOTARealtimeGameStats_KillDetails* mutable_kills(int index);
  inline ::CMsgDOTARealtimeGameStats_KillDetails* add_kills();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_KillDetails >&
      kills() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_KillDetails >*
      mutable_kills();

  // repeated .CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
  inline int broadcasters_size() const;
  inline void clear_broadcasters();
  static const int kBroadcastersFieldNumber = 13;
  inline const ::CMsgDOTARealtimeGameStats_BroadcasterDetails& broadcasters(int index) const;
  inline ::CMsgDOTARealtimeGameStats_BroadcasterDetails* mutable_broadcasters(int index);
  inline ::CMsgDOTARealtimeGameStats_BroadcasterDetails* add_broadcasters();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BroadcasterDetails >&
      broadcasters() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BroadcasterDetails >*
      mutable_broadcasters();

  // optional uint32 game_mode = 14;
  inline bool has_game_mode() const;
  inline void clear_game_mode();
  static const int kGameModeFieldNumber = 14;
  inline ::google::protobuf::uint32 game_mode() const;
  inline void set_game_mode(::google::protobuf::uint32 value);

  // optional uint32 league_id = 15;
  inline bool has_league_id() const;
  inline void clear_league_id();
  static const int kLeagueIdFieldNumber = 15;
  inline ::google::protobuf::uint32 league_id() const;
  inline void set_league_id(::google::protobuf::uint32 value);

  // optional bool single_team = 16;
  inline bool has_single_team() const;
  inline void clear_single_team();
  static const int kSingleTeamFieldNumber = 16;
  inline bool single_team() const;
  inline void set_single_team(bool value);

  // optional uint32 cheers_peak = 17;
  inline bool has_cheers_peak() const;
  inline void clear_cheers_peak();
  static const int kCheersPeakFieldNumber = 17;
  inline ::google::protobuf::uint32 cheers_peak() const;
  inline void set_cheers_peak(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.MatchDetails)
 private:
  inline void set_has_server_steam_id();
  inline void clear_has_server_steam_id();
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_time_of_day();
  inline void clear_has_time_of_day();
  inline void set_has_is_nightstalker_night();
  inline void clear_has_is_nightstalker_night();
  inline void set_has_game_time();
  inline void clear_has_game_time();
  inline void set_has_teamid_radiant();
  inline void clear_has_teamid_radiant();
  inline void set_has_teamid_dire();
  inline void clear_has_teamid_dire();
  inline void set_has_game_mode();
  inline void clear_has_game_mode();
  inline void set_has_league_id();
  inline void clear_has_league_id();
  inline void set_has_single_team();
  inline void clear_has_single_team();
  inline void set_has_cheers_peak();
  inline void clear_has_cheers_peak();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 server_steam_id_;
  ::google::protobuf::uint64 matchid_;
  ::google::protobuf::uint32 timestamp_;
  float time_of_day_;
  ::google::protobuf::int32 game_time_;
  ::google::protobuf::uint32 teamid_radiant_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails > picks_;
  ::google::protobuf::uint32 teamid_dire_;
  bool is_nightstalker_night_;
  bool single_team_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails > bans_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_KillDetails > kills_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BroadcasterDetails > broadcasters_;
  ::google::protobuf::uint32 game_mode_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 cheers_peak_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_MatchDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_GraphData_LocationStats : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_GraphData_LocationStats();
  virtual ~CMsgDOTARealtimeGameStats_GraphData_LocationStats();

  CMsgDOTARealtimeGameStats_GraphData_LocationStats(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from);

  inline CMsgDOTARealtimeGameStats_GraphData_LocationStats& operator=(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_GraphData_LocationStats& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_GraphData_LocationStats* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_GraphData_LocationStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 stats = 1;
  inline int stats_size() const;
  inline void clear_stats();
  static const int kStatsFieldNumber = 1;
  inline ::google::protobuf::int32 stats(int index) const;
  inline void set_stats(int index, ::google::protobuf::int32 value);
  inline void add_stats(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      stats() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_stats();

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > stats_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_GraphData_LocationStats* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats();
  virtual ~CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats();

  CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from);

  inline CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& operator=(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
  inline int loc_stats_size() const;
  inline void clear_loc_stats();
  static const int kLocStatsFieldNumber = 1;
  inline const ::CMsgDOTARealtimeGameStats_GraphData_LocationStats& loc_stats(int index) const;
  inline ::CMsgDOTARealtimeGameStats_GraphData_LocationStats* mutable_loc_stats(int index);
  inline ::CMsgDOTARealtimeGameStats_GraphData_LocationStats* add_loc_stats();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_LocationStats >&
      loc_stats() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_LocationStats >*
      mutable_loc_stats();

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_LocationStats > loc_stats_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_GraphData : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_GraphData();
  virtual ~CMsgDOTARealtimeGameStats_GraphData();

  CMsgDOTARealtimeGameStats_GraphData(const CMsgDOTARealtimeGameStats_GraphData& from);

  inline CMsgDOTARealtimeGameStats_GraphData& operator=(const CMsgDOTARealtimeGameStats_GraphData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_GraphData& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_GraphData* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_GraphData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_GraphData& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_GraphData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTARealtimeGameStats_GraphData_LocationStats LocationStats;
  typedef CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats TeamLocationStats;

  typedef CMsgDOTARealtimeGameStats_GraphData_eStat eStat;
  static const eStat CreepGoldEarned = CMsgDOTARealtimeGameStats_GraphData_eStat_CreepGoldEarned;
  static const eStat KillGoldEarned = CMsgDOTARealtimeGameStats_GraphData_eStat_KillGoldEarned;
  static const eStat DeathAndBuybackGoldLost = CMsgDOTARealtimeGameStats_GraphData_eStat_DeathAndBuybackGoldLost;
  static const eStat XPEarned = CMsgDOTARealtimeGameStats_GraphData_eStat_XPEarned;
  static inline bool eStat_IsValid(int value) {
    return CMsgDOTARealtimeGameStats_GraphData_eStat_IsValid(value);
  }
  static const eStat eStat_MIN =
    CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_MIN;
  static const eStat eStat_MAX =
    CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_MAX;
  static const int eStat_ARRAYSIZE =
    CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eStat_descriptor() {
    return CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor();
  }
  static inline const ::std::string& eStat_Name(eStat value) {
    return CMsgDOTARealtimeGameStats_GraphData_eStat_Name(value);
  }
  static inline bool eStat_Parse(const ::std::string& name,
      eStat* value) {
    return CMsgDOTARealtimeGameStats_GraphData_eStat_Parse(name, value);
  }

  typedef CMsgDOTARealtimeGameStats_GraphData_eLocation eLocation;
  static const eLocation BotLane = CMsgDOTARealtimeGameStats_GraphData_eLocation_BotLane;
  static const eLocation MidLane = CMsgDOTARealtimeGameStats_GraphData_eLocation_MidLane;
  static const eLocation TopLane = CMsgDOTARealtimeGameStats_GraphData_eLocation_TopLane;
  static const eLocation Jungle = CMsgDOTARealtimeGameStats_GraphData_eLocation_Jungle;
  static const eLocation Ancients = CMsgDOTARealtimeGameStats_GraphData_eLocation_Ancients;
  static const eLocation Other = CMsgDOTARealtimeGameStats_GraphData_eLocation_Other;
  static inline bool eLocation_IsValid(int value) {
    return CMsgDOTARealtimeGameStats_GraphData_eLocation_IsValid(value);
  }
  static const eLocation eLocation_MIN =
    CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_MIN;
  static const eLocation eLocation_MAX =
    CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_MAX;
  static const int eLocation_ARRAYSIZE =
    CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eLocation_descriptor() {
    return CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor();
  }
  static inline const ::std::string& eLocation_Name(eLocation value) {
    return CMsgDOTARealtimeGameStats_GraphData_eLocation_Name(value);
  }
  static inline bool eLocation_Parse(const ::std::string& name,
      eLocation* value) {
    return CMsgDOTARealtimeGameStats_GraphData_eLocation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 graph_gold = 1;
  inline int graph_gold_size() const;
  inline void clear_graph_gold();
  static const int kGraphGoldFieldNumber = 1;
  inline ::google::protobuf::int32 graph_gold(int index) const;
  inline void set_graph_gold(int index, ::google::protobuf::int32 value);
  inline void add_graph_gold(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      graph_gold() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_graph_gold();

  // repeated int32 graph_xp = 2;
  inline int graph_xp_size() const;
  inline void clear_graph_xp();
  static const int kGraphXpFieldNumber = 2;
  inline ::google::protobuf::int32 graph_xp(int index) const;
  inline void set_graph_xp(int index, ::google::protobuf::int32 value);
  inline void add_graph_xp(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      graph_xp() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_graph_xp();

  // repeated int32 graph_kill = 3;
  inline int graph_kill_size() const;
  inline void clear_graph_kill();
  static const int kGraphKillFieldNumber = 3;
  inline ::google::protobuf::int32 graph_kill(int index) const;
  inline void set_graph_kill(int index, ::google::protobuf::int32 value);
  inline void add_graph_kill(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      graph_kill() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_graph_kill();

  // repeated int32 graph_tower = 4;
  inline int graph_tower_size() const;
  inline void clear_graph_tower();
  static const int kGraphTowerFieldNumber = 4;
  inline ::google::protobuf::int32 graph_tower(int index) const;
  inline void set_graph_tower(int index, ::google::protobuf::int32 value);
  inline void add_graph_tower(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      graph_tower() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_graph_tower();

  // repeated int32 graph_rax = 5;
  inline int graph_rax_size() const;
  inline void clear_graph_rax();
  static const int kGraphRaxFieldNumber = 5;
  inline ::google::protobuf::int32 graph_rax(int index) const;
  inline void set_graph_rax(int index, ::google::protobuf::int32 value);
  inline void add_graph_rax(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      graph_rax() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_graph_rax();

  // repeated .CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
  inline int team_loc_stats_size() const;
  inline void clear_team_loc_stats();
  static const int kTeamLocStatsFieldNumber = 6;
  inline const ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& team_loc_stats(int index) const;
  inline ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* mutable_team_loc_stats(int index);
  inline ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* add_team_loc_stats();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats >&
      team_loc_stats() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats >*
      mutable_team_loc_stats();

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.GraphData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > graph_gold_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > graph_xp_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > graph_kill_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > graph_tower_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > graph_rax_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats > team_loc_stats_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_GraphData* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats();
  virtual ~CMsgDOTARealtimeGameStats();

  CMsgDOTARealtimeGameStats(const CMsgDOTARealtimeGameStats& from);

  inline CMsgDOTARealtimeGameStats& operator=(const CMsgDOTARealtimeGameStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats& default_instance();

  void Swap(CMsgDOTARealtimeGameStats* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTARealtimeGameStats_TeamDetails TeamDetails;
  typedef CMsgDOTARealtimeGameStats_ItemDetails ItemDetails;
  typedef CMsgDOTARealtimeGameStats_AbilityDetails AbilityDetails;
  typedef CMsgDOTARealtimeGameStats_HeroToHeroStats HeroToHeroStats;
  typedef CMsgDOTARealtimeGameStats_AbilityList AbilityList;
  typedef CMsgDOTARealtimeGameStats_PlayerDetails PlayerDetails;
  typedef CMsgDOTARealtimeGameStats_BuildingDetails BuildingDetails;
  typedef CMsgDOTARealtimeGameStats_KillDetails KillDetails;
  typedef CMsgDOTARealtimeGameStats_BroadcasterDetails BroadcasterDetails;
  typedef CMsgDOTARealtimeGameStats_PickBanDetails PickBanDetails;
  typedef CMsgDOTARealtimeGameStats_MatchDetails MatchDetails;
  typedef CMsgDOTARealtimeGameStats_GraphData GraphData;

  // accessors -------------------------------------------------------

  // optional .CMsgDOTARealtimeGameStats.MatchDetails match = 1;
  inline bool has_match() const;
  inline void clear_match();
  static const int kMatchFieldNumber = 1;
  inline const ::CMsgDOTARealtimeGameStats_MatchDetails& match() const;
  inline ::CMsgDOTARealtimeGameStats_MatchDetails* mutable_match();
  inline ::CMsgDOTARealtimeGameStats_MatchDetails* release_match();
  inline void set_allocated_match(::CMsgDOTARealtimeGameStats_MatchDetails* match);

  // repeated .CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
  inline int teams_size() const;
  inline void clear_teams();
  static const int kTeamsFieldNumber = 2;
  inline const ::CMsgDOTARealtimeGameStats_TeamDetails& teams(int index) const;
  inline ::CMsgDOTARealtimeGameStats_TeamDetails* mutable_teams(int index);
  inline ::CMsgDOTARealtimeGameStats_TeamDetails* add_teams();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_TeamDetails >&
      teams() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_TeamDetails >*
      mutable_teams();

  // repeated .CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
  inline int buildings_size() const;
  inline void clear_buildings();
  static const int kBuildingsFieldNumber = 3;
  inline const ::CMsgDOTARealtimeGameStats_BuildingDetails& buildings(int index) const;
  inline ::CMsgDOTARealtimeGameStats_BuildingDetails* mutable_buildings(int index);
  inline ::CMsgDOTARealtimeGameStats_BuildingDetails* add_buildings();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BuildingDetails >&
      buildings() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BuildingDetails >*
      mutable_buildings();

  // optional .CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
  inline bool has_graph_data() const;
  inline void clear_graph_data();
  static const int kGraphDataFieldNumber = 4;
  inline const ::CMsgDOTARealtimeGameStats_GraphData& graph_data() const;
  inline ::CMsgDOTARealtimeGameStats_GraphData* mutable_graph_data();
  inline ::CMsgDOTARealtimeGameStats_GraphData* release_graph_data();
  inline void set_allocated_graph_data(::CMsgDOTARealtimeGameStats_GraphData* graph_data);

  // optional bool delta_frame = 5;
  inline bool has_delta_frame() const;
  inline void clear_delta_frame();
  static const int kDeltaFrameFieldNumber = 5;
  inline bool delta_frame() const;
  inline void set_delta_frame(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats)
 private:
  inline void set_has_match();
  inline void clear_has_match();
  inline void set_has_graph_data();
  inline void clear_has_graph_data();
  inline void set_has_delta_frame();
  inline void clear_has_delta_frame();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgDOTARealtimeGameStats_MatchDetails* match_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_TeamDetails > teams_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BuildingDetails > buildings_;
  ::CMsgDOTARealtimeGameStats_GraphData* graph_data_;
  bool delta_frame_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStatsTerse_TeamDetails : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStatsTerse_TeamDetails();
  virtual ~CMsgDOTARealtimeGameStatsTerse_TeamDetails();

  CMsgDOTARealtimeGameStatsTerse_TeamDetails(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from);

  inline CMsgDOTARealtimeGameStatsTerse_TeamDetails& operator=(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStatsTerse_TeamDetails& default_instance();

  void Swap(CMsgDOTARealtimeGameStatsTerse_TeamDetails* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStatsTerse_TeamDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 team_number = 1;
  inline bool has_team_number() const;
  inline void clear_team_number();
  static const int kTeamNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 team_number() const;
  inline void set_team_number(::google::protobuf::uint32 value);

  // optional uint32 team_id = 2;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // optional string team_name = 3;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 3;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const char* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  inline void set_allocated_team_name(::std::string* team_name);

  // optional fixed64 team_logo = 4;
  inline bool has_team_logo() const;
  inline void clear_team_logo();
  static const int kTeamLogoFieldNumber = 4;
  inline ::google::protobuf::uint64 team_logo() const;
  inline void set_team_logo(::google::protobuf::uint64 value);

  // optional uint32 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // repeated .CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 6;
  inline const ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails& players(int index) const;
  inline ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails* mutable_players(int index);
  inline ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails >*
      mutable_players();

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
 private:
  inline void set_has_team_number();
  inline void clear_has_team_number();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_team_name();
  inline void clear_has_team_name();
  inline void set_has_team_logo();
  inline void clear_has_team_logo();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 team_number_;
  ::google::protobuf::uint32 team_id_;
  ::std::string* team_name_;
  ::google::protobuf::uint64 team_logo_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails > players_;
  ::google::protobuf::uint32 score_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStatsTerse_TeamDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStatsTerse_PlayerDetails : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStatsTerse_PlayerDetails();
  virtual ~CMsgDOTARealtimeGameStatsTerse_PlayerDetails();

  CMsgDOTARealtimeGameStatsTerse_PlayerDetails(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from);

  inline CMsgDOTARealtimeGameStatsTerse_PlayerDetails& operator=(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& default_instance();

  void Swap(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStatsTerse_PlayerDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 accountid = 1;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // optional uint32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 team = 4;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 4;
  inline ::google::protobuf::uint32 team() const;
  inline void set_team(::google::protobuf::uint32 value);

  // optional uint32 heroid = 5;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroidFieldNumber = 5;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 kill_count = 7;
  inline bool has_kill_count() const;
  inline void clear_kill_count();
  static const int kKillCountFieldNumber = 7;
  inline ::google::protobuf::uint32 kill_count() const;
  inline void set_kill_count(::google::protobuf::uint32 value);

  // optional uint32 death_count = 8;
  inline bool has_death_count() const;
  inline void clear_death_count();
  static const int kDeathCountFieldNumber = 8;
  inline ::google::protobuf::uint32 death_count() const;
  inline void set_death_count(::google::protobuf::uint32 value);

  // optional uint32 assists_count = 9;
  inline bool has_assists_count() const;
  inline void clear_assists_count();
  static const int kAssistsCountFieldNumber = 9;
  inline ::google::protobuf::uint32 assists_count() const;
  inline void set_assists_count(::google::protobuf::uint32 value);

  // optional uint32 denies_count = 10;
  inline bool has_denies_count() const;
  inline void clear_denies_count();
  static const int kDeniesCountFieldNumber = 10;
  inline ::google::protobuf::uint32 denies_count() const;
  inline void set_denies_count(::google::protobuf::uint32 value);

  // optional uint32 lh_count = 11;
  inline bool has_lh_count() const;
  inline void clear_lh_count();
  static const int kLhCountFieldNumber = 11;
  inline ::google::protobuf::uint32 lh_count() const;
  inline void set_lh_count(::google::protobuf::uint32 value);

  // optional uint32 gold = 12;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 12;
  inline ::google::protobuf::uint32 gold() const;
  inline void set_gold(::google::protobuf::uint32 value);

  // optional float x = 13;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 13;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 14;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 14;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
 private:
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_kill_count();
  inline void clear_has_kill_count();
  inline void set_has_death_count();
  inline void clear_has_death_count();
  inline void set_has_assists_count();
  inline void clear_has_assists_count();
  inline void set_has_denies_count();
  inline void clear_has_denies_count();
  inline void set_has_lh_count();
  inline void clear_has_lh_count();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 accountid_;
  ::google::protobuf::uint32 playerid_;
  ::std::string* name_;
  ::google::protobuf::uint32 team_;
  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 kill_count_;
  ::google::protobuf::uint32 death_count_;
  ::google::protobuf::uint32 assists_count_;
  ::google::protobuf::uint32 denies_count_;
  ::google::protobuf::uint32 lh_count_;
  ::google::protobuf::uint32 gold_;
  float x_;
  float y_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStatsTerse_PlayerDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStatsTerse_BuildingDetails : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStatsTerse_BuildingDetails();
  virtual ~CMsgDOTARealtimeGameStatsTerse_BuildingDetails();

  CMsgDOTARealtimeGameStatsTerse_BuildingDetails(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from);

  inline CMsgDOTARealtimeGameStatsTerse_BuildingDetails& operator=(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& default_instance();

  void Swap(CMsgDOTARealtimeGameStatsTerse_BuildingDetails* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStatsTerse_BuildingDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 team = 1;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 1;
  inline ::google::protobuf::uint32 team() const;
  inline void set_team(::google::protobuf::uint32 value);

  // optional float heading = 2;
  inline bool has_heading() const;
  inline void clear_heading();
  static const int kHeadingFieldNumber = 2;
  inline float heading() const;
  inline void set_heading(float value);

  // optional uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 lane = 4;
  inline bool has_lane() const;
  inline void clear_lane();
  static const int kLaneFieldNumber = 4;
  inline ::google::protobuf::uint32 lane() const;
  inline void set_lane(::google::protobuf::uint32 value);

  // optional uint32 tier = 5;
  inline bool has_tier() const;
  inline void clear_tier();
  static const int kTierFieldNumber = 5;
  inline ::google::protobuf::uint32 tier() const;
  inline void set_tier(::google::protobuf::uint32 value);

  // optional float x = 6;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 6;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 7;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 7;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
 private:
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_heading();
  inline void clear_has_heading();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_lane();
  inline void clear_has_lane();
  inline void set_has_tier();
  inline void clear_has_tier();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 team_;
  float heading_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 lane_;
  ::google::protobuf::uint32 tier_;
  float x_;
  float y_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStatsTerse_BuildingDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStatsTerse_MatchDetails : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStatsTerse_MatchDetails();
  virtual ~CMsgDOTARealtimeGameStatsTerse_MatchDetails();

  CMsgDOTARealtimeGameStatsTerse_MatchDetails(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from);

  inline CMsgDOTARealtimeGameStatsTerse_MatchDetails& operator=(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStatsTerse_MatchDetails& default_instance();

  void Swap(CMsgDOTARealtimeGameStatsTerse_MatchDetails* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStatsTerse_MatchDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 server_steam_id = 1;
  inline bool has_server_steam_id() const;
  inline void clear_server_steam_id();
  static const int kServerSteamIdFieldNumber = 1;
  inline ::google::protobuf::uint64 server_steam_id() const;
  inline void set_server_steam_id(::google::protobuf::uint64 value);

  // optional uint64 matchid = 2;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 2;
  inline ::google::protobuf::uint64 matchid() const;
  inline void set_matchid(::google::protobuf::uint64 value);

  // optional uint32 timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // optional int32 game_time = 4;
  inline bool has_game_time() const;
  inline void clear_game_time();
  static const int kGameTimeFieldNumber = 4;
  inline ::google::protobuf::int32 game_time() const;
  inline void set_game_time(::google::protobuf::int32 value);

  // repeated uint32 steam_broadcaster_account_ids = 6;
  inline int steam_broadcaster_account_ids_size() const;
  inline void clear_steam_broadcaster_account_ids();
  static const int kSteamBroadcasterAccountIdsFieldNumber = 6;
  inline ::google::protobuf::uint32 steam_broadcaster_account_ids(int index) const;
  inline void set_steam_broadcaster_account_ids(int index, ::google::protobuf::uint32 value);
  inline void add_steam_broadcaster_account_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      steam_broadcaster_account_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_steam_broadcaster_account_ids();

  // optional uint32 game_mode = 7;
  inline bool has_game_mode() const;
  inline void clear_game_mode();
  static const int kGameModeFieldNumber = 7;
  inline ::google::protobuf::uint32 game_mode() const;
  inline void set_game_mode(::google::protobuf::uint32 value);

  // optional uint32 league_id = 8;
  inline bool has_league_id() const;
  inline void clear_league_id();
  static const int kLeagueIdFieldNumber = 8;
  inline ::google::protobuf::uint32 league_id() const;
  inline void set_league_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
 private:
  inline void set_has_server_steam_id();
  inline void clear_has_server_steam_id();
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_game_time();
  inline void clear_has_game_time();
  inline void set_has_game_mode();
  inline void clear_has_game_mode();
  inline void set_has_league_id();
  inline void clear_has_league_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 server_steam_id_;
  ::google::protobuf::uint64 matchid_;
  ::google::protobuf::uint32 timestamp_;
  ::google::protobuf::int32 game_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > steam_broadcaster_account_ids_;
  ::google::protobuf::uint32 game_mode_;
  ::google::protobuf::uint32 league_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStatsTerse_MatchDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStatsTerse_GraphData : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStatsTerse_GraphData();
  virtual ~CMsgDOTARealtimeGameStatsTerse_GraphData();

  CMsgDOTARealtimeGameStatsTerse_GraphData(const CMsgDOTARealtimeGameStatsTerse_GraphData& from);

  inline CMsgDOTARealtimeGameStatsTerse_GraphData& operator=(const CMsgDOTARealtimeGameStatsTerse_GraphData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStatsTerse_GraphData& default_instance();

  void Swap(CMsgDOTARealtimeGameStatsTerse_GraphData* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStatsTerse_GraphData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStatsTerse_GraphData& from);
  void MergeFrom(const CMsgDOTARealtimeGameStatsTerse_GraphData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 graph_gold = 1;
  inline int graph_gold_size() const;
  inline void clear_graph_gold();
  static const int kGraphGoldFieldNumber = 1;
  inline ::google::protobuf::int32 graph_gold(int index) const;
  inline void set_graph_gold(int index, ::google::protobuf::int32 value);
  inline void add_graph_gold(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      graph_gold() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_graph_gold();

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStatsTerse.GraphData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > graph_gold_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStatsTerse_GraphData* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStatsTerse : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStatsTerse();
  virtual ~CMsgDOTARealtimeGameStatsTerse();

  CMsgDOTARealtimeGameStatsTerse(const CMsgDOTARealtimeGameStatsTerse& from);

  inline CMsgDOTARealtimeGameStatsTerse& operator=(const CMsgDOTARealtimeGameStatsTerse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStatsTerse& default_instance();

  void Swap(CMsgDOTARealtimeGameStatsTerse* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStatsTerse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStatsTerse& from);
  void MergeFrom(const CMsgDOTARealtimeGameStatsTerse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTARealtimeGameStatsTerse_TeamDetails TeamDetails;
  typedef CMsgDOTARealtimeGameStatsTerse_PlayerDetails PlayerDetails;
  typedef CMsgDOTARealtimeGameStatsTerse_BuildingDetails BuildingDetails;
  typedef CMsgDOTARealtimeGameStatsTerse_MatchDetails MatchDetails;
  typedef CMsgDOTARealtimeGameStatsTerse_GraphData GraphData;

  // accessors -------------------------------------------------------

  // optional .CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
  inline bool has_match() const;
  inline void clear_match();
  static const int kMatchFieldNumber = 1;
  inline const ::CMsgDOTARealtimeGameStatsTerse_MatchDetails& match() const;
  inline ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* mutable_match();
  inline ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* release_match();
  inline void set_allocated_match(::CMsgDOTARealtimeGameStatsTerse_MatchDetails* match);

  // repeated .CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
  inline int teams_size() const;
  inline void clear_teams();
  static const int kTeamsFieldNumber = 2;
  inline const ::CMsgDOTARealtimeGameStatsTerse_TeamDetails& teams(int index) const;
  inline ::CMsgDOTARealtimeGameStatsTerse_TeamDetails* mutable_teams(int index);
  inline ::CMsgDOTARealtimeGameStatsTerse_TeamDetails* add_teams();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_TeamDetails >&
      teams() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_TeamDetails >*
      mutable_teams();

  // repeated .CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
  inline int buildings_size() const;
  inline void clear_buildings();
  static const int kBuildingsFieldNumber = 3;
  inline const ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails& buildings(int index) const;
  inline ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails* mutable_buildings(int index);
  inline ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails* add_buildings();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails >&
      buildings() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails >*
      mutable_buildings();

  // optional .CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
  inline bool has_graph_data() const;
  inline void clear_graph_data();
  static const int kGraphDataFieldNumber = 4;
  inline const ::CMsgDOTARealtimeGameStatsTerse_GraphData& graph_data() const;
  inline ::CMsgDOTARealtimeGameStatsTerse_GraphData* mutable_graph_data();
  inline ::CMsgDOTARealtimeGameStatsTerse_GraphData* release_graph_data();
  inline void set_allocated_graph_data(::CMsgDOTARealtimeGameStatsTerse_GraphData* graph_data);

  // optional bool delta_frame = 5;
  inline bool has_delta_frame() const;
  inline void clear_delta_frame();
  static const int kDeltaFrameFieldNumber = 5;
  inline bool delta_frame() const;
  inline void set_delta_frame(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStatsTerse)
 private:
  inline void set_has_match();
  inline void clear_has_match();
  inline void set_has_graph_data();
  inline void clear_has_graph_data();
  inline void set_has_delta_frame();
  inline void clear_has_delta_frame();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* match_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_TeamDetails > teams_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails > buildings_;
  ::CMsgDOTARealtimeGameStatsTerse_GraphData* graph_data_;
  bool delta_frame_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStatsTerse* default_instance_;
};
// ===================================================================


// ===================================================================

// CSODOTAGameAccountClient

// optional uint32 account_id = 1;
inline bool CSODOTAGameAccountClient::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAGameAccountClient::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAGameAccountClient::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.account_id)
  return account_id_;
}
inline void CSODOTAGameAccountClient::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.account_id)
}

// optional uint32 wins = 3;
inline bool CSODOTAGameAccountClient::has_wins() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_wins() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAGameAccountClient::clear_has_wins() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAGameAccountClient::clear_wins() {
  wins_ = 0u;
  clear_has_wins();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::wins() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.wins)
  return wins_;
}
inline void CSODOTAGameAccountClient::set_wins(::google::protobuf::uint32 value) {
  set_has_wins();
  wins_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.wins)
}

// optional uint32 losses = 4;
inline bool CSODOTAGameAccountClient::has_losses() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_losses() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSODOTAGameAccountClient::clear_has_losses() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSODOTAGameAccountClient::clear_losses() {
  losses_ = 0u;
  clear_has_losses();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::losses() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.losses)
  return losses_;
}
inline void CSODOTAGameAccountClient::set_losses(::google::protobuf::uint32 value) {
  set_has_losses();
  losses_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.losses)
}

// optional uint32 xp = 12;
inline bool CSODOTAGameAccountClient::has_xp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_xp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSODOTAGameAccountClient::clear_has_xp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSODOTAGameAccountClient::clear_xp() {
  xp_ = 0u;
  clear_has_xp();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::xp() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.xp)
  return xp_;
}
inline void CSODOTAGameAccountClient::set_xp(::google::protobuf::uint32 value) {
  set_has_xp();
  xp_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.xp)
}

// optional uint32 level = 13;
inline bool CSODOTAGameAccountClient::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSODOTAGameAccountClient::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSODOTAGameAccountClient::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::level() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.level)
  return level_;
}
inline void CSODOTAGameAccountClient::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.level)
}

// optional uint32 initial_skill = 14;
inline bool CSODOTAGameAccountClient::has_initial_skill() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_initial_skill() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSODOTAGameAccountClient::clear_has_initial_skill() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSODOTAGameAccountClient::clear_initial_skill() {
  initial_skill_ = 0u;
  clear_has_initial_skill();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::initial_skill() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.initial_skill)
  return initial_skill_;
}
inline void CSODOTAGameAccountClient::set_initial_skill(::google::protobuf::uint32 value) {
  set_has_initial_skill();
  initial_skill_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.initial_skill)
}

// optional uint32 leaver_count = 15;
inline bool CSODOTAGameAccountClient::has_leaver_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_leaver_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSODOTAGameAccountClient::clear_has_leaver_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSODOTAGameAccountClient::clear_leaver_count() {
  leaver_count_ = 0u;
  clear_has_leaver_count();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::leaver_count() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.leaver_count)
  return leaver_count_;
}
inline void CSODOTAGameAccountClient::set_leaver_count(::google::protobuf::uint32 value) {
  set_has_leaver_count();
  leaver_count_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.leaver_count)
}

// optional uint32 secondary_leaver_count = 58;
inline bool CSODOTAGameAccountClient::has_secondary_leaver_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_secondary_leaver_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSODOTAGameAccountClient::clear_has_secondary_leaver_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSODOTAGameAccountClient::clear_secondary_leaver_count() {
  secondary_leaver_count_ = 0u;
  clear_has_secondary_leaver_count();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::secondary_leaver_count() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.secondary_leaver_count)
  return secondary_leaver_count_;
}
inline void CSODOTAGameAccountClient::set_secondary_leaver_count(::google::protobuf::uint32 value) {
  set_has_secondary_leaver_count();
  secondary_leaver_count_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.secondary_leaver_count)
}

// optional uint32 low_priority_until_date = 18;
inline bool CSODOTAGameAccountClient::has_low_priority_until_date() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_low_priority_until_date() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSODOTAGameAccountClient::clear_has_low_priority_until_date() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSODOTAGameAccountClient::clear_low_priority_until_date() {
  low_priority_until_date_ = 0u;
  clear_has_low_priority_until_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::low_priority_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.low_priority_until_date)
  return low_priority_until_date_;
}
inline void CSODOTAGameAccountClient::set_low_priority_until_date(::google::protobuf::uint32 value) {
  set_has_low_priority_until_date();
  low_priority_until_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.low_priority_until_date)
}

// optional uint32 prevent_text_chat_until_date = 20;
inline bool CSODOTAGameAccountClient::has_prevent_text_chat_until_date() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_prevent_text_chat_until_date() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSODOTAGameAccountClient::clear_has_prevent_text_chat_until_date() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSODOTAGameAccountClient::clear_prevent_text_chat_until_date() {
  prevent_text_chat_until_date_ = 0u;
  clear_has_prevent_text_chat_until_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::prevent_text_chat_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.prevent_text_chat_until_date)
  return prevent_text_chat_until_date_;
}
inline void CSODOTAGameAccountClient::set_prevent_text_chat_until_date(::google::protobuf::uint32 value) {
  set_has_prevent_text_chat_until_date();
  prevent_text_chat_until_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.prevent_text_chat_until_date)
}

// optional uint32 prevent_voice_until_date = 21;
inline bool CSODOTAGameAccountClient::has_prevent_voice_until_date() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_prevent_voice_until_date() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSODOTAGameAccountClient::clear_has_prevent_voice_until_date() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSODOTAGameAccountClient::clear_prevent_voice_until_date() {
  prevent_voice_until_date_ = 0u;
  clear_has_prevent_voice_until_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::prevent_voice_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.prevent_voice_until_date)
  return prevent_voice_until_date_;
}
inline void CSODOTAGameAccountClient::set_prevent_voice_until_date(::google::protobuf::uint32 value) {
  set_has_prevent_voice_until_date();
  prevent_voice_until_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.prevent_voice_until_date)
}

// optional uint32 last_abandoned_game_date = 22;
inline bool CSODOTAGameAccountClient::has_last_abandoned_game_date() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_last_abandoned_game_date() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CSODOTAGameAccountClient::clear_has_last_abandoned_game_date() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CSODOTAGameAccountClient::clear_last_abandoned_game_date() {
  last_abandoned_game_date_ = 0u;
  clear_has_last_abandoned_game_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::last_abandoned_game_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.last_abandoned_game_date)
  return last_abandoned_game_date_;
}
inline void CSODOTAGameAccountClient::set_last_abandoned_game_date(::google::protobuf::uint32 value) {
  set_has_last_abandoned_game_date();
  last_abandoned_game_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.last_abandoned_game_date)
}

// optional uint32 last_secondary_abandoned_game_date = 59;
inline bool CSODOTAGameAccountClient::has_last_secondary_abandoned_game_date() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_last_secondary_abandoned_game_date() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CSODOTAGameAccountClient::clear_has_last_secondary_abandoned_game_date() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CSODOTAGameAccountClient::clear_last_secondary_abandoned_game_date() {
  last_secondary_abandoned_game_date_ = 0u;
  clear_has_last_secondary_abandoned_game_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::last_secondary_abandoned_game_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.last_secondary_abandoned_game_date)
  return last_secondary_abandoned_game_date_;
}
inline void CSODOTAGameAccountClient::set_last_secondary_abandoned_game_date(::google::protobuf::uint32 value) {
  set_has_last_secondary_abandoned_game_date();
  last_secondary_abandoned_game_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.last_secondary_abandoned_game_date)
}

// optional uint32 leaver_penalty_count = 23;
inline bool CSODOTAGameAccountClient::has_leaver_penalty_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_leaver_penalty_count() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CSODOTAGameAccountClient::clear_has_leaver_penalty_count() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CSODOTAGameAccountClient::clear_leaver_penalty_count() {
  leaver_penalty_count_ = 0u;
  clear_has_leaver_penalty_count();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::leaver_penalty_count() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.leaver_penalty_count)
  return leaver_penalty_count_;
}
inline void CSODOTAGameAccountClient::set_leaver_penalty_count(::google::protobuf::uint32 value) {
  set_has_leaver_penalty_count();
  leaver_penalty_count_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.leaver_penalty_count)
}

// optional uint32 completed_game_streak = 24;
inline bool CSODOTAGameAccountClient::has_completed_game_streak() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_completed_game_streak() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CSODOTAGameAccountClient::clear_has_completed_game_streak() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CSODOTAGameAccountClient::clear_completed_game_streak() {
  completed_game_streak_ = 0u;
  clear_has_completed_game_streak();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::completed_game_streak() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.completed_game_streak)
  return completed_game_streak_;
}
inline void CSODOTAGameAccountClient::set_completed_game_streak(::google::protobuf::uint32 value) {
  set_has_completed_game_streak();
  completed_game_streak_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.completed_game_streak)
}

// optional uint32 teaching = 28;
inline bool CSODOTAGameAccountClient::has_teaching() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_teaching() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CSODOTAGameAccountClient::clear_has_teaching() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CSODOTAGameAccountClient::clear_teaching() {
  teaching_ = 0u;
  clear_has_teaching();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::teaching() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.teaching)
  return teaching_;
}
inline void CSODOTAGameAccountClient::set_teaching(::google::protobuf::uint32 value) {
  set_has_teaching();
  teaching_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.teaching)
}

// optional uint32 leadership = 29;
inline bool CSODOTAGameAccountClient::has_leadership() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_leadership() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CSODOTAGameAccountClient::clear_has_leadership() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CSODOTAGameAccountClient::clear_leadership() {
  leadership_ = 0u;
  clear_has_leadership();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::leadership() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.leadership)
  return leadership_;
}
inline void CSODOTAGameAccountClient::set_leadership(::google::protobuf::uint32 value) {
  set_has_leadership();
  leadership_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.leadership)
}

// optional uint32 friendly = 30;
inline bool CSODOTAGameAccountClient::has_friendly() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_friendly() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CSODOTAGameAccountClient::clear_has_friendly() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CSODOTAGameAccountClient::clear_friendly() {
  friendly_ = 0u;
  clear_has_friendly();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::friendly() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.friendly)
  return friendly_;
}
inline void CSODOTAGameAccountClient::set_friendly(::google::protobuf::uint32 value) {
  set_has_friendly();
  friendly_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.friendly)
}

// optional uint32 forgiving = 31;
inline bool CSODOTAGameAccountClient::has_forgiving() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_forgiving() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CSODOTAGameAccountClient::clear_has_forgiving() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CSODOTAGameAccountClient::clear_forgiving() {
  forgiving_ = 0u;
  clear_has_forgiving();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::forgiving() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.forgiving)
  return forgiving_;
}
inline void CSODOTAGameAccountClient::set_forgiving(::google::protobuf::uint32 value) {
  set_has_forgiving();
  forgiving_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.forgiving)
}

// optional uint32 account_disabled_until_date = 38;
inline bool CSODOTAGameAccountClient::has_account_disabled_until_date() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_account_disabled_until_date() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CSODOTAGameAccountClient::clear_has_account_disabled_until_date() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CSODOTAGameAccountClient::clear_account_disabled_until_date() {
  account_disabled_until_date_ = 0u;
  clear_has_account_disabled_until_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::account_disabled_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.account_disabled_until_date)
  return account_disabled_until_date_;
}
inline void CSODOTAGameAccountClient::set_account_disabled_until_date(::google::protobuf::uint32 value) {
  set_has_account_disabled_until_date();
  account_disabled_until_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.account_disabled_until_date)
}

// optional uint32 account_disabled_count = 39;
inline bool CSODOTAGameAccountClient::has_account_disabled_count() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_account_disabled_count() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CSODOTAGameAccountClient::clear_has_account_disabled_count() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CSODOTAGameAccountClient::clear_account_disabled_count() {
  account_disabled_count_ = 0u;
  clear_has_account_disabled_count();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::account_disabled_count() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.account_disabled_count)
  return account_disabled_count_;
}
inline void CSODOTAGameAccountClient::set_account_disabled_count(::google::protobuf::uint32 value) {
  set_has_account_disabled_count();
  account_disabled_count_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.account_disabled_count)
}

// optional uint32 showcase_hero_id = 40;
inline bool CSODOTAGameAccountClient::has_showcase_hero_id() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_showcase_hero_id() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CSODOTAGameAccountClient::clear_has_showcase_hero_id() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CSODOTAGameAccountClient::clear_showcase_hero_id() {
  showcase_hero_id_ = 0u;
  clear_has_showcase_hero_id();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::showcase_hero_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.showcase_hero_id)
  return showcase_hero_id_;
}
inline void CSODOTAGameAccountClient::set_showcase_hero_id(::google::protobuf::uint32 value) {
  set_has_showcase_hero_id();
  showcase_hero_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.showcase_hero_id)
}

// optional uint32 match_disabled_until_date = 41;
inline bool CSODOTAGameAccountClient::has_match_disabled_until_date() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_match_disabled_until_date() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CSODOTAGameAccountClient::clear_has_match_disabled_until_date() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CSODOTAGameAccountClient::clear_match_disabled_until_date() {
  match_disabled_until_date_ = 0u;
  clear_has_match_disabled_until_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::match_disabled_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.match_disabled_until_date)
  return match_disabled_until_date_;
}
inline void CSODOTAGameAccountClient::set_match_disabled_until_date(::google::protobuf::uint32 value) {
  set_has_match_disabled_until_date();
  match_disabled_until_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.match_disabled_until_date)
}

// optional uint32 match_disabled_count = 42;
inline bool CSODOTAGameAccountClient::has_match_disabled_count() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_match_disabled_count() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CSODOTAGameAccountClient::clear_has_match_disabled_count() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CSODOTAGameAccountClient::clear_match_disabled_count() {
  match_disabled_count_ = 0u;
  clear_has_match_disabled_count();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::match_disabled_count() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.match_disabled_count)
  return match_disabled_count_;
}
inline void CSODOTAGameAccountClient::set_match_disabled_count(::google::protobuf::uint32 value) {
  set_has_match_disabled_count();
  match_disabled_count_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.match_disabled_count)
}

// optional .PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
inline bool CSODOTAGameAccountClient::has_partner_account_type() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_partner_account_type() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CSODOTAGameAccountClient::clear_has_partner_account_type() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CSODOTAGameAccountClient::clear_partner_account_type() {
  partner_account_type_ = 0;
  clear_has_partner_account_type();
}
inline ::PartnerAccountType CSODOTAGameAccountClient::partner_account_type() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.partner_account_type)
  return static_cast< ::PartnerAccountType >(partner_account_type_);
}
inline void CSODOTAGameAccountClient::set_partner_account_type(::PartnerAccountType value) {
  assert(::PartnerAccountType_IsValid(value));
  set_has_partner_account_type();
  partner_account_type_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.partner_account_type)
}

// optional uint32 partner_account_state = 45;
inline bool CSODOTAGameAccountClient::has_partner_account_state() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_partner_account_state() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CSODOTAGameAccountClient::clear_has_partner_account_state() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CSODOTAGameAccountClient::clear_partner_account_state() {
  partner_account_state_ = 0u;
  clear_has_partner_account_state();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::partner_account_state() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.partner_account_state)
  return partner_account_state_;
}
inline void CSODOTAGameAccountClient::set_partner_account_state(::google::protobuf::uint32 value) {
  set_has_partner_account_state();
  partner_account_state_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.partner_account_state)
}

// optional uint32 shutdownlawterminatetimestamp = 47;
inline bool CSODOTAGameAccountClient::has_shutdownlawterminatetimestamp() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_shutdownlawterminatetimestamp() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CSODOTAGameAccountClient::clear_has_shutdownlawterminatetimestamp() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CSODOTAGameAccountClient::clear_shutdownlawterminatetimestamp() {
  shutdownlawterminatetimestamp_ = 0u;
  clear_has_shutdownlawterminatetimestamp();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::shutdownlawterminatetimestamp() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.shutdownlawterminatetimestamp)
  return shutdownlawterminatetimestamp_;
}
inline void CSODOTAGameAccountClient::set_shutdownlawterminatetimestamp(::google::protobuf::uint32 value) {
  set_has_shutdownlawterminatetimestamp();
  shutdownlawterminatetimestamp_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.shutdownlawterminatetimestamp)
}

// optional uint32 low_priority_games_remaining = 48;
inline bool CSODOTAGameAccountClient::has_low_priority_games_remaining() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_low_priority_games_remaining() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CSODOTAGameAccountClient::clear_has_low_priority_games_remaining() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CSODOTAGameAccountClient::clear_low_priority_games_remaining() {
  low_priority_games_remaining_ = 0u;
  clear_has_low_priority_games_remaining();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::low_priority_games_remaining() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.low_priority_games_remaining)
  return low_priority_games_remaining_;
}
inline void CSODOTAGameAccountClient::set_low_priority_games_remaining(::google::protobuf::uint32 value) {
  set_has_low_priority_games_remaining();
  low_priority_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.low_priority_games_remaining)
}

// optional uint32 competitive_rank = 49;
inline bool CSODOTAGameAccountClient::has_competitive_rank() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_competitive_rank() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CSODOTAGameAccountClient::clear_has_competitive_rank() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CSODOTAGameAccountClient::clear_competitive_rank() {
  competitive_rank_ = 0u;
  clear_has_competitive_rank();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::competitive_rank() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.competitive_rank)
  return competitive_rank_;
}
inline void CSODOTAGameAccountClient::set_competitive_rank(::google::protobuf::uint32 value) {
  set_has_competitive_rank();
  competitive_rank_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.competitive_rank)
}

// optional uint32 calibration_games_remaining = 51;
inline bool CSODOTAGameAccountClient::has_calibration_games_remaining() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_calibration_games_remaining() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CSODOTAGameAccountClient::clear_has_calibration_games_remaining() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CSODOTAGameAccountClient::clear_calibration_games_remaining() {
  calibration_games_remaining_ = 0u;
  clear_has_calibration_games_remaining();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::calibration_games_remaining() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.calibration_games_remaining)
  return calibration_games_remaining_;
}
inline void CSODOTAGameAccountClient::set_calibration_games_remaining(::google::protobuf::uint32 value) {
  set_has_calibration_games_remaining();
  calibration_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.calibration_games_remaining)
}

// optional uint32 solo_competitive_rank = 52;
inline bool CSODOTAGameAccountClient::has_solo_competitive_rank() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_solo_competitive_rank() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CSODOTAGameAccountClient::clear_has_solo_competitive_rank() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CSODOTAGameAccountClient::clear_solo_competitive_rank() {
  solo_competitive_rank_ = 0u;
  clear_has_solo_competitive_rank();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::solo_competitive_rank() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.solo_competitive_rank)
  return solo_competitive_rank_;
}
inline void CSODOTAGameAccountClient::set_solo_competitive_rank(::google::protobuf::uint32 value) {
  set_has_solo_competitive_rank();
  solo_competitive_rank_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.solo_competitive_rank)
}

// optional uint32 solo_calibration_games_remaining = 54;
inline bool CSODOTAGameAccountClient::has_solo_calibration_games_remaining() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_solo_calibration_games_remaining() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CSODOTAGameAccountClient::clear_has_solo_calibration_games_remaining() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CSODOTAGameAccountClient::clear_solo_calibration_games_remaining() {
  solo_calibration_games_remaining_ = 0u;
  clear_has_solo_calibration_games_remaining();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::solo_calibration_games_remaining() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.solo_calibration_games_remaining)
  return solo_calibration_games_remaining_;
}
inline void CSODOTAGameAccountClient::set_solo_calibration_games_remaining(::google::protobuf::uint32 value) {
  set_has_solo_calibration_games_remaining();
  solo_calibration_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.solo_calibration_games_remaining)
}

// optional uint32 competitive_1v1_rank = 63;
inline bool CSODOTAGameAccountClient::has_competitive_1v1_rank() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_competitive_1v1_rank() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CSODOTAGameAccountClient::clear_has_competitive_1v1_rank() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CSODOTAGameAccountClient::clear_competitive_1v1_rank() {
  competitive_1v1_rank_ = 0u;
  clear_has_competitive_1v1_rank();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::competitive_1v1_rank() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.competitive_1v1_rank)
  return competitive_1v1_rank_;
}
inline void CSODOTAGameAccountClient::set_competitive_1v1_rank(::google::protobuf::uint32 value) {
  set_has_competitive_1v1_rank();
  competitive_1v1_rank_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.competitive_1v1_rank)
}

// optional uint32 competitive_1v1_calibration_games_remaining = 64;
inline bool CSODOTAGameAccountClient::has_competitive_1v1_calibration_games_remaining() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_competitive_1v1_calibration_games_remaining() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CSODOTAGameAccountClient::clear_has_competitive_1v1_calibration_games_remaining() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CSODOTAGameAccountClient::clear_competitive_1v1_calibration_games_remaining() {
  competitive_1v1_calibration_games_remaining_ = 0u;
  clear_has_competitive_1v1_calibration_games_remaining();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::competitive_1v1_calibration_games_remaining() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.competitive_1v1_calibration_games_remaining)
  return competitive_1v1_calibration_games_remaining_;
}
inline void CSODOTAGameAccountClient::set_competitive_1v1_calibration_games_remaining(::google::protobuf::uint32 value) {
  set_has_competitive_1v1_calibration_games_remaining();
  competitive_1v1_calibration_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.competitive_1v1_calibration_games_remaining)
}

// optional uint32 recruitment_level = 55;
inline bool CSODOTAGameAccountClient::has_recruitment_level() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_recruitment_level() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CSODOTAGameAccountClient::clear_has_recruitment_level() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CSODOTAGameAccountClient::clear_recruitment_level() {
  recruitment_level_ = 0u;
  clear_has_recruitment_level();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::recruitment_level() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.recruitment_level)
  return recruitment_level_;
}
inline void CSODOTAGameAccountClient::set_recruitment_level(::google::protobuf::uint32 value) {
  set_has_recruitment_level();
  recruitment_level_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.recruitment_level)
}

// optional bool has_new_notifications = 56;
inline bool CSODOTAGameAccountClient::has_has_new_notifications() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_has_new_notifications() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CSODOTAGameAccountClient::clear_has_has_new_notifications() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CSODOTAGameAccountClient::clear_has_new_notifications() {
  has_new_notifications_ = false;
  clear_has_has_new_notifications();
}
inline bool CSODOTAGameAccountClient::has_new_notifications() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.has_new_notifications)
  return has_new_notifications_;
}
inline void CSODOTAGameAccountClient::set_has_new_notifications(bool value) {
  set_has_has_new_notifications();
  has_new_notifications_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.has_new_notifications)
}

// optional bool is_league_admin = 57;
inline bool CSODOTAGameAccountClient::has_is_league_admin() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_is_league_admin() {
  _has_bits_[1] |= 0x00000010u;
}
inline void CSODOTAGameAccountClient::clear_has_is_league_admin() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void CSODOTAGameAccountClient::clear_is_league_admin() {
  is_league_admin_ = false;
  clear_has_is_league_admin();
}
inline bool CSODOTAGameAccountClient::is_league_admin() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.is_league_admin)
  return is_league_admin_;
}
inline void CSODOTAGameAccountClient::set_is_league_admin(bool value) {
  set_has_is_league_admin();
  is_league_admin_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.is_league_admin)
}

// optional uint32 casual_games_played = 60;
inline bool CSODOTAGameAccountClient::has_casual_games_played() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_casual_games_played() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CSODOTAGameAccountClient::clear_has_casual_games_played() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CSODOTAGameAccountClient::clear_casual_games_played() {
  casual_games_played_ = 0u;
  clear_has_casual_games_played();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::casual_games_played() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.casual_games_played)
  return casual_games_played_;
}
inline void CSODOTAGameAccountClient::set_casual_games_played(::google::protobuf::uint32 value) {
  set_has_casual_games_played();
  casual_games_played_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.casual_games_played)
}

// optional uint32 solo_competitive_games_played = 61;
inline bool CSODOTAGameAccountClient::has_solo_competitive_games_played() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_solo_competitive_games_played() {
  _has_bits_[1] |= 0x00000040u;
}
inline void CSODOTAGameAccountClient::clear_has_solo_competitive_games_played() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void CSODOTAGameAccountClient::clear_solo_competitive_games_played() {
  solo_competitive_games_played_ = 0u;
  clear_has_solo_competitive_games_played();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::solo_competitive_games_played() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.solo_competitive_games_played)
  return solo_competitive_games_played_;
}
inline void CSODOTAGameAccountClient::set_solo_competitive_games_played(::google::protobuf::uint32 value) {
  set_has_solo_competitive_games_played();
  solo_competitive_games_played_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.solo_competitive_games_played)
}

// optional uint32 party_competitive_games_played = 62;
inline bool CSODOTAGameAccountClient::has_party_competitive_games_played() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_party_competitive_games_played() {
  _has_bits_[1] |= 0x00000080u;
}
inline void CSODOTAGameAccountClient::clear_has_party_competitive_games_played() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void CSODOTAGameAccountClient::clear_party_competitive_games_played() {
  party_competitive_games_played_ = 0u;
  clear_has_party_competitive_games_played();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::party_competitive_games_played() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.party_competitive_games_played)
  return party_competitive_games_played_;
}
inline void CSODOTAGameAccountClient::set_party_competitive_games_played(::google::protobuf::uint32 value) {
  set_has_party_competitive_games_played();
  party_competitive_games_played_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.party_competitive_games_played)
}

// optional uint32 casual_1v1_games_played = 65;
inline bool CSODOTAGameAccountClient::has_casual_1v1_games_played() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_casual_1v1_games_played() {
  _has_bits_[1] |= 0x00000100u;
}
inline void CSODOTAGameAccountClient::clear_has_casual_1v1_games_played() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void CSODOTAGameAccountClient::clear_casual_1v1_games_played() {
  casual_1v1_games_played_ = 0u;
  clear_has_casual_1v1_games_played();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::casual_1v1_games_played() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.casual_1v1_games_played)
  return casual_1v1_games_played_;
}
inline void CSODOTAGameAccountClient::set_casual_1v1_games_played(::google::protobuf::uint32 value) {
  set_has_casual_1v1_games_played();
  casual_1v1_games_played_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.casual_1v1_games_played)
}

// optional uint32 competitive_team_games_played = 66;
inline bool CSODOTAGameAccountClient::has_competitive_team_games_played() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_competitive_team_games_played() {
  _has_bits_[1] |= 0x00000200u;
}
inline void CSODOTAGameAccountClient::clear_has_competitive_team_games_played() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void CSODOTAGameAccountClient::clear_competitive_team_games_played() {
  competitive_team_games_played_ = 0u;
  clear_has_competitive_team_games_played();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::competitive_team_games_played() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.competitive_team_games_played)
  return competitive_team_games_played_;
}
inline void CSODOTAGameAccountClient::set_competitive_team_games_played(::google::protobuf::uint32 value) {
  set_has_competitive_team_games_played();
  competitive_team_games_played_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.competitive_team_games_played)
}

// optional uint32 curr_all_hero_challenge_id = 67;
inline bool CSODOTAGameAccountClient::has_curr_all_hero_challenge_id() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_curr_all_hero_challenge_id() {
  _has_bits_[1] |= 0x00000400u;
}
inline void CSODOTAGameAccountClient::clear_has_curr_all_hero_challenge_id() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void CSODOTAGameAccountClient::clear_curr_all_hero_challenge_id() {
  curr_all_hero_challenge_id_ = 0u;
  clear_has_curr_all_hero_challenge_id();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::curr_all_hero_challenge_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.curr_all_hero_challenge_id)
  return curr_all_hero_challenge_id_;
}
inline void CSODOTAGameAccountClient::set_curr_all_hero_challenge_id(::google::protobuf::uint32 value) {
  set_has_curr_all_hero_challenge_id();
  curr_all_hero_challenge_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.curr_all_hero_challenge_id)
}

// optional uint32 play_time_points = 68;
inline bool CSODOTAGameAccountClient::has_play_time_points() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_play_time_points() {
  _has_bits_[1] |= 0x00000800u;
}
inline void CSODOTAGameAccountClient::clear_has_play_time_points() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void CSODOTAGameAccountClient::clear_play_time_points() {
  play_time_points_ = 0u;
  clear_has_play_time_points();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::play_time_points() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.play_time_points)
  return play_time_points_;
}
inline void CSODOTAGameAccountClient::set_play_time_points(::google::protobuf::uint32 value) {
  set_has_play_time_points();
  play_time_points_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.play_time_points)
}

// optional uint32 account_flags = 69;
inline bool CSODOTAGameAccountClient::has_account_flags() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_account_flags() {
  _has_bits_[1] |= 0x00001000u;
}
inline void CSODOTAGameAccountClient::clear_has_account_flags() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void CSODOTAGameAccountClient::clear_account_flags() {
  account_flags_ = 0u;
  clear_has_account_flags();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::account_flags() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.account_flags)
  return account_flags_;
}
inline void CSODOTAGameAccountClient::set_account_flags(::google::protobuf::uint32 value) {
  set_has_account_flags();
  account_flags_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.account_flags)
}

// optional uint32 play_time_level = 70;
inline bool CSODOTAGameAccountClient::has_play_time_level() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_play_time_level() {
  _has_bits_[1] |= 0x00002000u;
}
inline void CSODOTAGameAccountClient::clear_has_play_time_level() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void CSODOTAGameAccountClient::clear_play_time_level() {
  play_time_level_ = 0u;
  clear_has_play_time_level();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::play_time_level() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.play_time_level)
  return play_time_level_;
}
inline void CSODOTAGameAccountClient::set_play_time_level(::google::protobuf::uint32 value) {
  set_has_play_time_level();
  play_time_level_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.play_time_level)
}

// -------------------------------------------------------------------

// CSODOTAPartyMember

// optional .PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
inline bool CSODOTAPartyMember::has_partner_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAPartyMember::set_has_partner_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAPartyMember::clear_has_partner_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAPartyMember::clear_partner_type() {
  partner_type_ = 0;
  clear_has_partner_type();
}
inline ::PartnerAccountType CSODOTAPartyMember::partner_type() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.partner_type)
  return static_cast< ::PartnerAccountType >(partner_type_);
}
inline void CSODOTAPartyMember::set_partner_type(::PartnerAccountType value) {
  assert(::PartnerAccountType_IsValid(value));
  set_has_partner_type();
  partner_type_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.partner_type)
}

// optional bool is_coach = 2;
inline bool CSODOTAPartyMember::has_is_coach() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAPartyMember::set_has_is_coach() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAPartyMember::clear_has_is_coach() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAPartyMember::clear_is_coach() {
  is_coach_ = false;
  clear_has_is_coach();
}
inline bool CSODOTAPartyMember::is_coach() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.is_coach)
  return is_coach_;
}
inline void CSODOTAPartyMember::set_is_coach(bool value) {
  set_has_is_coach();
  is_coach_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.is_coach)
}

// -------------------------------------------------------------------

// CSODOTAParty

// optional uint64 party_id = 1;
inline bool CSODOTAParty::has_party_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAParty::set_has_party_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAParty::clear_has_party_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAParty::clear_party_id() {
  party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_party_id();
}
inline ::google::protobuf::uint64 CSODOTAParty::party_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.party_id)
  return party_id_;
}
inline void CSODOTAParty::set_party_id(::google::protobuf::uint64 value) {
  set_has_party_id();
  party_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.party_id)
}

// optional fixed64 leader_id = 2;
inline bool CSODOTAParty::has_leader_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAParty::set_has_leader_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAParty::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAParty::clear_leader_id() {
  leader_id_ = GOOGLE_ULONGLONG(0);
  clear_has_leader_id();
}
inline ::google::protobuf::uint64 CSODOTAParty::leader_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.leader_id)
  return leader_id_;
}
inline void CSODOTAParty::set_leader_id(::google::protobuf::uint64 value) {
  set_has_leader_id();
  leader_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.leader_id)
}

// repeated fixed64 member_ids = 3;
inline int CSODOTAParty::member_ids_size() const {
  return member_ids_.size();
}
inline void CSODOTAParty::clear_member_ids() {
  member_ids_.Clear();
}
inline ::google::protobuf::uint64 CSODOTAParty::member_ids(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.member_ids)
  return member_ids_.Get(index);
}
inline void CSODOTAParty::set_member_ids(int index, ::google::protobuf::uint64 value) {
  member_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.member_ids)
}
inline void CSODOTAParty::add_member_ids(::google::protobuf::uint64 value) {
  member_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CSODOTAParty.member_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CSODOTAParty::member_ids() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.member_ids)
  return member_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CSODOTAParty::mutable_member_ids() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.member_ids)
  return &member_ids_;
}

// optional uint32 game_modes = 4;
inline bool CSODOTAParty::has_game_modes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSODOTAParty::set_has_game_modes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSODOTAParty::clear_has_game_modes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSODOTAParty::clear_game_modes() {
  game_modes_ = 0u;
  clear_has_game_modes();
}
inline ::google::protobuf::uint32 CSODOTAParty::game_modes() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.game_modes)
  return game_modes_;
}
inline void CSODOTAParty::set_game_modes(::google::protobuf::uint32 value) {
  set_has_game_modes();
  game_modes_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.game_modes)
}

// optional .CSODOTAParty.State state = 6 [default = UI];
inline bool CSODOTAParty::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTAParty::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSODOTAParty::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSODOTAParty::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::CSODOTAParty_State CSODOTAParty::state() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.state)
  return static_cast< ::CSODOTAParty_State >(state_);
}
inline void CSODOTAParty::set_state(::CSODOTAParty_State value) {
  assert(::CSODOTAParty_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.state)
}

// optional uint32 effective_started_matchmaking_time = 7;
inline bool CSODOTAParty::has_effective_started_matchmaking_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTAParty::set_has_effective_started_matchmaking_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSODOTAParty::clear_has_effective_started_matchmaking_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSODOTAParty::clear_effective_started_matchmaking_time() {
  effective_started_matchmaking_time_ = 0u;
  clear_has_effective_started_matchmaking_time();
}
inline ::google::protobuf::uint32 CSODOTAParty::effective_started_matchmaking_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.effective_started_matchmaking_time)
  return effective_started_matchmaking_time_;
}
inline void CSODOTAParty::set_effective_started_matchmaking_time(::google::protobuf::uint32 value) {
  set_has_effective_started_matchmaking_time();
  effective_started_matchmaking_time_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.effective_started_matchmaking_time)
}

// optional uint32 raw_started_matchmaking_time = 32;
inline bool CSODOTAParty::has_raw_started_matchmaking_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSODOTAParty::set_has_raw_started_matchmaking_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSODOTAParty::clear_has_raw_started_matchmaking_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSODOTAParty::clear_raw_started_matchmaking_time() {
  raw_started_matchmaking_time_ = 0u;
  clear_has_raw_started_matchmaking_time();
}
inline ::google::protobuf::uint32 CSODOTAParty::raw_started_matchmaking_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.raw_started_matchmaking_time)
  return raw_started_matchmaking_time_;
}
inline void CSODOTAParty::set_raw_started_matchmaking_time(::google::protobuf::uint32 value) {
  set_has_raw_started_matchmaking_time();
  raw_started_matchmaking_time_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.raw_started_matchmaking_time)
}

// optional uint32 attempt_start_time = 33;
inline bool CSODOTAParty::has_attempt_start_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSODOTAParty::set_has_attempt_start_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSODOTAParty::clear_has_attempt_start_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSODOTAParty::clear_attempt_start_time() {
  attempt_start_time_ = 0u;
  clear_has_attempt_start_time();
}
inline ::google::protobuf::uint32 CSODOTAParty::attempt_start_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.attempt_start_time)
  return attempt_start_time_;
}
inline void CSODOTAParty::set_attempt_start_time(::google::protobuf::uint32 value) {
  set_has_attempt_start_time();
  attempt_start_time_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.attempt_start_time)
}

// optional uint32 attempt_num = 34;
inline bool CSODOTAParty::has_attempt_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSODOTAParty::set_has_attempt_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSODOTAParty::clear_has_attempt_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSODOTAParty::clear_attempt_num() {
  attempt_num_ = 0u;
  clear_has_attempt_num();
}
inline ::google::protobuf::uint32 CSODOTAParty::attempt_num() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.attempt_num)
  return attempt_num_;
}
inline void CSODOTAParty::set_attempt_num(::google::protobuf::uint32 value) {
  set_has_attempt_num();
  attempt_num_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.attempt_num)
}

// optional uint32 matchgroups = 11;
inline bool CSODOTAParty::has_matchgroups() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSODOTAParty::set_has_matchgroups() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSODOTAParty::clear_has_matchgroups() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSODOTAParty::clear_matchgroups() {
  matchgroups_ = 0u;
  clear_has_matchgroups();
}
inline ::google::protobuf::uint32 CSODOTAParty::matchgroups() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.matchgroups)
  return matchgroups_;
}
inline void CSODOTAParty::set_matchgroups(::google::protobuf::uint32 value) {
  set_has_matchgroups();
  matchgroups_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.matchgroups)
}

// optional uint32 low_priority_account_id = 19;
inline bool CSODOTAParty::has_low_priority_account_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSODOTAParty::set_has_low_priority_account_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSODOTAParty::clear_has_low_priority_account_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSODOTAParty::clear_low_priority_account_id() {
  low_priority_account_id_ = 0u;
  clear_has_low_priority_account_id();
}
inline ::google::protobuf::uint32 CSODOTAParty::low_priority_account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.low_priority_account_id)
  return low_priority_account_id_;
}
inline void CSODOTAParty::set_low_priority_account_id(::google::protobuf::uint32 value) {
  set_has_low_priority_account_id();
  low_priority_account_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.low_priority_account_id)
}

// optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
inline bool CSODOTAParty::has_match_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSODOTAParty::set_has_match_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CSODOTAParty::clear_has_match_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CSODOTAParty::clear_match_type() {
  match_type_ = 0;
  clear_has_match_type();
}
inline ::MatchType CSODOTAParty::match_type() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.match_type)
  return static_cast< ::MatchType >(match_type_);
}
inline void CSODOTAParty::set_match_type(::MatchType value) {
  assert(::MatchType_IsValid(value));
  set_has_match_type();
  match_type_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.match_type)
}

// optional .DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
inline bool CSODOTAParty::has_bot_difficulty() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSODOTAParty::set_has_bot_difficulty() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CSODOTAParty::clear_has_bot_difficulty() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CSODOTAParty::clear_bot_difficulty() {
  bot_difficulty_ = 0;
  clear_has_bot_difficulty();
}
inline ::DOTABotDifficulty CSODOTAParty::bot_difficulty() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.bot_difficulty)
  return static_cast< ::DOTABotDifficulty >(bot_difficulty_);
}
inline void CSODOTAParty::set_bot_difficulty(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty();
  bot_difficulty_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.bot_difficulty)
}

// optional uint32 team_id = 23;
inline bool CSODOTAParty::has_team_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CSODOTAParty::set_has_team_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CSODOTAParty::clear_has_team_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CSODOTAParty::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CSODOTAParty::team_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.team_id)
  return team_id_;
}
inline void CSODOTAParty::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.team_id)
}

// optional uint32 match_disabled_until_date = 24;
inline bool CSODOTAParty::has_match_disabled_until_date() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CSODOTAParty::set_has_match_disabled_until_date() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CSODOTAParty::clear_has_match_disabled_until_date() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CSODOTAParty::clear_match_disabled_until_date() {
  match_disabled_until_date_ = 0u;
  clear_has_match_disabled_until_date();
}
inline ::google::protobuf::uint32 CSODOTAParty::match_disabled_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.match_disabled_until_date)
  return match_disabled_until_date_;
}
inline void CSODOTAParty::set_match_disabled_until_date(::google::protobuf::uint32 value) {
  set_has_match_disabled_until_date();
  match_disabled_until_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.match_disabled_until_date)
}

// optional uint32 match_disabled_account_id = 25;
inline bool CSODOTAParty::has_match_disabled_account_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CSODOTAParty::set_has_match_disabled_account_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CSODOTAParty::clear_has_match_disabled_account_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CSODOTAParty::clear_match_disabled_account_id() {
  match_disabled_account_id_ = 0u;
  clear_has_match_disabled_account_id();
}
inline ::google::protobuf::uint32 CSODOTAParty::match_disabled_account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.match_disabled_account_id)
  return match_disabled_account_id_;
}
inline void CSODOTAParty::set_match_disabled_account_id(::google::protobuf::uint32 value) {
  set_has_match_disabled_account_id();
  match_disabled_account_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.match_disabled_account_id)
}

// optional uint32 matchmaking_max_range_minutes = 26;
inline bool CSODOTAParty::has_matchmaking_max_range_minutes() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CSODOTAParty::set_has_matchmaking_max_range_minutes() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CSODOTAParty::clear_has_matchmaking_max_range_minutes() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CSODOTAParty::clear_matchmaking_max_range_minutes() {
  matchmaking_max_range_minutes_ = 0u;
  clear_has_matchmaking_max_range_minutes();
}
inline ::google::protobuf::uint32 CSODOTAParty::matchmaking_max_range_minutes() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.matchmaking_max_range_minutes)
  return matchmaking_max_range_minutes_;
}
inline void CSODOTAParty::set_matchmaking_max_range_minutes(::google::protobuf::uint32 value) {
  set_has_matchmaking_max_range_minutes();
  matchmaking_max_range_minutes_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.matchmaking_max_range_minutes)
}

// optional uint32 matchlanguages = 27;
inline bool CSODOTAParty::has_matchlanguages() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CSODOTAParty::set_has_matchlanguages() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CSODOTAParty::clear_has_matchlanguages() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CSODOTAParty::clear_matchlanguages() {
  matchlanguages_ = 0u;
  clear_has_matchlanguages();
}
inline ::google::protobuf::uint32 CSODOTAParty::matchlanguages() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.matchlanguages)
  return matchlanguages_;
}
inline void CSODOTAParty::set_matchlanguages(::google::protobuf::uint32 value) {
  set_has_matchlanguages();
  matchlanguages_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.matchlanguages)
}

// optional uint32 map_preference = 38;
inline bool CSODOTAParty::has_map_preference() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CSODOTAParty::set_has_map_preference() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CSODOTAParty::clear_has_map_preference() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CSODOTAParty::clear_map_preference() {
  map_preference_ = 0u;
  clear_has_map_preference();
}
inline ::google::protobuf::uint32 CSODOTAParty::map_preference() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.map_preference)
  return map_preference_;
}
inline void CSODOTAParty::set_map_preference(::google::protobuf::uint32 value) {
  set_has_map_preference();
  map_preference_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.map_preference)
}

// repeated .CSODOTAPartyMember members = 29;
inline int CSODOTAParty::members_size() const {
  return members_.size();
}
inline void CSODOTAParty::clear_members() {
  members_.Clear();
}
inline const ::CSODOTAPartyMember& CSODOTAParty::members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.members)
  return members_.Get(index);
}
inline ::CSODOTAPartyMember* CSODOTAParty::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTAParty.members)
  return members_.Mutable(index);
}
inline ::CSODOTAPartyMember* CSODOTAParty::add_members() {
  // @@protoc_insertion_point(field_add:CSODOTAParty.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyMember >&
CSODOTAParty::members() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyMember >*
CSODOTAParty::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.members)
  return &members_;
}

// optional uint32 open_guild_id = 30;
inline bool CSODOTAParty::has_open_guild_id() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CSODOTAParty::set_has_open_guild_id() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CSODOTAParty::clear_has_open_guild_id() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CSODOTAParty::clear_open_guild_id() {
  open_guild_id_ = 0u;
  clear_has_open_guild_id();
}
inline ::google::protobuf::uint32 CSODOTAParty::open_guild_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.open_guild_id)
  return open_guild_id_;
}
inline void CSODOTAParty::set_open_guild_id(::google::protobuf::uint32 value) {
  set_has_open_guild_id();
  open_guild_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.open_guild_id)
}

// repeated uint32 common_guilds = 31;
inline int CSODOTAParty::common_guilds_size() const {
  return common_guilds_.size();
}
inline void CSODOTAParty::clear_common_guilds() {
  common_guilds_.Clear();
}
inline ::google::protobuf::uint32 CSODOTAParty::common_guilds(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.common_guilds)
  return common_guilds_.Get(index);
}
inline void CSODOTAParty::set_common_guilds(int index, ::google::protobuf::uint32 value) {
  common_guilds_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.common_guilds)
}
inline void CSODOTAParty::add_common_guilds(::google::protobuf::uint32 value) {
  common_guilds_.Add(value);
  // @@protoc_insertion_point(field_add:CSODOTAParty.common_guilds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CSODOTAParty::common_guilds() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.common_guilds)
  return common_guilds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CSODOTAParty::mutable_common_guilds() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.common_guilds)
  return &common_guilds_;
}

// optional uint32 low_priority_games_remaining = 35;
inline bool CSODOTAParty::has_low_priority_games_remaining() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CSODOTAParty::set_has_low_priority_games_remaining() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CSODOTAParty::clear_has_low_priority_games_remaining() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CSODOTAParty::clear_low_priority_games_remaining() {
  low_priority_games_remaining_ = 0u;
  clear_has_low_priority_games_remaining();
}
inline ::google::protobuf::uint32 CSODOTAParty::low_priority_games_remaining() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.low_priority_games_remaining)
  return low_priority_games_remaining_;
}
inline void CSODOTAParty::set_low_priority_games_remaining(::google::protobuf::uint32 value) {
  set_has_low_priority_games_remaining();
  low_priority_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.low_priority_games_remaining)
}

// optional uint32 min_level = 36;
inline bool CSODOTAParty::has_min_level() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CSODOTAParty::set_has_min_level() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CSODOTAParty::clear_has_min_level() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CSODOTAParty::clear_min_level() {
  min_level_ = 0u;
  clear_has_min_level();
}
inline ::google::protobuf::uint32 CSODOTAParty::min_level() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.min_level)
  return min_level_;
}
inline void CSODOTAParty::set_min_level(::google::protobuf::uint32 value) {
  set_has_min_level();
  min_level_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.min_level)
}

// optional uint32 max_level = 37;
inline bool CSODOTAParty::has_max_level() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CSODOTAParty::set_has_max_level() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CSODOTAParty::clear_has_max_level() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CSODOTAParty::clear_max_level() {
  max_level_ = 0u;
  clear_has_max_level();
}
inline ::google::protobuf::uint32 CSODOTAParty::max_level() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.max_level)
  return max_level_;
}
inline void CSODOTAParty::set_max_level(::google::protobuf::uint32 value) {
  set_has_max_level();
  max_level_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.max_level)
}

// repeated .EEvent active_ingame_events = 39;
inline int CSODOTAParty::active_ingame_events_size() const {
  return active_ingame_events_.size();
}
inline void CSODOTAParty::clear_active_ingame_events() {
  active_ingame_events_.Clear();
}
inline ::EEvent CSODOTAParty::active_ingame_events(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.active_ingame_events)
  return static_cast< ::EEvent >(active_ingame_events_.Get(index));
}
inline void CSODOTAParty::set_active_ingame_events(int index, ::EEvent value) {
  assert(::EEvent_IsValid(value));
  active_ingame_events_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.active_ingame_events)
}
inline void CSODOTAParty::add_active_ingame_events(::EEvent value) {
  assert(::EEvent_IsValid(value));
  active_ingame_events_.Add(value);
  // @@protoc_insertion_point(field_add:CSODOTAParty.active_ingame_events)
}
inline const ::google::protobuf::RepeatedField<int>&
CSODOTAParty::active_ingame_events() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.active_ingame_events)
  return active_ingame_events_;
}
inline ::google::protobuf::RepeatedField<int>*
CSODOTAParty::mutable_active_ingame_events() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.active_ingame_events)
  return &active_ingame_events_;
}

// optional bool open_for_join_requests = 40;
inline bool CSODOTAParty::has_open_for_join_requests() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CSODOTAParty::set_has_open_for_join_requests() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CSODOTAParty::clear_has_open_for_join_requests() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CSODOTAParty::clear_open_for_join_requests() {
  open_for_join_requests_ = false;
  clear_has_open_for_join_requests();
}
inline bool CSODOTAParty::open_for_join_requests() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.open_for_join_requests)
  return open_for_join_requests_;
}
inline void CSODOTAParty::set_open_for_join_requests(bool value) {
  set_has_open_for_join_requests();
  open_for_join_requests_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.open_for_join_requests)
}

// repeated .CSODOTAPartyInvite sent_invites = 41;
inline int CSODOTAParty::sent_invites_size() const {
  return sent_invites_.size();
}
inline void CSODOTAParty::clear_sent_invites() {
  sent_invites_.Clear();
}
inline const ::CSODOTAPartyInvite& CSODOTAParty::sent_invites(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.sent_invites)
  return sent_invites_.Get(index);
}
inline ::CSODOTAPartyInvite* CSODOTAParty::mutable_sent_invites(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTAParty.sent_invites)
  return sent_invites_.Mutable(index);
}
inline ::CSODOTAPartyInvite* CSODOTAParty::add_sent_invites() {
  // @@protoc_insertion_point(field_add:CSODOTAParty.sent_invites)
  return sent_invites_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite >&
CSODOTAParty::sent_invites() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.sent_invites)
  return sent_invites_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite >*
CSODOTAParty::mutable_sent_invites() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.sent_invites)
  return &sent_invites_;
}

// repeated .CSODOTAPartyInvite recv_invites = 42;
inline int CSODOTAParty::recv_invites_size() const {
  return recv_invites_.size();
}
inline void CSODOTAParty::clear_recv_invites() {
  recv_invites_.Clear();
}
inline const ::CSODOTAPartyInvite& CSODOTAParty::recv_invites(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.recv_invites)
  return recv_invites_.Get(index);
}
inline ::CSODOTAPartyInvite* CSODOTAParty::mutable_recv_invites(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTAParty.recv_invites)
  return recv_invites_.Mutable(index);
}
inline ::CSODOTAPartyInvite* CSODOTAParty::add_recv_invites() {
  // @@protoc_insertion_point(field_add:CSODOTAParty.recv_invites)
  return recv_invites_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite >&
CSODOTAParty::recv_invites() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.recv_invites)
  return recv_invites_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite >*
CSODOTAParty::mutable_recv_invites() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.recv_invites)
  return &recv_invites_;
}

// optional uint32 account_flags = 43;
inline bool CSODOTAParty::has_account_flags() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CSODOTAParty::set_has_account_flags() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CSODOTAParty::clear_has_account_flags() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CSODOTAParty::clear_account_flags() {
  account_flags_ = 0u;
  clear_has_account_flags();
}
inline ::google::protobuf::uint32 CSODOTAParty::account_flags() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.account_flags)
  return account_flags_;
}
inline void CSODOTAParty::set_account_flags(::google::protobuf::uint32 value) {
  set_has_account_flags();
  account_flags_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.account_flags)
}

// -------------------------------------------------------------------

// CSODOTAPartyInvite_PartyMember

// optional string name = 1;
inline bool CSODOTAPartyInvite_PartyMember::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAPartyInvite_PartyMember::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAPartyInvite_PartyMember::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAPartyInvite_PartyMember::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CSODOTAPartyInvite_PartyMember::name() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.PartyMember.name)
  return *name_;
}
inline void CSODOTAPartyInvite_PartyMember::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.PartyMember.name)
}
inline void CSODOTAPartyInvite_PartyMember::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSODOTAPartyInvite.PartyMember.name)
}
inline void CSODOTAPartyInvite_PartyMember::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSODOTAPartyInvite.PartyMember.name)
}
inline ::std::string* CSODOTAPartyInvite_PartyMember::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSODOTAPartyInvite.PartyMember.name)
  return name_;
}
inline ::std::string* CSODOTAPartyInvite_PartyMember::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSODOTAPartyInvite_PartyMember::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSODOTAPartyInvite.PartyMember.name)
}

// optional fixed64 steam_id = 2;
inline bool CSODOTAPartyInvite_PartyMember::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAPartyInvite_PartyMember::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAPartyInvite_PartyMember::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAPartyInvite_PartyMember::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CSODOTAPartyInvite_PartyMember::steam_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.PartyMember.steam_id)
  return steam_id_;
}
inline void CSODOTAPartyInvite_PartyMember::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.PartyMember.steam_id)
}

// optional bool is_coach = 4;
inline bool CSODOTAPartyInvite_PartyMember::has_is_coach() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTAPartyInvite_PartyMember::set_has_is_coach() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSODOTAPartyInvite_PartyMember::clear_has_is_coach() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSODOTAPartyInvite_PartyMember::clear_is_coach() {
  is_coach_ = false;
  clear_has_is_coach();
}
inline bool CSODOTAPartyInvite_PartyMember::is_coach() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.PartyMember.is_coach)
  return is_coach_;
}
inline void CSODOTAPartyInvite_PartyMember::set_is_coach(bool value) {
  set_has_is_coach();
  is_coach_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.PartyMember.is_coach)
}

// -------------------------------------------------------------------

// CSODOTAPartyInvite

// optional uint64 group_id = 1;
inline bool CSODOTAPartyInvite::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAPartyInvite::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAPartyInvite::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAPartyInvite::clear_group_id() {
  group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_group_id();
}
inline ::google::protobuf::uint64 CSODOTAPartyInvite::group_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.group_id)
  return group_id_;
}
inline void CSODOTAPartyInvite::set_group_id(::google::protobuf::uint64 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.group_id)
}

// optional fixed64 sender_id = 2;
inline bool CSODOTAPartyInvite::has_sender_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAPartyInvite::set_has_sender_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAPartyInvite::clear_has_sender_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAPartyInvite::clear_sender_id() {
  sender_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sender_id();
}
inline ::google::protobuf::uint64 CSODOTAPartyInvite::sender_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.sender_id)
  return sender_id_;
}
inline void CSODOTAPartyInvite::set_sender_id(::google::protobuf::uint64 value) {
  set_has_sender_id();
  sender_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.sender_id)
}

// optional string sender_name = 3;
inline bool CSODOTAPartyInvite::has_sender_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTAPartyInvite::set_has_sender_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSODOTAPartyInvite::clear_has_sender_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSODOTAPartyInvite::clear_sender_name() {
  if (sender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_name_->clear();
  }
  clear_has_sender_name();
}
inline const ::std::string& CSODOTAPartyInvite::sender_name() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.sender_name)
  return *sender_name_;
}
inline void CSODOTAPartyInvite::set_sender_name(const ::std::string& value) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.sender_name)
}
inline void CSODOTAPartyInvite::set_sender_name(const char* value) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSODOTAPartyInvite.sender_name)
}
inline void CSODOTAPartyInvite::set_sender_name(const char* value, size_t size) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSODOTAPartyInvite.sender_name)
}
inline ::std::string* CSODOTAPartyInvite::mutable_sender_name() {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSODOTAPartyInvite.sender_name)
  return sender_name_;
}
inline ::std::string* CSODOTAPartyInvite::release_sender_name() {
  clear_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sender_name_;
    sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSODOTAPartyInvite::set_allocated_sender_name(::std::string* sender_name) {
  if (sender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_name_;
  }
  if (sender_name) {
    set_has_sender_name();
    sender_name_ = sender_name;
  } else {
    clear_has_sender_name();
    sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSODOTAPartyInvite.sender_name)
}

// repeated .CSODOTAPartyInvite.PartyMember members = 4;
inline int CSODOTAPartyInvite::members_size() const {
  return members_.size();
}
inline void CSODOTAPartyInvite::clear_members() {
  members_.Clear();
}
inline const ::CSODOTAPartyInvite_PartyMember& CSODOTAPartyInvite::members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.members)
  return members_.Get(index);
}
inline ::CSODOTAPartyInvite_PartyMember* CSODOTAPartyInvite::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTAPartyInvite.members)
  return members_.Mutable(index);
}
inline ::CSODOTAPartyInvite_PartyMember* CSODOTAPartyInvite::add_members() {
  // @@protoc_insertion_point(field_add:CSODOTAPartyInvite.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember >&
CSODOTAPartyInvite::members() const {
  // @@protoc_insertion_point(field_list:CSODOTAPartyInvite.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember >*
CSODOTAPartyInvite::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAPartyInvite.members)
  return &members_;
}

// optional uint32 team_id = 5;
inline bool CSODOTAPartyInvite::has_team_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTAPartyInvite::set_has_team_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSODOTAPartyInvite::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSODOTAPartyInvite::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CSODOTAPartyInvite::team_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.team_id)
  return team_id_;
}
inline void CSODOTAPartyInvite::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.team_id)
}

// optional bool low_priority_status = 6;
inline bool CSODOTAPartyInvite::has_low_priority_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTAPartyInvite::set_has_low_priority_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSODOTAPartyInvite::clear_has_low_priority_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSODOTAPartyInvite::clear_low_priority_status() {
  low_priority_status_ = false;
  clear_has_low_priority_status();
}
inline bool CSODOTAPartyInvite::low_priority_status() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.low_priority_status)
  return low_priority_status_;
}
inline void CSODOTAPartyInvite::set_low_priority_status(bool value) {
  set_has_low_priority_status();
  low_priority_status_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.low_priority_status)
}

// optional bool as_coach = 7;
inline bool CSODOTAPartyInvite::has_as_coach() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSODOTAPartyInvite::set_has_as_coach() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSODOTAPartyInvite::clear_has_as_coach() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSODOTAPartyInvite::clear_as_coach() {
  as_coach_ = false;
  clear_has_as_coach();
}
inline bool CSODOTAPartyInvite::as_coach() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.as_coach)
  return as_coach_;
}
inline void CSODOTAPartyInvite::set_as_coach(bool value) {
  set_has_as_coach();
  as_coach_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.as_coach)
}

// optional fixed64 invite_gid = 8;
inline bool CSODOTAPartyInvite::has_invite_gid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSODOTAPartyInvite::set_has_invite_gid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSODOTAPartyInvite::clear_has_invite_gid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSODOTAPartyInvite::clear_invite_gid() {
  invite_gid_ = GOOGLE_ULONGLONG(0);
  clear_has_invite_gid();
}
inline ::google::protobuf::uint64 CSODOTAPartyInvite::invite_gid() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.invite_gid)
  return invite_gid_;
}
inline void CSODOTAPartyInvite::set_invite_gid(::google::protobuf::uint64 value) {
  set_has_invite_gid();
  invite_gid_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.invite_gid)
}

// optional uint32 engine = 9;
inline bool CSODOTAPartyInvite::has_engine() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSODOTAPartyInvite::set_has_engine() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSODOTAPartyInvite::clear_has_engine() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSODOTAPartyInvite::clear_engine() {
  engine_ = 0u;
  clear_has_engine();
}
inline ::google::protobuf::uint32 CSODOTAPartyInvite::engine() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.engine)
  return engine_;
}
inline void CSODOTAPartyInvite::set_engine(::google::protobuf::uint32 value) {
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.engine)
}

// -------------------------------------------------------------------

// CSODOTALobbyInvite_LobbyMember

// optional string name = 1;
inline bool CSODOTALobbyInvite_LobbyMember::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTALobbyInvite_LobbyMember::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTALobbyInvite_LobbyMember::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTALobbyInvite_LobbyMember::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CSODOTALobbyInvite_LobbyMember::name() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.LobbyMember.name)
  return *name_;
}
inline void CSODOTALobbyInvite_LobbyMember::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.LobbyMember.name)
}
inline void CSODOTALobbyInvite_LobbyMember::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSODOTALobbyInvite.LobbyMember.name)
}
inline void CSODOTALobbyInvite_LobbyMember::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobbyInvite.LobbyMember.name)
}
inline ::std::string* CSODOTALobbyInvite_LobbyMember::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSODOTALobbyInvite.LobbyMember.name)
  return name_;
}
inline ::std::string* CSODOTALobbyInvite_LobbyMember::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSODOTALobbyInvite_LobbyMember::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobbyInvite.LobbyMember.name)
}

// optional fixed64 steam_id = 2;
inline bool CSODOTALobbyInvite_LobbyMember::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTALobbyInvite_LobbyMember::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTALobbyInvite_LobbyMember::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTALobbyInvite_LobbyMember::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CSODOTALobbyInvite_LobbyMember::steam_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.LobbyMember.steam_id)
  return steam_id_;
}
inline void CSODOTALobbyInvite_LobbyMember::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.LobbyMember.steam_id)
}

// -------------------------------------------------------------------

// CSODOTALobbyInvite

// optional uint64 group_id = 1;
inline bool CSODOTALobbyInvite::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTALobbyInvite::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTALobbyInvite::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTALobbyInvite::clear_group_id() {
  group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_group_id();
}
inline ::google::protobuf::uint64 CSODOTALobbyInvite::group_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.group_id)
  return group_id_;
}
inline void CSODOTALobbyInvite::set_group_id(::google::protobuf::uint64 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.group_id)
}

// optional fixed64 sender_id = 2;
inline bool CSODOTALobbyInvite::has_sender_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTALobbyInvite::set_has_sender_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTALobbyInvite::clear_has_sender_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTALobbyInvite::clear_sender_id() {
  sender_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sender_id();
}
inline ::google::protobuf::uint64 CSODOTALobbyInvite::sender_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.sender_id)
  return sender_id_;
}
inline void CSODOTALobbyInvite::set_sender_id(::google::protobuf::uint64 value) {
  set_has_sender_id();
  sender_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.sender_id)
}

// optional string sender_name = 3;
inline bool CSODOTALobbyInvite::has_sender_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTALobbyInvite::set_has_sender_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSODOTALobbyInvite::clear_has_sender_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSODOTALobbyInvite::clear_sender_name() {
  if (sender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_name_->clear();
  }
  clear_has_sender_name();
}
inline const ::std::string& CSODOTALobbyInvite::sender_name() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.sender_name)
  return *sender_name_;
}
inline void CSODOTALobbyInvite::set_sender_name(const ::std::string& value) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.sender_name)
}
inline void CSODOTALobbyInvite::set_sender_name(const char* value) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSODOTALobbyInvite.sender_name)
}
inline void CSODOTALobbyInvite::set_sender_name(const char* value, size_t size) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobbyInvite.sender_name)
}
inline ::std::string* CSODOTALobbyInvite::mutable_sender_name() {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSODOTALobbyInvite.sender_name)
  return sender_name_;
}
inline ::std::string* CSODOTALobbyInvite::release_sender_name() {
  clear_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sender_name_;
    sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSODOTALobbyInvite::set_allocated_sender_name(::std::string* sender_name) {
  if (sender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_name_;
  }
  if (sender_name) {
    set_has_sender_name();
    sender_name_ = sender_name;
  } else {
    clear_has_sender_name();
    sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobbyInvite.sender_name)
}

// repeated .CSODOTALobbyInvite.LobbyMember members = 4;
inline int CSODOTALobbyInvite::members_size() const {
  return members_.size();
}
inline void CSODOTALobbyInvite::clear_members() {
  members_.Clear();
}
inline const ::CSODOTALobbyInvite_LobbyMember& CSODOTALobbyInvite::members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.members)
  return members_.Get(index);
}
inline ::CSODOTALobbyInvite_LobbyMember* CSODOTALobbyInvite::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobbyInvite.members)
  return members_.Mutable(index);
}
inline ::CSODOTALobbyInvite_LobbyMember* CSODOTALobbyInvite::add_members() {
  // @@protoc_insertion_point(field_add:CSODOTALobbyInvite.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSODOTALobbyInvite_LobbyMember >&
CSODOTALobbyInvite::members() const {
  // @@protoc_insertion_point(field_list:CSODOTALobbyInvite.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSODOTALobbyInvite_LobbyMember >*
CSODOTALobbyInvite::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobbyInvite.members)
  return &members_;
}

// optional uint64 custom_game_id = 5;
inline bool CSODOTALobbyInvite::has_custom_game_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTALobbyInvite::set_has_custom_game_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSODOTALobbyInvite::clear_has_custom_game_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSODOTALobbyInvite::clear_custom_game_id() {
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_id();
}
inline ::google::protobuf::uint64 CSODOTALobbyInvite::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.custom_game_id)
  return custom_game_id_;
}
inline void CSODOTALobbyInvite::set_custom_game_id(::google::protobuf::uint64 value) {
  set_has_custom_game_id();
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.custom_game_id)
}

// optional fixed64 invite_gid = 6;
inline bool CSODOTALobbyInvite::has_invite_gid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTALobbyInvite::set_has_invite_gid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSODOTALobbyInvite::clear_has_invite_gid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSODOTALobbyInvite::clear_invite_gid() {
  invite_gid_ = GOOGLE_ULONGLONG(0);
  clear_has_invite_gid();
}
inline ::google::protobuf::uint64 CSODOTALobbyInvite::invite_gid() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.invite_gid)
  return invite_gid_;
}
inline void CSODOTALobbyInvite::set_invite_gid(::google::protobuf::uint64 value) {
  set_has_invite_gid();
  invite_gid_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.invite_gid)
}

// optional fixed64 custom_game_crc = 7;
inline bool CSODOTALobbyInvite::has_custom_game_crc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSODOTALobbyInvite::set_has_custom_game_crc() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSODOTALobbyInvite::clear_has_custom_game_crc() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSODOTALobbyInvite::clear_custom_game_crc() {
  custom_game_crc_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_crc();
}
inline ::google::protobuf::uint64 CSODOTALobbyInvite::custom_game_crc() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.custom_game_crc)
  return custom_game_crc_;
}
inline void CSODOTALobbyInvite::set_custom_game_crc(::google::protobuf::uint64 value) {
  set_has_custom_game_crc();
  custom_game_crc_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.custom_game_crc)
}

// optional fixed32 custom_game_timestamp = 8;
inline bool CSODOTALobbyInvite::has_custom_game_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSODOTALobbyInvite::set_has_custom_game_timestamp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSODOTALobbyInvite::clear_has_custom_game_timestamp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSODOTALobbyInvite::clear_custom_game_timestamp() {
  custom_game_timestamp_ = 0u;
  clear_has_custom_game_timestamp();
}
inline ::google::protobuf::uint32 CSODOTALobbyInvite::custom_game_timestamp() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.custom_game_timestamp)
  return custom_game_timestamp_;
}
inline void CSODOTALobbyInvite::set_custom_game_timestamp(::google::protobuf::uint32 value) {
  set_has_custom_game_timestamp();
  custom_game_timestamp_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.custom_game_timestamp)
}

// -------------------------------------------------------------------

// CDOTAClientHardwareSpecs

// optional uint32 logical_processors = 1;
inline bool CDOTAClientHardwareSpecs::has_logical_processors() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAClientHardwareSpecs::set_has_logical_processors() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAClientHardwareSpecs::clear_has_logical_processors() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAClientHardwareSpecs::clear_logical_processors() {
  logical_processors_ = 0u;
  clear_has_logical_processors();
}
inline ::google::protobuf::uint32 CDOTAClientHardwareSpecs::logical_processors() const {
  // @@protoc_insertion_point(field_get:CDOTAClientHardwareSpecs.logical_processors)
  return logical_processors_;
}
inline void CDOTAClientHardwareSpecs::set_logical_processors(::google::protobuf::uint32 value) {
  set_has_logical_processors();
  logical_processors_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientHardwareSpecs.logical_processors)
}

// optional fixed64 cpu_cycles_per_second = 2;
inline bool CDOTAClientHardwareSpecs::has_cpu_cycles_per_second() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAClientHardwareSpecs::set_has_cpu_cycles_per_second() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAClientHardwareSpecs::clear_has_cpu_cycles_per_second() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAClientHardwareSpecs::clear_cpu_cycles_per_second() {
  cpu_cycles_per_second_ = GOOGLE_ULONGLONG(0);
  clear_has_cpu_cycles_per_second();
}
inline ::google::protobuf::uint64 CDOTAClientHardwareSpecs::cpu_cycles_per_second() const {
  // @@protoc_insertion_point(field_get:CDOTAClientHardwareSpecs.cpu_cycles_per_second)
  return cpu_cycles_per_second_;
}
inline void CDOTAClientHardwareSpecs::set_cpu_cycles_per_second(::google::protobuf::uint64 value) {
  set_has_cpu_cycles_per_second();
  cpu_cycles_per_second_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientHardwareSpecs.cpu_cycles_per_second)
}

// optional fixed64 total_physical_memory = 3;
inline bool CDOTAClientHardwareSpecs::has_total_physical_memory() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAClientHardwareSpecs::set_has_total_physical_memory() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAClientHardwareSpecs::clear_has_total_physical_memory() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAClientHardwareSpecs::clear_total_physical_memory() {
  total_physical_memory_ = GOOGLE_ULONGLONG(0);
  clear_has_total_physical_memory();
}
inline ::google::protobuf::uint64 CDOTAClientHardwareSpecs::total_physical_memory() const {
  // @@protoc_insertion_point(field_get:CDOTAClientHardwareSpecs.total_physical_memory)
  return total_physical_memory_;
}
inline void CDOTAClientHardwareSpecs::set_total_physical_memory(::google::protobuf::uint64 value) {
  set_has_total_physical_memory();
  total_physical_memory_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientHardwareSpecs.total_physical_memory)
}

// optional bool is_64_bit_os = 4;
inline bool CDOTAClientHardwareSpecs::has_is_64_bit_os() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAClientHardwareSpecs::set_has_is_64_bit_os() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAClientHardwareSpecs::clear_has_is_64_bit_os() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAClientHardwareSpecs::clear_is_64_bit_os() {
  is_64_bit_os_ = false;
  clear_has_is_64_bit_os();
}
inline bool CDOTAClientHardwareSpecs::is_64_bit_os() const {
  // @@protoc_insertion_point(field_get:CDOTAClientHardwareSpecs.is_64_bit_os)
  return is_64_bit_os_;
}
inline void CDOTAClientHardwareSpecs::set_is_64_bit_os(bool value) {
  set_has_is_64_bit_os();
  is_64_bit_os_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientHardwareSpecs.is_64_bit_os)
}

// optional uint64 upload_measurement = 5;
inline bool CDOTAClientHardwareSpecs::has_upload_measurement() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTAClientHardwareSpecs::set_has_upload_measurement() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTAClientHardwareSpecs::clear_has_upload_measurement() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTAClientHardwareSpecs::clear_upload_measurement() {
  upload_measurement_ = GOOGLE_ULONGLONG(0);
  clear_has_upload_measurement();
}
inline ::google::protobuf::uint64 CDOTAClientHardwareSpecs::upload_measurement() const {
  // @@protoc_insertion_point(field_get:CDOTAClientHardwareSpecs.upload_measurement)
  return upload_measurement_;
}
inline void CDOTAClientHardwareSpecs::set_upload_measurement(::google::protobuf::uint64 value) {
  set_has_upload_measurement();
  upload_measurement_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientHardwareSpecs.upload_measurement)
}

// optional bool prefer_not_host = 6;
inline bool CDOTAClientHardwareSpecs::has_prefer_not_host() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTAClientHardwareSpecs::set_has_prefer_not_host() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDOTAClientHardwareSpecs::clear_has_prefer_not_host() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDOTAClientHardwareSpecs::clear_prefer_not_host() {
  prefer_not_host_ = false;
  clear_has_prefer_not_host();
}
inline bool CDOTAClientHardwareSpecs::prefer_not_host() const {
  // @@protoc_insertion_point(field_get:CDOTAClientHardwareSpecs.prefer_not_host)
  return prefer_not_host_;
}
inline void CDOTAClientHardwareSpecs::set_prefer_not_host(bool value) {
  set_has_prefer_not_host();
  prefer_not_host_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientHardwareSpecs.prefer_not_host)
}

// -------------------------------------------------------------------

// CDOTASaveGame_Player

// optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CDOTASaveGame_Player::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTASaveGame_Player::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTASaveGame_Player::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTASaveGame_Player::clear_team() {
  team_ = 0;
  clear_has_team();
}
inline ::DOTA_GC_TEAM CDOTASaveGame_Player::team() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.Player.team)
  return static_cast< ::DOTA_GC_TEAM >(team_);
}
inline void CDOTASaveGame_Player::set_team(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.Player.team)
}

// optional string name = 2;
inline bool CDOTASaveGame_Player::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTASaveGame_Player::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTASaveGame_Player::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTASaveGame_Player::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CDOTASaveGame_Player::name() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.Player.name)
  return *name_;
}
inline void CDOTASaveGame_Player::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CDOTASaveGame.Player.name)
}
inline void CDOTASaveGame_Player::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CDOTASaveGame.Player.name)
}
inline void CDOTASaveGame_Player::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CDOTASaveGame.Player.name)
}
inline ::std::string* CDOTASaveGame_Player::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CDOTASaveGame.Player.name)
  return name_;
}
inline ::std::string* CDOTASaveGame_Player::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CDOTASaveGame_Player::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTASaveGame.Player.name)
}

// optional string hero = 3;
inline bool CDOTASaveGame_Player::has_hero() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTASaveGame_Player::set_has_hero() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTASaveGame_Player::clear_has_hero() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTASaveGame_Player::clear_hero() {
  if (hero_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hero_->clear();
  }
  clear_has_hero();
}
inline const ::std::string& CDOTASaveGame_Player::hero() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.Player.hero)
  return *hero_;
}
inline void CDOTASaveGame_Player::set_hero(const ::std::string& value) {
  set_has_hero();
  if (hero_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hero_ = new ::std::string;
  }
  hero_->assign(value);
  // @@protoc_insertion_point(field_set:CDOTASaveGame.Player.hero)
}
inline void CDOTASaveGame_Player::set_hero(const char* value) {
  set_has_hero();
  if (hero_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hero_ = new ::std::string;
  }
  hero_->assign(value);
  // @@protoc_insertion_point(field_set_char:CDOTASaveGame.Player.hero)
}
inline void CDOTASaveGame_Player::set_hero(const char* value, size_t size) {
  set_has_hero();
  if (hero_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hero_ = new ::std::string;
  }
  hero_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CDOTASaveGame.Player.hero)
}
inline ::std::string* CDOTASaveGame_Player::mutable_hero() {
  set_has_hero();
  if (hero_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hero_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CDOTASaveGame.Player.hero)
  return hero_;
}
inline ::std::string* CDOTASaveGame_Player::release_hero() {
  clear_has_hero();
  if (hero_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hero_;
    hero_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CDOTASaveGame_Player::set_allocated_hero(::std::string* hero) {
  if (hero_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hero_;
  }
  if (hero) {
    set_has_hero();
    hero_ = hero;
  } else {
    clear_has_hero();
    hero_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTASaveGame.Player.hero)
}

// -------------------------------------------------------------------

// CDOTASaveGame_SaveInstance_PlayerPositions

// optional float x = 1;
inline bool CDOTASaveGame_SaveInstance_PlayerPositions::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float CDOTASaveGame_SaveInstance_PlayerPositions::x() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.SaveInstance.PlayerPositions.x)
  return x_;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.SaveInstance.PlayerPositions.x)
}

// optional float y = 2;
inline bool CDOTASaveGame_SaveInstance_PlayerPositions::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float CDOTASaveGame_SaveInstance_PlayerPositions::y() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.SaveInstance.PlayerPositions.y)
  return y_;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.SaveInstance.PlayerPositions.y)
}

// -------------------------------------------------------------------

// CDOTASaveGame_SaveInstance

// optional uint32 game_time = 2;
inline bool CDOTASaveGame_SaveInstance::has_game_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTASaveGame_SaveInstance::set_has_game_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTASaveGame_SaveInstance::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTASaveGame_SaveInstance::clear_game_time() {
  game_time_ = 0u;
  clear_has_game_time();
}
inline ::google::protobuf::uint32 CDOTASaveGame_SaveInstance::game_time() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.SaveInstance.game_time)
  return game_time_;
}
inline void CDOTASaveGame_SaveInstance::set_game_time(::google::protobuf::uint32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.SaveInstance.game_time)
}

// optional uint32 team1_score = 3;
inline bool CDOTASaveGame_SaveInstance::has_team1_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTASaveGame_SaveInstance::set_has_team1_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTASaveGame_SaveInstance::clear_has_team1_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTASaveGame_SaveInstance::clear_team1_score() {
  team1_score_ = 0u;
  clear_has_team1_score();
}
inline ::google::protobuf::uint32 CDOTASaveGame_SaveInstance::team1_score() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.SaveInstance.team1_score)
  return team1_score_;
}
inline void CDOTASaveGame_SaveInstance::set_team1_score(::google::protobuf::uint32 value) {
  set_has_team1_score();
  team1_score_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.SaveInstance.team1_score)
}

// optional uint32 team2_score = 4;
inline bool CDOTASaveGame_SaveInstance::has_team2_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTASaveGame_SaveInstance::set_has_team2_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTASaveGame_SaveInstance::clear_has_team2_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTASaveGame_SaveInstance::clear_team2_score() {
  team2_score_ = 0u;
  clear_has_team2_score();
}
inline ::google::protobuf::uint32 CDOTASaveGame_SaveInstance::team2_score() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.SaveInstance.team2_score)
  return team2_score_;
}
inline void CDOTASaveGame_SaveInstance::set_team2_score(::google::protobuf::uint32 value) {
  set_has_team2_score();
  team2_score_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.SaveInstance.team2_score)
}

// repeated .CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
inline int CDOTASaveGame_SaveInstance::player_positions_size() const {
  return player_positions_.size();
}
inline void CDOTASaveGame_SaveInstance::clear_player_positions() {
  player_positions_.Clear();
}
inline const ::CDOTASaveGame_SaveInstance_PlayerPositions& CDOTASaveGame_SaveInstance::player_positions(int index) const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.SaveInstance.player_positions)
  return player_positions_.Get(index);
}
inline ::CDOTASaveGame_SaveInstance_PlayerPositions* CDOTASaveGame_SaveInstance::mutable_player_positions(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTASaveGame.SaveInstance.player_positions)
  return player_positions_.Mutable(index);
}
inline ::CDOTASaveGame_SaveInstance_PlayerPositions* CDOTASaveGame_SaveInstance::add_player_positions() {
  // @@protoc_insertion_point(field_add:CDOTASaveGame.SaveInstance.player_positions)
  return player_positions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance_PlayerPositions >&
CDOTASaveGame_SaveInstance::player_positions() const {
  // @@protoc_insertion_point(field_list:CDOTASaveGame.SaveInstance.player_positions)
  return player_positions_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance_PlayerPositions >*
CDOTASaveGame_SaveInstance::mutable_player_positions() {
  // @@protoc_insertion_point(field_mutable_list:CDOTASaveGame.SaveInstance.player_positions)
  return &player_positions_;
}

// optional uint32 save_id = 6;
inline bool CDOTASaveGame_SaveInstance::has_save_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTASaveGame_SaveInstance::set_has_save_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTASaveGame_SaveInstance::clear_has_save_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTASaveGame_SaveInstance::clear_save_id() {
  save_id_ = 0u;
  clear_has_save_id();
}
inline ::google::protobuf::uint32 CDOTASaveGame_SaveInstance::save_id() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.SaveInstance.save_id)
  return save_id_;
}
inline void CDOTASaveGame_SaveInstance::set_save_id(::google::protobuf::uint32 value) {
  set_has_save_id();
  save_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.SaveInstance.save_id)
}

// optional uint32 save_time = 7;
inline bool CDOTASaveGame_SaveInstance::has_save_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTASaveGame_SaveInstance::set_has_save_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDOTASaveGame_SaveInstance::clear_has_save_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDOTASaveGame_SaveInstance::clear_save_time() {
  save_time_ = 0u;
  clear_has_save_time();
}
inline ::google::protobuf::uint32 CDOTASaveGame_SaveInstance::save_time() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.SaveInstance.save_time)
  return save_time_;
}
inline void CDOTASaveGame_SaveInstance::set_save_time(::google::protobuf::uint32 value) {
  set_has_save_time();
  save_time_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.SaveInstance.save_time)
}

// -------------------------------------------------------------------

// CDOTASaveGame

// optional uint64 match_id = 5;
inline bool CDOTASaveGame::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTASaveGame::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTASaveGame::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTASaveGame::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
inline ::google::protobuf::uint64 CDOTASaveGame::match_id() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.match_id)
  return match_id_;
}
inline void CDOTASaveGame::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.match_id)
}

// optional uint32 save_time = 2;
inline bool CDOTASaveGame::has_save_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTASaveGame::set_has_save_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTASaveGame::clear_has_save_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTASaveGame::clear_save_time() {
  save_time_ = 0u;
  clear_has_save_time();
}
inline ::google::protobuf::uint32 CDOTASaveGame::save_time() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.save_time)
  return save_time_;
}
inline void CDOTASaveGame::set_save_time(::google::protobuf::uint32 value) {
  set_has_save_time();
  save_time_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.save_time)
}

// repeated .CDOTASaveGame.Player players = 3;
inline int CDOTASaveGame::players_size() const {
  return players_.size();
}
inline void CDOTASaveGame::clear_players() {
  players_.Clear();
}
inline const ::CDOTASaveGame_Player& CDOTASaveGame::players(int index) const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.players)
  return players_.Get(index);
}
inline ::CDOTASaveGame_Player* CDOTASaveGame::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTASaveGame.players)
  return players_.Mutable(index);
}
inline ::CDOTASaveGame_Player* CDOTASaveGame::add_players() {
  // @@protoc_insertion_point(field_add:CDOTASaveGame.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_Player >&
CDOTASaveGame::players() const {
  // @@protoc_insertion_point(field_list:CDOTASaveGame.players)
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_Player >*
CDOTASaveGame::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CDOTASaveGame.players)
  return &players_;
}

// repeated .CDOTASaveGame.SaveInstance save_instances = 4;
inline int CDOTASaveGame::save_instances_size() const {
  return save_instances_.size();
}
inline void CDOTASaveGame::clear_save_instances() {
  save_instances_.Clear();
}
inline const ::CDOTASaveGame_SaveInstance& CDOTASaveGame::save_instances(int index) const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.save_instances)
  return save_instances_.Get(index);
}
inline ::CDOTASaveGame_SaveInstance* CDOTASaveGame::mutable_save_instances(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTASaveGame.save_instances)
  return save_instances_.Mutable(index);
}
inline ::CDOTASaveGame_SaveInstance* CDOTASaveGame::add_save_instances() {
  // @@protoc_insertion_point(field_add:CDOTASaveGame.save_instances)
  return save_instances_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance >&
CDOTASaveGame::save_instances() const {
  // @@protoc_insertion_point(field_list:CDOTASaveGame.save_instances)
  return save_instances_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance >*
CDOTASaveGame::mutable_save_instances() {
  // @@protoc_insertion_point(field_mutable_list:CDOTASaveGame.save_instances)
  return &save_instances_;
}

// -------------------------------------------------------------------

// CMsgLeaverState

// optional uint32 lobby_state = 1;
inline bool CMsgLeaverState::has_lobby_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgLeaverState::set_has_lobby_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgLeaverState::clear_has_lobby_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgLeaverState::clear_lobby_state() {
  lobby_state_ = 0u;
  clear_has_lobby_state();
}
inline ::google::protobuf::uint32 CMsgLeaverState::lobby_state() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.lobby_state)
  return lobby_state_;
}
inline void CMsgLeaverState::set_lobby_state(::google::protobuf::uint32 value) {
  set_has_lobby_state();
  lobby_state_ = value;
  // @@protoc_insertion_point(field_set:CMsgLeaverState.lobby_state)
}

// optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
inline bool CMsgLeaverState::has_game_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgLeaverState::set_has_game_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgLeaverState::clear_has_game_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgLeaverState::clear_game_state() {
  game_state_ = 0;
  clear_has_game_state();
}
inline ::DOTA_GameState CMsgLeaverState::game_state() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.game_state)
  return static_cast< ::DOTA_GameState >(game_state_);
}
inline void CMsgLeaverState::set_game_state(::DOTA_GameState value) {
  assert(::DOTA_GameState_IsValid(value));
  set_has_game_state();
  game_state_ = value;
  // @@protoc_insertion_point(field_set:CMsgLeaverState.game_state)
}

// optional bool leaver_detected = 3;
inline bool CMsgLeaverState::has_leaver_detected() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgLeaverState::set_has_leaver_detected() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgLeaverState::clear_has_leaver_detected() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgLeaverState::clear_leaver_detected() {
  leaver_detected_ = false;
  clear_has_leaver_detected();
}
inline bool CMsgLeaverState::leaver_detected() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.leaver_detected)
  return leaver_detected_;
}
inline void CMsgLeaverState::set_leaver_detected(bool value) {
  set_has_leaver_detected();
  leaver_detected_ = value;
  // @@protoc_insertion_point(field_set:CMsgLeaverState.leaver_detected)
}

// optional bool first_blood_happened = 4;
inline bool CMsgLeaverState::has_first_blood_happened() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgLeaverState::set_has_first_blood_happened() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgLeaverState::clear_has_first_blood_happened() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgLeaverState::clear_first_blood_happened() {
  first_blood_happened_ = false;
  clear_has_first_blood_happened();
}
inline bool CMsgLeaverState::first_blood_happened() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.first_blood_happened)
  return first_blood_happened_;
}
inline void CMsgLeaverState::set_first_blood_happened(bool value) {
  set_has_first_blood_happened();
  first_blood_happened_ = value;
  // @@protoc_insertion_point(field_set:CMsgLeaverState.first_blood_happened)
}

// optional bool discard_match_results = 5;
inline bool CMsgLeaverState::has_discard_match_results() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgLeaverState::set_has_discard_match_results() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgLeaverState::clear_has_discard_match_results() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgLeaverState::clear_discard_match_results() {
  discard_match_results_ = false;
  clear_has_discard_match_results();
}
inline bool CMsgLeaverState::discard_match_results() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.discard_match_results)
  return discard_match_results_;
}
inline void CMsgLeaverState::set_discard_match_results(bool value) {
  set_has_discard_match_results();
  discard_match_results_ = value;
  // @@protoc_insertion_point(field_set:CMsgLeaverState.discard_match_results)
}

// optional bool mass_disconnect = 6;
inline bool CMsgLeaverState::has_mass_disconnect() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgLeaverState::set_has_mass_disconnect() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgLeaverState::clear_has_mass_disconnect() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgLeaverState::clear_mass_disconnect() {
  mass_disconnect_ = false;
  clear_has_mass_disconnect();
}
inline bool CMsgLeaverState::mass_disconnect() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.mass_disconnect)
  return mass_disconnect_;
}
inline void CMsgLeaverState::set_mass_disconnect(bool value) {
  set_has_mass_disconnect();
  mass_disconnect_ = value;
  // @@protoc_insertion_point(field_set:CMsgLeaverState.mass_disconnect)
}

// -------------------------------------------------------------------

// CDOTALobbyMember_CDOTALobbyMemberXPBonus

// optional uint32 type = 1;
inline bool CDOTALobbyMember_CDOTALobbyMemberXPBonus::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CDOTALobbyMember_CDOTALobbyMemberXPBonus::type() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.CDOTALobbyMemberXPBonus.type)
  return type_;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.CDOTALobbyMemberXPBonus.type)
}

// optional float xp_bonus = 2;
inline bool CDOTALobbyMember_CDOTALobbyMemberXPBonus::has_xp_bonus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_has_xp_bonus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_has_xp_bonus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_xp_bonus() {
  xp_bonus_ = 0;
  clear_has_xp_bonus();
}
inline float CDOTALobbyMember_CDOTALobbyMemberXPBonus::xp_bonus() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.CDOTALobbyMemberXPBonus.xp_bonus)
  return xp_bonus_;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_xp_bonus(float value) {
  set_has_xp_bonus();
  xp_bonus_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.CDOTALobbyMemberXPBonus.xp_bonus)
}

// optional uint64 source_key = 3;
inline bool CDOTALobbyMember_CDOTALobbyMemberXPBonus::has_source_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_has_source_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_has_source_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_source_key() {
  source_key_ = GOOGLE_ULONGLONG(0);
  clear_has_source_key();
}
inline ::google::protobuf::uint64 CDOTALobbyMember_CDOTALobbyMemberXPBonus::source_key() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.CDOTALobbyMemberXPBonus.source_key)
  return source_key_;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_source_key(::google::protobuf::uint64 value) {
  set_has_source_key();
  source_key_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.CDOTALobbyMemberXPBonus.source_key)
}

// -------------------------------------------------------------------

// CDOTALobbyMember

// optional fixed64 id = 1;
inline bool CDOTALobbyMember::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTALobbyMember::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTALobbyMember::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTALobbyMember::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 CDOTALobbyMember::id() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.id)
  return id_;
}
inline void CDOTALobbyMember::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.id)
}

// optional uint32 hero_id = 2;
inline bool CDOTALobbyMember::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTALobbyMember::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTALobbyMember::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTALobbyMember::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::hero_id() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.hero_id)
  return hero_id_;
}
inline void CDOTALobbyMember::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.hero_id)
}

// optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CDOTALobbyMember::has_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTALobbyMember::set_has_team() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTALobbyMember::clear_has_team() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTALobbyMember::clear_team() {
  team_ = 0;
  clear_has_team();
}
inline ::DOTA_GC_TEAM CDOTALobbyMember::team() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.team)
  return static_cast< ::DOTA_GC_TEAM >(team_);
}
inline void CDOTALobbyMember::set_team(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.team)
}

// optional string name = 6;
inline bool CDOTALobbyMember::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTALobbyMember::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTALobbyMember::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTALobbyMember::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CDOTALobbyMember::name() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.name)
  return *name_;
}
inline void CDOTALobbyMember::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.name)
}
inline void CDOTALobbyMember::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CDOTALobbyMember.name)
}
inline void CDOTALobbyMember::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CDOTALobbyMember.name)
}
inline ::std::string* CDOTALobbyMember::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CDOTALobbyMember.name)
  return name_;
}
inline ::std::string* CDOTALobbyMember::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CDOTALobbyMember::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTALobbyMember.name)
}

// optional uint32 slot = 7;
inline bool CDOTALobbyMember::has_slot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTALobbyMember::set_has_slot() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTALobbyMember::clear_has_slot() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTALobbyMember::clear_slot() {
  slot_ = 0u;
  clear_has_slot();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::slot() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.slot)
  return slot_;
}
inline void CDOTALobbyMember::set_slot(::google::protobuf::uint32 value) {
  set_has_slot();
  slot_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.slot)
}

// optional uint64 party_id = 12;
inline bool CDOTALobbyMember::has_party_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTALobbyMember::set_has_party_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDOTALobbyMember::clear_has_party_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDOTALobbyMember::clear_party_id() {
  party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_party_id();
}
inline ::google::protobuf::uint64 CDOTALobbyMember::party_id() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.party_id)
  return party_id_;
}
inline void CDOTALobbyMember::set_party_id(::google::protobuf::uint64 value) {
  set_has_party_id();
  party_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.party_id)
}

// optional uint32 meta_level = 13;
inline bool CDOTALobbyMember::has_meta_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDOTALobbyMember::set_has_meta_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CDOTALobbyMember::clear_has_meta_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CDOTALobbyMember::clear_meta_level() {
  meta_level_ = 0u;
  clear_has_meta_level();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::meta_level() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.meta_level)
  return meta_level_;
}
inline void CDOTALobbyMember::set_meta_level(::google::protobuf::uint32 value) {
  set_has_meta_level();
  meta_level_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.meta_level)
}

// optional uint32 meta_xp = 14;
inline bool CDOTALobbyMember::has_meta_xp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDOTALobbyMember::set_has_meta_xp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CDOTALobbyMember::clear_has_meta_xp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CDOTALobbyMember::clear_meta_xp() {
  meta_xp_ = 0u;
  clear_has_meta_xp();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::meta_xp() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.meta_xp)
  return meta_xp_;
}
inline void CDOTALobbyMember::set_meta_xp(::google::protobuf::uint32 value) {
  set_has_meta_xp();
  meta_xp_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.meta_xp)
}

// optional uint32 meta_xp_awarded = 15;
inline bool CDOTALobbyMember::has_meta_xp_awarded() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CDOTALobbyMember::set_has_meta_xp_awarded() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CDOTALobbyMember::clear_has_meta_xp_awarded() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CDOTALobbyMember::clear_meta_xp_awarded() {
  meta_xp_awarded_ = 0u;
  clear_has_meta_xp_awarded();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::meta_xp_awarded() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.meta_xp_awarded)
  return meta_xp_awarded_;
}
inline void CDOTALobbyMember::set_meta_xp_awarded(::google::protobuf::uint32 value) {
  set_has_meta_xp_awarded();
  meta_xp_awarded_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.meta_xp_awarded)
}

// optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
inline bool CDOTALobbyMember::has_leaver_status() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CDOTALobbyMember::set_has_leaver_status() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CDOTALobbyMember::clear_has_leaver_status() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CDOTALobbyMember::clear_leaver_status() {
  leaver_status_ = 0;
  clear_has_leaver_status();
}
inline ::DOTALeaverStatus_t CDOTALobbyMember::leaver_status() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.leaver_status)
  return static_cast< ::DOTALeaverStatus_t >(leaver_status_);
}
inline void CDOTALobbyMember::set_leaver_status(::DOTALeaverStatus_t value) {
  assert(::DOTALeaverStatus_t_IsValid(value));
  set_has_leaver_status();
  leaver_status_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.leaver_status)
}

// optional uint32 leaver_actions = 28;
inline bool CDOTALobbyMember::has_leaver_actions() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CDOTALobbyMember::set_has_leaver_actions() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CDOTALobbyMember::clear_has_leaver_actions() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CDOTALobbyMember::clear_leaver_actions() {
  leaver_actions_ = 0u;
  clear_has_leaver_actions();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::leaver_actions() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.leaver_actions)
  return leaver_actions_;
}
inline void CDOTALobbyMember::set_leaver_actions(::google::protobuf::uint32 value) {
  set_has_leaver_actions();
  leaver_actions_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.leaver_actions)
}

// optional uint32 channel = 17;
inline bool CDOTALobbyMember::has_channel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CDOTALobbyMember::set_has_channel() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CDOTALobbyMember::clear_has_channel() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CDOTALobbyMember::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::channel() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.channel)
  return channel_;
}
inline void CDOTALobbyMember::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.channel)
}

// optional uint32 prize_def_index = 18;
inline bool CDOTALobbyMember::has_prize_def_index() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CDOTALobbyMember::set_has_prize_def_index() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CDOTALobbyMember::clear_has_prize_def_index() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CDOTALobbyMember::clear_prize_def_index() {
  prize_def_index_ = 0u;
  clear_has_prize_def_index();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::prize_def_index() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.prize_def_index)
  return prize_def_index_;
}
inline void CDOTALobbyMember::set_prize_def_index(::google::protobuf::uint32 value) {
  set_has_prize_def_index();
  prize_def_index_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.prize_def_index)
}

// repeated uint32 disabled_hero_id = 20;
inline int CDOTALobbyMember::disabled_hero_id_size() const {
  return disabled_hero_id_.size();
}
inline void CDOTALobbyMember::clear_disabled_hero_id() {
  disabled_hero_id_.Clear();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::disabled_hero_id(int index) const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.disabled_hero_id)
  return disabled_hero_id_.Get(index);
}
inline void CDOTALobbyMember::set_disabled_hero_id(int index, ::google::protobuf::uint32 value) {
  disabled_hero_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.disabled_hero_id)
}
inline void CDOTALobbyMember::add_disabled_hero_id(::google::protobuf::uint32 value) {
  disabled_hero_id_.Add(value);
  // @@protoc_insertion_point(field_add:CDOTALobbyMember.disabled_hero_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTALobbyMember::disabled_hero_id() const {
  // @@protoc_insertion_point(field_list:CDOTALobbyMember.disabled_hero_id)
  return disabled_hero_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTALobbyMember::mutable_disabled_hero_id() {
  // @@protoc_insertion_point(field_mutable_list:CDOTALobbyMember.disabled_hero_id)
  return &disabled_hero_id_;
}

// optional .PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
inline bool CDOTALobbyMember::has_partner_account_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CDOTALobbyMember::set_has_partner_account_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CDOTALobbyMember::clear_has_partner_account_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CDOTALobbyMember::clear_partner_account_type() {
  partner_account_type_ = 0;
  clear_has_partner_account_type();
}
inline ::PartnerAccountType CDOTALobbyMember::partner_account_type() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.partner_account_type)
  return static_cast< ::PartnerAccountType >(partner_account_type_);
}
inline void CDOTALobbyMember::set_partner_account_type(::PartnerAccountType value) {
  assert(::PartnerAccountType_IsValid(value));
  set_has_partner_account_type();
  partner_account_type_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.partner_account_type)
}

// repeated uint32 enabled_hero_id = 22;
inline int CDOTALobbyMember::enabled_hero_id_size() const {
  return enabled_hero_id_.size();
}
inline void CDOTALobbyMember::clear_enabled_hero_id() {
  enabled_hero_id_.Clear();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::enabled_hero_id(int index) const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.enabled_hero_id)
  return enabled_hero_id_.Get(index);
}
inline void CDOTALobbyMember::set_enabled_hero_id(int index, ::google::protobuf::uint32 value) {
  enabled_hero_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.enabled_hero_id)
}
inline void CDOTALobbyMember::add_enabled_hero_id(::google::protobuf::uint32 value) {
  enabled_hero_id_.Add(value);
  // @@protoc_insertion_point(field_add:CDOTALobbyMember.enabled_hero_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTALobbyMember::enabled_hero_id() const {
  // @@protoc_insertion_point(field_list:CDOTALobbyMember.enabled_hero_id)
  return enabled_hero_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTALobbyMember::mutable_enabled_hero_id() {
  // @@protoc_insertion_point(field_mutable_list:CDOTALobbyMember.enabled_hero_id)
  return &enabled_hero_id_;
}

// optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CDOTALobbyMember::has_coach_team() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CDOTALobbyMember::set_has_coach_team() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CDOTALobbyMember::clear_has_coach_team() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CDOTALobbyMember::clear_coach_team() {
  coach_team_ = 0;
  clear_has_coach_team();
}
inline ::DOTA_GC_TEAM CDOTALobbyMember::coach_team() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.coach_team)
  return static_cast< ::DOTA_GC_TEAM >(coach_team_);
}
inline void CDOTALobbyMember::set_coach_team(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  set_has_coach_team();
  coach_team_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.coach_team)
}

// optional uint32 nexon_pc_bang_no = 24;
inline bool CDOTALobbyMember::has_nexon_pc_bang_no() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CDOTALobbyMember::set_has_nexon_pc_bang_no() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CDOTALobbyMember::clear_has_nexon_pc_bang_no() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CDOTALobbyMember::clear_nexon_pc_bang_no() {
  nexon_pc_bang_no_ = 0u;
  clear_has_nexon_pc_bang_no();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::nexon_pc_bang_no() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.nexon_pc_bang_no)
  return nexon_pc_bang_no_;
}
inline void CDOTALobbyMember::set_nexon_pc_bang_no(::google::protobuf::uint32 value) {
  set_has_nexon_pc_bang_no();
  nexon_pc_bang_no_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.nexon_pc_bang_no)
}

// optional string nexon_pc_bang_name = 25;
inline bool CDOTALobbyMember::has_nexon_pc_bang_name() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CDOTALobbyMember::set_has_nexon_pc_bang_name() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CDOTALobbyMember::clear_has_nexon_pc_bang_name() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CDOTALobbyMember::clear_nexon_pc_bang_name() {
  if (nexon_pc_bang_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nexon_pc_bang_name_->clear();
  }
  clear_has_nexon_pc_bang_name();
}
inline const ::std::string& CDOTALobbyMember::nexon_pc_bang_name() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.nexon_pc_bang_name)
  return *nexon_pc_bang_name_;
}
inline void CDOTALobbyMember::set_nexon_pc_bang_name(const ::std::string& value) {
  set_has_nexon_pc_bang_name();
  if (nexon_pc_bang_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nexon_pc_bang_name_ = new ::std::string;
  }
  nexon_pc_bang_name_->assign(value);
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.nexon_pc_bang_name)
}
inline void CDOTALobbyMember::set_nexon_pc_bang_name(const char* value) {
  set_has_nexon_pc_bang_name();
  if (nexon_pc_bang_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nexon_pc_bang_name_ = new ::std::string;
  }
  nexon_pc_bang_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CDOTALobbyMember.nexon_pc_bang_name)
}
inline void CDOTALobbyMember::set_nexon_pc_bang_name(const char* value, size_t size) {
  set_has_nexon_pc_bang_name();
  if (nexon_pc_bang_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nexon_pc_bang_name_ = new ::std::string;
  }
  nexon_pc_bang_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CDOTALobbyMember.nexon_pc_bang_name)
}
inline ::std::string* CDOTALobbyMember::mutable_nexon_pc_bang_name() {
  set_has_nexon_pc_bang_name();
  if (nexon_pc_bang_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nexon_pc_bang_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CDOTALobbyMember.nexon_pc_bang_name)
  return nexon_pc_bang_name_;
}
inline ::std::string* CDOTALobbyMember::release_nexon_pc_bang_name() {
  clear_has_nexon_pc_bang_name();
  if (nexon_pc_bang_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nexon_pc_bang_name_;
    nexon_pc_bang_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CDOTALobbyMember::set_allocated_nexon_pc_bang_name(::std::string* nexon_pc_bang_name) {
  if (nexon_pc_bang_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nexon_pc_bang_name_;
  }
  if (nexon_pc_bang_name) {
    set_has_nexon_pc_bang_name();
    nexon_pc_bang_name_ = nexon_pc_bang_name;
  } else {
    clear_has_nexon_pc_bang_name();
    nexon_pc_bang_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTALobbyMember.nexon_pc_bang_name)
}

// repeated .CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
inline int CDOTALobbyMember::xp_bonuses_size() const {
  return xp_bonuses_.size();
}
inline void CDOTALobbyMember::clear_xp_bonuses() {
  xp_bonuses_.Clear();
}
inline const ::CDOTALobbyMember_CDOTALobbyMemberXPBonus& CDOTALobbyMember::xp_bonuses(int index) const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.xp_bonuses)
  return xp_bonuses_.Get(index);
}
inline ::CDOTALobbyMember_CDOTALobbyMemberXPBonus* CDOTALobbyMember::mutable_xp_bonuses(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTALobbyMember.xp_bonuses)
  return xp_bonuses_.Mutable(index);
}
inline ::CDOTALobbyMember_CDOTALobbyMemberXPBonus* CDOTALobbyMember::add_xp_bonuses() {
  // @@protoc_insertion_point(field_add:CDOTALobbyMember.xp_bonuses)
  return xp_bonuses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember_CDOTALobbyMemberXPBonus >&
CDOTALobbyMember::xp_bonuses() const {
  // @@protoc_insertion_point(field_list:CDOTALobbyMember.xp_bonuses)
  return xp_bonuses_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember_CDOTALobbyMemberXPBonus >*
CDOTALobbyMember::mutable_xp_bonuses() {
  // @@protoc_insertion_point(field_mutable_list:CDOTALobbyMember.xp_bonuses)
  return &xp_bonuses_;
}

// optional sint32 rank_change = 29;
inline bool CDOTALobbyMember::has_rank_change() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CDOTALobbyMember::set_has_rank_change() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CDOTALobbyMember::clear_has_rank_change() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CDOTALobbyMember::clear_rank_change() {
  rank_change_ = 0;
  clear_has_rank_change();
}
inline ::google::protobuf::int32 CDOTALobbyMember::rank_change() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.rank_change)
  return rank_change_;
}
inline void CDOTALobbyMember::set_rank_change(::google::protobuf::int32 value) {
  set_has_rank_change();
  rank_change_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.rank_change)
}

// optional bool cameraman = 30;
inline bool CDOTALobbyMember::has_cameraman() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CDOTALobbyMember::set_has_cameraman() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CDOTALobbyMember::clear_has_cameraman() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CDOTALobbyMember::clear_cameraman() {
  cameraman_ = false;
  clear_has_cameraman();
}
inline bool CDOTALobbyMember::cameraman() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.cameraman)
  return cameraman_;
}
inline void CDOTALobbyMember::set_cameraman(bool value) {
  set_has_cameraman();
  cameraman_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.cameraman)
}

// repeated uint32 custom_game_product_ids = 31;
inline int CDOTALobbyMember::custom_game_product_ids_size() const {
  return custom_game_product_ids_.size();
}
inline void CDOTALobbyMember::clear_custom_game_product_ids() {
  custom_game_product_ids_.Clear();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::custom_game_product_ids(int index) const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.custom_game_product_ids)
  return custom_game_product_ids_.Get(index);
}
inline void CDOTALobbyMember::set_custom_game_product_ids(int index, ::google::protobuf::uint32 value) {
  custom_game_product_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.custom_game_product_ids)
}
inline void CDOTALobbyMember::add_custom_game_product_ids(::google::protobuf::uint32 value) {
  custom_game_product_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CDOTALobbyMember.custom_game_product_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTALobbyMember::custom_game_product_ids() const {
  // @@protoc_insertion_point(field_list:CDOTALobbyMember.custom_game_product_ids)
  return custom_game_product_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTALobbyMember::mutable_custom_game_product_ids() {
  // @@protoc_insertion_point(field_mutable_list:CDOTALobbyMember.custom_game_product_ids)
  return &custom_game_product_ids_;
}

// -------------------------------------------------------------------

// CLobbyTeamDetails

// optional string team_name = 1;
inline bool CLobbyTeamDetails::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CLobbyTeamDetails::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CLobbyTeamDetails::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& CLobbyTeamDetails::team_name() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_name)
  return *team_name_;
}
inline void CLobbyTeamDetails::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_name)
}
inline void CLobbyTeamDetails::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CLobbyTeamDetails.team_name)
}
inline void CLobbyTeamDetails::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CLobbyTeamDetails.team_name)
}
inline ::std::string* CLobbyTeamDetails::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CLobbyTeamDetails.team_name)
  return team_name_;
}
inline ::std::string* CLobbyTeamDetails::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLobbyTeamDetails::set_allocated_team_name(::std::string* team_name) {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_;
  }
  if (team_name) {
    set_has_team_name();
    team_name_ = team_name;
  } else {
    clear_has_team_name();
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CLobbyTeamDetails.team_name)
}

// optional string team_tag = 3;
inline bool CLobbyTeamDetails::has_team_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CLobbyTeamDetails::clear_has_team_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CLobbyTeamDetails::clear_team_tag() {
  if (team_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_tag_->clear();
  }
  clear_has_team_tag();
}
inline const ::std::string& CLobbyTeamDetails::team_tag() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_tag)
  return *team_tag_;
}
inline void CLobbyTeamDetails::set_team_tag(const ::std::string& value) {
  set_has_team_tag();
  if (team_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_tag_ = new ::std::string;
  }
  team_tag_->assign(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_tag)
}
inline void CLobbyTeamDetails::set_team_tag(const char* value) {
  set_has_team_tag();
  if (team_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_tag_ = new ::std::string;
  }
  team_tag_->assign(value);
  // @@protoc_insertion_point(field_set_char:CLobbyTeamDetails.team_tag)
}
inline void CLobbyTeamDetails::set_team_tag(const char* value, size_t size) {
  set_has_team_tag();
  if (team_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_tag_ = new ::std::string;
  }
  team_tag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CLobbyTeamDetails.team_tag)
}
inline ::std::string* CLobbyTeamDetails::mutable_team_tag() {
  set_has_team_tag();
  if (team_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_tag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CLobbyTeamDetails.team_tag)
  return team_tag_;
}
inline ::std::string* CLobbyTeamDetails::release_team_tag() {
  clear_has_team_tag();
  if (team_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = team_tag_;
    team_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLobbyTeamDetails::set_allocated_team_tag(::std::string* team_tag) {
  if (team_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_tag_;
  }
  if (team_tag) {
    set_has_team_tag();
    team_tag_ = team_tag;
  } else {
    clear_has_team_tag();
    team_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CLobbyTeamDetails.team_tag)
}

// optional uint32 team_id = 4;
inline bool CLobbyTeamDetails::has_team_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CLobbyTeamDetails::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CLobbyTeamDetails::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CLobbyTeamDetails::team_id() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_id)
  return team_id_;
}
inline void CLobbyTeamDetails::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_id)
}

// optional uint64 team_logo = 5;
inline bool CLobbyTeamDetails::has_team_logo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_logo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CLobbyTeamDetails::clear_has_team_logo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CLobbyTeamDetails::clear_team_logo() {
  team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo();
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::team_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_logo)
  return team_logo_;
}
inline void CLobbyTeamDetails::set_team_logo(::google::protobuf::uint64 value) {
  set_has_team_logo();
  team_logo_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_logo)
}

// optional uint64 team_base_logo = 6;
inline bool CLobbyTeamDetails::has_team_base_logo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_base_logo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CLobbyTeamDetails::clear_has_team_base_logo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CLobbyTeamDetails::clear_team_base_logo() {
  team_base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_base_logo();
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::team_base_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_base_logo)
  return team_base_logo_;
}
inline void CLobbyTeamDetails::set_team_base_logo(::google::protobuf::uint64 value) {
  set_has_team_base_logo();
  team_base_logo_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_base_logo)
}

// optional uint64 team_banner_logo = 7;
inline bool CLobbyTeamDetails::has_team_banner_logo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_banner_logo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CLobbyTeamDetails::clear_has_team_banner_logo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CLobbyTeamDetails::clear_team_banner_logo() {
  team_banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_banner_logo();
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::team_banner_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_banner_logo)
  return team_banner_logo_;
}
inline void CLobbyTeamDetails::set_team_banner_logo(::google::protobuf::uint64 value) {
  set_has_team_banner_logo();
  team_banner_logo_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_banner_logo)
}

// optional bool team_complete = 8;
inline bool CLobbyTeamDetails::has_team_complete() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_complete() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CLobbyTeamDetails::clear_has_team_complete() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CLobbyTeamDetails::clear_team_complete() {
  team_complete_ = false;
  clear_has_team_complete();
}
inline bool CLobbyTeamDetails::team_complete() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_complete)
  return team_complete_;
}
inline void CLobbyTeamDetails::set_team_complete(bool value) {
  set_has_team_complete();
  team_complete_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_complete)
}

// optional string guild_name = 9;
inline bool CLobbyTeamDetails::has_guild_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CLobbyTeamDetails::set_has_guild_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CLobbyTeamDetails::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CLobbyTeamDetails::clear_guild_name() {
  if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_name_->clear();
  }
  clear_has_guild_name();
}
inline const ::std::string& CLobbyTeamDetails::guild_name() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.guild_name)
  return *guild_name_;
}
inline void CLobbyTeamDetails::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.guild_name)
}
inline void CLobbyTeamDetails::set_guild_name(const char* value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CLobbyTeamDetails.guild_name)
}
inline void CLobbyTeamDetails::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CLobbyTeamDetails.guild_name)
}
inline ::std::string* CLobbyTeamDetails::mutable_guild_name() {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CLobbyTeamDetails.guild_name)
  return guild_name_;
}
inline ::std::string* CLobbyTeamDetails::release_guild_name() {
  clear_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guild_name_;
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLobbyTeamDetails::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_name_;
  }
  if (guild_name) {
    set_has_guild_name();
    guild_name_ = guild_name;
  } else {
    clear_has_guild_name();
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CLobbyTeamDetails.guild_name)
}

// optional string guild_tag = 10;
inline bool CLobbyTeamDetails::has_guild_tag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CLobbyTeamDetails::set_has_guild_tag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CLobbyTeamDetails::clear_has_guild_tag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CLobbyTeamDetails::clear_guild_tag() {
  if (guild_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_tag_->clear();
  }
  clear_has_guild_tag();
}
inline const ::std::string& CLobbyTeamDetails::guild_tag() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.guild_tag)
  return *guild_tag_;
}
inline void CLobbyTeamDetails::set_guild_tag(const ::std::string& value) {
  set_has_guild_tag();
  if (guild_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_tag_ = new ::std::string;
  }
  guild_tag_->assign(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.guild_tag)
}
inline void CLobbyTeamDetails::set_guild_tag(const char* value) {
  set_has_guild_tag();
  if (guild_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_tag_ = new ::std::string;
  }
  guild_tag_->assign(value);
  // @@protoc_insertion_point(field_set_char:CLobbyTeamDetails.guild_tag)
}
inline void CLobbyTeamDetails::set_guild_tag(const char* value, size_t size) {
  set_has_guild_tag();
  if (guild_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_tag_ = new ::std::string;
  }
  guild_tag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CLobbyTeamDetails.guild_tag)
}
inline ::std::string* CLobbyTeamDetails::mutable_guild_tag() {
  set_has_guild_tag();
  if (guild_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_tag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CLobbyTeamDetails.guild_tag)
  return guild_tag_;
}
inline ::std::string* CLobbyTeamDetails::release_guild_tag() {
  clear_has_guild_tag();
  if (guild_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guild_tag_;
    guild_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLobbyTeamDetails::set_allocated_guild_tag(::std::string* guild_tag) {
  if (guild_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_tag_;
  }
  if (guild_tag) {
    set_has_guild_tag();
    guild_tag_ = guild_tag;
  } else {
    clear_has_guild_tag();
    guild_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CLobbyTeamDetails.guild_tag)
}

// optional uint32 guild_id = 11;
inline bool CLobbyTeamDetails::has_guild_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CLobbyTeamDetails::set_has_guild_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CLobbyTeamDetails::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CLobbyTeamDetails::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 CLobbyTeamDetails::guild_id() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.guild_id)
  return guild_id_;
}
inline void CLobbyTeamDetails::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.guild_id)
}

// optional uint64 guild_logo = 12;
inline bool CLobbyTeamDetails::has_guild_logo() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CLobbyTeamDetails::set_has_guild_logo() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CLobbyTeamDetails::clear_has_guild_logo() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CLobbyTeamDetails::clear_guild_logo() {
  guild_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_logo();
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::guild_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.guild_logo)
  return guild_logo_;
}
inline void CLobbyTeamDetails::set_guild_logo(::google::protobuf::uint64 value) {
  set_has_guild_logo();
  guild_logo_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.guild_logo)
}

// optional uint64 guild_base_logo = 13;
inline bool CLobbyTeamDetails::has_guild_base_logo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CLobbyTeamDetails::set_has_guild_base_logo() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CLobbyTeamDetails::clear_has_guild_base_logo() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CLobbyTeamDetails::clear_guild_base_logo() {
  guild_base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_base_logo();
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::guild_base_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.guild_base_logo)
  return guild_base_logo_;
}
inline void CLobbyTeamDetails::set_guild_base_logo(::google::protobuf::uint64 value) {
  set_has_guild_base_logo();
  guild_base_logo_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.guild_base_logo)
}

// optional uint64 guild_banner_logo = 14;
inline bool CLobbyTeamDetails::has_guild_banner_logo() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CLobbyTeamDetails::set_has_guild_banner_logo() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CLobbyTeamDetails::clear_has_guild_banner_logo() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CLobbyTeamDetails::clear_guild_banner_logo() {
  guild_banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_banner_logo();
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::guild_banner_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.guild_banner_logo)
  return guild_banner_logo_;
}
inline void CLobbyTeamDetails::set_guild_banner_logo(::google::protobuf::uint64 value) {
  set_has_guild_banner_logo();
  guild_banner_logo_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.guild_banner_logo)
}

// optional uint32 rank = 15;
inline bool CLobbyTeamDetails::has_rank() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CLobbyTeamDetails::set_has_rank() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CLobbyTeamDetails::clear_has_rank() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CLobbyTeamDetails::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 CLobbyTeamDetails::rank() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.rank)
  return rank_;
}
inline void CLobbyTeamDetails::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.rank)
}

// optional sint32 rank_change = 16;
inline bool CLobbyTeamDetails::has_rank_change() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CLobbyTeamDetails::set_has_rank_change() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CLobbyTeamDetails::clear_has_rank_change() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CLobbyTeamDetails::clear_rank_change() {
  rank_change_ = 0;
  clear_has_rank_change();
}
inline ::google::protobuf::int32 CLobbyTeamDetails::rank_change() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.rank_change)
  return rank_change_;
}
inline void CLobbyTeamDetails::set_rank_change(::google::protobuf::int32 value) {
  set_has_rank_change();
  rank_change_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.rank_change)
}

// optional bool is_home_team = 17;
inline bool CLobbyTeamDetails::has_is_home_team() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CLobbyTeamDetails::set_has_is_home_team() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CLobbyTeamDetails::clear_has_is_home_team() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CLobbyTeamDetails::clear_is_home_team() {
  is_home_team_ = false;
  clear_has_is_home_team();
}
inline bool CLobbyTeamDetails::is_home_team() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.is_home_team)
  return is_home_team_;
}
inline void CLobbyTeamDetails::set_is_home_team(bool value) {
  set_has_is_home_team();
  is_home_team_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.is_home_team)
}

// -------------------------------------------------------------------

// CLobbyTimedRewardDetails

// optional uint32 item_def_index = 2;
inline bool CLobbyTimedRewardDetails::has_item_def_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CLobbyTimedRewardDetails::set_has_item_def_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CLobbyTimedRewardDetails::clear_has_item_def_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CLobbyTimedRewardDetails::clear_item_def_index() {
  item_def_index_ = 0u;
  clear_has_item_def_index();
}
inline ::google::protobuf::uint32 CLobbyTimedRewardDetails::item_def_index() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.item_def_index)
  return item_def_index_;
}
inline void CLobbyTimedRewardDetails::set_item_def_index(::google::protobuf::uint32 value) {
  set_has_item_def_index();
  item_def_index_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.item_def_index)
}

// optional bool is_supply_crate = 3;
inline bool CLobbyTimedRewardDetails::has_is_supply_crate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CLobbyTimedRewardDetails::set_has_is_supply_crate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CLobbyTimedRewardDetails::clear_has_is_supply_crate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CLobbyTimedRewardDetails::clear_is_supply_crate() {
  is_supply_crate_ = false;
  clear_has_is_supply_crate();
}
inline bool CLobbyTimedRewardDetails::is_supply_crate() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.is_supply_crate)
  return is_supply_crate_;
}
inline void CLobbyTimedRewardDetails::set_is_supply_crate(bool value) {
  set_has_is_supply_crate();
  is_supply_crate_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.is_supply_crate)
}

// optional bool is_timed_drop = 4;
inline bool CLobbyTimedRewardDetails::has_is_timed_drop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CLobbyTimedRewardDetails::set_has_is_timed_drop() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CLobbyTimedRewardDetails::clear_has_is_timed_drop() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CLobbyTimedRewardDetails::clear_is_timed_drop() {
  is_timed_drop_ = false;
  clear_has_is_timed_drop();
}
inline bool CLobbyTimedRewardDetails::is_timed_drop() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.is_timed_drop)
  return is_timed_drop_;
}
inline void CLobbyTimedRewardDetails::set_is_timed_drop(bool value) {
  set_has_is_timed_drop();
  is_timed_drop_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.is_timed_drop)
}

// optional uint32 account_id = 5;
inline bool CLobbyTimedRewardDetails::has_account_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CLobbyTimedRewardDetails::set_has_account_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CLobbyTimedRewardDetails::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CLobbyTimedRewardDetails::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CLobbyTimedRewardDetails::account_id() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.account_id)
  return account_id_;
}
inline void CLobbyTimedRewardDetails::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.account_id)
}

// optional uint32 origin = 6;
inline bool CLobbyTimedRewardDetails::has_origin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CLobbyTimedRewardDetails::set_has_origin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CLobbyTimedRewardDetails::clear_has_origin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CLobbyTimedRewardDetails::clear_origin() {
  origin_ = 0u;
  clear_has_origin();
}
inline ::google::protobuf::uint32 CLobbyTimedRewardDetails::origin() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.origin)
  return origin_;
}
inline void CLobbyTimedRewardDetails::set_origin(::google::protobuf::uint32 value) {
  set_has_origin();
  origin_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.origin)
}

// -------------------------------------------------------------------

// CLobbyBroadcastChannelInfo

// optional uint32 channel_id = 1;
inline bool CLobbyBroadcastChannelInfo::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CLobbyBroadcastChannelInfo::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CLobbyBroadcastChannelInfo::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CLobbyBroadcastChannelInfo::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 CLobbyBroadcastChannelInfo::channel_id() const {
  // @@protoc_insertion_point(field_get:CLobbyBroadcastChannelInfo.channel_id)
  return channel_id_;
}
inline void CLobbyBroadcastChannelInfo::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:CLobbyBroadcastChannelInfo.channel_id)
}

// optional string country_code = 2;
inline bool CLobbyBroadcastChannelInfo::has_country_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CLobbyBroadcastChannelInfo::set_has_country_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CLobbyBroadcastChannelInfo::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CLobbyBroadcastChannelInfo::clear_country_code() {
  if (country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_code_->clear();
  }
  clear_has_country_code();
}
inline const ::std::string& CLobbyBroadcastChannelInfo::country_code() const {
  // @@protoc_insertion_point(field_get:CLobbyBroadcastChannelInfo.country_code)
  return *country_code_;
}
inline void CLobbyBroadcastChannelInfo::set_country_code(const ::std::string& value) {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_code_ = new ::std::string;
  }
  country_code_->assign(value);
  // @@protoc_insertion_point(field_set:CLobbyBroadcastChannelInfo.country_code)
}
inline void CLobbyBroadcastChannelInfo::set_country_code(const char* value) {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_code_ = new ::std::string;
  }
  country_code_->assign(value);
  // @@protoc_insertion_point(field_set_char:CLobbyBroadcastChannelInfo.country_code)
}
inline void CLobbyBroadcastChannelInfo::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_code_ = new ::std::string;
  }
  country_code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CLobbyBroadcastChannelInfo.country_code)
}
inline ::std::string* CLobbyBroadcastChannelInfo::mutable_country_code() {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CLobbyBroadcastChannelInfo.country_code)
  return country_code_;
}
inline ::std::string* CLobbyBroadcastChannelInfo::release_country_code() {
  clear_has_country_code();
  if (country_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = country_code_;
    country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLobbyBroadcastChannelInfo::set_allocated_country_code(::std::string* country_code) {
  if (country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_code_;
  }
  if (country_code) {
    set_has_country_code();
    country_code_ = country_code;
  } else {
    clear_has_country_code();
    country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CLobbyBroadcastChannelInfo.country_code)
}

// optional string description = 3;
inline bool CLobbyBroadcastChannelInfo::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CLobbyBroadcastChannelInfo::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CLobbyBroadcastChannelInfo::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CLobbyBroadcastChannelInfo::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& CLobbyBroadcastChannelInfo::description() const {
  // @@protoc_insertion_point(field_get:CLobbyBroadcastChannelInfo.description)
  return *description_;
}
inline void CLobbyBroadcastChannelInfo::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:CLobbyBroadcastChannelInfo.description)
}
inline void CLobbyBroadcastChannelInfo::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:CLobbyBroadcastChannelInfo.description)
}
inline void CLobbyBroadcastChannelInfo::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CLobbyBroadcastChannelInfo.description)
}
inline ::std::string* CLobbyBroadcastChannelInfo::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CLobbyBroadcastChannelInfo.description)
  return description_;
}
inline ::std::string* CLobbyBroadcastChannelInfo::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLobbyBroadcastChannelInfo::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CLobbyBroadcastChannelInfo.description)
}

// optional string language_code = 4;
inline bool CLobbyBroadcastChannelInfo::has_language_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CLobbyBroadcastChannelInfo::set_has_language_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CLobbyBroadcastChannelInfo::clear_has_language_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CLobbyBroadcastChannelInfo::clear_language_code() {
  if (language_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_code_->clear();
  }
  clear_has_language_code();
}
inline const ::std::string& CLobbyBroadcastChannelInfo::language_code() const {
  // @@protoc_insertion_point(field_get:CLobbyBroadcastChannelInfo.language_code)
  return *language_code_;
}
inline void CLobbyBroadcastChannelInfo::set_language_code(const ::std::string& value) {
  set_has_language_code();
  if (language_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_code_ = new ::std::string;
  }
  language_code_->assign(value);
  // @@protoc_insertion_point(field_set:CLobbyBroadcastChannelInfo.language_code)
}
inline void CLobbyBroadcastChannelInfo::set_language_code(const char* value) {
  set_has_language_code();
  if (language_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_code_ = new ::std::string;
  }
  language_code_->assign(value);
  // @@protoc_insertion_point(field_set_char:CLobbyBroadcastChannelInfo.language_code)
}
inline void CLobbyBroadcastChannelInfo::set_language_code(const char* value, size_t size) {
  set_has_language_code();
  if (language_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_code_ = new ::std::string;
  }
  language_code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CLobbyBroadcastChannelInfo.language_code)
}
inline ::std::string* CLobbyBroadcastChannelInfo::mutable_language_code() {
  set_has_language_code();
  if (language_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CLobbyBroadcastChannelInfo.language_code)
  return language_code_;
}
inline ::std::string* CLobbyBroadcastChannelInfo::release_language_code() {
  clear_has_language_code();
  if (language_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = language_code_;
    language_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLobbyBroadcastChannelInfo::set_allocated_language_code(::std::string* language_code) {
  if (language_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete language_code_;
  }
  if (language_code) {
    set_has_language_code();
    language_code_ = language_code;
  } else {
    clear_has_language_code();
    language_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CLobbyBroadcastChannelInfo.language_code)
}

// -------------------------------------------------------------------

// CSODOTALobby_CExtraMsg

// optional uint32 id = 1;
inline bool CSODOTALobby_CExtraMsg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTALobby_CExtraMsg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTALobby_CExtraMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTALobby_CExtraMsg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CSODOTALobby_CExtraMsg::id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.CExtraMsg.id)
  return id_;
}
inline void CSODOTALobby_CExtraMsg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.CExtraMsg.id)
}

// optional bytes contents = 2;
inline bool CSODOTALobby_CExtraMsg::has_contents() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTALobby_CExtraMsg::set_has_contents() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTALobby_CExtraMsg::clear_has_contents() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTALobby_CExtraMsg::clear_contents() {
  if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_->clear();
  }
  clear_has_contents();
}
inline const ::std::string& CSODOTALobby_CExtraMsg::contents() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.CExtraMsg.contents)
  return *contents_;
}
inline void CSODOTALobby_CExtraMsg::set_contents(const ::std::string& value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.CExtraMsg.contents)
}
inline void CSODOTALobby_CExtraMsg::set_contents(const char* value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.CExtraMsg.contents)
}
inline void CSODOTALobby_CExtraMsg::set_contents(const void* value, size_t size) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_ = new ::std::string;
  }
  contents_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.CExtraMsg.contents)
}
inline ::std::string* CSODOTALobby_CExtraMsg::mutable_contents() {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.CExtraMsg.contents)
  return contents_;
}
inline ::std::string* CSODOTALobby_CExtraMsg::release_contents() {
  clear_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contents_;
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSODOTALobby_CExtraMsg::set_allocated_contents(::std::string* contents) {
  if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contents_;
  }
  if (contents) {
    set_has_contents();
    contents_ = contents;
  } else {
    clear_has_contents();
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.CExtraMsg.contents)
}

// -------------------------------------------------------------------

// CSODOTALobby

// optional uint64 lobby_id = 1;
inline bool CSODOTALobby::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTALobby::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTALobby::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTALobby::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
inline ::google::protobuf::uint64 CSODOTALobby::lobby_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.lobby_id)
  return lobby_id_;
}
inline void CSODOTALobby::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.lobby_id)
}

// repeated .CDOTALobbyMember members = 2;
inline int CSODOTALobby::members_size() const {
  return members_.size();
}
inline void CSODOTALobby::clear_members() {
  members_.Clear();
}
inline const ::CDOTALobbyMember& CSODOTALobby::members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.members)
  return members_.Get(index);
}
inline ::CDOTALobbyMember* CSODOTALobby::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.members)
  return members_.Mutable(index);
}
inline ::CDOTALobbyMember* CSODOTALobby::add_members() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >&
CSODOTALobby::members() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >*
CSODOTALobby::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.members)
  return &members_;
}

// repeated .CDOTALobbyMember left_members = 7;
inline int CSODOTALobby::left_members_size() const {
  return left_members_.size();
}
inline void CSODOTALobby::clear_left_members() {
  left_members_.Clear();
}
inline const ::CDOTALobbyMember& CSODOTALobby::left_members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.left_members)
  return left_members_.Get(index);
}
inline ::CDOTALobbyMember* CSODOTALobby::mutable_left_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.left_members)
  return left_members_.Mutable(index);
}
inline ::CDOTALobbyMember* CSODOTALobby::add_left_members() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.left_members)
  return left_members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >&
CSODOTALobby::left_members() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.left_members)
  return left_members_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >*
CSODOTALobby::mutable_left_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.left_members)
  return &left_members_;
}

// optional fixed64 leader_id = 11;
inline bool CSODOTALobby::has_leader_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSODOTALobby::set_has_leader_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSODOTALobby::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSODOTALobby::clear_leader_id() {
  leader_id_ = GOOGLE_ULONGLONG(0);
  clear_has_leader_id();
}
inline ::google::protobuf::uint64 CSODOTALobby::leader_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.leader_id)
  return leader_id_;
}
inline void CSODOTALobby::set_leader_id(::google::protobuf::uint64 value) {
  set_has_leader_id();
  leader_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.leader_id)
}

// optional fixed64 server_id = 6 [default = 0];
inline bool CSODOTALobby::has_server_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTALobby::set_has_server_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSODOTALobby::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSODOTALobby::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
inline ::google::protobuf::uint64 CSODOTALobby::server_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.server_id)
  return server_id_;
}
inline void CSODOTALobby::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.server_id)
}

// optional uint32 game_mode = 3;
inline bool CSODOTALobby::has_game_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTALobby::set_has_game_mode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSODOTALobby::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSODOTALobby::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
inline ::google::protobuf::uint32 CSODOTALobby::game_mode() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.game_mode)
  return game_mode_;
}
inline void CSODOTALobby::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.game_mode)
}

// repeated fixed64 pending_invites = 10;
inline int CSODOTALobby::pending_invites_size() const {
  return pending_invites_.size();
}
inline void CSODOTALobby::clear_pending_invites() {
  pending_invites_.Clear();
}
inline ::google::protobuf::uint64 CSODOTALobby::pending_invites(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.pending_invites)
  return pending_invites_.Get(index);
}
inline void CSODOTALobby::set_pending_invites(int index, ::google::protobuf::uint64 value) {
  pending_invites_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.pending_invites)
}
inline void CSODOTALobby::add_pending_invites(::google::protobuf::uint64 value) {
  pending_invites_.Add(value);
  // @@protoc_insertion_point(field_add:CSODOTALobby.pending_invites)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CSODOTALobby::pending_invites() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.pending_invites)
  return pending_invites_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CSODOTALobby::mutable_pending_invites() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.pending_invites)
  return &pending_invites_;
}

// optional .CSODOTALobby.State state = 4 [default = UI];
inline bool CSODOTALobby::has_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSODOTALobby::set_has_state() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSODOTALobby::clear_has_state() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSODOTALobby::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::CSODOTALobby_State CSODOTALobby::state() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.state)
  return static_cast< ::CSODOTALobby_State >(state_);
}
inline void CSODOTALobby::set_state(::CSODOTALobby_State value) {
  assert(::CSODOTALobby_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.state)
}

// optional string connect = 5;
inline bool CSODOTALobby::has_connect() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSODOTALobby::set_has_connect() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSODOTALobby::clear_has_connect() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSODOTALobby::clear_connect() {
  if (connect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    connect_->clear();
  }
  clear_has_connect();
}
inline const ::std::string& CSODOTALobby::connect() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.connect)
  return *connect_;
}
inline void CSODOTALobby::set_connect(const ::std::string& value) {
  set_has_connect();
  if (connect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    connect_ = new ::std::string;
  }
  connect_->assign(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.connect)
}
inline void CSODOTALobby::set_connect(const char* value) {
  set_has_connect();
  if (connect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    connect_ = new ::std::string;
  }
  connect_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.connect)
}
inline void CSODOTALobby::set_connect(const char* value, size_t size) {
  set_has_connect();
  if (connect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    connect_ = new ::std::string;
  }
  connect_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.connect)
}
inline ::std::string* CSODOTALobby::mutable_connect() {
  set_has_connect();
  if (connect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    connect_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.connect)
  return connect_;
}
inline ::std::string* CSODOTALobby::release_connect() {
  clear_has_connect();
  if (connect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = connect_;
    connect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSODOTALobby::set_allocated_connect(::std::string* connect) {
  if (connect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete connect_;
  }
  if (connect) {
    set_has_connect();
    connect_ = connect;
  } else {
    clear_has_connect();
    connect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.connect)
}

// optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
inline bool CSODOTALobby::has_lobby_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSODOTALobby::set_has_lobby_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSODOTALobby::clear_has_lobby_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSODOTALobby::clear_lobby_type() {
  lobby_type_ = -1;
  clear_has_lobby_type();
}
inline ::CSODOTALobby_LobbyType CSODOTALobby::lobby_type() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.lobby_type)
  return static_cast< ::CSODOTALobby_LobbyType >(lobby_type_);
}
inline void CSODOTALobby::set_lobby_type(::CSODOTALobby_LobbyType value) {
  assert(::CSODOTALobby_LobbyType_IsValid(value));
  set_has_lobby_type();
  lobby_type_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.lobby_type)
}

// optional bool allow_cheats = 13;
inline bool CSODOTALobby::has_allow_cheats() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSODOTALobby::set_has_allow_cheats() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSODOTALobby::clear_has_allow_cheats() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSODOTALobby::clear_allow_cheats() {
  allow_cheats_ = false;
  clear_has_allow_cheats();
}
inline bool CSODOTALobby::allow_cheats() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.allow_cheats)
  return allow_cheats_;
}
inline void CSODOTALobby::set_allow_cheats(bool value) {
  set_has_allow_cheats();
  allow_cheats_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.allow_cheats)
}

// optional bool fill_with_bots = 14;
inline bool CSODOTALobby::has_fill_with_bots() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSODOTALobby::set_has_fill_with_bots() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CSODOTALobby::clear_has_fill_with_bots() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CSODOTALobby::clear_fill_with_bots() {
  fill_with_bots_ = false;
  clear_has_fill_with_bots();
}
inline bool CSODOTALobby::fill_with_bots() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.fill_with_bots)
  return fill_with_bots_;
}
inline void CSODOTALobby::set_fill_with_bots(bool value) {
  set_has_fill_with_bots();
  fill_with_bots_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.fill_with_bots)
}

// optional bool intro_mode = 15;
inline bool CSODOTALobby::has_intro_mode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSODOTALobby::set_has_intro_mode() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CSODOTALobby::clear_has_intro_mode() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CSODOTALobby::clear_intro_mode() {
  intro_mode_ = false;
  clear_has_intro_mode();
}
inline bool CSODOTALobby::intro_mode() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.intro_mode)
  return intro_mode_;
}
inline void CSODOTALobby::set_intro_mode(bool value) {
  set_has_intro_mode();
  intro_mode_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.intro_mode)
}

// optional string game_name = 16;
inline bool CSODOTALobby::has_game_name() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CSODOTALobby::set_has_game_name() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CSODOTALobby::clear_has_game_name() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CSODOTALobby::clear_game_name() {
  if (game_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_name_->clear();
  }
  clear_has_game_name();
}
inline const ::std::string& CSODOTALobby::game_name() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.game_name)
  return *game_name_;
}
inline void CSODOTALobby::set_game_name(const ::std::string& value) {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_name_ = new ::std::string;
  }
  game_name_->assign(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.game_name)
}
inline void CSODOTALobby::set_game_name(const char* value) {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_name_ = new ::std::string;
  }
  game_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.game_name)
}
inline void CSODOTALobby::set_game_name(const char* value, size_t size) {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_name_ = new ::std::string;
  }
  game_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.game_name)
}
inline ::std::string* CSODOTALobby::mutable_game_name() {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.game_name)
  return game_name_;
}
inline ::std::string* CSODOTALobby::release_game_name() {
  clear_has_game_name();
  if (game_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = game_name_;
    game_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSODOTALobby::set_allocated_game_name(::std::string* game_name) {
  if (game_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_name_;
  }
  if (game_name) {
    set_has_game_name();
    game_name_ = game_name;
  } else {
    clear_has_game_name();
    game_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.game_name)
}

// repeated .CLobbyTeamDetails team_details = 17;
inline int CSODOTALobby::team_details_size() const {
  return team_details_.size();
}
inline void CSODOTALobby::clear_team_details() {
  team_details_.Clear();
}
inline const ::CLobbyTeamDetails& CSODOTALobby::team_details(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.team_details)
  return team_details_.Get(index);
}
inline ::CLobbyTeamDetails* CSODOTALobby::mutable_team_details(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.team_details)
  return team_details_.Mutable(index);
}
inline ::CLobbyTeamDetails* CSODOTALobby::add_team_details() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.team_details)
  return team_details_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >&
CSODOTALobby::team_details() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.team_details)
  return team_details_;
}
inline ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >*
CSODOTALobby::mutable_team_details() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.team_details)
  return &team_details_;
}

// optional uint32 tutorial_lesson = 18;
inline bool CSODOTALobby::has_tutorial_lesson() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CSODOTALobby::set_has_tutorial_lesson() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CSODOTALobby::clear_has_tutorial_lesson() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CSODOTALobby::clear_tutorial_lesson() {
  tutorial_lesson_ = 0u;
  clear_has_tutorial_lesson();
}
inline ::google::protobuf::uint32 CSODOTALobby::tutorial_lesson() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.tutorial_lesson)
  return tutorial_lesson_;
}
inline void CSODOTALobby::set_tutorial_lesson(::google::protobuf::uint32 value) {
  set_has_tutorial_lesson();
  tutorial_lesson_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.tutorial_lesson)
}

// optional uint32 tournament_id = 19;
inline bool CSODOTALobby::has_tournament_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CSODOTALobby::set_has_tournament_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CSODOTALobby::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CSODOTALobby::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
inline ::google::protobuf::uint32 CSODOTALobby::tournament_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.tournament_id)
  return tournament_id_;
}
inline void CSODOTALobby::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.tournament_id)
}

// optional uint32 tournament_game_id = 20;
inline bool CSODOTALobby::has_tournament_game_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CSODOTALobby::set_has_tournament_game_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CSODOTALobby::clear_has_tournament_game_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CSODOTALobby::clear_tournament_game_id() {
  tournament_game_id_ = 0u;
  clear_has_tournament_game_id();
}
inline ::google::protobuf::uint32 CSODOTALobby::tournament_game_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.tournament_game_id)
  return tournament_game_id_;
}
inline void CSODOTALobby::set_tournament_game_id(::google::protobuf::uint32 value) {
  set_has_tournament_game_id();
  tournament_game_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.tournament_game_id)
}

// optional uint32 server_region = 21 [default = 0];
inline bool CSODOTALobby::has_server_region() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CSODOTALobby::set_has_server_region() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CSODOTALobby::clear_has_server_region() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CSODOTALobby::clear_server_region() {
  server_region_ = 0u;
  clear_has_server_region();
}
inline ::google::protobuf::uint32 CSODOTALobby::server_region() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.server_region)
  return server_region_;
}
inline void CSODOTALobby::set_server_region(::google::protobuf::uint32 value) {
  set_has_server_region();
  server_region_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.server_region)
}

// optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
inline bool CSODOTALobby::has_game_state() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CSODOTALobby::set_has_game_state() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CSODOTALobby::clear_has_game_state() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CSODOTALobby::clear_game_state() {
  game_state_ = 0;
  clear_has_game_state();
}
inline ::DOTA_GameState CSODOTALobby::game_state() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.game_state)
  return static_cast< ::DOTA_GameState >(game_state_);
}
inline void CSODOTALobby::set_game_state(::DOTA_GameState value) {
  assert(::DOTA_GameState_IsValid(value));
  set_has_game_state();
  game_state_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.game_state)
}

// optional uint32 num_spectators = 23;
inline bool CSODOTALobby::has_num_spectators() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CSODOTALobby::set_has_num_spectators() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CSODOTALobby::clear_has_num_spectators() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CSODOTALobby::clear_num_spectators() {
  num_spectators_ = 0u;
  clear_has_num_spectators();
}
inline ::google::protobuf::uint32 CSODOTALobby::num_spectators() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.num_spectators)
  return num_spectators_;
}
inline void CSODOTALobby::set_num_spectators(::google::protobuf::uint32 value) {
  set_has_num_spectators();
  num_spectators_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.num_spectators)
}

// optional uint32 matchgroup = 25;
inline bool CSODOTALobby::has_matchgroup() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CSODOTALobby::set_has_matchgroup() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CSODOTALobby::clear_has_matchgroup() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CSODOTALobby::clear_matchgroup() {
  matchgroup_ = 0u;
  clear_has_matchgroup();
}
inline ::google::protobuf::uint32 CSODOTALobby::matchgroup() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.matchgroup)
  return matchgroup_;
}
inline void CSODOTALobby::set_matchgroup(::google::protobuf::uint32 value) {
  set_has_matchgroup();
  matchgroup_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.matchgroup)
}

// optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
inline bool CSODOTALobby::has_cm_pick() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CSODOTALobby::set_has_cm_pick() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CSODOTALobby::clear_has_cm_pick() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CSODOTALobby::clear_cm_pick() {
  cm_pick_ = 0;
  clear_has_cm_pick();
}
inline ::DOTA_CM_PICK CSODOTALobby::cm_pick() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.cm_pick)
  return static_cast< ::DOTA_CM_PICK >(cm_pick_);
}
inline void CSODOTALobby::set_cm_pick(::DOTA_CM_PICK value) {
  assert(::DOTA_CM_PICK_IsValid(value));
  set_has_cm_pick();
  cm_pick_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.cm_pick)
}

// optional uint64 match_id = 30;
inline bool CSODOTALobby::has_match_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CSODOTALobby::set_has_match_id() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CSODOTALobby::clear_has_match_id() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CSODOTALobby::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
inline ::google::protobuf::uint64 CSODOTALobby::match_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.match_id)
  return match_id_;
}
inline void CSODOTALobby::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.match_id)
}

// optional bool allow_spectating = 31 [default = true];
inline bool CSODOTALobby::has_allow_spectating() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CSODOTALobby::set_has_allow_spectating() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CSODOTALobby::clear_has_allow_spectating() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CSODOTALobby::clear_allow_spectating() {
  allow_spectating_ = true;
  clear_has_allow_spectating();
}
inline bool CSODOTALobby::allow_spectating() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.allow_spectating)
  return allow_spectating_;
}
inline void CSODOTALobby::set_allow_spectating(bool value) {
  set_has_allow_spectating();
  allow_spectating_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.allow_spectating)
}

// optional .DOTABotDifficulty bot_difficulty = 36 [default = BOT_DIFFICULTY_HARD];
inline bool CSODOTALobby::has_bot_difficulty() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CSODOTALobby::set_has_bot_difficulty() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CSODOTALobby::clear_has_bot_difficulty() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CSODOTALobby::clear_bot_difficulty() {
  bot_difficulty_ = 3;
  clear_has_bot_difficulty();
}
inline ::DOTABotDifficulty CSODOTALobby::bot_difficulty() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.bot_difficulty)
  return static_cast< ::DOTABotDifficulty >(bot_difficulty_);
}
inline void CSODOTALobby::set_bot_difficulty(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty();
  bot_difficulty_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.bot_difficulty)
}

// optional .DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
inline bool CSODOTALobby::has_game_version() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CSODOTALobby::set_has_game_version() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CSODOTALobby::clear_has_game_version() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CSODOTALobby::clear_game_version() {
  game_version_ = 0;
  clear_has_game_version();
}
inline ::DOTAGameVersion CSODOTALobby::game_version() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.game_version)
  return static_cast< ::DOTAGameVersion >(game_version_);
}
inline void CSODOTALobby::set_game_version(::DOTAGameVersion value) {
  assert(::DOTAGameVersion_IsValid(value));
  set_has_game_version();
  game_version_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.game_version)
}

// repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
inline int CSODOTALobby::timed_reward_details_size() const {
  return timed_reward_details_.size();
}
inline void CSODOTALobby::clear_timed_reward_details() {
  timed_reward_details_.Clear();
}
inline const ::CLobbyTimedRewardDetails& CSODOTALobby::timed_reward_details(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.timed_reward_details)
  return timed_reward_details_.Get(index);
}
inline ::CLobbyTimedRewardDetails* CSODOTALobby::mutable_timed_reward_details(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.timed_reward_details)
  return timed_reward_details_.Mutable(index);
}
inline ::CLobbyTimedRewardDetails* CSODOTALobby::add_timed_reward_details() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.timed_reward_details)
  return timed_reward_details_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >&
CSODOTALobby::timed_reward_details() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.timed_reward_details)
  return timed_reward_details_;
}
inline ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >*
CSODOTALobby::mutable_timed_reward_details() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.timed_reward_details)
  return &timed_reward_details_;
}

// optional string pass_key = 39;
inline bool CSODOTALobby::has_pass_key() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CSODOTALobby::set_has_pass_key() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CSODOTALobby::clear_has_pass_key() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CSODOTALobby::clear_pass_key() {
  if (pass_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_->clear();
  }
  clear_has_pass_key();
}
inline const ::std::string& CSODOTALobby::pass_key() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.pass_key)
  return *pass_key_;
}
inline void CSODOTALobby::set_pass_key(const ::std::string& value) {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  pass_key_->assign(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.pass_key)
}
inline void CSODOTALobby::set_pass_key(const char* value) {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  pass_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.pass_key)
}
inline void CSODOTALobby::set_pass_key(const char* value, size_t size) {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  pass_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.pass_key)
}
inline ::std::string* CSODOTALobby::mutable_pass_key() {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.pass_key)
  return pass_key_;
}
inline ::std::string* CSODOTALobby::release_pass_key() {
  clear_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pass_key_;
    pass_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSODOTALobby::set_allocated_pass_key(::std::string* pass_key) {
  if (pass_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pass_key_;
  }
  if (pass_key) {
    set_has_pass_key();
    pass_key_ = pass_key;
  } else {
    clear_has_pass_key();
    pass_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.pass_key)
}

// repeated .DOTABotDifficulty bot_slot_difficulty = 41;
inline int CSODOTALobby::bot_slot_difficulty_size() const {
  return bot_slot_difficulty_.size();
}
inline void CSODOTALobby::clear_bot_slot_difficulty() {
  bot_slot_difficulty_.Clear();
}
inline ::DOTABotDifficulty CSODOTALobby::bot_slot_difficulty(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.bot_slot_difficulty)
  return static_cast< ::DOTABotDifficulty >(bot_slot_difficulty_.Get(index));
}
inline void CSODOTALobby::set_bot_slot_difficulty(int index, ::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  bot_slot_difficulty_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.bot_slot_difficulty)
}
inline void CSODOTALobby::add_bot_slot_difficulty(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  bot_slot_difficulty_.Add(value);
  // @@protoc_insertion_point(field_add:CSODOTALobby.bot_slot_difficulty)
}
inline const ::google::protobuf::RepeatedField<int>&
CSODOTALobby::bot_slot_difficulty() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.bot_slot_difficulty)
  return bot_slot_difficulty_;
}
inline ::google::protobuf::RepeatedField<int>*
CSODOTALobby::mutable_bot_slot_difficulty() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.bot_slot_difficulty)
  return &bot_slot_difficulty_;
}

// optional uint32 leagueid = 42;
inline bool CSODOTALobby::has_leagueid() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CSODOTALobby::set_has_leagueid() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CSODOTALobby::clear_has_leagueid() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CSODOTALobby::clear_leagueid() {
  leagueid_ = 0u;
  clear_has_leagueid();
}
inline ::google::protobuf::uint32 CSODOTALobby::leagueid() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.leagueid)
  return leagueid_;
}
inline void CSODOTALobby::set_leagueid(::google::protobuf::uint32 value) {
  set_has_leagueid();
  leagueid_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.leagueid)
}

// optional uint32 penalty_level_radiant = 43 [default = 0];
inline bool CSODOTALobby::has_penalty_level_radiant() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CSODOTALobby::set_has_penalty_level_radiant() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CSODOTALobby::clear_has_penalty_level_radiant() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CSODOTALobby::clear_penalty_level_radiant() {
  penalty_level_radiant_ = 0u;
  clear_has_penalty_level_radiant();
}
inline ::google::protobuf::uint32 CSODOTALobby::penalty_level_radiant() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.penalty_level_radiant)
  return penalty_level_radiant_;
}
inline void CSODOTALobby::set_penalty_level_radiant(::google::protobuf::uint32 value) {
  set_has_penalty_level_radiant();
  penalty_level_radiant_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.penalty_level_radiant)
}

// optional uint32 penalty_level_dire = 44 [default = 0];
inline bool CSODOTALobby::has_penalty_level_dire() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CSODOTALobby::set_has_penalty_level_dire() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CSODOTALobby::clear_has_penalty_level_dire() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CSODOTALobby::clear_penalty_level_dire() {
  penalty_level_dire_ = 0u;
  clear_has_penalty_level_dire();
}
inline ::google::protobuf::uint32 CSODOTALobby::penalty_level_dire() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.penalty_level_dire)
  return penalty_level_dire_;
}
inline void CSODOTALobby::set_penalty_level_dire(::google::protobuf::uint32 value) {
  set_has_penalty_level_dire();
  penalty_level_dire_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.penalty_level_dire)
}

// optional uint32 load_game_id = 45;
inline bool CSODOTALobby::has_load_game_id() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CSODOTALobby::set_has_load_game_id() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CSODOTALobby::clear_has_load_game_id() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CSODOTALobby::clear_load_game_id() {
  load_game_id_ = 0u;
  clear_has_load_game_id();
}
inline ::google::protobuf::uint32 CSODOTALobby::load_game_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.load_game_id)
  return load_game_id_;
}
inline void CSODOTALobby::set_load_game_id(::google::protobuf::uint32 value) {
  set_has_load_game_id();
  load_game_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.load_game_id)
}

// optional uint32 series_type = 46;
inline bool CSODOTALobby::has_series_type() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CSODOTALobby::set_has_series_type() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CSODOTALobby::clear_has_series_type() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CSODOTALobby::clear_series_type() {
  series_type_ = 0u;
  clear_has_series_type();
}
inline ::google::protobuf::uint32 CSODOTALobby::series_type() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.series_type)
  return series_type_;
}
inline void CSODOTALobby::set_series_type(::google::protobuf::uint32 value) {
  set_has_series_type();
  series_type_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.series_type)
}

// optional uint32 radiant_series_wins = 47;
inline bool CSODOTALobby::has_radiant_series_wins() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CSODOTALobby::set_has_radiant_series_wins() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CSODOTALobby::clear_has_radiant_series_wins() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CSODOTALobby::clear_radiant_series_wins() {
  radiant_series_wins_ = 0u;
  clear_has_radiant_series_wins();
}
inline ::google::protobuf::uint32 CSODOTALobby::radiant_series_wins() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.radiant_series_wins)
  return radiant_series_wins_;
}
inline void CSODOTALobby::set_radiant_series_wins(::google::protobuf::uint32 value) {
  set_has_radiant_series_wins();
  radiant_series_wins_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.radiant_series_wins)
}

// optional uint32 dire_series_wins = 48;
inline bool CSODOTALobby::has_dire_series_wins() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CSODOTALobby::set_has_dire_series_wins() {
  _has_bits_[1] |= 0x00000010u;
}
inline void CSODOTALobby::clear_has_dire_series_wins() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void CSODOTALobby::clear_dire_series_wins() {
  dire_series_wins_ = 0u;
  clear_has_dire_series_wins();
}
inline ::google::protobuf::uint32 CSODOTALobby::dire_series_wins() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.dire_series_wins)
  return dire_series_wins_;
}
inline void CSODOTALobby::set_dire_series_wins(::google::protobuf::uint32 value) {
  set_has_dire_series_wins();
  dire_series_wins_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.dire_series_wins)
}

// optional uint32 loot_generated = 49;
inline bool CSODOTALobby::has_loot_generated() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CSODOTALobby::set_has_loot_generated() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CSODOTALobby::clear_has_loot_generated() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CSODOTALobby::clear_loot_generated() {
  loot_generated_ = 0u;
  clear_has_loot_generated();
}
inline ::google::protobuf::uint32 CSODOTALobby::loot_generated() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.loot_generated)
  return loot_generated_;
}
inline void CSODOTALobby::set_loot_generated(::google::protobuf::uint32 value) {
  set_has_loot_generated();
  loot_generated_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.loot_generated)
}

// optional uint32 loot_awarded = 50;
inline bool CSODOTALobby::has_loot_awarded() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CSODOTALobby::set_has_loot_awarded() {
  _has_bits_[1] |= 0x00000040u;
}
inline void CSODOTALobby::clear_has_loot_awarded() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void CSODOTALobby::clear_loot_awarded() {
  loot_awarded_ = 0u;
  clear_has_loot_awarded();
}
inline ::google::protobuf::uint32 CSODOTALobby::loot_awarded() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.loot_awarded)
  return loot_awarded_;
}
inline void CSODOTALobby::set_loot_awarded(::google::protobuf::uint32 value) {
  set_has_loot_awarded();
  loot_awarded_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.loot_awarded)
}

// optional bool allchat = 51 [default = false];
inline bool CSODOTALobby::has_allchat() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CSODOTALobby::set_has_allchat() {
  _has_bits_[1] |= 0x00000080u;
}
inline void CSODOTALobby::clear_has_allchat() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void CSODOTALobby::clear_allchat() {
  allchat_ = false;
  clear_has_allchat();
}
inline bool CSODOTALobby::allchat() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.allchat)
  return allchat_;
}
inline void CSODOTALobby::set_allchat(bool value) {
  set_has_allchat();
  allchat_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.allchat)
}

// optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
inline bool CSODOTALobby::has_dota_tv_delay() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CSODOTALobby::set_has_dota_tv_delay() {
  _has_bits_[1] |= 0x00000100u;
}
inline void CSODOTALobby::clear_has_dota_tv_delay() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void CSODOTALobby::clear_dota_tv_delay() {
  dota_tv_delay_ = 0;
  clear_has_dota_tv_delay();
}
inline ::LobbyDotaTVDelay CSODOTALobby::dota_tv_delay() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.dota_tv_delay)
  return static_cast< ::LobbyDotaTVDelay >(dota_tv_delay_);
}
inline void CSODOTALobby::set_dota_tv_delay(::LobbyDotaTVDelay value) {
  assert(::LobbyDotaTVDelay_IsValid(value));
  set_has_dota_tv_delay();
  dota_tv_delay_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.dota_tv_delay)
}

// optional string custom_game_mode = 54;
inline bool CSODOTALobby::has_custom_game_mode() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CSODOTALobby::set_has_custom_game_mode() {
  _has_bits_[1] |= 0x00000200u;
}
inline void CSODOTALobby::clear_has_custom_game_mode() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void CSODOTALobby::clear_custom_game_mode() {
  if (custom_game_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_game_mode_->clear();
  }
  clear_has_custom_game_mode();
}
inline const ::std::string& CSODOTALobby::custom_game_mode() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_mode)
  return *custom_game_mode_;
}
inline void CSODOTALobby::set_custom_game_mode(const ::std::string& value) {
  set_has_custom_game_mode();
  if (custom_game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_game_mode_ = new ::std::string;
  }
  custom_game_mode_->assign(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_mode)
}
inline void CSODOTALobby::set_custom_game_mode(const char* value) {
  set_has_custom_game_mode();
  if (custom_game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_game_mode_ = new ::std::string;
  }
  custom_game_mode_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.custom_game_mode)
}
inline void CSODOTALobby::set_custom_game_mode(const char* value, size_t size) {
  set_has_custom_game_mode();
  if (custom_game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_game_mode_ = new ::std::string;
  }
  custom_game_mode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.custom_game_mode)
}
inline ::std::string* CSODOTALobby::mutable_custom_game_mode() {
  set_has_custom_game_mode();
  if (custom_game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_game_mode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.custom_game_mode)
  return custom_game_mode_;
}
inline ::std::string* CSODOTALobby::release_custom_game_mode() {
  clear_has_custom_game_mode();
  if (custom_game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = custom_game_mode_;
    custom_game_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSODOTALobby::set_allocated_custom_game_mode(::std::string* custom_game_mode) {
  if (custom_game_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete custom_game_mode_;
  }
  if (custom_game_mode) {
    set_has_custom_game_mode();
    custom_game_mode_ = custom_game_mode;
  } else {
    clear_has_custom_game_mode();
    custom_game_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.custom_game_mode)
}

// optional string custom_map_name = 55;
inline bool CSODOTALobby::has_custom_map_name() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CSODOTALobby::set_has_custom_map_name() {
  _has_bits_[1] |= 0x00000400u;
}
inline void CSODOTALobby::clear_has_custom_map_name() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void CSODOTALobby::clear_custom_map_name() {
  if (custom_map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_map_name_->clear();
  }
  clear_has_custom_map_name();
}
inline const ::std::string& CSODOTALobby::custom_map_name() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_map_name)
  return *custom_map_name_;
}
inline void CSODOTALobby::set_custom_map_name(const ::std::string& value) {
  set_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_map_name_ = new ::std::string;
  }
  custom_map_name_->assign(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_map_name)
}
inline void CSODOTALobby::set_custom_map_name(const char* value) {
  set_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_map_name_ = new ::std::string;
  }
  custom_map_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.custom_map_name)
}
inline void CSODOTALobby::set_custom_map_name(const char* value, size_t size) {
  set_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_map_name_ = new ::std::string;
  }
  custom_map_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.custom_map_name)
}
inline ::std::string* CSODOTALobby::mutable_custom_map_name() {
  set_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_map_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.custom_map_name)
  return custom_map_name_;
}
inline ::std::string* CSODOTALobby::release_custom_map_name() {
  clear_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = custom_map_name_;
    custom_map_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSODOTALobby::set_allocated_custom_map_name(::std::string* custom_map_name) {
  if (custom_map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete custom_map_name_;
  }
  if (custom_map_name) {
    set_has_custom_map_name();
    custom_map_name_ = custom_map_name;
  } else {
    clear_has_custom_map_name();
    custom_map_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.custom_map_name)
}

// optional uint32 custom_difficulty = 56;
inline bool CSODOTALobby::has_custom_difficulty() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void CSODOTALobby::set_has_custom_difficulty() {
  _has_bits_[1] |= 0x00000800u;
}
inline void CSODOTALobby::clear_has_custom_difficulty() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void CSODOTALobby::clear_custom_difficulty() {
  custom_difficulty_ = 0u;
  clear_has_custom_difficulty();
}
inline ::google::protobuf::uint32 CSODOTALobby::custom_difficulty() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_difficulty)
  return custom_difficulty_;
}
inline void CSODOTALobby::set_custom_difficulty(::google::protobuf::uint32 value) {
  set_has_custom_difficulty();
  custom_difficulty_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_difficulty)
}

// optional bool lan = 57;
inline bool CSODOTALobby::has_lan() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void CSODOTALobby::set_has_lan() {
  _has_bits_[1] |= 0x00001000u;
}
inline void CSODOTALobby::clear_has_lan() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void CSODOTALobby::clear_lan() {
  lan_ = false;
  clear_has_lan();
}
inline bool CSODOTALobby::lan() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.lan)
  return lan_;
}
inline void CSODOTALobby::set_lan(bool value) {
  set_has_lan();
  lan_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.lan)
}

// repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
inline int CSODOTALobby::broadcast_channel_info_size() const {
  return broadcast_channel_info_.size();
}
inline void CSODOTALobby::clear_broadcast_channel_info() {
  broadcast_channel_info_.Clear();
}
inline const ::CLobbyBroadcastChannelInfo& CSODOTALobby::broadcast_channel_info(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.broadcast_channel_info)
  return broadcast_channel_info_.Get(index);
}
inline ::CLobbyBroadcastChannelInfo* CSODOTALobby::mutable_broadcast_channel_info(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.broadcast_channel_info)
  return broadcast_channel_info_.Mutable(index);
}
inline ::CLobbyBroadcastChannelInfo* CSODOTALobby::add_broadcast_channel_info() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.broadcast_channel_info)
  return broadcast_channel_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CLobbyBroadcastChannelInfo >&
CSODOTALobby::broadcast_channel_info() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.broadcast_channel_info)
  return broadcast_channel_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::CLobbyBroadcastChannelInfo >*
CSODOTALobby::mutable_broadcast_channel_info() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.broadcast_channel_info)
  return &broadcast_channel_info_;
}

// optional uint32 first_leaver_accountid = 59;
inline bool CSODOTALobby::has_first_leaver_accountid() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void CSODOTALobby::set_has_first_leaver_accountid() {
  _has_bits_[1] |= 0x00004000u;
}
inline void CSODOTALobby::clear_has_first_leaver_accountid() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void CSODOTALobby::clear_first_leaver_accountid() {
  first_leaver_accountid_ = 0u;
  clear_has_first_leaver_accountid();
}
inline ::google::protobuf::uint32 CSODOTALobby::first_leaver_accountid() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.first_leaver_accountid)
  return first_leaver_accountid_;
}
inline void CSODOTALobby::set_first_leaver_accountid(::google::protobuf::uint32 value) {
  set_has_first_leaver_accountid();
  first_leaver_accountid_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.first_leaver_accountid)
}

// optional uint32 series_id = 60;
inline bool CSODOTALobby::has_series_id() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void CSODOTALobby::set_has_series_id() {
  _has_bits_[1] |= 0x00008000u;
}
inline void CSODOTALobby::clear_has_series_id() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void CSODOTALobby::clear_series_id() {
  series_id_ = 0u;
  clear_has_series_id();
}
inline ::google::protobuf::uint32 CSODOTALobby::series_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.series_id)
  return series_id_;
}
inline void CSODOTALobby::set_series_id(::google::protobuf::uint32 value) {
  set_has_series_id();
  series_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.series_id)
}

// optional bool low_priority = 61;
inline bool CSODOTALobby::has_low_priority() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void CSODOTALobby::set_has_low_priority() {
  _has_bits_[1] |= 0x00010000u;
}
inline void CSODOTALobby::clear_has_low_priority() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void CSODOTALobby::clear_low_priority() {
  low_priority_ = false;
  clear_has_low_priority();
}
inline bool CSODOTALobby::low_priority() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.low_priority)
  return low_priority_;
}
inline void CSODOTALobby::set_low_priority(bool value) {
  set_has_low_priority();
  low_priority_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.low_priority)
}

// repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
inline int CSODOTALobby::extra_messages_size() const {
  return extra_messages_.size();
}
inline void CSODOTALobby::clear_extra_messages() {
  extra_messages_.Clear();
}
inline const ::CSODOTALobby_CExtraMsg& CSODOTALobby::extra_messages(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.extra_messages)
  return extra_messages_.Get(index);
}
inline ::CSODOTALobby_CExtraMsg* CSODOTALobby::mutable_extra_messages(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.extra_messages)
  return extra_messages_.Mutable(index);
}
inline ::CSODOTALobby_CExtraMsg* CSODOTALobby::add_extra_messages() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.extra_messages)
  return extra_messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSODOTALobby_CExtraMsg >&
CSODOTALobby::extra_messages() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.extra_messages)
  return extra_messages_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSODOTALobby_CExtraMsg >*
CSODOTALobby::mutable_extra_messages() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.extra_messages)
  return &extra_messages_;
}

// optional .CDOTASaveGame save_game = 63;
inline bool CSODOTALobby::has_save_game() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void CSODOTALobby::set_has_save_game() {
  _has_bits_[1] |= 0x00040000u;
}
inline void CSODOTALobby::clear_has_save_game() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void CSODOTALobby::clear_save_game() {
  if (save_game_ != NULL) save_game_->::CDOTASaveGame::Clear();
  clear_has_save_game();
}
inline const ::CDOTASaveGame& CSODOTALobby::save_game() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.save_game)
  return save_game_ != NULL ? *save_game_ : *default_instance_->save_game_;
}
inline ::CDOTASaveGame* CSODOTALobby::mutable_save_game() {
  set_has_save_game();
  if (save_game_ == NULL) save_game_ = new ::CDOTASaveGame;
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.save_game)
  return save_game_;
}
inline ::CDOTASaveGame* CSODOTALobby::release_save_game() {
  clear_has_save_game();
  ::CDOTASaveGame* temp = save_game_;
  save_game_ = NULL;
  return temp;
}
inline void CSODOTALobby::set_allocated_save_game(::CDOTASaveGame* save_game) {
  delete save_game_;
  save_game_ = save_game;
  if (save_game) {
    set_has_save_game();
  } else {
    clear_has_save_game();
  }
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.save_game)
}

// optional bool first_blood_happened = 65;
inline bool CSODOTALobby::has_first_blood_happened() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void CSODOTALobby::set_has_first_blood_happened() {
  _has_bits_[1] |= 0x00080000u;
}
inline void CSODOTALobby::clear_has_first_blood_happened() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void CSODOTALobby::clear_first_blood_happened() {
  first_blood_happened_ = false;
  clear_has_first_blood_happened();
}
inline bool CSODOTALobby::first_blood_happened() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.first_blood_happened)
  return first_blood_happened_;
}
inline void CSODOTALobby::set_first_blood_happened(bool value) {
  set_has_first_blood_happened();
  first_blood_happened_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.first_blood_happened)
}

// optional .EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
inline bool CSODOTALobby::has_match_outcome() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void CSODOTALobby::set_has_match_outcome() {
  _has_bits_[1] |= 0x00100000u;
}
inline void CSODOTALobby::clear_has_match_outcome() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void CSODOTALobby::clear_match_outcome() {
  match_outcome_ = 0;
  clear_has_match_outcome();
}
inline ::EMatchOutcome CSODOTALobby::match_outcome() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.match_outcome)
  return static_cast< ::EMatchOutcome >(match_outcome_);
}
inline void CSODOTALobby::set_match_outcome(::EMatchOutcome value) {
  assert(::EMatchOutcome_IsValid(value));
  set_has_match_outcome();
  match_outcome_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.match_outcome)
}

// optional bool mass_disconnect = 67;
inline bool CSODOTALobby::has_mass_disconnect() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void CSODOTALobby::set_has_mass_disconnect() {
  _has_bits_[1] |= 0x00200000u;
}
inline void CSODOTALobby::clear_has_mass_disconnect() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void CSODOTALobby::clear_mass_disconnect() {
  mass_disconnect_ = false;
  clear_has_mass_disconnect();
}
inline bool CSODOTALobby::mass_disconnect() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.mass_disconnect)
  return mass_disconnect_;
}
inline void CSODOTALobby::set_mass_disconnect(bool value) {
  set_has_mass_disconnect();
  mass_disconnect_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.mass_disconnect)
}

// optional uint64 custom_game_id = 68;
inline bool CSODOTALobby::has_custom_game_id() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void CSODOTALobby::set_has_custom_game_id() {
  _has_bits_[1] |= 0x00400000u;
}
inline void CSODOTALobby::clear_has_custom_game_id() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void CSODOTALobby::clear_custom_game_id() {
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_id();
}
inline ::google::protobuf::uint64 CSODOTALobby::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_id)
  return custom_game_id_;
}
inline void CSODOTALobby::set_custom_game_id(::google::protobuf::uint64 value) {
  set_has_custom_game_id();
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_id)
}

// repeated .EEvent active_ingame_events = 69;
inline int CSODOTALobby::active_ingame_events_size() const {
  return active_ingame_events_.size();
}
inline void CSODOTALobby::clear_active_ingame_events() {
  active_ingame_events_.Clear();
}
inline ::EEvent CSODOTALobby::active_ingame_events(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.active_ingame_events)
  return static_cast< ::EEvent >(active_ingame_events_.Get(index));
}
inline void CSODOTALobby::set_active_ingame_events(int index, ::EEvent value) {
  assert(::EEvent_IsValid(value));
  active_ingame_events_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.active_ingame_events)
}
inline void CSODOTALobby::add_active_ingame_events(::EEvent value) {
  assert(::EEvent_IsValid(value));
  active_ingame_events_.Add(value);
  // @@protoc_insertion_point(field_add:CSODOTALobby.active_ingame_events)
}
inline const ::google::protobuf::RepeatedField<int>&
CSODOTALobby::active_ingame_events() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.active_ingame_events)
  return active_ingame_events_;
}
inline ::google::protobuf::RepeatedField<int>*
CSODOTALobby::mutable_active_ingame_events() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.active_ingame_events)
  return &active_ingame_events_;
}

// optional uint32 custom_min_players = 71;
inline bool CSODOTALobby::has_custom_min_players() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void CSODOTALobby::set_has_custom_min_players() {
  _has_bits_[1] |= 0x01000000u;
}
inline void CSODOTALobby::clear_has_custom_min_players() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void CSODOTALobby::clear_custom_min_players() {
  custom_min_players_ = 0u;
  clear_has_custom_min_players();
}
inline ::google::protobuf::uint32 CSODOTALobby::custom_min_players() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_min_players)
  return custom_min_players_;
}
inline void CSODOTALobby::set_custom_min_players(::google::protobuf::uint32 value) {
  set_has_custom_min_players();
  custom_min_players_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_min_players)
}

// optional uint32 custom_max_players = 72;
inline bool CSODOTALobby::has_custom_max_players() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void CSODOTALobby::set_has_custom_max_players() {
  _has_bits_[1] |= 0x02000000u;
}
inline void CSODOTALobby::clear_has_custom_max_players() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void CSODOTALobby::clear_custom_max_players() {
  custom_max_players_ = 0u;
  clear_has_custom_max_players();
}
inline ::google::protobuf::uint32 CSODOTALobby::custom_max_players() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_max_players)
  return custom_max_players_;
}
inline void CSODOTALobby::set_custom_max_players(::google::protobuf::uint32 value) {
  set_has_custom_max_players();
  custom_max_players_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_max_players)
}

// optional .PartnerAccountType partner_type = 73 [default = PARTNER_NONE];
inline bool CSODOTALobby::has_partner_type() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void CSODOTALobby::set_has_partner_type() {
  _has_bits_[1] |= 0x04000000u;
}
inline void CSODOTALobby::clear_has_partner_type() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void CSODOTALobby::clear_partner_type() {
  partner_type_ = 0;
  clear_has_partner_type();
}
inline ::PartnerAccountType CSODOTALobby::partner_type() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.partner_type)
  return static_cast< ::PartnerAccountType >(partner_type_);
}
inline void CSODOTALobby::set_partner_type(::PartnerAccountType value) {
  assert(::PartnerAccountType_IsValid(value));
  set_has_partner_type();
  partner_type_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.partner_type)
}

// optional uint32 lan_host_ping_to_server_region = 74;
inline bool CSODOTALobby::has_lan_host_ping_to_server_region() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void CSODOTALobby::set_has_lan_host_ping_to_server_region() {
  _has_bits_[1] |= 0x08000000u;
}
inline void CSODOTALobby::clear_has_lan_host_ping_to_server_region() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void CSODOTALobby::clear_lan_host_ping_to_server_region() {
  lan_host_ping_to_server_region_ = 0u;
  clear_has_lan_host_ping_to_server_region();
}
inline ::google::protobuf::uint32 CSODOTALobby::lan_host_ping_to_server_region() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.lan_host_ping_to_server_region)
  return lan_host_ping_to_server_region_;
}
inline void CSODOTALobby::set_lan_host_ping_to_server_region(::google::protobuf::uint32 value) {
  set_has_lan_host_ping_to_server_region();
  lan_host_ping_to_server_region_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.lan_host_ping_to_server_region)
}

// optional .DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
inline bool CSODOTALobby::has_visibility() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void CSODOTALobby::set_has_visibility() {
  _has_bits_[1] |= 0x10000000u;
}
inline void CSODOTALobby::clear_has_visibility() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void CSODOTALobby::clear_visibility() {
  visibility_ = 0;
  clear_has_visibility();
}
inline ::DOTALobbyVisibility CSODOTALobby::visibility() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.visibility)
  return static_cast< ::DOTALobbyVisibility >(visibility_);
}
inline void CSODOTALobby::set_visibility(::DOTALobbyVisibility value) {
  assert(::DOTALobbyVisibility_IsValid(value));
  set_has_visibility();
  visibility_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.visibility)
}

// optional fixed64 custom_game_crc = 76;
inline bool CSODOTALobby::has_custom_game_crc() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void CSODOTALobby::set_has_custom_game_crc() {
  _has_bits_[1] |= 0x20000000u;
}
inline void CSODOTALobby::clear_has_custom_game_crc() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void CSODOTALobby::clear_custom_game_crc() {
  custom_game_crc_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_crc();
}
inline ::google::protobuf::uint64 CSODOTALobby::custom_game_crc() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_crc)
  return custom_game_crc_;
}
inline void CSODOTALobby::set_custom_game_crc(::google::protobuf::uint64 value) {
  set_has_custom_game_crc();
  custom_game_crc_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_crc)
}

// optional bool custom_game_auto_created_lobby = 77;
inline bool CSODOTALobby::has_custom_game_auto_created_lobby() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void CSODOTALobby::set_has_custom_game_auto_created_lobby() {
  _has_bits_[1] |= 0x40000000u;
}
inline void CSODOTALobby::clear_has_custom_game_auto_created_lobby() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void CSODOTALobby::clear_custom_game_auto_created_lobby() {
  custom_game_auto_created_lobby_ = false;
  clear_has_custom_game_auto_created_lobby();
}
inline bool CSODOTALobby::custom_game_auto_created_lobby() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_auto_created_lobby)
  return custom_game_auto_created_lobby_;
}
inline void CSODOTALobby::set_custom_game_auto_created_lobby(bool value) {
  set_has_custom_game_auto_created_lobby();
  custom_game_auto_created_lobby_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_auto_created_lobby)
}

// optional uint32 league_series_id = 78;
inline bool CSODOTALobby::has_league_series_id() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void CSODOTALobby::set_has_league_series_id() {
  _has_bits_[1] |= 0x80000000u;
}
inline void CSODOTALobby::clear_has_league_series_id() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void CSODOTALobby::clear_league_series_id() {
  league_series_id_ = 0u;
  clear_has_league_series_id();
}
inline ::google::protobuf::uint32 CSODOTALobby::league_series_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.league_series_id)
  return league_series_id_;
}
inline void CSODOTALobby::set_league_series_id(::google::protobuf::uint32 value) {
  set_has_league_series_id();
  league_series_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.league_series_id)
}

// optional uint32 league_game_id = 79;
inline bool CSODOTALobby::has_league_game_id() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void CSODOTALobby::set_has_league_game_id() {
  _has_bits_[2] |= 0x00000001u;
}
inline void CSODOTALobby::clear_has_league_game_id() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void CSODOTALobby::clear_league_game_id() {
  league_game_id_ = 0u;
  clear_has_league_game_id();
}
inline ::google::protobuf::uint32 CSODOTALobby::league_game_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.league_game_id)
  return league_game_id_;
}
inline void CSODOTALobby::set_league_game_id(::google::protobuf::uint32 value) {
  set_has_league_game_id();
  league_game_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.league_game_id)
}

// optional fixed32 custom_game_timestamp = 80;
inline bool CSODOTALobby::has_custom_game_timestamp() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void CSODOTALobby::set_has_custom_game_timestamp() {
  _has_bits_[2] |= 0x00000002u;
}
inline void CSODOTALobby::clear_has_custom_game_timestamp() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void CSODOTALobby::clear_custom_game_timestamp() {
  custom_game_timestamp_ = 0u;
  clear_has_custom_game_timestamp();
}
inline ::google::protobuf::uint32 CSODOTALobby::custom_game_timestamp() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_timestamp)
  return custom_game_timestamp_;
}
inline void CSODOTALobby::set_custom_game_timestamp(::google::protobuf::uint32 value) {
  set_has_custom_game_timestamp();
  custom_game_timestamp_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_timestamp)
}

// -------------------------------------------------------------------

// CMsgLobbyEventPoints_AccountPoints

// optional uint32 account_id = 1;
inline bool CMsgLobbyEventPoints_AccountPoints::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.account_id)
  return account_id_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.account_id)
}

// optional uint32 normal_points = 2;
inline bool CMsgLobbyEventPoints_AccountPoints::has_normal_points() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_has_normal_points() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_has_normal_points() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_normal_points() {
  normal_points_ = 0u;
  clear_has_normal_points();
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::normal_points() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.normal_points)
  return normal_points_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_normal_points(::google::protobuf::uint32 value) {
  set_has_normal_points();
  normal_points_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.normal_points)
}

// optional uint32 premium_points = 3;
inline bool CMsgLobbyEventPoints_AccountPoints::has_premium_points() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_has_premium_points() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_has_premium_points() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_premium_points() {
  premium_points_ = 0u;
  clear_has_premium_points();
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::premium_points() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.premium_points)
  return premium_points_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_premium_points(::google::protobuf::uint32 value) {
  set_has_premium_points();
  premium_points_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.premium_points)
}

// optional bool owned = 4;
inline bool CMsgLobbyEventPoints_AccountPoints::has_owned() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_has_owned() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_has_owned() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_owned() {
  owned_ = false;
  clear_has_owned();
}
inline bool CMsgLobbyEventPoints_AccountPoints::owned() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.owned)
  return owned_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_owned(bool value) {
  set_has_owned();
  owned_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.owned)
}

// optional uint32 favorite_team = 5;
inline bool CMsgLobbyEventPoints_AccountPoints::has_favorite_team() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_has_favorite_team() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_has_favorite_team() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_favorite_team() {
  favorite_team_ = 0u;
  clear_has_favorite_team();
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::favorite_team() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.favorite_team)
  return favorite_team_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_favorite_team(::google::protobuf::uint32 value) {
  set_has_favorite_team();
  favorite_team_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.favorite_team)
}

// optional uint32 favorite_team_level = 6;
inline bool CMsgLobbyEventPoints_AccountPoints::has_favorite_team_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_has_favorite_team_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_has_favorite_team_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_favorite_team_level() {
  favorite_team_level_ = 0u;
  clear_has_favorite_team_level();
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::favorite_team_level() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.favorite_team_level)
  return favorite_team_level_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_favorite_team_level(::google::protobuf::uint32 value) {
  set_has_favorite_team_level();
  favorite_team_level_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.favorite_team_level)
}

// optional uint32 points_held = 7;
inline bool CMsgLobbyEventPoints_AccountPoints::has_points_held() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_has_points_held() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_has_points_held() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_points_held() {
  points_held_ = 0u;
  clear_has_points_held();
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::points_held() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.points_held)
  return points_held_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_points_held(::google::protobuf::uint32 value) {
  set_has_points_held();
  points_held_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.points_held)
}

// optional uint32 premium_points_held = 8;
inline bool CMsgLobbyEventPoints_AccountPoints::has_premium_points_held() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_has_premium_points_held() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_has_premium_points_held() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_premium_points_held() {
  premium_points_held_ = 0u;
  clear_has_premium_points_held();
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::premium_points_held() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.premium_points_held)
  return premium_points_held_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_premium_points_held(::google::protobuf::uint32 value) {
  set_has_premium_points_held();
  premium_points_held_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.premium_points_held)
}

// optional uint32 favorite_team_foil_level = 9;
inline bool CMsgLobbyEventPoints_AccountPoints::has_favorite_team_foil_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_has_favorite_team_foil_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_has_favorite_team_foil_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_favorite_team_foil_level() {
  favorite_team_foil_level_ = 0u;
  clear_has_favorite_team_foil_level();
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::favorite_team_foil_level() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.favorite_team_foil_level)
  return favorite_team_foil_level_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_favorite_team_foil_level(::google::protobuf::uint32 value) {
  set_has_favorite_team_foil_level();
  favorite_team_foil_level_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.favorite_team_foil_level)
}

// -------------------------------------------------------------------

// CMsgLobbyEventPoints

// optional uint32 event_id = 1;
inline bool CMsgLobbyEventPoints::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgLobbyEventPoints::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgLobbyEventPoints::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgLobbyEventPoints::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.event_id)
  return event_id_;
}
inline void CMsgLobbyEventPoints::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.event_id)
}

// repeated .CMsgLobbyEventPoints.AccountPoints account_points = 2;
inline int CMsgLobbyEventPoints::account_points_size() const {
  return account_points_.size();
}
inline void CMsgLobbyEventPoints::clear_account_points() {
  account_points_.Clear();
}
inline const ::CMsgLobbyEventPoints_AccountPoints& CMsgLobbyEventPoints::account_points(int index) const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.account_points)
  return account_points_.Get(index);
}
inline ::CMsgLobbyEventPoints_AccountPoints* CMsgLobbyEventPoints::mutable_account_points(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgLobbyEventPoints.account_points)
  return account_points_.Mutable(index);
}
inline ::CMsgLobbyEventPoints_AccountPoints* CMsgLobbyEventPoints::add_account_points() {
  // @@protoc_insertion_point(field_add:CMsgLobbyEventPoints.account_points)
  return account_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgLobbyEventPoints_AccountPoints >&
CMsgLobbyEventPoints::account_points() const {
  // @@protoc_insertion_point(field_list:CMsgLobbyEventPoints.account_points)
  return account_points_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgLobbyEventPoints_AccountPoints >*
CMsgLobbyEventPoints::mutable_account_points() {
  // @@protoc_insertion_point(field_mutable_list:CMsgLobbyEventPoints.account_points)
  return &account_points_;
}

// -------------------------------------------------------------------

// CMsgDOTAGenericResult

// optional uint32 eresult = 1 [default = 2];
inline bool CMsgDOTAGenericResult::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGenericResult::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGenericResult::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGenericResult::clear_eresult() {
  eresult_ = 2u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgDOTAGenericResult::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGenericResult.eresult)
  return eresult_;
}
inline void CMsgDOTAGenericResult::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGenericResult.eresult)
}

// -------------------------------------------------------------------

// CMsgDOTABroadcastNotification

// optional string message = 1;
inline bool CMsgDOTABroadcastNotification::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTABroadcastNotification::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTABroadcastNotification::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTABroadcastNotification::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& CMsgDOTABroadcastNotification::message() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABroadcastNotification.message)
  return *message_;
}
inline void CMsgDOTABroadcastNotification::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABroadcastNotification.message)
}
inline void CMsgDOTABroadcastNotification::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTABroadcastNotification.message)
}
inline void CMsgDOTABroadcastNotification::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTABroadcastNotification.message)
}
inline ::std::string* CMsgDOTABroadcastNotification::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTABroadcastNotification.message)
  return message_;
}
inline ::std::string* CMsgDOTABroadcastNotification::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTABroadcastNotification::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTABroadcastNotification.message)
}

// -------------------------------------------------------------------

// CMsgDOTAPCBangTimedReward

// optional string persona = 1;
inline bool CMsgDOTAPCBangTimedReward::has_persona() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAPCBangTimedReward::set_has_persona() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAPCBangTimedReward::clear_has_persona() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAPCBangTimedReward::clear_persona() {
  if (persona_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_->clear();
  }
  clear_has_persona();
}
inline const ::std::string& CMsgDOTAPCBangTimedReward::persona() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPCBangTimedReward.persona)
  return *persona_;
}
inline void CMsgDOTAPCBangTimedReward::set_persona(const ::std::string& value) {
  set_has_persona();
  if (persona_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_ = new ::std::string;
  }
  persona_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPCBangTimedReward.persona)
}
inline void CMsgDOTAPCBangTimedReward::set_persona(const char* value) {
  set_has_persona();
  if (persona_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_ = new ::std::string;
  }
  persona_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAPCBangTimedReward.persona)
}
inline void CMsgDOTAPCBangTimedReward::set_persona(const char* value, size_t size) {
  set_has_persona();
  if (persona_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_ = new ::std::string;
  }
  persona_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAPCBangTimedReward.persona)
}
inline ::std::string* CMsgDOTAPCBangTimedReward::mutable_persona() {
  set_has_persona();
  if (persona_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPCBangTimedReward.persona)
  return persona_;
}
inline ::std::string* CMsgDOTAPCBangTimedReward::release_persona() {
  clear_has_persona();
  if (persona_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = persona_;
    persona_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAPCBangTimedReward::set_allocated_persona(::std::string* persona) {
  if (persona_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete persona_;
  }
  if (persona) {
    set_has_persona();
    persona_ = persona;
  } else {
    clear_has_persona();
    persona_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPCBangTimedReward.persona)
}

// optional uint32 itemdef = 2;
inline bool CMsgDOTAPCBangTimedReward::has_itemdef() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAPCBangTimedReward::set_has_itemdef() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAPCBangTimedReward::clear_has_itemdef() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAPCBangTimedReward::clear_itemdef() {
  itemdef_ = 0u;
  clear_has_itemdef();
}
inline ::google::protobuf::uint32 CMsgDOTAPCBangTimedReward::itemdef() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPCBangTimedReward.itemdef)
  return itemdef_;
}
inline void CMsgDOTAPCBangTimedReward::set_itemdef(::google::protobuf::uint32 value) {
  set_has_itemdef();
  itemdef_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAPCBangTimedReward.itemdef)
}

// optional string pcbangname = 3;
inline bool CMsgDOTAPCBangTimedReward::has_pcbangname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAPCBangTimedReward::set_has_pcbangname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAPCBangTimedReward::clear_has_pcbangname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAPCBangTimedReward::clear_pcbangname() {
  if (pcbangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pcbangname_->clear();
  }
  clear_has_pcbangname();
}
inline const ::std::string& CMsgDOTAPCBangTimedReward::pcbangname() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPCBangTimedReward.pcbangname)
  return *pcbangname_;
}
inline void CMsgDOTAPCBangTimedReward::set_pcbangname(const ::std::string& value) {
  set_has_pcbangname();
  if (pcbangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pcbangname_ = new ::std::string;
  }
  pcbangname_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPCBangTimedReward.pcbangname)
}
inline void CMsgDOTAPCBangTimedReward::set_pcbangname(const char* value) {
  set_has_pcbangname();
  if (pcbangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pcbangname_ = new ::std::string;
  }
  pcbangname_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAPCBangTimedReward.pcbangname)
}
inline void CMsgDOTAPCBangTimedReward::set_pcbangname(const char* value, size_t size) {
  set_has_pcbangname();
  if (pcbangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pcbangname_ = new ::std::string;
  }
  pcbangname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAPCBangTimedReward.pcbangname)
}
inline ::std::string* CMsgDOTAPCBangTimedReward::mutable_pcbangname() {
  set_has_pcbangname();
  if (pcbangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pcbangname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPCBangTimedReward.pcbangname)
  return pcbangname_;
}
inline ::std::string* CMsgDOTAPCBangTimedReward::release_pcbangname() {
  clear_has_pcbangname();
  if (pcbangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pcbangname_;
    pcbangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAPCBangTimedReward::set_allocated_pcbangname(::std::string* pcbangname) {
  if (pcbangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pcbangname_;
  }
  if (pcbangname) {
    set_has_pcbangname();
    pcbangname_ = pcbangname;
  } else {
    clear_has_pcbangname();
    pcbangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPCBangTimedReward.pcbangname)
}

// -------------------------------------------------------------------

// CAttribute_String

// optional string value = 1;
inline bool CAttribute_String::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAttribute_String::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAttribute_String::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAttribute_String::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& CAttribute_String::value() const {
  // @@protoc_insertion_point(field_get:CAttribute_String.value)
  return *value_;
}
inline void CAttribute_String::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:CAttribute_String.value)
}
inline void CAttribute_String::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:CAttribute_String.value)
}
inline void CAttribute_String::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CAttribute_String.value)
}
inline ::std::string* CAttribute_String::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CAttribute_String.value)
  return value_;
}
inline ::std::string* CAttribute_String::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CAttribute_String::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CAttribute_String.value)
}

// -------------------------------------------------------------------

// CAttribute_ItemDynamicRecipeComponent

// optional uint32 item_def = 1;
inline bool CAttribute_ItemDynamicRecipeComponent::has_item_def() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_has_item_def() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_has_item_def() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_item_def() {
  item_def_ = 0u;
  clear_has_item_def();
}
inline ::google::protobuf::uint32 CAttribute_ItemDynamicRecipeComponent::item_def() const {
  // @@protoc_insertion_point(field_get:CAttribute_ItemDynamicRecipeComponent.item_def)
  return item_def_;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_item_def(::google::protobuf::uint32 value) {
  set_has_item_def();
  item_def_ = value;
  // @@protoc_insertion_point(field_set:CAttribute_ItemDynamicRecipeComponent.item_def)
}

// optional uint32 item_quality = 2;
inline bool CAttribute_ItemDynamicRecipeComponent::has_item_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_has_item_quality() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_has_item_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_item_quality() {
  item_quality_ = 0u;
  clear_has_item_quality();
}
inline ::google::protobuf::uint32 CAttribute_ItemDynamicRecipeComponent::item_quality() const {
  // @@protoc_insertion_point(field_get:CAttribute_ItemDynamicRecipeComponent.item_quality)
  return item_quality_;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_item_quality(::google::protobuf::uint32 value) {
  set_has_item_quality();
  item_quality_ = value;
  // @@protoc_insertion_point(field_set:CAttribute_ItemDynamicRecipeComponent.item_quality)
}

// optional uint32 item_flags = 3;
inline bool CAttribute_ItemDynamicRecipeComponent::has_item_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_has_item_flags() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_has_item_flags() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_item_flags() {
  item_flags_ = 0u;
  clear_has_item_flags();
}
inline ::google::protobuf::uint32 CAttribute_ItemDynamicRecipeComponent::item_flags() const {
  // @@protoc_insertion_point(field_get:CAttribute_ItemDynamicRecipeComponent.item_flags)
  return item_flags_;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_item_flags(::google::protobuf::uint32 value) {
  set_has_item_flags();
  item_flags_ = value;
  // @@protoc_insertion_point(field_set:CAttribute_ItemDynamicRecipeComponent.item_flags)
}

// optional string attributes_string = 4;
inline bool CAttribute_ItemDynamicRecipeComponent::has_attributes_string() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_has_attributes_string() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_has_attributes_string() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_attributes_string() {
  if (attributes_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attributes_string_->clear();
  }
  clear_has_attributes_string();
}
inline const ::std::string& CAttribute_ItemDynamicRecipeComponent::attributes_string() const {
  // @@protoc_insertion_point(field_get:CAttribute_ItemDynamicRecipeComponent.attributes_string)
  return *attributes_string_;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_attributes_string(const ::std::string& value) {
  set_has_attributes_string();
  if (attributes_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attributes_string_ = new ::std::string;
  }
  attributes_string_->assign(value);
  // @@protoc_insertion_point(field_set:CAttribute_ItemDynamicRecipeComponent.attributes_string)
}
inline void CAttribute_ItemDynamicRecipeComponent::set_attributes_string(const char* value) {
  set_has_attributes_string();
  if (attributes_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attributes_string_ = new ::std::string;
  }
  attributes_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:CAttribute_ItemDynamicRecipeComponent.attributes_string)
}
inline void CAttribute_ItemDynamicRecipeComponent::set_attributes_string(const char* value, size_t size) {
  set_has_attributes_string();
  if (attributes_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attributes_string_ = new ::std::string;
  }
  attributes_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CAttribute_ItemDynamicRecipeComponent.attributes_string)
}
inline ::std::string* CAttribute_ItemDynamicRecipeComponent::mutable_attributes_string() {
  set_has_attributes_string();
  if (attributes_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attributes_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CAttribute_ItemDynamicRecipeComponent.attributes_string)
  return attributes_string_;
}
inline ::std::string* CAttribute_ItemDynamicRecipeComponent::release_attributes_string() {
  clear_has_attributes_string();
  if (attributes_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attributes_string_;
    attributes_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CAttribute_ItemDynamicRecipeComponent::set_allocated_attributes_string(::std::string* attributes_string) {
  if (attributes_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attributes_string_;
  }
  if (attributes_string) {
    set_has_attributes_string();
    attributes_string_ = attributes_string;
  } else {
    clear_has_attributes_string();
    attributes_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CAttribute_ItemDynamicRecipeComponent.attributes_string)
}

// optional uint32 item_count = 5;
inline bool CAttribute_ItemDynamicRecipeComponent::has_item_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_has_item_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
inline ::google::protobuf::uint32 CAttribute_ItemDynamicRecipeComponent::item_count() const {
  // @@protoc_insertion_point(field_get:CAttribute_ItemDynamicRecipeComponent.item_count)
  return item_count_;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
  // @@protoc_insertion_point(field_set:CAttribute_ItemDynamicRecipeComponent.item_count)
}

// optional uint32 items_fulfilled = 6;
inline bool CAttribute_ItemDynamicRecipeComponent::has_items_fulfilled() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_has_items_fulfilled() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_has_items_fulfilled() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_items_fulfilled() {
  items_fulfilled_ = 0u;
  clear_has_items_fulfilled();
}
inline ::google::protobuf::uint32 CAttribute_ItemDynamicRecipeComponent::items_fulfilled() const {
  // @@protoc_insertion_point(field_get:CAttribute_ItemDynamicRecipeComponent.items_fulfilled)
  return items_fulfilled_;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_items_fulfilled(::google::protobuf::uint32 value) {
  set_has_items_fulfilled();
  items_fulfilled_ = value;
  // @@protoc_insertion_point(field_set:CAttribute_ItemDynamicRecipeComponent.items_fulfilled)
}

// optional uint32 item_rarity = 7;
inline bool CAttribute_ItemDynamicRecipeComponent::has_item_rarity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_has_item_rarity() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_has_item_rarity() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_item_rarity() {
  item_rarity_ = 0u;
  clear_has_item_rarity();
}
inline ::google::protobuf::uint32 CAttribute_ItemDynamicRecipeComponent::item_rarity() const {
  // @@protoc_insertion_point(field_get:CAttribute_ItemDynamicRecipeComponent.item_rarity)
  return item_rarity_;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_item_rarity(::google::protobuf::uint32 value) {
  set_has_item_rarity();
  item_rarity_ = value;
  // @@protoc_insertion_point(field_set:CAttribute_ItemDynamicRecipeComponent.item_rarity)
}

// optional string lootlist = 8;
inline bool CAttribute_ItemDynamicRecipeComponent::has_lootlist() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_has_lootlist() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_has_lootlist() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_lootlist() {
  if (lootlist_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lootlist_->clear();
  }
  clear_has_lootlist();
}
inline const ::std::string& CAttribute_ItemDynamicRecipeComponent::lootlist() const {
  // @@protoc_insertion_point(field_get:CAttribute_ItemDynamicRecipeComponent.lootlist)
  return *lootlist_;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_lootlist(const ::std::string& value) {
  set_has_lootlist();
  if (lootlist_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lootlist_ = new ::std::string;
  }
  lootlist_->assign(value);
  // @@protoc_insertion_point(field_set:CAttribute_ItemDynamicRecipeComponent.lootlist)
}
inline void CAttribute_ItemDynamicRecipeComponent::set_lootlist(const char* value) {
  set_has_lootlist();
  if (lootlist_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lootlist_ = new ::std::string;
  }
  lootlist_->assign(value);
  // @@protoc_insertion_point(field_set_char:CAttribute_ItemDynamicRecipeComponent.lootlist)
}
inline void CAttribute_ItemDynamicRecipeComponent::set_lootlist(const char* value, size_t size) {
  set_has_lootlist();
  if (lootlist_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lootlist_ = new ::std::string;
  }
  lootlist_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CAttribute_ItemDynamicRecipeComponent.lootlist)
}
inline ::std::string* CAttribute_ItemDynamicRecipeComponent::mutable_lootlist() {
  set_has_lootlist();
  if (lootlist_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lootlist_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CAttribute_ItemDynamicRecipeComponent.lootlist)
  return lootlist_;
}
inline ::std::string* CAttribute_ItemDynamicRecipeComponent::release_lootlist() {
  clear_has_lootlist();
  if (lootlist_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lootlist_;
    lootlist_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CAttribute_ItemDynamicRecipeComponent::set_allocated_lootlist(::std::string* lootlist) {
  if (lootlist_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lootlist_;
  }
  if (lootlist) {
    set_has_lootlist();
    lootlist_ = lootlist;
  } else {
    clear_has_lootlist();
    lootlist_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CAttribute_ItemDynamicRecipeComponent.lootlist)
}

// optional uint64 fulfilled_item_id = 9;
inline bool CAttribute_ItemDynamicRecipeComponent::has_fulfilled_item_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_has_fulfilled_item_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_has_fulfilled_item_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_fulfilled_item_id() {
  fulfilled_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_fulfilled_item_id();
}
inline ::google::protobuf::uint64 CAttribute_ItemDynamicRecipeComponent::fulfilled_item_id() const {
  // @@protoc_insertion_point(field_get:CAttribute_ItemDynamicRecipeComponent.fulfilled_item_id)
  return fulfilled_item_id_;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_fulfilled_item_id(::google::protobuf::uint64 value) {
  set_has_fulfilled_item_id();
  fulfilled_item_id_ = value;
  // @@protoc_insertion_point(field_set:CAttribute_ItemDynamicRecipeComponent.fulfilled_item_id)
}

// -------------------------------------------------------------------

// CProtoItemHeroStatue

// optional uint32 hero_id = 1;
inline bool CProtoItemHeroStatue::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProtoItemHeroStatue::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProtoItemHeroStatue::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProtoItemHeroStatue::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CProtoItemHeroStatue::hero_id() const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.hero_id)
  return hero_id_;
}
inline void CProtoItemHeroStatue::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.hero_id)
}

// optional uint32 status_effect_index = 2;
inline bool CProtoItemHeroStatue::has_status_effect_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProtoItemHeroStatue::set_has_status_effect_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProtoItemHeroStatue::clear_has_status_effect_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProtoItemHeroStatue::clear_status_effect_index() {
  status_effect_index_ = 0u;
  clear_has_status_effect_index();
}
inline ::google::protobuf::uint32 CProtoItemHeroStatue::status_effect_index() const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.status_effect_index)
  return status_effect_index_;
}
inline void CProtoItemHeroStatue::set_status_effect_index(::google::protobuf::uint32 value) {
  set_has_status_effect_index();
  status_effect_index_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.status_effect_index)
}

// optional string sequence_name = 3;
inline bool CProtoItemHeroStatue::has_sequence_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CProtoItemHeroStatue::set_has_sequence_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CProtoItemHeroStatue::clear_has_sequence_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CProtoItemHeroStatue::clear_sequence_name() {
  if (sequence_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sequence_name_->clear();
  }
  clear_has_sequence_name();
}
inline const ::std::string& CProtoItemHeroStatue::sequence_name() const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.sequence_name)
  return *sequence_name_;
}
inline void CProtoItemHeroStatue::set_sequence_name(const ::std::string& value) {
  set_has_sequence_name();
  if (sequence_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sequence_name_ = new ::std::string;
  }
  sequence_name_->assign(value);
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.sequence_name)
}
inline void CProtoItemHeroStatue::set_sequence_name(const char* value) {
  set_has_sequence_name();
  if (sequence_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sequence_name_ = new ::std::string;
  }
  sequence_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CProtoItemHeroStatue.sequence_name)
}
inline void CProtoItemHeroStatue::set_sequence_name(const char* value, size_t size) {
  set_has_sequence_name();
  if (sequence_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sequence_name_ = new ::std::string;
  }
  sequence_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CProtoItemHeroStatue.sequence_name)
}
inline ::std::string* CProtoItemHeroStatue::mutable_sequence_name() {
  set_has_sequence_name();
  if (sequence_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sequence_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CProtoItemHeroStatue.sequence_name)
  return sequence_name_;
}
inline ::std::string* CProtoItemHeroStatue::release_sequence_name() {
  clear_has_sequence_name();
  if (sequence_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sequence_name_;
    sequence_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CProtoItemHeroStatue::set_allocated_sequence_name(::std::string* sequence_name) {
  if (sequence_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sequence_name_;
  }
  if (sequence_name) {
    set_has_sequence_name();
    sequence_name_ = sequence_name;
  } else {
    clear_has_sequence_name();
    sequence_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemHeroStatue.sequence_name)
}

// optional float cycle = 4;
inline bool CProtoItemHeroStatue::has_cycle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CProtoItemHeroStatue::set_has_cycle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CProtoItemHeroStatue::clear_has_cycle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CProtoItemHeroStatue::clear_cycle() {
  cycle_ = 0;
  clear_has_cycle();
}
inline float CProtoItemHeroStatue::cycle() const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.cycle)
  return cycle_;
}
inline void CProtoItemHeroStatue::set_cycle(float value) {
  set_has_cycle();
  cycle_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.cycle)
}

// repeated uint32 wearable = 5;
inline int CProtoItemHeroStatue::wearable_size() const {
  return wearable_.size();
}
inline void CProtoItemHeroStatue::clear_wearable() {
  wearable_.Clear();
}
inline ::google::protobuf::uint32 CProtoItemHeroStatue::wearable(int index) const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.wearable)
  return wearable_.Get(index);
}
inline void CProtoItemHeroStatue::set_wearable(int index, ::google::protobuf::uint32 value) {
  wearable_.Set(index, value);
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.wearable)
}
inline void CProtoItemHeroStatue::add_wearable(::google::protobuf::uint32 value) {
  wearable_.Add(value);
  // @@protoc_insertion_point(field_add:CProtoItemHeroStatue.wearable)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CProtoItemHeroStatue::wearable() const {
  // @@protoc_insertion_point(field_list:CProtoItemHeroStatue.wearable)
  return wearable_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CProtoItemHeroStatue::mutable_wearable() {
  // @@protoc_insertion_point(field_mutable_list:CProtoItemHeroStatue.wearable)
  return &wearable_;
}

// optional string inscription = 6;
inline bool CProtoItemHeroStatue::has_inscription() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CProtoItemHeroStatue::set_has_inscription() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CProtoItemHeroStatue::clear_has_inscription() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CProtoItemHeroStatue::clear_inscription() {
  if (inscription_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inscription_->clear();
  }
  clear_has_inscription();
}
inline const ::std::string& CProtoItemHeroStatue::inscription() const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.inscription)
  return *inscription_;
}
inline void CProtoItemHeroStatue::set_inscription(const ::std::string& value) {
  set_has_inscription();
  if (inscription_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inscription_ = new ::std::string;
  }
  inscription_->assign(value);
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.inscription)
}
inline void CProtoItemHeroStatue::set_inscription(const char* value) {
  set_has_inscription();
  if (inscription_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inscription_ = new ::std::string;
  }
  inscription_->assign(value);
  // @@protoc_insertion_point(field_set_char:CProtoItemHeroStatue.inscription)
}
inline void CProtoItemHeroStatue::set_inscription(const char* value, size_t size) {
  set_has_inscription();
  if (inscription_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inscription_ = new ::std::string;
  }
  inscription_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CProtoItemHeroStatue.inscription)
}
inline ::std::string* CProtoItemHeroStatue::mutable_inscription() {
  set_has_inscription();
  if (inscription_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inscription_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CProtoItemHeroStatue.inscription)
  return inscription_;
}
inline ::std::string* CProtoItemHeroStatue::release_inscription() {
  clear_has_inscription();
  if (inscription_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = inscription_;
    inscription_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CProtoItemHeroStatue::set_allocated_inscription(::std::string* inscription) {
  if (inscription_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inscription_;
  }
  if (inscription) {
    set_has_inscription();
    inscription_ = inscription;
  } else {
    clear_has_inscription();
    inscription_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemHeroStatue.inscription)
}

// repeated uint32 style = 7;
inline int CProtoItemHeroStatue::style_size() const {
  return style_.size();
}
inline void CProtoItemHeroStatue::clear_style() {
  style_.Clear();
}
inline ::google::protobuf::uint32 CProtoItemHeroStatue::style(int index) const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.style)
  return style_.Get(index);
}
inline void CProtoItemHeroStatue::set_style(int index, ::google::protobuf::uint32 value) {
  style_.Set(index, value);
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.style)
}
inline void CProtoItemHeroStatue::add_style(::google::protobuf::uint32 value) {
  style_.Add(value);
  // @@protoc_insertion_point(field_add:CProtoItemHeroStatue.style)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CProtoItemHeroStatue::style() const {
  // @@protoc_insertion_point(field_list:CProtoItemHeroStatue.style)
  return style_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CProtoItemHeroStatue::mutable_style() {
  // @@protoc_insertion_point(field_mutable_list:CProtoItemHeroStatue.style)
  return &style_;
}

// optional bool tournament_drop = 8;
inline bool CProtoItemHeroStatue::has_tournament_drop() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CProtoItemHeroStatue::set_has_tournament_drop() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CProtoItemHeroStatue::clear_has_tournament_drop() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CProtoItemHeroStatue::clear_tournament_drop() {
  tournament_drop_ = false;
  clear_has_tournament_drop();
}
inline bool CProtoItemHeroStatue::tournament_drop() const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.tournament_drop)
  return tournament_drop_;
}
inline void CProtoItemHeroStatue::set_tournament_drop(bool value) {
  set_has_tournament_drop();
  tournament_drop_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.tournament_drop)
}

// -------------------------------------------------------------------

// CProtoItemTeamShowcase

// optional uint32 hero_id = 1;
inline bool CProtoItemTeamShowcase::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProtoItemTeamShowcase::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProtoItemTeamShowcase::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProtoItemTeamShowcase::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CProtoItemTeamShowcase::hero_id() const {
  // @@protoc_insertion_point(field_get:CProtoItemTeamShowcase.hero_id)
  return hero_id_;
}
inline void CProtoItemTeamShowcase::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemTeamShowcase.hero_id)
}

// optional uint32 status_effect_index = 2;
inline bool CProtoItemTeamShowcase::has_status_effect_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProtoItemTeamShowcase::set_has_status_effect_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProtoItemTeamShowcase::clear_has_status_effect_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProtoItemTeamShowcase::clear_status_effect_index() {
  status_effect_index_ = 0u;
  clear_has_status_effect_index();
}
inline ::google::protobuf::uint32 CProtoItemTeamShowcase::status_effect_index() const {
  // @@protoc_insertion_point(field_get:CProtoItemTeamShowcase.status_effect_index)
  return status_effect_index_;
}
inline void CProtoItemTeamShowcase::set_status_effect_index(::google::protobuf::uint32 value) {
  set_has_status_effect_index();
  status_effect_index_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemTeamShowcase.status_effect_index)
}

// optional string sequence_name = 3;
inline bool CProtoItemTeamShowcase::has_sequence_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CProtoItemTeamShowcase::set_has_sequence_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CProtoItemTeamShowcase::clear_has_sequence_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CProtoItemTeamShowcase::clear_sequence_name() {
  if (sequence_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sequence_name_->clear();
  }
  clear_has_sequence_name();
}
inline const ::std::string& CProtoItemTeamShowcase::sequence_name() const {
  // @@protoc_insertion_point(field_get:CProtoItemTeamShowcase.sequence_name)
  return *sequence_name_;
}
inline void CProtoItemTeamShowcase::set_sequence_name(const ::std::string& value) {
  set_has_sequence_name();
  if (sequence_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sequence_name_ = new ::std::string;
  }
  sequence_name_->assign(value);
  // @@protoc_insertion_point(field_set:CProtoItemTeamShowcase.sequence_name)
}
inline void CProtoItemTeamShowcase::set_sequence_name(const char* value) {
  set_has_sequence_name();
  if (sequence_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sequence_name_ = new ::std::string;
  }
  sequence_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CProtoItemTeamShowcase.sequence_name)
}
inline void CProtoItemTeamShowcase::set_sequence_name(const char* value, size_t size) {
  set_has_sequence_name();
  if (sequence_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sequence_name_ = new ::std::string;
  }
  sequence_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CProtoItemTeamShowcase.sequence_name)
}
inline ::std::string* CProtoItemTeamShowcase::mutable_sequence_name() {
  set_has_sequence_name();
  if (sequence_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sequence_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CProtoItemTeamShowcase.sequence_name)
  return sequence_name_;
}
inline ::std::string* CProtoItemTeamShowcase::release_sequence_name() {
  clear_has_sequence_name();
  if (sequence_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sequence_name_;
    sequence_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CProtoItemTeamShowcase::set_allocated_sequence_name(::std::string* sequence_name) {
  if (sequence_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sequence_name_;
  }
  if (sequence_name) {
    set_has_sequence_name();
    sequence_name_ = sequence_name;
  } else {
    clear_has_sequence_name();
    sequence_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemTeamShowcase.sequence_name)
}

// optional float cycle = 4;
inline bool CProtoItemTeamShowcase::has_cycle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CProtoItemTeamShowcase::set_has_cycle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CProtoItemTeamShowcase::clear_has_cycle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CProtoItemTeamShowcase::clear_cycle() {
  cycle_ = 0;
  clear_has_cycle();
}
inline float CProtoItemTeamShowcase::cycle() const {
  // @@protoc_insertion_point(field_get:CProtoItemTeamShowcase.cycle)
  return cycle_;
}
inline void CProtoItemTeamShowcase::set_cycle(float value) {
  set_has_cycle();
  cycle_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemTeamShowcase.cycle)
}

// repeated uint32 wearable = 5;
inline int CProtoItemTeamShowcase::wearable_size() const {
  return wearable_.size();
}
inline void CProtoItemTeamShowcase::clear_wearable() {
  wearable_.Clear();
}
inline ::google::protobuf::uint32 CProtoItemTeamShowcase::wearable(int index) const {
  // @@protoc_insertion_point(field_get:CProtoItemTeamShowcase.wearable)
  return wearable_.Get(index);
}
inline void CProtoItemTeamShowcase::set_wearable(int index, ::google::protobuf::uint32 value) {
  wearable_.Set(index, value);
  // @@protoc_insertion_point(field_set:CProtoItemTeamShowcase.wearable)
}
inline void CProtoItemTeamShowcase::add_wearable(::google::protobuf::uint32 value) {
  wearable_.Add(value);
  // @@protoc_insertion_point(field_add:CProtoItemTeamShowcase.wearable)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CProtoItemTeamShowcase::wearable() const {
  // @@protoc_insertion_point(field_list:CProtoItemTeamShowcase.wearable)
  return wearable_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CProtoItemTeamShowcase::mutable_wearable() {
  // @@protoc_insertion_point(field_mutable_list:CProtoItemTeamShowcase.wearable)
  return &wearable_;
}

// optional string inscription = 6;
inline bool CProtoItemTeamShowcase::has_inscription() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CProtoItemTeamShowcase::set_has_inscription() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CProtoItemTeamShowcase::clear_has_inscription() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CProtoItemTeamShowcase::clear_inscription() {
  if (inscription_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inscription_->clear();
  }
  clear_has_inscription();
}
inline const ::std::string& CProtoItemTeamShowcase::inscription() const {
  // @@protoc_insertion_point(field_get:CProtoItemTeamShowcase.inscription)
  return *inscription_;
}
inline void CProtoItemTeamShowcase::set_inscription(const ::std::string& value) {
  set_has_inscription();
  if (inscription_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inscription_ = new ::std::string;
  }
  inscription_->assign(value);
  // @@protoc_insertion_point(field_set:CProtoItemTeamShowcase.inscription)
}
inline void CProtoItemTeamShowcase::set_inscription(const char* value) {
  set_has_inscription();
  if (inscription_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inscription_ = new ::std::string;
  }
  inscription_->assign(value);
  // @@protoc_insertion_point(field_set_char:CProtoItemTeamShowcase.inscription)
}
inline void CProtoItemTeamShowcase::set_inscription(const char* value, size_t size) {
  set_has_inscription();
  if (inscription_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inscription_ = new ::std::string;
  }
  inscription_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CProtoItemTeamShowcase.inscription)
}
inline ::std::string* CProtoItemTeamShowcase::mutable_inscription() {
  set_has_inscription();
  if (inscription_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inscription_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CProtoItemTeamShowcase.inscription)
  return inscription_;
}
inline ::std::string* CProtoItemTeamShowcase::release_inscription() {
  clear_has_inscription();
  if (inscription_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = inscription_;
    inscription_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CProtoItemTeamShowcase::set_allocated_inscription(::std::string* inscription) {
  if (inscription_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inscription_;
  }
  if (inscription) {
    set_has_inscription();
    inscription_ = inscription;
  } else {
    clear_has_inscription();
    inscription_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemTeamShowcase.inscription)
}

// repeated uint32 style = 7;
inline int CProtoItemTeamShowcase::style_size() const {
  return style_.size();
}
inline void CProtoItemTeamShowcase::clear_style() {
  style_.Clear();
}
inline ::google::protobuf::uint32 CProtoItemTeamShowcase::style(int index) const {
  // @@protoc_insertion_point(field_get:CProtoItemTeamShowcase.style)
  return style_.Get(index);
}
inline void CProtoItemTeamShowcase::set_style(int index, ::google::protobuf::uint32 value) {
  style_.Set(index, value);
  // @@protoc_insertion_point(field_set:CProtoItemTeamShowcase.style)
}
inline void CProtoItemTeamShowcase::add_style(::google::protobuf::uint32 value) {
  style_.Add(value);
  // @@protoc_insertion_point(field_add:CProtoItemTeamShowcase.style)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CProtoItemTeamShowcase::style() const {
  // @@protoc_insertion_point(field_list:CProtoItemTeamShowcase.style)
  return style_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CProtoItemTeamShowcase::mutable_style() {
  // @@protoc_insertion_point(field_mutable_list:CProtoItemTeamShowcase.style)
  return &style_;
}

// -------------------------------------------------------------------

// CProtoItemSocket

// optional uint64 item_id = 1;
inline bool CProtoItemSocket::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProtoItemSocket::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProtoItemSocket::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProtoItemSocket::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
inline ::google::protobuf::uint64 CProtoItemSocket::item_id() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket.item_id)
  return item_id_;
}
inline void CProtoItemSocket::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket.item_id)
}

// optional uint32 attr_def_index = 2;
inline bool CProtoItemSocket::has_attr_def_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProtoItemSocket::set_has_attr_def_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProtoItemSocket::clear_has_attr_def_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProtoItemSocket::clear_attr_def_index() {
  attr_def_index_ = 0u;
  clear_has_attr_def_index();
}
inline ::google::protobuf::uint32 CProtoItemSocket::attr_def_index() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket.attr_def_index)
  return attr_def_index_;
}
inline void CProtoItemSocket::set_attr_def_index(::google::protobuf::uint32 value) {
  set_has_attr_def_index();
  attr_def_index_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket.attr_def_index)
}

// optional uint32 required_type = 3;
inline bool CProtoItemSocket::has_required_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CProtoItemSocket::set_has_required_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CProtoItemSocket::clear_has_required_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CProtoItemSocket::clear_required_type() {
  required_type_ = 0u;
  clear_has_required_type();
}
inline ::google::protobuf::uint32 CProtoItemSocket::required_type() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket.required_type)
  return required_type_;
}
inline void CProtoItemSocket::set_required_type(::google::protobuf::uint32 value) {
  set_has_required_type();
  required_type_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket.required_type)
}

// optional string required_hero = 4;
inline bool CProtoItemSocket::has_required_hero() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CProtoItemSocket::set_has_required_hero() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CProtoItemSocket::clear_has_required_hero() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CProtoItemSocket::clear_required_hero() {
  if (required_hero_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    required_hero_->clear();
  }
  clear_has_required_hero();
}
inline const ::std::string& CProtoItemSocket::required_hero() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket.required_hero)
  return *required_hero_;
}
inline void CProtoItemSocket::set_required_hero(const ::std::string& value) {
  set_has_required_hero();
  if (required_hero_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    required_hero_ = new ::std::string;
  }
  required_hero_->assign(value);
  // @@protoc_insertion_point(field_set:CProtoItemSocket.required_hero)
}
inline void CProtoItemSocket::set_required_hero(const char* value) {
  set_has_required_hero();
  if (required_hero_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    required_hero_ = new ::std::string;
  }
  required_hero_->assign(value);
  // @@protoc_insertion_point(field_set_char:CProtoItemSocket.required_hero)
}
inline void CProtoItemSocket::set_required_hero(const char* value, size_t size) {
  set_has_required_hero();
  if (required_hero_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    required_hero_ = new ::std::string;
  }
  required_hero_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CProtoItemSocket.required_hero)
}
inline ::std::string* CProtoItemSocket::mutable_required_hero() {
  set_has_required_hero();
  if (required_hero_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    required_hero_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CProtoItemSocket.required_hero)
  return required_hero_;
}
inline ::std::string* CProtoItemSocket::release_required_hero() {
  clear_has_required_hero();
  if (required_hero_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = required_hero_;
    required_hero_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CProtoItemSocket::set_allocated_required_hero(::std::string* required_hero) {
  if (required_hero_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete required_hero_;
  }
  if (required_hero) {
    set_has_required_hero();
    required_hero_ = required_hero;
  } else {
    clear_has_required_hero();
    required_hero_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemSocket.required_hero)
}

// optional uint32 gem_def_index = 5;
inline bool CProtoItemSocket::has_gem_def_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CProtoItemSocket::set_has_gem_def_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CProtoItemSocket::clear_has_gem_def_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CProtoItemSocket::clear_gem_def_index() {
  gem_def_index_ = 0u;
  clear_has_gem_def_index();
}
inline ::google::protobuf::uint32 CProtoItemSocket::gem_def_index() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket.gem_def_index)
  return gem_def_index_;
}
inline void CProtoItemSocket::set_gem_def_index(::google::protobuf::uint32 value) {
  set_has_gem_def_index();
  gem_def_index_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket.gem_def_index)
}

// optional bool not_tradable = 6;
inline bool CProtoItemSocket::has_not_tradable() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CProtoItemSocket::set_has_not_tradable() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CProtoItemSocket::clear_has_not_tradable() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CProtoItemSocket::clear_not_tradable() {
  not_tradable_ = false;
  clear_has_not_tradable();
}
inline bool CProtoItemSocket::not_tradable() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket.not_tradable)
  return not_tradable_;
}
inline void CProtoItemSocket::set_not_tradable(bool value) {
  set_has_not_tradable();
  not_tradable_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket.not_tradable)
}

// optional string required_item_slot = 7;
inline bool CProtoItemSocket::has_required_item_slot() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CProtoItemSocket::set_has_required_item_slot() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CProtoItemSocket::clear_has_required_item_slot() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CProtoItemSocket::clear_required_item_slot() {
  if (required_item_slot_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    required_item_slot_->clear();
  }
  clear_has_required_item_slot();
}
inline const ::std::string& CProtoItemSocket::required_item_slot() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket.required_item_slot)
  return *required_item_slot_;
}
inline void CProtoItemSocket::set_required_item_slot(const ::std::string& value) {
  set_has_required_item_slot();
  if (required_item_slot_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    required_item_slot_ = new ::std::string;
  }
  required_item_slot_->assign(value);
  // @@protoc_insertion_point(field_set:CProtoItemSocket.required_item_slot)
}
inline void CProtoItemSocket::set_required_item_slot(const char* value) {
  set_has_required_item_slot();
  if (required_item_slot_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    required_item_slot_ = new ::std::string;
  }
  required_item_slot_->assign(value);
  // @@protoc_insertion_point(field_set_char:CProtoItemSocket.required_item_slot)
}
inline void CProtoItemSocket::set_required_item_slot(const char* value, size_t size) {
  set_has_required_item_slot();
  if (required_item_slot_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    required_item_slot_ = new ::std::string;
  }
  required_item_slot_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CProtoItemSocket.required_item_slot)
}
inline ::std::string* CProtoItemSocket::mutable_required_item_slot() {
  set_has_required_item_slot();
  if (required_item_slot_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    required_item_slot_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CProtoItemSocket.required_item_slot)
  return required_item_slot_;
}
inline ::std::string* CProtoItemSocket::release_required_item_slot() {
  clear_has_required_item_slot();
  if (required_item_slot_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = required_item_slot_;
    required_item_slot_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CProtoItemSocket::set_allocated_required_item_slot(::std::string* required_item_slot) {
  if (required_item_slot_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete required_item_slot_;
  }
  if (required_item_slot) {
    set_has_required_item_slot();
    required_item_slot_ = required_item_slot;
  } else {
    clear_has_required_item_slot();
    required_item_slot_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemSocket.required_item_slot)
}

// -------------------------------------------------------------------

// CProtoItemSocket_Empty

// optional .CProtoItemSocket socket = 1;
inline bool CProtoItemSocket_Empty::has_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProtoItemSocket_Empty::set_has_socket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProtoItemSocket_Empty::clear_has_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProtoItemSocket_Empty::clear_socket() {
  if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  clear_has_socket();
}
inline const ::CProtoItemSocket& CProtoItemSocket_Empty::socket() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Empty.socket)
  return socket_ != NULL ? *socket_ : *default_instance_->socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_Empty::mutable_socket() {
  set_has_socket();
  if (socket_ == NULL) socket_ = new ::CProtoItemSocket;
  // @@protoc_insertion_point(field_mutable:CProtoItemSocket_Empty.socket)
  return socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_Empty::release_socket() {
  clear_has_socket();
  ::CProtoItemSocket* temp = socket_;
  socket_ = NULL;
  return temp;
}
inline void CProtoItemSocket_Empty::set_allocated_socket(::CProtoItemSocket* socket) {
  delete socket_;
  socket_ = socket;
  if (socket) {
    set_has_socket();
  } else {
    clear_has_socket();
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemSocket_Empty.socket)
}

// -------------------------------------------------------------------

// CProtoItemSocket_Effect

// optional .CProtoItemSocket socket = 1;
inline bool CProtoItemSocket_Effect::has_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProtoItemSocket_Effect::set_has_socket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProtoItemSocket_Effect::clear_has_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProtoItemSocket_Effect::clear_socket() {
  if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  clear_has_socket();
}
inline const ::CProtoItemSocket& CProtoItemSocket_Effect::socket() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Effect.socket)
  return socket_ != NULL ? *socket_ : *default_instance_->socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_Effect::mutable_socket() {
  set_has_socket();
  if (socket_ == NULL) socket_ = new ::CProtoItemSocket;
  // @@protoc_insertion_point(field_mutable:CProtoItemSocket_Effect.socket)
  return socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_Effect::release_socket() {
  clear_has_socket();
  ::CProtoItemSocket* temp = socket_;
  socket_ = NULL;
  return temp;
}
inline void CProtoItemSocket_Effect::set_allocated_socket(::CProtoItemSocket* socket) {
  delete socket_;
  socket_ = socket;
  if (socket) {
    set_has_socket();
  } else {
    clear_has_socket();
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemSocket_Effect.socket)
}

// optional uint32 effect = 2;
inline bool CProtoItemSocket_Effect::has_effect() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProtoItemSocket_Effect::set_has_effect() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProtoItemSocket_Effect::clear_has_effect() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProtoItemSocket_Effect::clear_effect() {
  effect_ = 0u;
  clear_has_effect();
}
inline ::google::protobuf::uint32 CProtoItemSocket_Effect::effect() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Effect.effect)
  return effect_;
}
inline void CProtoItemSocket_Effect::set_effect(::google::protobuf::uint32 value) {
  set_has_effect();
  effect_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_Effect.effect)
}

// -------------------------------------------------------------------

// CProtoItemSocket_Color

// optional .CProtoItemSocket socket = 1;
inline bool CProtoItemSocket_Color::has_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProtoItemSocket_Color::set_has_socket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProtoItemSocket_Color::clear_has_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProtoItemSocket_Color::clear_socket() {
  if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  clear_has_socket();
}
inline const ::CProtoItemSocket& CProtoItemSocket_Color::socket() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Color.socket)
  return socket_ != NULL ? *socket_ : *default_instance_->socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_Color::mutable_socket() {
  set_has_socket();
  if (socket_ == NULL) socket_ = new ::CProtoItemSocket;
  // @@protoc_insertion_point(field_mutable:CProtoItemSocket_Color.socket)
  return socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_Color::release_socket() {
  clear_has_socket();
  ::CProtoItemSocket* temp = socket_;
  socket_ = NULL;
  return temp;
}
inline void CProtoItemSocket_Color::set_allocated_socket(::CProtoItemSocket* socket) {
  delete socket_;
  socket_ = socket;
  if (socket) {
    set_has_socket();
  } else {
    clear_has_socket();
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemSocket_Color.socket)
}

// optional uint32 red = 2;
inline bool CProtoItemSocket_Color::has_red() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProtoItemSocket_Color::set_has_red() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProtoItemSocket_Color::clear_has_red() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProtoItemSocket_Color::clear_red() {
  red_ = 0u;
  clear_has_red();
}
inline ::google::protobuf::uint32 CProtoItemSocket_Color::red() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Color.red)
  return red_;
}
inline void CProtoItemSocket_Color::set_red(::google::protobuf::uint32 value) {
  set_has_red();
  red_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_Color.red)
}

// optional uint32 green = 3;
inline bool CProtoItemSocket_Color::has_green() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CProtoItemSocket_Color::set_has_green() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CProtoItemSocket_Color::clear_has_green() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CProtoItemSocket_Color::clear_green() {
  green_ = 0u;
  clear_has_green();
}
inline ::google::protobuf::uint32 CProtoItemSocket_Color::green() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Color.green)
  return green_;
}
inline void CProtoItemSocket_Color::set_green(::google::protobuf::uint32 value) {
  set_has_green();
  green_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_Color.green)
}

// optional uint32 blue = 4;
inline bool CProtoItemSocket_Color::has_blue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CProtoItemSocket_Color::set_has_blue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CProtoItemSocket_Color::clear_has_blue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CProtoItemSocket_Color::clear_blue() {
  blue_ = 0u;
  clear_has_blue();
}
inline ::google::protobuf::uint32 CProtoItemSocket_Color::blue() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Color.blue)
  return blue_;
}
inline void CProtoItemSocket_Color::set_blue(::google::protobuf::uint32 value) {
  set_has_blue();
  blue_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_Color.blue)
}

// -------------------------------------------------------------------

// CProtoItemSocket_Strange

// optional .CProtoItemSocket socket = 1;
inline bool CProtoItemSocket_Strange::has_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProtoItemSocket_Strange::set_has_socket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProtoItemSocket_Strange::clear_has_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProtoItemSocket_Strange::clear_socket() {
  if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  clear_has_socket();
}
inline const ::CProtoItemSocket& CProtoItemSocket_Strange::socket() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Strange.socket)
  return socket_ != NULL ? *socket_ : *default_instance_->socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_Strange::mutable_socket() {
  set_has_socket();
  if (socket_ == NULL) socket_ = new ::CProtoItemSocket;
  // @@protoc_insertion_point(field_mutable:CProtoItemSocket_Strange.socket)
  return socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_Strange::release_socket() {
  clear_has_socket();
  ::CProtoItemSocket* temp = socket_;
  socket_ = NULL;
  return temp;
}
inline void CProtoItemSocket_Strange::set_allocated_socket(::CProtoItemSocket* socket) {
  delete socket_;
  socket_ = socket;
  if (socket) {
    set_has_socket();
  } else {
    clear_has_socket();
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemSocket_Strange.socket)
}

// optional uint32 strange_type = 2;
inline bool CProtoItemSocket_Strange::has_strange_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProtoItemSocket_Strange::set_has_strange_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProtoItemSocket_Strange::clear_has_strange_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProtoItemSocket_Strange::clear_strange_type() {
  strange_type_ = 0u;
  clear_has_strange_type();
}
inline ::google::protobuf::uint32 CProtoItemSocket_Strange::strange_type() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Strange.strange_type)
  return strange_type_;
}
inline void CProtoItemSocket_Strange::set_strange_type(::google::protobuf::uint32 value) {
  set_has_strange_type();
  strange_type_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_Strange.strange_type)
}

// optional uint32 strange_value = 3;
inline bool CProtoItemSocket_Strange::has_strange_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CProtoItemSocket_Strange::set_has_strange_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CProtoItemSocket_Strange::clear_has_strange_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CProtoItemSocket_Strange::clear_strange_value() {
  strange_value_ = 0u;
  clear_has_strange_value();
}
inline ::google::protobuf::uint32 CProtoItemSocket_Strange::strange_value() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Strange.strange_value)
  return strange_value_;
}
inline void CProtoItemSocket_Strange::set_strange_value(::google::protobuf::uint32 value) {
  set_has_strange_value();
  strange_value_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_Strange.strange_value)
}

// -------------------------------------------------------------------

// CProtoItemSocket_Spectator

// optional .CProtoItemSocket socket = 1;
inline bool CProtoItemSocket_Spectator::has_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProtoItemSocket_Spectator::set_has_socket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProtoItemSocket_Spectator::clear_has_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProtoItemSocket_Spectator::clear_socket() {
  if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  clear_has_socket();
}
inline const ::CProtoItemSocket& CProtoItemSocket_Spectator::socket() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Spectator.socket)
  return socket_ != NULL ? *socket_ : *default_instance_->socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_Spectator::mutable_socket() {
  set_has_socket();
  if (socket_ == NULL) socket_ = new ::CProtoItemSocket;
  // @@protoc_insertion_point(field_mutable:CProtoItemSocket_Spectator.socket)
  return socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_Spectator::release_socket() {
  clear_has_socket();
  ::CProtoItemSocket* temp = socket_;
  socket_ = NULL;
  return temp;
}
inline void CProtoItemSocket_Spectator::set_allocated_socket(::CProtoItemSocket* socket) {
  delete socket_;
  socket_ = socket;
  if (socket) {
    set_has_socket();
  } else {
    clear_has_socket();
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemSocket_Spectator.socket)
}

// optional uint32 games_viewed = 2;
inline bool CProtoItemSocket_Spectator::has_games_viewed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProtoItemSocket_Spectator::set_has_games_viewed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProtoItemSocket_Spectator::clear_has_games_viewed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProtoItemSocket_Spectator::clear_games_viewed() {
  games_viewed_ = 0u;
  clear_has_games_viewed();
}
inline ::google::protobuf::uint32 CProtoItemSocket_Spectator::games_viewed() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Spectator.games_viewed)
  return games_viewed_;
}
inline void CProtoItemSocket_Spectator::set_games_viewed(::google::protobuf::uint32 value) {
  set_has_games_viewed();
  games_viewed_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_Spectator.games_viewed)
}

// optional uint32 corporation_id = 3;
inline bool CProtoItemSocket_Spectator::has_corporation_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CProtoItemSocket_Spectator::set_has_corporation_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CProtoItemSocket_Spectator::clear_has_corporation_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CProtoItemSocket_Spectator::clear_corporation_id() {
  corporation_id_ = 0u;
  clear_has_corporation_id();
}
inline ::google::protobuf::uint32 CProtoItemSocket_Spectator::corporation_id() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Spectator.corporation_id)
  return corporation_id_;
}
inline void CProtoItemSocket_Spectator::set_corporation_id(::google::protobuf::uint32 value) {
  set_has_corporation_id();
  corporation_id_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_Spectator.corporation_id)
}

// optional uint32 league_id = 4;
inline bool CProtoItemSocket_Spectator::has_league_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CProtoItemSocket_Spectator::set_has_league_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CProtoItemSocket_Spectator::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CProtoItemSocket_Spectator::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CProtoItemSocket_Spectator::league_id() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Spectator.league_id)
  return league_id_;
}
inline void CProtoItemSocket_Spectator::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_Spectator.league_id)
}

// optional uint32 team_id = 5;
inline bool CProtoItemSocket_Spectator::has_team_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CProtoItemSocket_Spectator::set_has_team_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CProtoItemSocket_Spectator::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CProtoItemSocket_Spectator::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CProtoItemSocket_Spectator::team_id() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Spectator.team_id)
  return team_id_;
}
inline void CProtoItemSocket_Spectator::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_Spectator.team_id)
}

// -------------------------------------------------------------------

// CProtoItemSocket_AssetModifier

// optional .CProtoItemSocket socket = 1;
inline bool CProtoItemSocket_AssetModifier::has_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProtoItemSocket_AssetModifier::set_has_socket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProtoItemSocket_AssetModifier::clear_has_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProtoItemSocket_AssetModifier::clear_socket() {
  if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  clear_has_socket();
}
inline const ::CProtoItemSocket& CProtoItemSocket_AssetModifier::socket() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_AssetModifier.socket)
  return socket_ != NULL ? *socket_ : *default_instance_->socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_AssetModifier::mutable_socket() {
  set_has_socket();
  if (socket_ == NULL) socket_ = new ::CProtoItemSocket;
  // @@protoc_insertion_point(field_mutable:CProtoItemSocket_AssetModifier.socket)
  return socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_AssetModifier::release_socket() {
  clear_has_socket();
  ::CProtoItemSocket* temp = socket_;
  socket_ = NULL;
  return temp;
}
inline void CProtoItemSocket_AssetModifier::set_allocated_socket(::CProtoItemSocket* socket) {
  delete socket_;
  socket_ = socket;
  if (socket) {
    set_has_socket();
  } else {
    clear_has_socket();
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemSocket_AssetModifier.socket)
}

// optional uint32 asset_modifier = 2;
inline bool CProtoItemSocket_AssetModifier::has_asset_modifier() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProtoItemSocket_AssetModifier::set_has_asset_modifier() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProtoItemSocket_AssetModifier::clear_has_asset_modifier() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProtoItemSocket_AssetModifier::clear_asset_modifier() {
  asset_modifier_ = 0u;
  clear_has_asset_modifier();
}
inline ::google::protobuf::uint32 CProtoItemSocket_AssetModifier::asset_modifier() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_AssetModifier.asset_modifier)
  return asset_modifier_;
}
inline void CProtoItemSocket_AssetModifier::set_asset_modifier(::google::protobuf::uint32 value) {
  set_has_asset_modifier();
  asset_modifier_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_AssetModifier.asset_modifier)
}

// -------------------------------------------------------------------

// CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY

// optional .CProtoItemSocket socket = 1;
inline bool CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::has_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::set_has_socket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::clear_has_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::clear_socket() {
  if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  clear_has_socket();
}
inline const ::CProtoItemSocket& CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::socket() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY.socket)
  return socket_ != NULL ? *socket_ : *default_instance_->socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::mutable_socket() {
  set_has_socket();
  if (socket_ == NULL) socket_ = new ::CProtoItemSocket;
  // @@protoc_insertion_point(field_mutable:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY.socket)
  return socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::release_socket() {
  clear_has_socket();
  ::CProtoItemSocket* temp = socket_;
  socket_ = NULL;
  return temp;
}
inline void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::set_allocated_socket(::CProtoItemSocket* socket) {
  delete socket_;
  socket_ = socket;
  if (socket) {
    set_has_socket();
  } else {
    clear_has_socket();
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY.socket)
}

// optional uint32 asset_modifier = 2;
inline bool CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::has_asset_modifier() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::set_has_asset_modifier() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::clear_has_asset_modifier() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::clear_asset_modifier() {
  asset_modifier_ = 0u;
  clear_has_asset_modifier();
}
inline ::google::protobuf::uint32 CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::asset_modifier() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY.asset_modifier)
  return asset_modifier_;
}
inline void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::set_asset_modifier(::google::protobuf::uint32 value) {
  set_has_asset_modifier();
  asset_modifier_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY.asset_modifier)
}

// optional uint32 anim_modifier = 3;
inline bool CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::has_anim_modifier() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::set_has_anim_modifier() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::clear_has_anim_modifier() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::clear_anim_modifier() {
  anim_modifier_ = 0u;
  clear_has_anim_modifier();
}
inline ::google::protobuf::uint32 CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::anim_modifier() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY.anim_modifier)
  return anim_modifier_;
}
inline void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::set_anim_modifier(::google::protobuf::uint32 value) {
  set_has_anim_modifier();
  anim_modifier_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY.anim_modifier)
}

// optional uint32 ability_effect = 4;
inline bool CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::has_ability_effect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::set_has_ability_effect() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::clear_has_ability_effect() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::clear_ability_effect() {
  ability_effect_ = 0u;
  clear_has_ability_effect();
}
inline ::google::protobuf::uint32 CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::ability_effect() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY.ability_effect)
  return ability_effect_;
}
inline void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::set_ability_effect(::google::protobuf::uint32 value) {
  set_has_ability_effect();
  ability_effect_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY.ability_effect)
}

// -------------------------------------------------------------------

// CProtoItemSocket_Autograph

// optional .CProtoItemSocket socket = 1;
inline bool CProtoItemSocket_Autograph::has_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProtoItemSocket_Autograph::set_has_socket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProtoItemSocket_Autograph::clear_has_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProtoItemSocket_Autograph::clear_socket() {
  if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  clear_has_socket();
}
inline const ::CProtoItemSocket& CProtoItemSocket_Autograph::socket() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Autograph.socket)
  return socket_ != NULL ? *socket_ : *default_instance_->socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_Autograph::mutable_socket() {
  set_has_socket();
  if (socket_ == NULL) socket_ = new ::CProtoItemSocket;
  // @@protoc_insertion_point(field_mutable:CProtoItemSocket_Autograph.socket)
  return socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_Autograph::release_socket() {
  clear_has_socket();
  ::CProtoItemSocket* temp = socket_;
  socket_ = NULL;
  return temp;
}
inline void CProtoItemSocket_Autograph::set_allocated_socket(::CProtoItemSocket* socket) {
  delete socket_;
  socket_ = socket;
  if (socket) {
    set_has_socket();
  } else {
    clear_has_socket();
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemSocket_Autograph.socket)
}

// optional string autograph = 2;
inline bool CProtoItemSocket_Autograph::has_autograph() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProtoItemSocket_Autograph::set_has_autograph() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProtoItemSocket_Autograph::clear_has_autograph() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProtoItemSocket_Autograph::clear_autograph() {
  if (autograph_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    autograph_->clear();
  }
  clear_has_autograph();
}
inline const ::std::string& CProtoItemSocket_Autograph::autograph() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Autograph.autograph)
  return *autograph_;
}
inline void CProtoItemSocket_Autograph::set_autograph(const ::std::string& value) {
  set_has_autograph();
  if (autograph_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    autograph_ = new ::std::string;
  }
  autograph_->assign(value);
  // @@protoc_insertion_point(field_set:CProtoItemSocket_Autograph.autograph)
}
inline void CProtoItemSocket_Autograph::set_autograph(const char* value) {
  set_has_autograph();
  if (autograph_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    autograph_ = new ::std::string;
  }
  autograph_->assign(value);
  // @@protoc_insertion_point(field_set_char:CProtoItemSocket_Autograph.autograph)
}
inline void CProtoItemSocket_Autograph::set_autograph(const char* value, size_t size) {
  set_has_autograph();
  if (autograph_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    autograph_ = new ::std::string;
  }
  autograph_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CProtoItemSocket_Autograph.autograph)
}
inline ::std::string* CProtoItemSocket_Autograph::mutable_autograph() {
  set_has_autograph();
  if (autograph_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    autograph_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CProtoItemSocket_Autograph.autograph)
  return autograph_;
}
inline ::std::string* CProtoItemSocket_Autograph::release_autograph() {
  clear_has_autograph();
  if (autograph_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = autograph_;
    autograph_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CProtoItemSocket_Autograph::set_allocated_autograph(::std::string* autograph) {
  if (autograph_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete autograph_;
  }
  if (autograph) {
    set_has_autograph();
    autograph_ = autograph;
  } else {
    clear_has_autograph();
    autograph_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemSocket_Autograph.autograph)
}

// optional uint32 autograph_id = 3;
inline bool CProtoItemSocket_Autograph::has_autograph_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CProtoItemSocket_Autograph::set_has_autograph_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CProtoItemSocket_Autograph::clear_has_autograph_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CProtoItemSocket_Autograph::clear_autograph_id() {
  autograph_id_ = 0u;
  clear_has_autograph_id();
}
inline ::google::protobuf::uint32 CProtoItemSocket_Autograph::autograph_id() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Autograph.autograph_id)
  return autograph_id_;
}
inline void CProtoItemSocket_Autograph::set_autograph_id(::google::protobuf::uint32 value) {
  set_has_autograph_id();
  autograph_id_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_Autograph.autograph_id)
}

// optional uint32 autograph_score = 4;
inline bool CProtoItemSocket_Autograph::has_autograph_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CProtoItemSocket_Autograph::set_has_autograph_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CProtoItemSocket_Autograph::clear_has_autograph_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CProtoItemSocket_Autograph::clear_autograph_score() {
  autograph_score_ = 0u;
  clear_has_autograph_score();
}
inline ::google::protobuf::uint32 CProtoItemSocket_Autograph::autograph_score() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_Autograph.autograph_score)
  return autograph_score_;
}
inline void CProtoItemSocket_Autograph::set_autograph_score(::google::protobuf::uint32 value) {
  set_has_autograph_score();
  autograph_score_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemSocket_Autograph.autograph_score)
}

// -------------------------------------------------------------------

// CProtoItemSocket_StaticVisuals

// optional .CProtoItemSocket socket = 1;
inline bool CProtoItemSocket_StaticVisuals::has_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProtoItemSocket_StaticVisuals::set_has_socket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProtoItemSocket_StaticVisuals::clear_has_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProtoItemSocket_StaticVisuals::clear_socket() {
  if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  clear_has_socket();
}
inline const ::CProtoItemSocket& CProtoItemSocket_StaticVisuals::socket() const {
  // @@protoc_insertion_point(field_get:CProtoItemSocket_StaticVisuals.socket)
  return socket_ != NULL ? *socket_ : *default_instance_->socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_StaticVisuals::mutable_socket() {
  set_has_socket();
  if (socket_ == NULL) socket_ = new ::CProtoItemSocket;
  // @@protoc_insertion_point(field_mutable:CProtoItemSocket_StaticVisuals.socket)
  return socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_StaticVisuals::release_socket() {
  clear_has_socket();
  ::CProtoItemSocket* temp = socket_;
  socket_ = NULL;
  return temp;
}
inline void CProtoItemSocket_StaticVisuals::set_allocated_socket(::CProtoItemSocket* socket) {
  delete socket_;
  socket_ = socket;
  if (socket) {
    set_has_socket();
  } else {
    clear_has_socket();
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemSocket_StaticVisuals.socket)
}

// -------------------------------------------------------------------

// CMatchPlayerAbilityUpgrade

// optional uint32 ability = 1;
inline bool CMatchPlayerAbilityUpgrade::has_ability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMatchPlayerAbilityUpgrade::set_has_ability() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMatchPlayerAbilityUpgrade::clear_has_ability() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMatchPlayerAbilityUpgrade::clear_ability() {
  ability_ = 0u;
  clear_has_ability();
}
inline ::google::protobuf::uint32 CMatchPlayerAbilityUpgrade::ability() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerAbilityUpgrade.ability)
  return ability_;
}
inline void CMatchPlayerAbilityUpgrade::set_ability(::google::protobuf::uint32 value) {
  set_has_ability();
  ability_ = value;
  // @@protoc_insertion_point(field_set:CMatchPlayerAbilityUpgrade.ability)
}

// optional uint32 time = 2;
inline bool CMatchPlayerAbilityUpgrade::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMatchPlayerAbilityUpgrade::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMatchPlayerAbilityUpgrade::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMatchPlayerAbilityUpgrade::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 CMatchPlayerAbilityUpgrade::time() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerAbilityUpgrade.time)
  return time_;
}
inline void CMatchPlayerAbilityUpgrade::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:CMatchPlayerAbilityUpgrade.time)
}

// -------------------------------------------------------------------

// CMatchAdditionalUnitInventory

// optional string unit_name = 1;
inline bool CMatchAdditionalUnitInventory::has_unit_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMatchAdditionalUnitInventory::set_has_unit_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMatchAdditionalUnitInventory::clear_has_unit_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMatchAdditionalUnitInventory::clear_unit_name() {
  if (unit_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unit_name_->clear();
  }
  clear_has_unit_name();
}
inline const ::std::string& CMatchAdditionalUnitInventory::unit_name() const {
  // @@protoc_insertion_point(field_get:CMatchAdditionalUnitInventory.unit_name)
  return *unit_name_;
}
inline void CMatchAdditionalUnitInventory::set_unit_name(const ::std::string& value) {
  set_has_unit_name();
  if (unit_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unit_name_ = new ::std::string;
  }
  unit_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMatchAdditionalUnitInventory.unit_name)
}
inline void CMatchAdditionalUnitInventory::set_unit_name(const char* value) {
  set_has_unit_name();
  if (unit_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unit_name_ = new ::std::string;
  }
  unit_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMatchAdditionalUnitInventory.unit_name)
}
inline void CMatchAdditionalUnitInventory::set_unit_name(const char* value, size_t size) {
  set_has_unit_name();
  if (unit_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unit_name_ = new ::std::string;
  }
  unit_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMatchAdditionalUnitInventory.unit_name)
}
inline ::std::string* CMatchAdditionalUnitInventory::mutable_unit_name() {
  set_has_unit_name();
  if (unit_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unit_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMatchAdditionalUnitInventory.unit_name)
  return unit_name_;
}
inline ::std::string* CMatchAdditionalUnitInventory::release_unit_name() {
  clear_has_unit_name();
  if (unit_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = unit_name_;
    unit_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMatchAdditionalUnitInventory::set_allocated_unit_name(::std::string* unit_name) {
  if (unit_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unit_name_;
  }
  if (unit_name) {
    set_has_unit_name();
    unit_name_ = unit_name;
  } else {
    clear_has_unit_name();
    unit_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMatchAdditionalUnitInventory.unit_name)
}

// repeated uint32 items = 2;
inline int CMatchAdditionalUnitInventory::items_size() const {
  return items_.size();
}
inline void CMatchAdditionalUnitInventory::clear_items() {
  items_.Clear();
}
inline ::google::protobuf::uint32 CMatchAdditionalUnitInventory::items(int index) const {
  // @@protoc_insertion_point(field_get:CMatchAdditionalUnitInventory.items)
  return items_.Get(index);
}
inline void CMatchAdditionalUnitInventory::set_items(int index, ::google::protobuf::uint32 value) {
  items_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMatchAdditionalUnitInventory.items)
}
inline void CMatchAdditionalUnitInventory::add_items(::google::protobuf::uint32 value) {
  items_.Add(value);
  // @@protoc_insertion_point(field_add:CMatchAdditionalUnitInventory.items)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMatchAdditionalUnitInventory::items() const {
  // @@protoc_insertion_point(field_list:CMatchAdditionalUnitInventory.items)
  return items_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMatchAdditionalUnitInventory::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CMatchAdditionalUnitInventory.items)
  return &items_;
}

// -------------------------------------------------------------------

// CMatchHeroSelectEvent

// optional bool is_pick = 1;
inline bool CMatchHeroSelectEvent::has_is_pick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMatchHeroSelectEvent::set_has_is_pick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMatchHeroSelectEvent::clear_has_is_pick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMatchHeroSelectEvent::clear_is_pick() {
  is_pick_ = false;
  clear_has_is_pick();
}
inline bool CMatchHeroSelectEvent::is_pick() const {
  // @@protoc_insertion_point(field_get:CMatchHeroSelectEvent.is_pick)
  return is_pick_;
}
inline void CMatchHeroSelectEvent::set_is_pick(bool value) {
  set_has_is_pick();
  is_pick_ = value;
  // @@protoc_insertion_point(field_set:CMatchHeroSelectEvent.is_pick)
}

// optional uint32 team = 2;
inline bool CMatchHeroSelectEvent::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMatchHeroSelectEvent::set_has_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMatchHeroSelectEvent::clear_has_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMatchHeroSelectEvent::clear_team() {
  team_ = 0u;
  clear_has_team();
}
inline ::google::protobuf::uint32 CMatchHeroSelectEvent::team() const {
  // @@protoc_insertion_point(field_get:CMatchHeroSelectEvent.team)
  return team_;
}
inline void CMatchHeroSelectEvent::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CMatchHeroSelectEvent.team)
}

// optional uint32 hero_id = 3;
inline bool CMatchHeroSelectEvent::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMatchHeroSelectEvent::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMatchHeroSelectEvent::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMatchHeroSelectEvent::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMatchHeroSelectEvent::hero_id() const {
  // @@protoc_insertion_point(field_get:CMatchHeroSelectEvent.hero_id)
  return hero_id_;
}
inline void CMatchHeroSelectEvent::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMatchHeroSelectEvent.hero_id)
}

// -------------------------------------------------------------------

// CMsgDOTAProcessFantasyScheduledEvent

// optional uint32 event = 1;
inline bool CMsgDOTAProcessFantasyScheduledEvent::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_has_event() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_has_event() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_event() {
  event_ = 0u;
  clear_has_event();
}
inline ::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::event() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProcessFantasyScheduledEvent.event)
  return event_;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_event(::google::protobuf::uint32 value) {
  set_has_event();
  event_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProcessFantasyScheduledEvent.event)
}

// optional uint32 timestamp = 2;
inline bool CMsgDOTAProcessFantasyScheduledEvent::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProcessFantasyScheduledEvent.timestamp)
  return timestamp_;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProcessFantasyScheduledEvent.timestamp)
}

// optional uint32 fantasy_league_id = 3;
inline bool CMsgDOTAProcessFantasyScheduledEvent::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
inline ::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProcessFantasyScheduledEvent.fantasy_league_id)
  return fantasy_league_id_;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProcessFantasyScheduledEvent.fantasy_league_id)
}

// optional uint32 season = 4;
inline bool CMsgDOTAProcessFantasyScheduledEvent::has_season() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_has_season() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_has_season() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_season() {
  season_ = 0u;
  clear_has_season();
}
inline ::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::season() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProcessFantasyScheduledEvent.season)
  return season_;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_season(::google::protobuf::uint32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProcessFantasyScheduledEvent.season)
}

// optional uint32 reference_data = 5;
inline bool CMsgDOTAProcessFantasyScheduledEvent::has_reference_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_has_reference_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_has_reference_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_reference_data() {
  reference_data_ = 0u;
  clear_has_reference_data();
}
inline ::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::reference_data() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProcessFantasyScheduledEvent.reference_data)
  return reference_data_;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_reference_data(::google::protobuf::uint32 value) {
  set_has_reference_data();
  reference_data_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProcessFantasyScheduledEvent.reference_data)
}

// -------------------------------------------------------------------

// CMsgDOTAHasItemQuery

// optional uint32 account_id = 1;
inline bool CMsgDOTAHasItemQuery::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAHasItemQuery::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAHasItemQuery::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAHasItemQuery::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAHasItemQuery::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHasItemQuery.account_id)
  return account_id_;
}
inline void CMsgDOTAHasItemQuery::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHasItemQuery.account_id)
}

// optional uint64 item_id = 2;
inline bool CMsgDOTAHasItemQuery::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAHasItemQuery::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAHasItemQuery::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAHasItemQuery::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
inline ::google::protobuf::uint64 CMsgDOTAHasItemQuery::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHasItemQuery.item_id)
  return item_id_;
}
inline void CMsgDOTAHasItemQuery::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHasItemQuery.item_id)
}

// -------------------------------------------------------------------

// CMsgDOTAHasItemResponse

// optional bool has_item = 1;
inline bool CMsgDOTAHasItemResponse::has_has_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAHasItemResponse::set_has_has_item() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAHasItemResponse::clear_has_has_item() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAHasItemResponse::clear_has_item() {
  has_item_ = false;
  clear_has_has_item();
}
inline bool CMsgDOTAHasItemResponse::has_item() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHasItemResponse.has_item)
  return has_item_;
}
inline void CMsgDOTAHasItemResponse::set_has_item(bool value) {
  set_has_has_item();
  has_item_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHasItemResponse.has_item)
}

// -------------------------------------------------------------------

// CMsgDOTAHasItemDefsQuery

// optional uint32 account_id = 1;
inline bool CMsgDOTAHasItemDefsQuery::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAHasItemDefsQuery::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAHasItemDefsQuery::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAHasItemDefsQuery::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAHasItemDefsQuery::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHasItemDefsQuery.account_id)
  return account_id_;
}
inline void CMsgDOTAHasItemDefsQuery::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHasItemDefsQuery.account_id)
}

// repeated uint32 itemdef_ids = 2;
inline int CMsgDOTAHasItemDefsQuery::itemdef_ids_size() const {
  return itemdef_ids_.size();
}
inline void CMsgDOTAHasItemDefsQuery::clear_itemdef_ids() {
  itemdef_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTAHasItemDefsQuery::itemdef_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHasItemDefsQuery.itemdef_ids)
  return itemdef_ids_.Get(index);
}
inline void CMsgDOTAHasItemDefsQuery::set_itemdef_ids(int index, ::google::protobuf::uint32 value) {
  itemdef_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAHasItemDefsQuery.itemdef_ids)
}
inline void CMsgDOTAHasItemDefsQuery::add_itemdef_ids(::google::protobuf::uint32 value) {
  itemdef_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAHasItemDefsQuery.itemdef_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAHasItemDefsQuery::itemdef_ids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAHasItemDefsQuery.itemdef_ids)
  return itemdef_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAHasItemDefsQuery::mutable_itemdef_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAHasItemDefsQuery.itemdef_ids)
  return &itemdef_ids_;
}

// -------------------------------------------------------------------

// CMsgDOTAHasItemDefsResponse

// optional bool has_items = 1;
inline bool CMsgDOTAHasItemDefsResponse::has_has_items() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAHasItemDefsResponse::set_has_has_items() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAHasItemDefsResponse::clear_has_has_items() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAHasItemDefsResponse::clear_has_items() {
  has_items_ = false;
  clear_has_has_items();
}
inline bool CMsgDOTAHasItemDefsResponse::has_items() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHasItemDefsResponse.has_items)
  return has_items_;
}
inline void CMsgDOTAHasItemDefsResponse::set_has_items(bool value) {
  set_has_has_items();
  has_items_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHasItemDefsResponse.has_items)
}

// -------------------------------------------------------------------

// CMsgDOTAConsumeFantasyTicket

// optional uint32 account_id = 1;
inline bool CMsgDOTAConsumeFantasyTicket::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAConsumeFantasyTicket::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAConsumeFantasyTicket::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAConsumeFantasyTicket::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAConsumeFantasyTicket::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAConsumeFantasyTicket.account_id)
  return account_id_;
}
inline void CMsgDOTAConsumeFantasyTicket::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAConsumeFantasyTicket.account_id)
}

// optional uint64 item_id = 2;
inline bool CMsgDOTAConsumeFantasyTicket::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAConsumeFantasyTicket::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAConsumeFantasyTicket::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAConsumeFantasyTicket::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
inline ::google::protobuf::uint64 CMsgDOTAConsumeFantasyTicket::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAConsumeFantasyTicket.item_id)
  return item_id_;
}
inline void CMsgDOTAConsumeFantasyTicket::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAConsumeFantasyTicket.item_id)
}

// optional uint32 fantasy_league_id = 3;
inline bool CMsgDOTAConsumeFantasyTicket::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAConsumeFantasyTicket::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAConsumeFantasyTicket::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAConsumeFantasyTicket::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
inline ::google::protobuf::uint32 CMsgDOTAConsumeFantasyTicket::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAConsumeFantasyTicket.fantasy_league_id)
  return fantasy_league_id_;
}
inline void CMsgDOTAConsumeFantasyTicket::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAConsumeFantasyTicket.fantasy_league_id)
}

// -------------------------------------------------------------------

// CMsgDOTAConsumeFantasyTicketFailure

// optional uint32 account_id = 1;
inline bool CMsgDOTAConsumeFantasyTicketFailure::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAConsumeFantasyTicketFailure::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAConsumeFantasyTicketFailure::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAConsumeFantasyTicketFailure::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAConsumeFantasyTicketFailure::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAConsumeFantasyTicketFailure.account_id)
  return account_id_;
}
inline void CMsgDOTAConsumeFantasyTicketFailure::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAConsumeFantasyTicketFailure.account_id)
}

// optional uint64 item_id = 2;
inline bool CMsgDOTAConsumeFantasyTicketFailure::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAConsumeFantasyTicketFailure::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAConsumeFantasyTicketFailure::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAConsumeFantasyTicketFailure::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
inline ::google::protobuf::uint64 CMsgDOTAConsumeFantasyTicketFailure::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAConsumeFantasyTicketFailure.item_id)
  return item_id_;
}
inline void CMsgDOTAConsumeFantasyTicketFailure::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAConsumeFantasyTicketFailure.item_id)
}

// optional uint32 fantasy_league_id = 3;
inline bool CMsgDOTAConsumeFantasyTicketFailure::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAConsumeFantasyTicketFailure::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAConsumeFantasyTicketFailure::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAConsumeFantasyTicketFailure::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
inline ::google::protobuf::uint32 CMsgDOTAConsumeFantasyTicketFailure::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAConsumeFantasyTicketFailure.fantasy_league_id)
  return fantasy_league_id_;
}
inline void CMsgDOTAConsumeFantasyTicketFailure::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAConsumeFantasyTicketFailure.fantasy_league_id)
}

// -------------------------------------------------------------------

// CMsgGCToGCFantasySetMatchLeague

// optional uint64 match_id = 1;
inline bool CMsgGCToGCFantasySetMatchLeague::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToGCFantasySetMatchLeague::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToGCFantasySetMatchLeague::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToGCFantasySetMatchLeague::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
inline ::google::protobuf::uint64 CMsgGCToGCFantasySetMatchLeague::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCFantasySetMatchLeague.match_id)
  return match_id_;
}
inline void CMsgGCToGCFantasySetMatchLeague::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCFantasySetMatchLeague.match_id)
}

// optional uint32 league_id = 2;
inline bool CMsgGCToGCFantasySetMatchLeague::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCToGCFantasySetMatchLeague::set_has_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCToGCFantasySetMatchLeague::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCToGCFantasySetMatchLeague::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgGCToGCFantasySetMatchLeague::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCFantasySetMatchLeague.league_id)
  return league_id_;
}
inline void CMsgGCToGCFantasySetMatchLeague::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCFantasySetMatchLeague.league_id)
}

// -------------------------------------------------------------------

// CSODOTAMapLocationState

// optional uint32 account_id = 1;
inline bool CSODOTAMapLocationState::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAMapLocationState::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAMapLocationState::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAMapLocationState::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CSODOTAMapLocationState::account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAMapLocationState.account_id)
  return account_id_;
}
inline void CSODOTAMapLocationState::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAMapLocationState.account_id)
}

// optional int32 location_id = 2;
inline bool CSODOTAMapLocationState::has_location_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAMapLocationState::set_has_location_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAMapLocationState::clear_has_location_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAMapLocationState::clear_location_id() {
  location_id_ = 0;
  clear_has_location_id();
}
inline ::google::protobuf::int32 CSODOTAMapLocationState::location_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAMapLocationState.location_id)
  return location_id_;
}
inline void CSODOTAMapLocationState::set_location_id(::google::protobuf::int32 value) {
  set_has_location_id();
  location_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAMapLocationState.location_id)
}

// optional bool completed = 3;
inline bool CSODOTAMapLocationState::has_completed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTAMapLocationState::set_has_completed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSODOTAMapLocationState::clear_has_completed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSODOTAMapLocationState::clear_completed() {
  completed_ = false;
  clear_has_completed();
}
inline bool CSODOTAMapLocationState::completed() const {
  // @@protoc_insertion_point(field_get:CSODOTAMapLocationState.completed)
  return completed_;
}
inline void CSODOTAMapLocationState::set_completed(bool value) {
  set_has_completed();
  completed_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAMapLocationState.completed)
}

// -------------------------------------------------------------------

// CMsgNexonPartnerUpdate

// optional uint32 messagetype = 1;
inline bool CMsgNexonPartnerUpdate::has_messagetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgNexonPartnerUpdate::set_has_messagetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgNexonPartnerUpdate::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgNexonPartnerUpdate::clear_messagetype() {
  messagetype_ = 0u;
  clear_has_messagetype();
}
inline ::google::protobuf::uint32 CMsgNexonPartnerUpdate::messagetype() const {
  // @@protoc_insertion_point(field_get:CMsgNexonPartnerUpdate.messagetype)
  return messagetype_;
}
inline void CMsgNexonPartnerUpdate::set_messagetype(::google::protobuf::uint32 value) {
  set_has_messagetype();
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:CMsgNexonPartnerUpdate.messagetype)
}

// optional uint32 timeremaining = 2;
inline bool CMsgNexonPartnerUpdate::has_timeremaining() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgNexonPartnerUpdate::set_has_timeremaining() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgNexonPartnerUpdate::clear_has_timeremaining() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgNexonPartnerUpdate::clear_timeremaining() {
  timeremaining_ = 0u;
  clear_has_timeremaining();
}
inline ::google::protobuf::uint32 CMsgNexonPartnerUpdate::timeremaining() const {
  // @@protoc_insertion_point(field_get:CMsgNexonPartnerUpdate.timeremaining)
  return timeremaining_;
}
inline void CMsgNexonPartnerUpdate::set_timeremaining(::google::protobuf::uint32 value) {
  set_has_timeremaining();
  timeremaining_ = value;
  // @@protoc_insertion_point(field_set:CMsgNexonPartnerUpdate.timeremaining)
}

// optional bool terminate = 3;
inline bool CMsgNexonPartnerUpdate::has_terminate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgNexonPartnerUpdate::set_has_terminate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgNexonPartnerUpdate::clear_has_terminate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgNexonPartnerUpdate::clear_terminate() {
  terminate_ = false;
  clear_has_terminate();
}
inline bool CMsgNexonPartnerUpdate::terminate() const {
  // @@protoc_insertion_point(field_get:CMsgNexonPartnerUpdate.terminate)
  return terminate_;
}
inline void CMsgNexonPartnerUpdate::set_terminate(bool value) {
  set_has_terminate();
  terminate_ = value;
  // @@protoc_insertion_point(field_set:CMsgNexonPartnerUpdate.terminate)
}

// -------------------------------------------------------------------

// CMsgMakeOffering

// optional uint64 item_id = 1;
inline bool CMsgMakeOffering::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgMakeOffering::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgMakeOffering::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgMakeOffering::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
inline ::google::protobuf::uint64 CMsgMakeOffering::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgMakeOffering.item_id)
  return item_id_;
}
inline void CMsgMakeOffering::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgMakeOffering.item_id)
}

// -------------------------------------------------------------------

// CMsgRequestOfferings

// -------------------------------------------------------------------

// CMsgRequestOfferingsResponse_NewYearsOffering

// optional uint32 def_index = 1;
inline bool CMsgRequestOfferingsResponse_NewYearsOffering::has_def_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgRequestOfferingsResponse_NewYearsOffering::set_has_def_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgRequestOfferingsResponse_NewYearsOffering::clear_has_def_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgRequestOfferingsResponse_NewYearsOffering::clear_def_index() {
  def_index_ = 0u;
  clear_has_def_index();
}
inline ::google::protobuf::uint32 CMsgRequestOfferingsResponse_NewYearsOffering::def_index() const {
  // @@protoc_insertion_point(field_get:CMsgRequestOfferingsResponse.NewYearsOffering.def_index)
  return def_index_;
}
inline void CMsgRequestOfferingsResponse_NewYearsOffering::set_def_index(::google::protobuf::uint32 value) {
  set_has_def_index();
  def_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgRequestOfferingsResponse.NewYearsOffering.def_index)
}

// optional uint64 item_id = 2;
inline bool CMsgRequestOfferingsResponse_NewYearsOffering::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgRequestOfferingsResponse_NewYearsOffering::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgRequestOfferingsResponse_NewYearsOffering::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgRequestOfferingsResponse_NewYearsOffering::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
inline ::google::protobuf::uint64 CMsgRequestOfferingsResponse_NewYearsOffering::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgRequestOfferingsResponse.NewYearsOffering.item_id)
  return item_id_;
}
inline void CMsgRequestOfferingsResponse_NewYearsOffering::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgRequestOfferingsResponse.NewYearsOffering.item_id)
}

// -------------------------------------------------------------------

// CMsgRequestOfferingsResponse

// repeated .CMsgRequestOfferingsResponse.NewYearsOffering offerings = 1;
inline int CMsgRequestOfferingsResponse::offerings_size() const {
  return offerings_.size();
}
inline void CMsgRequestOfferingsResponse::clear_offerings() {
  offerings_.Clear();
}
inline const ::CMsgRequestOfferingsResponse_NewYearsOffering& CMsgRequestOfferingsResponse::offerings(int index) const {
  // @@protoc_insertion_point(field_get:CMsgRequestOfferingsResponse.offerings)
  return offerings_.Get(index);
}
inline ::CMsgRequestOfferingsResponse_NewYearsOffering* CMsgRequestOfferingsResponse::mutable_offerings(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgRequestOfferingsResponse.offerings)
  return offerings_.Mutable(index);
}
inline ::CMsgRequestOfferingsResponse_NewYearsOffering* CMsgRequestOfferingsResponse::add_offerings() {
  // @@protoc_insertion_point(field_add:CMsgRequestOfferingsResponse.offerings)
  return offerings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgRequestOfferingsResponse_NewYearsOffering >&
CMsgRequestOfferingsResponse::offerings() const {
  // @@protoc_insertion_point(field_list:CMsgRequestOfferingsResponse.offerings)
  return offerings_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgRequestOfferingsResponse_NewYearsOffering >*
CMsgRequestOfferingsResponse::mutable_offerings() {
  // @@protoc_insertion_point(field_mutable_list:CMsgRequestOfferingsResponse.offerings)
  return &offerings_;
}

// optional bool completed = 2;
inline bool CMsgRequestOfferingsResponse::has_completed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgRequestOfferingsResponse::set_has_completed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgRequestOfferingsResponse::clear_has_completed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgRequestOfferingsResponse::clear_completed() {
  completed_ = false;
  clear_has_completed();
}
inline bool CMsgRequestOfferingsResponse::completed() const {
  // @@protoc_insertion_point(field_get:CMsgRequestOfferingsResponse.completed)
  return completed_;
}
inline void CMsgRequestOfferingsResponse::set_completed(bool value) {
  set_has_completed();
  completed_ = value;
  // @@protoc_insertion_point(field_set:CMsgRequestOfferingsResponse.completed)
}

// -------------------------------------------------------------------

// CMsgLeagueAdminList

// repeated uint32 account_ids = 1;
inline int CMsgLeagueAdminList::account_ids_size() const {
  return account_ids_.size();
}
inline void CMsgLeagueAdminList::clear_account_ids() {
  account_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgLeagueAdminList::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgLeagueAdminList.account_ids)
  return account_ids_.Get(index);
}
inline void CMsgLeagueAdminList::set_account_ids(int index, ::google::protobuf::uint32 value) {
  account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgLeagueAdminList.account_ids)
}
inline void CMsgLeagueAdminList::add_account_ids(::google::protobuf::uint32 value) {
  account_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgLeagueAdminList.account_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgLeagueAdminList::account_ids() const {
  // @@protoc_insertion_point(field_list:CMsgLeagueAdminList.account_ids)
  return account_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgLeagueAdminList::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgLeagueAdminList.account_ids)
  return &account_ids_;
}

// -------------------------------------------------------------------

// CMsgPerfectWorldUserLookupRequest

// optional string user_name = 1;
inline bool CMsgPerfectWorldUserLookupRequest::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPerfectWorldUserLookupRequest::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPerfectWorldUserLookupRequest::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPerfectWorldUserLookupRequest::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& CMsgPerfectWorldUserLookupRequest::user_name() const {
  // @@protoc_insertion_point(field_get:CMsgPerfectWorldUserLookupRequest.user_name)
  return *user_name_;
}
inline void CMsgPerfectWorldUserLookupRequest::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgPerfectWorldUserLookupRequest.user_name)
}
inline void CMsgPerfectWorldUserLookupRequest::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgPerfectWorldUserLookupRequest.user_name)
}
inline void CMsgPerfectWorldUserLookupRequest::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgPerfectWorldUserLookupRequest.user_name)
}
inline ::std::string* CMsgPerfectWorldUserLookupRequest::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgPerfectWorldUserLookupRequest.user_name)
  return user_name_;
}
inline ::std::string* CMsgPerfectWorldUserLookupRequest::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgPerfectWorldUserLookupRequest::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPerfectWorldUserLookupRequest.user_name)
}

// -------------------------------------------------------------------

// CMsgPerfectWorldUserLookupResponse

// optional .CMsgPerfectWorldUserLookupResponse.EResultCode result_code = 1 [default = SUCCESS_ACCOUNT_FOUND];
inline bool CMsgPerfectWorldUserLookupResponse::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPerfectWorldUserLookupResponse::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPerfectWorldUserLookupResponse::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPerfectWorldUserLookupResponse::clear_result_code() {
  result_code_ = 0;
  clear_has_result_code();
}
inline ::CMsgPerfectWorldUserLookupResponse_EResultCode CMsgPerfectWorldUserLookupResponse::result_code() const {
  // @@protoc_insertion_point(field_get:CMsgPerfectWorldUserLookupResponse.result_code)
  return static_cast< ::CMsgPerfectWorldUserLookupResponse_EResultCode >(result_code_);
}
inline void CMsgPerfectWorldUserLookupResponse::set_result_code(::CMsgPerfectWorldUserLookupResponse_EResultCode value) {
  assert(::CMsgPerfectWorldUserLookupResponse_EResultCode_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:CMsgPerfectWorldUserLookupResponse.result_code)
}

// optional uint32 account_id = 2;
inline bool CMsgPerfectWorldUserLookupResponse::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPerfectWorldUserLookupResponse::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPerfectWorldUserLookupResponse::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPerfectWorldUserLookupResponse::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgPerfectWorldUserLookupResponse::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgPerfectWorldUserLookupResponse.account_id)
  return account_id_;
}
inline void CMsgPerfectWorldUserLookupResponse::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPerfectWorldUserLookupResponse.account_id)
}

// -------------------------------------------------------------------

// CCompendiumTimestampedData

// optional uint32 game_time = 1;
inline bool CCompendiumTimestampedData::has_game_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCompendiumTimestampedData::set_has_game_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CCompendiumTimestampedData::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CCompendiumTimestampedData::clear_game_time() {
  game_time_ = 0u;
  clear_has_game_time();
}
inline ::google::protobuf::uint32 CCompendiumTimestampedData::game_time() const {
  // @@protoc_insertion_point(field_get:CCompendiumTimestampedData.game_time)
  return game_time_;
}
inline void CCompendiumTimestampedData::set_game_time(::google::protobuf::uint32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:CCompendiumTimestampedData.game_time)
}

// optional uint32 gpm = 2;
inline bool CCompendiumTimestampedData::has_gpm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCompendiumTimestampedData::set_has_gpm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CCompendiumTimestampedData::clear_has_gpm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CCompendiumTimestampedData::clear_gpm() {
  gpm_ = 0u;
  clear_has_gpm();
}
inline ::google::protobuf::uint32 CCompendiumTimestampedData::gpm() const {
  // @@protoc_insertion_point(field_get:CCompendiumTimestampedData.gpm)
  return gpm_;
}
inline void CCompendiumTimestampedData::set_gpm(::google::protobuf::uint32 value) {
  set_has_gpm();
  gpm_ = value;
  // @@protoc_insertion_point(field_set:CCompendiumTimestampedData.gpm)
}

// optional uint32 xpm = 3;
inline bool CCompendiumTimestampedData::has_xpm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CCompendiumTimestampedData::set_has_xpm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CCompendiumTimestampedData::clear_has_xpm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CCompendiumTimestampedData::clear_xpm() {
  xpm_ = 0u;
  clear_has_xpm();
}
inline ::google::protobuf::uint32 CCompendiumTimestampedData::xpm() const {
  // @@protoc_insertion_point(field_get:CCompendiumTimestampedData.xpm)
  return xpm_;
}
inline void CCompendiumTimestampedData::set_xpm(::google::protobuf::uint32 value) {
  set_has_xpm();
  xpm_ = value;
  // @@protoc_insertion_point(field_set:CCompendiumTimestampedData.xpm)
}

// optional uint32 kills = 4;
inline bool CCompendiumTimestampedData::has_kills() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CCompendiumTimestampedData::set_has_kills() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CCompendiumTimestampedData::clear_has_kills() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CCompendiumTimestampedData::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
inline ::google::protobuf::uint32 CCompendiumTimestampedData::kills() const {
  // @@protoc_insertion_point(field_get:CCompendiumTimestampedData.kills)
  return kills_;
}
inline void CCompendiumTimestampedData::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:CCompendiumTimestampedData.kills)
}

// optional uint32 deaths = 5;
inline bool CCompendiumTimestampedData::has_deaths() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CCompendiumTimestampedData::set_has_deaths() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CCompendiumTimestampedData::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CCompendiumTimestampedData::clear_deaths() {
  deaths_ = 0u;
  clear_has_deaths();
}
inline ::google::protobuf::uint32 CCompendiumTimestampedData::deaths() const {
  // @@protoc_insertion_point(field_get:CCompendiumTimestampedData.deaths)
  return deaths_;
}
inline void CCompendiumTimestampedData::set_deaths(::google::protobuf::uint32 value) {
  set_has_deaths();
  deaths_ = value;
  // @@protoc_insertion_point(field_set:CCompendiumTimestampedData.deaths)
}

// repeated uint32 item_purchases = 6;
inline int CCompendiumTimestampedData::item_purchases_size() const {
  return item_purchases_.size();
}
inline void CCompendiumTimestampedData::clear_item_purchases() {
  item_purchases_.Clear();
}
inline ::google::protobuf::uint32 CCompendiumTimestampedData::item_purchases(int index) const {
  // @@protoc_insertion_point(field_get:CCompendiumTimestampedData.item_purchases)
  return item_purchases_.Get(index);
}
inline void CCompendiumTimestampedData::set_item_purchases(int index, ::google::protobuf::uint32 value) {
  item_purchases_.Set(index, value);
  // @@protoc_insertion_point(field_set:CCompendiumTimestampedData.item_purchases)
}
inline void CCompendiumTimestampedData::add_item_purchases(::google::protobuf::uint32 value) {
  item_purchases_.Add(value);
  // @@protoc_insertion_point(field_add:CCompendiumTimestampedData.item_purchases)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CCompendiumTimestampedData::item_purchases() const {
  // @@protoc_insertion_point(field_list:CCompendiumTimestampedData.item_purchases)
  return item_purchases_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CCompendiumTimestampedData::mutable_item_purchases() {
  // @@protoc_insertion_point(field_mutable_list:CCompendiumTimestampedData.item_purchases)
  return &item_purchases_;
}

// -------------------------------------------------------------------

// CCompendiumGameTimeline

// repeated .CCompendiumTimestampedData data = 1;
inline int CCompendiumGameTimeline::data_size() const {
  return data_.size();
}
inline void CCompendiumGameTimeline::clear_data() {
  data_.Clear();
}
inline const ::CCompendiumTimestampedData& CCompendiumGameTimeline::data(int index) const {
  // @@protoc_insertion_point(field_get:CCompendiumGameTimeline.data)
  return data_.Get(index);
}
inline ::CCompendiumTimestampedData* CCompendiumGameTimeline::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:CCompendiumGameTimeline.data)
  return data_.Mutable(index);
}
inline ::CCompendiumTimestampedData* CCompendiumGameTimeline::add_data() {
  // @@protoc_insertion_point(field_add:CCompendiumGameTimeline.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CCompendiumTimestampedData >&
CCompendiumGameTimeline::data() const {
  // @@protoc_insertion_point(field_list:CCompendiumGameTimeline.data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::CCompendiumTimestampedData >*
CCompendiumGameTimeline::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:CCompendiumGameTimeline.data)
  return &data_;
}

// repeated string tags = 2;
inline int CCompendiumGameTimeline::tags_size() const {
  return tags_.size();
}
inline void CCompendiumGameTimeline::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& CCompendiumGameTimeline::tags(int index) const {
  // @@protoc_insertion_point(field_get:CCompendiumGameTimeline.tags)
  return tags_.Get(index);
}
inline ::std::string* CCompendiumGameTimeline::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CCompendiumGameTimeline.tags)
  return tags_.Mutable(index);
}
inline void CCompendiumGameTimeline::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CCompendiumGameTimeline.tags)
  tags_.Mutable(index)->assign(value);
}
inline void CCompendiumGameTimeline::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CCompendiumGameTimeline.tags)
}
inline void CCompendiumGameTimeline::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCompendiumGameTimeline.tags)
}
inline ::std::string* CCompendiumGameTimeline::add_tags() {
  return tags_.Add();
}
inline void CCompendiumGameTimeline::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CCompendiumGameTimeline.tags)
}
inline void CCompendiumGameTimeline::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CCompendiumGameTimeline.tags)
}
inline void CCompendiumGameTimeline::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CCompendiumGameTimeline.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CCompendiumGameTimeline::tags() const {
  // @@protoc_insertion_point(field_list:CCompendiumGameTimeline.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CCompendiumGameTimeline::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CCompendiumGameTimeline.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// CCompendiumGameList

// repeated .CCompendiumGameTimeline games = 1;
inline int CCompendiumGameList::games_size() const {
  return games_.size();
}
inline void CCompendiumGameList::clear_games() {
  games_.Clear();
}
inline const ::CCompendiumGameTimeline& CCompendiumGameList::games(int index) const {
  // @@protoc_insertion_point(field_get:CCompendiumGameList.games)
  return games_.Get(index);
}
inline ::CCompendiumGameTimeline* CCompendiumGameList::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:CCompendiumGameList.games)
  return games_.Mutable(index);
}
inline ::CCompendiumGameTimeline* CCompendiumGameList::add_games() {
  // @@protoc_insertion_point(field_add:CCompendiumGameList.games)
  return games_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CCompendiumGameTimeline >&
CCompendiumGameList::games() const {
  // @@protoc_insertion_point(field_list:CCompendiumGameList.games)
  return games_;
}
inline ::google::protobuf::RepeatedPtrField< ::CCompendiumGameTimeline >*
CCompendiumGameList::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:CCompendiumGameList.games)
  return &games_;
}

// -------------------------------------------------------------------

// CAdditionalEquipSlot

// optional uint32 class_id = 1;
inline bool CAdditionalEquipSlot::has_class_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAdditionalEquipSlot::set_has_class_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAdditionalEquipSlot::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAdditionalEquipSlot::clear_class_id() {
  class_id_ = 0u;
  clear_has_class_id();
}
inline ::google::protobuf::uint32 CAdditionalEquipSlot::class_id() const {
  // @@protoc_insertion_point(field_get:CAdditionalEquipSlot.class_id)
  return class_id_;
}
inline void CAdditionalEquipSlot::set_class_id(::google::protobuf::uint32 value) {
  set_has_class_id();
  class_id_ = value;
  // @@protoc_insertion_point(field_set:CAdditionalEquipSlot.class_id)
}

// optional uint32 slot_id = 2;
inline bool CAdditionalEquipSlot::has_slot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAdditionalEquipSlot::set_has_slot_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAdditionalEquipSlot::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAdditionalEquipSlot::clear_slot_id() {
  slot_id_ = 0u;
  clear_has_slot_id();
}
inline ::google::protobuf::uint32 CAdditionalEquipSlot::slot_id() const {
  // @@protoc_insertion_point(field_get:CAdditionalEquipSlot.slot_id)
  return slot_id_;
}
inline void CAdditionalEquipSlot::set_slot_id(::google::protobuf::uint32 value) {
  set_has_slot_id();
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:CAdditionalEquipSlot.slot_id)
}

// optional uint32 def_index = 3;
inline bool CAdditionalEquipSlot::has_def_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CAdditionalEquipSlot::set_has_def_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CAdditionalEquipSlot::clear_has_def_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CAdditionalEquipSlot::clear_def_index() {
  def_index_ = 0u;
  clear_has_def_index();
}
inline ::google::protobuf::uint32 CAdditionalEquipSlot::def_index() const {
  // @@protoc_insertion_point(field_get:CAdditionalEquipSlot.def_index)
  return def_index_;
}
inline void CAdditionalEquipSlot::set_def_index(::google::protobuf::uint32 value) {
  set_has_def_index();
  def_index_ = value;
  // @@protoc_insertion_point(field_set:CAdditionalEquipSlot.def_index)
}

// -------------------------------------------------------------------

// CMsgDOTARedeemItem

// optional uint64 currency_id = 1;
inline bool CMsgDOTARedeemItem::has_currency_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARedeemItem::set_has_currency_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARedeemItem::clear_has_currency_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARedeemItem::clear_currency_id() {
  currency_id_ = GOOGLE_ULONGLONG(0);
  clear_has_currency_id();
}
inline ::google::protobuf::uint64 CMsgDOTARedeemItem::currency_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARedeemItem.currency_id)
  return currency_id_;
}
inline void CMsgDOTARedeemItem::set_currency_id(::google::protobuf::uint64 value) {
  set_has_currency_id();
  currency_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARedeemItem.currency_id)
}

// optional uint32 purchase_def = 2;
inline bool CMsgDOTARedeemItem::has_purchase_def() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARedeemItem::set_has_purchase_def() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARedeemItem::clear_has_purchase_def() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARedeemItem::clear_purchase_def() {
  purchase_def_ = 0u;
  clear_has_purchase_def();
}
inline ::google::protobuf::uint32 CMsgDOTARedeemItem::purchase_def() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARedeemItem.purchase_def)
  return purchase_def_;
}
inline void CMsgDOTARedeemItem::set_purchase_def(::google::protobuf::uint32 value) {
  set_has_purchase_def();
  purchase_def_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARedeemItem.purchase_def)
}

// -------------------------------------------------------------------

// CMsgDOTARedeemItemResponse

// -------------------------------------------------------------------

// CMsgDOTACombatLogEntry

// optional .DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_DAMAGE];
inline bool CMsgDOTACombatLogEntry::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTACombatLogEntry::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTACombatLogEntry::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::DOTA_COMBATLOG_TYPES CMsgDOTACombatLogEntry::type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.type)
  return static_cast< ::DOTA_COMBATLOG_TYPES >(type_);
}
inline void CMsgDOTACombatLogEntry::set_type(::DOTA_COMBATLOG_TYPES value) {
  assert(::DOTA_COMBATLOG_TYPES_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.type)
}

// optional uint32 target_name = 2;
inline bool CMsgDOTACombatLogEntry::has_target_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_target_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTACombatLogEntry::clear_has_target_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTACombatLogEntry::clear_target_name() {
  target_name_ = 0u;
  clear_has_target_name();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::target_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.target_name)
  return target_name_;
}
inline void CMsgDOTACombatLogEntry::set_target_name(::google::protobuf::uint32 value) {
  set_has_target_name();
  target_name_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.target_name)
}

// optional uint32 target_source_name = 3;
inline bool CMsgDOTACombatLogEntry::has_target_source_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_target_source_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTACombatLogEntry::clear_has_target_source_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTACombatLogEntry::clear_target_source_name() {
  target_source_name_ = 0u;
  clear_has_target_source_name();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::target_source_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.target_source_name)
  return target_source_name_;
}
inline void CMsgDOTACombatLogEntry::set_target_source_name(::google::protobuf::uint32 value) {
  set_has_target_source_name();
  target_source_name_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.target_source_name)
}

// optional uint32 attacker_name = 4;
inline bool CMsgDOTACombatLogEntry::has_attacker_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_attacker_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTACombatLogEntry::clear_has_attacker_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTACombatLogEntry::clear_attacker_name() {
  attacker_name_ = 0u;
  clear_has_attacker_name();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::attacker_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.attacker_name)
  return attacker_name_;
}
inline void CMsgDOTACombatLogEntry::set_attacker_name(::google::protobuf::uint32 value) {
  set_has_attacker_name();
  attacker_name_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.attacker_name)
}

// optional uint32 damage_source_name = 5;
inline bool CMsgDOTACombatLogEntry::has_damage_source_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_damage_source_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTACombatLogEntry::clear_has_damage_source_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTACombatLogEntry::clear_damage_source_name() {
  damage_source_name_ = 0u;
  clear_has_damage_source_name();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::damage_source_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.damage_source_name)
  return damage_source_name_;
}
inline void CMsgDOTACombatLogEntry::set_damage_source_name(::google::protobuf::uint32 value) {
  set_has_damage_source_name();
  damage_source_name_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.damage_source_name)
}

// optional uint32 inflictor_name = 6;
inline bool CMsgDOTACombatLogEntry::has_inflictor_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_inflictor_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTACombatLogEntry::clear_has_inflictor_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTACombatLogEntry::clear_inflictor_name() {
  inflictor_name_ = 0u;
  clear_has_inflictor_name();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::inflictor_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.inflictor_name)
  return inflictor_name_;
}
inline void CMsgDOTACombatLogEntry::set_inflictor_name(::google::protobuf::uint32 value) {
  set_has_inflictor_name();
  inflictor_name_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.inflictor_name)
}

// optional bool is_attacker_illusion = 7;
inline bool CMsgDOTACombatLogEntry::has_is_attacker_illusion() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_is_attacker_illusion() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTACombatLogEntry::clear_has_is_attacker_illusion() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTACombatLogEntry::clear_is_attacker_illusion() {
  is_attacker_illusion_ = false;
  clear_has_is_attacker_illusion();
}
inline bool CMsgDOTACombatLogEntry::is_attacker_illusion() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_attacker_illusion)
  return is_attacker_illusion_;
}
inline void CMsgDOTACombatLogEntry::set_is_attacker_illusion(bool value) {
  set_has_is_attacker_illusion();
  is_attacker_illusion_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_attacker_illusion)
}

// optional bool is_attacker_hero = 8;
inline bool CMsgDOTACombatLogEntry::has_is_attacker_hero() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_is_attacker_hero() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTACombatLogEntry::clear_has_is_attacker_hero() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTACombatLogEntry::clear_is_attacker_hero() {
  is_attacker_hero_ = false;
  clear_has_is_attacker_hero();
}
inline bool CMsgDOTACombatLogEntry::is_attacker_hero() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_attacker_hero)
  return is_attacker_hero_;
}
inline void CMsgDOTACombatLogEntry::set_is_attacker_hero(bool value) {
  set_has_is_attacker_hero();
  is_attacker_hero_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_attacker_hero)
}

// optional bool is_target_illusion = 9;
inline bool CMsgDOTACombatLogEntry::has_is_target_illusion() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_is_target_illusion() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTACombatLogEntry::clear_has_is_target_illusion() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTACombatLogEntry::clear_is_target_illusion() {
  is_target_illusion_ = false;
  clear_has_is_target_illusion();
}
inline bool CMsgDOTACombatLogEntry::is_target_illusion() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_target_illusion)
  return is_target_illusion_;
}
inline void CMsgDOTACombatLogEntry::set_is_target_illusion(bool value) {
  set_has_is_target_illusion();
  is_target_illusion_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_target_illusion)
}

// optional bool is_target_hero = 10;
inline bool CMsgDOTACombatLogEntry::has_is_target_hero() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_is_target_hero() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTACombatLogEntry::clear_has_is_target_hero() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTACombatLogEntry::clear_is_target_hero() {
  is_target_hero_ = false;
  clear_has_is_target_hero();
}
inline bool CMsgDOTACombatLogEntry::is_target_hero() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_target_hero)
  return is_target_hero_;
}
inline void CMsgDOTACombatLogEntry::set_is_target_hero(bool value) {
  set_has_is_target_hero();
  is_target_hero_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_target_hero)
}

// optional bool is_visible_radiant = 11;
inline bool CMsgDOTACombatLogEntry::has_is_visible_radiant() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_is_visible_radiant() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgDOTACombatLogEntry::clear_has_is_visible_radiant() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgDOTACombatLogEntry::clear_is_visible_radiant() {
  is_visible_radiant_ = false;
  clear_has_is_visible_radiant();
}
inline bool CMsgDOTACombatLogEntry::is_visible_radiant() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_visible_radiant)
  return is_visible_radiant_;
}
inline void CMsgDOTACombatLogEntry::set_is_visible_radiant(bool value) {
  set_has_is_visible_radiant();
  is_visible_radiant_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_visible_radiant)
}

// optional bool is_visible_dire = 12;
inline bool CMsgDOTACombatLogEntry::has_is_visible_dire() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_is_visible_dire() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgDOTACombatLogEntry::clear_has_is_visible_dire() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgDOTACombatLogEntry::clear_is_visible_dire() {
  is_visible_dire_ = false;
  clear_has_is_visible_dire();
}
inline bool CMsgDOTACombatLogEntry::is_visible_dire() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_visible_dire)
  return is_visible_dire_;
}
inline void CMsgDOTACombatLogEntry::set_is_visible_dire(bool value) {
  set_has_is_visible_dire();
  is_visible_dire_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_visible_dire)
}

// optional uint32 value = 13;
inline bool CMsgDOTACombatLogEntry::has_value() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_value() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_value() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgDOTACombatLogEntry::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::value() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.value)
  return value_;
}
inline void CMsgDOTACombatLogEntry::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.value)
}

// optional int32 health = 14;
inline bool CMsgDOTACombatLogEntry::has_health() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_health() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_health() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgDOTACombatLogEntry::clear_health() {
  health_ = 0;
  clear_has_health();
}
inline ::google::protobuf::int32 CMsgDOTACombatLogEntry::health() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.health)
  return health_;
}
inline void CMsgDOTACombatLogEntry::set_health(::google::protobuf::int32 value) {
  set_has_health();
  health_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.health)
}

// optional float timestamp = 15;
inline bool CMsgDOTACombatLogEntry::has_timestamp() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_timestamp() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgDOTACombatLogEntry::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline float CMsgDOTACombatLogEntry::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.timestamp)
  return timestamp_;
}
inline void CMsgDOTACombatLogEntry::set_timestamp(float value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.timestamp)
}

// optional float stun_duration = 16;
inline bool CMsgDOTACombatLogEntry::has_stun_duration() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_stun_duration() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_stun_duration() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgDOTACombatLogEntry::clear_stun_duration() {
  stun_duration_ = 0;
  clear_has_stun_duration();
}
inline float CMsgDOTACombatLogEntry::stun_duration() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.stun_duration)
  return stun_duration_;
}
inline void CMsgDOTACombatLogEntry::set_stun_duration(float value) {
  set_has_stun_duration();
  stun_duration_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.stun_duration)
}

// optional float slow_duration = 17;
inline bool CMsgDOTACombatLogEntry::has_slow_duration() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_slow_duration() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_slow_duration() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgDOTACombatLogEntry::clear_slow_duration() {
  slow_duration_ = 0;
  clear_has_slow_duration();
}
inline float CMsgDOTACombatLogEntry::slow_duration() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.slow_duration)
  return slow_duration_;
}
inline void CMsgDOTACombatLogEntry::set_slow_duration(float value) {
  set_has_slow_duration();
  slow_duration_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.slow_duration)
}

// optional bool is_ability_toggle_on = 18;
inline bool CMsgDOTACombatLogEntry::has_is_ability_toggle_on() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_is_ability_toggle_on() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_is_ability_toggle_on() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgDOTACombatLogEntry::clear_is_ability_toggle_on() {
  is_ability_toggle_on_ = false;
  clear_has_is_ability_toggle_on();
}
inline bool CMsgDOTACombatLogEntry::is_ability_toggle_on() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_ability_toggle_on)
  return is_ability_toggle_on_;
}
inline void CMsgDOTACombatLogEntry::set_is_ability_toggle_on(bool value) {
  set_has_is_ability_toggle_on();
  is_ability_toggle_on_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_ability_toggle_on)
}

// optional bool is_ability_toggle_off = 19;
inline bool CMsgDOTACombatLogEntry::has_is_ability_toggle_off() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_is_ability_toggle_off() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_is_ability_toggle_off() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgDOTACombatLogEntry::clear_is_ability_toggle_off() {
  is_ability_toggle_off_ = false;
  clear_has_is_ability_toggle_off();
}
inline bool CMsgDOTACombatLogEntry::is_ability_toggle_off() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_ability_toggle_off)
  return is_ability_toggle_off_;
}
inline void CMsgDOTACombatLogEntry::set_is_ability_toggle_off(bool value) {
  set_has_is_ability_toggle_off();
  is_ability_toggle_off_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_ability_toggle_off)
}

// optional uint32 ability_level = 20;
inline bool CMsgDOTACombatLogEntry::has_ability_level() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_ability_level() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_ability_level() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgDOTACombatLogEntry::clear_ability_level() {
  ability_level_ = 0u;
  clear_has_ability_level();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::ability_level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.ability_level)
  return ability_level_;
}
inline void CMsgDOTACombatLogEntry::set_ability_level(::google::protobuf::uint32 value) {
  set_has_ability_level();
  ability_level_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.ability_level)
}

// optional float location_x = 21;
inline bool CMsgDOTACombatLogEntry::has_location_x() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_location_x() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_location_x() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMsgDOTACombatLogEntry::clear_location_x() {
  location_x_ = 0;
  clear_has_location_x();
}
inline float CMsgDOTACombatLogEntry::location_x() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.location_x)
  return location_x_;
}
inline void CMsgDOTACombatLogEntry::set_location_x(float value) {
  set_has_location_x();
  location_x_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.location_x)
}

// optional float location_y = 22;
inline bool CMsgDOTACombatLogEntry::has_location_y() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_location_y() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_location_y() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMsgDOTACombatLogEntry::clear_location_y() {
  location_y_ = 0;
  clear_has_location_y();
}
inline float CMsgDOTACombatLogEntry::location_y() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.location_y)
  return location_y_;
}
inline void CMsgDOTACombatLogEntry::set_location_y(float value) {
  set_has_location_y();
  location_y_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.location_y)
}

// optional uint32 gold_reason = 23;
inline bool CMsgDOTACombatLogEntry::has_gold_reason() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_gold_reason() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_gold_reason() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CMsgDOTACombatLogEntry::clear_gold_reason() {
  gold_reason_ = 0u;
  clear_has_gold_reason();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::gold_reason() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.gold_reason)
  return gold_reason_;
}
inline void CMsgDOTACombatLogEntry::set_gold_reason(::google::protobuf::uint32 value) {
  set_has_gold_reason();
  gold_reason_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.gold_reason)
}

// optional float timestamp_raw = 24;
inline bool CMsgDOTACombatLogEntry::has_timestamp_raw() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_timestamp_raw() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_timestamp_raw() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CMsgDOTACombatLogEntry::clear_timestamp_raw() {
  timestamp_raw_ = 0;
  clear_has_timestamp_raw();
}
inline float CMsgDOTACombatLogEntry::timestamp_raw() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.timestamp_raw)
  return timestamp_raw_;
}
inline void CMsgDOTACombatLogEntry::set_timestamp_raw(float value) {
  set_has_timestamp_raw();
  timestamp_raw_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.timestamp_raw)
}

// optional float modifier_duration = 25;
inline bool CMsgDOTACombatLogEntry::has_modifier_duration() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_modifier_duration() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_modifier_duration() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CMsgDOTACombatLogEntry::clear_modifier_duration() {
  modifier_duration_ = 0;
  clear_has_modifier_duration();
}
inline float CMsgDOTACombatLogEntry::modifier_duration() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.modifier_duration)
  return modifier_duration_;
}
inline void CMsgDOTACombatLogEntry::set_modifier_duration(float value) {
  set_has_modifier_duration();
  modifier_duration_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.modifier_duration)
}

// optional uint32 xp_reason = 26;
inline bool CMsgDOTACombatLogEntry::has_xp_reason() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_xp_reason() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_xp_reason() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CMsgDOTACombatLogEntry::clear_xp_reason() {
  xp_reason_ = 0u;
  clear_has_xp_reason();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::xp_reason() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.xp_reason)
  return xp_reason_;
}
inline void CMsgDOTACombatLogEntry::set_xp_reason(::google::protobuf::uint32 value) {
  set_has_xp_reason();
  xp_reason_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.xp_reason)
}

// optional uint32 last_hits = 27;
inline bool CMsgDOTACombatLogEntry::has_last_hits() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_last_hits() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_last_hits() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CMsgDOTACombatLogEntry::clear_last_hits() {
  last_hits_ = 0u;
  clear_has_last_hits();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::last_hits() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.last_hits)
  return last_hits_;
}
inline void CMsgDOTACombatLogEntry::set_last_hits(::google::protobuf::uint32 value) {
  set_has_last_hits();
  last_hits_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.last_hits)
}

// optional uint32 attacker_team = 28;
inline bool CMsgDOTACombatLogEntry::has_attacker_team() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_attacker_team() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_attacker_team() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CMsgDOTACombatLogEntry::clear_attacker_team() {
  attacker_team_ = 0u;
  clear_has_attacker_team();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::attacker_team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.attacker_team)
  return attacker_team_;
}
inline void CMsgDOTACombatLogEntry::set_attacker_team(::google::protobuf::uint32 value) {
  set_has_attacker_team();
  attacker_team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.attacker_team)
}

// optional uint32 target_team = 29;
inline bool CMsgDOTACombatLogEntry::has_target_team() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_target_team() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_target_team() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CMsgDOTACombatLogEntry::clear_target_team() {
  target_team_ = 0u;
  clear_has_target_team();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::target_team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.target_team)
  return target_team_;
}
inline void CMsgDOTACombatLogEntry::set_target_team(::google::protobuf::uint32 value) {
  set_has_target_team();
  target_team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.target_team)
}

// optional uint32 obs_wards_placed = 30;
inline bool CMsgDOTACombatLogEntry::has_obs_wards_placed() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_obs_wards_placed() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_obs_wards_placed() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CMsgDOTACombatLogEntry::clear_obs_wards_placed() {
  obs_wards_placed_ = 0u;
  clear_has_obs_wards_placed();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::obs_wards_placed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.obs_wards_placed)
  return obs_wards_placed_;
}
inline void CMsgDOTACombatLogEntry::set_obs_wards_placed(::google::protobuf::uint32 value) {
  set_has_obs_wards_placed();
  obs_wards_placed_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.obs_wards_placed)
}

// optional uint32 assist_player0 = 31;
inline bool CMsgDOTACombatLogEntry::has_assist_player0() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_assist_player0() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_assist_player0() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CMsgDOTACombatLogEntry::clear_assist_player0() {
  assist_player0_ = 0u;
  clear_has_assist_player0();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::assist_player0() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.assist_player0)
  return assist_player0_;
}
inline void CMsgDOTACombatLogEntry::set_assist_player0(::google::protobuf::uint32 value) {
  set_has_assist_player0();
  assist_player0_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.assist_player0)
}

// optional uint32 assist_player1 = 32;
inline bool CMsgDOTACombatLogEntry::has_assist_player1() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_assist_player1() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_assist_player1() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CMsgDOTACombatLogEntry::clear_assist_player1() {
  assist_player1_ = 0u;
  clear_has_assist_player1();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::assist_player1() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.assist_player1)
  return assist_player1_;
}
inline void CMsgDOTACombatLogEntry::set_assist_player1(::google::protobuf::uint32 value) {
  set_has_assist_player1();
  assist_player1_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.assist_player1)
}

// optional uint32 assist_player2 = 33;
inline bool CMsgDOTACombatLogEntry::has_assist_player2() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_assist_player2() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CMsgDOTACombatLogEntry::clear_has_assist_player2() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CMsgDOTACombatLogEntry::clear_assist_player2() {
  assist_player2_ = 0u;
  clear_has_assist_player2();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::assist_player2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.assist_player2)
  return assist_player2_;
}
inline void CMsgDOTACombatLogEntry::set_assist_player2(::google::protobuf::uint32 value) {
  set_has_assist_player2();
  assist_player2_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.assist_player2)
}

// optional uint32 assist_player3 = 34;
inline bool CMsgDOTACombatLogEntry::has_assist_player3() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_assist_player3() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CMsgDOTACombatLogEntry::clear_has_assist_player3() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CMsgDOTACombatLogEntry::clear_assist_player3() {
  assist_player3_ = 0u;
  clear_has_assist_player3();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::assist_player3() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.assist_player3)
  return assist_player3_;
}
inline void CMsgDOTACombatLogEntry::set_assist_player3(::google::protobuf::uint32 value) {
  set_has_assist_player3();
  assist_player3_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.assist_player3)
}

// optional uint32 stack_count = 35;
inline bool CMsgDOTACombatLogEntry::has_stack_count() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_stack_count() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CMsgDOTACombatLogEntry::clear_has_stack_count() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CMsgDOTACombatLogEntry::clear_stack_count() {
  stack_count_ = 0u;
  clear_has_stack_count();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::stack_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.stack_count)
  return stack_count_;
}
inline void CMsgDOTACombatLogEntry::set_stack_count(::google::protobuf::uint32 value) {
  set_has_stack_count();
  stack_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.stack_count)
}

// optional bool hidden_modifier = 36;
inline bool CMsgDOTACombatLogEntry::has_hidden_modifier() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_hidden_modifier() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CMsgDOTACombatLogEntry::clear_has_hidden_modifier() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CMsgDOTACombatLogEntry::clear_hidden_modifier() {
  hidden_modifier_ = false;
  clear_has_hidden_modifier();
}
inline bool CMsgDOTACombatLogEntry::hidden_modifier() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.hidden_modifier)
  return hidden_modifier_;
}
inline void CMsgDOTACombatLogEntry::set_hidden_modifier(bool value) {
  set_has_hidden_modifier();
  hidden_modifier_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.hidden_modifier)
}

// optional bool is_target_building = 37;
inline bool CMsgDOTACombatLogEntry::has_is_target_building() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_is_target_building() {
  _has_bits_[1] |= 0x00000010u;
}
inline void CMsgDOTACombatLogEntry::clear_has_is_target_building() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void CMsgDOTACombatLogEntry::clear_is_target_building() {
  is_target_building_ = false;
  clear_has_is_target_building();
}
inline bool CMsgDOTACombatLogEntry::is_target_building() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_target_building)
  return is_target_building_;
}
inline void CMsgDOTACombatLogEntry::set_is_target_building(bool value) {
  set_has_is_target_building();
  is_target_building_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_target_building)
}

// optional uint32 neutral_camp_type = 38;
inline bool CMsgDOTACombatLogEntry::has_neutral_camp_type() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_neutral_camp_type() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CMsgDOTACombatLogEntry::clear_has_neutral_camp_type() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CMsgDOTACombatLogEntry::clear_neutral_camp_type() {
  neutral_camp_type_ = 0u;
  clear_has_neutral_camp_type();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::neutral_camp_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.neutral_camp_type)
  return neutral_camp_type_;
}
inline void CMsgDOTACombatLogEntry::set_neutral_camp_type(::google::protobuf::uint32 value) {
  set_has_neutral_camp_type();
  neutral_camp_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.neutral_camp_type)
}

// optional uint32 rune_type = 39;
inline bool CMsgDOTACombatLogEntry::has_rune_type() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_rune_type() {
  _has_bits_[1] |= 0x00000040u;
}
inline void CMsgDOTACombatLogEntry::clear_has_rune_type() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void CMsgDOTACombatLogEntry::clear_rune_type() {
  rune_type_ = 0u;
  clear_has_rune_type();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::rune_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.rune_type)
  return rune_type_;
}
inline void CMsgDOTACombatLogEntry::set_rune_type(::google::protobuf::uint32 value) {
  set_has_rune_type();
  rune_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.rune_type)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Trophy

// optional uint32 trophy_id = 1;
inline bool CMsgDOTAProfileCard_Slot_Trophy::has_trophy_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Trophy::set_has_trophy_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAProfileCard_Slot_Trophy::clear_has_trophy_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAProfileCard_Slot_Trophy::clear_trophy_id() {
  trophy_id_ = 0u;
  clear_has_trophy_id();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Trophy::trophy_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Trophy.trophy_id)
  return trophy_id_;
}
inline void CMsgDOTAProfileCard_Slot_Trophy::set_trophy_id(::google::protobuf::uint32 value) {
  set_has_trophy_id();
  trophy_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Trophy.trophy_id)
}

// optional uint32 trophy_score = 2;
inline bool CMsgDOTAProfileCard_Slot_Trophy::has_trophy_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Trophy::set_has_trophy_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAProfileCard_Slot_Trophy::clear_has_trophy_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAProfileCard_Slot_Trophy::clear_trophy_score() {
  trophy_score_ = 0u;
  clear_has_trophy_score();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Trophy::trophy_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Trophy.trophy_score)
  return trophy_score_;
}
inline void CMsgDOTAProfileCard_Slot_Trophy::set_trophy_score(::google::protobuf::uint32 value) {
  set_has_trophy_score();
  trophy_score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Trophy.trophy_score)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Stat

// optional .CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_SoloRank];
inline bool CMsgDOTAProfileCard_Slot_Stat::has_stat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Stat::set_has_stat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAProfileCard_Slot_Stat::clear_has_stat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAProfileCard_Slot_Stat::clear_stat_id() {
  stat_id_ = 1;
  clear_has_stat_id();
}
inline ::CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard_Slot_Stat::stat_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Stat.stat_id)
  return static_cast< ::CMsgDOTAProfileCard_EStatID >(stat_id_);
}
inline void CMsgDOTAProfileCard_Slot_Stat::set_stat_id(::CMsgDOTAProfileCard_EStatID value) {
  assert(::CMsgDOTAProfileCard_EStatID_IsValid(value));
  set_has_stat_id();
  stat_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Stat.stat_id)
}

// optional uint32 stat_score = 2;
inline bool CMsgDOTAProfileCard_Slot_Stat::has_stat_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Stat::set_has_stat_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAProfileCard_Slot_Stat::clear_has_stat_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAProfileCard_Slot_Stat::clear_stat_score() {
  stat_score_ = 0u;
  clear_has_stat_score();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Stat::stat_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Stat.stat_score)
  return stat_score_;
}
inline void CMsgDOTAProfileCard_Slot_Stat::set_stat_score(::google::protobuf::uint32 value) {
  set_has_stat_score();
  stat_score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Stat.stat_score)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Item

// optional bytes serialized_item = 1;
inline bool CMsgDOTAProfileCard_Slot_Item::has_serialized_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Item::set_has_serialized_item() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAProfileCard_Slot_Item::clear_has_serialized_item() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAProfileCard_Slot_Item::clear_serialized_item() {
  if (serialized_item_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_item_->clear();
  }
  clear_has_serialized_item();
}
inline const ::std::string& CMsgDOTAProfileCard_Slot_Item::serialized_item() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Item.serialized_item)
  return *serialized_item_;
}
inline void CMsgDOTAProfileCard_Slot_Item::set_serialized_item(const ::std::string& value) {
  set_has_serialized_item();
  if (serialized_item_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_item_ = new ::std::string;
  }
  serialized_item_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Item.serialized_item)
}
inline void CMsgDOTAProfileCard_Slot_Item::set_serialized_item(const char* value) {
  set_has_serialized_item();
  if (serialized_item_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_item_ = new ::std::string;
  }
  serialized_item_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAProfileCard.Slot.Item.serialized_item)
}
inline void CMsgDOTAProfileCard_Slot_Item::set_serialized_item(const void* value, size_t size) {
  set_has_serialized_item();
  if (serialized_item_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_item_ = new ::std::string;
  }
  serialized_item_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAProfileCard.Slot.Item.serialized_item)
}
inline ::std::string* CMsgDOTAProfileCard_Slot_Item::mutable_serialized_item() {
  set_has_serialized_item();
  if (serialized_item_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_item_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.Item.serialized_item)
  return serialized_item_;
}
inline ::std::string* CMsgDOTAProfileCard_Slot_Item::release_serialized_item() {
  clear_has_serialized_item();
  if (serialized_item_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serialized_item_;
    serialized_item_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAProfileCard_Slot_Item::set_allocated_serialized_item(::std::string* serialized_item) {
  if (serialized_item_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serialized_item_;
  }
  if (serialized_item) {
    set_has_serialized_item();
    serialized_item_ = serialized_item;
  } else {
    clear_has_serialized_item();
    serialized_item_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.Item.serialized_item)
}

// optional uint64 item_id = 2;
inline bool CMsgDOTAProfileCard_Slot_Item::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Item::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAProfileCard_Slot_Item::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAProfileCard_Slot_Item::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
inline ::google::protobuf::uint64 CMsgDOTAProfileCard_Slot_Item::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Item.item_id)
  return item_id_;
}
inline void CMsgDOTAProfileCard_Slot_Item::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Item.item_id)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Hero

// optional uint32 hero_id = 1;
inline bool CMsgDOTAProfileCard_Slot_Hero::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Hero::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAProfileCard_Slot_Hero::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAProfileCard_Slot_Hero::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Hero::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Hero.hero_id)
  return hero_id_;
}
inline void CMsgDOTAProfileCard_Slot_Hero::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Hero.hero_id)
}

// optional uint32 hero_wins = 2;
inline bool CMsgDOTAProfileCard_Slot_Hero::has_hero_wins() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Hero::set_has_hero_wins() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAProfileCard_Slot_Hero::clear_has_hero_wins() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAProfileCard_Slot_Hero::clear_hero_wins() {
  hero_wins_ = 0u;
  clear_has_hero_wins();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Hero::hero_wins() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Hero.hero_wins)
  return hero_wins_;
}
inline void CMsgDOTAProfileCard_Slot_Hero::set_hero_wins(::google::protobuf::uint32 value) {
  set_has_hero_wins();
  hero_wins_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Hero.hero_wins)
}

// optional uint32 hero_losses = 3;
inline bool CMsgDOTAProfileCard_Slot_Hero::has_hero_losses() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Hero::set_has_hero_losses() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAProfileCard_Slot_Hero::clear_has_hero_losses() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAProfileCard_Slot_Hero::clear_hero_losses() {
  hero_losses_ = 0u;
  clear_has_hero_losses();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Hero::hero_losses() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Hero.hero_losses)
  return hero_losses_;
}
inline void CMsgDOTAProfileCard_Slot_Hero::set_hero_losses(::google::protobuf::uint32 value) {
  set_has_hero_losses();
  hero_losses_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Hero.hero_losses)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Emoticon

// optional uint32 emoticon_id = 1;
inline bool CMsgDOTAProfileCard_Slot_Emoticon::has_emoticon_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Emoticon::set_has_emoticon_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAProfileCard_Slot_Emoticon::clear_has_emoticon_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAProfileCard_Slot_Emoticon::clear_emoticon_id() {
  emoticon_id_ = 0u;
  clear_has_emoticon_id();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Emoticon::emoticon_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Emoticon.emoticon_id)
  return emoticon_id_;
}
inline void CMsgDOTAProfileCard_Slot_Emoticon::set_emoticon_id(::google::protobuf::uint32 value) {
  set_has_emoticon_id();
  emoticon_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Emoticon.emoticon_id)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot

// optional uint32 slot_id = 1;
inline bool CMsgDOTAProfileCard_Slot::has_slot_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileCard_Slot::set_has_slot_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAProfileCard_Slot::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAProfileCard_Slot::clear_slot_id() {
  slot_id_ = 0u;
  clear_has_slot_id();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot::slot_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.slot_id)
  return slot_id_;
}
inline void CMsgDOTAProfileCard_Slot::set_slot_id(::google::protobuf::uint32 value) {
  set_has_slot_id();
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.slot_id)
}

// optional .CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
inline bool CMsgDOTAProfileCard_Slot::has_trophy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProfileCard_Slot::set_has_trophy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAProfileCard_Slot::clear_has_trophy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAProfileCard_Slot::clear_trophy() {
  if (trophy_ != NULL) trophy_->::CMsgDOTAProfileCard_Slot_Trophy::Clear();
  clear_has_trophy();
}
inline const ::CMsgDOTAProfileCard_Slot_Trophy& CMsgDOTAProfileCard_Slot::trophy() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.trophy)
  return trophy_ != NULL ? *trophy_ : *default_instance_->trophy_;
}
inline ::CMsgDOTAProfileCard_Slot_Trophy* CMsgDOTAProfileCard_Slot::mutable_trophy() {
  set_has_trophy();
  if (trophy_ == NULL) trophy_ = new ::CMsgDOTAProfileCard_Slot_Trophy;
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.trophy)
  return trophy_;
}
inline ::CMsgDOTAProfileCard_Slot_Trophy* CMsgDOTAProfileCard_Slot::release_trophy() {
  clear_has_trophy();
  ::CMsgDOTAProfileCard_Slot_Trophy* temp = trophy_;
  trophy_ = NULL;
  return temp;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_trophy(::CMsgDOTAProfileCard_Slot_Trophy* trophy) {
  delete trophy_;
  trophy_ = trophy;
  if (trophy) {
    set_has_trophy();
  } else {
    clear_has_trophy();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.trophy)
}

// optional .CMsgDOTAProfileCard.Slot.Stat stat = 3;
inline bool CMsgDOTAProfileCard_Slot::has_stat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAProfileCard_Slot::set_has_stat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAProfileCard_Slot::clear_has_stat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAProfileCard_Slot::clear_stat() {
  if (stat_ != NULL) stat_->::CMsgDOTAProfileCard_Slot_Stat::Clear();
  clear_has_stat();
}
inline const ::CMsgDOTAProfileCard_Slot_Stat& CMsgDOTAProfileCard_Slot::stat() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.stat)
  return stat_ != NULL ? *stat_ : *default_instance_->stat_;
}
inline ::CMsgDOTAProfileCard_Slot_Stat* CMsgDOTAProfileCard_Slot::mutable_stat() {
  set_has_stat();
  if (stat_ == NULL) stat_ = new ::CMsgDOTAProfileCard_Slot_Stat;
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.stat)
  return stat_;
}
inline ::CMsgDOTAProfileCard_Slot_Stat* CMsgDOTAProfileCard_Slot::release_stat() {
  clear_has_stat();
  ::CMsgDOTAProfileCard_Slot_Stat* temp = stat_;
  stat_ = NULL;
  return temp;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_stat(::CMsgDOTAProfileCard_Slot_Stat* stat) {
  delete stat_;
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.stat)
}

// optional .CMsgDOTAProfileCard.Slot.Item item = 4;
inline bool CMsgDOTAProfileCard_Slot::has_item() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAProfileCard_Slot::set_has_item() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAProfileCard_Slot::clear_has_item() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAProfileCard_Slot::clear_item() {
  if (item_ != NULL) item_->::CMsgDOTAProfileCard_Slot_Item::Clear();
  clear_has_item();
}
inline const ::CMsgDOTAProfileCard_Slot_Item& CMsgDOTAProfileCard_Slot::item() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.item)
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::CMsgDOTAProfileCard_Slot_Item* CMsgDOTAProfileCard_Slot::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::CMsgDOTAProfileCard_Slot_Item;
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.item)
  return item_;
}
inline ::CMsgDOTAProfileCard_Slot_Item* CMsgDOTAProfileCard_Slot::release_item() {
  clear_has_item();
  ::CMsgDOTAProfileCard_Slot_Item* temp = item_;
  item_ = NULL;
  return temp;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_item(::CMsgDOTAProfileCard_Slot_Item* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.item)
}

// optional .CMsgDOTAProfileCard.Slot.Hero hero = 5;
inline bool CMsgDOTAProfileCard_Slot::has_hero() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAProfileCard_Slot::set_has_hero() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAProfileCard_Slot::clear_has_hero() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAProfileCard_Slot::clear_hero() {
  if (hero_ != NULL) hero_->::CMsgDOTAProfileCard_Slot_Hero::Clear();
  clear_has_hero();
}
inline const ::CMsgDOTAProfileCard_Slot_Hero& CMsgDOTAProfileCard_Slot::hero() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.hero)
  return hero_ != NULL ? *hero_ : *default_instance_->hero_;
}
inline ::CMsgDOTAProfileCard_Slot_Hero* CMsgDOTAProfileCard_Slot::mutable_hero() {
  set_has_hero();
  if (hero_ == NULL) hero_ = new ::CMsgDOTAProfileCard_Slot_Hero;
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.hero)
  return hero_;
}
inline ::CMsgDOTAProfileCard_Slot_Hero* CMsgDOTAProfileCard_Slot::release_hero() {
  clear_has_hero();
  ::CMsgDOTAProfileCard_Slot_Hero* temp = hero_;
  hero_ = NULL;
  return temp;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_hero(::CMsgDOTAProfileCard_Slot_Hero* hero) {
  delete hero_;
  hero_ = hero;
  if (hero) {
    set_has_hero();
  } else {
    clear_has_hero();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.hero)
}

// optional .CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
inline bool CMsgDOTAProfileCard_Slot::has_emoticon() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAProfileCard_Slot::set_has_emoticon() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAProfileCard_Slot::clear_has_emoticon() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAProfileCard_Slot::clear_emoticon() {
  if (emoticon_ != NULL) emoticon_->::CMsgDOTAProfileCard_Slot_Emoticon::Clear();
  clear_has_emoticon();
}
inline const ::CMsgDOTAProfileCard_Slot_Emoticon& CMsgDOTAProfileCard_Slot::emoticon() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.emoticon)
  return emoticon_ != NULL ? *emoticon_ : *default_instance_->emoticon_;
}
inline ::CMsgDOTAProfileCard_Slot_Emoticon* CMsgDOTAProfileCard_Slot::mutable_emoticon() {
  set_has_emoticon();
  if (emoticon_ == NULL) emoticon_ = new ::CMsgDOTAProfileCard_Slot_Emoticon;
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.emoticon)
  return emoticon_;
}
inline ::CMsgDOTAProfileCard_Slot_Emoticon* CMsgDOTAProfileCard_Slot::release_emoticon() {
  clear_has_emoticon();
  ::CMsgDOTAProfileCard_Slot_Emoticon* temp = emoticon_;
  emoticon_ = NULL;
  return temp;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_emoticon(::CMsgDOTAProfileCard_Slot_Emoticon* emoticon) {
  delete emoticon_;
  emoticon_ = emoticon;
  if (emoticon) {
    set_has_emoticon();
  } else {
    clear_has_emoticon();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.emoticon)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard

// optional uint32 account_id = 1;
inline bool CMsgDOTAProfileCard::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileCard::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAProfileCard::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAProfileCard::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.account_id)
  return account_id_;
}
inline void CMsgDOTAProfileCard::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.account_id)
}

// optional uint32 background_def_index = 2;
inline bool CMsgDOTAProfileCard::has_background_def_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProfileCard::set_has_background_def_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAProfileCard::clear_has_background_def_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAProfileCard::clear_background_def_index() {
  background_def_index_ = 0u;
  clear_has_background_def_index();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard::background_def_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.background_def_index)
  return background_def_index_;
}
inline void CMsgDOTAProfileCard::set_background_def_index(::google::protobuf::uint32 value) {
  set_has_background_def_index();
  background_def_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.background_def_index)
}

// repeated .CMsgDOTAProfileCard.Slot slots = 3;
inline int CMsgDOTAProfileCard::slots_size() const {
  return slots_.size();
}
inline void CMsgDOTAProfileCard::clear_slots() {
  slots_.Clear();
}
inline const ::CMsgDOTAProfileCard_Slot& CMsgDOTAProfileCard::slots(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.slots)
  return slots_.Get(index);
}
inline ::CMsgDOTAProfileCard_Slot* CMsgDOTAProfileCard::mutable_slots(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.slots)
  return slots_.Mutable(index);
}
inline ::CMsgDOTAProfileCard_Slot* CMsgDOTAProfileCard::add_slots() {
  // @@protoc_insertion_point(field_add:CMsgDOTAProfileCard.slots)
  return slots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProfileCard_Slot >&
CMsgDOTAProfileCard::slots() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAProfileCard.slots)
  return slots_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProfileCard_Slot >*
CMsgDOTAProfileCard::mutable_slots() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAProfileCard.slots)
  return &slots_;
}

// optional uint32 badge_points = 4;
inline bool CMsgDOTAProfileCard::has_badge_points() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAProfileCard::set_has_badge_points() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAProfileCard::clear_has_badge_points() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAProfileCard::clear_badge_points() {
  badge_points_ = 0u;
  clear_has_badge_points();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard::badge_points() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.badge_points)
  return badge_points_;
}
inline void CMsgDOTAProfileCard::set_badge_points(::google::protobuf::uint32 value) {
  set_has_badge_points();
  badge_points_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.badge_points)
}

// optional uint32 event_points = 5;
inline bool CMsgDOTAProfileCard::has_event_points() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAProfileCard::set_has_event_points() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAProfileCard::clear_has_event_points() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAProfileCard::clear_event_points() {
  event_points_ = 0u;
  clear_has_event_points();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard::event_points() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.event_points)
  return event_points_;
}
inline void CMsgDOTAProfileCard::set_event_points(::google::protobuf::uint32 value) {
  set_has_event_points();
  event_points_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.event_points)
}

// optional uint32 event_id = 6;
inline bool CMsgDOTAProfileCard::has_event_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAProfileCard::set_has_event_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAProfileCard::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAProfileCard::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.event_id)
  return event_id_;
}
inline void CMsgDOTAProfileCard::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.event_id)
}

// -------------------------------------------------------------------

// CMsgGCToClientNewBloomTimingUpdated

// optional bool is_active = 1;
inline bool CMsgGCToClientNewBloomTimingUpdated::has_is_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToClientNewBloomTimingUpdated::set_has_is_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToClientNewBloomTimingUpdated::clear_has_is_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToClientNewBloomTimingUpdated::clear_is_active() {
  is_active_ = false;
  clear_has_is_active();
}
inline bool CMsgGCToClientNewBloomTimingUpdated::is_active() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientNewBloomTimingUpdated.is_active)
  return is_active_;
}
inline void CMsgGCToClientNewBloomTimingUpdated::set_is_active(bool value) {
  set_has_is_active();
  is_active_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToClientNewBloomTimingUpdated.is_active)
}

// optional uint32 next_transition_time = 2;
inline bool CMsgGCToClientNewBloomTimingUpdated::has_next_transition_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCToClientNewBloomTimingUpdated::set_has_next_transition_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCToClientNewBloomTimingUpdated::clear_has_next_transition_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCToClientNewBloomTimingUpdated::clear_next_transition_time() {
  next_transition_time_ = 0u;
  clear_has_next_transition_time();
}
inline ::google::protobuf::uint32 CMsgGCToClientNewBloomTimingUpdated::next_transition_time() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientNewBloomTimingUpdated.next_transition_time)
  return next_transition_time_;
}
inline void CMsgGCToClientNewBloomTimingUpdated::set_next_transition_time(::google::protobuf::uint32 value) {
  set_has_next_transition_time();
  next_transition_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToClientNewBloomTimingUpdated.next_transition_time)
}

// optional uint32 bonus_amount = 3;
inline bool CMsgGCToClientNewBloomTimingUpdated::has_bonus_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCToClientNewBloomTimingUpdated::set_has_bonus_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCToClientNewBloomTimingUpdated::clear_has_bonus_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCToClientNewBloomTimingUpdated::clear_bonus_amount() {
  bonus_amount_ = 0u;
  clear_has_bonus_amount();
}
inline ::google::protobuf::uint32 CMsgGCToClientNewBloomTimingUpdated::bonus_amount() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientNewBloomTimingUpdated.bonus_amount)
  return bonus_amount_;
}
inline void CMsgGCToClientNewBloomTimingUpdated::set_bonus_amount(::google::protobuf::uint32 value) {
  set_has_bonus_amount();
  bonus_amount_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToClientNewBloomTimingUpdated.bonus_amount)
}

// optional uint32 standby_duration = 4;
inline bool CMsgGCToClientNewBloomTimingUpdated::has_standby_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCToClientNewBloomTimingUpdated::set_has_standby_duration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCToClientNewBloomTimingUpdated::clear_has_standby_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCToClientNewBloomTimingUpdated::clear_standby_duration() {
  standby_duration_ = 0u;
  clear_has_standby_duration();
}
inline ::google::protobuf::uint32 CMsgGCToClientNewBloomTimingUpdated::standby_duration() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientNewBloomTimingUpdated.standby_duration)
  return standby_duration_;
}
inline void CMsgGCToClientNewBloomTimingUpdated::set_standby_duration(::google::protobuf::uint32 value) {
  set_has_standby_duration();
  standby_duration_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToClientNewBloomTimingUpdated.standby_duration)
}

// optional uint32 transition_time = 5;
inline bool CMsgGCToClientNewBloomTimingUpdated::has_transition_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGCToClientNewBloomTimingUpdated::set_has_transition_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGCToClientNewBloomTimingUpdated::clear_has_transition_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGCToClientNewBloomTimingUpdated::clear_transition_time() {
  transition_time_ = 0u;
  clear_has_transition_time();
}
inline ::google::protobuf::uint32 CMsgGCToClientNewBloomTimingUpdated::transition_time() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientNewBloomTimingUpdated.transition_time)
  return transition_time_;
}
inline void CMsgGCToClientNewBloomTimingUpdated::set_transition_time(::google::protobuf::uint32 value) {
  set_has_transition_time();
  transition_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToClientNewBloomTimingUpdated.transition_time)
}

// -------------------------------------------------------------------

// CSODOTAPlayerChallenge

// optional uint32 account_id = 1;
inline bool CSODOTAPlayerChallenge::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAPlayerChallenge::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAPlayerChallenge::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAPlayerChallenge::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.account_id)
  return account_id_;
}
inline void CSODOTAPlayerChallenge::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.account_id)
}

// optional uint32 event_id = 2;
inline bool CSODOTAPlayerChallenge::has_event_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAPlayerChallenge::set_has_event_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAPlayerChallenge::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAPlayerChallenge::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::event_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.event_id)
  return event_id_;
}
inline void CSODOTAPlayerChallenge::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.event_id)
}

// optional uint32 slot_id = 3;
inline bool CSODOTAPlayerChallenge::has_slot_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTAPlayerChallenge::set_has_slot_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSODOTAPlayerChallenge::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSODOTAPlayerChallenge::clear_slot_id() {
  slot_id_ = 0u;
  clear_has_slot_id();
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::slot_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.slot_id)
  return slot_id_;
}
inline void CSODOTAPlayerChallenge::set_slot_id(::google::protobuf::uint32 value) {
  set_has_slot_id();
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.slot_id)
}

// optional uint32 challenge_type = 4;
inline bool CSODOTAPlayerChallenge::has_challenge_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSODOTAPlayerChallenge::set_has_challenge_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSODOTAPlayerChallenge::clear_has_challenge_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSODOTAPlayerChallenge::clear_challenge_type() {
  challenge_type_ = 0u;
  clear_has_challenge_type();
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::challenge_type() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.challenge_type)
  return challenge_type_;
}
inline void CSODOTAPlayerChallenge::set_challenge_type(::google::protobuf::uint32 value) {
  set_has_challenge_type();
  challenge_type_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.challenge_type)
}

// optional uint32 int_param_0 = 5;
inline bool CSODOTAPlayerChallenge::has_int_param_0() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTAPlayerChallenge::set_has_int_param_0() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSODOTAPlayerChallenge::clear_has_int_param_0() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSODOTAPlayerChallenge::clear_int_param_0() {
  int_param_0_ = 0u;
  clear_has_int_param_0();
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::int_param_0() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.int_param_0)
  return int_param_0_;
}
inline void CSODOTAPlayerChallenge::set_int_param_0(::google::protobuf::uint32 value) {
  set_has_int_param_0();
  int_param_0_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.int_param_0)
}

// optional uint32 int_param_1 = 6;
inline bool CSODOTAPlayerChallenge::has_int_param_1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTAPlayerChallenge::set_has_int_param_1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSODOTAPlayerChallenge::clear_has_int_param_1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSODOTAPlayerChallenge::clear_int_param_1() {
  int_param_1_ = 0u;
  clear_has_int_param_1();
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::int_param_1() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.int_param_1)
  return int_param_1_;
}
inline void CSODOTAPlayerChallenge::set_int_param_1(::google::protobuf::uint32 value) {
  set_has_int_param_1();
  int_param_1_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.int_param_1)
}

// optional uint32 created_time = 7;
inline bool CSODOTAPlayerChallenge::has_created_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSODOTAPlayerChallenge::set_has_created_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSODOTAPlayerChallenge::clear_has_created_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSODOTAPlayerChallenge::clear_created_time() {
  created_time_ = 0u;
  clear_has_created_time();
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::created_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.created_time)
  return created_time_;
}
inline void CSODOTAPlayerChallenge::set_created_time(::google::protobuf::uint32 value) {
  set_has_created_time();
  created_time_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.created_time)
}

// optional uint32 completed = 8;
inline bool CSODOTAPlayerChallenge::has_completed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSODOTAPlayerChallenge::set_has_completed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSODOTAPlayerChallenge::clear_has_completed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSODOTAPlayerChallenge::clear_completed() {
  completed_ = 0u;
  clear_has_completed();
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::completed() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.completed)
  return completed_;
}
inline void CSODOTAPlayerChallenge::set_completed(::google::protobuf::uint32 value) {
  set_has_completed();
  completed_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.completed)
}

// optional uint32 sequence_id = 9;
inline bool CSODOTAPlayerChallenge::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSODOTAPlayerChallenge::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSODOTAPlayerChallenge::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSODOTAPlayerChallenge::clear_sequence_id() {
  sequence_id_ = 0u;
  clear_has_sequence_id();
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::sequence_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.sequence_id)
  return sequence_id_;
}
inline void CSODOTAPlayerChallenge::set_sequence_id(::google::protobuf::uint32 value) {
  set_has_sequence_id();
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.sequence_id)
}

// optional uint32 challenge_tier = 10;
inline bool CSODOTAPlayerChallenge::has_challenge_tier() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSODOTAPlayerChallenge::set_has_challenge_tier() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSODOTAPlayerChallenge::clear_has_challenge_tier() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSODOTAPlayerChallenge::clear_challenge_tier() {
  challenge_tier_ = 0u;
  clear_has_challenge_tier();
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::challenge_tier() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.challenge_tier)
  return challenge_tier_;
}
inline void CSODOTAPlayerChallenge::set_challenge_tier(::google::protobuf::uint32 value) {
  set_has_challenge_tier();
  challenge_tier_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.challenge_tier)
}

// optional uint32 flags = 11;
inline bool CSODOTAPlayerChallenge::has_flags() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSODOTAPlayerChallenge::set_has_flags() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSODOTAPlayerChallenge::clear_has_flags() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSODOTAPlayerChallenge::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::flags() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.flags)
  return flags_;
}
inline void CSODOTAPlayerChallenge::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.flags)
}

// -------------------------------------------------------------------

// CMsgClientToGCRerollPlayerChallenge

// optional uint32 event_id = 1;
inline bool CMsgClientToGCRerollPlayerChallenge::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientToGCRerollPlayerChallenge::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientToGCRerollPlayerChallenge::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientToGCRerollPlayerChallenge::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
inline ::google::protobuf::uint32 CMsgClientToGCRerollPlayerChallenge::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCRerollPlayerChallenge.event_id)
  return event_id_;
}
inline void CMsgClientToGCRerollPlayerChallenge::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientToGCRerollPlayerChallenge.event_id)
}

// optional uint32 sequence_id = 3;
inline bool CMsgClientToGCRerollPlayerChallenge::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientToGCRerollPlayerChallenge::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientToGCRerollPlayerChallenge::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientToGCRerollPlayerChallenge::clear_sequence_id() {
  sequence_id_ = 0u;
  clear_has_sequence_id();
}
inline ::google::protobuf::uint32 CMsgClientToGCRerollPlayerChallenge::sequence_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCRerollPlayerChallenge.sequence_id)
  return sequence_id_;
}
inline void CMsgClientToGCRerollPlayerChallenge::set_sequence_id(::google::protobuf::uint32 value) {
  set_has_sequence_id();
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientToGCRerollPlayerChallenge.sequence_id)
}

// -------------------------------------------------------------------

// CMsgGCRerollPlayerChallengeResponse

// optional .CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
inline bool CMsgGCRerollPlayerChallengeResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCRerollPlayerChallengeResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCRerollPlayerChallengeResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCRerollPlayerChallengeResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgGCRerollPlayerChallengeResponse.result)
  return static_cast< ::CMsgGCRerollPlayerChallengeResponse_EResult >(result_);
}
inline void CMsgGCRerollPlayerChallengeResponse::set_result(::CMsgGCRerollPlayerChallengeResponse_EResult value) {
  assert(::CMsgGCRerollPlayerChallengeResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCRerollPlayerChallengeResponse.result)
}

// -------------------------------------------------------------------

// CMsgGCTopCustomGamesList

// repeated uint64 top_custom_games = 1;
inline int CMsgGCTopCustomGamesList::top_custom_games_size() const {
  return top_custom_games_.size();
}
inline void CMsgGCTopCustomGamesList::clear_top_custom_games() {
  top_custom_games_.Clear();
}
inline ::google::protobuf::uint64 CMsgGCTopCustomGamesList::top_custom_games(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCTopCustomGamesList.top_custom_games)
  return top_custom_games_.Get(index);
}
inline void CMsgGCTopCustomGamesList::set_top_custom_games(int index, ::google::protobuf::uint64 value) {
  top_custom_games_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCTopCustomGamesList.top_custom_games)
}
inline void CMsgGCTopCustomGamesList::add_top_custom_games(::google::protobuf::uint64 value) {
  top_custom_games_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgGCTopCustomGamesList.top_custom_games)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgGCTopCustomGamesList::top_custom_games() const {
  // @@protoc_insertion_point(field_list:CMsgGCTopCustomGamesList.top_custom_games)
  return top_custom_games_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgGCTopCustomGamesList::mutable_top_custom_games() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCTopCustomGamesList.top_custom_games)
  return &top_custom_games_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_TeamDetails

// optional uint32 team_number = 1;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_has_team_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_team_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_number() {
  team_number_ = 0u;
  clear_has_team_number();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_TeamDetails::team_number() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.team_number)
  return team_number_;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_number(::google::protobuf::uint32 value) {
  set_has_team_number();
  team_number_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.team_number)
}

// optional uint32 team_id = 2;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_TeamDetails::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.team_id)
  return team_id_;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.team_id)
}

// optional string team_name = 3;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_has_team_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& CMsgDOTARealtimeGameStats_TeamDetails::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.team_name)
  return *team_name_;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.team_name)
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTARealtimeGameStats.TeamDetails.team_name)
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTARealtimeGameStats.TeamDetails.team_name)
}
inline ::std::string* CMsgDOTARealtimeGameStats_TeamDetails::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.TeamDetails.team_name)
  return team_name_;
}
inline ::std::string* CMsgDOTARealtimeGameStats_TeamDetails::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_allocated_team_name(::std::string* team_name) {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_;
  }
  if (team_name) {
    set_has_team_name();
    team_name_ = team_name;
  } else {
    clear_has_team_name();
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStats.TeamDetails.team_name)
}

// optional fixed64 team_logo = 4;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_logo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_has_team_logo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_team_logo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_logo() {
  team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo();
}
inline ::google::protobuf::uint64 CMsgDOTARealtimeGameStats_TeamDetails::team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.team_logo)
  return team_logo_;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_logo(::google::protobuf::uint64 value) {
  set_has_team_logo();
  team_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.team_logo)
}

// optional uint32 score = 5;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_TeamDetails::score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.score)
  return score_;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.score)
}

// repeated .CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
inline int CMsgDOTARealtimeGameStats_TeamDetails::players_size() const {
  return players_.size();
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_players() {
  players_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_PlayerDetails& CMsgDOTARealtimeGameStats_TeamDetails::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.players)
  return players_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_PlayerDetails* CMsgDOTARealtimeGameStats_TeamDetails::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.TeamDetails.players)
  return players_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_PlayerDetails* CMsgDOTARealtimeGameStats_TeamDetails::add_players() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.TeamDetails.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PlayerDetails >&
CMsgDOTARealtimeGameStats_TeamDetails::players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.TeamDetails.players)
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PlayerDetails >*
CMsgDOTARealtimeGameStats_TeamDetails::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.TeamDetails.players)
  return &players_;
}

// optional bool only_team = 7;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_only_team() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_has_only_team() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_only_team() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_only_team() {
  only_team_ = false;
  clear_has_only_team();
}
inline bool CMsgDOTARealtimeGameStats_TeamDetails::only_team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.only_team)
  return only_team_;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_only_team(bool value) {
  set_has_only_team();
  only_team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.only_team)
}

// optional uint32 cheers = 8;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_cheers() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_has_cheers() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_cheers() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_cheers() {
  cheers_ = 0u;
  clear_has_cheers();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_TeamDetails::cheers() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.cheers)
  return cheers_;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_cheers(::google::protobuf::uint32 value) {
  set_has_cheers();
  cheers_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.cheers)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_ItemDetails

// optional uint32 id = 1;
inline bool CMsgDOTARealtimeGameStats_ItemDetails::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_ItemDetails::id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.ItemDetails.id)
  return id_;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.ItemDetails.id)
}

// optional string name = 2;
inline bool CMsgDOTARealtimeGameStats_ItemDetails::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgDOTARealtimeGameStats_ItemDetails::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.ItemDetails.name)
  return *name_;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.ItemDetails.name)
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTARealtimeGameStats.ItemDetails.name)
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTARealtimeGameStats.ItemDetails.name)
}
inline ::std::string* CMsgDOTARealtimeGameStats_ItemDetails::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.ItemDetails.name)
  return name_;
}
inline ::std::string* CMsgDOTARealtimeGameStats_ItemDetails::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStats.ItemDetails.name)
}

// optional int32 time = 3;
inline bool CMsgDOTARealtimeGameStats_ItemDetails::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_ItemDetails::time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.ItemDetails.time)
  return time_;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.ItemDetails.time)
}

// optional bool sold = 4;
inline bool CMsgDOTARealtimeGameStats_ItemDetails::has_sold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_has_sold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_has_sold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_sold() {
  sold_ = false;
  clear_has_sold();
}
inline bool CMsgDOTARealtimeGameStats_ItemDetails::sold() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.ItemDetails.sold)
  return sold_;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_sold(bool value) {
  set_has_sold();
  sold_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.ItemDetails.sold)
}

// optional uint32 stackcount = 5;
inline bool CMsgDOTARealtimeGameStats_ItemDetails::has_stackcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_has_stackcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_has_stackcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_stackcount() {
  stackcount_ = 0u;
  clear_has_stackcount();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_ItemDetails::stackcount() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.ItemDetails.stackcount)
  return stackcount_;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_stackcount(::google::protobuf::uint32 value) {
  set_has_stackcount();
  stackcount_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.ItemDetails.stackcount)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_AbilityDetails

// optional uint32 id = 1;
inline bool CMsgDOTARealtimeGameStats_AbilityDetails::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_AbilityDetails::id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.AbilityDetails.id)
  return id_;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.AbilityDetails.id)
}

// optional string name = 2;
inline bool CMsgDOTARealtimeGameStats_AbilityDetails::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgDOTARealtimeGameStats_AbilityDetails::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.AbilityDetails.name)
  return *name_;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.AbilityDetails.name)
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTARealtimeGameStats.AbilityDetails.name)
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTARealtimeGameStats.AbilityDetails.name)
}
inline ::std::string* CMsgDOTARealtimeGameStats_AbilityDetails::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.AbilityDetails.name)
  return name_;
}
inline ::std::string* CMsgDOTARealtimeGameStats_AbilityDetails::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStats.AbilityDetails.name)
}

// optional uint32 level = 3;
inline bool CMsgDOTARealtimeGameStats_AbilityDetails::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_AbilityDetails::level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.AbilityDetails.level)
  return level_;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.AbilityDetails.level)
}

// optional float cooldown = 4;
inline bool CMsgDOTARealtimeGameStats_AbilityDetails::has_cooldown() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_has_cooldown() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_has_cooldown() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_cooldown() {
  cooldown_ = 0;
  clear_has_cooldown();
}
inline float CMsgDOTARealtimeGameStats_AbilityDetails::cooldown() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.AbilityDetails.cooldown)
  return cooldown_;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_cooldown(float value) {
  set_has_cooldown();
  cooldown_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.AbilityDetails.cooldown)
}

// optional float cooldown_max = 5;
inline bool CMsgDOTARealtimeGameStats_AbilityDetails::has_cooldown_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_has_cooldown_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_has_cooldown_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_cooldown_max() {
  cooldown_max_ = 0;
  clear_has_cooldown_max();
}
inline float CMsgDOTARealtimeGameStats_AbilityDetails::cooldown_max() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.AbilityDetails.cooldown_max)
  return cooldown_max_;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_cooldown_max(float value) {
  set_has_cooldown_max();
  cooldown_max_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.AbilityDetails.cooldown_max)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_HeroToHeroStats

// optional uint32 victimid = 1;
inline bool CMsgDOTARealtimeGameStats_HeroToHeroStats::has_victimid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_has_victimid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_has_victimid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_victimid() {
  victimid_ = 0u;
  clear_has_victimid();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_HeroToHeroStats::victimid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.HeroToHeroStats.victimid)
  return victimid_;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_victimid(::google::protobuf::uint32 value) {
  set_has_victimid();
  victimid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.HeroToHeroStats.victimid)
}

// optional uint32 kills = 2;
inline bool CMsgDOTARealtimeGameStats_HeroToHeroStats::has_kills() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_has_kills() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_has_kills() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_HeroToHeroStats::kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.HeroToHeroStats.kills)
  return kills_;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.HeroToHeroStats.kills)
}

// optional uint32 assists = 3;
inline bool CMsgDOTARealtimeGameStats_HeroToHeroStats::has_assists() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_has_assists() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_has_assists() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_assists() {
  assists_ = 0u;
  clear_has_assists();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_HeroToHeroStats::assists() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.HeroToHeroStats.assists)
  return assists_;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_assists(::google::protobuf::uint32 value) {
  set_has_assists();
  assists_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.HeroToHeroStats.assists)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_AbilityList

// repeated uint32 id = 1;
inline int CMsgDOTARealtimeGameStats_AbilityList::id_size() const {
  return id_.size();
}
inline void CMsgDOTARealtimeGameStats_AbilityList::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_AbilityList::id(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.AbilityList.id)
  return id_.Get(index);
}
inline void CMsgDOTARealtimeGameStats_AbilityList::set_id(int index, ::google::protobuf::uint32 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.AbilityList.id)
}
inline void CMsgDOTARealtimeGameStats_AbilityList::add_id(::google::protobuf::uint32 value) {
  id_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.AbilityList.id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTARealtimeGameStats_AbilityList::id() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.AbilityList.id)
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTARealtimeGameStats_AbilityList::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.AbilityList.id)
  return &id_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_PlayerDetails

// optional uint32 accountid = 1;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::accountid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.accountid)
  return accountid_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.accountid)
}

// optional uint32 playerid = 2;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::playerid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.playerid)
  return playerid_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.playerid)
}

// optional string name = 3;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgDOTARealtimeGameStats_PlayerDetails::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.name)
  return *name_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.name)
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTARealtimeGameStats.PlayerDetails.name)
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTARealtimeGameStats.PlayerDetails.name)
}
inline ::std::string* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.name)
  return name_;
}
inline ::std::string* CMsgDOTARealtimeGameStats_PlayerDetails::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStats.PlayerDetails.name)
}

// optional uint32 team = 4;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_team() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_team() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_team() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_team() {
  team_ = 0u;
  clear_has_team();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.team)
  return team_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.team)
}

// optional uint32 heroid = 5;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_heroid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_heroid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::heroid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.heroid)
  return heroid_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.heroid)
}

// optional uint32 healthpoints = 6;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_healthpoints() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_healthpoints() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_healthpoints() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_healthpoints() {
  healthpoints_ = 0u;
  clear_has_healthpoints();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::healthpoints() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.healthpoints)
  return healthpoints_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_healthpoints(::google::protobuf::uint32 value) {
  set_has_healthpoints();
  healthpoints_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.healthpoints)
}

// optional uint32 maxhealthpoints = 7;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_maxhealthpoints() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_maxhealthpoints() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_maxhealthpoints() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_maxhealthpoints() {
  maxhealthpoints_ = 0u;
  clear_has_maxhealthpoints();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::maxhealthpoints() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.maxhealthpoints)
  return maxhealthpoints_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_maxhealthpoints(::google::protobuf::uint32 value) {
  set_has_maxhealthpoints();
  maxhealthpoints_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.maxhealthpoints)
}

// optional float healthregenrate = 8;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_healthregenrate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_healthregenrate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_healthregenrate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_healthregenrate() {
  healthregenrate_ = 0;
  clear_has_healthregenrate();
}
inline float CMsgDOTARealtimeGameStats_PlayerDetails::healthregenrate() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.healthregenrate)
  return healthregenrate_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_healthregenrate(float value) {
  set_has_healthregenrate();
  healthregenrate_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.healthregenrate)
}

// optional uint32 manapoints = 9;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_manapoints() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_manapoints() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_manapoints() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_manapoints() {
  manapoints_ = 0u;
  clear_has_manapoints();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::manapoints() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.manapoints)
  return manapoints_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_manapoints(::google::protobuf::uint32 value) {
  set_has_manapoints();
  manapoints_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.manapoints)
}

// optional uint32 maxmanapoints = 10;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_maxmanapoints() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_maxmanapoints() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_maxmanapoints() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_maxmanapoints() {
  maxmanapoints_ = 0u;
  clear_has_maxmanapoints();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::maxmanapoints() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.maxmanapoints)
  return maxmanapoints_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_maxmanapoints(::google::protobuf::uint32 value) {
  set_has_maxmanapoints();
  maxmanapoints_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.maxmanapoints)
}

// optional float manaregenrate = 11;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_manaregenrate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_manaregenrate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_manaregenrate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_manaregenrate() {
  manaregenrate_ = 0;
  clear_has_manaregenrate();
}
inline float CMsgDOTARealtimeGameStats_PlayerDetails::manaregenrate() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.manaregenrate)
  return manaregenrate_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_manaregenrate(float value) {
  set_has_manaregenrate();
  manaregenrate_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.manaregenrate)
}

// optional uint32 base_strength = 12;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_strength() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_base_strength() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_base_strength() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_strength() {
  base_strength_ = 0u;
  clear_has_base_strength();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::base_strength() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.base_strength)
  return base_strength_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_strength(::google::protobuf::uint32 value) {
  set_has_base_strength();
  base_strength_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.base_strength)
}

// optional uint32 base_agility = 13;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_agility() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_base_agility() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_base_agility() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_agility() {
  base_agility_ = 0u;
  clear_has_base_agility();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::base_agility() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.base_agility)
  return base_agility_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_agility(::google::protobuf::uint32 value) {
  set_has_base_agility();
  base_agility_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.base_agility)
}

// optional uint32 base_intelligence = 14;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_intelligence() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_base_intelligence() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_base_intelligence() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_intelligence() {
  base_intelligence_ = 0u;
  clear_has_base_intelligence();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::base_intelligence() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.base_intelligence)
  return base_intelligence_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_intelligence(::google::protobuf::uint32 value) {
  set_has_base_intelligence();
  base_intelligence_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.base_intelligence)
}

// optional int32 base_armor = 15;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_armor() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_base_armor() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_base_armor() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_armor() {
  base_armor_ = 0;
  clear_has_base_armor();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_PlayerDetails::base_armor() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.base_armor)
  return base_armor_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_armor(::google::protobuf::int32 value) {
  set_has_base_armor();
  base_armor_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.base_armor)
}

// optional uint32 base_movespeed = 16;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_movespeed() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_base_movespeed() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_base_movespeed() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_movespeed() {
  base_movespeed_ = 0u;
  clear_has_base_movespeed();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::base_movespeed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.base_movespeed)
  return base_movespeed_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_movespeed(::google::protobuf::uint32 value) {
  set_has_base_movespeed();
  base_movespeed_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.base_movespeed)
}

// optional uint32 base_damage = 17;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_damage() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_base_damage() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_base_damage() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_damage() {
  base_damage_ = 0u;
  clear_has_base_damage();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::base_damage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.base_damage)
  return base_damage_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_damage(::google::protobuf::uint32 value) {
  set_has_base_damage();
  base_damage_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.base_damage)
}

// optional uint32 strength = 18;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_strength() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_strength() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_strength() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_strength() {
  strength_ = 0u;
  clear_has_strength();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::strength() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.strength)
  return strength_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_strength(::google::protobuf::uint32 value) {
  set_has_strength();
  strength_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.strength)
}

// optional uint32 agility = 19;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_agility() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_agility() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_agility() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_agility() {
  agility_ = 0u;
  clear_has_agility();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::agility() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.agility)
  return agility_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_agility(::google::protobuf::uint32 value) {
  set_has_agility();
  agility_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.agility)
}

// optional uint32 intelligence = 20;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_intelligence() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_intelligence() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_intelligence() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_intelligence() {
  intelligence_ = 0u;
  clear_has_intelligence();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::intelligence() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.intelligence)
  return intelligence_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_intelligence(::google::protobuf::uint32 value) {
  set_has_intelligence();
  intelligence_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.intelligence)
}

// optional int32 armor = 21;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_armor() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_armor() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_armor() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_armor() {
  armor_ = 0;
  clear_has_armor();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_PlayerDetails::armor() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.armor)
  return armor_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_armor(::google::protobuf::int32 value) {
  set_has_armor();
  armor_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.armor)
}

// optional uint32 movespeed = 22;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_movespeed() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_movespeed() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_movespeed() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_movespeed() {
  movespeed_ = 0u;
  clear_has_movespeed();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::movespeed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.movespeed)
  return movespeed_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_movespeed(::google::protobuf::uint32 value) {
  set_has_movespeed();
  movespeed_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.movespeed)
}

// optional uint32 damage = 23;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_damage() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_damage() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_damage() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_damage() {
  damage_ = 0u;
  clear_has_damage();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::damage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.damage)
  return damage_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_damage(::google::protobuf::uint32 value) {
  set_has_damage();
  damage_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.damage)
}

// optional uint32 hero_damage = 24;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_hero_damage() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_hero_damage() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_hero_damage() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_hero_damage() {
  hero_damage_ = 0u;
  clear_has_hero_damage();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::hero_damage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.hero_damage)
  return hero_damage_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_hero_damage(::google::protobuf::uint32 value) {
  set_has_hero_damage();
  hero_damage_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.hero_damage)
}

// optional uint32 tower_damage = 25;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_tower_damage() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_tower_damage() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_tower_damage() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_tower_damage() {
  tower_damage_ = 0u;
  clear_has_tower_damage();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::tower_damage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.tower_damage)
  return tower_damage_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_tower_damage(::google::protobuf::uint32 value) {
  set_has_tower_damage();
  tower_damage_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.tower_damage)
}

// repeated .CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
inline int CMsgDOTARealtimeGameStats_PlayerDetails::abilities_size() const {
  return abilities_.size();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_abilities() {
  abilities_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_AbilityDetails& CMsgDOTARealtimeGameStats_PlayerDetails::abilities(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return abilities_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_AbilityDetails* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_abilities(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return abilities_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_AbilityDetails* CMsgDOTARealtimeGameStats_PlayerDetails::add_abilities() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return abilities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityDetails >&
CMsgDOTARealtimeGameStats_PlayerDetails::abilities() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return abilities_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityDetails >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_abilities() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return &abilities_;
}

// optional uint32 level = 27;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_level() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_level() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_level() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.level)
  return level_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.level)
}

// optional uint32 kill_count = 28;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_kill_count() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_kill_count() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_kill_count() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_kill_count() {
  kill_count_ = 0u;
  clear_has_kill_count();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::kill_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.kill_count)
  return kill_count_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_kill_count(::google::protobuf::uint32 value) {
  set_has_kill_count();
  kill_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.kill_count)
}

// optional uint32 death_count = 29;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_death_count() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_death_count() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_death_count() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_death_count() {
  death_count_ = 0u;
  clear_has_death_count();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::death_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.death_count)
  return death_count_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_death_count(::google::protobuf::uint32 value) {
  set_has_death_count();
  death_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.death_count)
}

// optional uint32 assists_count = 30;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_assists_count() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_assists_count() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_assists_count() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_assists_count() {
  assists_count_ = 0u;
  clear_has_assists_count();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::assists_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.assists_count)
  return assists_count_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_assists_count(::google::protobuf::uint32 value) {
  set_has_assists_count();
  assists_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.assists_count)
}

// optional uint32 denies_count = 31;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_denies_count() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_denies_count() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_denies_count() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_denies_count() {
  denies_count_ = 0u;
  clear_has_denies_count();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::denies_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.denies_count)
  return denies_count_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_denies_count(::google::protobuf::uint32 value) {
  set_has_denies_count();
  denies_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.denies_count)
}

// optional uint32 lh_count = 32;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_lh_count() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_lh_count() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_lh_count() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_lh_count() {
  lh_count_ = 0u;
  clear_has_lh_count();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::lh_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.lh_count)
  return lh_count_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_lh_count(::google::protobuf::uint32 value) {
  set_has_lh_count();
  lh_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.lh_count)
}

// optional uint32 hero_healing = 33;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_hero_healing() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_hero_healing() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_hero_healing() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_hero_healing() {
  hero_healing_ = 0u;
  clear_has_hero_healing();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::hero_healing() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.hero_healing)
  return hero_healing_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_hero_healing(::google::protobuf::uint32 value) {
  set_has_hero_healing();
  hero_healing_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.hero_healing)
}

// optional uint32 gold_per_min = 34;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_gold_per_min() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_gold_per_min() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_gold_per_min() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_gold_per_min() {
  gold_per_min_ = 0u;
  clear_has_gold_per_min();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::gold_per_min() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.gold_per_min)
  return gold_per_min_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_gold_per_min(::google::protobuf::uint32 value) {
  set_has_gold_per_min();
  gold_per_min_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.gold_per_min)
}

// optional uint32 xp_per_min = 35;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_xp_per_min() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_xp_per_min() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_xp_per_min() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_xp_per_min() {
  xp_per_min_ = 0u;
  clear_has_xp_per_min();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::xp_per_min() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.xp_per_min)
  return xp_per_min_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_xp_per_min(::google::protobuf::uint32 value) {
  set_has_xp_per_min();
  xp_per_min_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.xp_per_min)
}

// optional uint32 net_gold = 36;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_net_gold() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_net_gold() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_net_gold() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_net_gold() {
  net_gold_ = 0u;
  clear_has_net_gold();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::net_gold() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.net_gold)
  return net_gold_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_net_gold(::google::protobuf::uint32 value) {
  set_has_net_gold();
  net_gold_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.net_gold)
}

// optional uint32 gold = 37;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_gold() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_gold() {
  _has_bits_[1] |= 0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_gold() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::gold() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.gold)
  return gold_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.gold)
}

// optional float x = 38;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_x() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_x() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_x() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float CMsgDOTARealtimeGameStats_PlayerDetails::x() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.x)
  return x_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.x)
}

// optional float y = 39;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_y() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_y() {
  _has_bits_[1] |= 0x00000040u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_y() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float CMsgDOTARealtimeGameStats_PlayerDetails::y() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.y)
  return y_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.y)
}

// optional int32 respawn_time = 40;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_respawn_time() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_respawn_time() {
  _has_bits_[1] |= 0x00000080u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_respawn_time() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_respawn_time() {
  respawn_time_ = 0;
  clear_has_respawn_time();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_PlayerDetails::respawn_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.respawn_time)
  return respawn_time_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_respawn_time(::google::protobuf::int32 value) {
  set_has_respawn_time();
  respawn_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.respawn_time)
}

// optional uint32 ultimate_cooldown = 41;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_ultimate_cooldown() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_ultimate_cooldown() {
  _has_bits_[1] |= 0x00000100u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_ultimate_cooldown() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_ultimate_cooldown() {
  ultimate_cooldown_ = 0u;
  clear_has_ultimate_cooldown();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::ultimate_cooldown() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.ultimate_cooldown)
  return ultimate_cooldown_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_ultimate_cooldown(::google::protobuf::uint32 value) {
  set_has_ultimate_cooldown();
  ultimate_cooldown_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.ultimate_cooldown)
}

// optional bool has_buyback = 42;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_has_buyback() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_has_buyback() {
  _has_bits_[1] |= 0x00000200u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_has_buyback() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_buyback() {
  has_buyback_ = false;
  clear_has_has_buyback();
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_buyback() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.has_buyback)
  return has_buyback_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_buyback(bool value) {
  set_has_has_buyback();
  has_buyback_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.has_buyback)
}

// repeated .CMsgDOTARealtimeGameStats.ItemDetails items = 43;
inline int CMsgDOTARealtimeGameStats_PlayerDetails::items_size() const {
  return items_.size();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_items() {
  items_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_ItemDetails& CMsgDOTARealtimeGameStats_PlayerDetails::items(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return items_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return items_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::add_items() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >&
CMsgDOTARealtimeGameStats_PlayerDetails::items() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return &items_;
}

// repeated .CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
inline int CMsgDOTARealtimeGameStats_PlayerDetails::stashitems_size() const {
  return stashitems_.size();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_stashitems() {
  stashitems_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_ItemDetails& CMsgDOTARealtimeGameStats_PlayerDetails::stashitems(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return stashitems_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_stashitems(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return stashitems_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::add_stashitems() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return stashitems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >&
CMsgDOTARealtimeGameStats_PlayerDetails::stashitems() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return stashitems_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_stashitems() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return &stashitems_;
}

// repeated .CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
inline int CMsgDOTARealtimeGameStats_PlayerDetails::itemshoppinglist_size() const {
  return itemshoppinglist_.size();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_itemshoppinglist() {
  itemshoppinglist_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_ItemDetails& CMsgDOTARealtimeGameStats_PlayerDetails::itemshoppinglist(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return itemshoppinglist_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_itemshoppinglist(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return itemshoppinglist_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::add_itemshoppinglist() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return itemshoppinglist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >&
CMsgDOTARealtimeGameStats_PlayerDetails::itemshoppinglist() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return itemshoppinglist_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_itemshoppinglist() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return &itemshoppinglist_;
}

// repeated .CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
inline int CMsgDOTARealtimeGameStats_PlayerDetails::levelpoints_size() const {
  return levelpoints_.size();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_levelpoints() {
  levelpoints_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_AbilityList& CMsgDOTARealtimeGameStats_PlayerDetails::levelpoints(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return levelpoints_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_AbilityList* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_levelpoints(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return levelpoints_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_AbilityList* CMsgDOTARealtimeGameStats_PlayerDetails::add_levelpoints() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return levelpoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityList >&
CMsgDOTARealtimeGameStats_PlayerDetails::levelpoints() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return levelpoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityList >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_levelpoints() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return &levelpoints_;
}

// repeated .CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
inline int CMsgDOTARealtimeGameStats_PlayerDetails::hero_to_hero_stats_size() const {
  return hero_to_hero_stats_.size();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_hero_to_hero_stats() {
  hero_to_hero_stats_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_HeroToHeroStats& CMsgDOTARealtimeGameStats_PlayerDetails::hero_to_hero_stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return hero_to_hero_stats_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_HeroToHeroStats* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_hero_to_hero_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return hero_to_hero_stats_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_HeroToHeroStats* CMsgDOTARealtimeGameStats_PlayerDetails::add_hero_to_hero_stats() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return hero_to_hero_stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_HeroToHeroStats >&
CMsgDOTARealtimeGameStats_PlayerDetails::hero_to_hero_stats() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return hero_to_hero_stats_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_HeroToHeroStats >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_hero_to_hero_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return &hero_to_hero_stats_;
}

// optional bool has_ultimate = 48;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_has_ultimate() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_has_ultimate() {
  _has_bits_[1] |= 0x00008000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_has_ultimate() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_ultimate() {
  has_ultimate_ = false;
  clear_has_has_ultimate();
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_ultimate() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.has_ultimate)
  return has_ultimate_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_ultimate(bool value) {
  set_has_has_ultimate();
  has_ultimate_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.has_ultimate)
}

// optional bool has_ultimate_mana = 49;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_has_ultimate_mana() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_has_ultimate_mana() {
  _has_bits_[1] |= 0x00010000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_has_ultimate_mana() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_ultimate_mana() {
  has_ultimate_mana_ = false;
  clear_has_has_ultimate_mana();
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_ultimate_mana() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.has_ultimate_mana)
  return has_ultimate_mana_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_ultimate_mana(bool value) {
  set_has_has_ultimate_mana();
  has_ultimate_mana_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.has_ultimate_mana)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_BuildingDetails

// optional uint32 team = 2;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_team() {
  team_ = 0u;
  clear_has_team();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BuildingDetails::team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.team)
  return team_;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.team)
}

// optional float heading = 3;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_heading() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_heading() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_heading() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline float CMsgDOTARealtimeGameStats_BuildingDetails::heading() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.heading)
  return heading_;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_heading(float value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.heading)
}

// optional uint32 lane = 4;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_lane() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_lane() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_lane() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_lane() {
  lane_ = 0u;
  clear_has_lane();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BuildingDetails::lane() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.lane)
  return lane_;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_lane(::google::protobuf::uint32 value) {
  set_has_lane();
  lane_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.lane)
}

// optional uint32 tier = 5;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_tier() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_tier() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_tier() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_tier() {
  tier_ = 0u;
  clear_has_tier();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BuildingDetails::tier() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.tier)
  return tier_;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_tier(::google::protobuf::uint32 value) {
  set_has_tier();
  tier_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.tier)
}

// optional uint32 type = 6;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BuildingDetails::type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.type)
  return type_;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.type)
}

// optional float x = 7;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float CMsgDOTARealtimeGameStats_BuildingDetails::x() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.x)
  return x_;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.x)
}

// optional float y = 8;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float CMsgDOTARealtimeGameStats_BuildingDetails::y() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.y)
  return y_;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.y)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_KillDetails

// optional uint32 player_id = 1;
inline bool CMsgDOTARealtimeGameStats_KillDetails::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_KillDetails::player_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.KillDetails.player_id)
  return player_id_;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.KillDetails.player_id)
}

// optional int32 death_time = 2;
inline bool CMsgDOTARealtimeGameStats_KillDetails::has_death_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::set_has_death_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::clear_has_death_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::clear_death_time() {
  death_time_ = 0;
  clear_has_death_time();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_KillDetails::death_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.KillDetails.death_time)
  return death_time_;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::set_death_time(::google::protobuf::int32 value) {
  set_has_death_time();
  death_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.KillDetails.death_time)
}

// optional uint32 killer_player_id = 3;
inline bool CMsgDOTARealtimeGameStats_KillDetails::has_killer_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::set_has_killer_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::clear_has_killer_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::clear_killer_player_id() {
  killer_player_id_ = 0u;
  clear_has_killer_player_id();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_KillDetails::killer_player_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.KillDetails.killer_player_id)
  return killer_player_id_;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::set_killer_player_id(::google::protobuf::uint32 value) {
  set_has_killer_player_id();
  killer_player_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.KillDetails.killer_player_id)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_BroadcasterDetails

// optional uint32 player_id = 1;
inline bool CMsgDOTARealtimeGameStats_BroadcasterDetails::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BroadcasterDetails::player_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BroadcasterDetails.player_id)
  return player_id_;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BroadcasterDetails.player_id)
}

// optional uint32 selected_hero = 2;
inline bool CMsgDOTARealtimeGameStats_BroadcasterDetails::has_selected_hero() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_has_selected_hero() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_has_selected_hero() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_selected_hero() {
  selected_hero_ = 0u;
  clear_has_selected_hero();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BroadcasterDetails::selected_hero() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BroadcasterDetails.selected_hero)
  return selected_hero_;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_selected_hero(::google::protobuf::uint32 value) {
  set_has_selected_hero();
  selected_hero_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BroadcasterDetails.selected_hero)
}

// optional uint32 selected_graph = 3;
inline bool CMsgDOTARealtimeGameStats_BroadcasterDetails::has_selected_graph() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_has_selected_graph() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_has_selected_graph() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_selected_graph() {
  selected_graph_ = 0u;
  clear_has_selected_graph();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BroadcasterDetails::selected_graph() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BroadcasterDetails.selected_graph)
  return selected_graph_;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_selected_graph(::google::protobuf::uint32 value) {
  set_has_selected_graph();
  selected_graph_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BroadcasterDetails.selected_graph)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_PickBanDetails

// optional uint32 hero = 1;
inline bool CMsgDOTARealtimeGameStats_PickBanDetails::has_hero() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PickBanDetails::set_has_hero() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_PickBanDetails::clear_has_hero() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_PickBanDetails::clear_hero() {
  hero_ = 0u;
  clear_has_hero();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PickBanDetails::hero() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PickBanDetails.hero)
  return hero_;
}
inline void CMsgDOTARealtimeGameStats_PickBanDetails::set_hero(::google::protobuf::uint32 value) {
  set_has_hero();
  hero_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PickBanDetails.hero)
}

// optional uint32 team = 2;
inline bool CMsgDOTARealtimeGameStats_PickBanDetails::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PickBanDetails::set_has_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_PickBanDetails::clear_has_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_PickBanDetails::clear_team() {
  team_ = 0u;
  clear_has_team();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PickBanDetails::team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PickBanDetails.team)
  return team_;
}
inline void CMsgDOTARealtimeGameStats_PickBanDetails::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PickBanDetails.team)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_MatchDetails

// optional fixed64 server_steam_id = 1;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_server_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_has_server_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_server_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_server_steam_id() {
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steam_id();
}
inline ::google::protobuf::uint64 CMsgDOTARealtimeGameStats_MatchDetails::server_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.server_steam_id)
  return server_steam_id_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_server_steam_id(::google::protobuf::uint64 value) {
  set_has_server_steam_id();
  server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.server_steam_id)
}

// optional uint64 matchid = 2;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_matchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_has_matchid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_matchid() {
  matchid_ = GOOGLE_ULONGLONG(0);
  clear_has_matchid();
}
inline ::google::protobuf::uint64 CMsgDOTARealtimeGameStats_MatchDetails::matchid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.matchid)
  return matchid_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_matchid(::google::protobuf::uint64 value) {
  set_has_matchid();
  matchid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.matchid)
}

// optional uint32 timestamp = 3;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.timestamp)
  return timestamp_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.timestamp)
}

// optional float time_of_day = 4;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_time_of_day() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_has_time_of_day() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_time_of_day() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_time_of_day() {
  time_of_day_ = 0;
  clear_has_time_of_day();
}
inline float CMsgDOTARealtimeGameStats_MatchDetails::time_of_day() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.time_of_day)
  return time_of_day_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_time_of_day(float value) {
  set_has_time_of_day();
  time_of_day_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.time_of_day)
}

// optional bool is_nightstalker_night = 5;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_is_nightstalker_night() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_has_is_nightstalker_night() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_is_nightstalker_night() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_is_nightstalker_night() {
  is_nightstalker_night_ = false;
  clear_has_is_nightstalker_night();
}
inline bool CMsgDOTARealtimeGameStats_MatchDetails::is_nightstalker_night() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.is_nightstalker_night)
  return is_nightstalker_night_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_is_nightstalker_night(bool value) {
  set_has_is_nightstalker_night();
  is_nightstalker_night_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.is_nightstalker_night)
}

// optional int32 game_time = 6;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_game_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_has_game_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_game_time() {
  game_time_ = 0;
  clear_has_game_time();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_MatchDetails::game_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.game_time)
  return game_time_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_game_time(::google::protobuf::int32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.game_time)
}

// optional uint32 teamid_radiant = 8;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_teamid_radiant() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_has_teamid_radiant() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_teamid_radiant() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_teamid_radiant() {
  teamid_radiant_ = 0u;
  clear_has_teamid_radiant();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::teamid_radiant() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.teamid_radiant)
  return teamid_radiant_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_teamid_radiant(::google::protobuf::uint32 value) {
  set_has_teamid_radiant();
  teamid_radiant_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.teamid_radiant)
}

// optional uint32 teamid_dire = 9;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_teamid_dire() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_has_teamid_dire() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_teamid_dire() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_teamid_dire() {
  teamid_dire_ = 0u;
  clear_has_teamid_dire();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::teamid_dire() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.teamid_dire)
  return teamid_dire_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_teamid_dire(::google::protobuf::uint32 value) {
  set_has_teamid_dire();
  teamid_dire_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.teamid_dire)
}

// repeated .CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
inline int CMsgDOTARealtimeGameStats_MatchDetails::picks_size() const {
  return picks_.size();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_picks() {
  picks_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_PickBanDetails& CMsgDOTARealtimeGameStats_MatchDetails::picks(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return picks_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_MatchDetails::mutable_picks(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return picks_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_MatchDetails::add_picks() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return picks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >&
CMsgDOTARealtimeGameStats_MatchDetails::picks() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return picks_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >*
CMsgDOTARealtimeGameStats_MatchDetails::mutable_picks() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return &picks_;
}

// repeated .CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
inline int CMsgDOTARealtimeGameStats_MatchDetails::bans_size() const {
  return bans_.size();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_bans() {
  bans_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_PickBanDetails& CMsgDOTARealtimeGameStats_MatchDetails::bans(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return bans_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_MatchDetails::mutable_bans(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return bans_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_MatchDetails::add_bans() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return bans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >&
CMsgDOTARealtimeGameStats_MatchDetails::bans() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return bans_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >*
CMsgDOTARealtimeGameStats_MatchDetails::mutable_bans() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return &bans_;
}

// repeated .CMsgDOTARealtimeGameStats.KillDetails kills = 12;
inline int CMsgDOTARealtimeGameStats_MatchDetails::kills_size() const {
  return kills_.size();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_kills() {
  kills_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_KillDetails& CMsgDOTARealtimeGameStats_MatchDetails::kills(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return kills_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_KillDetails* CMsgDOTARealtimeGameStats_MatchDetails::mutable_kills(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return kills_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_KillDetails* CMsgDOTARealtimeGameStats_MatchDetails::add_kills() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return kills_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_KillDetails >&
CMsgDOTARealtimeGameStats_MatchDetails::kills() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return kills_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_KillDetails >*
CMsgDOTARealtimeGameStats_MatchDetails::mutable_kills() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return &kills_;
}

// repeated .CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
inline int CMsgDOTARealtimeGameStats_MatchDetails::broadcasters_size() const {
  return broadcasters_.size();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_broadcasters() {
  broadcasters_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_BroadcasterDetails& CMsgDOTARealtimeGameStats_MatchDetails::broadcasters(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return broadcasters_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_BroadcasterDetails* CMsgDOTARealtimeGameStats_MatchDetails::mutable_broadcasters(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return broadcasters_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_BroadcasterDetails* CMsgDOTARealtimeGameStats_MatchDetails::add_broadcasters() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return broadcasters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BroadcasterDetails >&
CMsgDOTARealtimeGameStats_MatchDetails::broadcasters() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return broadcasters_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BroadcasterDetails >*
CMsgDOTARealtimeGameStats_MatchDetails::mutable_broadcasters() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return &broadcasters_;
}

// optional uint32 game_mode = 14;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_game_mode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_has_game_mode() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.game_mode)
  return game_mode_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.game_mode)
}

// optional uint32 league_id = 15;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_league_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_has_league_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_league_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.league_id)
  return league_id_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.league_id)
}

// optional bool single_team = 16;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_single_team() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_has_single_team() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_single_team() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_single_team() {
  single_team_ = false;
  clear_has_single_team();
}
inline bool CMsgDOTARealtimeGameStats_MatchDetails::single_team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.single_team)
  return single_team_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_single_team(bool value) {
  set_has_single_team();
  single_team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.single_team)
}

// optional uint32 cheers_peak = 17;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_cheers_peak() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_has_cheers_peak() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_cheers_peak() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_cheers_peak() {
  cheers_peak_ = 0u;
  clear_has_cheers_peak();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::cheers_peak() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.cheers_peak)
  return cheers_peak_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_cheers_peak(::google::protobuf::uint32 value) {
  set_has_cheers_peak();
  cheers_peak_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.cheers_peak)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_GraphData_LocationStats

// repeated int32 stats = 1;
inline int CMsgDOTARealtimeGameStats_GraphData_LocationStats::stats_size() const {
  return stats_.size();
}
inline void CMsgDOTARealtimeGameStats_GraphData_LocationStats::clear_stats() {
  stats_.Clear();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData_LocationStats::stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
  return stats_.Get(index);
}
inline void CMsgDOTARealtimeGameStats_GraphData_LocationStats::set_stats(int index, ::google::protobuf::int32 value) {
  stats_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
}
inline void CMsgDOTARealtimeGameStats_GraphData_LocationStats::add_stats(::google::protobuf::int32 value) {
  stats_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData_LocationStats::stats() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
  return stats_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData_LocationStats::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
  return &stats_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats

// repeated .CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
inline int CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::loc_stats_size() const {
  return loc_stats_.size();
}
inline void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::clear_loc_stats() {
  loc_stats_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_GraphData_LocationStats& CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::loc_stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return loc_stats_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_GraphData_LocationStats* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::mutable_loc_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return loc_stats_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_GraphData_LocationStats* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::add_loc_stats() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return loc_stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_LocationStats >&
CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::loc_stats() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return loc_stats_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_LocationStats >*
CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::mutable_loc_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return &loc_stats_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_GraphData

// repeated int32 graph_gold = 1;
inline int CMsgDOTARealtimeGameStats_GraphData::graph_gold_size() const {
  return graph_gold_.size();
}
inline void CMsgDOTARealtimeGameStats_GraphData::clear_graph_gold() {
  graph_gold_.Clear();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData::graph_gold(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.graph_gold)
  return graph_gold_.Get(index);
}
inline void CMsgDOTARealtimeGameStats_GraphData::set_graph_gold(int index, ::google::protobuf::int32 value) {
  graph_gold_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.GraphData.graph_gold)
}
inline void CMsgDOTARealtimeGameStats_GraphData::add_graph_gold(::google::protobuf::int32 value) {
  graph_gold_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.graph_gold)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData::graph_gold() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.graph_gold)
  return graph_gold_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_gold() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.graph_gold)
  return &graph_gold_;
}

// repeated int32 graph_xp = 2;
inline int CMsgDOTARealtimeGameStats_GraphData::graph_xp_size() const {
  return graph_xp_.size();
}
inline void CMsgDOTARealtimeGameStats_GraphData::clear_graph_xp() {
  graph_xp_.Clear();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData::graph_xp(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.graph_xp)
  return graph_xp_.Get(index);
}
inline void CMsgDOTARealtimeGameStats_GraphData::set_graph_xp(int index, ::google::protobuf::int32 value) {
  graph_xp_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.GraphData.graph_xp)
}
inline void CMsgDOTARealtimeGameStats_GraphData::add_graph_xp(::google::protobuf::int32 value) {
  graph_xp_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.graph_xp)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData::graph_xp() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.graph_xp)
  return graph_xp_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_xp() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.graph_xp)
  return &graph_xp_;
}

// repeated int32 graph_kill = 3;
inline int CMsgDOTARealtimeGameStats_GraphData::graph_kill_size() const {
  return graph_kill_.size();
}
inline void CMsgDOTARealtimeGameStats_GraphData::clear_graph_kill() {
  graph_kill_.Clear();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData::graph_kill(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.graph_kill)
  return graph_kill_.Get(index);
}
inline void CMsgDOTARealtimeGameStats_GraphData::set_graph_kill(int index, ::google::protobuf::int32 value) {
  graph_kill_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.GraphData.graph_kill)
}
inline void CMsgDOTARealtimeGameStats_GraphData::add_graph_kill(::google::protobuf::int32 value) {
  graph_kill_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.graph_kill)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData::graph_kill() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.graph_kill)
  return graph_kill_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_kill() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.graph_kill)
  return &graph_kill_;
}

// repeated int32 graph_tower = 4;
inline int CMsgDOTARealtimeGameStats_GraphData::graph_tower_size() const {
  return graph_tower_.size();
}
inline void CMsgDOTARealtimeGameStats_GraphData::clear_graph_tower() {
  graph_tower_.Clear();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData::graph_tower(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.graph_tower)
  return graph_tower_.Get(index);
}
inline void CMsgDOTARealtimeGameStats_GraphData::set_graph_tower(int index, ::google::protobuf::int32 value) {
  graph_tower_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.GraphData.graph_tower)
}
inline void CMsgDOTARealtimeGameStats_GraphData::add_graph_tower(::google::protobuf::int32 value) {
  graph_tower_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.graph_tower)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData::graph_tower() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.graph_tower)
  return graph_tower_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_tower() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.graph_tower)
  return &graph_tower_;
}

// repeated int32 graph_rax = 5;
inline int CMsgDOTARealtimeGameStats_GraphData::graph_rax_size() const {
  return graph_rax_.size();
}
inline void CMsgDOTARealtimeGameStats_GraphData::clear_graph_rax() {
  graph_rax_.Clear();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData::graph_rax(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.graph_rax)
  return graph_rax_.Get(index);
}
inline void CMsgDOTARealtimeGameStats_GraphData::set_graph_rax(int index, ::google::protobuf::int32 value) {
  graph_rax_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.GraphData.graph_rax)
}
inline void CMsgDOTARealtimeGameStats_GraphData::add_graph_rax(::google::protobuf::int32 value) {
  graph_rax_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.graph_rax)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData::graph_rax() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.graph_rax)
  return graph_rax_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_rax() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.graph_rax)
  return &graph_rax_;
}

// repeated .CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
inline int CMsgDOTARealtimeGameStats_GraphData::team_loc_stats_size() const {
  return team_loc_stats_.size();
}
inline void CMsgDOTARealtimeGameStats_GraphData::clear_team_loc_stats() {
  team_loc_stats_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& CMsgDOTARealtimeGameStats_GraphData::team_loc_stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return team_loc_stats_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* CMsgDOTARealtimeGameStats_GraphData::mutable_team_loc_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return team_loc_stats_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* CMsgDOTARealtimeGameStats_GraphData::add_team_loc_stats() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return team_loc_stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats >&
CMsgDOTARealtimeGameStats_GraphData::team_loc_stats() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return team_loc_stats_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats >*
CMsgDOTARealtimeGameStats_GraphData::mutable_team_loc_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return &team_loc_stats_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats

// optional .CMsgDOTARealtimeGameStats.MatchDetails match = 1;
inline bool CMsgDOTARealtimeGameStats::has_match() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats::set_has_match() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStats::clear_has_match() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStats::clear_match() {
  if (match_ != NULL) match_->::CMsgDOTARealtimeGameStats_MatchDetails::Clear();
  clear_has_match();
}
inline const ::CMsgDOTARealtimeGameStats_MatchDetails& CMsgDOTARealtimeGameStats::match() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.match)
  return match_ != NULL ? *match_ : *default_instance_->match_;
}
inline ::CMsgDOTARealtimeGameStats_MatchDetails* CMsgDOTARealtimeGameStats::mutable_match() {
  set_has_match();
  if (match_ == NULL) match_ = new ::CMsgDOTARealtimeGameStats_MatchDetails;
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.match)
  return match_;
}
inline ::CMsgDOTARealtimeGameStats_MatchDetails* CMsgDOTARealtimeGameStats::release_match() {
  clear_has_match();
  ::CMsgDOTARealtimeGameStats_MatchDetails* temp = match_;
  match_ = NULL;
  return temp;
}
inline void CMsgDOTARealtimeGameStats::set_allocated_match(::CMsgDOTARealtimeGameStats_MatchDetails* match) {
  delete match_;
  match_ = match;
  if (match) {
    set_has_match();
  } else {
    clear_has_match();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStats.match)
}

// repeated .CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
inline int CMsgDOTARealtimeGameStats::teams_size() const {
  return teams_.size();
}
inline void CMsgDOTARealtimeGameStats::clear_teams() {
  teams_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_TeamDetails& CMsgDOTARealtimeGameStats::teams(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.teams)
  return teams_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_TeamDetails* CMsgDOTARealtimeGameStats::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.teams)
  return teams_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_TeamDetails* CMsgDOTARealtimeGameStats::add_teams() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.teams)
  return teams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_TeamDetails >&
CMsgDOTARealtimeGameStats::teams() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.teams)
  return teams_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_TeamDetails >*
CMsgDOTARealtimeGameStats::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.teams)
  return &teams_;
}

// repeated .CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
inline int CMsgDOTARealtimeGameStats::buildings_size() const {
  return buildings_.size();
}
inline void CMsgDOTARealtimeGameStats::clear_buildings() {
  buildings_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_BuildingDetails& CMsgDOTARealtimeGameStats::buildings(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.buildings)
  return buildings_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_BuildingDetails* CMsgDOTARealtimeGameStats::mutable_buildings(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.buildings)
  return buildings_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_BuildingDetails* CMsgDOTARealtimeGameStats::add_buildings() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.buildings)
  return buildings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BuildingDetails >&
CMsgDOTARealtimeGameStats::buildings() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.buildings)
  return buildings_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BuildingDetails >*
CMsgDOTARealtimeGameStats::mutable_buildings() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.buildings)
  return &buildings_;
}

// optional .CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
inline bool CMsgDOTARealtimeGameStats::has_graph_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStats::set_has_graph_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARealtimeGameStats::clear_has_graph_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARealtimeGameStats::clear_graph_data() {
  if (graph_data_ != NULL) graph_data_->::CMsgDOTARealtimeGameStats_GraphData::Clear();
  clear_has_graph_data();
}
inline const ::CMsgDOTARealtimeGameStats_GraphData& CMsgDOTARealtimeGameStats::graph_data() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.graph_data)
  return graph_data_ != NULL ? *graph_data_ : *default_instance_->graph_data_;
}
inline ::CMsgDOTARealtimeGameStats_GraphData* CMsgDOTARealtimeGameStats::mutable_graph_data() {
  set_has_graph_data();
  if (graph_data_ == NULL) graph_data_ = new ::CMsgDOTARealtimeGameStats_GraphData;
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.graph_data)
  return graph_data_;
}
inline ::CMsgDOTARealtimeGameStats_GraphData* CMsgDOTARealtimeGameStats::release_graph_data() {
  clear_has_graph_data();
  ::CMsgDOTARealtimeGameStats_GraphData* temp = graph_data_;
  graph_data_ = NULL;
  return temp;
}
inline void CMsgDOTARealtimeGameStats::set_allocated_graph_data(::CMsgDOTARealtimeGameStats_GraphData* graph_data) {
  delete graph_data_;
  graph_data_ = graph_data;
  if (graph_data) {
    set_has_graph_data();
  } else {
    clear_has_graph_data();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStats.graph_data)
}

// optional bool delta_frame = 5;
inline bool CMsgDOTARealtimeGameStats::has_delta_frame() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStats::set_has_delta_frame() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTARealtimeGameStats::clear_has_delta_frame() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTARealtimeGameStats::clear_delta_frame() {
  delta_frame_ = false;
  clear_has_delta_frame();
}
inline bool CMsgDOTARealtimeGameStats::delta_frame() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.delta_frame)
  return delta_frame_;
}
inline void CMsgDOTARealtimeGameStats::set_delta_frame(bool value) {
  set_has_delta_frame();
  delta_frame_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.delta_frame)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse_TeamDetails

// optional uint32 team_number = 1;
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_has_team_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_has_team_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_number() {
  team_number_ = 0u;
  clear_has_team_number();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_number() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_number)
  return team_number_;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_number(::google::protobuf::uint32 value) {
  set_has_team_number();
  team_number_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_number)
}

// optional uint32 team_id = 2;
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_id)
  return team_id_;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_id)
}

// optional string team_name = 3;
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_has_team_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
  return *team_name_;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
}
inline ::std::string* CMsgDOTARealtimeGameStatsTerse_TeamDetails::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
  return team_name_;
}
inline ::std::string* CMsgDOTARealtimeGameStatsTerse_TeamDetails::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_allocated_team_name(::std::string* team_name) {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_;
  }
  if (team_name) {
    set_has_team_name();
    team_name_ = team_name;
  } else {
    clear_has_team_name();
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
}

// optional fixed64 team_logo = 4;
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_logo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_has_team_logo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_has_team_logo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_logo() {
  team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo();
}
inline ::google::protobuf::uint64 CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo)
  return team_logo_;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_logo(::google::protobuf::uint64 value) {
  set_has_team_logo();
  team_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo)
}

// optional uint32 score = 5;
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_TeamDetails::score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.TeamDetails.score)
  return score_;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.TeamDetails.score)
}

// repeated .CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
inline int CMsgDOTARealtimeGameStatsTerse_TeamDetails::players_size() const {
  return players_.size();
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_players() {
  players_.Clear();
}
inline const ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails& CMsgDOTARealtimeGameStatsTerse_TeamDetails::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return players_.Get(index);
}
inline ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails* CMsgDOTARealtimeGameStatsTerse_TeamDetails::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return players_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails* CMsgDOTARealtimeGameStatsTerse_TeamDetails::add_players() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails >&
CMsgDOTARealtimeGameStatsTerse_TeamDetails::players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails >*
CMsgDOTARealtimeGameStatsTerse_TeamDetails::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return &players_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse_PlayerDetails

// optional uint32 accountid = 1;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::accountid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.accountid)
  return accountid_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.accountid)
}

// optional uint32 playerid = 2;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::playerid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.playerid)
  return playerid_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.playerid)
}

// optional string name = 3;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgDOTARealtimeGameStatsTerse_PlayerDetails::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
  return *name_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
}
inline ::std::string* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
  return name_;
}
inline ::std::string* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
}

// optional uint32 team = 4;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_team() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_team() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_team() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_team() {
  team_ = 0u;
  clear_has_team();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.team)
  return team_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.team)
}

// optional uint32 heroid = 5;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_heroid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_heroid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::heroid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.heroid)
  return heroid_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.heroid)
}

// optional uint32 level = 6;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.level)
  return level_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.level)
}

// optional uint32 kill_count = 7;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_kill_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_kill_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_kill_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_kill_count() {
  kill_count_ = 0u;
  clear_has_kill_count();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kill_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.kill_count)
  return kill_count_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_kill_count(::google::protobuf::uint32 value) {
  set_has_kill_count();
  kill_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.kill_count)
}

// optional uint32 death_count = 8;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_death_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_death_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_death_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_death_count() {
  death_count_ = 0u;
  clear_has_death_count();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::death_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.death_count)
  return death_count_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_death_count(::google::protobuf::uint32 value) {
  set_has_death_count();
  death_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.death_count)
}

// optional uint32 assists_count = 9;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_assists_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_assists_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_assists_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_assists_count() {
  assists_count_ = 0u;
  clear_has_assists_count();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::assists_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.assists_count)
  return assists_count_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_assists_count(::google::protobuf::uint32 value) {
  set_has_assists_count();
  assists_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.assists_count)
}

// optional uint32 denies_count = 10;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_denies_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_denies_count() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_denies_count() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_denies_count() {
  denies_count_ = 0u;
  clear_has_denies_count();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::denies_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.denies_count)
  return denies_count_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_denies_count(::google::protobuf::uint32 value) {
  set_has_denies_count();
  denies_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.denies_count)
}

// optional uint32 lh_count = 11;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_lh_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_lh_count() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_lh_count() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_lh_count() {
  lh_count_ = 0u;
  clear_has_lh_count();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::lh_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.lh_count)
  return lh_count_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_lh_count(::google::protobuf::uint32 value) {
  set_has_lh_count();
  lh_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.lh_count)
}

// optional uint32 gold = 12;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_gold() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_gold() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_gold() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::gold() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.gold)
  return gold_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.gold)
}

// optional float x = 13;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_x() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_x() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_x() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float CMsgDOTARealtimeGameStatsTerse_PlayerDetails::x() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.x)
  return x_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.x)
}

// optional float y = 14;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_y() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_y() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_y() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float CMsgDOTARealtimeGameStatsTerse_PlayerDetails::y() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.y)
  return y_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.y)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse_BuildingDetails

// optional uint32 team = 1;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_team() {
  team_ = 0u;
  clear_has_team();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_BuildingDetails::team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.team)
  return team_;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.team)
}

// optional float heading = 2;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_heading() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_heading() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_heading() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline float CMsgDOTARealtimeGameStatsTerse_BuildingDetails::heading() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.heading)
  return heading_;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_heading(float value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.heading)
}

// optional uint32 type = 3;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_BuildingDetails::type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.type)
  return type_;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.type)
}

// optional uint32 lane = 4;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_lane() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_lane() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_lane() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_lane() {
  lane_ = 0u;
  clear_has_lane();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_BuildingDetails::lane() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.lane)
  return lane_;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_lane(::google::protobuf::uint32 value) {
  set_has_lane();
  lane_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.lane)
}

// optional uint32 tier = 5;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_tier() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_tier() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_tier() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_tier() {
  tier_ = 0u;
  clear_has_tier();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_BuildingDetails::tier() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.tier)
  return tier_;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_tier(::google::protobuf::uint32 value) {
  set_has_tier();
  tier_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.tier)
}

// optional float x = 6;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float CMsgDOTARealtimeGameStatsTerse_BuildingDetails::x() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.x)
  return x_;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.x)
}

// optional float y = 7;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float CMsgDOTARealtimeGameStatsTerse_BuildingDetails::y() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.y)
  return y_;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.y)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse_MatchDetails

// optional fixed64 server_steam_id = 1;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_server_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_has_server_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_has_server_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_server_steam_id() {
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steam_id();
}
inline ::google::protobuf::uint64 CMsgDOTARealtimeGameStatsTerse_MatchDetails::server_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.server_steam_id)
  return server_steam_id_;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_server_steam_id(::google::protobuf::uint64 value) {
  set_has_server_steam_id();
  server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.server_steam_id)
}

// optional uint64 matchid = 2;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_matchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_has_matchid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_matchid() {
  matchid_ = GOOGLE_ULONGLONG(0);
  clear_has_matchid();
}
inline ::google::protobuf::uint64 CMsgDOTARealtimeGameStatsTerse_MatchDetails::matchid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.matchid)
  return matchid_;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_matchid(::google::protobuf::uint64 value) {
  set_has_matchid();
  matchid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.matchid)
}

// optional uint32 timestamp = 3;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_MatchDetails::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.timestamp)
  return timestamp_;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.timestamp)
}

// optional int32 game_time = 4;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_game_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_has_game_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_game_time() {
  game_time_ = 0;
  clear_has_game_time();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStatsTerse_MatchDetails::game_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_time)
  return game_time_;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_game_time(::google::protobuf::int32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_time)
}

// repeated uint32 steam_broadcaster_account_ids = 6;
inline int CMsgDOTARealtimeGameStatsTerse_MatchDetails::steam_broadcaster_account_ids_size() const {
  return steam_broadcaster_account_ids_.size();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_steam_broadcaster_account_ids() {
  steam_broadcaster_account_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_MatchDetails::steam_broadcaster_account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
  return steam_broadcaster_account_ids_.Get(index);
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_steam_broadcaster_account_ids(int index, ::google::protobuf::uint32 value) {
  steam_broadcaster_account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::add_steam_broadcaster_account_ids(::google::protobuf::uint32 value) {
  steam_broadcaster_account_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTARealtimeGameStatsTerse_MatchDetails::steam_broadcaster_account_ids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
  return steam_broadcaster_account_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTARealtimeGameStatsTerse_MatchDetails::mutable_steam_broadcaster_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
  return &steam_broadcaster_account_ids_;
}

// optional uint32 game_mode = 7;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_game_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_has_game_mode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_MatchDetails::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_mode)
  return game_mode_;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_mode)
}

// optional uint32 league_id = 8;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_league_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_has_league_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_MatchDetails::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.league_id)
  return league_id_;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.league_id)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse_GraphData

// repeated int32 graph_gold = 1;
inline int CMsgDOTARealtimeGameStatsTerse_GraphData::graph_gold_size() const {
  return graph_gold_.size();
}
inline void CMsgDOTARealtimeGameStatsTerse_GraphData::clear_graph_gold() {
  graph_gold_.Clear();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStatsTerse_GraphData::graph_gold(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
  return graph_gold_.Get(index);
}
inline void CMsgDOTARealtimeGameStatsTerse_GraphData::set_graph_gold(int index, ::google::protobuf::int32 value) {
  graph_gold_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
}
inline void CMsgDOTARealtimeGameStatsTerse_GraphData::add_graph_gold(::google::protobuf::int32 value) {
  graph_gold_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStatsTerse_GraphData::graph_gold() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
  return graph_gold_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStatsTerse_GraphData::mutable_graph_gold() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
  return &graph_gold_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse

// optional .CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
inline bool CMsgDOTARealtimeGameStatsTerse::has_match() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse::set_has_match() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStatsTerse::clear_has_match() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStatsTerse::clear_match() {
  if (match_ != NULL) match_->::CMsgDOTARealtimeGameStatsTerse_MatchDetails::Clear();
  clear_has_match();
}
inline const ::CMsgDOTARealtimeGameStatsTerse_MatchDetails& CMsgDOTARealtimeGameStatsTerse::match() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.match)
  return match_ != NULL ? *match_ : *default_instance_->match_;
}
inline ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* CMsgDOTARealtimeGameStatsTerse::mutable_match() {
  set_has_match();
  if (match_ == NULL) match_ = new ::CMsgDOTARealtimeGameStatsTerse_MatchDetails;
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.match)
  return match_;
}
inline ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* CMsgDOTARealtimeGameStatsTerse::release_match() {
  clear_has_match();
  ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* temp = match_;
  match_ = NULL;
  return temp;
}
inline void CMsgDOTARealtimeGameStatsTerse::set_allocated_match(::CMsgDOTARealtimeGameStatsTerse_MatchDetails* match) {
  delete match_;
  match_ = match;
  if (match) {
    set_has_match();
  } else {
    clear_has_match();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStatsTerse.match)
}

// repeated .CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
inline int CMsgDOTARealtimeGameStatsTerse::teams_size() const {
  return teams_.size();
}
inline void CMsgDOTARealtimeGameStatsTerse::clear_teams() {
  teams_.Clear();
}
inline const ::CMsgDOTARealtimeGameStatsTerse_TeamDetails& CMsgDOTARealtimeGameStatsTerse::teams(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.teams)
  return teams_.Get(index);
}
inline ::CMsgDOTARealtimeGameStatsTerse_TeamDetails* CMsgDOTARealtimeGameStatsTerse::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.teams)
  return teams_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStatsTerse_TeamDetails* CMsgDOTARealtimeGameStatsTerse::add_teams() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStatsTerse.teams)
  return teams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_TeamDetails >&
CMsgDOTARealtimeGameStatsTerse::teams() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStatsTerse.teams)
  return teams_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_TeamDetails >*
CMsgDOTARealtimeGameStatsTerse::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStatsTerse.teams)
  return &teams_;
}

// repeated .CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
inline int CMsgDOTARealtimeGameStatsTerse::buildings_size() const {
  return buildings_.size();
}
inline void CMsgDOTARealtimeGameStatsTerse::clear_buildings() {
  buildings_.Clear();
}
inline const ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails& CMsgDOTARealtimeGameStatsTerse::buildings(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.buildings)
  return buildings_.Get(index);
}
inline ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails* CMsgDOTARealtimeGameStatsTerse::mutable_buildings(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.buildings)
  return buildings_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails* CMsgDOTARealtimeGameStatsTerse::add_buildings() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStatsTerse.buildings)
  return buildings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails >&
CMsgDOTARealtimeGameStatsTerse::buildings() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStatsTerse.buildings)
  return buildings_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails >*
CMsgDOTARealtimeGameStatsTerse::mutable_buildings() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStatsTerse.buildings)
  return &buildings_;
}

// optional .CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
inline bool CMsgDOTARealtimeGameStatsTerse::has_graph_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse::set_has_graph_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARealtimeGameStatsTerse::clear_has_graph_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARealtimeGameStatsTerse::clear_graph_data() {
  if (graph_data_ != NULL) graph_data_->::CMsgDOTARealtimeGameStatsTerse_GraphData::Clear();
  clear_has_graph_data();
}
inline const ::CMsgDOTARealtimeGameStatsTerse_GraphData& CMsgDOTARealtimeGameStatsTerse::graph_data() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.graph_data)
  return graph_data_ != NULL ? *graph_data_ : *default_instance_->graph_data_;
}
inline ::CMsgDOTARealtimeGameStatsTerse_GraphData* CMsgDOTARealtimeGameStatsTerse::mutable_graph_data() {
  set_has_graph_data();
  if (graph_data_ == NULL) graph_data_ = new ::CMsgDOTARealtimeGameStatsTerse_GraphData;
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.graph_data)
  return graph_data_;
}
inline ::CMsgDOTARealtimeGameStatsTerse_GraphData* CMsgDOTARealtimeGameStatsTerse::release_graph_data() {
  clear_has_graph_data();
  ::CMsgDOTARealtimeGameStatsTerse_GraphData* temp = graph_data_;
  graph_data_ = NULL;
  return temp;
}
inline void CMsgDOTARealtimeGameStatsTerse::set_allocated_graph_data(::CMsgDOTARealtimeGameStatsTerse_GraphData* graph_data) {
  delete graph_data_;
  graph_data_ = graph_data;
  if (graph_data) {
    set_has_graph_data();
  } else {
    clear_has_graph_data();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStatsTerse.graph_data)
}

// optional bool delta_frame = 5;
inline bool CMsgDOTARealtimeGameStatsTerse::has_delta_frame() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse::set_has_delta_frame() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTARealtimeGameStatsTerse::clear_has_delta_frame() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTARealtimeGameStatsTerse::clear_delta_frame() {
  delta_frame_ = false;
  clear_has_delta_frame();
}
inline bool CMsgDOTARealtimeGameStatsTerse::delta_frame() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.delta_frame)
  return delta_frame_;
}
inline void CMsgDOTARealtimeGameStatsTerse::set_delta_frame(bool value) {
  set_has_delta_frame();
  delta_frame_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.delta_frame)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CSODOTAParty_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSODOTAParty_State>() {
  return ::CSODOTAParty_State_descriptor();
}
template <> struct is_proto_enum< ::CSODOTALobby_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSODOTALobby_State>() {
  return ::CSODOTALobby_State_descriptor();
}
template <> struct is_proto_enum< ::CSODOTALobby_LobbyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSODOTALobby_LobbyType>() {
  return ::CSODOTALobby_LobbyType_descriptor();
}
template <> struct is_proto_enum< ::CMsgPerfectWorldUserLookupResponse_EResultCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgPerfectWorldUserLookupResponse_EResultCode>() {
  return ::CMsgPerfectWorldUserLookupResponse_EResultCode_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAProfileCard_EStatID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAProfileCard_EStatID>() {
  return ::CMsgDOTAProfileCard_EStatID_descriptor();
}
template <> struct is_proto_enum< ::CSODOTAPlayerChallenge_EFlags> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSODOTAPlayerChallenge_EFlags>() {
  return ::CSODOTAPlayerChallenge_EFlags_descriptor();
}
template <> struct is_proto_enum< ::CMsgGCRerollPlayerChallengeResponse_EResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGCRerollPlayerChallengeResponse_EResult>() {
  return ::CMsgGCRerollPlayerChallengeResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTARealtimeGameStats_GraphData_eStat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTARealtimeGameStats_GraphData_eStat>() {
  return ::CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTARealtimeGameStats_GraphData_eLocation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTARealtimeGameStats_GraphData_eLocation>() {
  return ::CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor();
}
template <> struct is_proto_enum< ::EDOTAGCMsg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EDOTAGCMsg>() {
  return ::EDOTAGCMsg_descriptor();
}
template <> struct is_proto_enum< ::DOTA_GameMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTA_GameMode>() {
  return ::DOTA_GameMode_descriptor();
}
template <> struct is_proto_enum< ::DOTA_GameState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTA_GameState>() {
  return ::DOTA_GameState_descriptor();
}
template <> struct is_proto_enum< ::DOTA_GC_TEAM> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTA_GC_TEAM>() {
  return ::DOTA_GC_TEAM_descriptor();
}
template <> struct is_proto_enum< ::DOTA_CM_PICK> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTA_CM_PICK>() {
  return ::DOTA_CM_PICK_descriptor();
}
template <> struct is_proto_enum< ::DOTAConnectionState_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTAConnectionState_t>() {
  return ::DOTAConnectionState_t_descriptor();
}
template <> struct is_proto_enum< ::DOTALeaverStatus_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTALeaverStatus_t>() {
  return ::DOTALeaverStatus_t_descriptor();
}
template <> struct is_proto_enum< ::DOTALowPriorityBanType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTALowPriorityBanType>() {
  return ::DOTALowPriorityBanType_descriptor();
}
template <> struct is_proto_enum< ::DOTALobbyReadyState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTALobbyReadyState>() {
  return ::DOTALobbyReadyState_descriptor();
}
template <> struct is_proto_enum< ::DOTAGameVersion> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTAGameVersion>() {
  return ::DOTAGameVersion_descriptor();
}
template <> struct is_proto_enum< ::DOTAJoinLobbyResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTAJoinLobbyResult>() {
  return ::DOTAJoinLobbyResult_descriptor();
}
template <> struct is_proto_enum< ::DOTAMatchVote> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTAMatchVote>() {
  return ::DOTAMatchVote_descriptor();
}
template <> struct is_proto_enum< ::DOTA_LobbyMemberXPBonus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTA_LobbyMemberXPBonus>() {
  return ::DOTA_LobbyMemberXPBonus_descriptor();
}
template <> struct is_proto_enum< ::DOTALobbyVisibility> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTALobbyVisibility>() {
  return ::DOTALobbyVisibility_descriptor();
}
template <> struct is_proto_enum< ::EDOTAPlayerMMRType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EDOTAPlayerMMRType>() {
  return ::EDOTAPlayerMMRType_descriptor();
}
template <> struct is_proto_enum< ::MatchType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MatchType>() {
  return ::MatchType_descriptor();
}
template <> struct is_proto_enum< ::DOTABotDifficulty> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTABotDifficulty>() {
  return ::DOTABotDifficulty_descriptor();
}
template <> struct is_proto_enum< ::MatchLanguages> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MatchLanguages>() {
  return ::MatchLanguages_descriptor();
}
template <> struct is_proto_enum< ::ETournamentTemplate> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ETournamentTemplate>() {
  return ::ETournamentTemplate_descriptor();
}
template <> struct is_proto_enum< ::ETournamentType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ETournamentType>() {
  return ::ETournamentType_descriptor();
}
template <> struct is_proto_enum< ::EEvent> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EEvent>() {
  return ::EEvent_descriptor();
}
template <> struct is_proto_enum< ::LobbyDotaTVDelay> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LobbyDotaTVDelay>() {
  return ::LobbyDotaTVDelay_descriptor();
}
template <> struct is_proto_enum< ::EMatchOutcome> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EMatchOutcome>() {
  return ::EMatchOutcome_descriptor();
}
template <> struct is_proto_enum< ::EDOTAGCSessionNeed> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EDOTAGCSessionNeed>() {
  return ::EDOTAGCSessionNeed_descriptor();
}
template <> struct is_proto_enum< ::Fantasy_Roles> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Fantasy_Roles>() {
  return ::Fantasy_Roles_descriptor();
}
template <> struct is_proto_enum< ::Fantasy_Team_Slots> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Fantasy_Team_Slots>() {
  return ::Fantasy_Team_Slots_descriptor();
}
template <> struct is_proto_enum< ::Fantasy_Selection_Mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Fantasy_Selection_Mode>() {
  return ::Fantasy_Selection_Mode_descriptor();
}
template <> struct is_proto_enum< ::DOTA_TournamentEvents> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTA_TournamentEvents>() {
  return ::DOTA_TournamentEvents_descriptor();
}
template <> struct is_proto_enum< ::DOTA_COMBATLOG_TYPES> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTA_COMBATLOG_TYPES>() {
  return ::DOTA_COMBATLOG_TYPES_descriptor();
}
template <> struct is_proto_enum< ::DOTAChatChannelType_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTAChatChannelType_t>() {
  return ::DOTAChatChannelType_t_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dota_5fgcmessages_5fcommon_2eproto__INCLUDED
