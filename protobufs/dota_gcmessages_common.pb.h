// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common.proto

#ifndef PROTOBUF_dota_5fgcmessages_5fcommon_2eproto__INCLUDED
#define PROTOBUF_dota_5fgcmessages_5fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages.pb.h"
#include "gcsdk_gcmessages.pb.h"
#include "dota_shared_enums.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

class CSODOTAGameAccountClient;
class CMsgLobbyEventPoints;
class CMsgLobbyEventPoints_AccountPoints;
class CMsgBattleCupVictory;
class CMsgLobbyBattleCupVictoryList;
class CMsgDOTABroadcastNotification;
class CProtoItemHeroStatue;
class CProtoItemTeamShowcase;
class CMatchPlayerAbilityUpgrade;
class CMatchAdditionalUnitInventory;
class CMatchPlayerPermanentBuff;
class CMatchHeroSelectEvent;
class CMsgDOTAProcessFantasyScheduledEvent;
class CMsgDOTAHasItemQuery;
class CMsgDOTAHasItemResponse;
class CMsgDOTAHasItemDefsQuery;
class CMsgDOTAHasItemDefsResponse;
class CMsgGCGetPlayerCardItemInfo;
class CMsgGCGetPlayerCardItemInfoResponse;
class CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo;
class CMsgGCToGCFantasySetMatchLeague;
class CSODOTAMapLocationState;
class CMsgLeagueAdminList;
class CCompendiumTimestampedData;
class CCompendiumGameTimeline;
class CCompendiumGameList;
class CAdditionalEquipSlot;
class CMsgDOTACombatLogEntry;
class CMsgDOTAProfileCard;
class CMsgDOTAProfileCard_Slot;
class CMsgDOTAProfileCard_Slot_Trophy;
class CMsgDOTAProfileCard_Slot_Stat;
class CMsgDOTAProfileCard_Slot_Item;
class CMsgDOTAProfileCard_Slot_Hero;
class CMsgDOTAProfileCard_Slot_Emoticon;
class CSODOTAPlayerChallenge;
class CMsgClientToGCRerollPlayerChallenge;
class CMsgGCRerollPlayerChallengeResponse;
class CMsgGCTopCustomGamesList;
class CMsgDOTARealtimeGameStats;
class CMsgDOTARealtimeGameStats_TeamDetails;
class CMsgDOTARealtimeGameStats_ItemDetails;
class CMsgDOTARealtimeGameStats_AbilityDetails;
class CMsgDOTARealtimeGameStats_HeroToHeroStats;
class CMsgDOTARealtimeGameStats_AbilityList;
class CMsgDOTARealtimeGameStats_PlayerDetails;
class CMsgDOTARealtimeGameStats_BuildingDetails;
class CMsgDOTARealtimeGameStats_KillDetails;
class CMsgDOTARealtimeGameStats_BroadcasterDetails;
class CMsgDOTARealtimeGameStats_PickBanDetails;
class CMsgDOTARealtimeGameStats_MatchDetails;
class CMsgDOTARealtimeGameStats_GraphData;
class CMsgDOTARealtimeGameStats_GraphData_LocationStats;
class CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats;
class CMsgDOTARealtimeGameStatsTerse;
class CMsgDOTARealtimeGameStatsTerse_TeamDetails;
class CMsgDOTARealtimeGameStatsTerse_PlayerDetails;
class CMsgDOTARealtimeGameStatsTerse_BuildingDetails;
class CMsgDOTARealtimeGameStatsTerse_MatchDetails;
class CMsgDOTARealtimeGameStatsTerse_GraphData;
class CMsgGCToClientMatchGroupsVersion;
class CMsgDOTASDOHeroStatsHistory;
class CMsgDOTASeasonRewards;
class CMsgDOTASeasonRewards_Reward;
class CMsgDOTASeasonAchievements;
class CMsgDOTASeasonAchievements_Achievement;
class CMsgDOTASeasonPredictions;
class CMsgDOTASeasonPredictions_Choice;
class CMsgDOTASeasonPredictions_Answers;
class CMsgDOTASeasonPredictions_QueryKeyValues;
class CMsgDOTASeasonPredictions_Prediction;
class CMsgDOTASeasonPredictions_InGamePrediction;
class CMsgDOTAMatch;
class CMsgDOTAMatch_Player;
class CMsgDOTAMatch_Player_CustomGameData;
class CMsgDOTAMatch_BroadcasterInfo;
class CMsgDOTAMatch_BroadcasterChannel;
class CMsgDOTAMatch_CustomGameData;
class CMsgPlayerCard;
class CMsgPlayerCard_StatModifier;
class CMsgDOTAFantasyPlayerStats;
class CMsgDOTAFantasyPlayerMatchStats;
class CMsgDOTABotDebugInfo;
class CMsgDOTABotDebugInfo_Bot;
class CMsgDOTABotDebugInfo_Bot_Mode;
class CMsgDOTABotDebugInfo_Bot_Action;

enum CMsgDOTAProfileCard_EStatID {
  CMsgDOTAProfileCard_EStatID_k_eStat_SoloRank = 1,
  CMsgDOTAProfileCard_EStatID_k_eStat_PartyRank = 2,
  CMsgDOTAProfileCard_EStatID_k_eStat_Wins = 3,
  CMsgDOTAProfileCard_EStatID_k_eStat_Commends = 4,
  CMsgDOTAProfileCard_EStatID_k_eStat_GamesPlayed = 5,
  CMsgDOTAProfileCard_EStatID_k_eStat_FirstMatchDate = 6
};
bool CMsgDOTAProfileCard_EStatID_IsValid(int value);
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard_EStatID_EStatID_MIN = CMsgDOTAProfileCard_EStatID_k_eStat_SoloRank;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard_EStatID_EStatID_MAX = CMsgDOTAProfileCard_EStatID_k_eStat_FirstMatchDate;
const int CMsgDOTAProfileCard_EStatID_EStatID_ARRAYSIZE = CMsgDOTAProfileCard_EStatID_EStatID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTAProfileCard_EStatID_descriptor();
inline const ::std::string& CMsgDOTAProfileCard_EStatID_Name(CMsgDOTAProfileCard_EStatID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTAProfileCard_EStatID_descriptor(), value);
}
inline bool CMsgDOTAProfileCard_EStatID_Parse(
    const ::std::string& name, CMsgDOTAProfileCard_EStatID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTAProfileCard_EStatID>(
    CMsgDOTAProfileCard_EStatID_descriptor(), name, value);
}
enum CSODOTAPlayerChallenge_EFlags {
  CSODOTAPlayerChallenge_EFlags_eFlag_InstantRerollUncompleted = 1,
  CSODOTAPlayerChallenge_EFlags_eFlag_QuestChallenge = 2
};
bool CSODOTAPlayerChallenge_EFlags_IsValid(int value);
const CSODOTAPlayerChallenge_EFlags CSODOTAPlayerChallenge_EFlags_EFlags_MIN = CSODOTAPlayerChallenge_EFlags_eFlag_InstantRerollUncompleted;
const CSODOTAPlayerChallenge_EFlags CSODOTAPlayerChallenge_EFlags_EFlags_MAX = CSODOTAPlayerChallenge_EFlags_eFlag_QuestChallenge;
const int CSODOTAPlayerChallenge_EFlags_EFlags_ARRAYSIZE = CSODOTAPlayerChallenge_EFlags_EFlags_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSODOTAPlayerChallenge_EFlags_descriptor();
inline const ::std::string& CSODOTAPlayerChallenge_EFlags_Name(CSODOTAPlayerChallenge_EFlags value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSODOTAPlayerChallenge_EFlags_descriptor(), value);
}
inline bool CSODOTAPlayerChallenge_EFlags_Parse(
    const ::std::string& name, CSODOTAPlayerChallenge_EFlags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSODOTAPlayerChallenge_EFlags>(
    CSODOTAPlayerChallenge_EFlags_descriptor(), name, value);
}
enum CMsgGCRerollPlayerChallengeResponse_EResult {
  CMsgGCRerollPlayerChallengeResponse_EResult_eResult_Success = 0,
  CMsgGCRerollPlayerChallengeResponse_EResult_eResult_Dropped = 1,
  CMsgGCRerollPlayerChallengeResponse_EResult_eResult_NotFound = 2,
  CMsgGCRerollPlayerChallengeResponse_EResult_eResult_CantReroll = 3,
  CMsgGCRerollPlayerChallengeResponse_EResult_eResult_ServerError = 4
};
bool CMsgGCRerollPlayerChallengeResponse_EResult_IsValid(int value);
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse_EResult_EResult_MIN = CMsgGCRerollPlayerChallengeResponse_EResult_eResult_Success;
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse_EResult_EResult_MAX = CMsgGCRerollPlayerChallengeResponse_EResult_eResult_ServerError;
const int CMsgGCRerollPlayerChallengeResponse_EResult_EResult_ARRAYSIZE = CMsgGCRerollPlayerChallengeResponse_EResult_EResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgGCRerollPlayerChallengeResponse_EResult_descriptor();
inline const ::std::string& CMsgGCRerollPlayerChallengeResponse_EResult_Name(CMsgGCRerollPlayerChallengeResponse_EResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgGCRerollPlayerChallengeResponse_EResult_descriptor(), value);
}
inline bool CMsgGCRerollPlayerChallengeResponse_EResult_Parse(
    const ::std::string& name, CMsgGCRerollPlayerChallengeResponse_EResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgGCRerollPlayerChallengeResponse_EResult>(
    CMsgGCRerollPlayerChallengeResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTARealtimeGameStats_GraphData_eStat {
  CMsgDOTARealtimeGameStats_GraphData_eStat_CreepGoldEarned = 0,
  CMsgDOTARealtimeGameStats_GraphData_eStat_KillGoldEarned = 1,
  CMsgDOTARealtimeGameStats_GraphData_eStat_DeathAndBuybackGoldLost = 2,
  CMsgDOTARealtimeGameStats_GraphData_eStat_XPEarned = 3
};
bool CMsgDOTARealtimeGameStats_GraphData_eStat_IsValid(int value);
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_MIN = CMsgDOTARealtimeGameStats_GraphData_eStat_CreepGoldEarned;
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_MAX = CMsgDOTARealtimeGameStats_GraphData_eStat_XPEarned;
const int CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_ARRAYSIZE = CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor();
inline const ::std::string& CMsgDOTARealtimeGameStats_GraphData_eStat_Name(CMsgDOTARealtimeGameStats_GraphData_eStat value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor(), value);
}
inline bool CMsgDOTARealtimeGameStats_GraphData_eStat_Parse(
    const ::std::string& name, CMsgDOTARealtimeGameStats_GraphData_eStat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTARealtimeGameStats_GraphData_eStat>(
    CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor(), name, value);
}
enum CMsgDOTARealtimeGameStats_GraphData_eLocation {
  CMsgDOTARealtimeGameStats_GraphData_eLocation_BotLane = 0,
  CMsgDOTARealtimeGameStats_GraphData_eLocation_MidLane = 1,
  CMsgDOTARealtimeGameStats_GraphData_eLocation_TopLane = 2,
  CMsgDOTARealtimeGameStats_GraphData_eLocation_Jungle = 3,
  CMsgDOTARealtimeGameStats_GraphData_eLocation_Ancients = 4,
  CMsgDOTARealtimeGameStats_GraphData_eLocation_Other = 5
};
bool CMsgDOTARealtimeGameStats_GraphData_eLocation_IsValid(int value);
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_MIN = CMsgDOTARealtimeGameStats_GraphData_eLocation_BotLane;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_MAX = CMsgDOTARealtimeGameStats_GraphData_eLocation_Other;
const int CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_ARRAYSIZE = CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor();
inline const ::std::string& CMsgDOTARealtimeGameStats_GraphData_eLocation_Name(CMsgDOTARealtimeGameStats_GraphData_eLocation value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor(), value);
}
inline bool CMsgDOTARealtimeGameStats_GraphData_eLocation_Parse(
    const ::std::string& name, CMsgDOTARealtimeGameStats_GraphData_eLocation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTARealtimeGameStats_GraphData_eLocation>(
    CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor(), name, value);
}
enum CMsgDOTASeasonRewards_ERewardType {
  CMsgDOTASeasonRewards_ERewardType_EconItem = 0,
  CMsgDOTASeasonRewards_ERewardType_MysteryWheel = 1,
  CMsgDOTASeasonRewards_ERewardType_AbilityEffect = 2,
  CMsgDOTASeasonRewards_ERewardType_Other = 3
};
bool CMsgDOTASeasonRewards_ERewardType_IsValid(int value);
const CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards_ERewardType_ERewardType_MIN = CMsgDOTASeasonRewards_ERewardType_EconItem;
const CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards_ERewardType_ERewardType_MAX = CMsgDOTASeasonRewards_ERewardType_Other;
const int CMsgDOTASeasonRewards_ERewardType_ERewardType_ARRAYSIZE = CMsgDOTASeasonRewards_ERewardType_ERewardType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonRewards_ERewardType_descriptor();
inline const ::std::string& CMsgDOTASeasonRewards_ERewardType_Name(CMsgDOTASeasonRewards_ERewardType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTASeasonRewards_ERewardType_descriptor(), value);
}
inline bool CMsgDOTASeasonRewards_ERewardType_Parse(
    const ::std::string& name, CMsgDOTASeasonRewards_ERewardType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTASeasonRewards_ERewardType>(
    CMsgDOTASeasonRewards_ERewardType_descriptor(), name, value);
}
enum CMsgDOTASeasonPredictions_ePredictionType {
  CMsgDOTASeasonPredictions_ePredictionType_Generic = 0,
  CMsgDOTASeasonPredictions_ePredictionType_Hero = 1,
  CMsgDOTASeasonPredictions_ePredictionType_Team = 2,
  CMsgDOTASeasonPredictions_ePredictionType_Player = 3,
  CMsgDOTASeasonPredictions_ePredictionType_Special = 4,
  CMsgDOTASeasonPredictions_ePredictionType_YesNo = 5
};
bool CMsgDOTASeasonPredictions_ePredictionType_IsValid(int value);
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions_ePredictionType_ePredictionType_MIN = CMsgDOTASeasonPredictions_ePredictionType_Generic;
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions_ePredictionType_ePredictionType_MAX = CMsgDOTASeasonPredictions_ePredictionType_YesNo;
const int CMsgDOTASeasonPredictions_ePredictionType_ePredictionType_ARRAYSIZE = CMsgDOTASeasonPredictions_ePredictionType_ePredictionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_ePredictionType_descriptor();
inline const ::std::string& CMsgDOTASeasonPredictions_ePredictionType_Name(CMsgDOTASeasonPredictions_ePredictionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTASeasonPredictions_ePredictionType_descriptor(), value);
}
inline bool CMsgDOTASeasonPredictions_ePredictionType_Parse(
    const ::std::string& name, CMsgDOTASeasonPredictions_ePredictionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTASeasonPredictions_ePredictionType>(
    CMsgDOTASeasonPredictions_ePredictionType_descriptor(), name, value);
}
enum CMsgDOTASeasonPredictions_eAnswerType {
  CMsgDOTASeasonPredictions_eAnswerType_SingleInt = 0,
  CMsgDOTASeasonPredictions_eAnswerType_SingleFloat = 1,
  CMsgDOTASeasonPredictions_eAnswerType_MultipleInt = 2,
  CMsgDOTASeasonPredictions_eAnswerType_MultipleFloat = 3,
  CMsgDOTASeasonPredictions_eAnswerType_AnswerTeam = 4,
  CMsgDOTASeasonPredictions_eAnswerType_SingleTime = 5,
  CMsgDOTASeasonPredictions_eAnswerType_MultipleTime = 6,
  CMsgDOTASeasonPredictions_eAnswerType_NoAnswer = 7
};
bool CMsgDOTASeasonPredictions_eAnswerType_IsValid(int value);
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions_eAnswerType_eAnswerType_MIN = CMsgDOTASeasonPredictions_eAnswerType_SingleInt;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions_eAnswerType_eAnswerType_MAX = CMsgDOTASeasonPredictions_eAnswerType_NoAnswer;
const int CMsgDOTASeasonPredictions_eAnswerType_eAnswerType_ARRAYSIZE = CMsgDOTASeasonPredictions_eAnswerType_eAnswerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_eAnswerType_descriptor();
inline const ::std::string& CMsgDOTASeasonPredictions_eAnswerType_Name(CMsgDOTASeasonPredictions_eAnswerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTASeasonPredictions_eAnswerType_descriptor(), value);
}
inline bool CMsgDOTASeasonPredictions_eAnswerType_Parse(
    const ::std::string& name, CMsgDOTASeasonPredictions_eAnswerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTASeasonPredictions_eAnswerType>(
    CMsgDOTASeasonPredictions_eAnswerType_descriptor(), name, value);
}
enum CMsgDOTASeasonPredictions_eResolutionType_t {
  CMsgDOTASeasonPredictions_eResolutionType_t_InvalidQuery = 0,
  CMsgDOTASeasonPredictions_eResolutionType_t_FirstToPassQuery = 1,
  CMsgDOTASeasonPredictions_eResolutionType_t_LastToPassQuery = 2,
  CMsgDOTASeasonPredictions_eResolutionType_t_LastRemainingQuery = 3,
  CMsgDOTASeasonPredictions_eResolutionType_t_MaxToPassQuery = 4,
  CMsgDOTASeasonPredictions_eResolutionType_t_MinToPassQuery = 5,
  CMsgDOTASeasonPredictions_eResolutionType_t_SumQuery = 6,
  CMsgDOTASeasonPredictions_eResolutionType_t_MaxTeamSumToPassQuery = 7,
  CMsgDOTASeasonPredictions_eResolutionType_t_MinTeamSumToPassQuery = 8
};
bool CMsgDOTASeasonPredictions_eResolutionType_t_IsValid(int value);
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions_eResolutionType_t_eResolutionType_t_MIN = CMsgDOTASeasonPredictions_eResolutionType_t_InvalidQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions_eResolutionType_t_eResolutionType_t_MAX = CMsgDOTASeasonPredictions_eResolutionType_t_MinTeamSumToPassQuery;
const int CMsgDOTASeasonPredictions_eResolutionType_t_eResolutionType_t_ARRAYSIZE = CMsgDOTASeasonPredictions_eResolutionType_t_eResolutionType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_eResolutionType_t_descriptor();
inline const ::std::string& CMsgDOTASeasonPredictions_eResolutionType_t_Name(CMsgDOTASeasonPredictions_eResolutionType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTASeasonPredictions_eResolutionType_t_descriptor(), value);
}
inline bool CMsgDOTASeasonPredictions_eResolutionType_t_Parse(
    const ::std::string& name, CMsgDOTASeasonPredictions_eResolutionType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTASeasonPredictions_eResolutionType_t>(
    CMsgDOTASeasonPredictions_eResolutionType_t_descriptor(), name, value);
}
enum CMsgDOTASeasonPredictions_eRandomSelectionGroup_t {
  CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_EarlyGame = 0,
  CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_MidGame = 1,
  CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_LateGame = 2,
  CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_Count = 3
};
bool CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_IsValid(int value);
const CMsgDOTASeasonPredictions_eRandomSelectionGroup_t CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_eRandomSelectionGroup_t_MIN = CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_EarlyGame;
const CMsgDOTASeasonPredictions_eRandomSelectionGroup_t CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_eRandomSelectionGroup_t_MAX = CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_Count;
const int CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_eRandomSelectionGroup_t_ARRAYSIZE = CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_eRandomSelectionGroup_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_descriptor();
inline const ::std::string& CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_Name(CMsgDOTASeasonPredictions_eRandomSelectionGroup_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_descriptor(), value);
}
inline bool CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_Parse(
    const ::std::string& name, CMsgDOTASeasonPredictions_eRandomSelectionGroup_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTASeasonPredictions_eRandomSelectionGroup_t>(
    CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_descriptor(), name, value);
}
enum CMsgDOTASeasonPredictions_eRawValueType_t {
  CMsgDOTASeasonPredictions_eRawValueType_t_Number = 0,
  CMsgDOTASeasonPredictions_eRawValueType_t_Time = 1
};
bool CMsgDOTASeasonPredictions_eRawValueType_t_IsValid(int value);
const CMsgDOTASeasonPredictions_eRawValueType_t CMsgDOTASeasonPredictions_eRawValueType_t_eRawValueType_t_MIN = CMsgDOTASeasonPredictions_eRawValueType_t_Number;
const CMsgDOTASeasonPredictions_eRawValueType_t CMsgDOTASeasonPredictions_eRawValueType_t_eRawValueType_t_MAX = CMsgDOTASeasonPredictions_eRawValueType_t_Time;
const int CMsgDOTASeasonPredictions_eRawValueType_t_eRawValueType_t_ARRAYSIZE = CMsgDOTASeasonPredictions_eRawValueType_t_eRawValueType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_eRawValueType_t_descriptor();
inline const ::std::string& CMsgDOTASeasonPredictions_eRawValueType_t_Name(CMsgDOTASeasonPredictions_eRawValueType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTASeasonPredictions_eRawValueType_t_descriptor(), value);
}
inline bool CMsgDOTASeasonPredictions_eRawValueType_t_Parse(
    const ::std::string& name, CMsgDOTASeasonPredictions_eRawValueType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTASeasonPredictions_eRawValueType_t>(
    CMsgDOTASeasonPredictions_eRawValueType_t_descriptor(), name, value);
}
enum CMsgDOTAMatch_ReplayState {
  CMsgDOTAMatch_ReplayState_REPLAY_AVAILABLE = 0,
  CMsgDOTAMatch_ReplayState_REPLAY_NOT_RECORDED = 1,
  CMsgDOTAMatch_ReplayState_REPLAY_EXPIRED = 2
};
bool CMsgDOTAMatch_ReplayState_IsValid(int value);
const CMsgDOTAMatch_ReplayState CMsgDOTAMatch_ReplayState_ReplayState_MIN = CMsgDOTAMatch_ReplayState_REPLAY_AVAILABLE;
const CMsgDOTAMatch_ReplayState CMsgDOTAMatch_ReplayState_ReplayState_MAX = CMsgDOTAMatch_ReplayState_REPLAY_EXPIRED;
const int CMsgDOTAMatch_ReplayState_ReplayState_ARRAYSIZE = CMsgDOTAMatch_ReplayState_ReplayState_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTAMatch_ReplayState_descriptor();
inline const ::std::string& CMsgDOTAMatch_ReplayState_Name(CMsgDOTAMatch_ReplayState value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTAMatch_ReplayState_descriptor(), value);
}
inline bool CMsgDOTAMatch_ReplayState_Parse(
    const ::std::string& name, CMsgDOTAMatch_ReplayState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTAMatch_ReplayState>(
    CMsgDOTAMatch_ReplayState_descriptor(), name, value);
}
enum ESpecialPingValue {
  k_ESpecialPingValue_NoData = 16382,
  k_ESpecialPingValue_Failed = 16383
};
bool ESpecialPingValue_IsValid(int value);
const ESpecialPingValue ESpecialPingValue_MIN = k_ESpecialPingValue_NoData;
const ESpecialPingValue ESpecialPingValue_MAX = k_ESpecialPingValue_Failed;
const int ESpecialPingValue_ARRAYSIZE = ESpecialPingValue_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESpecialPingValue_descriptor();
inline const ::std::string& ESpecialPingValue_Name(ESpecialPingValue value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESpecialPingValue_descriptor(), value);
}
inline bool ESpecialPingValue_Parse(
    const ::std::string& name, ESpecialPingValue* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESpecialPingValue>(
    ESpecialPingValue_descriptor(), name, value);
}
enum EDOTAGCSessionNeed {
  k_EDOTAGCSessionNeed_Unknown = 0,
  k_EDOTAGCSessionNeed_UserNoSessionNeeded = 100,
  k_EDOTAGCSessionNeed_UserInOnlineGame = 101,
  k_EDOTAGCSessionNeed_UserInLocalGame = 102,
  k_EDOTAGCSessionNeed_UserInUIWasConnected = 103,
  k_EDOTAGCSessionNeed_UserInUINeverConnected = 104,
  k_EDOTAGCSessionNeed_UserTutorials = 105,
  k_EDOTAGCSessionNeed_UserInUIWasConnectedIdle = 106,
  k_EDOTAGCSessionNeed_UserInUINeverConnectedIdle = 107,
  k_EDOTAGCSessionNeed_GameServerOnline = 200,
  k_EDOTAGCSessionNeed_GameServerLocal = 201,
  k_EDOTAGCSessionNeed_GameServerIdle = 202,
  k_EDOTAGCSessionNeed_GameServerRelay = 203,
  k_EDOTAGCSessionNeed_GameServerLocalUpload = 204
};
bool EDOTAGCSessionNeed_IsValid(int value);
const EDOTAGCSessionNeed EDOTAGCSessionNeed_MIN = k_EDOTAGCSessionNeed_Unknown;
const EDOTAGCSessionNeed EDOTAGCSessionNeed_MAX = k_EDOTAGCSessionNeed_GameServerLocalUpload;
const int EDOTAGCSessionNeed_ARRAYSIZE = EDOTAGCSessionNeed_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDOTAGCSessionNeed_descriptor();
inline const ::std::string& EDOTAGCSessionNeed_Name(EDOTAGCSessionNeed value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDOTAGCSessionNeed_descriptor(), value);
}
inline bool EDOTAGCSessionNeed_Parse(
    const ::std::string& name, EDOTAGCSessionNeed* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDOTAGCSessionNeed>(
    EDOTAGCSessionNeed_descriptor(), name, value);
}
enum DOTA_TournamentEvents {
  TE_FIRST_BLOOD = 0,
  TE_GAME_END = 1,
  TE_MULTI_KILL = 2,
  TE_HERO_DENY = 3,
  TE_AEGIS_DENY = 4,
  TE_AEGIS_STOLEN = 5,
  TE_GODLIKE = 6,
  TE_COURIER_KILL = 7,
  TE_ECHOSLAM = 8,
  TE_RAPIER = 9,
  TE_EARLY_ROSHAN = 10,
  TE_BLACK_HOLE = 11
};
bool DOTA_TournamentEvents_IsValid(int value);
const DOTA_TournamentEvents DOTA_TournamentEvents_MIN = TE_FIRST_BLOOD;
const DOTA_TournamentEvents DOTA_TournamentEvents_MAX = TE_BLACK_HOLE;
const int DOTA_TournamentEvents_ARRAYSIZE = DOTA_TournamentEvents_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_TournamentEvents_descriptor();
inline const ::std::string& DOTA_TournamentEvents_Name(DOTA_TournamentEvents value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_TournamentEvents_descriptor(), value);
}
inline bool DOTA_TournamentEvents_Parse(
    const ::std::string& name, DOTA_TournamentEvents* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_TournamentEvents>(
    DOTA_TournamentEvents_descriptor(), name, value);
}
enum DOTA_COMBATLOG_TYPES {
  DOTA_COMBATLOG_INVALID = -1,
  DOTA_COMBATLOG_DAMAGE = 0,
  DOTA_COMBATLOG_HEAL = 1,
  DOTA_COMBATLOG_MODIFIER_ADD = 2,
  DOTA_COMBATLOG_MODIFIER_REMOVE = 3,
  DOTA_COMBATLOG_DEATH = 4,
  DOTA_COMBATLOG_ABILITY = 5,
  DOTA_COMBATLOG_ITEM = 6,
  DOTA_COMBATLOG_LOCATION = 7,
  DOTA_COMBATLOG_GOLD = 8,
  DOTA_COMBATLOG_GAME_STATE = 9,
  DOTA_COMBATLOG_XP = 10,
  DOTA_COMBATLOG_PURCHASE = 11,
  DOTA_COMBATLOG_BUYBACK = 12,
  DOTA_COMBATLOG_ABILITY_TRIGGER = 13,
  DOTA_COMBATLOG_PLAYERSTATS = 14,
  DOTA_COMBATLOG_MULTIKILL = 15,
  DOTA_COMBATLOG_KILLSTREAK = 16,
  DOTA_COMBATLOG_TEAM_BUILDING_KILL = 17,
  DOTA_COMBATLOG_FIRST_BLOOD = 18,
  DOTA_COMBATLOG_MODIFIER_REFRESH = 19,
  DOTA_COMBATLOG_NEUTRAL_CAMP_STACK = 20,
  DOTA_COMBATLOG_PICKUP_RUNE = 21,
  DOTA_COMBATLOG_REVEALED_INVISIBLE = 22,
  DOTA_COMBATLOG_HERO_SAVED = 23,
  DOTA_COMBATLOG_MANA_RESTORED = 24,
  DOTA_COMBATLOG_HERO_LEVELUP = 25,
  DOTA_COMBATLOG_BOTTLE_HEAL_ALLY = 26,
  DOTA_COMBATLOG_ENDGAME_STATS = 27,
  DOTA_COMBATLOG_INTERRUPT_CHANNEL = 28,
  DOTA_COMBATLOG_ALLIED_GOLD = 29,
  DOTA_COMBATLOG_AEGIS_TAKEN = 30,
  DOTA_COMBATLOG_MANA_DAMAGE = 31,
  DOTA_COMBATLOG_PHYSICAL_DAMAGE_PREVENTED = 32,
  DOTA_COMBATLOG_UNIT_SUMMONED = 33,
  DOTA_COMBATLOG_ATTACK_EVADE = 34,
  DOTA_COMBATLOG_TREE_CUT = 35,
  DOTA_COMBATLOG_SUCCESSFUL_SCAN = 36,
  DOTA_COMBATLOG_END_KILLSTREAK = 37
};
bool DOTA_COMBATLOG_TYPES_IsValid(int value);
const DOTA_COMBATLOG_TYPES DOTA_COMBATLOG_TYPES_MIN = DOTA_COMBATLOG_INVALID;
const DOTA_COMBATLOG_TYPES DOTA_COMBATLOG_TYPES_MAX = DOTA_COMBATLOG_END_KILLSTREAK;
const int DOTA_COMBATLOG_TYPES_ARRAYSIZE = DOTA_COMBATLOG_TYPES_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_COMBATLOG_TYPES_descriptor();
inline const ::std::string& DOTA_COMBATLOG_TYPES_Name(DOTA_COMBATLOG_TYPES value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_COMBATLOG_TYPES_descriptor(), value);
}
inline bool DOTA_COMBATLOG_TYPES_Parse(
    const ::std::string& name, DOTA_COMBATLOG_TYPES* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_COMBATLOG_TYPES>(
    DOTA_COMBATLOG_TYPES_descriptor(), name, value);
}
// ===================================================================

class CSODOTAGameAccountClient : public ::google::protobuf::Message {
 public:
  CSODOTAGameAccountClient();
  virtual ~CSODOTAGameAccountClient();

  CSODOTAGameAccountClient(const CSODOTAGameAccountClient& from);

  inline CSODOTAGameAccountClient& operator=(const CSODOTAGameAccountClient& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAGameAccountClient& default_instance();

  void Swap(CSODOTAGameAccountClient* other);

  // implements Message ----------------------------------------------

  CSODOTAGameAccountClient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTAGameAccountClient& from);
  void MergeFrom(const CSODOTAGameAccountClient& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 wins = 3;
  inline bool has_wins() const;
  inline void clear_wins();
  static const int kWinsFieldNumber = 3;
  inline ::google::protobuf::uint32 wins() const;
  inline void set_wins(::google::protobuf::uint32 value);

  // optional uint32 losses = 4;
  inline bool has_losses() const;
  inline void clear_losses();
  static const int kLossesFieldNumber = 4;
  inline ::google::protobuf::uint32 losses() const;
  inline void set_losses(::google::protobuf::uint32 value);

  // optional uint32 xp = 12;
  inline bool has_xp() const;
  inline void clear_xp();
  static const int kXpFieldNumber = 12;
  inline ::google::protobuf::uint32 xp() const;
  inline void set_xp(::google::protobuf::uint32 value);

  // optional uint32 level = 13;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 13;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 initial_skill = 14;
  inline bool has_initial_skill() const;
  inline void clear_initial_skill();
  static const int kInitialSkillFieldNumber = 14;
  inline ::google::protobuf::uint32 initial_skill() const;
  inline void set_initial_skill(::google::protobuf::uint32 value);

  // optional uint32 leaver_count = 15;
  inline bool has_leaver_count() const;
  inline void clear_leaver_count();
  static const int kLeaverCountFieldNumber = 15;
  inline ::google::protobuf::uint32 leaver_count() const;
  inline void set_leaver_count(::google::protobuf::uint32 value);

  // optional uint32 secondary_leaver_count = 58;
  inline bool has_secondary_leaver_count() const;
  inline void clear_secondary_leaver_count();
  static const int kSecondaryLeaverCountFieldNumber = 58;
  inline ::google::protobuf::uint32 secondary_leaver_count() const;
  inline void set_secondary_leaver_count(::google::protobuf::uint32 value);

  // optional uint32 low_priority_until_date = 18;
  inline bool has_low_priority_until_date() const;
  inline void clear_low_priority_until_date();
  static const int kLowPriorityUntilDateFieldNumber = 18;
  inline ::google::protobuf::uint32 low_priority_until_date() const;
  inline void set_low_priority_until_date(::google::protobuf::uint32 value);

  // optional uint32 prevent_text_chat_until_date = 20;
  inline bool has_prevent_text_chat_until_date() const;
  inline void clear_prevent_text_chat_until_date();
  static const int kPreventTextChatUntilDateFieldNumber = 20;
  inline ::google::protobuf::uint32 prevent_text_chat_until_date() const;
  inline void set_prevent_text_chat_until_date(::google::protobuf::uint32 value);

  // optional uint32 prevent_voice_until_date = 21;
  inline bool has_prevent_voice_until_date() const;
  inline void clear_prevent_voice_until_date();
  static const int kPreventVoiceUntilDateFieldNumber = 21;
  inline ::google::protobuf::uint32 prevent_voice_until_date() const;
  inline void set_prevent_voice_until_date(::google::protobuf::uint32 value);

  // optional uint32 prevent_public_text_chat_until_date = 86;
  inline bool has_prevent_public_text_chat_until_date() const;
  inline void clear_prevent_public_text_chat_until_date();
  static const int kPreventPublicTextChatUntilDateFieldNumber = 86;
  inline ::google::protobuf::uint32 prevent_public_text_chat_until_date() const;
  inline void set_prevent_public_text_chat_until_date(::google::protobuf::uint32 value);

  // optional uint32 last_abandoned_game_date = 22;
  inline bool has_last_abandoned_game_date() const;
  inline void clear_last_abandoned_game_date();
  static const int kLastAbandonedGameDateFieldNumber = 22;
  inline ::google::protobuf::uint32 last_abandoned_game_date() const;
  inline void set_last_abandoned_game_date(::google::protobuf::uint32 value);

  // optional uint32 last_secondary_abandoned_game_date = 59;
  inline bool has_last_secondary_abandoned_game_date() const;
  inline void clear_last_secondary_abandoned_game_date();
  static const int kLastSecondaryAbandonedGameDateFieldNumber = 59;
  inline ::google::protobuf::uint32 last_secondary_abandoned_game_date() const;
  inline void set_last_secondary_abandoned_game_date(::google::protobuf::uint32 value);

  // optional uint32 leaver_penalty_count = 23;
  inline bool has_leaver_penalty_count() const;
  inline void clear_leaver_penalty_count();
  static const int kLeaverPenaltyCountFieldNumber = 23;
  inline ::google::protobuf::uint32 leaver_penalty_count() const;
  inline void set_leaver_penalty_count(::google::protobuf::uint32 value);

  // optional uint32 completed_game_streak = 24;
  inline bool has_completed_game_streak() const;
  inline void clear_completed_game_streak();
  static const int kCompletedGameStreakFieldNumber = 24;
  inline ::google::protobuf::uint32 completed_game_streak() const;
  inline void set_completed_game_streak(::google::protobuf::uint32 value);

  // optional uint32 teaching = 28;
  inline bool has_teaching() const;
  inline void clear_teaching();
  static const int kTeachingFieldNumber = 28;
  inline ::google::protobuf::uint32 teaching() const;
  inline void set_teaching(::google::protobuf::uint32 value);

  // optional uint32 leadership = 29;
  inline bool has_leadership() const;
  inline void clear_leadership();
  static const int kLeadershipFieldNumber = 29;
  inline ::google::protobuf::uint32 leadership() const;
  inline void set_leadership(::google::protobuf::uint32 value);

  // optional uint32 friendly = 30;
  inline bool has_friendly() const;
  inline void clear_friendly();
  static const int kFriendlyFieldNumber = 30;
  inline ::google::protobuf::uint32 friendly() const;
  inline void set_friendly(::google::protobuf::uint32 value);

  // optional uint32 forgiving = 31;
  inline bool has_forgiving() const;
  inline void clear_forgiving();
  static const int kForgivingFieldNumber = 31;
  inline ::google::protobuf::uint32 forgiving() const;
  inline void set_forgiving(::google::protobuf::uint32 value);

  // optional uint32 account_disabled_until_date = 38;
  inline bool has_account_disabled_until_date() const;
  inline void clear_account_disabled_until_date();
  static const int kAccountDisabledUntilDateFieldNumber = 38;
  inline ::google::protobuf::uint32 account_disabled_until_date() const;
  inline void set_account_disabled_until_date(::google::protobuf::uint32 value);

  // optional uint32 account_disabled_count = 39;
  inline bool has_account_disabled_count() const;
  inline void clear_account_disabled_count();
  static const int kAccountDisabledCountFieldNumber = 39;
  inline ::google::protobuf::uint32 account_disabled_count() const;
  inline void set_account_disabled_count(::google::protobuf::uint32 value);

  // optional uint32 showcase_hero_id = 40;
  inline bool has_showcase_hero_id() const;
  inline void clear_showcase_hero_id();
  static const int kShowcaseHeroIdFieldNumber = 40;
  inline ::google::protobuf::uint32 showcase_hero_id() const;
  inline void set_showcase_hero_id(::google::protobuf::uint32 value);

  // optional uint32 match_disabled_until_date = 41;
  inline bool has_match_disabled_until_date() const;
  inline void clear_match_disabled_until_date();
  static const int kMatchDisabledUntilDateFieldNumber = 41;
  inline ::google::protobuf::uint32 match_disabled_until_date() const;
  inline void set_match_disabled_until_date(::google::protobuf::uint32 value);

  // optional uint32 match_disabled_count = 42;
  inline bool has_match_disabled_count() const;
  inline void clear_match_disabled_count();
  static const int kMatchDisabledCountFieldNumber = 42;
  inline ::google::protobuf::uint32 match_disabled_count() const;
  inline void set_match_disabled_count(::google::protobuf::uint32 value);

  // optional .PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
  inline bool has_partner_account_type() const;
  inline void clear_partner_account_type();
  static const int kPartnerAccountTypeFieldNumber = 44;
  inline ::PartnerAccountType partner_account_type() const;
  inline void set_partner_account_type(::PartnerAccountType value);

  // optional uint32 partner_account_state = 45;
  inline bool has_partner_account_state() const;
  inline void clear_partner_account_state();
  static const int kPartnerAccountStateFieldNumber = 45;
  inline ::google::protobuf::uint32 partner_account_state() const;
  inline void set_partner_account_state(::google::protobuf::uint32 value);

  // optional uint32 shutdownlawterminatetimestamp = 47;
  inline bool has_shutdownlawterminatetimestamp() const;
  inline void clear_shutdownlawterminatetimestamp();
  static const int kShutdownlawterminatetimestampFieldNumber = 47;
  inline ::google::protobuf::uint32 shutdownlawterminatetimestamp() const;
  inline void set_shutdownlawterminatetimestamp(::google::protobuf::uint32 value);

  // optional uint32 low_priority_games_remaining = 48;
  inline bool has_low_priority_games_remaining() const;
  inline void clear_low_priority_games_remaining();
  static const int kLowPriorityGamesRemainingFieldNumber = 48;
  inline ::google::protobuf::uint32 low_priority_games_remaining() const;
  inline void set_low_priority_games_remaining(::google::protobuf::uint32 value);

  // optional uint32 competitive_rank = 49;
  inline bool has_competitive_rank() const;
  inline void clear_competitive_rank();
  static const int kCompetitiveRankFieldNumber = 49;
  inline ::google::protobuf::uint32 competitive_rank() const;
  inline void set_competitive_rank(::google::protobuf::uint32 value);

  // optional uint32 calibration_games_remaining = 51;
  inline bool has_calibration_games_remaining() const;
  inline void clear_calibration_games_remaining();
  static const int kCalibrationGamesRemainingFieldNumber = 51;
  inline ::google::protobuf::uint32 calibration_games_remaining() const;
  inline void set_calibration_games_remaining(::google::protobuf::uint32 value);

  // optional uint32 solo_competitive_rank = 52;
  inline bool has_solo_competitive_rank() const;
  inline void clear_solo_competitive_rank();
  static const int kSoloCompetitiveRankFieldNumber = 52;
  inline ::google::protobuf::uint32 solo_competitive_rank() const;
  inline void set_solo_competitive_rank(::google::protobuf::uint32 value);

  // optional uint32 solo_calibration_games_remaining = 54;
  inline bool has_solo_calibration_games_remaining() const;
  inline void clear_solo_calibration_games_remaining();
  static const int kSoloCalibrationGamesRemainingFieldNumber = 54;
  inline ::google::protobuf::uint32 solo_calibration_games_remaining() const;
  inline void set_solo_calibration_games_remaining(::google::protobuf::uint32 value);

  // optional uint32 general_seasonal_ranked_rank = 75;
  inline bool has_general_seasonal_ranked_rank() const;
  inline void clear_general_seasonal_ranked_rank();
  static const int kGeneralSeasonalRankedRankFieldNumber = 75;
  inline ::google::protobuf::uint32 general_seasonal_ranked_rank() const;
  inline void set_general_seasonal_ranked_rank(::google::protobuf::uint32 value);

  // optional uint32 general_seasonal_ranked_calibration_games_remaining = 76;
  inline bool has_general_seasonal_ranked_calibration_games_remaining() const;
  inline void clear_general_seasonal_ranked_calibration_games_remaining();
  static const int kGeneralSeasonalRankedCalibrationGamesRemainingFieldNumber = 76;
  inline ::google::protobuf::uint32 general_seasonal_ranked_calibration_games_remaining() const;
  inline void set_general_seasonal_ranked_calibration_games_remaining(::google::protobuf::uint32 value);

  // optional uint32 general_seasonal_ranked_games_played = 80;
  inline bool has_general_seasonal_ranked_games_played() const;
  inline void clear_general_seasonal_ranked_games_played();
  static const int kGeneralSeasonalRankedGamesPlayedFieldNumber = 80;
  inline ::google::protobuf::uint32 general_seasonal_ranked_games_played() const;
  inline void set_general_seasonal_ranked_games_played(::google::protobuf::uint32 value);

  // optional uint32 general_seasonal_ranked_rank_peak = 81;
  inline bool has_general_seasonal_ranked_rank_peak() const;
  inline void clear_general_seasonal_ranked_rank_peak();
  static const int kGeneralSeasonalRankedRankPeakFieldNumber = 81;
  inline ::google::protobuf::uint32 general_seasonal_ranked_rank_peak() const;
  inline void set_general_seasonal_ranked_rank_peak(::google::protobuf::uint32 value);

  // optional bool general_seasonal_rank_transferred = 83;
  inline bool has_general_seasonal_rank_transferred() const;
  inline void clear_general_seasonal_rank_transferred();
  static const int kGeneralSeasonalRankTransferredFieldNumber = 83;
  inline bool general_seasonal_rank_transferred() const;
  inline void set_general_seasonal_rank_transferred(bool value);

  // optional uint32 solo_seasonal_ranked_rank = 77;
  inline bool has_solo_seasonal_ranked_rank() const;
  inline void clear_solo_seasonal_ranked_rank();
  static const int kSoloSeasonalRankedRankFieldNumber = 77;
  inline ::google::protobuf::uint32 solo_seasonal_ranked_rank() const;
  inline void set_solo_seasonal_ranked_rank(::google::protobuf::uint32 value);

  // optional uint32 solo_seasonal_ranked_calibration_games_remaining = 78;
  inline bool has_solo_seasonal_ranked_calibration_games_remaining() const;
  inline void clear_solo_seasonal_ranked_calibration_games_remaining();
  static const int kSoloSeasonalRankedCalibrationGamesRemainingFieldNumber = 78;
  inline ::google::protobuf::uint32 solo_seasonal_ranked_calibration_games_remaining() const;
  inline void set_solo_seasonal_ranked_calibration_games_remaining(::google::protobuf::uint32 value);

  // optional uint32 solo_seasonal_ranked_games_played = 79;
  inline bool has_solo_seasonal_ranked_games_played() const;
  inline void clear_solo_seasonal_ranked_games_played();
  static const int kSoloSeasonalRankedGamesPlayedFieldNumber = 79;
  inline ::google::protobuf::uint32 solo_seasonal_ranked_games_played() const;
  inline void set_solo_seasonal_ranked_games_played(::google::protobuf::uint32 value);

  // optional uint32 solo_seasonal_ranked_rank_peak = 82;
  inline bool has_solo_seasonal_ranked_rank_peak() const;
  inline void clear_solo_seasonal_ranked_rank_peak();
  static const int kSoloSeasonalRankedRankPeakFieldNumber = 82;
  inline ::google::protobuf::uint32 solo_seasonal_ranked_rank_peak() const;
  inline void set_solo_seasonal_ranked_rank_peak(::google::protobuf::uint32 value);

  // optional bool solo_seasonal_rank_transferred = 84;
  inline bool has_solo_seasonal_rank_transferred() const;
  inline void clear_solo_seasonal_rank_transferred();
  static const int kSoloSeasonalRankTransferredFieldNumber = 84;
  inline bool solo_seasonal_rank_transferred() const;
  inline void set_solo_seasonal_rank_transferred(bool value);

  // optional uint32 recruitment_level = 55;
  inline bool has_recruitment_level() const;
  inline void clear_recruitment_level();
  static const int kRecruitmentLevelFieldNumber = 55;
  inline ::google::protobuf::uint32 recruitment_level() const;
  inline void set_recruitment_level(::google::protobuf::uint32 value);

  // optional bool has_new_notifications = 56;
  inline bool has_has_new_notifications() const;
  inline void clear_has_new_notifications();
  static const int kHasNewNotificationsFieldNumber = 56;
  inline bool has_new_notifications() const;
  inline void set_has_new_notifications(bool value);

  // optional bool is_league_admin = 57;
  inline bool has_is_league_admin() const;
  inline void clear_is_league_admin();
  static const int kIsLeagueAdminFieldNumber = 57;
  inline bool is_league_admin() const;
  inline void set_is_league_admin(bool value);

  // optional uint32 casual_games_played = 60;
  inline bool has_casual_games_played() const;
  inline void clear_casual_games_played();
  static const int kCasualGamesPlayedFieldNumber = 60;
  inline ::google::protobuf::uint32 casual_games_played() const;
  inline void set_casual_games_played(::google::protobuf::uint32 value);

  // optional uint32 solo_competitive_games_played = 61;
  inline bool has_solo_competitive_games_played() const;
  inline void clear_solo_competitive_games_played();
  static const int kSoloCompetitiveGamesPlayedFieldNumber = 61;
  inline ::google::protobuf::uint32 solo_competitive_games_played() const;
  inline void set_solo_competitive_games_played(::google::protobuf::uint32 value);

  // optional uint32 party_competitive_games_played = 62;
  inline bool has_party_competitive_games_played() const;
  inline void clear_party_competitive_games_played();
  static const int kPartyCompetitiveGamesPlayedFieldNumber = 62;
  inline ::google::protobuf::uint32 party_competitive_games_played() const;
  inline void set_party_competitive_games_played(::google::protobuf::uint32 value);

  // optional uint32 casual_1v1_games_played = 65;
  inline bool has_casual_1v1_games_played() const;
  inline void clear_casual_1v1_games_played();
  static const int kCasual1V1GamesPlayedFieldNumber = 65;
  inline ::google::protobuf::uint32 casual_1v1_games_played() const;
  inline void set_casual_1v1_games_played(::google::protobuf::uint32 value);

  // optional uint32 competitive_team_games_played = 66;
  inline bool has_competitive_team_games_played() const;
  inline void clear_competitive_team_games_played();
  static const int kCompetitiveTeamGamesPlayedFieldNumber = 66;
  inline ::google::protobuf::uint32 competitive_team_games_played() const;
  inline void set_competitive_team_games_played(::google::protobuf::uint32 value);

  // optional uint32 curr_all_hero_challenge_id = 67;
  inline bool has_curr_all_hero_challenge_id() const;
  inline void clear_curr_all_hero_challenge_id();
  static const int kCurrAllHeroChallengeIdFieldNumber = 67;
  inline ::google::protobuf::uint32 curr_all_hero_challenge_id() const;
  inline void set_curr_all_hero_challenge_id(::google::protobuf::uint32 value);

  // optional uint32 play_time_points = 68;
  inline bool has_play_time_points() const;
  inline void clear_play_time_points();
  static const int kPlayTimePointsFieldNumber = 68;
  inline ::google::protobuf::uint32 play_time_points() const;
  inline void set_play_time_points(::google::protobuf::uint32 value);

  // optional uint32 account_flags = 69;
  inline bool has_account_flags() const;
  inline void clear_account_flags();
  static const int kAccountFlagsFieldNumber = 69;
  inline ::google::protobuf::uint32 account_flags() const;
  inline void set_account_flags(::google::protobuf::uint32 value);

  // optional uint32 play_time_level = 70;
  inline bool has_play_time_level() const;
  inline void clear_play_time_level();
  static const int kPlayTimeLevelFieldNumber = 70;
  inline ::google::protobuf::uint32 play_time_level() const;
  inline void set_play_time_level(::google::protobuf::uint32 value);

  // optional uint32 player_behavior_seq_num_last_report = 71;
  inline bool has_player_behavior_seq_num_last_report() const;
  inline void clear_player_behavior_seq_num_last_report();
  static const int kPlayerBehaviorSeqNumLastReportFieldNumber = 71;
  inline ::google::protobuf::uint32 player_behavior_seq_num_last_report() const;
  inline void set_player_behavior_seq_num_last_report(::google::protobuf::uint32 value);

  // optional uint32 player_behavior_score_last_report = 72;
  inline bool has_player_behavior_score_last_report() const;
  inline void clear_player_behavior_score_last_report();
  static const int kPlayerBehaviorScoreLastReportFieldNumber = 72;
  inline ::google::protobuf::uint32 player_behavior_score_last_report() const;
  inline void set_player_behavior_score_last_report(::google::protobuf::uint32 value);

  // optional bool player_behavior_report_old_data = 73;
  inline bool has_player_behavior_report_old_data() const;
  inline void clear_player_behavior_report_old_data();
  static const int kPlayerBehaviorReportOldDataFieldNumber = 73;
  inline bool player_behavior_report_old_data() const;
  inline void set_player_behavior_report_old_data(bool value);

  // optional uint32 tourney_skill_level = 74;
  inline bool has_tourney_skill_level() const;
  inline void clear_tourney_skill_level();
  static const int kTourneySkillLevelFieldNumber = 74;
  inline ::google::protobuf::uint32 tourney_skill_level() const;
  inline void set_tourney_skill_level(::google::protobuf::uint32 value);

  // optional uint32 tourney_recent_participation_date = 85;
  inline bool has_tourney_recent_participation_date() const;
  inline void clear_tourney_recent_participation_date();
  static const int kTourneyRecentParticipationDateFieldNumber = 85;
  inline ::google::protobuf::uint32 tourney_recent_participation_date() const;
  inline void set_tourney_recent_participation_date(::google::protobuf::uint32 value);

  // optional uint32 favorite_team = 87;
  inline bool has_favorite_team() const;
  inline void clear_favorite_team();
  static const int kFavoriteTeamFieldNumber = 87;
  inline ::google::protobuf::uint32 favorite_team() const;
  inline void set_favorite_team(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSODOTAGameAccountClient)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_wins();
  inline void clear_has_wins();
  inline void set_has_losses();
  inline void clear_has_losses();
  inline void set_has_xp();
  inline void clear_has_xp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_initial_skill();
  inline void clear_has_initial_skill();
  inline void set_has_leaver_count();
  inline void clear_has_leaver_count();
  inline void set_has_secondary_leaver_count();
  inline void clear_has_secondary_leaver_count();
  inline void set_has_low_priority_until_date();
  inline void clear_has_low_priority_until_date();
  inline void set_has_prevent_text_chat_until_date();
  inline void clear_has_prevent_text_chat_until_date();
  inline void set_has_prevent_voice_until_date();
  inline void clear_has_prevent_voice_until_date();
  inline void set_has_prevent_public_text_chat_until_date();
  inline void clear_has_prevent_public_text_chat_until_date();
  inline void set_has_last_abandoned_game_date();
  inline void clear_has_last_abandoned_game_date();
  inline void set_has_last_secondary_abandoned_game_date();
  inline void clear_has_last_secondary_abandoned_game_date();
  inline void set_has_leaver_penalty_count();
  inline void clear_has_leaver_penalty_count();
  inline void set_has_completed_game_streak();
  inline void clear_has_completed_game_streak();
  inline void set_has_teaching();
  inline void clear_has_teaching();
  inline void set_has_leadership();
  inline void clear_has_leadership();
  inline void set_has_friendly();
  inline void clear_has_friendly();
  inline void set_has_forgiving();
  inline void clear_has_forgiving();
  inline void set_has_account_disabled_until_date();
  inline void clear_has_account_disabled_until_date();
  inline void set_has_account_disabled_count();
  inline void clear_has_account_disabled_count();
  inline void set_has_showcase_hero_id();
  inline void clear_has_showcase_hero_id();
  inline void set_has_match_disabled_until_date();
  inline void clear_has_match_disabled_until_date();
  inline void set_has_match_disabled_count();
  inline void clear_has_match_disabled_count();
  inline void set_has_partner_account_type();
  inline void clear_has_partner_account_type();
  inline void set_has_partner_account_state();
  inline void clear_has_partner_account_state();
  inline void set_has_shutdownlawterminatetimestamp();
  inline void clear_has_shutdownlawterminatetimestamp();
  inline void set_has_low_priority_games_remaining();
  inline void clear_has_low_priority_games_remaining();
  inline void set_has_competitive_rank();
  inline void clear_has_competitive_rank();
  inline void set_has_calibration_games_remaining();
  inline void clear_has_calibration_games_remaining();
  inline void set_has_solo_competitive_rank();
  inline void clear_has_solo_competitive_rank();
  inline void set_has_solo_calibration_games_remaining();
  inline void clear_has_solo_calibration_games_remaining();
  inline void set_has_general_seasonal_ranked_rank();
  inline void clear_has_general_seasonal_ranked_rank();
  inline void set_has_general_seasonal_ranked_calibration_games_remaining();
  inline void clear_has_general_seasonal_ranked_calibration_games_remaining();
  inline void set_has_general_seasonal_ranked_games_played();
  inline void clear_has_general_seasonal_ranked_games_played();
  inline void set_has_general_seasonal_ranked_rank_peak();
  inline void clear_has_general_seasonal_ranked_rank_peak();
  inline void set_has_general_seasonal_rank_transferred();
  inline void clear_has_general_seasonal_rank_transferred();
  inline void set_has_solo_seasonal_ranked_rank();
  inline void clear_has_solo_seasonal_ranked_rank();
  inline void set_has_solo_seasonal_ranked_calibration_games_remaining();
  inline void clear_has_solo_seasonal_ranked_calibration_games_remaining();
  inline void set_has_solo_seasonal_ranked_games_played();
  inline void clear_has_solo_seasonal_ranked_games_played();
  inline void set_has_solo_seasonal_ranked_rank_peak();
  inline void clear_has_solo_seasonal_ranked_rank_peak();
  inline void set_has_solo_seasonal_rank_transferred();
  inline void clear_has_solo_seasonal_rank_transferred();
  inline void set_has_recruitment_level();
  inline void clear_has_recruitment_level();
  inline void set_has_has_new_notifications();
  inline void clear_has_has_new_notifications();
  inline void set_has_is_league_admin();
  inline void clear_has_is_league_admin();
  inline void set_has_casual_games_played();
  inline void clear_has_casual_games_played();
  inline void set_has_solo_competitive_games_played();
  inline void clear_has_solo_competitive_games_played();
  inline void set_has_party_competitive_games_played();
  inline void clear_has_party_competitive_games_played();
  inline void set_has_casual_1v1_games_played();
  inline void clear_has_casual_1v1_games_played();
  inline void set_has_competitive_team_games_played();
  inline void clear_has_competitive_team_games_played();
  inline void set_has_curr_all_hero_challenge_id();
  inline void clear_has_curr_all_hero_challenge_id();
  inline void set_has_play_time_points();
  inline void clear_has_play_time_points();
  inline void set_has_account_flags();
  inline void clear_has_account_flags();
  inline void set_has_play_time_level();
  inline void clear_has_play_time_level();
  inline void set_has_player_behavior_seq_num_last_report();
  inline void clear_has_player_behavior_seq_num_last_report();
  inline void set_has_player_behavior_score_last_report();
  inline void clear_has_player_behavior_score_last_report();
  inline void set_has_player_behavior_report_old_data();
  inline void clear_has_player_behavior_report_old_data();
  inline void set_has_tourney_skill_level();
  inline void clear_has_tourney_skill_level();
  inline void set_has_tourney_recent_participation_date();
  inline void clear_has_tourney_recent_participation_date();
  inline void set_has_favorite_team();
  inline void clear_has_favorite_team();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 wins_;
  ::google::protobuf::uint32 losses_;
  ::google::protobuf::uint32 xp_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 initial_skill_;
  ::google::protobuf::uint32 leaver_count_;
  ::google::protobuf::uint32 secondary_leaver_count_;
  ::google::protobuf::uint32 low_priority_until_date_;
  ::google::protobuf::uint32 prevent_text_chat_until_date_;
  ::google::protobuf::uint32 prevent_voice_until_date_;
  ::google::protobuf::uint32 prevent_public_text_chat_until_date_;
  ::google::protobuf::uint32 last_abandoned_game_date_;
  ::google::protobuf::uint32 last_secondary_abandoned_game_date_;
  ::google::protobuf::uint32 leaver_penalty_count_;
  ::google::protobuf::uint32 completed_game_streak_;
  ::google::protobuf::uint32 teaching_;
  ::google::protobuf::uint32 leadership_;
  ::google::protobuf::uint32 friendly_;
  ::google::protobuf::uint32 forgiving_;
  ::google::protobuf::uint32 account_disabled_until_date_;
  ::google::protobuf::uint32 account_disabled_count_;
  ::google::protobuf::uint32 showcase_hero_id_;
  ::google::protobuf::uint32 match_disabled_until_date_;
  ::google::protobuf::uint32 match_disabled_count_;
  int partner_account_type_;
  ::google::protobuf::uint32 partner_account_state_;
  ::google::protobuf::uint32 shutdownlawterminatetimestamp_;
  ::google::protobuf::uint32 low_priority_games_remaining_;
  ::google::protobuf::uint32 competitive_rank_;
  ::google::protobuf::uint32 calibration_games_remaining_;
  ::google::protobuf::uint32 solo_competitive_rank_;
  ::google::protobuf::uint32 solo_calibration_games_remaining_;
  ::google::protobuf::uint32 general_seasonal_ranked_rank_;
  ::google::protobuf::uint32 general_seasonal_ranked_calibration_games_remaining_;
  ::google::protobuf::uint32 general_seasonal_ranked_games_played_;
  ::google::protobuf::uint32 general_seasonal_ranked_rank_peak_;
  ::google::protobuf::uint32 solo_seasonal_ranked_rank_;
  ::google::protobuf::uint32 solo_seasonal_ranked_calibration_games_remaining_;
  ::google::protobuf::uint32 solo_seasonal_ranked_games_played_;
  ::google::protobuf::uint32 solo_seasonal_ranked_rank_peak_;
  bool general_seasonal_rank_transferred_;
  bool solo_seasonal_rank_transferred_;
  bool has_new_notifications_;
  bool is_league_admin_;
  ::google::protobuf::uint32 recruitment_level_;
  ::google::protobuf::uint32 casual_games_played_;
  ::google::protobuf::uint32 solo_competitive_games_played_;
  ::google::protobuf::uint32 party_competitive_games_played_;
  ::google::protobuf::uint32 casual_1v1_games_played_;
  ::google::protobuf::uint32 competitive_team_games_played_;
  ::google::protobuf::uint32 curr_all_hero_challenge_id_;
  ::google::protobuf::uint32 play_time_points_;
  ::google::protobuf::uint32 account_flags_;
  ::google::protobuf::uint32 play_time_level_;
  ::google::protobuf::uint32 player_behavior_seq_num_last_report_;
  ::google::protobuf::uint32 player_behavior_score_last_report_;
  bool player_behavior_report_old_data_;
  ::google::protobuf::uint32 tourney_skill_level_;
  ::google::protobuf::uint32 tourney_recent_participation_date_;
  ::google::protobuf::uint32 favorite_team_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CSODOTAGameAccountClient* default_instance_;
};
// -------------------------------------------------------------------

class CMsgLobbyEventPoints_AccountPoints : public ::google::protobuf::Message {
 public:
  CMsgLobbyEventPoints_AccountPoints();
  virtual ~CMsgLobbyEventPoints_AccountPoints();

  CMsgLobbyEventPoints_AccountPoints(const CMsgLobbyEventPoints_AccountPoints& from);

  inline CMsgLobbyEventPoints_AccountPoints& operator=(const CMsgLobbyEventPoints_AccountPoints& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgLobbyEventPoints_AccountPoints& default_instance();

  void Swap(CMsgLobbyEventPoints_AccountPoints* other);

  // implements Message ----------------------------------------------

  CMsgLobbyEventPoints_AccountPoints* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgLobbyEventPoints_AccountPoints& from);
  void MergeFrom(const CMsgLobbyEventPoints_AccountPoints& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 normal_points = 2;
  inline bool has_normal_points() const;
  inline void clear_normal_points();
  static const int kNormalPointsFieldNumber = 2;
  inline ::google::protobuf::uint32 normal_points() const;
  inline void set_normal_points(::google::protobuf::uint32 value);

  // optional uint32 premium_points = 3;
  inline bool has_premium_points() const;
  inline void clear_premium_points();
  static const int kPremiumPointsFieldNumber = 3;
  inline ::google::protobuf::uint32 premium_points() const;
  inline void set_premium_points(::google::protobuf::uint32 value);

  // optional bool owned = 4;
  inline bool has_owned() const;
  inline void clear_owned();
  static const int kOwnedFieldNumber = 4;
  inline bool owned() const;
  inline void set_owned(bool value);

  // optional uint32 favorite_team = 5;
  inline bool has_favorite_team() const;
  inline void clear_favorite_team();
  static const int kFavoriteTeamFieldNumber = 5;
  inline ::google::protobuf::uint32 favorite_team() const;
  inline void set_favorite_team(::google::protobuf::uint32 value);

  // optional uint32 favorite_team_level = 6;
  inline bool has_favorite_team_level() const;
  inline void clear_favorite_team_level();
  static const int kFavoriteTeamLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 favorite_team_level() const;
  inline void set_favorite_team_level(::google::protobuf::uint32 value);

  // optional uint32 points_held = 7;
  inline bool has_points_held() const;
  inline void clear_points_held();
  static const int kPointsHeldFieldNumber = 7;
  inline ::google::protobuf::uint32 points_held() const;
  inline void set_points_held(::google::protobuf::uint32 value);

  // optional uint32 premium_points_held = 8;
  inline bool has_premium_points_held() const;
  inline void clear_premium_points_held();
  static const int kPremiumPointsHeldFieldNumber = 8;
  inline ::google::protobuf::uint32 premium_points_held() const;
  inline void set_premium_points_held(::google::protobuf::uint32 value);

  // optional uint32 favorite_team_foil_level = 9;
  inline bool has_favorite_team_foil_level() const;
  inline void clear_favorite_team_foil_level();
  static const int kFavoriteTeamFoilLevelFieldNumber = 9;
  inline ::google::protobuf::uint32 favorite_team_foil_level() const;
  inline void set_favorite_team_foil_level(::google::protobuf::uint32 value);

  // optional uint32 wager_tokens_remaining = 10;
  inline bool has_wager_tokens_remaining() const;
  inline void clear_wager_tokens_remaining();
  static const int kWagerTokensRemainingFieldNumber = 10;
  inline ::google::protobuf::uint32 wager_tokens_remaining() const;
  inline void set_wager_tokens_remaining(::google::protobuf::uint32 value);

  // optional uint32 wager_tokens_max = 11;
  inline bool has_wager_tokens_max() const;
  inline void clear_wager_tokens_max();
  static const int kWagerTokensMaxFieldNumber = 11;
  inline ::google::protobuf::uint32 wager_tokens_max() const;
  inline void set_wager_tokens_max(::google::protobuf::uint32 value);

  // optional uint64 active_effects_mask = 12;
  inline bool has_active_effects_mask() const;
  inline void clear_active_effects_mask();
  static const int kActiveEffectsMaskFieldNumber = 12;
  inline ::google::protobuf::uint64 active_effects_mask() const;
  inline void set_active_effects_mask(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgLobbyEventPoints.AccountPoints)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_normal_points();
  inline void clear_has_normal_points();
  inline void set_has_premium_points();
  inline void clear_has_premium_points();
  inline void set_has_owned();
  inline void clear_has_owned();
  inline void set_has_favorite_team();
  inline void clear_has_favorite_team();
  inline void set_has_favorite_team_level();
  inline void clear_has_favorite_team_level();
  inline void set_has_points_held();
  inline void clear_has_points_held();
  inline void set_has_premium_points_held();
  inline void clear_has_premium_points_held();
  inline void set_has_favorite_team_foil_level();
  inline void clear_has_favorite_team_foil_level();
  inline void set_has_wager_tokens_remaining();
  inline void clear_has_wager_tokens_remaining();
  inline void set_has_wager_tokens_max();
  inline void clear_has_wager_tokens_max();
  inline void set_has_active_effects_mask();
  inline void clear_has_active_effects_mask();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 normal_points_;
  ::google::protobuf::uint32 premium_points_;
  bool owned_;
  ::google::protobuf::uint32 favorite_team_;
  ::google::protobuf::uint32 favorite_team_level_;
  ::google::protobuf::uint32 points_held_;
  ::google::protobuf::uint32 premium_points_held_;
  ::google::protobuf::uint32 favorite_team_foil_level_;
  ::google::protobuf::uint32 wager_tokens_remaining_;
  ::google::protobuf::uint64 active_effects_mask_;
  ::google::protobuf::uint32 wager_tokens_max_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgLobbyEventPoints_AccountPoints* default_instance_;
};
// -------------------------------------------------------------------

class CMsgLobbyEventPoints : public ::google::protobuf::Message {
 public:
  CMsgLobbyEventPoints();
  virtual ~CMsgLobbyEventPoints();

  CMsgLobbyEventPoints(const CMsgLobbyEventPoints& from);

  inline CMsgLobbyEventPoints& operator=(const CMsgLobbyEventPoints& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgLobbyEventPoints& default_instance();

  void Swap(CMsgLobbyEventPoints* other);

  // implements Message ----------------------------------------------

  CMsgLobbyEventPoints* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgLobbyEventPoints& from);
  void MergeFrom(const CMsgLobbyEventPoints& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgLobbyEventPoints_AccountPoints AccountPoints;

  // accessors -------------------------------------------------------

  // optional uint32 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint32 event_id() const;
  inline void set_event_id(::google::protobuf::uint32 value);

  // repeated .CMsgLobbyEventPoints.AccountPoints account_points = 2;
  inline int account_points_size() const;
  inline void clear_account_points();
  static const int kAccountPointsFieldNumber = 2;
  inline const ::CMsgLobbyEventPoints_AccountPoints& account_points(int index) const;
  inline ::CMsgLobbyEventPoints_AccountPoints* mutable_account_points(int index);
  inline ::CMsgLobbyEventPoints_AccountPoints* add_account_points();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgLobbyEventPoints_AccountPoints >&
      account_points() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgLobbyEventPoints_AccountPoints >*
      mutable_account_points();

  // @@protoc_insertion_point(class_scope:CMsgLobbyEventPoints)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgLobbyEventPoints_AccountPoints > account_points_;
  ::google::protobuf::uint32 event_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgLobbyEventPoints* default_instance_;
};
// -------------------------------------------------------------------

class CMsgBattleCupVictory : public ::google::protobuf::Message {
 public:
  CMsgBattleCupVictory();
  virtual ~CMsgBattleCupVictory();

  CMsgBattleCupVictory(const CMsgBattleCupVictory& from);

  inline CMsgBattleCupVictory& operator=(const CMsgBattleCupVictory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBattleCupVictory& default_instance();

  void Swap(CMsgBattleCupVictory* other);

  // implements Message ----------------------------------------------

  CMsgBattleCupVictory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgBattleCupVictory& from);
  void MergeFrom(const CMsgBattleCupVictory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 win_date = 2;
  inline bool has_win_date() const;
  inline void clear_win_date();
  static const int kWinDateFieldNumber = 2;
  inline ::google::protobuf::uint32 win_date() const;
  inline void set_win_date(::google::protobuf::uint32 value);

  // optional uint32 valid_until = 3;
  inline bool has_valid_until() const;
  inline void clear_valid_until();
  static const int kValidUntilFieldNumber = 3;
  inline ::google::protobuf::uint32 valid_until() const;
  inline void set_valid_until(::google::protobuf::uint32 value);

  // optional uint32 skill_level = 4;
  inline bool has_skill_level() const;
  inline void clear_skill_level();
  static const int kSkillLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 skill_level() const;
  inline void set_skill_level(::google::protobuf::uint32 value);

  // optional uint32 tournament_id = 5;
  inline bool has_tournament_id() const;
  inline void clear_tournament_id();
  static const int kTournamentIdFieldNumber = 5;
  inline ::google::protobuf::uint32 tournament_id() const;
  inline void set_tournament_id(::google::protobuf::uint32 value);

  // optional uint32 division_id = 6;
  inline bool has_division_id() const;
  inline void clear_division_id();
  static const int kDivisionIdFieldNumber = 6;
  inline ::google::protobuf::uint32 division_id() const;
  inline void set_division_id(::google::protobuf::uint32 value);

  // optional uint32 team_id = 7;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 7;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // optional uint32 streak = 8;
  inline bool has_streak() const;
  inline void clear_streak();
  static const int kStreakFieldNumber = 8;
  inline ::google::protobuf::uint32 streak() const;
  inline void set_streak(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgBattleCupVictory)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_win_date();
  inline void clear_has_win_date();
  inline void set_has_valid_until();
  inline void clear_has_valid_until();
  inline void set_has_skill_level();
  inline void clear_has_skill_level();
  inline void set_has_tournament_id();
  inline void clear_has_tournament_id();
  inline void set_has_division_id();
  inline void clear_has_division_id();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_streak();
  inline void clear_has_streak();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 win_date_;
  ::google::protobuf::uint32 valid_until_;
  ::google::protobuf::uint32 skill_level_;
  ::google::protobuf::uint32 tournament_id_;
  ::google::protobuf::uint32 division_id_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 streak_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgBattleCupVictory* default_instance_;
};
// -------------------------------------------------------------------

class CMsgLobbyBattleCupVictoryList : public ::google::protobuf::Message {
 public:
  CMsgLobbyBattleCupVictoryList();
  virtual ~CMsgLobbyBattleCupVictoryList();

  CMsgLobbyBattleCupVictoryList(const CMsgLobbyBattleCupVictoryList& from);

  inline CMsgLobbyBattleCupVictoryList& operator=(const CMsgLobbyBattleCupVictoryList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgLobbyBattleCupVictoryList& default_instance();

  void Swap(CMsgLobbyBattleCupVictoryList* other);

  // implements Message ----------------------------------------------

  CMsgLobbyBattleCupVictoryList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgLobbyBattleCupVictoryList& from);
  void MergeFrom(const CMsgLobbyBattleCupVictoryList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMsgBattleCupVictory winners = 1;
  inline int winners_size() const;
  inline void clear_winners();
  static const int kWinnersFieldNumber = 1;
  inline const ::CMsgBattleCupVictory& winners(int index) const;
  inline ::CMsgBattleCupVictory* mutable_winners(int index);
  inline ::CMsgBattleCupVictory* add_winners();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgBattleCupVictory >&
      winners() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgBattleCupVictory >*
      mutable_winners();

  // @@protoc_insertion_point(class_scope:CMsgLobbyBattleCupVictoryList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgBattleCupVictory > winners_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgLobbyBattleCupVictoryList* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTABroadcastNotification : public ::google::protobuf::Message {
 public:
  CMsgDOTABroadcastNotification();
  virtual ~CMsgDOTABroadcastNotification();

  CMsgDOTABroadcastNotification(const CMsgDOTABroadcastNotification& from);

  inline CMsgDOTABroadcastNotification& operator=(const CMsgDOTABroadcastNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTABroadcastNotification& default_instance();

  void Swap(CMsgDOTABroadcastNotification* other);

  // implements Message ----------------------------------------------

  CMsgDOTABroadcastNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTABroadcastNotification& from);
  void MergeFrom(const CMsgDOTABroadcastNotification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:CMsgDOTABroadcastNotification)
 private:
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* message_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTABroadcastNotification* default_instance_;
};
// -------------------------------------------------------------------

class CProtoItemHeroStatue : public ::google::protobuf::Message {
 public:
  CProtoItemHeroStatue();
  virtual ~CProtoItemHeroStatue();

  CProtoItemHeroStatue(const CProtoItemHeroStatue& from);

  inline CProtoItemHeroStatue& operator=(const CProtoItemHeroStatue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProtoItemHeroStatue& default_instance();

  void Swap(CProtoItemHeroStatue* other);

  // implements Message ----------------------------------------------

  CProtoItemHeroStatue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProtoItemHeroStatue& from);
  void MergeFrom(const CProtoItemHeroStatue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hero_id = 1;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 status_effect_index = 2;
  inline bool has_status_effect_index() const;
  inline void clear_status_effect_index();
  static const int kStatusEffectIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 status_effect_index() const;
  inline void set_status_effect_index(::google::protobuf::uint32 value);

  // optional string sequence_name = 3;
  inline bool has_sequence_name() const;
  inline void clear_sequence_name();
  static const int kSequenceNameFieldNumber = 3;
  inline const ::std::string& sequence_name() const;
  inline void set_sequence_name(const ::std::string& value);
  inline void set_sequence_name(const char* value);
  inline void set_sequence_name(const char* value, size_t size);
  inline ::std::string* mutable_sequence_name();
  inline ::std::string* release_sequence_name();
  inline void set_allocated_sequence_name(::std::string* sequence_name);

  // optional float cycle = 4;
  inline bool has_cycle() const;
  inline void clear_cycle();
  static const int kCycleFieldNumber = 4;
  inline float cycle() const;
  inline void set_cycle(float value);

  // repeated uint32 wearable = 5;
  inline int wearable_size() const;
  inline void clear_wearable();
  static const int kWearableFieldNumber = 5;
  inline ::google::protobuf::uint32 wearable(int index) const;
  inline void set_wearable(int index, ::google::protobuf::uint32 value);
  inline void add_wearable(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      wearable() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_wearable();

  // optional string inscription = 6;
  inline bool has_inscription() const;
  inline void clear_inscription();
  static const int kInscriptionFieldNumber = 6;
  inline const ::std::string& inscription() const;
  inline void set_inscription(const ::std::string& value);
  inline void set_inscription(const char* value);
  inline void set_inscription(const char* value, size_t size);
  inline ::std::string* mutable_inscription();
  inline ::std::string* release_inscription();
  inline void set_allocated_inscription(::std::string* inscription);

  // repeated uint32 style = 7;
  inline int style_size() const;
  inline void clear_style();
  static const int kStyleFieldNumber = 7;
  inline ::google::protobuf::uint32 style(int index) const;
  inline void set_style(int index, ::google::protobuf::uint32 value);
  inline void add_style(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      style() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_style();

  // optional bool tournament_drop = 8;
  inline bool has_tournament_drop() const;
  inline void clear_tournament_drop();
  static const int kTournamentDropFieldNumber = 8;
  inline bool tournament_drop() const;
  inline void set_tournament_drop(bool value);

  // @@protoc_insertion_point(class_scope:CProtoItemHeroStatue)
 private:
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_status_effect_index();
  inline void clear_has_status_effect_index();
  inline void set_has_sequence_name();
  inline void clear_has_sequence_name();
  inline void set_has_cycle();
  inline void clear_has_cycle();
  inline void set_has_inscription();
  inline void clear_has_inscription();
  inline void set_has_tournament_drop();
  inline void clear_has_tournament_drop();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 status_effect_index_;
  ::std::string* sequence_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > wearable_;
  ::std::string* inscription_;
  float cycle_;
  bool tournament_drop_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > style_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CProtoItemHeroStatue* default_instance_;
};
// -------------------------------------------------------------------

class CProtoItemTeamShowcase : public ::google::protobuf::Message {
 public:
  CProtoItemTeamShowcase();
  virtual ~CProtoItemTeamShowcase();

  CProtoItemTeamShowcase(const CProtoItemTeamShowcase& from);

  inline CProtoItemTeamShowcase& operator=(const CProtoItemTeamShowcase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProtoItemTeamShowcase& default_instance();

  void Swap(CProtoItemTeamShowcase* other);

  // implements Message ----------------------------------------------

  CProtoItemTeamShowcase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProtoItemTeamShowcase& from);
  void MergeFrom(const CProtoItemTeamShowcase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hero_id = 1;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 status_effect_index = 2;
  inline bool has_status_effect_index() const;
  inline void clear_status_effect_index();
  static const int kStatusEffectIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 status_effect_index() const;
  inline void set_status_effect_index(::google::protobuf::uint32 value);

  // optional string sequence_name = 3;
  inline bool has_sequence_name() const;
  inline void clear_sequence_name();
  static const int kSequenceNameFieldNumber = 3;
  inline const ::std::string& sequence_name() const;
  inline void set_sequence_name(const ::std::string& value);
  inline void set_sequence_name(const char* value);
  inline void set_sequence_name(const char* value, size_t size);
  inline ::std::string* mutable_sequence_name();
  inline ::std::string* release_sequence_name();
  inline void set_allocated_sequence_name(::std::string* sequence_name);

  // optional float cycle = 4;
  inline bool has_cycle() const;
  inline void clear_cycle();
  static const int kCycleFieldNumber = 4;
  inline float cycle() const;
  inline void set_cycle(float value);

  // repeated uint32 wearable = 5;
  inline int wearable_size() const;
  inline void clear_wearable();
  static const int kWearableFieldNumber = 5;
  inline ::google::protobuf::uint32 wearable(int index) const;
  inline void set_wearable(int index, ::google::protobuf::uint32 value);
  inline void add_wearable(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      wearable() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_wearable();

  // optional string inscription = 6;
  inline bool has_inscription() const;
  inline void clear_inscription();
  static const int kInscriptionFieldNumber = 6;
  inline const ::std::string& inscription() const;
  inline void set_inscription(const ::std::string& value);
  inline void set_inscription(const char* value);
  inline void set_inscription(const char* value, size_t size);
  inline ::std::string* mutable_inscription();
  inline ::std::string* release_inscription();
  inline void set_allocated_inscription(::std::string* inscription);

  // repeated uint32 style = 7;
  inline int style_size() const;
  inline void clear_style();
  static const int kStyleFieldNumber = 7;
  inline ::google::protobuf::uint32 style(int index) const;
  inline void set_style(int index, ::google::protobuf::uint32 value);
  inline void add_style(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      style() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_style();

  // @@protoc_insertion_point(class_scope:CProtoItemTeamShowcase)
 private:
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_status_effect_index();
  inline void clear_has_status_effect_index();
  inline void set_has_sequence_name();
  inline void clear_has_sequence_name();
  inline void set_has_cycle();
  inline void clear_has_cycle();
  inline void set_has_inscription();
  inline void clear_has_inscription();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 status_effect_index_;
  ::std::string* sequence_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > wearable_;
  ::std::string* inscription_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > style_;
  float cycle_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CProtoItemTeamShowcase* default_instance_;
};
// -------------------------------------------------------------------

class CMatchPlayerAbilityUpgrade : public ::google::protobuf::Message {
 public:
  CMatchPlayerAbilityUpgrade();
  virtual ~CMatchPlayerAbilityUpgrade();

  CMatchPlayerAbilityUpgrade(const CMatchPlayerAbilityUpgrade& from);

  inline CMatchPlayerAbilityUpgrade& operator=(const CMatchPlayerAbilityUpgrade& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMatchPlayerAbilityUpgrade& default_instance();

  void Swap(CMatchPlayerAbilityUpgrade* other);

  // implements Message ----------------------------------------------

  CMatchPlayerAbilityUpgrade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMatchPlayerAbilityUpgrade& from);
  void MergeFrom(const CMatchPlayerAbilityUpgrade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ability = 1;
  inline bool has_ability() const;
  inline void clear_ability();
  static const int kAbilityFieldNumber = 1;
  inline ::google::protobuf::uint32 ability() const;
  inline void set_ability(::google::protobuf::uint32 value);

  // optional uint32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMatchPlayerAbilityUpgrade)
 private:
  inline void set_has_ability();
  inline void clear_has_ability();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 ability_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMatchPlayerAbilityUpgrade* default_instance_;
};
// -------------------------------------------------------------------

class CMatchAdditionalUnitInventory : public ::google::protobuf::Message {
 public:
  CMatchAdditionalUnitInventory();
  virtual ~CMatchAdditionalUnitInventory();

  CMatchAdditionalUnitInventory(const CMatchAdditionalUnitInventory& from);

  inline CMatchAdditionalUnitInventory& operator=(const CMatchAdditionalUnitInventory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMatchAdditionalUnitInventory& default_instance();

  void Swap(CMatchAdditionalUnitInventory* other);

  // implements Message ----------------------------------------------

  CMatchAdditionalUnitInventory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMatchAdditionalUnitInventory& from);
  void MergeFrom(const CMatchAdditionalUnitInventory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string unit_name = 1;
  inline bool has_unit_name() const;
  inline void clear_unit_name();
  static const int kUnitNameFieldNumber = 1;
  inline const ::std::string& unit_name() const;
  inline void set_unit_name(const ::std::string& value);
  inline void set_unit_name(const char* value);
  inline void set_unit_name(const char* value, size_t size);
  inline ::std::string* mutable_unit_name();
  inline ::std::string* release_unit_name();
  inline void set_allocated_unit_name(::std::string* unit_name);

  // repeated uint32 items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline ::google::protobuf::uint32 items(int index) const;
  inline void set_items(int index, ::google::protobuf::uint32 value);
  inline void add_items(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      items() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:CMatchAdditionalUnitInventory)
 private:
  inline void set_has_unit_name();
  inline void clear_has_unit_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* unit_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > items_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMatchAdditionalUnitInventory* default_instance_;
};
// -------------------------------------------------------------------

class CMatchPlayerPermanentBuff : public ::google::protobuf::Message {
 public:
  CMatchPlayerPermanentBuff();
  virtual ~CMatchPlayerPermanentBuff();

  CMatchPlayerPermanentBuff(const CMatchPlayerPermanentBuff& from);

  inline CMatchPlayerPermanentBuff& operator=(const CMatchPlayerPermanentBuff& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMatchPlayerPermanentBuff& default_instance();

  void Swap(CMatchPlayerPermanentBuff* other);

  // implements Message ----------------------------------------------

  CMatchPlayerPermanentBuff* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMatchPlayerPermanentBuff& from);
  void MergeFrom(const CMatchPlayerPermanentBuff& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 permanent_buff = 1;
  inline bool has_permanent_buff() const;
  inline void clear_permanent_buff();
  static const int kPermanentBuffFieldNumber = 1;
  inline ::google::protobuf::uint32 permanent_buff() const;
  inline void set_permanent_buff(::google::protobuf::uint32 value);

  // optional uint32 stack_count = 2;
  inline bool has_stack_count() const;
  inline void clear_stack_count();
  static const int kStackCountFieldNumber = 2;
  inline ::google::protobuf::uint32 stack_count() const;
  inline void set_stack_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMatchPlayerPermanentBuff)
 private:
  inline void set_has_permanent_buff();
  inline void clear_has_permanent_buff();
  inline void set_has_stack_count();
  inline void clear_has_stack_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 permanent_buff_;
  ::google::protobuf::uint32 stack_count_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMatchPlayerPermanentBuff* default_instance_;
};
// -------------------------------------------------------------------

class CMatchHeroSelectEvent : public ::google::protobuf::Message {
 public:
  CMatchHeroSelectEvent();
  virtual ~CMatchHeroSelectEvent();

  CMatchHeroSelectEvent(const CMatchHeroSelectEvent& from);

  inline CMatchHeroSelectEvent& operator=(const CMatchHeroSelectEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMatchHeroSelectEvent& default_instance();

  void Swap(CMatchHeroSelectEvent* other);

  // implements Message ----------------------------------------------

  CMatchHeroSelectEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMatchHeroSelectEvent& from);
  void MergeFrom(const CMatchHeroSelectEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_pick = 1;
  inline bool has_is_pick() const;
  inline void clear_is_pick();
  static const int kIsPickFieldNumber = 1;
  inline bool is_pick() const;
  inline void set_is_pick(bool value);

  // optional uint32 team = 2;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 2;
  inline ::google::protobuf::uint32 team() const;
  inline void set_team(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 3;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMatchHeroSelectEvent)
 private:
  inline void set_has_is_pick();
  inline void clear_has_is_pick();
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool is_pick_;
  ::google::protobuf::uint32 team_;
  ::google::protobuf::uint32 hero_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMatchHeroSelectEvent* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAProcessFantasyScheduledEvent : public ::google::protobuf::Message {
 public:
  CMsgDOTAProcessFantasyScheduledEvent();
  virtual ~CMsgDOTAProcessFantasyScheduledEvent();

  CMsgDOTAProcessFantasyScheduledEvent(const CMsgDOTAProcessFantasyScheduledEvent& from);

  inline CMsgDOTAProcessFantasyScheduledEvent& operator=(const CMsgDOTAProcessFantasyScheduledEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProcessFantasyScheduledEvent& default_instance();

  void Swap(CMsgDOTAProcessFantasyScheduledEvent* other);

  // implements Message ----------------------------------------------

  CMsgDOTAProcessFantasyScheduledEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAProcessFantasyScheduledEvent& from);
  void MergeFrom(const CMsgDOTAProcessFantasyScheduledEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 event = 1;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 1;
  inline ::google::protobuf::uint32 event() const;
  inline void set_event(::google::protobuf::uint32 value);

  // optional uint32 timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // optional uint32 fantasy_league_id = 3;
  inline bool has_fantasy_league_id() const;
  inline void clear_fantasy_league_id();
  static const int kFantasyLeagueIdFieldNumber = 3;
  inline ::google::protobuf::uint32 fantasy_league_id() const;
  inline void set_fantasy_league_id(::google::protobuf::uint32 value);

  // optional uint32 season = 4;
  inline bool has_season() const;
  inline void clear_season();
  static const int kSeasonFieldNumber = 4;
  inline ::google::protobuf::uint32 season() const;
  inline void set_season(::google::protobuf::uint32 value);

  // optional uint32 reference_data = 5;
  inline bool has_reference_data() const;
  inline void clear_reference_data();
  static const int kReferenceDataFieldNumber = 5;
  inline ::google::protobuf::uint32 reference_data() const;
  inline void set_reference_data(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAProcessFantasyScheduledEvent)
 private:
  inline void set_has_event();
  inline void clear_has_event();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_fantasy_league_id();
  inline void clear_has_fantasy_league_id();
  inline void set_has_season();
  inline void clear_has_season();
  inline void set_has_reference_data();
  inline void clear_has_reference_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 event_;
  ::google::protobuf::uint32 timestamp_;
  ::google::protobuf::uint32 fantasy_league_id_;
  ::google::protobuf::uint32 season_;
  ::google::protobuf::uint32 reference_data_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAProcessFantasyScheduledEvent* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAHasItemQuery : public ::google::protobuf::Message {
 public:
  CMsgDOTAHasItemQuery();
  virtual ~CMsgDOTAHasItemQuery();

  CMsgDOTAHasItemQuery(const CMsgDOTAHasItemQuery& from);

  inline CMsgDOTAHasItemQuery& operator=(const CMsgDOTAHasItemQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAHasItemQuery& default_instance();

  void Swap(CMsgDOTAHasItemQuery* other);

  // implements Message ----------------------------------------------

  CMsgDOTAHasItemQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAHasItemQuery& from);
  void MergeFrom(const CMsgDOTAHasItemQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint64 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint64 item_id() const;
  inline void set_item_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAHasItemQuery)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_item_id();
  inline void clear_has_item_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 item_id_;
  ::google::protobuf::uint32 account_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAHasItemQuery* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAHasItemResponse : public ::google::protobuf::Message {
 public:
  CMsgDOTAHasItemResponse();
  virtual ~CMsgDOTAHasItemResponse();

  CMsgDOTAHasItemResponse(const CMsgDOTAHasItemResponse& from);

  inline CMsgDOTAHasItemResponse& operator=(const CMsgDOTAHasItemResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAHasItemResponse& default_instance();

  void Swap(CMsgDOTAHasItemResponse* other);

  // implements Message ----------------------------------------------

  CMsgDOTAHasItemResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAHasItemResponse& from);
  void MergeFrom(const CMsgDOTAHasItemResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool has_item = 1;
  inline bool has_has_item() const;
  inline void clear_has_item();
  static const int kHasItemFieldNumber = 1;
  inline bool has_item() const;
  inline void set_has_item(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAHasItemResponse)
 private:
  inline void set_has_has_item();
  inline void clear_has_has_item();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool has_item_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAHasItemResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAHasItemDefsQuery : public ::google::protobuf::Message {
 public:
  CMsgDOTAHasItemDefsQuery();
  virtual ~CMsgDOTAHasItemDefsQuery();

  CMsgDOTAHasItemDefsQuery(const CMsgDOTAHasItemDefsQuery& from);

  inline CMsgDOTAHasItemDefsQuery& operator=(const CMsgDOTAHasItemDefsQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAHasItemDefsQuery& default_instance();

  void Swap(CMsgDOTAHasItemDefsQuery* other);

  // implements Message ----------------------------------------------

  CMsgDOTAHasItemDefsQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAHasItemDefsQuery& from);
  void MergeFrom(const CMsgDOTAHasItemDefsQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // repeated uint32 itemdef_ids = 2;
  inline int itemdef_ids_size() const;
  inline void clear_itemdef_ids();
  static const int kItemdefIdsFieldNumber = 2;
  inline ::google::protobuf::uint32 itemdef_ids(int index) const;
  inline void set_itemdef_ids(int index, ::google::protobuf::uint32 value);
  inline void add_itemdef_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      itemdef_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_itemdef_ids();

  // @@protoc_insertion_point(class_scope:CMsgDOTAHasItemDefsQuery)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > itemdef_ids_;
  ::google::protobuf::uint32 account_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAHasItemDefsQuery* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAHasItemDefsResponse : public ::google::protobuf::Message {
 public:
  CMsgDOTAHasItemDefsResponse();
  virtual ~CMsgDOTAHasItemDefsResponse();

  CMsgDOTAHasItemDefsResponse(const CMsgDOTAHasItemDefsResponse& from);

  inline CMsgDOTAHasItemDefsResponse& operator=(const CMsgDOTAHasItemDefsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAHasItemDefsResponse& default_instance();

  void Swap(CMsgDOTAHasItemDefsResponse* other);

  // implements Message ----------------------------------------------

  CMsgDOTAHasItemDefsResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAHasItemDefsResponse& from);
  void MergeFrom(const CMsgDOTAHasItemDefsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool has_items = 1;
  inline bool has_has_items() const;
  inline void clear_has_items();
  static const int kHasItemsFieldNumber = 1;
  inline bool has_items() const;
  inline void set_has_items(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAHasItemDefsResponse)
 private:
  inline void set_has_has_items();
  inline void clear_has_has_items();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool has_items_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAHasItemDefsResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCGetPlayerCardItemInfo : public ::google::protobuf::Message {
 public:
  CMsgGCGetPlayerCardItemInfo();
  virtual ~CMsgGCGetPlayerCardItemInfo();

  CMsgGCGetPlayerCardItemInfo(const CMsgGCGetPlayerCardItemInfo& from);

  inline CMsgGCGetPlayerCardItemInfo& operator=(const CMsgGCGetPlayerCardItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCGetPlayerCardItemInfo& default_instance();

  void Swap(CMsgGCGetPlayerCardItemInfo* other);

  // implements Message ----------------------------------------------

  CMsgGCGetPlayerCardItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCGetPlayerCardItemInfo& from);
  void MergeFrom(const CMsgGCGetPlayerCardItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // repeated uint64 player_card_item_ids = 2;
  inline int player_card_item_ids_size() const;
  inline void clear_player_card_item_ids();
  static const int kPlayerCardItemIdsFieldNumber = 2;
  inline ::google::protobuf::uint64 player_card_item_ids(int index) const;
  inline void set_player_card_item_ids(int index, ::google::protobuf::uint64 value);
  inline void add_player_card_item_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      player_card_item_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_player_card_item_ids();

  // @@protoc_insertion_point(class_scope:CMsgGCGetPlayerCardItemInfo)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > player_card_item_ids_;
  ::google::protobuf::uint32 account_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCGetPlayerCardItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo : public ::google::protobuf::Message {
 public:
  CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo();
  virtual ~CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo();

  CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo(const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& from);

  inline CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& operator=(const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& default_instance();

  void Swap(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* other);

  // implements Message ----------------------------------------------

  CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& from);
  void MergeFrom(const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 player_card_item_id = 1;
  inline bool has_player_card_item_id() const;
  inline void clear_player_card_item_id();
  static const int kPlayerCardItemIdFieldNumber = 1;
  inline ::google::protobuf::uint64 player_card_item_id() const;
  inline void set_player_card_item_id(::google::protobuf::uint64 value);

  // optional uint32 account_id = 2;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 2;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint64 packed_bonuses = 3;
  inline bool has_packed_bonuses() const;
  inline void clear_packed_bonuses();
  static const int kPackedBonusesFieldNumber = 3;
  inline ::google::protobuf::uint64 packed_bonuses() const;
  inline void set_packed_bonuses(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
 private:
  inline void set_has_player_card_item_id();
  inline void clear_has_player_card_item_id();
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_packed_bonuses();
  inline void clear_has_packed_bonuses();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 player_card_item_id_;
  ::google::protobuf::uint64 packed_bonuses_;
  ::google::protobuf::uint32 account_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCGetPlayerCardItemInfoResponse : public ::google::protobuf::Message {
 public:
  CMsgGCGetPlayerCardItemInfoResponse();
  virtual ~CMsgGCGetPlayerCardItemInfoResponse();

  CMsgGCGetPlayerCardItemInfoResponse(const CMsgGCGetPlayerCardItemInfoResponse& from);

  inline CMsgGCGetPlayerCardItemInfoResponse& operator=(const CMsgGCGetPlayerCardItemInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCGetPlayerCardItemInfoResponse& default_instance();

  void Swap(CMsgGCGetPlayerCardItemInfoResponse* other);

  // implements Message ----------------------------------------------

  CMsgGCGetPlayerCardItemInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCGetPlayerCardItemInfoResponse& from);
  void MergeFrom(const CMsgGCGetPlayerCardItemInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo PlayerCardInfo;

  // accessors -------------------------------------------------------

  // repeated .CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo player_card_infos = 1;
  inline int player_card_infos_size() const;
  inline void clear_player_card_infos();
  static const int kPlayerCardInfosFieldNumber = 1;
  inline const ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& player_card_infos(int index) const;
  inline ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* mutable_player_card_infos(int index);
  inline ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* add_player_card_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo >&
      player_card_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo >*
      mutable_player_card_infos();

  // @@protoc_insertion_point(class_scope:CMsgGCGetPlayerCardItemInfoResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo > player_card_infos_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCGetPlayerCardItemInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCToGCFantasySetMatchLeague : public ::google::protobuf::Message {
 public:
  CMsgGCToGCFantasySetMatchLeague();
  virtual ~CMsgGCToGCFantasySetMatchLeague();

  CMsgGCToGCFantasySetMatchLeague(const CMsgGCToGCFantasySetMatchLeague& from);

  inline CMsgGCToGCFantasySetMatchLeague& operator=(const CMsgGCToGCFantasySetMatchLeague& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToGCFantasySetMatchLeague& default_instance();

  void Swap(CMsgGCToGCFantasySetMatchLeague* other);

  // implements Message ----------------------------------------------

  CMsgGCToGCFantasySetMatchLeague* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCToGCFantasySetMatchLeague& from);
  void MergeFrom(const CMsgGCToGCFantasySetMatchLeague& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 match_id = 1;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  inline ::google::protobuf::uint64 match_id() const;
  inline void set_match_id(::google::protobuf::uint64 value);

  // optional uint32 league_id = 2;
  inline bool has_league_id() const;
  inline void clear_league_id();
  static const int kLeagueIdFieldNumber = 2;
  inline ::google::protobuf::uint32 league_id() const;
  inline void set_league_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCToGCFantasySetMatchLeague)
 private:
  inline void set_has_match_id();
  inline void clear_has_match_id();
  inline void set_has_league_id();
  inline void clear_has_league_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 match_id_;
  ::google::protobuf::uint32 league_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCToGCFantasySetMatchLeague* default_instance_;
};
// -------------------------------------------------------------------

class CSODOTAMapLocationState : public ::google::protobuf::Message {
 public:
  CSODOTAMapLocationState();
  virtual ~CSODOTAMapLocationState();

  CSODOTAMapLocationState(const CSODOTAMapLocationState& from);

  inline CSODOTAMapLocationState& operator=(const CSODOTAMapLocationState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAMapLocationState& default_instance();

  void Swap(CSODOTAMapLocationState* other);

  // implements Message ----------------------------------------------

  CSODOTAMapLocationState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTAMapLocationState& from);
  void MergeFrom(const CSODOTAMapLocationState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional int32 location_id = 2;
  inline bool has_location_id() const;
  inline void clear_location_id();
  static const int kLocationIdFieldNumber = 2;
  inline ::google::protobuf::int32 location_id() const;
  inline void set_location_id(::google::protobuf::int32 value);

  // optional bool completed = 3;
  inline bool has_completed() const;
  inline void clear_completed();
  static const int kCompletedFieldNumber = 3;
  inline bool completed() const;
  inline void set_completed(bool value);

  // @@protoc_insertion_point(class_scope:CSODOTAMapLocationState)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_location_id();
  inline void clear_has_location_id();
  inline void set_has_completed();
  inline void clear_has_completed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::int32 location_id_;
  bool completed_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CSODOTAMapLocationState* default_instance_;
};
// -------------------------------------------------------------------

class CMsgLeagueAdminList : public ::google::protobuf::Message {
 public:
  CMsgLeagueAdminList();
  virtual ~CMsgLeagueAdminList();

  CMsgLeagueAdminList(const CMsgLeagueAdminList& from);

  inline CMsgLeagueAdminList& operator=(const CMsgLeagueAdminList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgLeagueAdminList& default_instance();

  void Swap(CMsgLeagueAdminList* other);

  // implements Message ----------------------------------------------

  CMsgLeagueAdminList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgLeagueAdminList& from);
  void MergeFrom(const CMsgLeagueAdminList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 account_ids = 1;
  inline int account_ids_size() const;
  inline void clear_account_ids();
  static const int kAccountIdsFieldNumber = 1;
  inline ::google::protobuf::uint32 account_ids(int index) const;
  inline void set_account_ids(int index, ::google::protobuf::uint32 value);
  inline void add_account_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      account_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_account_ids();

  // @@protoc_insertion_point(class_scope:CMsgLeagueAdminList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > account_ids_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgLeagueAdminList* default_instance_;
};
// -------------------------------------------------------------------

class CCompendiumTimestampedData : public ::google::protobuf::Message {
 public:
  CCompendiumTimestampedData();
  virtual ~CCompendiumTimestampedData();

  CCompendiumTimestampedData(const CCompendiumTimestampedData& from);

  inline CCompendiumTimestampedData& operator=(const CCompendiumTimestampedData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CCompendiumTimestampedData& default_instance();

  void Swap(CCompendiumTimestampedData* other);

  // implements Message ----------------------------------------------

  CCompendiumTimestampedData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CCompendiumTimestampedData& from);
  void MergeFrom(const CCompendiumTimestampedData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 game_time = 1;
  inline bool has_game_time() const;
  inline void clear_game_time();
  static const int kGameTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 game_time() const;
  inline void set_game_time(::google::protobuf::uint32 value);

  // optional uint32 gpm = 2;
  inline bool has_gpm() const;
  inline void clear_gpm();
  static const int kGpmFieldNumber = 2;
  inline ::google::protobuf::uint32 gpm() const;
  inline void set_gpm(::google::protobuf::uint32 value);

  // optional uint32 xpm = 3;
  inline bool has_xpm() const;
  inline void clear_xpm();
  static const int kXpmFieldNumber = 3;
  inline ::google::protobuf::uint32 xpm() const;
  inline void set_xpm(::google::protobuf::uint32 value);

  // optional uint32 kills = 4;
  inline bool has_kills() const;
  inline void clear_kills();
  static const int kKillsFieldNumber = 4;
  inline ::google::protobuf::uint32 kills() const;
  inline void set_kills(::google::protobuf::uint32 value);

  // optional uint32 deaths = 5;
  inline bool has_deaths() const;
  inline void clear_deaths();
  static const int kDeathsFieldNumber = 5;
  inline ::google::protobuf::uint32 deaths() const;
  inline void set_deaths(::google::protobuf::uint32 value);

  // repeated uint32 item_purchases = 6;
  inline int item_purchases_size() const;
  inline void clear_item_purchases();
  static const int kItemPurchasesFieldNumber = 6;
  inline ::google::protobuf::uint32 item_purchases(int index) const;
  inline void set_item_purchases(int index, ::google::protobuf::uint32 value);
  inline void add_item_purchases(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      item_purchases() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_item_purchases();

  // @@protoc_insertion_point(class_scope:CCompendiumTimestampedData)
 private:
  inline void set_has_game_time();
  inline void clear_has_game_time();
  inline void set_has_gpm();
  inline void clear_has_gpm();
  inline void set_has_xpm();
  inline void clear_has_xpm();
  inline void set_has_kills();
  inline void clear_has_kills();
  inline void set_has_deaths();
  inline void clear_has_deaths();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 game_time_;
  ::google::protobuf::uint32 gpm_;
  ::google::protobuf::uint32 xpm_;
  ::google::protobuf::uint32 kills_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > item_purchases_;
  ::google::protobuf::uint32 deaths_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CCompendiumTimestampedData* default_instance_;
};
// -------------------------------------------------------------------

class CCompendiumGameTimeline : public ::google::protobuf::Message {
 public:
  CCompendiumGameTimeline();
  virtual ~CCompendiumGameTimeline();

  CCompendiumGameTimeline(const CCompendiumGameTimeline& from);

  inline CCompendiumGameTimeline& operator=(const CCompendiumGameTimeline& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CCompendiumGameTimeline& default_instance();

  void Swap(CCompendiumGameTimeline* other);

  // implements Message ----------------------------------------------

  CCompendiumGameTimeline* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CCompendiumGameTimeline& from);
  void MergeFrom(const CCompendiumGameTimeline& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CCompendiumTimestampedData data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::CCompendiumTimestampedData& data(int index) const;
  inline ::CCompendiumTimestampedData* mutable_data(int index);
  inline ::CCompendiumTimestampedData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::CCompendiumTimestampedData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::CCompendiumTimestampedData >*
      mutable_data();

  // repeated string tags = 2;
  inline int tags_size() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 2;
  inline const ::std::string& tags(int index) const;
  inline ::std::string* mutable_tags(int index);
  inline void set_tags(int index, const ::std::string& value);
  inline void set_tags(int index, const char* value);
  inline void set_tags(int index, const char* value, size_t size);
  inline ::std::string* add_tags();
  inline void add_tags(const ::std::string& value);
  inline void add_tags(const char* value);
  inline void add_tags(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // @@protoc_insertion_point(class_scope:CCompendiumGameTimeline)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CCompendiumTimestampedData > data_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CCompendiumGameTimeline* default_instance_;
};
// -------------------------------------------------------------------

class CCompendiumGameList : public ::google::protobuf::Message {
 public:
  CCompendiumGameList();
  virtual ~CCompendiumGameList();

  CCompendiumGameList(const CCompendiumGameList& from);

  inline CCompendiumGameList& operator=(const CCompendiumGameList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CCompendiumGameList& default_instance();

  void Swap(CCompendiumGameList* other);

  // implements Message ----------------------------------------------

  CCompendiumGameList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CCompendiumGameList& from);
  void MergeFrom(const CCompendiumGameList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CCompendiumGameTimeline games = 1;
  inline int games_size() const;
  inline void clear_games();
  static const int kGamesFieldNumber = 1;
  inline const ::CCompendiumGameTimeline& games(int index) const;
  inline ::CCompendiumGameTimeline* mutable_games(int index);
  inline ::CCompendiumGameTimeline* add_games();
  inline const ::google::protobuf::RepeatedPtrField< ::CCompendiumGameTimeline >&
      games() const;
  inline ::google::protobuf::RepeatedPtrField< ::CCompendiumGameTimeline >*
      mutable_games();

  // @@protoc_insertion_point(class_scope:CCompendiumGameList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CCompendiumGameTimeline > games_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CCompendiumGameList* default_instance_;
};
// -------------------------------------------------------------------

class CAdditionalEquipSlot : public ::google::protobuf::Message {
 public:
  CAdditionalEquipSlot();
  virtual ~CAdditionalEquipSlot();

  CAdditionalEquipSlot(const CAdditionalEquipSlot& from);

  inline CAdditionalEquipSlot& operator=(const CAdditionalEquipSlot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAdditionalEquipSlot& default_instance();

  void Swap(CAdditionalEquipSlot* other);

  // implements Message ----------------------------------------------

  CAdditionalEquipSlot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAdditionalEquipSlot& from);
  void MergeFrom(const CAdditionalEquipSlot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 class_id = 1;
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 1;
  inline ::google::protobuf::uint32 class_id() const;
  inline void set_class_id(::google::protobuf::uint32 value);

  // optional uint32 slot_id = 2;
  inline bool has_slot_id() const;
  inline void clear_slot_id();
  static const int kSlotIdFieldNumber = 2;
  inline ::google::protobuf::uint32 slot_id() const;
  inline void set_slot_id(::google::protobuf::uint32 value);

  // optional uint32 def_index = 3;
  inline bool has_def_index() const;
  inline void clear_def_index();
  static const int kDefIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 def_index() const;
  inline void set_def_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CAdditionalEquipSlot)
 private:
  inline void set_has_class_id();
  inline void clear_has_class_id();
  inline void set_has_slot_id();
  inline void clear_has_slot_id();
  inline void set_has_def_index();
  inline void clear_has_def_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 class_id_;
  ::google::protobuf::uint32 slot_id_;
  ::google::protobuf::uint32 def_index_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CAdditionalEquipSlot* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTACombatLogEntry : public ::google::protobuf::Message {
 public:
  CMsgDOTACombatLogEntry();
  virtual ~CMsgDOTACombatLogEntry();

  CMsgDOTACombatLogEntry(const CMsgDOTACombatLogEntry& from);

  inline CMsgDOTACombatLogEntry& operator=(const CMsgDOTACombatLogEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTACombatLogEntry& default_instance();

  void Swap(CMsgDOTACombatLogEntry* other);

  // implements Message ----------------------------------------------

  CMsgDOTACombatLogEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTACombatLogEntry& from);
  void MergeFrom(const CMsgDOTACombatLogEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_INVALID];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::DOTA_COMBATLOG_TYPES type() const;
  inline void set_type(::DOTA_COMBATLOG_TYPES value);

  // optional uint32 target_name = 2;
  inline bool has_target_name() const;
  inline void clear_target_name();
  static const int kTargetNameFieldNumber = 2;
  inline ::google::protobuf::uint32 target_name() const;
  inline void set_target_name(::google::protobuf::uint32 value);

  // optional uint32 target_source_name = 3;
  inline bool has_target_source_name() const;
  inline void clear_target_source_name();
  static const int kTargetSourceNameFieldNumber = 3;
  inline ::google::protobuf::uint32 target_source_name() const;
  inline void set_target_source_name(::google::protobuf::uint32 value);

  // optional uint32 attacker_name = 4;
  inline bool has_attacker_name() const;
  inline void clear_attacker_name();
  static const int kAttackerNameFieldNumber = 4;
  inline ::google::protobuf::uint32 attacker_name() const;
  inline void set_attacker_name(::google::protobuf::uint32 value);

  // optional uint32 damage_source_name = 5;
  inline bool has_damage_source_name() const;
  inline void clear_damage_source_name();
  static const int kDamageSourceNameFieldNumber = 5;
  inline ::google::protobuf::uint32 damage_source_name() const;
  inline void set_damage_source_name(::google::protobuf::uint32 value);

  // optional uint32 inflictor_name = 6;
  inline bool has_inflictor_name() const;
  inline void clear_inflictor_name();
  static const int kInflictorNameFieldNumber = 6;
  inline ::google::protobuf::uint32 inflictor_name() const;
  inline void set_inflictor_name(::google::protobuf::uint32 value);

  // optional bool is_attacker_illusion = 7;
  inline bool has_is_attacker_illusion() const;
  inline void clear_is_attacker_illusion();
  static const int kIsAttackerIllusionFieldNumber = 7;
  inline bool is_attacker_illusion() const;
  inline void set_is_attacker_illusion(bool value);

  // optional bool is_attacker_hero = 8;
  inline bool has_is_attacker_hero() const;
  inline void clear_is_attacker_hero();
  static const int kIsAttackerHeroFieldNumber = 8;
  inline bool is_attacker_hero() const;
  inline void set_is_attacker_hero(bool value);

  // optional bool is_target_illusion = 9;
  inline bool has_is_target_illusion() const;
  inline void clear_is_target_illusion();
  static const int kIsTargetIllusionFieldNumber = 9;
  inline bool is_target_illusion() const;
  inline void set_is_target_illusion(bool value);

  // optional bool is_target_hero = 10;
  inline bool has_is_target_hero() const;
  inline void clear_is_target_hero();
  static const int kIsTargetHeroFieldNumber = 10;
  inline bool is_target_hero() const;
  inline void set_is_target_hero(bool value);

  // optional bool is_visible_radiant = 11;
  inline bool has_is_visible_radiant() const;
  inline void clear_is_visible_radiant();
  static const int kIsVisibleRadiantFieldNumber = 11;
  inline bool is_visible_radiant() const;
  inline void set_is_visible_radiant(bool value);

  // optional bool is_visible_dire = 12;
  inline bool has_is_visible_dire() const;
  inline void clear_is_visible_dire();
  static const int kIsVisibleDireFieldNumber = 12;
  inline bool is_visible_dire() const;
  inline void set_is_visible_dire(bool value);

  // optional uint32 value = 13;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 13;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // optional int32 health = 14;
  inline bool has_health() const;
  inline void clear_health();
  static const int kHealthFieldNumber = 14;
  inline ::google::protobuf::int32 health() const;
  inline void set_health(::google::protobuf::int32 value);

  // optional float timestamp = 15;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 15;
  inline float timestamp() const;
  inline void set_timestamp(float value);

  // optional float stun_duration = 16;
  inline bool has_stun_duration() const;
  inline void clear_stun_duration();
  static const int kStunDurationFieldNumber = 16;
  inline float stun_duration() const;
  inline void set_stun_duration(float value);

  // optional float slow_duration = 17;
  inline bool has_slow_duration() const;
  inline void clear_slow_duration();
  static const int kSlowDurationFieldNumber = 17;
  inline float slow_duration() const;
  inline void set_slow_duration(float value);

  // optional bool is_ability_toggle_on = 18;
  inline bool has_is_ability_toggle_on() const;
  inline void clear_is_ability_toggle_on();
  static const int kIsAbilityToggleOnFieldNumber = 18;
  inline bool is_ability_toggle_on() const;
  inline void set_is_ability_toggle_on(bool value);

  // optional bool is_ability_toggle_off = 19;
  inline bool has_is_ability_toggle_off() const;
  inline void clear_is_ability_toggle_off();
  static const int kIsAbilityToggleOffFieldNumber = 19;
  inline bool is_ability_toggle_off() const;
  inline void set_is_ability_toggle_off(bool value);

  // optional uint32 ability_level = 20;
  inline bool has_ability_level() const;
  inline void clear_ability_level();
  static const int kAbilityLevelFieldNumber = 20;
  inline ::google::protobuf::uint32 ability_level() const;
  inline void set_ability_level(::google::protobuf::uint32 value);

  // optional float location_x = 21;
  inline bool has_location_x() const;
  inline void clear_location_x();
  static const int kLocationXFieldNumber = 21;
  inline float location_x() const;
  inline void set_location_x(float value);

  // optional float location_y = 22;
  inline bool has_location_y() const;
  inline void clear_location_y();
  static const int kLocationYFieldNumber = 22;
  inline float location_y() const;
  inline void set_location_y(float value);

  // optional uint32 gold_reason = 23;
  inline bool has_gold_reason() const;
  inline void clear_gold_reason();
  static const int kGoldReasonFieldNumber = 23;
  inline ::google::protobuf::uint32 gold_reason() const;
  inline void set_gold_reason(::google::protobuf::uint32 value);

  // optional float timestamp_raw = 24;
  inline bool has_timestamp_raw() const;
  inline void clear_timestamp_raw();
  static const int kTimestampRawFieldNumber = 24;
  inline float timestamp_raw() const;
  inline void set_timestamp_raw(float value);

  // optional float modifier_duration = 25;
  inline bool has_modifier_duration() const;
  inline void clear_modifier_duration();
  static const int kModifierDurationFieldNumber = 25;
  inline float modifier_duration() const;
  inline void set_modifier_duration(float value);

  // optional uint32 xp_reason = 26;
  inline bool has_xp_reason() const;
  inline void clear_xp_reason();
  static const int kXpReasonFieldNumber = 26;
  inline ::google::protobuf::uint32 xp_reason() const;
  inline void set_xp_reason(::google::protobuf::uint32 value);

  // optional uint32 last_hits = 27;
  inline bool has_last_hits() const;
  inline void clear_last_hits();
  static const int kLastHitsFieldNumber = 27;
  inline ::google::protobuf::uint32 last_hits() const;
  inline void set_last_hits(::google::protobuf::uint32 value);

  // optional uint32 attacker_team = 28;
  inline bool has_attacker_team() const;
  inline void clear_attacker_team();
  static const int kAttackerTeamFieldNumber = 28;
  inline ::google::protobuf::uint32 attacker_team() const;
  inline void set_attacker_team(::google::protobuf::uint32 value);

  // optional uint32 target_team = 29;
  inline bool has_target_team() const;
  inline void clear_target_team();
  static const int kTargetTeamFieldNumber = 29;
  inline ::google::protobuf::uint32 target_team() const;
  inline void set_target_team(::google::protobuf::uint32 value);

  // optional uint32 obs_wards_placed = 30;
  inline bool has_obs_wards_placed() const;
  inline void clear_obs_wards_placed();
  static const int kObsWardsPlacedFieldNumber = 30;
  inline ::google::protobuf::uint32 obs_wards_placed() const;
  inline void set_obs_wards_placed(::google::protobuf::uint32 value);

  // optional uint32 assist_player0 = 31;
  inline bool has_assist_player0() const;
  inline void clear_assist_player0();
  static const int kAssistPlayer0FieldNumber = 31;
  inline ::google::protobuf::uint32 assist_player0() const;
  inline void set_assist_player0(::google::protobuf::uint32 value);

  // optional uint32 assist_player1 = 32;
  inline bool has_assist_player1() const;
  inline void clear_assist_player1();
  static const int kAssistPlayer1FieldNumber = 32;
  inline ::google::protobuf::uint32 assist_player1() const;
  inline void set_assist_player1(::google::protobuf::uint32 value);

  // optional uint32 assist_player2 = 33;
  inline bool has_assist_player2() const;
  inline void clear_assist_player2();
  static const int kAssistPlayer2FieldNumber = 33;
  inline ::google::protobuf::uint32 assist_player2() const;
  inline void set_assist_player2(::google::protobuf::uint32 value);

  // optional uint32 assist_player3 = 34;
  inline bool has_assist_player3() const;
  inline void clear_assist_player3();
  static const int kAssistPlayer3FieldNumber = 34;
  inline ::google::protobuf::uint32 assist_player3() const;
  inline void set_assist_player3(::google::protobuf::uint32 value);

  // optional uint32 stack_count = 35;
  inline bool has_stack_count() const;
  inline void clear_stack_count();
  static const int kStackCountFieldNumber = 35;
  inline ::google::protobuf::uint32 stack_count() const;
  inline void set_stack_count(::google::protobuf::uint32 value);

  // optional bool hidden_modifier = 36;
  inline bool has_hidden_modifier() const;
  inline void clear_hidden_modifier();
  static const int kHiddenModifierFieldNumber = 36;
  inline bool hidden_modifier() const;
  inline void set_hidden_modifier(bool value);

  // optional bool is_target_building = 37;
  inline bool has_is_target_building() const;
  inline void clear_is_target_building();
  static const int kIsTargetBuildingFieldNumber = 37;
  inline bool is_target_building() const;
  inline void set_is_target_building(bool value);

  // optional uint32 neutral_camp_type = 38;
  inline bool has_neutral_camp_type() const;
  inline void clear_neutral_camp_type();
  static const int kNeutralCampTypeFieldNumber = 38;
  inline ::google::protobuf::uint32 neutral_camp_type() const;
  inline void set_neutral_camp_type(::google::protobuf::uint32 value);

  // optional uint32 rune_type = 39;
  inline bool has_rune_type() const;
  inline void clear_rune_type();
  static const int kRuneTypeFieldNumber = 39;
  inline ::google::protobuf::uint32 rune_type() const;
  inline void set_rune_type(::google::protobuf::uint32 value);

  // repeated uint32 assist_players = 40;
  inline int assist_players_size() const;
  inline void clear_assist_players();
  static const int kAssistPlayersFieldNumber = 40;
  inline ::google::protobuf::uint32 assist_players(int index) const;
  inline void set_assist_players(int index, ::google::protobuf::uint32 value);
  inline void add_assist_players(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      assist_players() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_assist_players();

  // optional bool is_heal_save = 41;
  inline bool has_is_heal_save() const;
  inline void clear_is_heal_save();
  static const int kIsHealSaveFieldNumber = 41;
  inline bool is_heal_save() const;
  inline void set_is_heal_save(bool value);

  // optional bool is_ultimate_ability = 42;
  inline bool has_is_ultimate_ability() const;
  inline void clear_is_ultimate_ability();
  static const int kIsUltimateAbilityFieldNumber = 42;
  inline bool is_ultimate_ability() const;
  inline void set_is_ultimate_ability(bool value);

  // optional uint32 attacker_hero_level = 43;
  inline bool has_attacker_hero_level() const;
  inline void clear_attacker_hero_level();
  static const int kAttackerHeroLevelFieldNumber = 43;
  inline ::google::protobuf::uint32 attacker_hero_level() const;
  inline void set_attacker_hero_level(::google::protobuf::uint32 value);

  // optional uint32 target_hero_level = 44;
  inline bool has_target_hero_level() const;
  inline void clear_target_hero_level();
  static const int kTargetHeroLevelFieldNumber = 44;
  inline ::google::protobuf::uint32 target_hero_level() const;
  inline void set_target_hero_level(::google::protobuf::uint32 value);

  // optional uint32 xpm = 45;
  inline bool has_xpm() const;
  inline void clear_xpm();
  static const int kXpmFieldNumber = 45;
  inline ::google::protobuf::uint32 xpm() const;
  inline void set_xpm(::google::protobuf::uint32 value);

  // optional uint32 gpm = 46;
  inline bool has_gpm() const;
  inline void clear_gpm();
  static const int kGpmFieldNumber = 46;
  inline ::google::protobuf::uint32 gpm() const;
  inline void set_gpm(::google::protobuf::uint32 value);

  // optional uint32 event_location = 47;
  inline bool has_event_location() const;
  inline void clear_event_location();
  static const int kEventLocationFieldNumber = 47;
  inline ::google::protobuf::uint32 event_location() const;
  inline void set_event_location(::google::protobuf::uint32 value);

  // optional bool target_is_self = 48;
  inline bool has_target_is_self() const;
  inline void clear_target_is_self();
  static const int kTargetIsSelfFieldNumber = 48;
  inline bool target_is_self() const;
  inline void set_target_is_self(bool value);

  // optional uint32 damage_type = 49;
  inline bool has_damage_type() const;
  inline void clear_damage_type();
  static const int kDamageTypeFieldNumber = 49;
  inline ::google::protobuf::uint32 damage_type() const;
  inline void set_damage_type(::google::protobuf::uint32 value);

  // optional bool invisibility_modifier = 50;
  inline bool has_invisibility_modifier() const;
  inline void clear_invisibility_modifier();
  static const int kInvisibilityModifierFieldNumber = 50;
  inline bool invisibility_modifier() const;
  inline void set_invisibility_modifier(bool value);

  // optional uint32 damage_category = 51;
  inline bool has_damage_category() const;
  inline void clear_damage_category();
  static const int kDamageCategoryFieldNumber = 51;
  inline ::google::protobuf::uint32 damage_category() const;
  inline void set_damage_category(::google::protobuf::uint32 value);

  // optional uint32 networth = 52;
  inline bool has_networth() const;
  inline void clear_networth();
  static const int kNetworthFieldNumber = 52;
  inline ::google::protobuf::uint32 networth() const;
  inline void set_networth(::google::protobuf::uint32 value);

  // optional uint32 building_type = 53;
  inline bool has_building_type() const;
  inline void clear_building_type();
  static const int kBuildingTypeFieldNumber = 53;
  inline ::google::protobuf::uint32 building_type() const;
  inline void set_building_type(::google::protobuf::uint32 value);

  // optional float modifier_elapsed_duration = 54;
  inline bool has_modifier_elapsed_duration() const;
  inline void clear_modifier_elapsed_duration();
  static const int kModifierElapsedDurationFieldNumber = 54;
  inline float modifier_elapsed_duration() const;
  inline void set_modifier_elapsed_duration(float value);

  // optional bool silence_modifier = 55;
  inline bool has_silence_modifier() const;
  inline void clear_silence_modifier();
  static const int kSilenceModifierFieldNumber = 55;
  inline bool silence_modifier() const;
  inline void set_silence_modifier(bool value);

  // optional bool heal_from_lifesteal = 56;
  inline bool has_heal_from_lifesteal() const;
  inline void clear_heal_from_lifesteal();
  static const int kHealFromLifestealFieldNumber = 56;
  inline bool heal_from_lifesteal() const;
  inline void set_heal_from_lifesteal(bool value);

  // optional bool modifier_purged = 57;
  inline bool has_modifier_purged() const;
  inline void clear_modifier_purged();
  static const int kModifierPurgedFieldNumber = 57;
  inline bool modifier_purged() const;
  inline void set_modifier_purged(bool value);

  // optional bool spell_evaded = 58;
  inline bool has_spell_evaded() const;
  inline void clear_spell_evaded();
  static const int kSpellEvadedFieldNumber = 58;
  inline bool spell_evaded() const;
  inline void set_spell_evaded(bool value);

  // optional bool motion_controller_modifier = 59;
  inline bool has_motion_controller_modifier() const;
  inline void clear_motion_controller_modifier();
  static const int kMotionControllerModifierFieldNumber = 59;
  inline bool motion_controller_modifier() const;
  inline void set_motion_controller_modifier(bool value);

  // optional bool long_range_kill = 60;
  inline bool has_long_range_kill() const;
  inline void clear_long_range_kill();
  static const int kLongRangeKillFieldNumber = 60;
  inline bool long_range_kill() const;
  inline void set_long_range_kill(bool value);

  // optional uint32 modifier_purge_ability = 61;
  inline bool has_modifier_purge_ability() const;
  inline void clear_modifier_purge_ability();
  static const int kModifierPurgeAbilityFieldNumber = 61;
  inline ::google::protobuf::uint32 modifier_purge_ability() const;
  inline void set_modifier_purge_ability(::google::protobuf::uint32 value);

  // optional uint32 modifier_purge_npc = 62;
  inline bool has_modifier_purge_npc() const;
  inline void clear_modifier_purge_npc();
  static const int kModifierPurgeNpcFieldNumber = 62;
  inline ::google::protobuf::uint32 modifier_purge_npc() const;
  inline void set_modifier_purge_npc(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTACombatLogEntry)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_target_name();
  inline void clear_has_target_name();
  inline void set_has_target_source_name();
  inline void clear_has_target_source_name();
  inline void set_has_attacker_name();
  inline void clear_has_attacker_name();
  inline void set_has_damage_source_name();
  inline void clear_has_damage_source_name();
  inline void set_has_inflictor_name();
  inline void clear_has_inflictor_name();
  inline void set_has_is_attacker_illusion();
  inline void clear_has_is_attacker_illusion();
  inline void set_has_is_attacker_hero();
  inline void clear_has_is_attacker_hero();
  inline void set_has_is_target_illusion();
  inline void clear_has_is_target_illusion();
  inline void set_has_is_target_hero();
  inline void clear_has_is_target_hero();
  inline void set_has_is_visible_radiant();
  inline void clear_has_is_visible_radiant();
  inline void set_has_is_visible_dire();
  inline void clear_has_is_visible_dire();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_health();
  inline void clear_has_health();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_stun_duration();
  inline void clear_has_stun_duration();
  inline void set_has_slow_duration();
  inline void clear_has_slow_duration();
  inline void set_has_is_ability_toggle_on();
  inline void clear_has_is_ability_toggle_on();
  inline void set_has_is_ability_toggle_off();
  inline void clear_has_is_ability_toggle_off();
  inline void set_has_ability_level();
  inline void clear_has_ability_level();
  inline void set_has_location_x();
  inline void clear_has_location_x();
  inline void set_has_location_y();
  inline void clear_has_location_y();
  inline void set_has_gold_reason();
  inline void clear_has_gold_reason();
  inline void set_has_timestamp_raw();
  inline void clear_has_timestamp_raw();
  inline void set_has_modifier_duration();
  inline void clear_has_modifier_duration();
  inline void set_has_xp_reason();
  inline void clear_has_xp_reason();
  inline void set_has_last_hits();
  inline void clear_has_last_hits();
  inline void set_has_attacker_team();
  inline void clear_has_attacker_team();
  inline void set_has_target_team();
  inline void clear_has_target_team();
  inline void set_has_obs_wards_placed();
  inline void clear_has_obs_wards_placed();
  inline void set_has_assist_player0();
  inline void clear_has_assist_player0();
  inline void set_has_assist_player1();
  inline void clear_has_assist_player1();
  inline void set_has_assist_player2();
  inline void clear_has_assist_player2();
  inline void set_has_assist_player3();
  inline void clear_has_assist_player3();
  inline void set_has_stack_count();
  inline void clear_has_stack_count();
  inline void set_has_hidden_modifier();
  inline void clear_has_hidden_modifier();
  inline void set_has_is_target_building();
  inline void clear_has_is_target_building();
  inline void set_has_neutral_camp_type();
  inline void clear_has_neutral_camp_type();
  inline void set_has_rune_type();
  inline void clear_has_rune_type();
  inline void set_has_is_heal_save();
  inline void clear_has_is_heal_save();
  inline void set_has_is_ultimate_ability();
  inline void clear_has_is_ultimate_ability();
  inline void set_has_attacker_hero_level();
  inline void clear_has_attacker_hero_level();
  inline void set_has_target_hero_level();
  inline void clear_has_target_hero_level();
  inline void set_has_xpm();
  inline void clear_has_xpm();
  inline void set_has_gpm();
  inline void clear_has_gpm();
  inline void set_has_event_location();
  inline void clear_has_event_location();
  inline void set_has_target_is_self();
  inline void clear_has_target_is_self();
  inline void set_has_damage_type();
  inline void clear_has_damage_type();
  inline void set_has_invisibility_modifier();
  inline void clear_has_invisibility_modifier();
  inline void set_has_damage_category();
  inline void clear_has_damage_category();
  inline void set_has_networth();
  inline void clear_has_networth();
  inline void set_has_building_type();
  inline void clear_has_building_type();
  inline void set_has_modifier_elapsed_duration();
  inline void clear_has_modifier_elapsed_duration();
  inline void set_has_silence_modifier();
  inline void clear_has_silence_modifier();
  inline void set_has_heal_from_lifesteal();
  inline void clear_has_heal_from_lifesteal();
  inline void set_has_modifier_purged();
  inline void clear_has_modifier_purged();
  inline void set_has_spell_evaded();
  inline void clear_has_spell_evaded();
  inline void set_has_motion_controller_modifier();
  inline void clear_has_motion_controller_modifier();
  inline void set_has_long_range_kill();
  inline void clear_has_long_range_kill();
  inline void set_has_modifier_purge_ability();
  inline void clear_has_modifier_purge_ability();
  inline void set_has_modifier_purge_npc();
  inline void clear_has_modifier_purge_npc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  int type_;
  ::google::protobuf::uint32 target_name_;
  ::google::protobuf::uint32 target_source_name_;
  ::google::protobuf::uint32 attacker_name_;
  ::google::protobuf::uint32 damage_source_name_;
  ::google::protobuf::uint32 inflictor_name_;
  bool is_attacker_illusion_;
  bool is_attacker_hero_;
  bool is_target_illusion_;
  bool is_target_hero_;
  ::google::protobuf::uint32 value_;
  ::google::protobuf::int32 health_;
  float timestamp_;
  bool is_visible_radiant_;
  bool is_visible_dire_;
  bool is_ability_toggle_on_;
  bool is_ability_toggle_off_;
  float stun_duration_;
  float slow_duration_;
  ::google::protobuf::uint32 ability_level_;
  float location_x_;
  float location_y_;
  ::google::protobuf::uint32 gold_reason_;
  float timestamp_raw_;
  float modifier_duration_;
  ::google::protobuf::uint32 xp_reason_;
  ::google::protobuf::uint32 last_hits_;
  ::google::protobuf::uint32 attacker_team_;
  ::google::protobuf::uint32 target_team_;
  ::google::protobuf::uint32 obs_wards_placed_;
  ::google::protobuf::uint32 assist_player0_;
  ::google::protobuf::uint32 assist_player1_;
  ::google::protobuf::uint32 assist_player2_;
  ::google::protobuf::uint32 assist_player3_;
  ::google::protobuf::uint32 stack_count_;
  ::google::protobuf::uint32 neutral_camp_type_;
  ::google::protobuf::uint32 rune_type_;
  bool hidden_modifier_;
  bool is_target_building_;
  bool is_heal_save_;
  bool is_ultimate_ability_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > assist_players_;
  ::google::protobuf::uint32 attacker_hero_level_;
  ::google::protobuf::uint32 target_hero_level_;
  ::google::protobuf::uint32 xpm_;
  ::google::protobuf::uint32 gpm_;
  ::google::protobuf::uint32 event_location_;
  ::google::protobuf::uint32 damage_type_;
  ::google::protobuf::uint32 damage_category_;
  ::google::protobuf::uint32 networth_;
  bool target_is_self_;
  bool invisibility_modifier_;
  bool silence_modifier_;
  bool heal_from_lifesteal_;
  ::google::protobuf::uint32 building_type_;
  float modifier_elapsed_duration_;
  bool modifier_purged_;
  bool spell_evaded_;
  bool motion_controller_modifier_;
  bool long_range_kill_;
  ::google::protobuf::uint32 modifier_purge_ability_;
  ::google::protobuf::uint32 modifier_purge_npc_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTACombatLogEntry* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Trophy : public ::google::protobuf::Message {
 public:
  CMsgDOTAProfileCard_Slot_Trophy();
  virtual ~CMsgDOTAProfileCard_Slot_Trophy();

  CMsgDOTAProfileCard_Slot_Trophy(const CMsgDOTAProfileCard_Slot_Trophy& from);

  inline CMsgDOTAProfileCard_Slot_Trophy& operator=(const CMsgDOTAProfileCard_Slot_Trophy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProfileCard_Slot_Trophy& default_instance();

  void Swap(CMsgDOTAProfileCard_Slot_Trophy* other);

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard_Slot_Trophy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Trophy& from);
  void MergeFrom(const CMsgDOTAProfileCard_Slot_Trophy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 trophy_id = 1;
  inline bool has_trophy_id() const;
  inline void clear_trophy_id();
  static const int kTrophyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 trophy_id() const;
  inline void set_trophy_id(::google::protobuf::uint32 value);

  // optional uint32 trophy_score = 2;
  inline bool has_trophy_score() const;
  inline void clear_trophy_score();
  static const int kTrophyScoreFieldNumber = 2;
  inline ::google::protobuf::uint32 trophy_score() const;
  inline void set_trophy_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard.Slot.Trophy)
 private:
  inline void set_has_trophy_id();
  inline void clear_has_trophy_id();
  inline void set_has_trophy_score();
  inline void clear_has_trophy_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 trophy_id_;
  ::google::protobuf::uint32 trophy_score_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAProfileCard_Slot_Trophy* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Stat : public ::google::protobuf::Message {
 public:
  CMsgDOTAProfileCard_Slot_Stat();
  virtual ~CMsgDOTAProfileCard_Slot_Stat();

  CMsgDOTAProfileCard_Slot_Stat(const CMsgDOTAProfileCard_Slot_Stat& from);

  inline CMsgDOTAProfileCard_Slot_Stat& operator=(const CMsgDOTAProfileCard_Slot_Stat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProfileCard_Slot_Stat& default_instance();

  void Swap(CMsgDOTAProfileCard_Slot_Stat* other);

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard_Slot_Stat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Stat& from);
  void MergeFrom(const CMsgDOTAProfileCard_Slot_Stat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_SoloRank];
  inline bool has_stat_id() const;
  inline void clear_stat_id();
  static const int kStatIdFieldNumber = 1;
  inline ::CMsgDOTAProfileCard_EStatID stat_id() const;
  inline void set_stat_id(::CMsgDOTAProfileCard_EStatID value);

  // optional uint32 stat_score = 2;
  inline bool has_stat_score() const;
  inline void clear_stat_score();
  static const int kStatScoreFieldNumber = 2;
  inline ::google::protobuf::uint32 stat_score() const;
  inline void set_stat_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard.Slot.Stat)
 private:
  inline void set_has_stat_id();
  inline void clear_has_stat_id();
  inline void set_has_stat_score();
  inline void clear_has_stat_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int stat_id_;
  ::google::protobuf::uint32 stat_score_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAProfileCard_Slot_Stat* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Item : public ::google::protobuf::Message {
 public:
  CMsgDOTAProfileCard_Slot_Item();
  virtual ~CMsgDOTAProfileCard_Slot_Item();

  CMsgDOTAProfileCard_Slot_Item(const CMsgDOTAProfileCard_Slot_Item& from);

  inline CMsgDOTAProfileCard_Slot_Item& operator=(const CMsgDOTAProfileCard_Slot_Item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProfileCard_Slot_Item& default_instance();

  void Swap(CMsgDOTAProfileCard_Slot_Item* other);

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard_Slot_Item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Item& from);
  void MergeFrom(const CMsgDOTAProfileCard_Slot_Item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes serialized_item = 1;
  inline bool has_serialized_item() const;
  inline void clear_serialized_item();
  static const int kSerializedItemFieldNumber = 1;
  inline const ::std::string& serialized_item() const;
  inline void set_serialized_item(const ::std::string& value);
  inline void set_serialized_item(const char* value);
  inline void set_serialized_item(const void* value, size_t size);
  inline ::std::string* mutable_serialized_item();
  inline ::std::string* release_serialized_item();
  inline void set_allocated_serialized_item(::std::string* serialized_item);

  // optional uint64 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint64 item_id() const;
  inline void set_item_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard.Slot.Item)
 private:
  inline void set_has_serialized_item();
  inline void clear_has_serialized_item();
  inline void set_has_item_id();
  inline void clear_has_item_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* serialized_item_;
  ::google::protobuf::uint64 item_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAProfileCard_Slot_Item* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Hero : public ::google::protobuf::Message {
 public:
  CMsgDOTAProfileCard_Slot_Hero();
  virtual ~CMsgDOTAProfileCard_Slot_Hero();

  CMsgDOTAProfileCard_Slot_Hero(const CMsgDOTAProfileCard_Slot_Hero& from);

  inline CMsgDOTAProfileCard_Slot_Hero& operator=(const CMsgDOTAProfileCard_Slot_Hero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProfileCard_Slot_Hero& default_instance();

  void Swap(CMsgDOTAProfileCard_Slot_Hero* other);

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard_Slot_Hero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Hero& from);
  void MergeFrom(const CMsgDOTAProfileCard_Slot_Hero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hero_id = 1;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 hero_wins = 2;
  inline bool has_hero_wins() const;
  inline void clear_hero_wins();
  static const int kHeroWinsFieldNumber = 2;
  inline ::google::protobuf::uint32 hero_wins() const;
  inline void set_hero_wins(::google::protobuf::uint32 value);

  // optional uint32 hero_losses = 3;
  inline bool has_hero_losses() const;
  inline void clear_hero_losses();
  static const int kHeroLossesFieldNumber = 3;
  inline ::google::protobuf::uint32 hero_losses() const;
  inline void set_hero_losses(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard.Slot.Hero)
 private:
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_hero_wins();
  inline void clear_has_hero_wins();
  inline void set_has_hero_losses();
  inline void clear_has_hero_losses();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 hero_wins_;
  ::google::protobuf::uint32 hero_losses_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAProfileCard_Slot_Hero* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Emoticon : public ::google::protobuf::Message {
 public:
  CMsgDOTAProfileCard_Slot_Emoticon();
  virtual ~CMsgDOTAProfileCard_Slot_Emoticon();

  CMsgDOTAProfileCard_Slot_Emoticon(const CMsgDOTAProfileCard_Slot_Emoticon& from);

  inline CMsgDOTAProfileCard_Slot_Emoticon& operator=(const CMsgDOTAProfileCard_Slot_Emoticon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProfileCard_Slot_Emoticon& default_instance();

  void Swap(CMsgDOTAProfileCard_Slot_Emoticon* other);

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard_Slot_Emoticon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Emoticon& from);
  void MergeFrom(const CMsgDOTAProfileCard_Slot_Emoticon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 emoticon_id = 1;
  inline bool has_emoticon_id() const;
  inline void clear_emoticon_id();
  static const int kEmoticonIdFieldNumber = 1;
  inline ::google::protobuf::uint32 emoticon_id() const;
  inline void set_emoticon_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard.Slot.Emoticon)
 private:
  inline void set_has_emoticon_id();
  inline void clear_has_emoticon_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 emoticon_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAProfileCard_Slot_Emoticon* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot : public ::google::protobuf::Message {
 public:
  CMsgDOTAProfileCard_Slot();
  virtual ~CMsgDOTAProfileCard_Slot();

  CMsgDOTAProfileCard_Slot(const CMsgDOTAProfileCard_Slot& from);

  inline CMsgDOTAProfileCard_Slot& operator=(const CMsgDOTAProfileCard_Slot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProfileCard_Slot& default_instance();

  void Swap(CMsgDOTAProfileCard_Slot* other);

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard_Slot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAProfileCard_Slot& from);
  void MergeFrom(const CMsgDOTAProfileCard_Slot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAProfileCard_Slot_Trophy Trophy;
  typedef CMsgDOTAProfileCard_Slot_Stat Stat;
  typedef CMsgDOTAProfileCard_Slot_Item Item;
  typedef CMsgDOTAProfileCard_Slot_Hero Hero;
  typedef CMsgDOTAProfileCard_Slot_Emoticon Emoticon;

  // accessors -------------------------------------------------------

  // optional uint32 slot_id = 1;
  inline bool has_slot_id() const;
  inline void clear_slot_id();
  static const int kSlotIdFieldNumber = 1;
  inline ::google::protobuf::uint32 slot_id() const;
  inline void set_slot_id(::google::protobuf::uint32 value);

  // optional .CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
  inline bool has_trophy() const;
  inline void clear_trophy();
  static const int kTrophyFieldNumber = 2;
  inline const ::CMsgDOTAProfileCard_Slot_Trophy& trophy() const;
  inline ::CMsgDOTAProfileCard_Slot_Trophy* mutable_trophy();
  inline ::CMsgDOTAProfileCard_Slot_Trophy* release_trophy();
  inline void set_allocated_trophy(::CMsgDOTAProfileCard_Slot_Trophy* trophy);

  // optional .CMsgDOTAProfileCard.Slot.Stat stat = 3;
  inline bool has_stat() const;
  inline void clear_stat();
  static const int kStatFieldNumber = 3;
  inline const ::CMsgDOTAProfileCard_Slot_Stat& stat() const;
  inline ::CMsgDOTAProfileCard_Slot_Stat* mutable_stat();
  inline ::CMsgDOTAProfileCard_Slot_Stat* release_stat();
  inline void set_allocated_stat(::CMsgDOTAProfileCard_Slot_Stat* stat);

  // optional .CMsgDOTAProfileCard.Slot.Item item = 4;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 4;
  inline const ::CMsgDOTAProfileCard_Slot_Item& item() const;
  inline ::CMsgDOTAProfileCard_Slot_Item* mutable_item();
  inline ::CMsgDOTAProfileCard_Slot_Item* release_item();
  inline void set_allocated_item(::CMsgDOTAProfileCard_Slot_Item* item);

  // optional .CMsgDOTAProfileCard.Slot.Hero hero = 5;
  inline bool has_hero() const;
  inline void clear_hero();
  static const int kHeroFieldNumber = 5;
  inline const ::CMsgDOTAProfileCard_Slot_Hero& hero() const;
  inline ::CMsgDOTAProfileCard_Slot_Hero* mutable_hero();
  inline ::CMsgDOTAProfileCard_Slot_Hero* release_hero();
  inline void set_allocated_hero(::CMsgDOTAProfileCard_Slot_Hero* hero);

  // optional .CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
  inline bool has_emoticon() const;
  inline void clear_emoticon();
  static const int kEmoticonFieldNumber = 6;
  inline const ::CMsgDOTAProfileCard_Slot_Emoticon& emoticon() const;
  inline ::CMsgDOTAProfileCard_Slot_Emoticon* mutable_emoticon();
  inline ::CMsgDOTAProfileCard_Slot_Emoticon* release_emoticon();
  inline void set_allocated_emoticon(::CMsgDOTAProfileCard_Slot_Emoticon* emoticon);

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard.Slot)
 private:
  inline void set_has_slot_id();
  inline void clear_has_slot_id();
  inline void set_has_trophy();
  inline void clear_has_trophy();
  inline void set_has_stat();
  inline void clear_has_stat();
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_hero();
  inline void clear_has_hero();
  inline void set_has_emoticon();
  inline void clear_has_emoticon();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgDOTAProfileCard_Slot_Trophy* trophy_;
  ::CMsgDOTAProfileCard_Slot_Stat* stat_;
  ::CMsgDOTAProfileCard_Slot_Item* item_;
  ::CMsgDOTAProfileCard_Slot_Hero* hero_;
  ::CMsgDOTAProfileCard_Slot_Emoticon* emoticon_;
  ::google::protobuf::uint32 slot_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAProfileCard_Slot* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard : public ::google::protobuf::Message {
 public:
  CMsgDOTAProfileCard();
  virtual ~CMsgDOTAProfileCard();

  CMsgDOTAProfileCard(const CMsgDOTAProfileCard& from);

  inline CMsgDOTAProfileCard& operator=(const CMsgDOTAProfileCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProfileCard& default_instance();

  void Swap(CMsgDOTAProfileCard* other);

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAProfileCard& from);
  void MergeFrom(const CMsgDOTAProfileCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAProfileCard_Slot Slot;

  typedef CMsgDOTAProfileCard_EStatID EStatID;
  static const EStatID k_eStat_SoloRank = CMsgDOTAProfileCard_EStatID_k_eStat_SoloRank;
  static const EStatID k_eStat_PartyRank = CMsgDOTAProfileCard_EStatID_k_eStat_PartyRank;
  static const EStatID k_eStat_Wins = CMsgDOTAProfileCard_EStatID_k_eStat_Wins;
  static const EStatID k_eStat_Commends = CMsgDOTAProfileCard_EStatID_k_eStat_Commends;
  static const EStatID k_eStat_GamesPlayed = CMsgDOTAProfileCard_EStatID_k_eStat_GamesPlayed;
  static const EStatID k_eStat_FirstMatchDate = CMsgDOTAProfileCard_EStatID_k_eStat_FirstMatchDate;
  static inline bool EStatID_IsValid(int value) {
    return CMsgDOTAProfileCard_EStatID_IsValid(value);
  }
  static const EStatID EStatID_MIN =
    CMsgDOTAProfileCard_EStatID_EStatID_MIN;
  static const EStatID EStatID_MAX =
    CMsgDOTAProfileCard_EStatID_EStatID_MAX;
  static const int EStatID_ARRAYSIZE =
    CMsgDOTAProfileCard_EStatID_EStatID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EStatID_descriptor() {
    return CMsgDOTAProfileCard_EStatID_descriptor();
  }
  static inline const ::std::string& EStatID_Name(EStatID value) {
    return CMsgDOTAProfileCard_EStatID_Name(value);
  }
  static inline bool EStatID_Parse(const ::std::string& name,
      EStatID* value) {
    return CMsgDOTAProfileCard_EStatID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 background_def_index = 2;
  inline bool has_background_def_index() const;
  inline void clear_background_def_index();
  static const int kBackgroundDefIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 background_def_index() const;
  inline void set_background_def_index(::google::protobuf::uint32 value);

  // repeated .CMsgDOTAProfileCard.Slot slots = 3;
  inline int slots_size() const;
  inline void clear_slots();
  static const int kSlotsFieldNumber = 3;
  inline const ::CMsgDOTAProfileCard_Slot& slots(int index) const;
  inline ::CMsgDOTAProfileCard_Slot* mutable_slots(int index);
  inline ::CMsgDOTAProfileCard_Slot* add_slots();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProfileCard_Slot >&
      slots() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProfileCard_Slot >*
      mutable_slots();

  // optional uint32 badge_points = 4;
  inline bool has_badge_points() const;
  inline void clear_badge_points();
  static const int kBadgePointsFieldNumber = 4;
  inline ::google::protobuf::uint32 badge_points() const;
  inline void set_badge_points(::google::protobuf::uint32 value);

  // optional uint32 event_points = 5;
  inline bool has_event_points() const;
  inline void clear_event_points();
  static const int kEventPointsFieldNumber = 5;
  inline ::google::protobuf::uint32 event_points() const;
  inline void set_event_points(::google::protobuf::uint32 value);

  // optional uint32 event_id = 6;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 6;
  inline ::google::protobuf::uint32 event_id() const;
  inline void set_event_id(::google::protobuf::uint32 value);

  // optional .CMsgBattleCupVictory recent_battle_cup_victory = 7;
  inline bool has_recent_battle_cup_victory() const;
  inline void clear_recent_battle_cup_victory();
  static const int kRecentBattleCupVictoryFieldNumber = 7;
  inline const ::CMsgBattleCupVictory& recent_battle_cup_victory() const;
  inline ::CMsgBattleCupVictory* mutable_recent_battle_cup_victory();
  inline ::CMsgBattleCupVictory* release_recent_battle_cup_victory();
  inline void set_allocated_recent_battle_cup_victory(::CMsgBattleCupVictory* recent_battle_cup_victory);

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_background_def_index();
  inline void clear_has_background_def_index();
  inline void set_has_badge_points();
  inline void clear_has_badge_points();
  inline void set_has_event_points();
  inline void clear_has_event_points();
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_recent_battle_cup_victory();
  inline void clear_has_recent_battle_cup_victory();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 background_def_index_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProfileCard_Slot > slots_;
  ::google::protobuf::uint32 badge_points_;
  ::google::protobuf::uint32 event_points_;
  ::CMsgBattleCupVictory* recent_battle_cup_victory_;
  ::google::protobuf::uint32 event_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAProfileCard* default_instance_;
};
// -------------------------------------------------------------------

class CSODOTAPlayerChallenge : public ::google::protobuf::Message {
 public:
  CSODOTAPlayerChallenge();
  virtual ~CSODOTAPlayerChallenge();

  CSODOTAPlayerChallenge(const CSODOTAPlayerChallenge& from);

  inline CSODOTAPlayerChallenge& operator=(const CSODOTAPlayerChallenge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAPlayerChallenge& default_instance();

  void Swap(CSODOTAPlayerChallenge* other);

  // implements Message ----------------------------------------------

  CSODOTAPlayerChallenge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTAPlayerChallenge& from);
  void MergeFrom(const CSODOTAPlayerChallenge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CSODOTAPlayerChallenge_EFlags EFlags;
  static const EFlags eFlag_InstantRerollUncompleted = CSODOTAPlayerChallenge_EFlags_eFlag_InstantRerollUncompleted;
  static const EFlags eFlag_QuestChallenge = CSODOTAPlayerChallenge_EFlags_eFlag_QuestChallenge;
  static inline bool EFlags_IsValid(int value) {
    return CSODOTAPlayerChallenge_EFlags_IsValid(value);
  }
  static const EFlags EFlags_MIN =
    CSODOTAPlayerChallenge_EFlags_EFlags_MIN;
  static const EFlags EFlags_MAX =
    CSODOTAPlayerChallenge_EFlags_EFlags_MAX;
  static const int EFlags_ARRAYSIZE =
    CSODOTAPlayerChallenge_EFlags_EFlags_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EFlags_descriptor() {
    return CSODOTAPlayerChallenge_EFlags_descriptor();
  }
  static inline const ::std::string& EFlags_Name(EFlags value) {
    return CSODOTAPlayerChallenge_EFlags_Name(value);
  }
  static inline bool EFlags_Parse(const ::std::string& name,
      EFlags* value) {
    return CSODOTAPlayerChallenge_EFlags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 event_id = 2;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 2;
  inline ::google::protobuf::uint32 event_id() const;
  inline void set_event_id(::google::protobuf::uint32 value);

  // optional uint32 slot_id = 3;
  inline bool has_slot_id() const;
  inline void clear_slot_id();
  static const int kSlotIdFieldNumber = 3;
  inline ::google::protobuf::uint32 slot_id() const;
  inline void set_slot_id(::google::protobuf::uint32 value);

  // optional uint32 challenge_type = 4;
  inline bool has_challenge_type() const;
  inline void clear_challenge_type();
  static const int kChallengeTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 challenge_type() const;
  inline void set_challenge_type(::google::protobuf::uint32 value);

  // optional uint32 int_param_0 = 5;
  inline bool has_int_param_0() const;
  inline void clear_int_param_0();
  static const int kIntParam0FieldNumber = 5;
  inline ::google::protobuf::uint32 int_param_0() const;
  inline void set_int_param_0(::google::protobuf::uint32 value);

  // optional uint32 int_param_1 = 6;
  inline bool has_int_param_1() const;
  inline void clear_int_param_1();
  static const int kIntParam1FieldNumber = 6;
  inline ::google::protobuf::uint32 int_param_1() const;
  inline void set_int_param_1(::google::protobuf::uint32 value);

  // optional uint32 created_time = 7;
  inline bool has_created_time() const;
  inline void clear_created_time();
  static const int kCreatedTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 created_time() const;
  inline void set_created_time(::google::protobuf::uint32 value);

  // optional uint32 completed = 8;
  inline bool has_completed() const;
  inline void clear_completed();
  static const int kCompletedFieldNumber = 8;
  inline ::google::protobuf::uint32 completed() const;
  inline void set_completed(::google::protobuf::uint32 value);

  // optional uint32 sequence_id = 9;
  inline bool has_sequence_id() const;
  inline void clear_sequence_id();
  static const int kSequenceIdFieldNumber = 9;
  inline ::google::protobuf::uint32 sequence_id() const;
  inline void set_sequence_id(::google::protobuf::uint32 value);

  // optional uint32 challenge_tier = 10;
  inline bool has_challenge_tier() const;
  inline void clear_challenge_tier();
  static const int kChallengeTierFieldNumber = 10;
  inline ::google::protobuf::uint32 challenge_tier() const;
  inline void set_challenge_tier(::google::protobuf::uint32 value);

  // optional uint32 flags = 11;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 11;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // optional uint32 attempts = 12;
  inline bool has_attempts() const;
  inline void clear_attempts();
  static const int kAttemptsFieldNumber = 12;
  inline ::google::protobuf::uint32 attempts() const;
  inline void set_attempts(::google::protobuf::uint32 value);

  // optional uint32 complete_limit = 13;
  inline bool has_complete_limit() const;
  inline void clear_complete_limit();
  static const int kCompleteLimitFieldNumber = 13;
  inline ::google::protobuf::uint32 complete_limit() const;
  inline void set_complete_limit(::google::protobuf::uint32 value);

  // optional uint32 quest_rank = 14;
  inline bool has_quest_rank() const;
  inline void clear_quest_rank();
  static const int kQuestRankFieldNumber = 14;
  inline ::google::protobuf::uint32 quest_rank() const;
  inline void set_quest_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSODOTAPlayerChallenge)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_slot_id();
  inline void clear_has_slot_id();
  inline void set_has_challenge_type();
  inline void clear_has_challenge_type();
  inline void set_has_int_param_0();
  inline void clear_has_int_param_0();
  inline void set_has_int_param_1();
  inline void clear_has_int_param_1();
  inline void set_has_created_time();
  inline void clear_has_created_time();
  inline void set_has_completed();
  inline void clear_has_completed();
  inline void set_has_sequence_id();
  inline void clear_has_sequence_id();
  inline void set_has_challenge_tier();
  inline void clear_has_challenge_tier();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_attempts();
  inline void clear_has_attempts();
  inline void set_has_complete_limit();
  inline void clear_has_complete_limit();
  inline void set_has_quest_rank();
  inline void clear_has_quest_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 event_id_;
  ::google::protobuf::uint32 slot_id_;
  ::google::protobuf::uint32 challenge_type_;
  ::google::protobuf::uint32 int_param_0_;
  ::google::protobuf::uint32 int_param_1_;
  ::google::protobuf::uint32 created_time_;
  ::google::protobuf::uint32 completed_;
  ::google::protobuf::uint32 sequence_id_;
  ::google::protobuf::uint32 challenge_tier_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint32 attempts_;
  ::google::protobuf::uint32 complete_limit_;
  ::google::protobuf::uint32 quest_rank_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CSODOTAPlayerChallenge* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientToGCRerollPlayerChallenge : public ::google::protobuf::Message {
 public:
  CMsgClientToGCRerollPlayerChallenge();
  virtual ~CMsgClientToGCRerollPlayerChallenge();

  CMsgClientToGCRerollPlayerChallenge(const CMsgClientToGCRerollPlayerChallenge& from);

  inline CMsgClientToGCRerollPlayerChallenge& operator=(const CMsgClientToGCRerollPlayerChallenge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientToGCRerollPlayerChallenge& default_instance();

  void Swap(CMsgClientToGCRerollPlayerChallenge* other);

  // implements Message ----------------------------------------------

  CMsgClientToGCRerollPlayerChallenge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientToGCRerollPlayerChallenge& from);
  void MergeFrom(const CMsgClientToGCRerollPlayerChallenge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint32 event_id() const;
  inline void set_event_id(::google::protobuf::uint32 value);

  // optional uint32 sequence_id = 3;
  inline bool has_sequence_id() const;
  inline void clear_sequence_id();
  static const int kSequenceIdFieldNumber = 3;
  inline ::google::protobuf::uint32 sequence_id() const;
  inline void set_sequence_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientToGCRerollPlayerChallenge)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_sequence_id();
  inline void clear_has_sequence_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 event_id_;
  ::google::protobuf::uint32 sequence_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientToGCRerollPlayerChallenge* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCRerollPlayerChallengeResponse : public ::google::protobuf::Message {
 public:
  CMsgGCRerollPlayerChallengeResponse();
  virtual ~CMsgGCRerollPlayerChallengeResponse();

  CMsgGCRerollPlayerChallengeResponse(const CMsgGCRerollPlayerChallengeResponse& from);

  inline CMsgGCRerollPlayerChallengeResponse& operator=(const CMsgGCRerollPlayerChallengeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCRerollPlayerChallengeResponse& default_instance();

  void Swap(CMsgGCRerollPlayerChallengeResponse* other);

  // implements Message ----------------------------------------------

  CMsgGCRerollPlayerChallengeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCRerollPlayerChallengeResponse& from);
  void MergeFrom(const CMsgGCRerollPlayerChallengeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgGCRerollPlayerChallengeResponse_EResult EResult;
  static const EResult eResult_Success = CMsgGCRerollPlayerChallengeResponse_EResult_eResult_Success;
  static const EResult eResult_Dropped = CMsgGCRerollPlayerChallengeResponse_EResult_eResult_Dropped;
  static const EResult eResult_NotFound = CMsgGCRerollPlayerChallengeResponse_EResult_eResult_NotFound;
  static const EResult eResult_CantReroll = CMsgGCRerollPlayerChallengeResponse_EResult_eResult_CantReroll;
  static const EResult eResult_ServerError = CMsgGCRerollPlayerChallengeResponse_EResult_eResult_ServerError;
  static inline bool EResult_IsValid(int value) {
    return CMsgGCRerollPlayerChallengeResponse_EResult_IsValid(value);
  }
  static const EResult EResult_MIN =
    CMsgGCRerollPlayerChallengeResponse_EResult_EResult_MIN;
  static const EResult EResult_MAX =
    CMsgGCRerollPlayerChallengeResponse_EResult_EResult_MAX;
  static const int EResult_ARRAYSIZE =
    CMsgGCRerollPlayerChallengeResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EResult_descriptor() {
    return CMsgGCRerollPlayerChallengeResponse_EResult_descriptor();
  }
  static inline const ::std::string& EResult_Name(EResult value) {
    return CMsgGCRerollPlayerChallengeResponse_EResult_Name(value);
  }
  static inline bool EResult_Parse(const ::std::string& name,
      EResult* value) {
    return CMsgGCRerollPlayerChallengeResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::CMsgGCRerollPlayerChallengeResponse_EResult result() const;
  inline void set_result(::CMsgGCRerollPlayerChallengeResponse_EResult value);

  // @@protoc_insertion_point(class_scope:CMsgGCRerollPlayerChallengeResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int result_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCRerollPlayerChallengeResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCTopCustomGamesList : public ::google::protobuf::Message {
 public:
  CMsgGCTopCustomGamesList();
  virtual ~CMsgGCTopCustomGamesList();

  CMsgGCTopCustomGamesList(const CMsgGCTopCustomGamesList& from);

  inline CMsgGCTopCustomGamesList& operator=(const CMsgGCTopCustomGamesList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCTopCustomGamesList& default_instance();

  void Swap(CMsgGCTopCustomGamesList* other);

  // implements Message ----------------------------------------------

  CMsgGCTopCustomGamesList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCTopCustomGamesList& from);
  void MergeFrom(const CMsgGCTopCustomGamesList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 top_custom_games = 1;
  inline int top_custom_games_size() const;
  inline void clear_top_custom_games();
  static const int kTopCustomGamesFieldNumber = 1;
  inline ::google::protobuf::uint64 top_custom_games(int index) const;
  inline void set_top_custom_games(int index, ::google::protobuf::uint64 value);
  inline void add_top_custom_games(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      top_custom_games() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_top_custom_games();

  // optional uint64 game_of_the_day = 2;
  inline bool has_game_of_the_day() const;
  inline void clear_game_of_the_day();
  static const int kGameOfTheDayFieldNumber = 2;
  inline ::google::protobuf::uint64 game_of_the_day() const;
  inline void set_game_of_the_day(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgGCTopCustomGamesList)
 private:
  inline void set_has_game_of_the_day();
  inline void clear_has_game_of_the_day();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > top_custom_games_;
  ::google::protobuf::uint64 game_of_the_day_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCTopCustomGamesList* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_TeamDetails : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_TeamDetails();
  virtual ~CMsgDOTARealtimeGameStats_TeamDetails();

  CMsgDOTARealtimeGameStats_TeamDetails(const CMsgDOTARealtimeGameStats_TeamDetails& from);

  inline CMsgDOTARealtimeGameStats_TeamDetails& operator=(const CMsgDOTARealtimeGameStats_TeamDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_TeamDetails& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_TeamDetails* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_TeamDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_TeamDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_TeamDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 team_number = 1;
  inline bool has_team_number() const;
  inline void clear_team_number();
  static const int kTeamNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 team_number() const;
  inline void set_team_number(::google::protobuf::uint32 value);

  // optional uint32 team_id = 2;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // optional string team_name = 3;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 3;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const char* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  inline void set_allocated_team_name(::std::string* team_name);

  // optional fixed64 team_logo = 4;
  inline bool has_team_logo() const;
  inline void clear_team_logo();
  static const int kTeamLogoFieldNumber = 4;
  inline ::google::protobuf::uint64 team_logo() const;
  inline void set_team_logo(::google::protobuf::uint64 value);

  // optional uint32 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // repeated .CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 6;
  inline const ::CMsgDOTARealtimeGameStats_PlayerDetails& players(int index) const;
  inline ::CMsgDOTARealtimeGameStats_PlayerDetails* mutable_players(int index);
  inline ::CMsgDOTARealtimeGameStats_PlayerDetails* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PlayerDetails >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PlayerDetails >*
      mutable_players();

  // optional bool only_team = 7;
  inline bool has_only_team() const;
  inline void clear_only_team();
  static const int kOnlyTeamFieldNumber = 7;
  inline bool only_team() const;
  inline void set_only_team(bool value);

  // optional uint32 cheers = 8;
  inline bool has_cheers() const;
  inline void clear_cheers();
  static const int kCheersFieldNumber = 8;
  inline ::google::protobuf::uint32 cheers() const;
  inline void set_cheers(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.TeamDetails)
 private:
  inline void set_has_team_number();
  inline void clear_has_team_number();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_team_name();
  inline void clear_has_team_name();
  inline void set_has_team_logo();
  inline void clear_has_team_logo();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_only_team();
  inline void clear_has_only_team();
  inline void set_has_cheers();
  inline void clear_has_cheers();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 team_number_;
  ::google::protobuf::uint32 team_id_;
  ::std::string* team_name_;
  ::google::protobuf::uint64 team_logo_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PlayerDetails > players_;
  ::google::protobuf::uint32 score_;
  bool only_team_;
  ::google::protobuf::uint32 cheers_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_TeamDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_ItemDetails : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_ItemDetails();
  virtual ~CMsgDOTARealtimeGameStats_ItemDetails();

  CMsgDOTARealtimeGameStats_ItemDetails(const CMsgDOTARealtimeGameStats_ItemDetails& from);

  inline CMsgDOTARealtimeGameStats_ItemDetails& operator=(const CMsgDOTARealtimeGameStats_ItemDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_ItemDetails& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_ItemDetails* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_ItemDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_ItemDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_ItemDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional bool sold = 4;
  inline bool has_sold() const;
  inline void clear_sold();
  static const int kSoldFieldNumber = 4;
  inline bool sold() const;
  inline void set_sold(bool value);

  // optional uint32 stackcount = 5;
  inline bool has_stackcount() const;
  inline void clear_stackcount();
  static const int kStackcountFieldNumber = 5;
  inline ::google::protobuf::uint32 stackcount() const;
  inline void set_stackcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.ItemDetails)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_sold();
  inline void clear_has_sold();
  inline void set_has_stackcount();
  inline void clear_has_stackcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 time_;
  bool sold_;
  ::google::protobuf::uint32 stackcount_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_ItemDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_AbilityDetails : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_AbilityDetails();
  virtual ~CMsgDOTARealtimeGameStats_AbilityDetails();

  CMsgDOTARealtimeGameStats_AbilityDetails(const CMsgDOTARealtimeGameStats_AbilityDetails& from);

  inline CMsgDOTARealtimeGameStats_AbilityDetails& operator=(const CMsgDOTARealtimeGameStats_AbilityDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_AbilityDetails& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_AbilityDetails* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_AbilityDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_AbilityDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_AbilityDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional float cooldown = 4;
  inline bool has_cooldown() const;
  inline void clear_cooldown();
  static const int kCooldownFieldNumber = 4;
  inline float cooldown() const;
  inline void set_cooldown(float value);

  // optional float cooldown_max = 5;
  inline bool has_cooldown_max() const;
  inline void clear_cooldown_max();
  static const int kCooldownMaxFieldNumber = 5;
  inline float cooldown_max() const;
  inline void set_cooldown_max(float value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.AbilityDetails)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_cooldown();
  inline void clear_has_cooldown();
  inline void set_has_cooldown_max();
  inline void clear_has_cooldown_max();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 level_;
  float cooldown_;
  float cooldown_max_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_AbilityDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_HeroToHeroStats : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_HeroToHeroStats();
  virtual ~CMsgDOTARealtimeGameStats_HeroToHeroStats();

  CMsgDOTARealtimeGameStats_HeroToHeroStats(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from);

  inline CMsgDOTARealtimeGameStats_HeroToHeroStats& operator=(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_HeroToHeroStats& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_HeroToHeroStats* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_HeroToHeroStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 victimid = 1;
  inline bool has_victimid() const;
  inline void clear_victimid();
  static const int kVictimidFieldNumber = 1;
  inline ::google::protobuf::uint32 victimid() const;
  inline void set_victimid(::google::protobuf::uint32 value);

  // optional uint32 kills = 2;
  inline bool has_kills() const;
  inline void clear_kills();
  static const int kKillsFieldNumber = 2;
  inline ::google::protobuf::uint32 kills() const;
  inline void set_kills(::google::protobuf::uint32 value);

  // optional uint32 assists = 3;
  inline bool has_assists() const;
  inline void clear_assists();
  static const int kAssistsFieldNumber = 3;
  inline ::google::protobuf::uint32 assists() const;
  inline void set_assists(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.HeroToHeroStats)
 private:
  inline void set_has_victimid();
  inline void clear_has_victimid();
  inline void set_has_kills();
  inline void clear_has_kills();
  inline void set_has_assists();
  inline void clear_has_assists();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 victimid_;
  ::google::protobuf::uint32 kills_;
  ::google::protobuf::uint32 assists_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_HeroToHeroStats* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_AbilityList : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_AbilityList();
  virtual ~CMsgDOTARealtimeGameStats_AbilityList();

  CMsgDOTARealtimeGameStats_AbilityList(const CMsgDOTARealtimeGameStats_AbilityList& from);

  inline CMsgDOTARealtimeGameStats_AbilityList& operator=(const CMsgDOTARealtimeGameStats_AbilityList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_AbilityList& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_AbilityList* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_AbilityList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_AbilityList& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_AbilityList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 id = 1;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::uint32 value);
  inline void add_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id();

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.AbilityList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_AbilityList* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_PlayerDetails : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_PlayerDetails();
  virtual ~CMsgDOTARealtimeGameStats_PlayerDetails();

  CMsgDOTARealtimeGameStats_PlayerDetails(const CMsgDOTARealtimeGameStats_PlayerDetails& from);

  inline CMsgDOTARealtimeGameStats_PlayerDetails& operator=(const CMsgDOTARealtimeGameStats_PlayerDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_PlayerDetails& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_PlayerDetails* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_PlayerDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_PlayerDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_PlayerDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 accountid = 1;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // optional uint32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 team = 4;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 4;
  inline ::google::protobuf::uint32 team() const;
  inline void set_team(::google::protobuf::uint32 value);

  // optional uint32 heroid = 5;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroidFieldNumber = 5;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint32 healthpoints = 6;
  inline bool has_healthpoints() const;
  inline void clear_healthpoints();
  static const int kHealthpointsFieldNumber = 6;
  inline ::google::protobuf::uint32 healthpoints() const;
  inline void set_healthpoints(::google::protobuf::uint32 value);

  // optional uint32 maxhealthpoints = 7;
  inline bool has_maxhealthpoints() const;
  inline void clear_maxhealthpoints();
  static const int kMaxhealthpointsFieldNumber = 7;
  inline ::google::protobuf::uint32 maxhealthpoints() const;
  inline void set_maxhealthpoints(::google::protobuf::uint32 value);

  // optional float healthregenrate = 8;
  inline bool has_healthregenrate() const;
  inline void clear_healthregenrate();
  static const int kHealthregenrateFieldNumber = 8;
  inline float healthregenrate() const;
  inline void set_healthregenrate(float value);

  // optional uint32 manapoints = 9;
  inline bool has_manapoints() const;
  inline void clear_manapoints();
  static const int kManapointsFieldNumber = 9;
  inline ::google::protobuf::uint32 manapoints() const;
  inline void set_manapoints(::google::protobuf::uint32 value);

  // optional uint32 maxmanapoints = 10;
  inline bool has_maxmanapoints() const;
  inline void clear_maxmanapoints();
  static const int kMaxmanapointsFieldNumber = 10;
  inline ::google::protobuf::uint32 maxmanapoints() const;
  inline void set_maxmanapoints(::google::protobuf::uint32 value);

  // optional float manaregenrate = 11;
  inline bool has_manaregenrate() const;
  inline void clear_manaregenrate();
  static const int kManaregenrateFieldNumber = 11;
  inline float manaregenrate() const;
  inline void set_manaregenrate(float value);

  // optional uint32 base_strength = 12;
  inline bool has_base_strength() const;
  inline void clear_base_strength();
  static const int kBaseStrengthFieldNumber = 12;
  inline ::google::protobuf::uint32 base_strength() const;
  inline void set_base_strength(::google::protobuf::uint32 value);

  // optional uint32 base_agility = 13;
  inline bool has_base_agility() const;
  inline void clear_base_agility();
  static const int kBaseAgilityFieldNumber = 13;
  inline ::google::protobuf::uint32 base_agility() const;
  inline void set_base_agility(::google::protobuf::uint32 value);

  // optional uint32 base_intelligence = 14;
  inline bool has_base_intelligence() const;
  inline void clear_base_intelligence();
  static const int kBaseIntelligenceFieldNumber = 14;
  inline ::google::protobuf::uint32 base_intelligence() const;
  inline void set_base_intelligence(::google::protobuf::uint32 value);

  // optional int32 base_armor = 15;
  inline bool has_base_armor() const;
  inline void clear_base_armor();
  static const int kBaseArmorFieldNumber = 15;
  inline ::google::protobuf::int32 base_armor() const;
  inline void set_base_armor(::google::protobuf::int32 value);

  // optional uint32 base_movespeed = 16;
  inline bool has_base_movespeed() const;
  inline void clear_base_movespeed();
  static const int kBaseMovespeedFieldNumber = 16;
  inline ::google::protobuf::uint32 base_movespeed() const;
  inline void set_base_movespeed(::google::protobuf::uint32 value);

  // optional uint32 base_damage = 17;
  inline bool has_base_damage() const;
  inline void clear_base_damage();
  static const int kBaseDamageFieldNumber = 17;
  inline ::google::protobuf::uint32 base_damage() const;
  inline void set_base_damage(::google::protobuf::uint32 value);

  // optional uint32 strength = 18;
  inline bool has_strength() const;
  inline void clear_strength();
  static const int kStrengthFieldNumber = 18;
  inline ::google::protobuf::uint32 strength() const;
  inline void set_strength(::google::protobuf::uint32 value);

  // optional uint32 agility = 19;
  inline bool has_agility() const;
  inline void clear_agility();
  static const int kAgilityFieldNumber = 19;
  inline ::google::protobuf::uint32 agility() const;
  inline void set_agility(::google::protobuf::uint32 value);

  // optional uint32 intelligence = 20;
  inline bool has_intelligence() const;
  inline void clear_intelligence();
  static const int kIntelligenceFieldNumber = 20;
  inline ::google::protobuf::uint32 intelligence() const;
  inline void set_intelligence(::google::protobuf::uint32 value);

  // optional int32 armor = 21;
  inline bool has_armor() const;
  inline void clear_armor();
  static const int kArmorFieldNumber = 21;
  inline ::google::protobuf::int32 armor() const;
  inline void set_armor(::google::protobuf::int32 value);

  // optional uint32 movespeed = 22;
  inline bool has_movespeed() const;
  inline void clear_movespeed();
  static const int kMovespeedFieldNumber = 22;
  inline ::google::protobuf::uint32 movespeed() const;
  inline void set_movespeed(::google::protobuf::uint32 value);

  // optional uint32 damage = 23;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 23;
  inline ::google::protobuf::uint32 damage() const;
  inline void set_damage(::google::protobuf::uint32 value);

  // optional uint32 hero_damage = 24;
  inline bool has_hero_damage() const;
  inline void clear_hero_damage();
  static const int kHeroDamageFieldNumber = 24;
  inline ::google::protobuf::uint32 hero_damage() const;
  inline void set_hero_damage(::google::protobuf::uint32 value);

  // optional uint32 tower_damage = 25;
  inline bool has_tower_damage() const;
  inline void clear_tower_damage();
  static const int kTowerDamageFieldNumber = 25;
  inline ::google::protobuf::uint32 tower_damage() const;
  inline void set_tower_damage(::google::protobuf::uint32 value);

  // repeated .CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
  inline int abilities_size() const;
  inline void clear_abilities();
  static const int kAbilitiesFieldNumber = 26;
  inline const ::CMsgDOTARealtimeGameStats_AbilityDetails& abilities(int index) const;
  inline ::CMsgDOTARealtimeGameStats_AbilityDetails* mutable_abilities(int index);
  inline ::CMsgDOTARealtimeGameStats_AbilityDetails* add_abilities();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityDetails >&
      abilities() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityDetails >*
      mutable_abilities();

  // optional uint32 level = 27;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 27;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 kill_count = 28;
  inline bool has_kill_count() const;
  inline void clear_kill_count();
  static const int kKillCountFieldNumber = 28;
  inline ::google::protobuf::uint32 kill_count() const;
  inline void set_kill_count(::google::protobuf::uint32 value);

  // optional uint32 death_count = 29;
  inline bool has_death_count() const;
  inline void clear_death_count();
  static const int kDeathCountFieldNumber = 29;
  inline ::google::protobuf::uint32 death_count() const;
  inline void set_death_count(::google::protobuf::uint32 value);

  // optional uint32 assists_count = 30;
  inline bool has_assists_count() const;
  inline void clear_assists_count();
  static const int kAssistsCountFieldNumber = 30;
  inline ::google::protobuf::uint32 assists_count() const;
  inline void set_assists_count(::google::protobuf::uint32 value);

  // optional uint32 denies_count = 31;
  inline bool has_denies_count() const;
  inline void clear_denies_count();
  static const int kDeniesCountFieldNumber = 31;
  inline ::google::protobuf::uint32 denies_count() const;
  inline void set_denies_count(::google::protobuf::uint32 value);

  // optional uint32 lh_count = 32;
  inline bool has_lh_count() const;
  inline void clear_lh_count();
  static const int kLhCountFieldNumber = 32;
  inline ::google::protobuf::uint32 lh_count() const;
  inline void set_lh_count(::google::protobuf::uint32 value);

  // optional uint32 hero_healing = 33;
  inline bool has_hero_healing() const;
  inline void clear_hero_healing();
  static const int kHeroHealingFieldNumber = 33;
  inline ::google::protobuf::uint32 hero_healing() const;
  inline void set_hero_healing(::google::protobuf::uint32 value);

  // optional uint32 gold_per_min = 34;
  inline bool has_gold_per_min() const;
  inline void clear_gold_per_min();
  static const int kGoldPerMinFieldNumber = 34;
  inline ::google::protobuf::uint32 gold_per_min() const;
  inline void set_gold_per_min(::google::protobuf::uint32 value);

  // optional uint32 xp_per_min = 35;
  inline bool has_xp_per_min() const;
  inline void clear_xp_per_min();
  static const int kXpPerMinFieldNumber = 35;
  inline ::google::protobuf::uint32 xp_per_min() const;
  inline void set_xp_per_min(::google::protobuf::uint32 value);

  // optional uint32 net_gold = 36;
  inline bool has_net_gold() const;
  inline void clear_net_gold();
  static const int kNetGoldFieldNumber = 36;
  inline ::google::protobuf::uint32 net_gold() const;
  inline void set_net_gold(::google::protobuf::uint32 value);

  // optional uint32 gold = 37;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 37;
  inline ::google::protobuf::uint32 gold() const;
  inline void set_gold(::google::protobuf::uint32 value);

  // optional float x = 38;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 38;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 39;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 39;
  inline float y() const;
  inline void set_y(float value);

  // optional int32 respawn_time = 40;
  inline bool has_respawn_time() const;
  inline void clear_respawn_time();
  static const int kRespawnTimeFieldNumber = 40;
  inline ::google::protobuf::int32 respawn_time() const;
  inline void set_respawn_time(::google::protobuf::int32 value);

  // optional uint32 ultimate_cooldown = 41;
  inline bool has_ultimate_cooldown() const;
  inline void clear_ultimate_cooldown();
  static const int kUltimateCooldownFieldNumber = 41;
  inline ::google::protobuf::uint32 ultimate_cooldown() const;
  inline void set_ultimate_cooldown(::google::protobuf::uint32 value);

  // optional bool has_buyback = 42;
  inline bool has_has_buyback() const;
  inline void clear_has_buyback();
  static const int kHasBuybackFieldNumber = 42;
  inline bool has_buyback() const;
  inline void set_has_buyback(bool value);

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails items = 43;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 43;
  inline const ::CMsgDOTARealtimeGameStats_ItemDetails& items(int index) const;
  inline ::CMsgDOTARealtimeGameStats_ItemDetails* mutable_items(int index);
  inline ::CMsgDOTARealtimeGameStats_ItemDetails* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >*
      mutable_items();

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
  inline int stashitems_size() const;
  inline void clear_stashitems();
  static const int kStashitemsFieldNumber = 44;
  inline const ::CMsgDOTARealtimeGameStats_ItemDetails& stashitems(int index) const;
  inline ::CMsgDOTARealtimeGameStats_ItemDetails* mutable_stashitems(int index);
  inline ::CMsgDOTARealtimeGameStats_ItemDetails* add_stashitems();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >&
      stashitems() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >*
      mutable_stashitems();

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
  inline int itemshoppinglist_size() const;
  inline void clear_itemshoppinglist();
  static const int kItemshoppinglistFieldNumber = 45;
  inline const ::CMsgDOTARealtimeGameStats_ItemDetails& itemshoppinglist(int index) const;
  inline ::CMsgDOTARealtimeGameStats_ItemDetails* mutable_itemshoppinglist(int index);
  inline ::CMsgDOTARealtimeGameStats_ItemDetails* add_itemshoppinglist();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >&
      itemshoppinglist() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >*
      mutable_itemshoppinglist();

  // repeated .CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
  inline int levelpoints_size() const;
  inline void clear_levelpoints();
  static const int kLevelpointsFieldNumber = 46;
  inline const ::CMsgDOTARealtimeGameStats_AbilityList& levelpoints(int index) const;
  inline ::CMsgDOTARealtimeGameStats_AbilityList* mutable_levelpoints(int index);
  inline ::CMsgDOTARealtimeGameStats_AbilityList* add_levelpoints();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityList >&
      levelpoints() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityList >*
      mutable_levelpoints();

  // repeated .CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
  inline int hero_to_hero_stats_size() const;
  inline void clear_hero_to_hero_stats();
  static const int kHeroToHeroStatsFieldNumber = 47;
  inline const ::CMsgDOTARealtimeGameStats_HeroToHeroStats& hero_to_hero_stats(int index) const;
  inline ::CMsgDOTARealtimeGameStats_HeroToHeroStats* mutable_hero_to_hero_stats(int index);
  inline ::CMsgDOTARealtimeGameStats_HeroToHeroStats* add_hero_to_hero_stats();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_HeroToHeroStats >&
      hero_to_hero_stats() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_HeroToHeroStats >*
      mutable_hero_to_hero_stats();

  // optional bool has_ultimate = 48;
  inline bool has_has_ultimate() const;
  inline void clear_has_ultimate();
  static const int kHasUltimateFieldNumber = 48;
  inline bool has_ultimate() const;
  inline void set_has_ultimate(bool value);

  // optional bool has_ultimate_mana = 49;
  inline bool has_has_ultimate_mana() const;
  inline void clear_has_ultimate_mana();
  static const int kHasUltimateManaFieldNumber = 49;
  inline bool has_ultimate_mana() const;
  inline void set_has_ultimate_mana(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.PlayerDetails)
 private:
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_healthpoints();
  inline void clear_has_healthpoints();
  inline void set_has_maxhealthpoints();
  inline void clear_has_maxhealthpoints();
  inline void set_has_healthregenrate();
  inline void clear_has_healthregenrate();
  inline void set_has_manapoints();
  inline void clear_has_manapoints();
  inline void set_has_maxmanapoints();
  inline void clear_has_maxmanapoints();
  inline void set_has_manaregenrate();
  inline void clear_has_manaregenrate();
  inline void set_has_base_strength();
  inline void clear_has_base_strength();
  inline void set_has_base_agility();
  inline void clear_has_base_agility();
  inline void set_has_base_intelligence();
  inline void clear_has_base_intelligence();
  inline void set_has_base_armor();
  inline void clear_has_base_armor();
  inline void set_has_base_movespeed();
  inline void clear_has_base_movespeed();
  inline void set_has_base_damage();
  inline void clear_has_base_damage();
  inline void set_has_strength();
  inline void clear_has_strength();
  inline void set_has_agility();
  inline void clear_has_agility();
  inline void set_has_intelligence();
  inline void clear_has_intelligence();
  inline void set_has_armor();
  inline void clear_has_armor();
  inline void set_has_movespeed();
  inline void clear_has_movespeed();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_hero_damage();
  inline void clear_has_hero_damage();
  inline void set_has_tower_damage();
  inline void clear_has_tower_damage();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_kill_count();
  inline void clear_has_kill_count();
  inline void set_has_death_count();
  inline void clear_has_death_count();
  inline void set_has_assists_count();
  inline void clear_has_assists_count();
  inline void set_has_denies_count();
  inline void clear_has_denies_count();
  inline void set_has_lh_count();
  inline void clear_has_lh_count();
  inline void set_has_hero_healing();
  inline void clear_has_hero_healing();
  inline void set_has_gold_per_min();
  inline void clear_has_gold_per_min();
  inline void set_has_xp_per_min();
  inline void clear_has_xp_per_min();
  inline void set_has_net_gold();
  inline void clear_has_net_gold();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_respawn_time();
  inline void clear_has_respawn_time();
  inline void set_has_ultimate_cooldown();
  inline void clear_has_ultimate_cooldown();
  inline void set_has_has_buyback();
  inline void clear_has_has_buyback();
  inline void set_has_has_ultimate();
  inline void clear_has_has_ultimate();
  inline void set_has_has_ultimate_mana();
  inline void clear_has_has_ultimate_mana();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::uint32 accountid_;
  ::google::protobuf::uint32 playerid_;
  ::std::string* name_;
  ::google::protobuf::uint32 team_;
  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 healthpoints_;
  ::google::protobuf::uint32 maxhealthpoints_;
  float healthregenrate_;
  ::google::protobuf::uint32 manapoints_;
  ::google::protobuf::uint32 maxmanapoints_;
  float manaregenrate_;
  ::google::protobuf::uint32 base_strength_;
  ::google::protobuf::uint32 base_agility_;
  ::google::protobuf::uint32 base_intelligence_;
  ::google::protobuf::int32 base_armor_;
  ::google::protobuf::uint32 base_movespeed_;
  ::google::protobuf::uint32 base_damage_;
  ::google::protobuf::uint32 strength_;
  ::google::protobuf::uint32 agility_;
  ::google::protobuf::uint32 intelligence_;
  ::google::protobuf::int32 armor_;
  ::google::protobuf::uint32 movespeed_;
  ::google::protobuf::uint32 damage_;
  ::google::protobuf::uint32 hero_damage_;
  ::google::protobuf::uint32 tower_damage_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityDetails > abilities_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 kill_count_;
  ::google::protobuf::uint32 death_count_;
  ::google::protobuf::uint32 assists_count_;
  ::google::protobuf::uint32 denies_count_;
  ::google::protobuf::uint32 lh_count_;
  ::google::protobuf::uint32 hero_healing_;
  ::google::protobuf::uint32 gold_per_min_;
  ::google::protobuf::uint32 xp_per_min_;
  ::google::protobuf::uint32 net_gold_;
  ::google::protobuf::uint32 gold_;
  float x_;
  float y_;
  ::google::protobuf::int32 respawn_time_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails > items_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails > stashitems_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails > itemshoppinglist_;
  ::google::protobuf::uint32 ultimate_cooldown_;
  bool has_buyback_;
  bool has_ultimate_;
  bool has_ultimate_mana_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityList > levelpoints_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_HeroToHeroStats > hero_to_hero_stats_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_PlayerDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_BuildingDetails : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_BuildingDetails();
  virtual ~CMsgDOTARealtimeGameStats_BuildingDetails();

  CMsgDOTARealtimeGameStats_BuildingDetails(const CMsgDOTARealtimeGameStats_BuildingDetails& from);

  inline CMsgDOTARealtimeGameStats_BuildingDetails& operator=(const CMsgDOTARealtimeGameStats_BuildingDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_BuildingDetails& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_BuildingDetails* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_BuildingDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_BuildingDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_BuildingDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 team = 2;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 2;
  inline ::google::protobuf::uint32 team() const;
  inline void set_team(::google::protobuf::uint32 value);

  // optional float heading = 3;
  inline bool has_heading() const;
  inline void clear_heading();
  static const int kHeadingFieldNumber = 3;
  inline float heading() const;
  inline void set_heading(float value);

  // optional uint32 lane = 4;
  inline bool has_lane() const;
  inline void clear_lane();
  static const int kLaneFieldNumber = 4;
  inline ::google::protobuf::uint32 lane() const;
  inline void set_lane(::google::protobuf::uint32 value);

  // optional uint32 tier = 5;
  inline bool has_tier() const;
  inline void clear_tier();
  static const int kTierFieldNumber = 5;
  inline ::google::protobuf::uint32 tier() const;
  inline void set_tier(::google::protobuf::uint32 value);

  // optional uint32 type = 6;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional float x = 7;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 7;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 8;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 8;
  inline float y() const;
  inline void set_y(float value);

  // optional bool destroyed = 9;
  inline bool has_destroyed() const;
  inline void clear_destroyed();
  static const int kDestroyedFieldNumber = 9;
  inline bool destroyed() const;
  inline void set_destroyed(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.BuildingDetails)
 private:
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_heading();
  inline void clear_has_heading();
  inline void set_has_lane();
  inline void clear_has_lane();
  inline void set_has_tier();
  inline void clear_has_tier();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_destroyed();
  inline void clear_has_destroyed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 team_;
  float heading_;
  ::google::protobuf::uint32 lane_;
  ::google::protobuf::uint32 tier_;
  ::google::protobuf::uint32 type_;
  float x_;
  float y_;
  bool destroyed_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_BuildingDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_KillDetails : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_KillDetails();
  virtual ~CMsgDOTARealtimeGameStats_KillDetails();

  CMsgDOTARealtimeGameStats_KillDetails(const CMsgDOTARealtimeGameStats_KillDetails& from);

  inline CMsgDOTARealtimeGameStats_KillDetails& operator=(const CMsgDOTARealtimeGameStats_KillDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_KillDetails& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_KillDetails* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_KillDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_KillDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_KillDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 player_id() const;
  inline void set_player_id(::google::protobuf::uint32 value);

  // optional int32 death_time = 2;
  inline bool has_death_time() const;
  inline void clear_death_time();
  static const int kDeathTimeFieldNumber = 2;
  inline ::google::protobuf::int32 death_time() const;
  inline void set_death_time(::google::protobuf::int32 value);

  // optional uint32 killer_player_id = 3;
  inline bool has_killer_player_id() const;
  inline void clear_killer_player_id();
  static const int kKillerPlayerIdFieldNumber = 3;
  inline ::google::protobuf::uint32 killer_player_id() const;
  inline void set_killer_player_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.KillDetails)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_death_time();
  inline void clear_has_death_time();
  inline void set_has_killer_player_id();
  inline void clear_has_killer_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 player_id_;
  ::google::protobuf::int32 death_time_;
  ::google::protobuf::uint32 killer_player_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_KillDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_BroadcasterDetails : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_BroadcasterDetails();
  virtual ~CMsgDOTARealtimeGameStats_BroadcasterDetails();

  CMsgDOTARealtimeGameStats_BroadcasterDetails(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from);

  inline CMsgDOTARealtimeGameStats_BroadcasterDetails& operator=(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_BroadcasterDetails& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_BroadcasterDetails* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_BroadcasterDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 player_id() const;
  inline void set_player_id(::google::protobuf::uint32 value);

  // optional uint32 selected_hero = 2;
  inline bool has_selected_hero() const;
  inline void clear_selected_hero();
  static const int kSelectedHeroFieldNumber = 2;
  inline ::google::protobuf::uint32 selected_hero() const;
  inline void set_selected_hero(::google::protobuf::uint32 value);

  // optional uint32 selected_graph = 3;
  inline bool has_selected_graph() const;
  inline void clear_selected_graph();
  static const int kSelectedGraphFieldNumber = 3;
  inline ::google::protobuf::uint32 selected_graph() const;
  inline void set_selected_graph(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.BroadcasterDetails)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_selected_hero();
  inline void clear_has_selected_hero();
  inline void set_has_selected_graph();
  inline void clear_has_selected_graph();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 player_id_;
  ::google::protobuf::uint32 selected_hero_;
  ::google::protobuf::uint32 selected_graph_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_BroadcasterDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_PickBanDetails : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_PickBanDetails();
  virtual ~CMsgDOTARealtimeGameStats_PickBanDetails();

  CMsgDOTARealtimeGameStats_PickBanDetails(const CMsgDOTARealtimeGameStats_PickBanDetails& from);

  inline CMsgDOTARealtimeGameStats_PickBanDetails& operator=(const CMsgDOTARealtimeGameStats_PickBanDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_PickBanDetails& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_PickBanDetails* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_PickBanDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_PickBanDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_PickBanDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hero = 1;
  inline bool has_hero() const;
  inline void clear_hero();
  static const int kHeroFieldNumber = 1;
  inline ::google::protobuf::uint32 hero() const;
  inline void set_hero(::google::protobuf::uint32 value);

  // optional uint32 team = 2;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 2;
  inline ::google::protobuf::uint32 team() const;
  inline void set_team(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.PickBanDetails)
 private:
  inline void set_has_hero();
  inline void clear_has_hero();
  inline void set_has_team();
  inline void clear_has_team();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hero_;
  ::google::protobuf::uint32 team_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_PickBanDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_MatchDetails : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_MatchDetails();
  virtual ~CMsgDOTARealtimeGameStats_MatchDetails();

  CMsgDOTARealtimeGameStats_MatchDetails(const CMsgDOTARealtimeGameStats_MatchDetails& from);

  inline CMsgDOTARealtimeGameStats_MatchDetails& operator=(const CMsgDOTARealtimeGameStats_MatchDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_MatchDetails& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_MatchDetails* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_MatchDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_MatchDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_MatchDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 server_steam_id = 1;
  inline bool has_server_steam_id() const;
  inline void clear_server_steam_id();
  static const int kServerSteamIdFieldNumber = 1;
  inline ::google::protobuf::uint64 server_steam_id() const;
  inline void set_server_steam_id(::google::protobuf::uint64 value);

  // optional uint64 matchid = 2;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 2;
  inline ::google::protobuf::uint64 matchid() const;
  inline void set_matchid(::google::protobuf::uint64 value);

  // optional uint32 timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // optional float time_of_day = 4;
  inline bool has_time_of_day() const;
  inline void clear_time_of_day();
  static const int kTimeOfDayFieldNumber = 4;
  inline float time_of_day() const;
  inline void set_time_of_day(float value);

  // optional bool is_nightstalker_night = 5;
  inline bool has_is_nightstalker_night() const;
  inline void clear_is_nightstalker_night();
  static const int kIsNightstalkerNightFieldNumber = 5;
  inline bool is_nightstalker_night() const;
  inline void set_is_nightstalker_night(bool value);

  // optional int32 game_time = 6;
  inline bool has_game_time() const;
  inline void clear_game_time();
  static const int kGameTimeFieldNumber = 6;
  inline ::google::protobuf::int32 game_time() const;
  inline void set_game_time(::google::protobuf::int32 value);

  // optional uint32 teamid_radiant = 8;
  inline bool has_teamid_radiant() const;
  inline void clear_teamid_radiant();
  static const int kTeamidRadiantFieldNumber = 8;
  inline ::google::protobuf::uint32 teamid_radiant() const;
  inline void set_teamid_radiant(::google::protobuf::uint32 value);

  // optional uint32 teamid_dire = 9;
  inline bool has_teamid_dire() const;
  inline void clear_teamid_dire();
  static const int kTeamidDireFieldNumber = 9;
  inline ::google::protobuf::uint32 teamid_dire() const;
  inline void set_teamid_dire(::google::protobuf::uint32 value);

  // repeated .CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
  inline int picks_size() const;
  inline void clear_picks();
  static const int kPicksFieldNumber = 10;
  inline const ::CMsgDOTARealtimeGameStats_PickBanDetails& picks(int index) const;
  inline ::CMsgDOTARealtimeGameStats_PickBanDetails* mutable_picks(int index);
  inline ::CMsgDOTARealtimeGameStats_PickBanDetails* add_picks();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >&
      picks() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >*
      mutable_picks();

  // repeated .CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
  inline int bans_size() const;
  inline void clear_bans();
  static const int kBansFieldNumber = 11;
  inline const ::CMsgDOTARealtimeGameStats_PickBanDetails& bans(int index) const;
  inline ::CMsgDOTARealtimeGameStats_PickBanDetails* mutable_bans(int index);
  inline ::CMsgDOTARealtimeGameStats_PickBanDetails* add_bans();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >&
      bans() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >*
      mutable_bans();

  // repeated .CMsgDOTARealtimeGameStats.KillDetails kills = 12;
  inline int kills_size() const;
  inline void clear_kills();
  static const int kKillsFieldNumber = 12;
  inline const ::CMsgDOTARealtimeGameStats_KillDetails& kills(int index) const;
  inline ::CMsgDOTARealtimeGameStats_KillDetails* mutable_kills(int index);
  inline ::CMsgDOTARealtimeGameStats_KillDetails* add_kills();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_KillDetails >&
      kills() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_KillDetails >*
      mutable_kills();

  // repeated .CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
  inline int broadcasters_size() const;
  inline void clear_broadcasters();
  static const int kBroadcastersFieldNumber = 13;
  inline const ::CMsgDOTARealtimeGameStats_BroadcasterDetails& broadcasters(int index) const;
  inline ::CMsgDOTARealtimeGameStats_BroadcasterDetails* mutable_broadcasters(int index);
  inline ::CMsgDOTARealtimeGameStats_BroadcasterDetails* add_broadcasters();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BroadcasterDetails >&
      broadcasters() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BroadcasterDetails >*
      mutable_broadcasters();

  // optional uint32 game_mode = 14;
  inline bool has_game_mode() const;
  inline void clear_game_mode();
  static const int kGameModeFieldNumber = 14;
  inline ::google::protobuf::uint32 game_mode() const;
  inline void set_game_mode(::google::protobuf::uint32 value);

  // optional uint32 league_id = 15;
  inline bool has_league_id() const;
  inline void clear_league_id();
  static const int kLeagueIdFieldNumber = 15;
  inline ::google::protobuf::uint32 league_id() const;
  inline void set_league_id(::google::protobuf::uint32 value);

  // optional bool single_team = 16;
  inline bool has_single_team() const;
  inline void clear_single_team();
  static const int kSingleTeamFieldNumber = 16;
  inline bool single_team() const;
  inline void set_single_team(bool value);

  // optional uint32 cheers_peak = 17;
  inline bool has_cheers_peak() const;
  inline void clear_cheers_peak();
  static const int kCheersPeakFieldNumber = 17;
  inline ::google::protobuf::uint32 cheers_peak() const;
  inline void set_cheers_peak(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.MatchDetails)
 private:
  inline void set_has_server_steam_id();
  inline void clear_has_server_steam_id();
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_time_of_day();
  inline void clear_has_time_of_day();
  inline void set_has_is_nightstalker_night();
  inline void clear_has_is_nightstalker_night();
  inline void set_has_game_time();
  inline void clear_has_game_time();
  inline void set_has_teamid_radiant();
  inline void clear_has_teamid_radiant();
  inline void set_has_teamid_dire();
  inline void clear_has_teamid_dire();
  inline void set_has_game_mode();
  inline void clear_has_game_mode();
  inline void set_has_league_id();
  inline void clear_has_league_id();
  inline void set_has_single_team();
  inline void clear_has_single_team();
  inline void set_has_cheers_peak();
  inline void clear_has_cheers_peak();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 server_steam_id_;
  ::google::protobuf::uint64 matchid_;
  ::google::protobuf::uint32 timestamp_;
  float time_of_day_;
  ::google::protobuf::int32 game_time_;
  ::google::protobuf::uint32 teamid_radiant_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails > picks_;
  ::google::protobuf::uint32 teamid_dire_;
  bool is_nightstalker_night_;
  bool single_team_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails > bans_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_KillDetails > kills_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BroadcasterDetails > broadcasters_;
  ::google::protobuf::uint32 game_mode_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 cheers_peak_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_MatchDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_GraphData_LocationStats : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_GraphData_LocationStats();
  virtual ~CMsgDOTARealtimeGameStats_GraphData_LocationStats();

  CMsgDOTARealtimeGameStats_GraphData_LocationStats(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from);

  inline CMsgDOTARealtimeGameStats_GraphData_LocationStats& operator=(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_GraphData_LocationStats& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_GraphData_LocationStats* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_GraphData_LocationStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 stats = 1;
  inline int stats_size() const;
  inline void clear_stats();
  static const int kStatsFieldNumber = 1;
  inline ::google::protobuf::int32 stats(int index) const;
  inline void set_stats(int index, ::google::protobuf::int32 value);
  inline void add_stats(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      stats() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_stats();

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > stats_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_GraphData_LocationStats* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats();
  virtual ~CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats();

  CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from);

  inline CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& operator=(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
  inline int loc_stats_size() const;
  inline void clear_loc_stats();
  static const int kLocStatsFieldNumber = 1;
  inline const ::CMsgDOTARealtimeGameStats_GraphData_LocationStats& loc_stats(int index) const;
  inline ::CMsgDOTARealtimeGameStats_GraphData_LocationStats* mutable_loc_stats(int index);
  inline ::CMsgDOTARealtimeGameStats_GraphData_LocationStats* add_loc_stats();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_LocationStats >&
      loc_stats() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_LocationStats >*
      mutable_loc_stats();

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_LocationStats > loc_stats_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_GraphData : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats_GraphData();
  virtual ~CMsgDOTARealtimeGameStats_GraphData();

  CMsgDOTARealtimeGameStats_GraphData(const CMsgDOTARealtimeGameStats_GraphData& from);

  inline CMsgDOTARealtimeGameStats_GraphData& operator=(const CMsgDOTARealtimeGameStats_GraphData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats_GraphData& default_instance();

  void Swap(CMsgDOTARealtimeGameStats_GraphData* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_GraphData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats_GraphData& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats_GraphData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTARealtimeGameStats_GraphData_LocationStats LocationStats;
  typedef CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats TeamLocationStats;

  typedef CMsgDOTARealtimeGameStats_GraphData_eStat eStat;
  static const eStat CreepGoldEarned = CMsgDOTARealtimeGameStats_GraphData_eStat_CreepGoldEarned;
  static const eStat KillGoldEarned = CMsgDOTARealtimeGameStats_GraphData_eStat_KillGoldEarned;
  static const eStat DeathAndBuybackGoldLost = CMsgDOTARealtimeGameStats_GraphData_eStat_DeathAndBuybackGoldLost;
  static const eStat XPEarned = CMsgDOTARealtimeGameStats_GraphData_eStat_XPEarned;
  static inline bool eStat_IsValid(int value) {
    return CMsgDOTARealtimeGameStats_GraphData_eStat_IsValid(value);
  }
  static const eStat eStat_MIN =
    CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_MIN;
  static const eStat eStat_MAX =
    CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_MAX;
  static const int eStat_ARRAYSIZE =
    CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eStat_descriptor() {
    return CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor();
  }
  static inline const ::std::string& eStat_Name(eStat value) {
    return CMsgDOTARealtimeGameStats_GraphData_eStat_Name(value);
  }
  static inline bool eStat_Parse(const ::std::string& name,
      eStat* value) {
    return CMsgDOTARealtimeGameStats_GraphData_eStat_Parse(name, value);
  }

  typedef CMsgDOTARealtimeGameStats_GraphData_eLocation eLocation;
  static const eLocation BotLane = CMsgDOTARealtimeGameStats_GraphData_eLocation_BotLane;
  static const eLocation MidLane = CMsgDOTARealtimeGameStats_GraphData_eLocation_MidLane;
  static const eLocation TopLane = CMsgDOTARealtimeGameStats_GraphData_eLocation_TopLane;
  static const eLocation Jungle = CMsgDOTARealtimeGameStats_GraphData_eLocation_Jungle;
  static const eLocation Ancients = CMsgDOTARealtimeGameStats_GraphData_eLocation_Ancients;
  static const eLocation Other = CMsgDOTARealtimeGameStats_GraphData_eLocation_Other;
  static inline bool eLocation_IsValid(int value) {
    return CMsgDOTARealtimeGameStats_GraphData_eLocation_IsValid(value);
  }
  static const eLocation eLocation_MIN =
    CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_MIN;
  static const eLocation eLocation_MAX =
    CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_MAX;
  static const int eLocation_ARRAYSIZE =
    CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eLocation_descriptor() {
    return CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor();
  }
  static inline const ::std::string& eLocation_Name(eLocation value) {
    return CMsgDOTARealtimeGameStats_GraphData_eLocation_Name(value);
  }
  static inline bool eLocation_Parse(const ::std::string& name,
      eLocation* value) {
    return CMsgDOTARealtimeGameStats_GraphData_eLocation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 graph_gold = 1;
  inline int graph_gold_size() const;
  inline void clear_graph_gold();
  static const int kGraphGoldFieldNumber = 1;
  inline ::google::protobuf::int32 graph_gold(int index) const;
  inline void set_graph_gold(int index, ::google::protobuf::int32 value);
  inline void add_graph_gold(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      graph_gold() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_graph_gold();

  // repeated int32 graph_xp = 2;
  inline int graph_xp_size() const;
  inline void clear_graph_xp();
  static const int kGraphXpFieldNumber = 2;
  inline ::google::protobuf::int32 graph_xp(int index) const;
  inline void set_graph_xp(int index, ::google::protobuf::int32 value);
  inline void add_graph_xp(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      graph_xp() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_graph_xp();

  // repeated int32 graph_kill = 3;
  inline int graph_kill_size() const;
  inline void clear_graph_kill();
  static const int kGraphKillFieldNumber = 3;
  inline ::google::protobuf::int32 graph_kill(int index) const;
  inline void set_graph_kill(int index, ::google::protobuf::int32 value);
  inline void add_graph_kill(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      graph_kill() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_graph_kill();

  // repeated int32 graph_tower = 4;
  inline int graph_tower_size() const;
  inline void clear_graph_tower();
  static const int kGraphTowerFieldNumber = 4;
  inline ::google::protobuf::int32 graph_tower(int index) const;
  inline void set_graph_tower(int index, ::google::protobuf::int32 value);
  inline void add_graph_tower(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      graph_tower() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_graph_tower();

  // repeated int32 graph_rax = 5;
  inline int graph_rax_size() const;
  inline void clear_graph_rax();
  static const int kGraphRaxFieldNumber = 5;
  inline ::google::protobuf::int32 graph_rax(int index) const;
  inline void set_graph_rax(int index, ::google::protobuf::int32 value);
  inline void add_graph_rax(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      graph_rax() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_graph_rax();

  // repeated .CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
  inline int team_loc_stats_size() const;
  inline void clear_team_loc_stats();
  static const int kTeamLocStatsFieldNumber = 6;
  inline const ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& team_loc_stats(int index) const;
  inline ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* mutable_team_loc_stats(int index);
  inline ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* add_team_loc_stats();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats >&
      team_loc_stats() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats >*
      mutable_team_loc_stats();

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.GraphData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > graph_gold_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > graph_xp_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > graph_kill_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > graph_tower_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > graph_rax_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats > team_loc_stats_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats_GraphData* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStats();
  virtual ~CMsgDOTARealtimeGameStats();

  CMsgDOTARealtimeGameStats(const CMsgDOTARealtimeGameStats& from);

  inline CMsgDOTARealtimeGameStats& operator=(const CMsgDOTARealtimeGameStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStats& default_instance();

  void Swap(CMsgDOTARealtimeGameStats* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStats& from);
  void MergeFrom(const CMsgDOTARealtimeGameStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTARealtimeGameStats_TeamDetails TeamDetails;
  typedef CMsgDOTARealtimeGameStats_ItemDetails ItemDetails;
  typedef CMsgDOTARealtimeGameStats_AbilityDetails AbilityDetails;
  typedef CMsgDOTARealtimeGameStats_HeroToHeroStats HeroToHeroStats;
  typedef CMsgDOTARealtimeGameStats_AbilityList AbilityList;
  typedef CMsgDOTARealtimeGameStats_PlayerDetails PlayerDetails;
  typedef CMsgDOTARealtimeGameStats_BuildingDetails BuildingDetails;
  typedef CMsgDOTARealtimeGameStats_KillDetails KillDetails;
  typedef CMsgDOTARealtimeGameStats_BroadcasterDetails BroadcasterDetails;
  typedef CMsgDOTARealtimeGameStats_PickBanDetails PickBanDetails;
  typedef CMsgDOTARealtimeGameStats_MatchDetails MatchDetails;
  typedef CMsgDOTARealtimeGameStats_GraphData GraphData;

  // accessors -------------------------------------------------------

  // optional .CMsgDOTARealtimeGameStats.MatchDetails match = 1;
  inline bool has_match() const;
  inline void clear_match();
  static const int kMatchFieldNumber = 1;
  inline const ::CMsgDOTARealtimeGameStats_MatchDetails& match() const;
  inline ::CMsgDOTARealtimeGameStats_MatchDetails* mutable_match();
  inline ::CMsgDOTARealtimeGameStats_MatchDetails* release_match();
  inline void set_allocated_match(::CMsgDOTARealtimeGameStats_MatchDetails* match);

  // repeated .CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
  inline int teams_size() const;
  inline void clear_teams();
  static const int kTeamsFieldNumber = 2;
  inline const ::CMsgDOTARealtimeGameStats_TeamDetails& teams(int index) const;
  inline ::CMsgDOTARealtimeGameStats_TeamDetails* mutable_teams(int index);
  inline ::CMsgDOTARealtimeGameStats_TeamDetails* add_teams();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_TeamDetails >&
      teams() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_TeamDetails >*
      mutable_teams();

  // repeated .CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
  inline int buildings_size() const;
  inline void clear_buildings();
  static const int kBuildingsFieldNumber = 3;
  inline const ::CMsgDOTARealtimeGameStats_BuildingDetails& buildings(int index) const;
  inline ::CMsgDOTARealtimeGameStats_BuildingDetails* mutable_buildings(int index);
  inline ::CMsgDOTARealtimeGameStats_BuildingDetails* add_buildings();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BuildingDetails >&
      buildings() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BuildingDetails >*
      mutable_buildings();

  // optional .CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
  inline bool has_graph_data() const;
  inline void clear_graph_data();
  static const int kGraphDataFieldNumber = 4;
  inline const ::CMsgDOTARealtimeGameStats_GraphData& graph_data() const;
  inline ::CMsgDOTARealtimeGameStats_GraphData* mutable_graph_data();
  inline ::CMsgDOTARealtimeGameStats_GraphData* release_graph_data();
  inline void set_allocated_graph_data(::CMsgDOTARealtimeGameStats_GraphData* graph_data);

  // optional bool delta_frame = 5;
  inline bool has_delta_frame() const;
  inline void clear_delta_frame();
  static const int kDeltaFrameFieldNumber = 5;
  inline bool delta_frame() const;
  inline void set_delta_frame(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats)
 private:
  inline void set_has_match();
  inline void clear_has_match();
  inline void set_has_graph_data();
  inline void clear_has_graph_data();
  inline void set_has_delta_frame();
  inline void clear_has_delta_frame();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgDOTARealtimeGameStats_MatchDetails* match_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_TeamDetails > teams_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BuildingDetails > buildings_;
  ::CMsgDOTARealtimeGameStats_GraphData* graph_data_;
  bool delta_frame_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStats* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStatsTerse_TeamDetails : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStatsTerse_TeamDetails();
  virtual ~CMsgDOTARealtimeGameStatsTerse_TeamDetails();

  CMsgDOTARealtimeGameStatsTerse_TeamDetails(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from);

  inline CMsgDOTARealtimeGameStatsTerse_TeamDetails& operator=(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStatsTerse_TeamDetails& default_instance();

  void Swap(CMsgDOTARealtimeGameStatsTerse_TeamDetails* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStatsTerse_TeamDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 team_number = 1;
  inline bool has_team_number() const;
  inline void clear_team_number();
  static const int kTeamNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 team_number() const;
  inline void set_team_number(::google::protobuf::uint32 value);

  // optional uint32 team_id = 2;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // optional string team_name = 3;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 3;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const char* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  inline void set_allocated_team_name(::std::string* team_name);

  // optional fixed64 team_logo = 4;
  inline bool has_team_logo() const;
  inline void clear_team_logo();
  static const int kTeamLogoFieldNumber = 4;
  inline ::google::protobuf::uint64 team_logo() const;
  inline void set_team_logo(::google::protobuf::uint64 value);

  // optional uint32 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // repeated .CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 6;
  inline const ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails& players(int index) const;
  inline ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails* mutable_players(int index);
  inline ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails >*
      mutable_players();

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
 private:
  inline void set_has_team_number();
  inline void clear_has_team_number();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_team_name();
  inline void clear_has_team_name();
  inline void set_has_team_logo();
  inline void clear_has_team_logo();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 team_number_;
  ::google::protobuf::uint32 team_id_;
  ::std::string* team_name_;
  ::google::protobuf::uint64 team_logo_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails > players_;
  ::google::protobuf::uint32 score_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStatsTerse_TeamDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStatsTerse_PlayerDetails : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStatsTerse_PlayerDetails();
  virtual ~CMsgDOTARealtimeGameStatsTerse_PlayerDetails();

  CMsgDOTARealtimeGameStatsTerse_PlayerDetails(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from);

  inline CMsgDOTARealtimeGameStatsTerse_PlayerDetails& operator=(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& default_instance();

  void Swap(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStatsTerse_PlayerDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 accountid = 1;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // optional uint32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 team = 4;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 4;
  inline ::google::protobuf::uint32 team() const;
  inline void set_team(::google::protobuf::uint32 value);

  // optional uint32 heroid = 5;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroidFieldNumber = 5;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 kill_count = 7;
  inline bool has_kill_count() const;
  inline void clear_kill_count();
  static const int kKillCountFieldNumber = 7;
  inline ::google::protobuf::uint32 kill_count() const;
  inline void set_kill_count(::google::protobuf::uint32 value);

  // optional uint32 death_count = 8;
  inline bool has_death_count() const;
  inline void clear_death_count();
  static const int kDeathCountFieldNumber = 8;
  inline ::google::protobuf::uint32 death_count() const;
  inline void set_death_count(::google::protobuf::uint32 value);

  // optional uint32 assists_count = 9;
  inline bool has_assists_count() const;
  inline void clear_assists_count();
  static const int kAssistsCountFieldNumber = 9;
  inline ::google::protobuf::uint32 assists_count() const;
  inline void set_assists_count(::google::protobuf::uint32 value);

  // optional uint32 denies_count = 10;
  inline bool has_denies_count() const;
  inline void clear_denies_count();
  static const int kDeniesCountFieldNumber = 10;
  inline ::google::protobuf::uint32 denies_count() const;
  inline void set_denies_count(::google::protobuf::uint32 value);

  // optional uint32 lh_count = 11;
  inline bool has_lh_count() const;
  inline void clear_lh_count();
  static const int kLhCountFieldNumber = 11;
  inline ::google::protobuf::uint32 lh_count() const;
  inline void set_lh_count(::google::protobuf::uint32 value);

  // optional uint32 gold = 12;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 12;
  inline ::google::protobuf::uint32 gold() const;
  inline void set_gold(::google::protobuf::uint32 value);

  // optional float x = 13;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 13;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 14;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 14;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
 private:
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_kill_count();
  inline void clear_has_kill_count();
  inline void set_has_death_count();
  inline void clear_has_death_count();
  inline void set_has_assists_count();
  inline void clear_has_assists_count();
  inline void set_has_denies_count();
  inline void clear_has_denies_count();
  inline void set_has_lh_count();
  inline void clear_has_lh_count();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 accountid_;
  ::google::protobuf::uint32 playerid_;
  ::std::string* name_;
  ::google::protobuf::uint32 team_;
  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 kill_count_;
  ::google::protobuf::uint32 death_count_;
  ::google::protobuf::uint32 assists_count_;
  ::google::protobuf::uint32 denies_count_;
  ::google::protobuf::uint32 lh_count_;
  ::google::protobuf::uint32 gold_;
  float x_;
  float y_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStatsTerse_PlayerDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStatsTerse_BuildingDetails : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStatsTerse_BuildingDetails();
  virtual ~CMsgDOTARealtimeGameStatsTerse_BuildingDetails();

  CMsgDOTARealtimeGameStatsTerse_BuildingDetails(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from);

  inline CMsgDOTARealtimeGameStatsTerse_BuildingDetails& operator=(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& default_instance();

  void Swap(CMsgDOTARealtimeGameStatsTerse_BuildingDetails* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStatsTerse_BuildingDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 team = 1;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 1;
  inline ::google::protobuf::uint32 team() const;
  inline void set_team(::google::protobuf::uint32 value);

  // optional float heading = 2;
  inline bool has_heading() const;
  inline void clear_heading();
  static const int kHeadingFieldNumber = 2;
  inline float heading() const;
  inline void set_heading(float value);

  // optional uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 lane = 4;
  inline bool has_lane() const;
  inline void clear_lane();
  static const int kLaneFieldNumber = 4;
  inline ::google::protobuf::uint32 lane() const;
  inline void set_lane(::google::protobuf::uint32 value);

  // optional uint32 tier = 5;
  inline bool has_tier() const;
  inline void clear_tier();
  static const int kTierFieldNumber = 5;
  inline ::google::protobuf::uint32 tier() const;
  inline void set_tier(::google::protobuf::uint32 value);

  // optional float x = 6;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 6;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 7;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 7;
  inline float y() const;
  inline void set_y(float value);

  // optional bool destroyed = 8;
  inline bool has_destroyed() const;
  inline void clear_destroyed();
  static const int kDestroyedFieldNumber = 8;
  inline bool destroyed() const;
  inline void set_destroyed(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
 private:
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_heading();
  inline void clear_has_heading();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_lane();
  inline void clear_has_lane();
  inline void set_has_tier();
  inline void clear_has_tier();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_destroyed();
  inline void clear_has_destroyed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 team_;
  float heading_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 lane_;
  ::google::protobuf::uint32 tier_;
  float x_;
  float y_;
  bool destroyed_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStatsTerse_BuildingDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStatsTerse_MatchDetails : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStatsTerse_MatchDetails();
  virtual ~CMsgDOTARealtimeGameStatsTerse_MatchDetails();

  CMsgDOTARealtimeGameStatsTerse_MatchDetails(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from);

  inline CMsgDOTARealtimeGameStatsTerse_MatchDetails& operator=(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStatsTerse_MatchDetails& default_instance();

  void Swap(CMsgDOTARealtimeGameStatsTerse_MatchDetails* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStatsTerse_MatchDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from);
  void MergeFrom(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 server_steam_id = 1;
  inline bool has_server_steam_id() const;
  inline void clear_server_steam_id();
  static const int kServerSteamIdFieldNumber = 1;
  inline ::google::protobuf::uint64 server_steam_id() const;
  inline void set_server_steam_id(::google::protobuf::uint64 value);

  // optional uint64 matchid = 2;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 2;
  inline ::google::protobuf::uint64 matchid() const;
  inline void set_matchid(::google::protobuf::uint64 value);

  // optional uint32 timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // optional int32 game_time = 4;
  inline bool has_game_time() const;
  inline void clear_game_time();
  static const int kGameTimeFieldNumber = 4;
  inline ::google::protobuf::int32 game_time() const;
  inline void set_game_time(::google::protobuf::int32 value);

  // repeated uint32 steam_broadcaster_account_ids = 6;
  inline int steam_broadcaster_account_ids_size() const;
  inline void clear_steam_broadcaster_account_ids();
  static const int kSteamBroadcasterAccountIdsFieldNumber = 6;
  inline ::google::protobuf::uint32 steam_broadcaster_account_ids(int index) const;
  inline void set_steam_broadcaster_account_ids(int index, ::google::protobuf::uint32 value);
  inline void add_steam_broadcaster_account_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      steam_broadcaster_account_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_steam_broadcaster_account_ids();

  // optional uint32 game_mode = 7;
  inline bool has_game_mode() const;
  inline void clear_game_mode();
  static const int kGameModeFieldNumber = 7;
  inline ::google::protobuf::uint32 game_mode() const;
  inline void set_game_mode(::google::protobuf::uint32 value);

  // optional uint32 league_id = 8;
  inline bool has_league_id() const;
  inline void clear_league_id();
  static const int kLeagueIdFieldNumber = 8;
  inline ::google::protobuf::uint32 league_id() const;
  inline void set_league_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
 private:
  inline void set_has_server_steam_id();
  inline void clear_has_server_steam_id();
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_game_time();
  inline void clear_has_game_time();
  inline void set_has_game_mode();
  inline void clear_has_game_mode();
  inline void set_has_league_id();
  inline void clear_has_league_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 server_steam_id_;
  ::google::protobuf::uint64 matchid_;
  ::google::protobuf::uint32 timestamp_;
  ::google::protobuf::int32 game_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > steam_broadcaster_account_ids_;
  ::google::protobuf::uint32 game_mode_;
  ::google::protobuf::uint32 league_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStatsTerse_MatchDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStatsTerse_GraphData : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStatsTerse_GraphData();
  virtual ~CMsgDOTARealtimeGameStatsTerse_GraphData();

  CMsgDOTARealtimeGameStatsTerse_GraphData(const CMsgDOTARealtimeGameStatsTerse_GraphData& from);

  inline CMsgDOTARealtimeGameStatsTerse_GraphData& operator=(const CMsgDOTARealtimeGameStatsTerse_GraphData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStatsTerse_GraphData& default_instance();

  void Swap(CMsgDOTARealtimeGameStatsTerse_GraphData* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStatsTerse_GraphData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStatsTerse_GraphData& from);
  void MergeFrom(const CMsgDOTARealtimeGameStatsTerse_GraphData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 graph_gold = 1;
  inline int graph_gold_size() const;
  inline void clear_graph_gold();
  static const int kGraphGoldFieldNumber = 1;
  inline ::google::protobuf::int32 graph_gold(int index) const;
  inline void set_graph_gold(int index, ::google::protobuf::int32 value);
  inline void add_graph_gold(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      graph_gold() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_graph_gold();

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStatsTerse.GraphData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > graph_gold_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStatsTerse_GraphData* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStatsTerse : public ::google::protobuf::Message {
 public:
  CMsgDOTARealtimeGameStatsTerse();
  virtual ~CMsgDOTARealtimeGameStatsTerse();

  CMsgDOTARealtimeGameStatsTerse(const CMsgDOTARealtimeGameStatsTerse& from);

  inline CMsgDOTARealtimeGameStatsTerse& operator=(const CMsgDOTARealtimeGameStatsTerse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARealtimeGameStatsTerse& default_instance();

  void Swap(CMsgDOTARealtimeGameStatsTerse* other);

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStatsTerse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARealtimeGameStatsTerse& from);
  void MergeFrom(const CMsgDOTARealtimeGameStatsTerse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTARealtimeGameStatsTerse_TeamDetails TeamDetails;
  typedef CMsgDOTARealtimeGameStatsTerse_PlayerDetails PlayerDetails;
  typedef CMsgDOTARealtimeGameStatsTerse_BuildingDetails BuildingDetails;
  typedef CMsgDOTARealtimeGameStatsTerse_MatchDetails MatchDetails;
  typedef CMsgDOTARealtimeGameStatsTerse_GraphData GraphData;

  // accessors -------------------------------------------------------

  // optional .CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
  inline bool has_match() const;
  inline void clear_match();
  static const int kMatchFieldNumber = 1;
  inline const ::CMsgDOTARealtimeGameStatsTerse_MatchDetails& match() const;
  inline ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* mutable_match();
  inline ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* release_match();
  inline void set_allocated_match(::CMsgDOTARealtimeGameStatsTerse_MatchDetails* match);

  // repeated .CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
  inline int teams_size() const;
  inline void clear_teams();
  static const int kTeamsFieldNumber = 2;
  inline const ::CMsgDOTARealtimeGameStatsTerse_TeamDetails& teams(int index) const;
  inline ::CMsgDOTARealtimeGameStatsTerse_TeamDetails* mutable_teams(int index);
  inline ::CMsgDOTARealtimeGameStatsTerse_TeamDetails* add_teams();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_TeamDetails >&
      teams() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_TeamDetails >*
      mutable_teams();

  // repeated .CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
  inline int buildings_size() const;
  inline void clear_buildings();
  static const int kBuildingsFieldNumber = 3;
  inline const ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails& buildings(int index) const;
  inline ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails* mutable_buildings(int index);
  inline ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails* add_buildings();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails >&
      buildings() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails >*
      mutable_buildings();

  // optional .CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
  inline bool has_graph_data() const;
  inline void clear_graph_data();
  static const int kGraphDataFieldNumber = 4;
  inline const ::CMsgDOTARealtimeGameStatsTerse_GraphData& graph_data() const;
  inline ::CMsgDOTARealtimeGameStatsTerse_GraphData* mutable_graph_data();
  inline ::CMsgDOTARealtimeGameStatsTerse_GraphData* release_graph_data();
  inline void set_allocated_graph_data(::CMsgDOTARealtimeGameStatsTerse_GraphData* graph_data);

  // optional bool delta_frame = 5;
  inline bool has_delta_frame() const;
  inline void clear_delta_frame();
  static const int kDeltaFrameFieldNumber = 5;
  inline bool delta_frame() const;
  inline void set_delta_frame(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStatsTerse)
 private:
  inline void set_has_match();
  inline void clear_has_match();
  inline void set_has_graph_data();
  inline void clear_has_graph_data();
  inline void set_has_delta_frame();
  inline void clear_has_delta_frame();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* match_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_TeamDetails > teams_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails > buildings_;
  ::CMsgDOTARealtimeGameStatsTerse_GraphData* graph_data_;
  bool delta_frame_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARealtimeGameStatsTerse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCToClientMatchGroupsVersion : public ::google::protobuf::Message {
 public:
  CMsgGCToClientMatchGroupsVersion();
  virtual ~CMsgGCToClientMatchGroupsVersion();

  CMsgGCToClientMatchGroupsVersion(const CMsgGCToClientMatchGroupsVersion& from);

  inline CMsgGCToClientMatchGroupsVersion& operator=(const CMsgGCToClientMatchGroupsVersion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToClientMatchGroupsVersion& default_instance();

  void Swap(CMsgGCToClientMatchGroupsVersion* other);

  // implements Message ----------------------------------------------

  CMsgGCToClientMatchGroupsVersion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCToClientMatchGroupsVersion& from);
  void MergeFrom(const CMsgGCToClientMatchGroupsVersion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 matchgroups_version = 1;
  inline bool has_matchgroups_version() const;
  inline void clear_matchgroups_version();
  static const int kMatchgroupsVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 matchgroups_version() const;
  inline void set_matchgroups_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCToClientMatchGroupsVersion)
 private:
  inline void set_has_matchgroups_version();
  inline void clear_has_matchgroups_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 matchgroups_version_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCToClientMatchGroupsVersion* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTASDOHeroStatsHistory : public ::google::protobuf::Message {
 public:
  CMsgDOTASDOHeroStatsHistory();
  virtual ~CMsgDOTASDOHeroStatsHistory();

  CMsgDOTASDOHeroStatsHistory(const CMsgDOTASDOHeroStatsHistory& from);

  inline CMsgDOTASDOHeroStatsHistory& operator=(const CMsgDOTASDOHeroStatsHistory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTASDOHeroStatsHistory& default_instance();

  void Swap(CMsgDOTASDOHeroStatsHistory* other);

  // implements Message ----------------------------------------------

  CMsgDOTASDOHeroStatsHistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTASDOHeroStatsHistory& from);
  void MergeFrom(const CMsgDOTASDOHeroStatsHistory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 match_id = 1;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  inline ::google::protobuf::uint64 match_id() const;
  inline void set_match_id(::google::protobuf::uint64 value);

  // optional uint32 game_mode = 2;
  inline bool has_game_mode() const;
  inline void clear_game_mode();
  static const int kGameModeFieldNumber = 2;
  inline ::google::protobuf::uint32 game_mode() const;
  inline void set_game_mode(::google::protobuf::uint32 value);

  // optional uint32 lobby_type = 3;
  inline bool has_lobby_type() const;
  inline void clear_lobby_type();
  static const int kLobbyTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 lobby_type() const;
  inline void set_lobby_type(::google::protobuf::uint32 value);

  // optional uint32 start_time = 4;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 start_time() const;
  inline void set_start_time(::google::protobuf::uint32 value);

  // optional bool won = 5;
  inline bool has_won() const;
  inline void clear_won();
  static const int kWonFieldNumber = 5;
  inline bool won() const;
  inline void set_won(bool value);

  // optional uint32 gpm = 6;
  inline bool has_gpm() const;
  inline void clear_gpm();
  static const int kGpmFieldNumber = 6;
  inline ::google::protobuf::uint32 gpm() const;
  inline void set_gpm(::google::protobuf::uint32 value);

  // optional uint32 xpm = 7;
  inline bool has_xpm() const;
  inline void clear_xpm();
  static const int kXpmFieldNumber = 7;
  inline ::google::protobuf::uint32 xpm() const;
  inline void set_xpm(::google::protobuf::uint32 value);

  // optional uint32 kills = 8;
  inline bool has_kills() const;
  inline void clear_kills();
  static const int kKillsFieldNumber = 8;
  inline ::google::protobuf::uint32 kills() const;
  inline void set_kills(::google::protobuf::uint32 value);

  // optional uint32 deaths = 9;
  inline bool has_deaths() const;
  inline void clear_deaths();
  static const int kDeathsFieldNumber = 9;
  inline ::google::protobuf::uint32 deaths() const;
  inline void set_deaths(::google::protobuf::uint32 value);

  // optional uint32 assists = 10;
  inline bool has_assists() const;
  inline void clear_assists();
  static const int kAssistsFieldNumber = 10;
  inline ::google::protobuf::uint32 assists() const;
  inline void set_assists(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTASDOHeroStatsHistory)
 private:
  inline void set_has_match_id();
  inline void clear_has_match_id();
  inline void set_has_game_mode();
  inline void clear_has_game_mode();
  inline void set_has_lobby_type();
  inline void clear_has_lobby_type();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_won();
  inline void clear_has_won();
  inline void set_has_gpm();
  inline void clear_has_gpm();
  inline void set_has_xpm();
  inline void clear_has_xpm();
  inline void set_has_kills();
  inline void clear_has_kills();
  inline void set_has_deaths();
  inline void clear_has_deaths();
  inline void set_has_assists();
  inline void clear_has_assists();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 match_id_;
  ::google::protobuf::uint32 game_mode_;
  ::google::protobuf::uint32 lobby_type_;
  ::google::protobuf::uint32 start_time_;
  bool won_;
  ::google::protobuf::uint32 gpm_;
  ::google::protobuf::uint32 xpm_;
  ::google::protobuf::uint32 kills_;
  ::google::protobuf::uint32 deaths_;
  ::google::protobuf::uint32 assists_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTASDOHeroStatsHistory* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTASeasonRewards_Reward : public ::google::protobuf::Message {
 public:
  CMsgDOTASeasonRewards_Reward();
  virtual ~CMsgDOTASeasonRewards_Reward();

  CMsgDOTASeasonRewards_Reward(const CMsgDOTASeasonRewards_Reward& from);

  inline CMsgDOTASeasonRewards_Reward& operator=(const CMsgDOTASeasonRewards_Reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTASeasonRewards_Reward& default_instance();

  void Swap(CMsgDOTASeasonRewards_Reward* other);

  // implements Message ----------------------------------------------

  CMsgDOTASeasonRewards_Reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTASeasonRewards_Reward& from);
  void MergeFrom(const CMsgDOTASeasonRewards_Reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 itemdef = 2;
  inline bool has_itemdef() const;
  inline void clear_itemdef();
  static const int kItemdefFieldNumber = 2;
  inline ::google::protobuf::uint32 itemdef() const;
  inline void set_itemdef(::google::protobuf::uint32 value);

  // optional uint32 importance = 3;
  inline bool has_importance() const;
  inline void clear_importance();
  static const int kImportanceFieldNumber = 3;
  inline ::google::protobuf::uint32 importance() const;
  inline void set_importance(::google::protobuf::uint32 value);

  // optional uint32 base_level = 4;
  inline bool has_base_level() const;
  inline void clear_base_level();
  static const int kBaseLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 base_level() const;
  inline void set_base_level(::google::protobuf::uint32 value);

  // optional uint32 repeat_level = 5;
  inline bool has_repeat_level() const;
  inline void clear_repeat_level();
  static const int kRepeatLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 repeat_level() const;
  inline void set_repeat_level(::google::protobuf::uint32 value);

  // optional .CMsgDOTASeasonRewards.ERewardType reward_type = 6 [default = EconItem];
  inline bool has_reward_type() const;
  inline void clear_reward_type();
  static const int kRewardTypeFieldNumber = 6;
  inline ::CMsgDOTASeasonRewards_ERewardType reward_type() const;
  inline void set_reward_type(::CMsgDOTASeasonRewards_ERewardType value);

  // optional string image = 7;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 7;
  inline const ::std::string& image() const;
  inline void set_image(const ::std::string& value);
  inline void set_image(const char* value);
  inline void set_image(const char* value, size_t size);
  inline ::std::string* mutable_image();
  inline ::std::string* release_image();
  inline void set_allocated_image(::std::string* image);

  // optional uint32 action_id = 8;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 8;
  inline ::google::protobuf::uint32 action_id() const;
  inline void set_action_id(::google::protobuf::uint32 value);

  // optional uint32 effect_index = 9;
  inline bool has_effect_index() const;
  inline void clear_effect_index();
  static const int kEffectIndexFieldNumber = 9;
  inline ::google::protobuf::uint32 effect_index() const;
  inline void set_effect_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTASeasonRewards.Reward)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_itemdef();
  inline void clear_has_itemdef();
  inline void set_has_importance();
  inline void clear_has_importance();
  inline void set_has_base_level();
  inline void clear_has_base_level();
  inline void set_has_repeat_level();
  inline void clear_has_repeat_level();
  inline void set_has_reward_type();
  inline void clear_has_reward_type();
  inline void set_has_image();
  inline void clear_has_image();
  inline void set_has_action_id();
  inline void clear_has_action_id();
  inline void set_has_effect_index();
  inline void clear_has_effect_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 itemdef_;
  ::google::protobuf::uint32 importance_;
  ::google::protobuf::uint32 base_level_;
  ::google::protobuf::uint32 repeat_level_;
  ::std::string* image_;
  int reward_type_;
  ::google::protobuf::uint32 action_id_;
  ::google::protobuf::uint32 effect_index_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTASeasonRewards_Reward* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTASeasonRewards : public ::google::protobuf::Message {
 public:
  CMsgDOTASeasonRewards();
  virtual ~CMsgDOTASeasonRewards();

  CMsgDOTASeasonRewards(const CMsgDOTASeasonRewards& from);

  inline CMsgDOTASeasonRewards& operator=(const CMsgDOTASeasonRewards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTASeasonRewards& default_instance();

  void Swap(CMsgDOTASeasonRewards* other);

  // implements Message ----------------------------------------------

  CMsgDOTASeasonRewards* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTASeasonRewards& from);
  void MergeFrom(const CMsgDOTASeasonRewards& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTASeasonRewards_Reward Reward;

  typedef CMsgDOTASeasonRewards_ERewardType ERewardType;
  static const ERewardType EconItem = CMsgDOTASeasonRewards_ERewardType_EconItem;
  static const ERewardType MysteryWheel = CMsgDOTASeasonRewards_ERewardType_MysteryWheel;
  static const ERewardType AbilityEffect = CMsgDOTASeasonRewards_ERewardType_AbilityEffect;
  static const ERewardType Other = CMsgDOTASeasonRewards_ERewardType_Other;
  static inline bool ERewardType_IsValid(int value) {
    return CMsgDOTASeasonRewards_ERewardType_IsValid(value);
  }
  static const ERewardType ERewardType_MIN =
    CMsgDOTASeasonRewards_ERewardType_ERewardType_MIN;
  static const ERewardType ERewardType_MAX =
    CMsgDOTASeasonRewards_ERewardType_ERewardType_MAX;
  static const int ERewardType_ARRAYSIZE =
    CMsgDOTASeasonRewards_ERewardType_ERewardType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ERewardType_descriptor() {
    return CMsgDOTASeasonRewards_ERewardType_descriptor();
  }
  static inline const ::std::string& ERewardType_Name(ERewardType value) {
    return CMsgDOTASeasonRewards_ERewardType_Name(value);
  }
  static inline bool ERewardType_Parse(const ::std::string& name,
      ERewardType* value) {
    return CMsgDOTASeasonRewards_ERewardType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTASeasonRewards.Reward rewards = 1;
  inline int rewards_size() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 1;
  inline const ::CMsgDOTASeasonRewards_Reward& rewards(int index) const;
  inline ::CMsgDOTASeasonRewards_Reward* mutable_rewards(int index);
  inline ::CMsgDOTASeasonRewards_Reward* add_rewards();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonRewards_Reward >&
      rewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonRewards_Reward >*
      mutable_rewards();

  // @@protoc_insertion_point(class_scope:CMsgDOTASeasonRewards)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonRewards_Reward > rewards_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTASeasonRewards* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTASeasonAchievements_Achievement : public ::google::protobuf::Message {
 public:
  CMsgDOTASeasonAchievements_Achievement();
  virtual ~CMsgDOTASeasonAchievements_Achievement();

  CMsgDOTASeasonAchievements_Achievement(const CMsgDOTASeasonAchievements_Achievement& from);

  inline CMsgDOTASeasonAchievements_Achievement& operator=(const CMsgDOTASeasonAchievements_Achievement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTASeasonAchievements_Achievement& default_instance();

  void Swap(CMsgDOTASeasonAchievements_Achievement* other);

  // implements Message ----------------------------------------------

  CMsgDOTASeasonAchievements_Achievement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTASeasonAchievements_Achievement& from);
  void MergeFrom(const CMsgDOTASeasonAchievements_Achievement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string description = 2;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 2;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional string image = 3;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 3;
  inline const ::std::string& image() const;
  inline void set_image(const ::std::string& value);
  inline void set_image(const char* value);
  inline void set_image(const char* value, size_t size);
  inline ::std::string* mutable_image();
  inline ::std::string* release_image();
  inline void set_allocated_image(::std::string* image);

  // optional uint32 action_id = 4;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 4;
  inline ::google::protobuf::uint32 action_id() const;
  inline void set_action_id(::google::protobuf::uint32 value);

  // optional uint32 max_grants = 5;
  inline bool has_max_grants() const;
  inline void clear_max_grants();
  static const int kMaxGrantsFieldNumber = 5;
  inline ::google::protobuf::uint32 max_grants() const;
  inline void set_max_grants(::google::protobuf::uint32 value);

  // optional uint32 normal_points = 6;
  inline bool has_normal_points() const;
  inline void clear_normal_points();
  static const int kNormalPointsFieldNumber = 6;
  inline ::google::protobuf::uint32 normal_points() const;
  inline void set_normal_points(::google::protobuf::uint32 value);

  // optional uint32 tracking_achievement = 7;
  inline bool has_tracking_achievement() const;
  inline void clear_tracking_achievement();
  static const int kTrackingAchievementFieldNumber = 7;
  inline ::google::protobuf::uint32 tracking_achievement() const;
  inline void set_tracking_achievement(::google::protobuf::uint32 value);

  // optional uint32 achievement_goal = 8;
  inline bool has_achievement_goal() const;
  inline void clear_achievement_goal();
  static const int kAchievementGoalFieldNumber = 8;
  inline ::google::protobuf::uint32 achievement_goal() const;
  inline void set_achievement_goal(::google::protobuf::uint32 value);

  // optional uint32 achievement_level = 9;
  inline bool has_achievement_level() const;
  inline void clear_achievement_level();
  static const int kAchievementLevelFieldNumber = 9;
  inline ::google::protobuf::uint32 achievement_level() const;
  inline void set_achievement_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTASeasonAchievements.Achievement)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_image();
  inline void clear_has_image();
  inline void set_has_action_id();
  inline void clear_has_action_id();
  inline void set_has_max_grants();
  inline void clear_has_max_grants();
  inline void set_has_normal_points();
  inline void clear_has_normal_points();
  inline void set_has_tracking_achievement();
  inline void clear_has_tracking_achievement();
  inline void set_has_achievement_goal();
  inline void clear_has_achievement_goal();
  inline void set_has_achievement_level();
  inline void clear_has_achievement_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* description_;
  ::std::string* image_;
  ::google::protobuf::uint32 action_id_;
  ::google::protobuf::uint32 max_grants_;
  ::google::protobuf::uint32 normal_points_;
  ::google::protobuf::uint32 tracking_achievement_;
  ::google::protobuf::uint32 achievement_goal_;
  ::google::protobuf::uint32 achievement_level_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTASeasonAchievements_Achievement* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTASeasonAchievements : public ::google::protobuf::Message {
 public:
  CMsgDOTASeasonAchievements();
  virtual ~CMsgDOTASeasonAchievements();

  CMsgDOTASeasonAchievements(const CMsgDOTASeasonAchievements& from);

  inline CMsgDOTASeasonAchievements& operator=(const CMsgDOTASeasonAchievements& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTASeasonAchievements& default_instance();

  void Swap(CMsgDOTASeasonAchievements* other);

  // implements Message ----------------------------------------------

  CMsgDOTASeasonAchievements* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTASeasonAchievements& from);
  void MergeFrom(const CMsgDOTASeasonAchievements& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTASeasonAchievements_Achievement Achievement;

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTASeasonAchievements.Achievement achievements = 1;
  inline int achievements_size() const;
  inline void clear_achievements();
  static const int kAchievementsFieldNumber = 1;
  inline const ::CMsgDOTASeasonAchievements_Achievement& achievements(int index) const;
  inline ::CMsgDOTASeasonAchievements_Achievement* mutable_achievements(int index);
  inline ::CMsgDOTASeasonAchievements_Achievement* add_achievements();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonAchievements_Achievement >&
      achievements() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonAchievements_Achievement >*
      mutable_achievements();

  // @@protoc_insertion_point(class_scope:CMsgDOTASeasonAchievements)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonAchievements_Achievement > achievements_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTASeasonAchievements* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTASeasonPredictions_Choice : public ::google::protobuf::Message {
 public:
  CMsgDOTASeasonPredictions_Choice();
  virtual ~CMsgDOTASeasonPredictions_Choice();

  CMsgDOTASeasonPredictions_Choice(const CMsgDOTASeasonPredictions_Choice& from);

  inline CMsgDOTASeasonPredictions_Choice& operator=(const CMsgDOTASeasonPredictions_Choice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTASeasonPredictions_Choice& default_instance();

  void Swap(CMsgDOTASeasonPredictions_Choice* other);

  // implements Message ----------------------------------------------

  CMsgDOTASeasonPredictions_Choice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTASeasonPredictions_Choice& from);
  void MergeFrom(const CMsgDOTASeasonPredictions_Choice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 min_raw_value = 3;
  inline bool has_min_raw_value() const;
  inline void clear_min_raw_value();
  static const int kMinRawValueFieldNumber = 3;
  inline ::google::protobuf::uint32 min_raw_value() const;
  inline void set_min_raw_value(::google::protobuf::uint32 value);

  // optional uint32 max_raw_value = 4;
  inline bool has_max_raw_value() const;
  inline void clear_max_raw_value();
  static const int kMaxRawValueFieldNumber = 4;
  inline ::google::protobuf::uint32 max_raw_value() const;
  inline void set_max_raw_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTASeasonPredictions.Choice)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_min_raw_value();
  inline void clear_has_min_raw_value();
  inline void set_has_max_raw_value();
  inline void clear_has_max_raw_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 value_;
  ::google::protobuf::uint32 min_raw_value_;
  ::google::protobuf::uint32 max_raw_value_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTASeasonPredictions_Choice* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTASeasonPredictions_Answers : public ::google::protobuf::Message {
 public:
  CMsgDOTASeasonPredictions_Answers();
  virtual ~CMsgDOTASeasonPredictions_Answers();

  CMsgDOTASeasonPredictions_Answers(const CMsgDOTASeasonPredictions_Answers& from);

  inline CMsgDOTASeasonPredictions_Answers& operator=(const CMsgDOTASeasonPredictions_Answers& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTASeasonPredictions_Answers& default_instance();

  void Swap(CMsgDOTASeasonPredictions_Answers* other);

  // implements Message ----------------------------------------------

  CMsgDOTASeasonPredictions_Answers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTASeasonPredictions_Answers& from);
  void MergeFrom(const CMsgDOTASeasonPredictions_Answers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 answer_id = 1;
  inline bool has_answer_id() const;
  inline void clear_answer_id();
  static const int kAnswerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 answer_id() const;
  inline void set_answer_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTASeasonPredictions.Answers)
 private:
  inline void set_has_answer_id();
  inline void clear_has_answer_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 answer_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTASeasonPredictions_Answers* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTASeasonPredictions_QueryKeyValues : public ::google::protobuf::Message {
 public:
  CMsgDOTASeasonPredictions_QueryKeyValues();
  virtual ~CMsgDOTASeasonPredictions_QueryKeyValues();

  CMsgDOTASeasonPredictions_QueryKeyValues(const CMsgDOTASeasonPredictions_QueryKeyValues& from);

  inline CMsgDOTASeasonPredictions_QueryKeyValues& operator=(const CMsgDOTASeasonPredictions_QueryKeyValues& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTASeasonPredictions_QueryKeyValues& default_instance();

  void Swap(CMsgDOTASeasonPredictions_QueryKeyValues* other);

  // implements Message ----------------------------------------------

  CMsgDOTASeasonPredictions_QueryKeyValues* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTASeasonPredictions_QueryKeyValues& from);
  void MergeFrom(const CMsgDOTASeasonPredictions_QueryKeyValues& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:CMsgDOTASeasonPredictions.QueryKeyValues)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTASeasonPredictions_QueryKeyValues* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTASeasonPredictions_Prediction : public ::google::protobuf::Message {
 public:
  CMsgDOTASeasonPredictions_Prediction();
  virtual ~CMsgDOTASeasonPredictions_Prediction();

  CMsgDOTASeasonPredictions_Prediction(const CMsgDOTASeasonPredictions_Prediction& from);

  inline CMsgDOTASeasonPredictions_Prediction& operator=(const CMsgDOTASeasonPredictions_Prediction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTASeasonPredictions_Prediction& default_instance();

  void Swap(CMsgDOTASeasonPredictions_Prediction* other);

  // implements Message ----------------------------------------------

  CMsgDOTASeasonPredictions_Prediction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTASeasonPredictions_Prediction& from);
  void MergeFrom(const CMsgDOTASeasonPredictions_Prediction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgDOTASeasonPredictions.ePredictionType type = 1 [default = Generic];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::CMsgDOTASeasonPredictions_ePredictionType type() const;
  inline void set_type(::CMsgDOTASeasonPredictions_ePredictionType value);

  // optional string question = 2;
  inline bool has_question() const;
  inline void clear_question();
  static const int kQuestionFieldNumber = 2;
  inline const ::std::string& question() const;
  inline void set_question(const ::std::string& value);
  inline void set_question(const char* value);
  inline void set_question(const char* value, size_t size);
  inline ::std::string* mutable_question();
  inline ::std::string* release_question();
  inline void set_allocated_question(::std::string* question);

  // repeated .CMsgDOTASeasonPredictions.Choice choices = 3;
  inline int choices_size() const;
  inline void clear_choices();
  static const int kChoicesFieldNumber = 3;
  inline const ::CMsgDOTASeasonPredictions_Choice& choices(int index) const;
  inline ::CMsgDOTASeasonPredictions_Choice* mutable_choices(int index);
  inline ::CMsgDOTASeasonPredictions_Choice* add_choices();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Choice >&
      choices() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Choice >*
      mutable_choices();

  // optional uint32 selection_id = 4;
  inline bool has_selection_id() const;
  inline void clear_selection_id();
  static const int kSelectionIdFieldNumber = 4;
  inline ::google::protobuf::uint32 selection_id() const;
  inline void set_selection_id(::google::protobuf::uint32 value);

  // optional uint32 start_date = 5;
  inline bool has_start_date() const;
  inline void clear_start_date();
  static const int kStartDateFieldNumber = 5;
  inline ::google::protobuf::uint32 start_date() const;
  inline void set_start_date(::google::protobuf::uint32 value);

  // optional uint32 lock_date = 6;
  inline bool has_lock_date() const;
  inline void clear_lock_date();
  static const int kLockDateFieldNumber = 6;
  inline ::google::protobuf::uint32 lock_date() const;
  inline void set_lock_date(::google::protobuf::uint32 value);

  // optional uint32 reward = 7;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 7;
  inline ::google::protobuf::uint32 reward() const;
  inline void set_reward(::google::protobuf::uint32 value);

  // optional .CMsgDOTASeasonPredictions.eAnswerType answer_type = 8 [default = SingleInt];
  inline bool has_answer_type() const;
  inline void clear_answer_type();
  static const int kAnswerTypeFieldNumber = 8;
  inline ::CMsgDOTASeasonPredictions_eAnswerType answer_type() const;
  inline void set_answer_type(::CMsgDOTASeasonPredictions_eAnswerType value);

  // optional uint32 answer_id = 9;
  inline bool has_answer_id() const;
  inline void clear_answer_id();
  static const int kAnswerIdFieldNumber = 9;
  inline ::google::protobuf::uint32 answer_id() const;
  inline void set_answer_id(::google::protobuf::uint32 value);

  // repeated .CMsgDOTASeasonPredictions.Answers answers = 10;
  inline int answers_size() const;
  inline void clear_answers();
  static const int kAnswersFieldNumber = 10;
  inline const ::CMsgDOTASeasonPredictions_Answers& answers(int index) const;
  inline ::CMsgDOTASeasonPredictions_Answers* mutable_answers(int index);
  inline ::CMsgDOTASeasonPredictions_Answers* add_answers();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Answers >&
      answers() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Answers >*
      mutable_answers();

  // optional string query_name = 11;
  inline bool has_query_name() const;
  inline void clear_query_name();
  static const int kQueryNameFieldNumber = 11;
  inline const ::std::string& query_name() const;
  inline void set_query_name(const ::std::string& value);
  inline void set_query_name(const char* value);
  inline void set_query_name(const char* value, size_t size);
  inline ::std::string* mutable_query_name();
  inline ::std::string* release_query_name();
  inline void set_allocated_query_name(::std::string* query_name);

  // repeated uint32 query_bind_params = 12;
  inline int query_bind_params_size() const;
  inline void clear_query_bind_params();
  static const int kQueryBindParamsFieldNumber = 12;
  inline ::google::protobuf::uint32 query_bind_params(int index) const;
  inline void set_query_bind_params(int index, ::google::protobuf::uint32 value);
  inline void add_query_bind_params(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      query_bind_params() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_query_bind_params();

  // optional uint32 lock_on_selection_id = 13;
  inline bool has_lock_on_selection_id() const;
  inline void clear_lock_on_selection_id();
  static const int kLockOnSelectionIdFieldNumber = 13;
  inline ::google::protobuf::uint32 lock_on_selection_id() const;
  inline void set_lock_on_selection_id(::google::protobuf::uint32 value);

  // optional uint32 lock_on_selection_value = 14;
  inline bool has_lock_on_selection_value() const;
  inline void clear_lock_on_selection_value();
  static const int kLockOnSelectionValueFieldNumber = 14;
  inline ::google::protobuf::uint32 lock_on_selection_value() const;
  inline void set_lock_on_selection_value(::google::protobuf::uint32 value);

  // optional bool lock_on_selection_set = 15;
  inline bool has_lock_on_selection_set() const;
  inline void clear_lock_on_selection_set();
  static const int kLockOnSelectionSetFieldNumber = 15;
  inline bool lock_on_selection_set() const;
  inline void set_lock_on_selection_set(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTASeasonPredictions.Prediction)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_question();
  inline void clear_has_question();
  inline void set_has_selection_id();
  inline void clear_has_selection_id();
  inline void set_has_start_date();
  inline void clear_has_start_date();
  inline void set_has_lock_date();
  inline void clear_has_lock_date();
  inline void set_has_reward();
  inline void clear_has_reward();
  inline void set_has_answer_type();
  inline void clear_has_answer_type();
  inline void set_has_answer_id();
  inline void clear_has_answer_id();
  inline void set_has_query_name();
  inline void clear_has_query_name();
  inline void set_has_lock_on_selection_id();
  inline void clear_has_lock_on_selection_id();
  inline void set_has_lock_on_selection_value();
  inline void clear_has_lock_on_selection_value();
  inline void set_has_lock_on_selection_set();
  inline void clear_has_lock_on_selection_set();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* question_;
  int type_;
  ::google::protobuf::uint32 selection_id_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Choice > choices_;
  ::google::protobuf::uint32 start_date_;
  ::google::protobuf::uint32 lock_date_;
  ::google::protobuf::uint32 reward_;
  int answer_type_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Answers > answers_;
  ::std::string* query_name_;
  ::google::protobuf::uint32 answer_id_;
  ::google::protobuf::uint32 lock_on_selection_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > query_bind_params_;
  ::google::protobuf::uint32 lock_on_selection_value_;
  bool lock_on_selection_set_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTASeasonPredictions_Prediction* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTASeasonPredictions_InGamePrediction : public ::google::protobuf::Message {
 public:
  CMsgDOTASeasonPredictions_InGamePrediction();
  virtual ~CMsgDOTASeasonPredictions_InGamePrediction();

  CMsgDOTASeasonPredictions_InGamePrediction(const CMsgDOTASeasonPredictions_InGamePrediction& from);

  inline CMsgDOTASeasonPredictions_InGamePrediction& operator=(const CMsgDOTASeasonPredictions_InGamePrediction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTASeasonPredictions_InGamePrediction& default_instance();

  void Swap(CMsgDOTASeasonPredictions_InGamePrediction* other);

  // implements Message ----------------------------------------------

  CMsgDOTASeasonPredictions_InGamePrediction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTASeasonPredictions_InGamePrediction& from);
  void MergeFrom(const CMsgDOTASeasonPredictions_InGamePrediction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .CMsgDOTASeasonPredictions.ePredictionType type = 3 [default = Generic];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::CMsgDOTASeasonPredictions_ePredictionType type() const;
  inline void set_type(::CMsgDOTASeasonPredictions_ePredictionType value);

  // optional .CMsgDOTASeasonPredictions.eRandomSelectionGroup_t group = 4 [default = EarlyGame];
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 4;
  inline ::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t group() const;
  inline void set_group(::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t value);

  // optional string question = 5;
  inline bool has_question() const;
  inline void clear_question();
  static const int kQuestionFieldNumber = 5;
  inline const ::std::string& question() const;
  inline void set_question(const ::std::string& value);
  inline void set_question(const char* value);
  inline void set_question(const char* value, size_t size);
  inline ::std::string* mutable_question();
  inline ::std::string* release_question();
  inline void set_allocated_question(::std::string* question);

  // repeated .CMsgDOTASeasonPredictions.Choice choices = 6;
  inline int choices_size() const;
  inline void clear_choices();
  static const int kChoicesFieldNumber = 6;
  inline const ::CMsgDOTASeasonPredictions_Choice& choices(int index) const;
  inline ::CMsgDOTASeasonPredictions_Choice* mutable_choices(int index);
  inline ::CMsgDOTASeasonPredictions_Choice* add_choices();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Choice >&
      choices() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Choice >*
      mutable_choices();

  // repeated string required_heroes = 7;
  inline int required_heroes_size() const;
  inline void clear_required_heroes();
  static const int kRequiredHeroesFieldNumber = 7;
  inline const ::std::string& required_heroes(int index) const;
  inline ::std::string* mutable_required_heroes(int index);
  inline void set_required_heroes(int index, const ::std::string& value);
  inline void set_required_heroes(int index, const char* value);
  inline void set_required_heroes(int index, const char* value, size_t size);
  inline ::std::string* add_required_heroes();
  inline void add_required_heroes(const ::std::string& value);
  inline void add_required_heroes(const char* value);
  inline void add_required_heroes(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& required_heroes() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_required_heroes();

  // optional string query_name = 8;
  inline bool has_query_name() const;
  inline void clear_query_name();
  static const int kQueryNameFieldNumber = 8;
  inline const ::std::string& query_name() const;
  inline void set_query_name(const ::std::string& value);
  inline void set_query_name(const char* value);
  inline void set_query_name(const char* value, size_t size);
  inline ::std::string* mutable_query_name();
  inline ::std::string* release_query_name();
  inline void set_allocated_query_name(::std::string* query_name);

  // repeated .CMsgDOTASeasonPredictions.QueryKeyValues query_values = 9;
  inline int query_values_size() const;
  inline void clear_query_values();
  static const int kQueryValuesFieldNumber = 9;
  inline const ::CMsgDOTASeasonPredictions_QueryKeyValues& query_values(int index) const;
  inline ::CMsgDOTASeasonPredictions_QueryKeyValues* mutable_query_values(int index);
  inline ::CMsgDOTASeasonPredictions_QueryKeyValues* add_query_values();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_QueryKeyValues >&
      query_values() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_QueryKeyValues >*
      mutable_query_values();

  // optional .CMsgDOTASeasonPredictions.eResolutionType_t answer_resolution_type = 10 [default = InvalidQuery];
  inline bool has_answer_resolution_type() const;
  inline void clear_answer_resolution_type();
  static const int kAnswerResolutionTypeFieldNumber = 10;
  inline ::CMsgDOTASeasonPredictions_eResolutionType_t answer_resolution_type() const;
  inline void set_answer_resolution_type(::CMsgDOTASeasonPredictions_eResolutionType_t value);

  // optional uint32 points_to_grant = 11;
  inline bool has_points_to_grant() const;
  inline void clear_points_to_grant();
  static const int kPointsToGrantFieldNumber = 11;
  inline ::google::protobuf::uint32 points_to_grant() const;
  inline void set_points_to_grant(::google::protobuf::uint32 value);

  // optional uint32 reward_action = 12;
  inline bool has_reward_action() const;
  inline void clear_reward_action();
  static const int kRewardActionFieldNumber = 12;
  inline ::google::protobuf::uint32 reward_action() const;
  inline void set_reward_action(::google::protobuf::uint32 value);

  // optional uint32 debug_force_selection = 13;
  inline bool has_debug_force_selection() const;
  inline void clear_debug_force_selection();
  static const int kDebugForceSelectionFieldNumber = 13;
  inline ::google::protobuf::uint32 debug_force_selection() const;
  inline void set_debug_force_selection(::google::protobuf::uint32 value);

  // optional .CMsgDOTASeasonPredictions.eRawValueType_t raw_value_type = 14 [default = Number];
  inline bool has_raw_value_type() const;
  inline void clear_raw_value_type();
  static const int kRawValueTypeFieldNumber = 14;
  inline ::CMsgDOTASeasonPredictions_eRawValueType_t raw_value_type() const;
  inline void set_raw_value_type(::CMsgDOTASeasonPredictions_eRawValueType_t value);

  // @@protoc_insertion_point(class_scope:CMsgDOTASeasonPredictions.InGamePrediction)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_question();
  inline void clear_has_question();
  inline void set_has_query_name();
  inline void clear_has_query_name();
  inline void set_has_answer_resolution_type();
  inline void clear_has_answer_resolution_type();
  inline void set_has_points_to_grant();
  inline void clear_has_points_to_grant();
  inline void set_has_reward_action();
  inline void clear_has_reward_action();
  inline void set_has_debug_force_selection();
  inline void clear_has_debug_force_selection();
  inline void set_has_raw_value_type();
  inline void clear_has_raw_value_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  int type_;
  ::std::string* question_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Choice > choices_;
  ::google::protobuf::RepeatedPtrField< ::std::string> required_heroes_;
  int group_;
  int answer_resolution_type_;
  ::std::string* query_name_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_QueryKeyValues > query_values_;
  ::google::protobuf::uint32 points_to_grant_;
  ::google::protobuf::uint32 reward_action_;
  ::google::protobuf::uint32 debug_force_selection_;
  int raw_value_type_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTASeasonPredictions_InGamePrediction* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTASeasonPredictions : public ::google::protobuf::Message {
 public:
  CMsgDOTASeasonPredictions();
  virtual ~CMsgDOTASeasonPredictions();

  CMsgDOTASeasonPredictions(const CMsgDOTASeasonPredictions& from);

  inline CMsgDOTASeasonPredictions& operator=(const CMsgDOTASeasonPredictions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTASeasonPredictions& default_instance();

  void Swap(CMsgDOTASeasonPredictions* other);

  // implements Message ----------------------------------------------

  CMsgDOTASeasonPredictions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTASeasonPredictions& from);
  void MergeFrom(const CMsgDOTASeasonPredictions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTASeasonPredictions_Choice Choice;
  typedef CMsgDOTASeasonPredictions_Answers Answers;
  typedef CMsgDOTASeasonPredictions_QueryKeyValues QueryKeyValues;
  typedef CMsgDOTASeasonPredictions_Prediction Prediction;
  typedef CMsgDOTASeasonPredictions_InGamePrediction InGamePrediction;

  typedef CMsgDOTASeasonPredictions_ePredictionType ePredictionType;
  static const ePredictionType Generic = CMsgDOTASeasonPredictions_ePredictionType_Generic;
  static const ePredictionType Hero = CMsgDOTASeasonPredictions_ePredictionType_Hero;
  static const ePredictionType Team = CMsgDOTASeasonPredictions_ePredictionType_Team;
  static const ePredictionType Player = CMsgDOTASeasonPredictions_ePredictionType_Player;
  static const ePredictionType Special = CMsgDOTASeasonPredictions_ePredictionType_Special;
  static const ePredictionType YesNo = CMsgDOTASeasonPredictions_ePredictionType_YesNo;
  static inline bool ePredictionType_IsValid(int value) {
    return CMsgDOTASeasonPredictions_ePredictionType_IsValid(value);
  }
  static const ePredictionType ePredictionType_MIN =
    CMsgDOTASeasonPredictions_ePredictionType_ePredictionType_MIN;
  static const ePredictionType ePredictionType_MAX =
    CMsgDOTASeasonPredictions_ePredictionType_ePredictionType_MAX;
  static const int ePredictionType_ARRAYSIZE =
    CMsgDOTASeasonPredictions_ePredictionType_ePredictionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ePredictionType_descriptor() {
    return CMsgDOTASeasonPredictions_ePredictionType_descriptor();
  }
  static inline const ::std::string& ePredictionType_Name(ePredictionType value) {
    return CMsgDOTASeasonPredictions_ePredictionType_Name(value);
  }
  static inline bool ePredictionType_Parse(const ::std::string& name,
      ePredictionType* value) {
    return CMsgDOTASeasonPredictions_ePredictionType_Parse(name, value);
  }

  typedef CMsgDOTASeasonPredictions_eAnswerType eAnswerType;
  static const eAnswerType SingleInt = CMsgDOTASeasonPredictions_eAnswerType_SingleInt;
  static const eAnswerType SingleFloat = CMsgDOTASeasonPredictions_eAnswerType_SingleFloat;
  static const eAnswerType MultipleInt = CMsgDOTASeasonPredictions_eAnswerType_MultipleInt;
  static const eAnswerType MultipleFloat = CMsgDOTASeasonPredictions_eAnswerType_MultipleFloat;
  static const eAnswerType AnswerTeam = CMsgDOTASeasonPredictions_eAnswerType_AnswerTeam;
  static const eAnswerType SingleTime = CMsgDOTASeasonPredictions_eAnswerType_SingleTime;
  static const eAnswerType MultipleTime = CMsgDOTASeasonPredictions_eAnswerType_MultipleTime;
  static const eAnswerType NoAnswer = CMsgDOTASeasonPredictions_eAnswerType_NoAnswer;
  static inline bool eAnswerType_IsValid(int value) {
    return CMsgDOTASeasonPredictions_eAnswerType_IsValid(value);
  }
  static const eAnswerType eAnswerType_MIN =
    CMsgDOTASeasonPredictions_eAnswerType_eAnswerType_MIN;
  static const eAnswerType eAnswerType_MAX =
    CMsgDOTASeasonPredictions_eAnswerType_eAnswerType_MAX;
  static const int eAnswerType_ARRAYSIZE =
    CMsgDOTASeasonPredictions_eAnswerType_eAnswerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eAnswerType_descriptor() {
    return CMsgDOTASeasonPredictions_eAnswerType_descriptor();
  }
  static inline const ::std::string& eAnswerType_Name(eAnswerType value) {
    return CMsgDOTASeasonPredictions_eAnswerType_Name(value);
  }
  static inline bool eAnswerType_Parse(const ::std::string& name,
      eAnswerType* value) {
    return CMsgDOTASeasonPredictions_eAnswerType_Parse(name, value);
  }

  typedef CMsgDOTASeasonPredictions_eResolutionType_t eResolutionType_t;
  static const eResolutionType_t InvalidQuery = CMsgDOTASeasonPredictions_eResolutionType_t_InvalidQuery;
  static const eResolutionType_t FirstToPassQuery = CMsgDOTASeasonPredictions_eResolutionType_t_FirstToPassQuery;
  static const eResolutionType_t LastToPassQuery = CMsgDOTASeasonPredictions_eResolutionType_t_LastToPassQuery;
  static const eResolutionType_t LastRemainingQuery = CMsgDOTASeasonPredictions_eResolutionType_t_LastRemainingQuery;
  static const eResolutionType_t MaxToPassQuery = CMsgDOTASeasonPredictions_eResolutionType_t_MaxToPassQuery;
  static const eResolutionType_t MinToPassQuery = CMsgDOTASeasonPredictions_eResolutionType_t_MinToPassQuery;
  static const eResolutionType_t SumQuery = CMsgDOTASeasonPredictions_eResolutionType_t_SumQuery;
  static const eResolutionType_t MaxTeamSumToPassQuery = CMsgDOTASeasonPredictions_eResolutionType_t_MaxTeamSumToPassQuery;
  static const eResolutionType_t MinTeamSumToPassQuery = CMsgDOTASeasonPredictions_eResolutionType_t_MinTeamSumToPassQuery;
  static inline bool eResolutionType_t_IsValid(int value) {
    return CMsgDOTASeasonPredictions_eResolutionType_t_IsValid(value);
  }
  static const eResolutionType_t eResolutionType_t_MIN =
    CMsgDOTASeasonPredictions_eResolutionType_t_eResolutionType_t_MIN;
  static const eResolutionType_t eResolutionType_t_MAX =
    CMsgDOTASeasonPredictions_eResolutionType_t_eResolutionType_t_MAX;
  static const int eResolutionType_t_ARRAYSIZE =
    CMsgDOTASeasonPredictions_eResolutionType_t_eResolutionType_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResolutionType_t_descriptor() {
    return CMsgDOTASeasonPredictions_eResolutionType_t_descriptor();
  }
  static inline const ::std::string& eResolutionType_t_Name(eResolutionType_t value) {
    return CMsgDOTASeasonPredictions_eResolutionType_t_Name(value);
  }
  static inline bool eResolutionType_t_Parse(const ::std::string& name,
      eResolutionType_t* value) {
    return CMsgDOTASeasonPredictions_eResolutionType_t_Parse(name, value);
  }

  typedef CMsgDOTASeasonPredictions_eRandomSelectionGroup_t eRandomSelectionGroup_t;
  static const eRandomSelectionGroup_t EarlyGame = CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_EarlyGame;
  static const eRandomSelectionGroup_t MidGame = CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_MidGame;
  static const eRandomSelectionGroup_t LateGame = CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_LateGame;
  static const eRandomSelectionGroup_t Count = CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_Count;
  static inline bool eRandomSelectionGroup_t_IsValid(int value) {
    return CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_IsValid(value);
  }
  static const eRandomSelectionGroup_t eRandomSelectionGroup_t_MIN =
    CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_eRandomSelectionGroup_t_MIN;
  static const eRandomSelectionGroup_t eRandomSelectionGroup_t_MAX =
    CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_eRandomSelectionGroup_t_MAX;
  static const int eRandomSelectionGroup_t_ARRAYSIZE =
    CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_eRandomSelectionGroup_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eRandomSelectionGroup_t_descriptor() {
    return CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_descriptor();
  }
  static inline const ::std::string& eRandomSelectionGroup_t_Name(eRandomSelectionGroup_t value) {
    return CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_Name(value);
  }
  static inline bool eRandomSelectionGroup_t_Parse(const ::std::string& name,
      eRandomSelectionGroup_t* value) {
    return CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_Parse(name, value);
  }

  typedef CMsgDOTASeasonPredictions_eRawValueType_t eRawValueType_t;
  static const eRawValueType_t Number = CMsgDOTASeasonPredictions_eRawValueType_t_Number;
  static const eRawValueType_t Time = CMsgDOTASeasonPredictions_eRawValueType_t_Time;
  static inline bool eRawValueType_t_IsValid(int value) {
    return CMsgDOTASeasonPredictions_eRawValueType_t_IsValid(value);
  }
  static const eRawValueType_t eRawValueType_t_MIN =
    CMsgDOTASeasonPredictions_eRawValueType_t_eRawValueType_t_MIN;
  static const eRawValueType_t eRawValueType_t_MAX =
    CMsgDOTASeasonPredictions_eRawValueType_t_eRawValueType_t_MAX;
  static const int eRawValueType_t_ARRAYSIZE =
    CMsgDOTASeasonPredictions_eRawValueType_t_eRawValueType_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eRawValueType_t_descriptor() {
    return CMsgDOTASeasonPredictions_eRawValueType_t_descriptor();
  }
  static inline const ::std::string& eRawValueType_t_Name(eRawValueType_t value) {
    return CMsgDOTASeasonPredictions_eRawValueType_t_Name(value);
  }
  static inline bool eRawValueType_t_Parse(const ::std::string& name,
      eRawValueType_t* value) {
    return CMsgDOTASeasonPredictions_eRawValueType_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTASeasonPredictions.Prediction predictions = 1;
  inline int predictions_size() const;
  inline void clear_predictions();
  static const int kPredictionsFieldNumber = 1;
  inline const ::CMsgDOTASeasonPredictions_Prediction& predictions(int index) const;
  inline ::CMsgDOTASeasonPredictions_Prediction* mutable_predictions(int index);
  inline ::CMsgDOTASeasonPredictions_Prediction* add_predictions();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Prediction >&
      predictions() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Prediction >*
      mutable_predictions();

  // repeated .CMsgDOTASeasonPredictions.InGamePrediction in_game_predictions = 2;
  inline int in_game_predictions_size() const;
  inline void clear_in_game_predictions();
  static const int kInGamePredictionsFieldNumber = 2;
  inline const ::CMsgDOTASeasonPredictions_InGamePrediction& in_game_predictions(int index) const;
  inline ::CMsgDOTASeasonPredictions_InGamePrediction* mutable_in_game_predictions(int index);
  inline ::CMsgDOTASeasonPredictions_InGamePrediction* add_in_game_predictions();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_InGamePrediction >&
      in_game_predictions() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_InGamePrediction >*
      mutable_in_game_predictions();

  // optional uint32 in_game_prediction_count_per_game = 3;
  inline bool has_in_game_prediction_count_per_game() const;
  inline void clear_in_game_prediction_count_per_game();
  static const int kInGamePredictionCountPerGameFieldNumber = 3;
  inline ::google::protobuf::uint32 in_game_prediction_count_per_game() const;
  inline void set_in_game_prediction_count_per_game(::google::protobuf::uint32 value);

  // optional uint32 in_game_prediction_voting_period_minutes = 4;
  inline bool has_in_game_prediction_voting_period_minutes() const;
  inline void clear_in_game_prediction_voting_period_minutes();
  static const int kInGamePredictionVotingPeriodMinutesFieldNumber = 4;
  inline ::google::protobuf::uint32 in_game_prediction_voting_period_minutes() const;
  inline void set_in_game_prediction_voting_period_minutes(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTASeasonPredictions)
 private:
  inline void set_has_in_game_prediction_count_per_game();
  inline void clear_has_in_game_prediction_count_per_game();
  inline void set_has_in_game_prediction_voting_period_minutes();
  inline void clear_has_in_game_prediction_voting_period_minutes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Prediction > predictions_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_InGamePrediction > in_game_predictions_;
  ::google::protobuf::uint32 in_game_prediction_count_per_game_;
  ::google::protobuf::uint32 in_game_prediction_voting_period_minutes_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTASeasonPredictions* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAMatch_Player_CustomGameData : public ::google::protobuf::Message {
 public:
  CMsgDOTAMatch_Player_CustomGameData();
  virtual ~CMsgDOTAMatch_Player_CustomGameData();

  CMsgDOTAMatch_Player_CustomGameData(const CMsgDOTAMatch_Player_CustomGameData& from);

  inline CMsgDOTAMatch_Player_CustomGameData& operator=(const CMsgDOTAMatch_Player_CustomGameData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAMatch_Player_CustomGameData& default_instance();

  void Swap(CMsgDOTAMatch_Player_CustomGameData* other);

  // implements Message ----------------------------------------------

  CMsgDOTAMatch_Player_CustomGameData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAMatch_Player_CustomGameData& from);
  void MergeFrom(const CMsgDOTAMatch_Player_CustomGameData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 dota_team = 1;
  inline bool has_dota_team() const;
  inline void clear_dota_team();
  static const int kDotaTeamFieldNumber = 1;
  inline ::google::protobuf::uint32 dota_team() const;
  inline void set_dota_team(::google::protobuf::uint32 value);

  // optional bool winner = 2;
  inline bool has_winner() const;
  inline void clear_winner();
  static const int kWinnerFieldNumber = 2;
  inline bool winner() const;
  inline void set_winner(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAMatch.Player.CustomGameData)
 private:
  inline void set_has_dota_team();
  inline void clear_has_dota_team();
  inline void set_has_winner();
  inline void clear_has_winner();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 dota_team_;
  bool winner_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAMatch_Player_CustomGameData* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAMatch_Player : public ::google::protobuf::Message {
 public:
  CMsgDOTAMatch_Player();
  virtual ~CMsgDOTAMatch_Player();

  CMsgDOTAMatch_Player(const CMsgDOTAMatch_Player& from);

  inline CMsgDOTAMatch_Player& operator=(const CMsgDOTAMatch_Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAMatch_Player& default_instance();

  void Swap(CMsgDOTAMatch_Player* other);

  // implements Message ----------------------------------------------

  CMsgDOTAMatch_Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAMatch_Player& from);
  void MergeFrom(const CMsgDOTAMatch_Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAMatch_Player_CustomGameData CustomGameData;

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 player_slot = 2;
  inline bool has_player_slot() const;
  inline void clear_player_slot();
  static const int kPlayerSlotFieldNumber = 2;
  inline ::google::protobuf::uint32 player_slot() const;
  inline void set_player_slot(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 3;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 item_0 = 4;
  inline bool has_item_0() const;
  inline void clear_item_0();
  static const int kItem0FieldNumber = 4;
  inline ::google::protobuf::uint32 item_0() const;
  inline void set_item_0(::google::protobuf::uint32 value);

  // optional uint32 item_1 = 5;
  inline bool has_item_1() const;
  inline void clear_item_1();
  static const int kItem1FieldNumber = 5;
  inline ::google::protobuf::uint32 item_1() const;
  inline void set_item_1(::google::protobuf::uint32 value);

  // optional uint32 item_2 = 6;
  inline bool has_item_2() const;
  inline void clear_item_2();
  static const int kItem2FieldNumber = 6;
  inline ::google::protobuf::uint32 item_2() const;
  inline void set_item_2(::google::protobuf::uint32 value);

  // optional uint32 item_3 = 7;
  inline bool has_item_3() const;
  inline void clear_item_3();
  static const int kItem3FieldNumber = 7;
  inline ::google::protobuf::uint32 item_3() const;
  inline void set_item_3(::google::protobuf::uint32 value);

  // optional uint32 item_4 = 8;
  inline bool has_item_4() const;
  inline void clear_item_4();
  static const int kItem4FieldNumber = 8;
  inline ::google::protobuf::uint32 item_4() const;
  inline void set_item_4(::google::protobuf::uint32 value);

  // optional uint32 item_5 = 9;
  inline bool has_item_5() const;
  inline void clear_item_5();
  static const int kItem5FieldNumber = 9;
  inline ::google::protobuf::uint32 item_5() const;
  inline void set_item_5(::google::protobuf::uint32 value);

  // optional uint32 item_6 = 59;
  inline bool has_item_6() const;
  inline void clear_item_6();
  static const int kItem6FieldNumber = 59;
  inline ::google::protobuf::uint32 item_6() const;
  inline void set_item_6(::google::protobuf::uint32 value);

  // optional uint32 item_7 = 60;
  inline bool has_item_7() const;
  inline void clear_item_7();
  static const int kItem7FieldNumber = 60;
  inline ::google::protobuf::uint32 item_7() const;
  inline void set_item_7(::google::protobuf::uint32 value);

  // optional uint32 item_8 = 61;
  inline bool has_item_8() const;
  inline void clear_item_8();
  static const int kItem8FieldNumber = 61;
  inline ::google::protobuf::uint32 item_8() const;
  inline void set_item_8(::google::protobuf::uint32 value);

  // optional float expected_team_contribution = 10;
  inline bool has_expected_team_contribution() const;
  inline void clear_expected_team_contribution();
  static const int kExpectedTeamContributionFieldNumber = 10;
  inline float expected_team_contribution() const;
  inline void set_expected_team_contribution(float value);

  // optional float scaled_metric = 11;
  inline bool has_scaled_metric() const;
  inline void clear_scaled_metric();
  static const int kScaledMetricFieldNumber = 11;
  inline float scaled_metric() const;
  inline void set_scaled_metric(float value);

  // optional uint32 previous_rank = 12;
  inline bool has_previous_rank() const;
  inline void clear_previous_rank();
  static const int kPreviousRankFieldNumber = 12;
  inline ::google::protobuf::uint32 previous_rank() const;
  inline void set_previous_rank(::google::protobuf::uint32 value);

  // optional sint32 rank_change = 13;
  inline bool has_rank_change() const;
  inline void clear_rank_change();
  static const int kRankChangeFieldNumber = 13;
  inline ::google::protobuf::int32 rank_change() const;
  inline void set_rank_change(::google::protobuf::int32 value);

  // optional bool solo_rank = 49;
  inline bool has_solo_rank() const;
  inline void clear_solo_rank();
  static const int kSoloRankFieldNumber = 49;
  inline bool solo_rank() const;
  inline void set_solo_rank(bool value);

  // optional bool seasonal_rank = 53;
  inline bool has_seasonal_rank() const;
  inline void clear_seasonal_rank();
  static const int kSeasonalRankFieldNumber = 53;
  inline bool seasonal_rank() const;
  inline void set_seasonal_rank(bool value);

  // optional uint32 kills = 14;
  inline bool has_kills() const;
  inline void clear_kills();
  static const int kKillsFieldNumber = 14;
  inline ::google::protobuf::uint32 kills() const;
  inline void set_kills(::google::protobuf::uint32 value);

  // optional uint32 deaths = 15;
  inline bool has_deaths() const;
  inline void clear_deaths();
  static const int kDeathsFieldNumber = 15;
  inline ::google::protobuf::uint32 deaths() const;
  inline void set_deaths(::google::protobuf::uint32 value);

  // optional uint32 assists = 16;
  inline bool has_assists() const;
  inline void clear_assists();
  static const int kAssistsFieldNumber = 16;
  inline ::google::protobuf::uint32 assists() const;
  inline void set_assists(::google::protobuf::uint32 value);

  // optional uint32 leaver_status = 17;
  inline bool has_leaver_status() const;
  inline void clear_leaver_status();
  static const int kLeaverStatusFieldNumber = 17;
  inline ::google::protobuf::uint32 leaver_status() const;
  inline void set_leaver_status(::google::protobuf::uint32 value);

  // optional uint32 gold = 18;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 18;
  inline ::google::protobuf::uint32 gold() const;
  inline void set_gold(::google::protobuf::uint32 value);

  // optional uint32 last_hits = 19;
  inline bool has_last_hits() const;
  inline void clear_last_hits();
  static const int kLastHitsFieldNumber = 19;
  inline ::google::protobuf::uint32 last_hits() const;
  inline void set_last_hits(::google::protobuf::uint32 value);

  // optional uint32 denies = 20;
  inline bool has_denies() const;
  inline void clear_denies();
  static const int kDeniesFieldNumber = 20;
  inline ::google::protobuf::uint32 denies() const;
  inline void set_denies(::google::protobuf::uint32 value);

  // optional uint32 gold_per_min = 21;
  inline bool has_gold_per_min() const;
  inline void clear_gold_per_min();
  static const int kGoldPerMinFieldNumber = 21;
  inline ::google::protobuf::uint32 gold_per_min() const;
  inline void set_gold_per_min(::google::protobuf::uint32 value);

  // optional uint32 XP_per_min = 22;
  inline bool has_xp_per_min() const;
  inline void clear_xp_per_min();
  static const int kXPPerMinFieldNumber = 22;
  inline ::google::protobuf::uint32 xp_per_min() const;
  inline void set_xp_per_min(::google::protobuf::uint32 value);

  // optional uint32 gold_spent = 23;
  inline bool has_gold_spent() const;
  inline void clear_gold_spent();
  static const int kGoldSpentFieldNumber = 23;
  inline ::google::protobuf::uint32 gold_spent() const;
  inline void set_gold_spent(::google::protobuf::uint32 value);

  // optional uint32 hero_damage = 24;
  inline bool has_hero_damage() const;
  inline void clear_hero_damage();
  static const int kHeroDamageFieldNumber = 24;
  inline ::google::protobuf::uint32 hero_damage() const;
  inline void set_hero_damage(::google::protobuf::uint32 value);

  // optional uint32 tower_damage = 25;
  inline bool has_tower_damage() const;
  inline void clear_tower_damage();
  static const int kTowerDamageFieldNumber = 25;
  inline ::google::protobuf::uint32 tower_damage() const;
  inline void set_tower_damage(::google::protobuf::uint32 value);

  // optional uint32 hero_healing = 26;
  inline bool has_hero_healing() const;
  inline void clear_hero_healing();
  static const int kHeroHealingFieldNumber = 26;
  inline ::google::protobuf::uint32 hero_healing() const;
  inline void set_hero_healing(::google::protobuf::uint32 value);

  // optional uint32 level = 27;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 27;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 time_last_seen = 28;
  inline bool has_time_last_seen() const;
  inline void clear_time_last_seen();
  static const int kTimeLastSeenFieldNumber = 28;
  inline ::google::protobuf::uint32 time_last_seen() const;
  inline void set_time_last_seen(::google::protobuf::uint32 value);

  // optional string player_name = 29;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 29;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional uint32 support_ability_value = 30;
  inline bool has_support_ability_value() const;
  inline void clear_support_ability_value();
  static const int kSupportAbilityValueFieldNumber = 30;
  inline ::google::protobuf::uint32 support_ability_value() const;
  inline void set_support_ability_value(::google::protobuf::uint32 value);

  // optional bool feeding_detected = 32;
  inline bool has_feeding_detected() const;
  inline void clear_feeding_detected();
  static const int kFeedingDetectedFieldNumber = 32;
  inline bool feeding_detected() const;
  inline void set_feeding_detected(bool value);

  // optional uint32 search_rank = 34;
  inline bool has_search_rank() const;
  inline void clear_search_rank();
  static const int kSearchRankFieldNumber = 34;
  inline ::google::protobuf::uint32 search_rank() const;
  inline void set_search_rank(::google::protobuf::uint32 value);

  // optional uint32 search_rank_uncertainty = 35;
  inline bool has_search_rank_uncertainty() const;
  inline void clear_search_rank_uncertainty();
  static const int kSearchRankUncertaintyFieldNumber = 35;
  inline ::google::protobuf::uint32 search_rank_uncertainty() const;
  inline void set_search_rank_uncertainty(::google::protobuf::uint32 value);

  // optional int32 rank_uncertainty_change = 36;
  inline bool has_rank_uncertainty_change() const;
  inline void clear_rank_uncertainty_change();
  static const int kRankUncertaintyChangeFieldNumber = 36;
  inline ::google::protobuf::int32 rank_uncertainty_change() const;
  inline void set_rank_uncertainty_change(::google::protobuf::int32 value);

  // optional uint32 hero_play_count = 37;
  inline bool has_hero_play_count() const;
  inline void clear_hero_play_count();
  static const int kHeroPlayCountFieldNumber = 37;
  inline ::google::protobuf::uint32 hero_play_count() const;
  inline void set_hero_play_count(::google::protobuf::uint32 value);

  // optional fixed64 party_id = 38;
  inline bool has_party_id() const;
  inline void clear_party_id();
  static const int kPartyIdFieldNumber = 38;
  inline ::google::protobuf::uint64 party_id() const;
  inline void set_party_id(::google::protobuf::uint64 value);

  // optional uint32 scaled_hero_damage = 54;
  inline bool has_scaled_hero_damage() const;
  inline void clear_scaled_hero_damage();
  static const int kScaledHeroDamageFieldNumber = 54;
  inline ::google::protobuf::uint32 scaled_hero_damage() const;
  inline void set_scaled_hero_damage(::google::protobuf::uint32 value);

  // optional uint32 scaled_tower_damage = 55;
  inline bool has_scaled_tower_damage() const;
  inline void clear_scaled_tower_damage();
  static const int kScaledTowerDamageFieldNumber = 55;
  inline ::google::protobuf::uint32 scaled_tower_damage() const;
  inline void set_scaled_tower_damage(::google::protobuf::uint32 value);

  // optional uint32 scaled_hero_healing = 56;
  inline bool has_scaled_hero_healing() const;
  inline void clear_scaled_hero_healing();
  static const int kScaledHeroHealingFieldNumber = 56;
  inline ::google::protobuf::uint32 scaled_hero_healing() const;
  inline void set_scaled_hero_healing(::google::protobuf::uint32 value);

  // optional float scaled_kills = 39;
  inline bool has_scaled_kills() const;
  inline void clear_scaled_kills();
  static const int kScaledKillsFieldNumber = 39;
  inline float scaled_kills() const;
  inline void set_scaled_kills(float value);

  // optional float scaled_deaths = 40;
  inline bool has_scaled_deaths() const;
  inline void clear_scaled_deaths();
  static const int kScaledDeathsFieldNumber = 40;
  inline float scaled_deaths() const;
  inline void set_scaled_deaths(float value);

  // optional float scaled_assists = 41;
  inline bool has_scaled_assists() const;
  inline void clear_scaled_assists();
  static const int kScaledAssistsFieldNumber = 41;
  inline float scaled_assists() const;
  inline void set_scaled_assists(float value);

  // optional uint32 claimed_farm_gold = 42;
  inline bool has_claimed_farm_gold() const;
  inline void clear_claimed_farm_gold();
  static const int kClaimedFarmGoldFieldNumber = 42;
  inline ::google::protobuf::uint32 claimed_farm_gold() const;
  inline void set_claimed_farm_gold(::google::protobuf::uint32 value);

  // optional uint32 support_gold = 43;
  inline bool has_support_gold() const;
  inline void clear_support_gold();
  static const int kSupportGoldFieldNumber = 43;
  inline ::google::protobuf::uint32 support_gold() const;
  inline void set_support_gold(::google::protobuf::uint32 value);

  // optional uint32 claimed_denies = 44;
  inline bool has_claimed_denies() const;
  inline void clear_claimed_denies();
  static const int kClaimedDeniesFieldNumber = 44;
  inline ::google::protobuf::uint32 claimed_denies() const;
  inline void set_claimed_denies(::google::protobuf::uint32 value);

  // optional uint32 claimed_misses = 45;
  inline bool has_claimed_misses() const;
  inline void clear_claimed_misses();
  static const int kClaimedMissesFieldNumber = 45;
  inline ::google::protobuf::uint32 claimed_misses() const;
  inline void set_claimed_misses(::google::protobuf::uint32 value);

  // optional uint32 misses = 46;
  inline bool has_misses() const;
  inline void clear_misses();
  static const int kMissesFieldNumber = 46;
  inline ::google::protobuf::uint32 misses() const;
  inline void set_misses(::google::protobuf::uint32 value);

  // repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 47;
  inline int ability_upgrades_size() const;
  inline void clear_ability_upgrades();
  static const int kAbilityUpgradesFieldNumber = 47;
  inline const ::CMatchPlayerAbilityUpgrade& ability_upgrades(int index) const;
  inline ::CMatchPlayerAbilityUpgrade* mutable_ability_upgrades(int index);
  inline ::CMatchPlayerAbilityUpgrade* add_ability_upgrades();
  inline const ::google::protobuf::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade >&
      ability_upgrades() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade >*
      mutable_ability_upgrades();

  // repeated .CMatchAdditionalUnitInventory additional_units_inventory = 48;
  inline int additional_units_inventory_size() const;
  inline void clear_additional_units_inventory();
  static const int kAdditionalUnitsInventoryFieldNumber = 48;
  inline const ::CMatchAdditionalUnitInventory& additional_units_inventory(int index) const;
  inline ::CMatchAdditionalUnitInventory* mutable_additional_units_inventory(int index);
  inline ::CMatchAdditionalUnitInventory* add_additional_units_inventory();
  inline const ::google::protobuf::RepeatedPtrField< ::CMatchAdditionalUnitInventory >&
      additional_units_inventory() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMatchAdditionalUnitInventory >*
      mutable_additional_units_inventory();

  // repeated .CMatchPlayerPermanentBuff permanent_buffs = 57;
  inline int permanent_buffs_size() const;
  inline void clear_permanent_buffs();
  static const int kPermanentBuffsFieldNumber = 57;
  inline const ::CMatchPlayerPermanentBuff& permanent_buffs(int index) const;
  inline ::CMatchPlayerPermanentBuff* mutable_permanent_buffs(int index);
  inline ::CMatchPlayerPermanentBuff* add_permanent_buffs();
  inline const ::google::protobuf::RepeatedPtrField< ::CMatchPlayerPermanentBuff >&
      permanent_buffs() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMatchPlayerPermanentBuff >*
      mutable_permanent_buffs();

  // optional .CMsgDOTAMatch.Player.CustomGameData custom_game_data = 50;
  inline bool has_custom_game_data() const;
  inline void clear_custom_game_data();
  static const int kCustomGameDataFieldNumber = 50;
  inline const ::CMsgDOTAMatch_Player_CustomGameData& custom_game_data() const;
  inline ::CMsgDOTAMatch_Player_CustomGameData* mutable_custom_game_data();
  inline ::CMsgDOTAMatch_Player_CustomGameData* release_custom_game_data();
  inline void set_allocated_custom_game_data(::CMsgDOTAMatch_Player_CustomGameData* custom_game_data);

  // optional bool active_battle_pass = 51;
  inline bool has_active_battle_pass() const;
  inline void clear_active_battle_pass();
  static const int kActiveBattlePassFieldNumber = 51;
  inline bool active_battle_pass() const;
  inline void set_active_battle_pass(bool value);

  // optional uint32 net_worth = 52;
  inline bool has_net_worth() const;
  inline void clear_net_worth();
  static const int kNetWorthFieldNumber = 52;
  inline ::google::protobuf::uint32 net_worth() const;
  inline void set_net_worth(::google::protobuf::uint32 value);

  // optional uint32 bot_difficulty = 58;
  inline bool has_bot_difficulty() const;
  inline void clear_bot_difficulty();
  static const int kBotDifficultyFieldNumber = 58;
  inline ::google::protobuf::uint32 bot_difficulty() const;
  inline void set_bot_difficulty(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAMatch.Player)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_player_slot();
  inline void clear_has_player_slot();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_item_0();
  inline void clear_has_item_0();
  inline void set_has_item_1();
  inline void clear_has_item_1();
  inline void set_has_item_2();
  inline void clear_has_item_2();
  inline void set_has_item_3();
  inline void clear_has_item_3();
  inline void set_has_item_4();
  inline void clear_has_item_4();
  inline void set_has_item_5();
  inline void clear_has_item_5();
  inline void set_has_item_6();
  inline void clear_has_item_6();
  inline void set_has_item_7();
  inline void clear_has_item_7();
  inline void set_has_item_8();
  inline void clear_has_item_8();
  inline void set_has_expected_team_contribution();
  inline void clear_has_expected_team_contribution();
  inline void set_has_scaled_metric();
  inline void clear_has_scaled_metric();
  inline void set_has_previous_rank();
  inline void clear_has_previous_rank();
  inline void set_has_rank_change();
  inline void clear_has_rank_change();
  inline void set_has_solo_rank();
  inline void clear_has_solo_rank();
  inline void set_has_seasonal_rank();
  inline void clear_has_seasonal_rank();
  inline void set_has_kills();
  inline void clear_has_kills();
  inline void set_has_deaths();
  inline void clear_has_deaths();
  inline void set_has_assists();
  inline void clear_has_assists();
  inline void set_has_leaver_status();
  inline void clear_has_leaver_status();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_last_hits();
  inline void clear_has_last_hits();
  inline void set_has_denies();
  inline void clear_has_denies();
  inline void set_has_gold_per_min();
  inline void clear_has_gold_per_min();
  inline void set_has_xp_per_min();
  inline void clear_has_xp_per_min();
  inline void set_has_gold_spent();
  inline void clear_has_gold_spent();
  inline void set_has_hero_damage();
  inline void clear_has_hero_damage();
  inline void set_has_tower_damage();
  inline void clear_has_tower_damage();
  inline void set_has_hero_healing();
  inline void clear_has_hero_healing();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_time_last_seen();
  inline void clear_has_time_last_seen();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_support_ability_value();
  inline void clear_has_support_ability_value();
  inline void set_has_feeding_detected();
  inline void clear_has_feeding_detected();
  inline void set_has_search_rank();
  inline void clear_has_search_rank();
  inline void set_has_search_rank_uncertainty();
  inline void clear_has_search_rank_uncertainty();
  inline void set_has_rank_uncertainty_change();
  inline void clear_has_rank_uncertainty_change();
  inline void set_has_hero_play_count();
  inline void clear_has_hero_play_count();
  inline void set_has_party_id();
  inline void clear_has_party_id();
  inline void set_has_scaled_hero_damage();
  inline void clear_has_scaled_hero_damage();
  inline void set_has_scaled_tower_damage();
  inline void clear_has_scaled_tower_damage();
  inline void set_has_scaled_hero_healing();
  inline void clear_has_scaled_hero_healing();
  inline void set_has_scaled_kills();
  inline void clear_has_scaled_kills();
  inline void set_has_scaled_deaths();
  inline void clear_has_scaled_deaths();
  inline void set_has_scaled_assists();
  inline void clear_has_scaled_assists();
  inline void set_has_claimed_farm_gold();
  inline void clear_has_claimed_farm_gold();
  inline void set_has_support_gold();
  inline void clear_has_support_gold();
  inline void set_has_claimed_denies();
  inline void clear_has_claimed_denies();
  inline void set_has_claimed_misses();
  inline void clear_has_claimed_misses();
  inline void set_has_misses();
  inline void clear_has_misses();
  inline void set_has_custom_game_data();
  inline void clear_has_custom_game_data();
  inline void set_has_active_battle_pass();
  inline void clear_has_active_battle_pass();
  inline void set_has_net_worth();
  inline void clear_has_net_worth();
  inline void set_has_bot_difficulty();
  inline void clear_has_bot_difficulty();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 player_slot_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 item_0_;
  ::google::protobuf::uint32 item_1_;
  ::google::protobuf::uint32 item_2_;
  ::google::protobuf::uint32 item_3_;
  ::google::protobuf::uint32 item_4_;
  ::google::protobuf::uint32 item_5_;
  ::google::protobuf::uint32 item_6_;
  ::google::protobuf::uint32 item_7_;
  ::google::protobuf::uint32 item_8_;
  float expected_team_contribution_;
  float scaled_metric_;
  ::google::protobuf::uint32 previous_rank_;
  ::google::protobuf::int32 rank_change_;
  ::google::protobuf::uint32 kills_;
  ::google::protobuf::uint32 deaths_;
  ::google::protobuf::uint32 assists_;
  ::google::protobuf::uint32 leaver_status_;
  ::google::protobuf::uint32 gold_;
  ::google::protobuf::uint32 last_hits_;
  ::google::protobuf::uint32 denies_;
  ::google::protobuf::uint32 gold_per_min_;
  ::google::protobuf::uint32 xp_per_min_;
  ::google::protobuf::uint32 gold_spent_;
  ::google::protobuf::uint32 hero_damage_;
  ::google::protobuf::uint32 tower_damage_;
  ::google::protobuf::uint32 hero_healing_;
  ::google::protobuf::uint32 level_;
  bool solo_rank_;
  bool seasonal_rank_;
  bool feeding_detected_;
  bool active_battle_pass_;
  ::google::protobuf::uint32 time_last_seen_;
  ::std::string* player_name_;
  ::google::protobuf::uint32 support_ability_value_;
  ::google::protobuf::uint32 search_rank_;
  ::google::protobuf::uint32 search_rank_uncertainty_;
  ::google::protobuf::int32 rank_uncertainty_change_;
  ::google::protobuf::uint64 party_id_;
  ::google::protobuf::uint32 hero_play_count_;
  ::google::protobuf::uint32 scaled_hero_damage_;
  ::google::protobuf::uint32 scaled_tower_damage_;
  ::google::protobuf::uint32 scaled_hero_healing_;
  float scaled_kills_;
  float scaled_deaths_;
  float scaled_assists_;
  ::google::protobuf::uint32 claimed_farm_gold_;
  ::google::protobuf::uint32 support_gold_;
  ::google::protobuf::uint32 claimed_denies_;
  ::google::protobuf::uint32 claimed_misses_;
  ::google::protobuf::uint32 misses_;
  ::google::protobuf::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade > ability_upgrades_;
  ::google::protobuf::RepeatedPtrField< ::CMatchAdditionalUnitInventory > additional_units_inventory_;
  ::google::protobuf::RepeatedPtrField< ::CMatchPlayerPermanentBuff > permanent_buffs_;
  ::CMsgDOTAMatch_Player_CustomGameData* custom_game_data_;
  ::google::protobuf::uint32 net_worth_;
  ::google::protobuf::uint32 bot_difficulty_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAMatch_Player* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAMatch_BroadcasterInfo : public ::google::protobuf::Message {
 public:
  CMsgDOTAMatch_BroadcasterInfo();
  virtual ~CMsgDOTAMatch_BroadcasterInfo();

  CMsgDOTAMatch_BroadcasterInfo(const CMsgDOTAMatch_BroadcasterInfo& from);

  inline CMsgDOTAMatch_BroadcasterInfo& operator=(const CMsgDOTAMatch_BroadcasterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAMatch_BroadcasterInfo& default_instance();

  void Swap(CMsgDOTAMatch_BroadcasterInfo* other);

  // implements Message ----------------------------------------------

  CMsgDOTAMatch_BroadcasterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAMatch_BroadcasterInfo& from);
  void MergeFrom(const CMsgDOTAMatch_BroadcasterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:CMsgDOTAMatch.BroadcasterInfo)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 account_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAMatch_BroadcasterInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAMatch_BroadcasterChannel : public ::google::protobuf::Message {
 public:
  CMsgDOTAMatch_BroadcasterChannel();
  virtual ~CMsgDOTAMatch_BroadcasterChannel();

  CMsgDOTAMatch_BroadcasterChannel(const CMsgDOTAMatch_BroadcasterChannel& from);

  inline CMsgDOTAMatch_BroadcasterChannel& operator=(const CMsgDOTAMatch_BroadcasterChannel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAMatch_BroadcasterChannel& default_instance();

  void Swap(CMsgDOTAMatch_BroadcasterChannel* other);

  // implements Message ----------------------------------------------

  CMsgDOTAMatch_BroadcasterChannel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAMatch_BroadcasterChannel& from);
  void MergeFrom(const CMsgDOTAMatch_BroadcasterChannel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string country_code = 1;
  inline bool has_country_code() const;
  inline void clear_country_code();
  static const int kCountryCodeFieldNumber = 1;
  inline const ::std::string& country_code() const;
  inline void set_country_code(const ::std::string& value);
  inline void set_country_code(const char* value);
  inline void set_country_code(const char* value, size_t size);
  inline ::std::string* mutable_country_code();
  inline ::std::string* release_country_code();
  inline void set_allocated_country_code(::std::string* country_code);

  // optional string description = 2;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 2;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // repeated .CMsgDOTAMatch.BroadcasterInfo broadcaster_infos = 3;
  inline int broadcaster_infos_size() const;
  inline void clear_broadcaster_infos();
  static const int kBroadcasterInfosFieldNumber = 3;
  inline const ::CMsgDOTAMatch_BroadcasterInfo& broadcaster_infos(int index) const;
  inline ::CMsgDOTAMatch_BroadcasterInfo* mutable_broadcaster_infos(int index);
  inline ::CMsgDOTAMatch_BroadcasterInfo* add_broadcaster_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch_BroadcasterInfo >&
      broadcaster_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch_BroadcasterInfo >*
      mutable_broadcaster_infos();

  // optional string language_code = 4;
  inline bool has_language_code() const;
  inline void clear_language_code();
  static const int kLanguageCodeFieldNumber = 4;
  inline const ::std::string& language_code() const;
  inline void set_language_code(const ::std::string& value);
  inline void set_language_code(const char* value);
  inline void set_language_code(const char* value, size_t size);
  inline ::std::string* mutable_language_code();
  inline ::std::string* release_language_code();
  inline void set_allocated_language_code(::std::string* language_code);

  // @@protoc_insertion_point(class_scope:CMsgDOTAMatch.BroadcasterChannel)
 private:
  inline void set_has_country_code();
  inline void clear_has_country_code();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_language_code();
  inline void clear_has_language_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* country_code_;
  ::std::string* description_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch_BroadcasterInfo > broadcaster_infos_;
  ::std::string* language_code_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAMatch_BroadcasterChannel* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAMatch_CustomGameData : public ::google::protobuf::Message {
 public:
  CMsgDOTAMatch_CustomGameData();
  virtual ~CMsgDOTAMatch_CustomGameData();

  CMsgDOTAMatch_CustomGameData(const CMsgDOTAMatch_CustomGameData& from);

  inline CMsgDOTAMatch_CustomGameData& operator=(const CMsgDOTAMatch_CustomGameData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAMatch_CustomGameData& default_instance();

  void Swap(CMsgDOTAMatch_CustomGameData* other);

  // implements Message ----------------------------------------------

  CMsgDOTAMatch_CustomGameData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAMatch_CustomGameData& from);
  void MergeFrom(const CMsgDOTAMatch_CustomGameData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 custom_game_id = 1;
  inline bool has_custom_game_id() const;
  inline void clear_custom_game_id();
  static const int kCustomGameIdFieldNumber = 1;
  inline ::google::protobuf::uint64 custom_game_id() const;
  inline void set_custom_game_id(::google::protobuf::uint64 value);

  // optional string map_name = 2;
  inline bool has_map_name() const;
  inline void clear_map_name();
  static const int kMapNameFieldNumber = 2;
  inline const ::std::string& map_name() const;
  inline void set_map_name(const ::std::string& value);
  inline void set_map_name(const char* value);
  inline void set_map_name(const char* value, size_t size);
  inline ::std::string* mutable_map_name();
  inline ::std::string* release_map_name();
  inline void set_allocated_map_name(::std::string* map_name);

  // @@protoc_insertion_point(class_scope:CMsgDOTAMatch.CustomGameData)
 private:
  inline void set_has_custom_game_id();
  inline void clear_has_custom_game_id();
  inline void set_has_map_name();
  inline void clear_has_map_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 custom_game_id_;
  ::std::string* map_name_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAMatch_CustomGameData* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAMatch : public ::google::protobuf::Message {
 public:
  CMsgDOTAMatch();
  virtual ~CMsgDOTAMatch();

  CMsgDOTAMatch(const CMsgDOTAMatch& from);

  inline CMsgDOTAMatch& operator=(const CMsgDOTAMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAMatch& default_instance();

  void Swap(CMsgDOTAMatch* other);

  // implements Message ----------------------------------------------

  CMsgDOTAMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAMatch& from);
  void MergeFrom(const CMsgDOTAMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAMatch_Player Player;
  typedef CMsgDOTAMatch_BroadcasterInfo BroadcasterInfo;
  typedef CMsgDOTAMatch_BroadcasterChannel BroadcasterChannel;
  typedef CMsgDOTAMatch_CustomGameData CustomGameData;

  typedef CMsgDOTAMatch_ReplayState ReplayState;
  static const ReplayState REPLAY_AVAILABLE = CMsgDOTAMatch_ReplayState_REPLAY_AVAILABLE;
  static const ReplayState REPLAY_NOT_RECORDED = CMsgDOTAMatch_ReplayState_REPLAY_NOT_RECORDED;
  static const ReplayState REPLAY_EXPIRED = CMsgDOTAMatch_ReplayState_REPLAY_EXPIRED;
  static inline bool ReplayState_IsValid(int value) {
    return CMsgDOTAMatch_ReplayState_IsValid(value);
  }
  static const ReplayState ReplayState_MIN =
    CMsgDOTAMatch_ReplayState_ReplayState_MIN;
  static const ReplayState ReplayState_MAX =
    CMsgDOTAMatch_ReplayState_ReplayState_MAX;
  static const int ReplayState_ARRAYSIZE =
    CMsgDOTAMatch_ReplayState_ReplayState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ReplayState_descriptor() {
    return CMsgDOTAMatch_ReplayState_descriptor();
  }
  static inline const ::std::string& ReplayState_Name(ReplayState value) {
    return CMsgDOTAMatch_ReplayState_Name(value);
  }
  static inline bool ReplayState_Parse(const ::std::string& name,
      ReplayState* value) {
    return CMsgDOTAMatch_ReplayState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 duration = 3;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 3;
  inline ::google::protobuf::uint32 duration() const;
  inline void set_duration(::google::protobuf::uint32 value);

  // optional fixed32 startTime = 4;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 starttime() const;
  inline void set_starttime(::google::protobuf::uint32 value);

  // repeated .CMsgDOTAMatch.Player players = 5;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 5;
  inline const ::CMsgDOTAMatch_Player& players(int index) const;
  inline ::CMsgDOTAMatch_Player* mutable_players(int index);
  inline ::CMsgDOTAMatch_Player* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch_Player >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch_Player >*
      mutable_players();

  // optional uint64 match_id = 6;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 6;
  inline ::google::protobuf::uint64 match_id() const;
  inline void set_match_id(::google::protobuf::uint64 value);

  // repeated uint32 tower_status = 8;
  inline int tower_status_size() const;
  inline void clear_tower_status();
  static const int kTowerStatusFieldNumber = 8;
  inline ::google::protobuf::uint32 tower_status(int index) const;
  inline void set_tower_status(int index, ::google::protobuf::uint32 value);
  inline void add_tower_status(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tower_status() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tower_status();

  // repeated uint32 barracks_status = 9;
  inline int barracks_status_size() const;
  inline void clear_barracks_status();
  static const int kBarracksStatusFieldNumber = 9;
  inline ::google::protobuf::uint32 barracks_status(int index) const;
  inline void set_barracks_status(int index, ::google::protobuf::uint32 value);
  inline void add_barracks_status(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      barracks_status() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_barracks_status();

  // optional uint32 cluster = 10;
  inline bool has_cluster() const;
  inline void clear_cluster();
  static const int kClusterFieldNumber = 10;
  inline ::google::protobuf::uint32 cluster() const;
  inline void set_cluster(::google::protobuf::uint32 value);

  // optional uint32 first_blood_time = 12;
  inline bool has_first_blood_time() const;
  inline void clear_first_blood_time();
  static const int kFirstBloodTimeFieldNumber = 12;
  inline ::google::protobuf::uint32 first_blood_time() const;
  inline void set_first_blood_time(::google::protobuf::uint32 value);

  // optional fixed32 replay_salt = 13;
  inline bool has_replay_salt() const;
  inline void clear_replay_salt();
  static const int kReplaySaltFieldNumber = 13;
  inline ::google::protobuf::uint32 replay_salt() const;
  inline void set_replay_salt(::google::protobuf::uint32 value);

  // optional fixed32 server_ip = 14;
  inline bool has_server_ip() const;
  inline void clear_server_ip();
  static const int kServerIpFieldNumber = 14;
  inline ::google::protobuf::uint32 server_ip() const;
  inline void set_server_ip(::google::protobuf::uint32 value);

  // optional uint32 server_port = 15;
  inline bool has_server_port() const;
  inline void clear_server_port();
  static const int kServerPortFieldNumber = 15;
  inline ::google::protobuf::uint32 server_port() const;
  inline void set_server_port(::google::protobuf::uint32 value);

  // optional uint32 lobby_type = 16;
  inline bool has_lobby_type() const;
  inline void clear_lobby_type();
  static const int kLobbyTypeFieldNumber = 16;
  inline ::google::protobuf::uint32 lobby_type() const;
  inline void set_lobby_type(::google::protobuf::uint32 value);

  // optional uint32 human_players = 17;
  inline bool has_human_players() const;
  inline void clear_human_players();
  static const int kHumanPlayersFieldNumber = 17;
  inline ::google::protobuf::uint32 human_players() const;
  inline void set_human_players(::google::protobuf::uint32 value);

  // optional uint32 average_skill = 18;
  inline bool has_average_skill() const;
  inline void clear_average_skill();
  static const int kAverageSkillFieldNumber = 18;
  inline ::google::protobuf::uint32 average_skill() const;
  inline void set_average_skill(::google::protobuf::uint32 value);

  // optional float game_balance = 19;
  inline bool has_game_balance() const;
  inline void clear_game_balance();
  static const int kGameBalanceFieldNumber = 19;
  inline float game_balance() const;
  inline void set_game_balance(float value);

  // optional uint32 radiant_team_id = 20;
  inline bool has_radiant_team_id() const;
  inline void clear_radiant_team_id();
  static const int kRadiantTeamIdFieldNumber = 20;
  inline ::google::protobuf::uint32 radiant_team_id() const;
  inline void set_radiant_team_id(::google::protobuf::uint32 value);

  // optional uint32 dire_team_id = 21;
  inline bool has_dire_team_id() const;
  inline void clear_dire_team_id();
  static const int kDireTeamIdFieldNumber = 21;
  inline ::google::protobuf::uint32 dire_team_id() const;
  inline void set_dire_team_id(::google::protobuf::uint32 value);

  // optional uint32 leagueid = 22;
  inline bool has_leagueid() const;
  inline void clear_leagueid();
  static const int kLeagueidFieldNumber = 22;
  inline ::google::protobuf::uint32 leagueid() const;
  inline void set_leagueid(::google::protobuf::uint32 value);

  // optional string radiant_team_name = 23;
  inline bool has_radiant_team_name() const;
  inline void clear_radiant_team_name();
  static const int kRadiantTeamNameFieldNumber = 23;
  inline const ::std::string& radiant_team_name() const;
  inline void set_radiant_team_name(const ::std::string& value);
  inline void set_radiant_team_name(const char* value);
  inline void set_radiant_team_name(const char* value, size_t size);
  inline ::std::string* mutable_radiant_team_name();
  inline ::std::string* release_radiant_team_name();
  inline void set_allocated_radiant_team_name(::std::string* radiant_team_name);

  // optional string dire_team_name = 24;
  inline bool has_dire_team_name() const;
  inline void clear_dire_team_name();
  static const int kDireTeamNameFieldNumber = 24;
  inline const ::std::string& dire_team_name() const;
  inline void set_dire_team_name(const ::std::string& value);
  inline void set_dire_team_name(const char* value);
  inline void set_dire_team_name(const char* value, size_t size);
  inline ::std::string* mutable_dire_team_name();
  inline ::std::string* release_dire_team_name();
  inline void set_allocated_dire_team_name(::std::string* dire_team_name);

  // optional uint64 radiant_team_logo = 25;
  inline bool has_radiant_team_logo() const;
  inline void clear_radiant_team_logo();
  static const int kRadiantTeamLogoFieldNumber = 25;
  inline ::google::protobuf::uint64 radiant_team_logo() const;
  inline void set_radiant_team_logo(::google::protobuf::uint64 value);

  // optional uint64 dire_team_logo = 26;
  inline bool has_dire_team_logo() const;
  inline void clear_dire_team_logo();
  static const int kDireTeamLogoFieldNumber = 26;
  inline ::google::protobuf::uint64 dire_team_logo() const;
  inline void set_dire_team_logo(::google::protobuf::uint64 value);

  // optional uint32 radiant_team_complete = 27;
  inline bool has_radiant_team_complete() const;
  inline void clear_radiant_team_complete();
  static const int kRadiantTeamCompleteFieldNumber = 27;
  inline ::google::protobuf::uint32 radiant_team_complete() const;
  inline void set_radiant_team_complete(::google::protobuf::uint32 value);

  // optional uint32 dire_team_complete = 28;
  inline bool has_dire_team_complete() const;
  inline void clear_dire_team_complete();
  static const int kDireTeamCompleteFieldNumber = 28;
  inline ::google::protobuf::uint32 dire_team_complete() const;
  inline void set_dire_team_complete(::google::protobuf::uint32 value);

  // optional uint32 positive_votes = 29;
  inline bool has_positive_votes() const;
  inline void clear_positive_votes();
  static const int kPositiveVotesFieldNumber = 29;
  inline ::google::protobuf::uint32 positive_votes() const;
  inline void set_positive_votes(::google::protobuf::uint32 value);

  // optional uint32 negative_votes = 30;
  inline bool has_negative_votes() const;
  inline void clear_negative_votes();
  static const int kNegativeVotesFieldNumber = 30;
  inline ::google::protobuf::uint32 negative_votes() const;
  inline void set_negative_votes(::google::protobuf::uint32 value);

  // optional .DOTA_GameMode game_mode = 31 [default = DOTA_GAMEMODE_NONE];
  inline bool has_game_mode() const;
  inline void clear_game_mode();
  static const int kGameModeFieldNumber = 31;
  inline ::DOTA_GameMode game_mode() const;
  inline void set_game_mode(::DOTA_GameMode value);

  // repeated .CMatchHeroSelectEvent picks_bans = 32;
  inline int picks_bans_size() const;
  inline void clear_picks_bans();
  static const int kPicksBansFieldNumber = 32;
  inline const ::CMatchHeroSelectEvent& picks_bans(int index) const;
  inline ::CMatchHeroSelectEvent* mutable_picks_bans(int index);
  inline ::CMatchHeroSelectEvent* add_picks_bans();
  inline const ::google::protobuf::RepeatedPtrField< ::CMatchHeroSelectEvent >&
      picks_bans() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMatchHeroSelectEvent >*
      mutable_picks_bans();

  // optional uint64 match_seq_num = 33;
  inline bool has_match_seq_num() const;
  inline void clear_match_seq_num();
  static const int kMatchSeqNumFieldNumber = 33;
  inline ::google::protobuf::uint64 match_seq_num() const;
  inline void set_match_seq_num(::google::protobuf::uint64 value);

  // optional .CMsgDOTAMatch.ReplayState replay_state = 34 [default = REPLAY_AVAILABLE];
  inline bool has_replay_state() const;
  inline void clear_replay_state();
  static const int kReplayStateFieldNumber = 34;
  inline ::CMsgDOTAMatch_ReplayState replay_state() const;
  inline void set_replay_state(::CMsgDOTAMatch_ReplayState value);

  // optional uint32 radiant_guild_id = 35;
  inline bool has_radiant_guild_id() const;
  inline void clear_radiant_guild_id();
  static const int kRadiantGuildIdFieldNumber = 35;
  inline ::google::protobuf::uint32 radiant_guild_id() const;
  inline void set_radiant_guild_id(::google::protobuf::uint32 value);

  // optional uint32 dire_guild_id = 36;
  inline bool has_dire_guild_id() const;
  inline void clear_dire_guild_id();
  static const int kDireGuildIdFieldNumber = 36;
  inline ::google::protobuf::uint32 dire_guild_id() const;
  inline void set_dire_guild_id(::google::protobuf::uint32 value);

  // optional string radiant_team_tag = 37;
  inline bool has_radiant_team_tag() const;
  inline void clear_radiant_team_tag();
  static const int kRadiantTeamTagFieldNumber = 37;
  inline const ::std::string& radiant_team_tag() const;
  inline void set_radiant_team_tag(const ::std::string& value);
  inline void set_radiant_team_tag(const char* value);
  inline void set_radiant_team_tag(const char* value, size_t size);
  inline ::std::string* mutable_radiant_team_tag();
  inline ::std::string* release_radiant_team_tag();
  inline void set_allocated_radiant_team_tag(::std::string* radiant_team_tag);

  // optional string dire_team_tag = 38;
  inline bool has_dire_team_tag() const;
  inline void clear_dire_team_tag();
  static const int kDireTeamTagFieldNumber = 38;
  inline const ::std::string& dire_team_tag() const;
  inline void set_dire_team_tag(const ::std::string& value);
  inline void set_dire_team_tag(const char* value);
  inline void set_dire_team_tag(const char* value, size_t size);
  inline ::std::string* mutable_dire_team_tag();
  inline ::std::string* release_dire_team_tag();
  inline void set_allocated_dire_team_tag(::std::string* dire_team_tag);

  // optional uint32 series_id = 39;
  inline bool has_series_id() const;
  inline void clear_series_id();
  static const int kSeriesIdFieldNumber = 39;
  inline ::google::protobuf::uint32 series_id() const;
  inline void set_series_id(::google::protobuf::uint32 value);

  // optional uint32 series_type = 40;
  inline bool has_series_type() const;
  inline void clear_series_type();
  static const int kSeriesTypeFieldNumber = 40;
  inline ::google::protobuf::uint32 series_type() const;
  inline void set_series_type(::google::protobuf::uint32 value);

  // repeated .CMsgDOTAMatch.BroadcasterChannel broadcaster_channels = 43;
  inline int broadcaster_channels_size() const;
  inline void clear_broadcaster_channels();
  static const int kBroadcasterChannelsFieldNumber = 43;
  inline const ::CMsgDOTAMatch_BroadcasterChannel& broadcaster_channels(int index) const;
  inline ::CMsgDOTAMatch_BroadcasterChannel* mutable_broadcaster_channels(int index);
  inline ::CMsgDOTAMatch_BroadcasterChannel* add_broadcaster_channels();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch_BroadcasterChannel >&
      broadcaster_channels() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch_BroadcasterChannel >*
      mutable_broadcaster_channels();

  // optional uint32 engine = 44;
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 44;
  inline ::google::protobuf::uint32 engine() const;
  inline void set_engine(::google::protobuf::uint32 value);

  // optional .CMsgDOTAMatch.CustomGameData custom_game_data = 45;
  inline bool has_custom_game_data() const;
  inline void clear_custom_game_data();
  static const int kCustomGameDataFieldNumber = 45;
  inline const ::CMsgDOTAMatch_CustomGameData& custom_game_data() const;
  inline ::CMsgDOTAMatch_CustomGameData* mutable_custom_game_data();
  inline ::CMsgDOTAMatch_CustomGameData* release_custom_game_data();
  inline void set_allocated_custom_game_data(::CMsgDOTAMatch_CustomGameData* custom_game_data);

  // optional uint32 match_flags = 46;
  inline bool has_match_flags() const;
  inline void clear_match_flags();
  static const int kMatchFlagsFieldNumber = 46;
  inline ::google::protobuf::uint32 match_flags() const;
  inline void set_match_flags(::google::protobuf::uint32 value);

  // optional fixed32 private_metadata_key = 47;
  inline bool has_private_metadata_key() const;
  inline void clear_private_metadata_key();
  static const int kPrivateMetadataKeyFieldNumber = 47;
  inline ::google::protobuf::uint32 private_metadata_key() const;
  inline void set_private_metadata_key(::google::protobuf::uint32 value);

  // optional uint32 radiant_team_score = 48;
  inline bool has_radiant_team_score() const;
  inline void clear_radiant_team_score();
  static const int kRadiantTeamScoreFieldNumber = 48;
  inline ::google::protobuf::uint32 radiant_team_score() const;
  inline void set_radiant_team_score(::google::protobuf::uint32 value);

  // optional uint32 dire_team_score = 49;
  inline bool has_dire_team_score() const;
  inline void clear_dire_team_score();
  static const int kDireTeamScoreFieldNumber = 49;
  inline ::google::protobuf::uint32 dire_team_score() const;
  inline void set_dire_team_score(::google::protobuf::uint32 value);

  // optional .EMatchOutcome match_outcome = 50 [default = k_EMatchOutcome_Unknown];
  inline bool has_match_outcome() const;
  inline void clear_match_outcome();
  static const int kMatchOutcomeFieldNumber = 50;
  inline ::EMatchOutcome match_outcome() const;
  inline void set_match_outcome(::EMatchOutcome value);

  // optional uint32 tournament_id = 51;
  inline bool has_tournament_id() const;
  inline void clear_tournament_id();
  static const int kTournamentIdFieldNumber = 51;
  inline ::google::protobuf::uint32 tournament_id() const;
  inline void set_tournament_id(::google::protobuf::uint32 value);

  // optional uint32 tournament_round = 52;
  inline bool has_tournament_round() const;
  inline void clear_tournament_round();
  static const int kTournamentRoundFieldNumber = 52;
  inline ::google::protobuf::uint32 tournament_round() const;
  inline void set_tournament_round(::google::protobuf::uint32 value);

  // optional uint32 pre_game_duration = 53;
  inline bool has_pre_game_duration() const;
  inline void clear_pre_game_duration();
  static const int kPreGameDurationFieldNumber = 53;
  inline ::google::protobuf::uint32 pre_game_duration() const;
  inline void set_pre_game_duration(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAMatch)
 private:
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_match_id();
  inline void clear_has_match_id();
  inline void set_has_cluster();
  inline void clear_has_cluster();
  inline void set_has_first_blood_time();
  inline void clear_has_first_blood_time();
  inline void set_has_replay_salt();
  inline void clear_has_replay_salt();
  inline void set_has_server_ip();
  inline void clear_has_server_ip();
  inline void set_has_server_port();
  inline void clear_has_server_port();
  inline void set_has_lobby_type();
  inline void clear_has_lobby_type();
  inline void set_has_human_players();
  inline void clear_has_human_players();
  inline void set_has_average_skill();
  inline void clear_has_average_skill();
  inline void set_has_game_balance();
  inline void clear_has_game_balance();
  inline void set_has_radiant_team_id();
  inline void clear_has_radiant_team_id();
  inline void set_has_dire_team_id();
  inline void clear_has_dire_team_id();
  inline void set_has_leagueid();
  inline void clear_has_leagueid();
  inline void set_has_radiant_team_name();
  inline void clear_has_radiant_team_name();
  inline void set_has_dire_team_name();
  inline void clear_has_dire_team_name();
  inline void set_has_radiant_team_logo();
  inline void clear_has_radiant_team_logo();
  inline void set_has_dire_team_logo();
  inline void clear_has_dire_team_logo();
  inline void set_has_radiant_team_complete();
  inline void clear_has_radiant_team_complete();
  inline void set_has_dire_team_complete();
  inline void clear_has_dire_team_complete();
  inline void set_has_positive_votes();
  inline void clear_has_positive_votes();
  inline void set_has_negative_votes();
  inline void clear_has_negative_votes();
  inline void set_has_game_mode();
  inline void clear_has_game_mode();
  inline void set_has_match_seq_num();
  inline void clear_has_match_seq_num();
  inline void set_has_replay_state();
  inline void clear_has_replay_state();
  inline void set_has_radiant_guild_id();
  inline void clear_has_radiant_guild_id();
  inline void set_has_dire_guild_id();
  inline void clear_has_dire_guild_id();
  inline void set_has_radiant_team_tag();
  inline void clear_has_radiant_team_tag();
  inline void set_has_dire_team_tag();
  inline void clear_has_dire_team_tag();
  inline void set_has_series_id();
  inline void clear_has_series_id();
  inline void set_has_series_type();
  inline void clear_has_series_type();
  inline void set_has_engine();
  inline void clear_has_engine();
  inline void set_has_custom_game_data();
  inline void clear_has_custom_game_data();
  inline void set_has_match_flags();
  inline void clear_has_match_flags();
  inline void set_has_private_metadata_key();
  inline void clear_has_private_metadata_key();
  inline void set_has_radiant_team_score();
  inline void clear_has_radiant_team_score();
  inline void set_has_dire_team_score();
  inline void clear_has_dire_team_score();
  inline void set_has_match_outcome();
  inline void clear_has_match_outcome();
  inline void set_has_tournament_id();
  inline void clear_has_tournament_id();
  inline void set_has_tournament_round();
  inline void clear_has_tournament_round();
  inline void set_has_pre_game_duration();
  inline void clear_has_pre_game_duration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::uint32 duration_;
  ::google::protobuf::uint32 starttime_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch_Player > players_;
  ::google::protobuf::uint64 match_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tower_status_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > barracks_status_;
  ::google::protobuf::uint32 cluster_;
  ::google::protobuf::uint32 first_blood_time_;
  ::google::protobuf::uint32 replay_salt_;
  ::google::protobuf::uint32 server_ip_;
  ::google::protobuf::uint32 server_port_;
  ::google::protobuf::uint32 lobby_type_;
  ::google::protobuf::uint32 human_players_;
  ::google::protobuf::uint32 average_skill_;
  float game_balance_;
  ::google::protobuf::uint32 radiant_team_id_;
  ::google::protobuf::uint32 dire_team_id_;
  ::google::protobuf::uint32 leagueid_;
  ::std::string* radiant_team_name_;
  ::std::string* dire_team_name_;
  ::google::protobuf::uint64 radiant_team_logo_;
  ::google::protobuf::uint64 dire_team_logo_;
  ::google::protobuf::uint32 radiant_team_complete_;
  ::google::protobuf::uint32 dire_team_complete_;
  ::google::protobuf::uint32 positive_votes_;
  ::google::protobuf::uint32 negative_votes_;
  ::google::protobuf::RepeatedPtrField< ::CMatchHeroSelectEvent > picks_bans_;
  int game_mode_;
  int replay_state_;
  ::google::protobuf::uint64 match_seq_num_;
  ::google::protobuf::uint32 radiant_guild_id_;
  ::google::protobuf::uint32 dire_guild_id_;
  ::std::string* radiant_team_tag_;
  ::std::string* dire_team_tag_;
  ::google::protobuf::uint32 series_id_;
  ::google::protobuf::uint32 series_type_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch_BroadcasterChannel > broadcaster_channels_;
  ::CMsgDOTAMatch_CustomGameData* custom_game_data_;
  ::google::protobuf::uint32 engine_;
  ::google::protobuf::uint32 match_flags_;
  ::google::protobuf::uint32 private_metadata_key_;
  ::google::protobuf::uint32 radiant_team_score_;
  ::google::protobuf::uint32 dire_team_score_;
  int match_outcome_;
  ::google::protobuf::uint32 tournament_id_;
  ::google::protobuf::uint32 tournament_round_;
  ::google::protobuf::uint32 pre_game_duration_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAMatch* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPlayerCard_StatModifier : public ::google::protobuf::Message {
 public:
  CMsgPlayerCard_StatModifier();
  virtual ~CMsgPlayerCard_StatModifier();

  CMsgPlayerCard_StatModifier(const CMsgPlayerCard_StatModifier& from);

  inline CMsgPlayerCard_StatModifier& operator=(const CMsgPlayerCard_StatModifier& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPlayerCard_StatModifier& default_instance();

  void Swap(CMsgPlayerCard_StatModifier* other);

  // implements Message ----------------------------------------------

  CMsgPlayerCard_StatModifier* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPlayerCard_StatModifier& from);
  void MergeFrom(const CMsgPlayerCard_StatModifier& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stat = 1;
  inline bool has_stat() const;
  inline void clear_stat();
  static const int kStatFieldNumber = 1;
  inline ::google::protobuf::uint32 stat() const;
  inline void set_stat(::google::protobuf::uint32 value);

  // optional uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgPlayerCard.StatModifier)
 private:
  inline void set_has_stat();
  inline void clear_has_stat();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 stat_;
  ::google::protobuf::uint32 value_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgPlayerCard_StatModifier* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPlayerCard : public ::google::protobuf::Message {
 public:
  CMsgPlayerCard();
  virtual ~CMsgPlayerCard();

  CMsgPlayerCard(const CMsgPlayerCard& from);

  inline CMsgPlayerCard& operator=(const CMsgPlayerCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPlayerCard& default_instance();

  void Swap(CMsgPlayerCard* other);

  // implements Message ----------------------------------------------

  CMsgPlayerCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPlayerCard& from);
  void MergeFrom(const CMsgPlayerCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgPlayerCard_StatModifier StatModifier;

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // repeated .CMsgPlayerCard.StatModifier stat_modifier = 2;
  inline int stat_modifier_size() const;
  inline void clear_stat_modifier();
  static const int kStatModifierFieldNumber = 2;
  inline const ::CMsgPlayerCard_StatModifier& stat_modifier(int index) const;
  inline ::CMsgPlayerCard_StatModifier* mutable_stat_modifier(int index);
  inline ::CMsgPlayerCard_StatModifier* add_stat_modifier();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgPlayerCard_StatModifier >&
      stat_modifier() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgPlayerCard_StatModifier >*
      mutable_stat_modifier();

  // @@protoc_insertion_point(class_scope:CMsgPlayerCard)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgPlayerCard_StatModifier > stat_modifier_;
  ::google::protobuf::uint32 account_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgPlayerCard* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyPlayerStats : public ::google::protobuf::Message {
 public:
  CMsgDOTAFantasyPlayerStats();
  virtual ~CMsgDOTAFantasyPlayerStats();

  CMsgDOTAFantasyPlayerStats(const CMsgDOTAFantasyPlayerStats& from);

  inline CMsgDOTAFantasyPlayerStats& operator=(const CMsgDOTAFantasyPlayerStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAFantasyPlayerStats& default_instance();

  void Swap(CMsgDOTAFantasyPlayerStats* other);

  // implements Message ----------------------------------------------

  CMsgDOTAFantasyPlayerStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAFantasyPlayerStats& from);
  void MergeFrom(const CMsgDOTAFantasyPlayerStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 player_account_id = 1;
  inline bool has_player_account_id() const;
  inline void clear_player_account_id();
  static const int kPlayerAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 player_account_id() const;
  inline void set_player_account_id(::google::protobuf::uint32 value);

  // optional uint64 match_id = 2;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 2;
  inline ::google::protobuf::uint64 match_id() const;
  inline void set_match_id(::google::protobuf::uint64 value);

  // optional bool match_completed = 3;
  inline bool has_match_completed() const;
  inline void clear_match_completed();
  static const int kMatchCompletedFieldNumber = 3;
  inline bool match_completed() const;
  inline void set_match_completed(bool value);

  // optional uint32 team_id = 4;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 4;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // optional uint32 league_id = 5;
  inline bool has_league_id() const;
  inline void clear_league_id();
  static const int kLeagueIdFieldNumber = 5;
  inline ::google::protobuf::uint32 league_id() const;
  inline void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 delay = 6;
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 6;
  inline ::google::protobuf::uint32 delay() const;
  inline void set_delay(::google::protobuf::uint32 value);

  // optional uint32 series_id = 7;
  inline bool has_series_id() const;
  inline void clear_series_id();
  static const int kSeriesIdFieldNumber = 7;
  inline ::google::protobuf::uint32 series_id() const;
  inline void set_series_id(::google::protobuf::uint32 value);

  // optional uint32 series_type = 8;
  inline bool has_series_type() const;
  inline void clear_series_type();
  static const int kSeriesTypeFieldNumber = 8;
  inline ::google::protobuf::uint32 series_type() const;
  inline void set_series_type(::google::protobuf::uint32 value);

  // optional uint32 kills = 10;
  inline bool has_kills() const;
  inline void clear_kills();
  static const int kKillsFieldNumber = 10;
  inline ::google::protobuf::uint32 kills() const;
  inline void set_kills(::google::protobuf::uint32 value);

  // optional uint32 deaths = 11;
  inline bool has_deaths() const;
  inline void clear_deaths();
  static const int kDeathsFieldNumber = 11;
  inline ::google::protobuf::uint32 deaths() const;
  inline void set_deaths(::google::protobuf::uint32 value);

  // optional uint32 cs = 12;
  inline bool has_cs() const;
  inline void clear_cs();
  static const int kCsFieldNumber = 12;
  inline ::google::protobuf::uint32 cs() const;
  inline void set_cs(::google::protobuf::uint32 value);

  // optional float gpm = 13;
  inline bool has_gpm() const;
  inline void clear_gpm();
  static const int kGpmFieldNumber = 13;
  inline float gpm() const;
  inline void set_gpm(float value);

  // optional uint32 tower_kills = 14;
  inline bool has_tower_kills() const;
  inline void clear_tower_kills();
  static const int kTowerKillsFieldNumber = 14;
  inline ::google::protobuf::uint32 tower_kills() const;
  inline void set_tower_kills(::google::protobuf::uint32 value);

  // optional uint32 roshan_kills = 15;
  inline bool has_roshan_kills() const;
  inline void clear_roshan_kills();
  static const int kRoshanKillsFieldNumber = 15;
  inline ::google::protobuf::uint32 roshan_kills() const;
  inline void set_roshan_kills(::google::protobuf::uint32 value);

  // optional float teamfight_participation = 16;
  inline bool has_teamfight_participation() const;
  inline void clear_teamfight_participation();
  static const int kTeamfightParticipationFieldNumber = 16;
  inline float teamfight_participation() const;
  inline void set_teamfight_participation(float value);

  // optional uint32 wards_placed = 17;
  inline bool has_wards_placed() const;
  inline void clear_wards_placed();
  static const int kWardsPlacedFieldNumber = 17;
  inline ::google::protobuf::uint32 wards_placed() const;
  inline void set_wards_placed(::google::protobuf::uint32 value);

  // optional uint32 camps_stacked = 18;
  inline bool has_camps_stacked() const;
  inline void clear_camps_stacked();
  static const int kCampsStackedFieldNumber = 18;
  inline ::google::protobuf::uint32 camps_stacked() const;
  inline void set_camps_stacked(::google::protobuf::uint32 value);

  // optional uint32 runes_grabbed = 19;
  inline bool has_runes_grabbed() const;
  inline void clear_runes_grabbed();
  static const int kRunesGrabbedFieldNumber = 19;
  inline ::google::protobuf::uint32 runes_grabbed() const;
  inline void set_runes_grabbed(::google::protobuf::uint32 value);

  // optional uint32 first_blood = 20;
  inline bool has_first_blood() const;
  inline void clear_first_blood();
  static const int kFirstBloodFieldNumber = 20;
  inline ::google::protobuf::uint32 first_blood() const;
  inline void set_first_blood(::google::protobuf::uint32 value);

  // optional float stuns = 21;
  inline bool has_stuns() const;
  inline void clear_stuns();
  static const int kStunsFieldNumber = 21;
  inline float stuns() const;
  inline void set_stuns(float value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyPlayerStats)
 private:
  inline void set_has_player_account_id();
  inline void clear_has_player_account_id();
  inline void set_has_match_id();
  inline void clear_has_match_id();
  inline void set_has_match_completed();
  inline void clear_has_match_completed();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_league_id();
  inline void clear_has_league_id();
  inline void set_has_delay();
  inline void clear_has_delay();
  inline void set_has_series_id();
  inline void clear_has_series_id();
  inline void set_has_series_type();
  inline void clear_has_series_type();
  inline void set_has_kills();
  inline void clear_has_kills();
  inline void set_has_deaths();
  inline void clear_has_deaths();
  inline void set_has_cs();
  inline void clear_has_cs();
  inline void set_has_gpm();
  inline void clear_has_gpm();
  inline void set_has_tower_kills();
  inline void clear_has_tower_kills();
  inline void set_has_roshan_kills();
  inline void clear_has_roshan_kills();
  inline void set_has_teamfight_participation();
  inline void clear_has_teamfight_participation();
  inline void set_has_wards_placed();
  inline void clear_has_wards_placed();
  inline void set_has_camps_stacked();
  inline void clear_has_camps_stacked();
  inline void set_has_runes_grabbed();
  inline void clear_has_runes_grabbed();
  inline void set_has_first_blood();
  inline void clear_has_first_blood();
  inline void set_has_stuns();
  inline void clear_has_stuns();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 match_id_;
  ::google::protobuf::uint32 player_account_id_;
  bool match_completed_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 delay_;
  ::google::protobuf::uint32 series_id_;
  ::google::protobuf::uint32 series_type_;
  ::google::protobuf::uint32 kills_;
  ::google::protobuf::uint32 deaths_;
  ::google::protobuf::uint32 cs_;
  float gpm_;
  ::google::protobuf::uint32 tower_kills_;
  ::google::protobuf::uint32 roshan_kills_;
  float teamfight_participation_;
  ::google::protobuf::uint32 wards_placed_;
  ::google::protobuf::uint32 camps_stacked_;
  ::google::protobuf::uint32 runes_grabbed_;
  ::google::protobuf::uint32 first_blood_;
  float stuns_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAFantasyPlayerStats* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyPlayerMatchStats : public ::google::protobuf::Message {
 public:
  CMsgDOTAFantasyPlayerMatchStats();
  virtual ~CMsgDOTAFantasyPlayerMatchStats();

  CMsgDOTAFantasyPlayerMatchStats(const CMsgDOTAFantasyPlayerMatchStats& from);

  inline CMsgDOTAFantasyPlayerMatchStats& operator=(const CMsgDOTAFantasyPlayerMatchStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAFantasyPlayerMatchStats& default_instance();

  void Swap(CMsgDOTAFantasyPlayerMatchStats* other);

  // implements Message ----------------------------------------------

  CMsgDOTAFantasyPlayerMatchStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAFantasyPlayerMatchStats& from);
  void MergeFrom(const CMsgDOTAFantasyPlayerMatchStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTAFantasyPlayerStats matches = 1;
  inline int matches_size() const;
  inline void clear_matches();
  static const int kMatchesFieldNumber = 1;
  inline const ::CMsgDOTAFantasyPlayerStats& matches(int index) const;
  inline ::CMsgDOTAFantasyPlayerStats* mutable_matches(int index);
  inline ::CMsgDOTAFantasyPlayerStats* add_matches();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats >&
      matches() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats >*
      mutable_matches();

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyPlayerMatchStats)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats > matches_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAFantasyPlayerMatchStats* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTABotDebugInfo_Bot_Mode : public ::google::protobuf::Message {
 public:
  CMsgDOTABotDebugInfo_Bot_Mode();
  virtual ~CMsgDOTABotDebugInfo_Bot_Mode();

  CMsgDOTABotDebugInfo_Bot_Mode(const CMsgDOTABotDebugInfo_Bot_Mode& from);

  inline CMsgDOTABotDebugInfo_Bot_Mode& operator=(const CMsgDOTABotDebugInfo_Bot_Mode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTABotDebugInfo_Bot_Mode& default_instance();

  void Swap(CMsgDOTABotDebugInfo_Bot_Mode* other);

  // implements Message ----------------------------------------------

  CMsgDOTABotDebugInfo_Bot_Mode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTABotDebugInfo_Bot_Mode& from);
  void MergeFrom(const CMsgDOTABotDebugInfo_Bot_Mode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mode_id = 1;
  inline bool has_mode_id() const;
  inline void clear_mode_id();
  static const int kModeIdFieldNumber = 1;
  inline ::google::protobuf::uint32 mode_id() const;
  inline void set_mode_id(::google::protobuf::uint32 value);

  // optional float desire = 2;
  inline bool has_desire() const;
  inline void clear_desire();
  static const int kDesireFieldNumber = 2;
  inline float desire() const;
  inline void set_desire(float value);

  // optional uint32 target_entity = 3;
  inline bool has_target_entity() const;
  inline void clear_target_entity();
  static const int kTargetEntityFieldNumber = 3;
  inline ::google::protobuf::uint32 target_entity() const;
  inline void set_target_entity(::google::protobuf::uint32 value);

  // optional uint32 target_x = 4;
  inline bool has_target_x() const;
  inline void clear_target_x();
  static const int kTargetXFieldNumber = 4;
  inline ::google::protobuf::uint32 target_x() const;
  inline void set_target_x(::google::protobuf::uint32 value);

  // optional uint32 target_y = 5;
  inline bool has_target_y() const;
  inline void clear_target_y();
  static const int kTargetYFieldNumber = 5;
  inline ::google::protobuf::uint32 target_y() const;
  inline void set_target_y(::google::protobuf::uint32 value);

  // optional uint32 target_z = 6;
  inline bool has_target_z() const;
  inline void clear_target_z();
  static const int kTargetZFieldNumber = 6;
  inline ::google::protobuf::uint32 target_z() const;
  inline void set_target_z(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTABotDebugInfo.Bot.Mode)
 private:
  inline void set_has_mode_id();
  inline void clear_has_mode_id();
  inline void set_has_desire();
  inline void clear_has_desire();
  inline void set_has_target_entity();
  inline void clear_has_target_entity();
  inline void set_has_target_x();
  inline void clear_has_target_x();
  inline void set_has_target_y();
  inline void clear_has_target_y();
  inline void set_has_target_z();
  inline void clear_has_target_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mode_id_;
  float desire_;
  ::google::protobuf::uint32 target_entity_;
  ::google::protobuf::uint32 target_x_;
  ::google::protobuf::uint32 target_y_;
  ::google::protobuf::uint32 target_z_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTABotDebugInfo_Bot_Mode* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTABotDebugInfo_Bot_Action : public ::google::protobuf::Message {
 public:
  CMsgDOTABotDebugInfo_Bot_Action();
  virtual ~CMsgDOTABotDebugInfo_Bot_Action();

  CMsgDOTABotDebugInfo_Bot_Action(const CMsgDOTABotDebugInfo_Bot_Action& from);

  inline CMsgDOTABotDebugInfo_Bot_Action& operator=(const CMsgDOTABotDebugInfo_Bot_Action& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTABotDebugInfo_Bot_Action& default_instance();

  void Swap(CMsgDOTABotDebugInfo_Bot_Action* other);

  // implements Message ----------------------------------------------

  CMsgDOTABotDebugInfo_Bot_Action* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTABotDebugInfo_Bot_Action& from);
  void MergeFrom(const CMsgDOTABotDebugInfo_Bot_Action& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 action_id = 1;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 action_id() const;
  inline void set_action_id(::google::protobuf::uint32 value);

  // optional string action_target = 2;
  inline bool has_action_target() const;
  inline void clear_action_target();
  static const int kActionTargetFieldNumber = 2;
  inline const ::std::string& action_target() const;
  inline void set_action_target(const ::std::string& value);
  inline void set_action_target(const char* value);
  inline void set_action_target(const char* value, size_t size);
  inline ::std::string* mutable_action_target();
  inline ::std::string* release_action_target();
  inline void set_allocated_action_target(::std::string* action_target);

  // @@protoc_insertion_point(class_scope:CMsgDOTABotDebugInfo.Bot.Action)
 private:
  inline void set_has_action_id();
  inline void clear_has_action_id();
  inline void set_has_action_target();
  inline void clear_has_action_target();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* action_target_;
  ::google::protobuf::uint32 action_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTABotDebugInfo_Bot_Action* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTABotDebugInfo_Bot : public ::google::protobuf::Message {
 public:
  CMsgDOTABotDebugInfo_Bot();
  virtual ~CMsgDOTABotDebugInfo_Bot();

  CMsgDOTABotDebugInfo_Bot(const CMsgDOTABotDebugInfo_Bot& from);

  inline CMsgDOTABotDebugInfo_Bot& operator=(const CMsgDOTABotDebugInfo_Bot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTABotDebugInfo_Bot& default_instance();

  void Swap(CMsgDOTABotDebugInfo_Bot* other);

  // implements Message ----------------------------------------------

  CMsgDOTABotDebugInfo_Bot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTABotDebugInfo_Bot& from);
  void MergeFrom(const CMsgDOTABotDebugInfo_Bot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTABotDebugInfo_Bot_Mode Mode;
  typedef CMsgDOTABotDebugInfo_Bot_Action Action;

  // accessors -------------------------------------------------------

  // optional uint32 player_owner_id = 1;
  inline bool has_player_owner_id() const;
  inline void clear_player_owner_id();
  static const int kPlayerOwnerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 player_owner_id() const;
  inline void set_player_owner_id(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 difficulty = 3;
  inline bool has_difficulty() const;
  inline void clear_difficulty();
  static const int kDifficultyFieldNumber = 3;
  inline ::google::protobuf::uint32 difficulty() const;
  inline void set_difficulty(::google::protobuf::uint32 value);

  // optional uint32 power_current = 4;
  inline bool has_power_current() const;
  inline void clear_power_current();
  static const int kPowerCurrentFieldNumber = 4;
  inline ::google::protobuf::uint32 power_current() const;
  inline void set_power_current(::google::protobuf::uint32 value);

  // optional uint32 power_max = 5;
  inline bool has_power_max() const;
  inline void clear_power_max();
  static const int kPowerMaxFieldNumber = 5;
  inline ::google::protobuf::uint32 power_max() const;
  inline void set_power_max(::google::protobuf::uint32 value);

  // optional uint32 move_target_x = 6;
  inline bool has_move_target_x() const;
  inline void clear_move_target_x();
  static const int kMoveTargetXFieldNumber = 6;
  inline ::google::protobuf::uint32 move_target_x() const;
  inline void set_move_target_x(::google::protobuf::uint32 value);

  // optional uint32 move_target_y = 7;
  inline bool has_move_target_y() const;
  inline void clear_move_target_y();
  static const int kMoveTargetYFieldNumber = 7;
  inline ::google::protobuf::uint32 move_target_y() const;
  inline void set_move_target_y(::google::protobuf::uint32 value);

  // optional uint32 move_target_z = 8;
  inline bool has_move_target_z() const;
  inline void clear_move_target_z();
  static const int kMoveTargetZFieldNumber = 8;
  inline ::google::protobuf::uint32 move_target_z() const;
  inline void set_move_target_z(::google::protobuf::uint32 value);

  // optional uint32 active_mode_id = 9;
  inline bool has_active_mode_id() const;
  inline void clear_active_mode_id();
  static const int kActiveModeIdFieldNumber = 9;
  inline ::google::protobuf::uint32 active_mode_id() const;
  inline void set_active_mode_id(::google::protobuf::uint32 value);

  // optional float execution_time = 10;
  inline bool has_execution_time() const;
  inline void clear_execution_time();
  static const int kExecutionTimeFieldNumber = 10;
  inline float execution_time() const;
  inline void set_execution_time(float value);

  // repeated .CMsgDOTABotDebugInfo.Bot.Mode modes = 11;
  inline int modes_size() const;
  inline void clear_modes();
  static const int kModesFieldNumber = 11;
  inline const ::CMsgDOTABotDebugInfo_Bot_Mode& modes(int index) const;
  inline ::CMsgDOTABotDebugInfo_Bot_Mode* mutable_modes(int index);
  inline ::CMsgDOTABotDebugInfo_Bot_Mode* add_modes();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTABotDebugInfo_Bot_Mode >&
      modes() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTABotDebugInfo_Bot_Mode >*
      mutable_modes();

  // optional .CMsgDOTABotDebugInfo.Bot.Action action = 12;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 12;
  inline const ::CMsgDOTABotDebugInfo_Bot_Action& action() const;
  inline ::CMsgDOTABotDebugInfo_Bot_Action* mutable_action();
  inline ::CMsgDOTABotDebugInfo_Bot_Action* release_action();
  inline void set_allocated_action(::CMsgDOTABotDebugInfo_Bot_Action* action);

  // @@protoc_insertion_point(class_scope:CMsgDOTABotDebugInfo.Bot)
 private:
  inline void set_has_player_owner_id();
  inline void clear_has_player_owner_id();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_difficulty();
  inline void clear_has_difficulty();
  inline void set_has_power_current();
  inline void clear_has_power_current();
  inline void set_has_power_max();
  inline void clear_has_power_max();
  inline void set_has_move_target_x();
  inline void clear_has_move_target_x();
  inline void set_has_move_target_y();
  inline void clear_has_move_target_y();
  inline void set_has_move_target_z();
  inline void clear_has_move_target_z();
  inline void set_has_active_mode_id();
  inline void clear_has_active_mode_id();
  inline void set_has_execution_time();
  inline void clear_has_execution_time();
  inline void set_has_action();
  inline void clear_has_action();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 player_owner_id_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 difficulty_;
  ::google::protobuf::uint32 power_current_;
  ::google::protobuf::uint32 power_max_;
  ::google::protobuf::uint32 move_target_x_;
  ::google::protobuf::uint32 move_target_y_;
  ::google::protobuf::uint32 move_target_z_;
  ::google::protobuf::uint32 active_mode_id_;
  float execution_time_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTABotDebugInfo_Bot_Mode > modes_;
  ::CMsgDOTABotDebugInfo_Bot_Action* action_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTABotDebugInfo_Bot* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTABotDebugInfo : public ::google::protobuf::Message {
 public:
  CMsgDOTABotDebugInfo();
  virtual ~CMsgDOTABotDebugInfo();

  CMsgDOTABotDebugInfo(const CMsgDOTABotDebugInfo& from);

  inline CMsgDOTABotDebugInfo& operator=(const CMsgDOTABotDebugInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTABotDebugInfo& default_instance();

  void Swap(CMsgDOTABotDebugInfo* other);

  // implements Message ----------------------------------------------

  CMsgDOTABotDebugInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTABotDebugInfo& from);
  void MergeFrom(const CMsgDOTABotDebugInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTABotDebugInfo_Bot Bot;

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTABotDebugInfo.Bot bots = 1;
  inline int bots_size() const;
  inline void clear_bots();
  static const int kBotsFieldNumber = 1;
  inline const ::CMsgDOTABotDebugInfo_Bot& bots(int index) const;
  inline ::CMsgDOTABotDebugInfo_Bot* mutable_bots(int index);
  inline ::CMsgDOTABotDebugInfo_Bot* add_bots();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTABotDebugInfo_Bot >&
      bots() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTABotDebugInfo_Bot >*
      mutable_bots();

  // optional float desire_push_lane_top = 2;
  inline bool has_desire_push_lane_top() const;
  inline void clear_desire_push_lane_top();
  static const int kDesirePushLaneTopFieldNumber = 2;
  inline float desire_push_lane_top() const;
  inline void set_desire_push_lane_top(float value);

  // optional float desire_push_lane_mid = 3;
  inline bool has_desire_push_lane_mid() const;
  inline void clear_desire_push_lane_mid();
  static const int kDesirePushLaneMidFieldNumber = 3;
  inline float desire_push_lane_mid() const;
  inline void set_desire_push_lane_mid(float value);

  // optional float desire_push_lane_bot = 4;
  inline bool has_desire_push_lane_bot() const;
  inline void clear_desire_push_lane_bot();
  static const int kDesirePushLaneBotFieldNumber = 4;
  inline float desire_push_lane_bot() const;
  inline void set_desire_push_lane_bot(float value);

  // optional float desire_defend_lane_top = 5;
  inline bool has_desire_defend_lane_top() const;
  inline void clear_desire_defend_lane_top();
  static const int kDesireDefendLaneTopFieldNumber = 5;
  inline float desire_defend_lane_top() const;
  inline void set_desire_defend_lane_top(float value);

  // optional float desire_defend_lane_mid = 6;
  inline bool has_desire_defend_lane_mid() const;
  inline void clear_desire_defend_lane_mid();
  static const int kDesireDefendLaneMidFieldNumber = 6;
  inline float desire_defend_lane_mid() const;
  inline void set_desire_defend_lane_mid(float value);

  // optional float desire_defend_lane_bot = 7;
  inline bool has_desire_defend_lane_bot() const;
  inline void clear_desire_defend_lane_bot();
  static const int kDesireDefendLaneBotFieldNumber = 7;
  inline float desire_defend_lane_bot() const;
  inline void set_desire_defend_lane_bot(float value);

  // optional float desire_farm_lane_top = 8;
  inline bool has_desire_farm_lane_top() const;
  inline void clear_desire_farm_lane_top();
  static const int kDesireFarmLaneTopFieldNumber = 8;
  inline float desire_farm_lane_top() const;
  inline void set_desire_farm_lane_top(float value);

  // optional float desire_farm_lane_mid = 9;
  inline bool has_desire_farm_lane_mid() const;
  inline void clear_desire_farm_lane_mid();
  static const int kDesireFarmLaneMidFieldNumber = 9;
  inline float desire_farm_lane_mid() const;
  inline void set_desire_farm_lane_mid(float value);

  // optional float desire_farm_lane_bot = 10;
  inline bool has_desire_farm_lane_bot() const;
  inline void clear_desire_farm_lane_bot();
  static const int kDesireFarmLaneBotFieldNumber = 10;
  inline float desire_farm_lane_bot() const;
  inline void set_desire_farm_lane_bot(float value);

  // optional float desire_farm_roshan = 11;
  inline bool has_desire_farm_roshan() const;
  inline void clear_desire_farm_roshan();
  static const int kDesireFarmRoshanFieldNumber = 11;
  inline float desire_farm_roshan() const;
  inline void set_desire_farm_roshan(float value);

  // optional float execution_time = 12;
  inline bool has_execution_time() const;
  inline void clear_execution_time();
  static const int kExecutionTimeFieldNumber = 12;
  inline float execution_time() const;
  inline void set_execution_time(float value);

  // @@protoc_insertion_point(class_scope:CMsgDOTABotDebugInfo)
 private:
  inline void set_has_desire_push_lane_top();
  inline void clear_has_desire_push_lane_top();
  inline void set_has_desire_push_lane_mid();
  inline void clear_has_desire_push_lane_mid();
  inline void set_has_desire_push_lane_bot();
  inline void clear_has_desire_push_lane_bot();
  inline void set_has_desire_defend_lane_top();
  inline void clear_has_desire_defend_lane_top();
  inline void set_has_desire_defend_lane_mid();
  inline void clear_has_desire_defend_lane_mid();
  inline void set_has_desire_defend_lane_bot();
  inline void clear_has_desire_defend_lane_bot();
  inline void set_has_desire_farm_lane_top();
  inline void clear_has_desire_farm_lane_top();
  inline void set_has_desire_farm_lane_mid();
  inline void clear_has_desire_farm_lane_mid();
  inline void set_has_desire_farm_lane_bot();
  inline void clear_has_desire_farm_lane_bot();
  inline void set_has_desire_farm_roshan();
  inline void clear_has_desire_farm_roshan();
  inline void set_has_execution_time();
  inline void clear_has_execution_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTABotDebugInfo_Bot > bots_;
  float desire_push_lane_top_;
  float desire_push_lane_mid_;
  float desire_push_lane_bot_;
  float desire_defend_lane_top_;
  float desire_defend_lane_mid_;
  float desire_defend_lane_bot_;
  float desire_farm_lane_top_;
  float desire_farm_lane_mid_;
  float desire_farm_lane_bot_;
  float desire_farm_roshan_;
  float execution_time_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTABotDebugInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// CSODOTAGameAccountClient

// optional uint32 account_id = 1;
inline bool CSODOTAGameAccountClient::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAGameAccountClient::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAGameAccountClient::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.account_id)
  return account_id_;
}
inline void CSODOTAGameAccountClient::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.account_id)
}

// optional uint32 wins = 3;
inline bool CSODOTAGameAccountClient::has_wins() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_wins() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAGameAccountClient::clear_has_wins() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAGameAccountClient::clear_wins() {
  wins_ = 0u;
  clear_has_wins();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::wins() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.wins)
  return wins_;
}
inline void CSODOTAGameAccountClient::set_wins(::google::protobuf::uint32 value) {
  set_has_wins();
  wins_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.wins)
}

// optional uint32 losses = 4;
inline bool CSODOTAGameAccountClient::has_losses() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_losses() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSODOTAGameAccountClient::clear_has_losses() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSODOTAGameAccountClient::clear_losses() {
  losses_ = 0u;
  clear_has_losses();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::losses() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.losses)
  return losses_;
}
inline void CSODOTAGameAccountClient::set_losses(::google::protobuf::uint32 value) {
  set_has_losses();
  losses_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.losses)
}

// optional uint32 xp = 12;
inline bool CSODOTAGameAccountClient::has_xp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_xp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSODOTAGameAccountClient::clear_has_xp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSODOTAGameAccountClient::clear_xp() {
  xp_ = 0u;
  clear_has_xp();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::xp() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.xp)
  return xp_;
}
inline void CSODOTAGameAccountClient::set_xp(::google::protobuf::uint32 value) {
  set_has_xp();
  xp_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.xp)
}

// optional uint32 level = 13;
inline bool CSODOTAGameAccountClient::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSODOTAGameAccountClient::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSODOTAGameAccountClient::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::level() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.level)
  return level_;
}
inline void CSODOTAGameAccountClient::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.level)
}

// optional uint32 initial_skill = 14;
inline bool CSODOTAGameAccountClient::has_initial_skill() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_initial_skill() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSODOTAGameAccountClient::clear_has_initial_skill() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSODOTAGameAccountClient::clear_initial_skill() {
  initial_skill_ = 0u;
  clear_has_initial_skill();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::initial_skill() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.initial_skill)
  return initial_skill_;
}
inline void CSODOTAGameAccountClient::set_initial_skill(::google::protobuf::uint32 value) {
  set_has_initial_skill();
  initial_skill_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.initial_skill)
}

// optional uint32 leaver_count = 15;
inline bool CSODOTAGameAccountClient::has_leaver_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_leaver_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSODOTAGameAccountClient::clear_has_leaver_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSODOTAGameAccountClient::clear_leaver_count() {
  leaver_count_ = 0u;
  clear_has_leaver_count();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::leaver_count() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.leaver_count)
  return leaver_count_;
}
inline void CSODOTAGameAccountClient::set_leaver_count(::google::protobuf::uint32 value) {
  set_has_leaver_count();
  leaver_count_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.leaver_count)
}

// optional uint32 secondary_leaver_count = 58;
inline bool CSODOTAGameAccountClient::has_secondary_leaver_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_secondary_leaver_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSODOTAGameAccountClient::clear_has_secondary_leaver_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSODOTAGameAccountClient::clear_secondary_leaver_count() {
  secondary_leaver_count_ = 0u;
  clear_has_secondary_leaver_count();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::secondary_leaver_count() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.secondary_leaver_count)
  return secondary_leaver_count_;
}
inline void CSODOTAGameAccountClient::set_secondary_leaver_count(::google::protobuf::uint32 value) {
  set_has_secondary_leaver_count();
  secondary_leaver_count_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.secondary_leaver_count)
}

// optional uint32 low_priority_until_date = 18;
inline bool CSODOTAGameAccountClient::has_low_priority_until_date() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_low_priority_until_date() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSODOTAGameAccountClient::clear_has_low_priority_until_date() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSODOTAGameAccountClient::clear_low_priority_until_date() {
  low_priority_until_date_ = 0u;
  clear_has_low_priority_until_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::low_priority_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.low_priority_until_date)
  return low_priority_until_date_;
}
inline void CSODOTAGameAccountClient::set_low_priority_until_date(::google::protobuf::uint32 value) {
  set_has_low_priority_until_date();
  low_priority_until_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.low_priority_until_date)
}

// optional uint32 prevent_text_chat_until_date = 20;
inline bool CSODOTAGameAccountClient::has_prevent_text_chat_until_date() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_prevent_text_chat_until_date() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSODOTAGameAccountClient::clear_has_prevent_text_chat_until_date() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSODOTAGameAccountClient::clear_prevent_text_chat_until_date() {
  prevent_text_chat_until_date_ = 0u;
  clear_has_prevent_text_chat_until_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::prevent_text_chat_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.prevent_text_chat_until_date)
  return prevent_text_chat_until_date_;
}
inline void CSODOTAGameAccountClient::set_prevent_text_chat_until_date(::google::protobuf::uint32 value) {
  set_has_prevent_text_chat_until_date();
  prevent_text_chat_until_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.prevent_text_chat_until_date)
}

// optional uint32 prevent_voice_until_date = 21;
inline bool CSODOTAGameAccountClient::has_prevent_voice_until_date() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_prevent_voice_until_date() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSODOTAGameAccountClient::clear_has_prevent_voice_until_date() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSODOTAGameAccountClient::clear_prevent_voice_until_date() {
  prevent_voice_until_date_ = 0u;
  clear_has_prevent_voice_until_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::prevent_voice_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.prevent_voice_until_date)
  return prevent_voice_until_date_;
}
inline void CSODOTAGameAccountClient::set_prevent_voice_until_date(::google::protobuf::uint32 value) {
  set_has_prevent_voice_until_date();
  prevent_voice_until_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.prevent_voice_until_date)
}

// optional uint32 prevent_public_text_chat_until_date = 86;
inline bool CSODOTAGameAccountClient::has_prevent_public_text_chat_until_date() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_prevent_public_text_chat_until_date() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CSODOTAGameAccountClient::clear_has_prevent_public_text_chat_until_date() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CSODOTAGameAccountClient::clear_prevent_public_text_chat_until_date() {
  prevent_public_text_chat_until_date_ = 0u;
  clear_has_prevent_public_text_chat_until_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::prevent_public_text_chat_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.prevent_public_text_chat_until_date)
  return prevent_public_text_chat_until_date_;
}
inline void CSODOTAGameAccountClient::set_prevent_public_text_chat_until_date(::google::protobuf::uint32 value) {
  set_has_prevent_public_text_chat_until_date();
  prevent_public_text_chat_until_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.prevent_public_text_chat_until_date)
}

// optional uint32 last_abandoned_game_date = 22;
inline bool CSODOTAGameAccountClient::has_last_abandoned_game_date() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_last_abandoned_game_date() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CSODOTAGameAccountClient::clear_has_last_abandoned_game_date() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CSODOTAGameAccountClient::clear_last_abandoned_game_date() {
  last_abandoned_game_date_ = 0u;
  clear_has_last_abandoned_game_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::last_abandoned_game_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.last_abandoned_game_date)
  return last_abandoned_game_date_;
}
inline void CSODOTAGameAccountClient::set_last_abandoned_game_date(::google::protobuf::uint32 value) {
  set_has_last_abandoned_game_date();
  last_abandoned_game_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.last_abandoned_game_date)
}

// optional uint32 last_secondary_abandoned_game_date = 59;
inline bool CSODOTAGameAccountClient::has_last_secondary_abandoned_game_date() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_last_secondary_abandoned_game_date() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CSODOTAGameAccountClient::clear_has_last_secondary_abandoned_game_date() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CSODOTAGameAccountClient::clear_last_secondary_abandoned_game_date() {
  last_secondary_abandoned_game_date_ = 0u;
  clear_has_last_secondary_abandoned_game_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::last_secondary_abandoned_game_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.last_secondary_abandoned_game_date)
  return last_secondary_abandoned_game_date_;
}
inline void CSODOTAGameAccountClient::set_last_secondary_abandoned_game_date(::google::protobuf::uint32 value) {
  set_has_last_secondary_abandoned_game_date();
  last_secondary_abandoned_game_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.last_secondary_abandoned_game_date)
}

// optional uint32 leaver_penalty_count = 23;
inline bool CSODOTAGameAccountClient::has_leaver_penalty_count() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_leaver_penalty_count() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CSODOTAGameAccountClient::clear_has_leaver_penalty_count() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CSODOTAGameAccountClient::clear_leaver_penalty_count() {
  leaver_penalty_count_ = 0u;
  clear_has_leaver_penalty_count();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::leaver_penalty_count() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.leaver_penalty_count)
  return leaver_penalty_count_;
}
inline void CSODOTAGameAccountClient::set_leaver_penalty_count(::google::protobuf::uint32 value) {
  set_has_leaver_penalty_count();
  leaver_penalty_count_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.leaver_penalty_count)
}

// optional uint32 completed_game_streak = 24;
inline bool CSODOTAGameAccountClient::has_completed_game_streak() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_completed_game_streak() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CSODOTAGameAccountClient::clear_has_completed_game_streak() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CSODOTAGameAccountClient::clear_completed_game_streak() {
  completed_game_streak_ = 0u;
  clear_has_completed_game_streak();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::completed_game_streak() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.completed_game_streak)
  return completed_game_streak_;
}
inline void CSODOTAGameAccountClient::set_completed_game_streak(::google::protobuf::uint32 value) {
  set_has_completed_game_streak();
  completed_game_streak_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.completed_game_streak)
}

// optional uint32 teaching = 28;
inline bool CSODOTAGameAccountClient::has_teaching() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_teaching() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CSODOTAGameAccountClient::clear_has_teaching() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CSODOTAGameAccountClient::clear_teaching() {
  teaching_ = 0u;
  clear_has_teaching();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::teaching() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.teaching)
  return teaching_;
}
inline void CSODOTAGameAccountClient::set_teaching(::google::protobuf::uint32 value) {
  set_has_teaching();
  teaching_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.teaching)
}

// optional uint32 leadership = 29;
inline bool CSODOTAGameAccountClient::has_leadership() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_leadership() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CSODOTAGameAccountClient::clear_has_leadership() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CSODOTAGameAccountClient::clear_leadership() {
  leadership_ = 0u;
  clear_has_leadership();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::leadership() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.leadership)
  return leadership_;
}
inline void CSODOTAGameAccountClient::set_leadership(::google::protobuf::uint32 value) {
  set_has_leadership();
  leadership_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.leadership)
}

// optional uint32 friendly = 30;
inline bool CSODOTAGameAccountClient::has_friendly() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_friendly() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CSODOTAGameAccountClient::clear_has_friendly() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CSODOTAGameAccountClient::clear_friendly() {
  friendly_ = 0u;
  clear_has_friendly();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::friendly() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.friendly)
  return friendly_;
}
inline void CSODOTAGameAccountClient::set_friendly(::google::protobuf::uint32 value) {
  set_has_friendly();
  friendly_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.friendly)
}

// optional uint32 forgiving = 31;
inline bool CSODOTAGameAccountClient::has_forgiving() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_forgiving() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CSODOTAGameAccountClient::clear_has_forgiving() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CSODOTAGameAccountClient::clear_forgiving() {
  forgiving_ = 0u;
  clear_has_forgiving();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::forgiving() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.forgiving)
  return forgiving_;
}
inline void CSODOTAGameAccountClient::set_forgiving(::google::protobuf::uint32 value) {
  set_has_forgiving();
  forgiving_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.forgiving)
}

// optional uint32 account_disabled_until_date = 38;
inline bool CSODOTAGameAccountClient::has_account_disabled_until_date() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_account_disabled_until_date() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CSODOTAGameAccountClient::clear_has_account_disabled_until_date() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CSODOTAGameAccountClient::clear_account_disabled_until_date() {
  account_disabled_until_date_ = 0u;
  clear_has_account_disabled_until_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::account_disabled_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.account_disabled_until_date)
  return account_disabled_until_date_;
}
inline void CSODOTAGameAccountClient::set_account_disabled_until_date(::google::protobuf::uint32 value) {
  set_has_account_disabled_until_date();
  account_disabled_until_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.account_disabled_until_date)
}

// optional uint32 account_disabled_count = 39;
inline bool CSODOTAGameAccountClient::has_account_disabled_count() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_account_disabled_count() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CSODOTAGameAccountClient::clear_has_account_disabled_count() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CSODOTAGameAccountClient::clear_account_disabled_count() {
  account_disabled_count_ = 0u;
  clear_has_account_disabled_count();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::account_disabled_count() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.account_disabled_count)
  return account_disabled_count_;
}
inline void CSODOTAGameAccountClient::set_account_disabled_count(::google::protobuf::uint32 value) {
  set_has_account_disabled_count();
  account_disabled_count_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.account_disabled_count)
}

// optional uint32 showcase_hero_id = 40;
inline bool CSODOTAGameAccountClient::has_showcase_hero_id() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_showcase_hero_id() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CSODOTAGameAccountClient::clear_has_showcase_hero_id() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CSODOTAGameAccountClient::clear_showcase_hero_id() {
  showcase_hero_id_ = 0u;
  clear_has_showcase_hero_id();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::showcase_hero_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.showcase_hero_id)
  return showcase_hero_id_;
}
inline void CSODOTAGameAccountClient::set_showcase_hero_id(::google::protobuf::uint32 value) {
  set_has_showcase_hero_id();
  showcase_hero_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.showcase_hero_id)
}

// optional uint32 match_disabled_until_date = 41;
inline bool CSODOTAGameAccountClient::has_match_disabled_until_date() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_match_disabled_until_date() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CSODOTAGameAccountClient::clear_has_match_disabled_until_date() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CSODOTAGameAccountClient::clear_match_disabled_until_date() {
  match_disabled_until_date_ = 0u;
  clear_has_match_disabled_until_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::match_disabled_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.match_disabled_until_date)
  return match_disabled_until_date_;
}
inline void CSODOTAGameAccountClient::set_match_disabled_until_date(::google::protobuf::uint32 value) {
  set_has_match_disabled_until_date();
  match_disabled_until_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.match_disabled_until_date)
}

// optional uint32 match_disabled_count = 42;
inline bool CSODOTAGameAccountClient::has_match_disabled_count() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_match_disabled_count() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CSODOTAGameAccountClient::clear_has_match_disabled_count() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CSODOTAGameAccountClient::clear_match_disabled_count() {
  match_disabled_count_ = 0u;
  clear_has_match_disabled_count();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::match_disabled_count() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.match_disabled_count)
  return match_disabled_count_;
}
inline void CSODOTAGameAccountClient::set_match_disabled_count(::google::protobuf::uint32 value) {
  set_has_match_disabled_count();
  match_disabled_count_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.match_disabled_count)
}

// optional .PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
inline bool CSODOTAGameAccountClient::has_partner_account_type() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_partner_account_type() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CSODOTAGameAccountClient::clear_has_partner_account_type() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CSODOTAGameAccountClient::clear_partner_account_type() {
  partner_account_type_ = 0;
  clear_has_partner_account_type();
}
inline ::PartnerAccountType CSODOTAGameAccountClient::partner_account_type() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.partner_account_type)
  return static_cast< ::PartnerAccountType >(partner_account_type_);
}
inline void CSODOTAGameAccountClient::set_partner_account_type(::PartnerAccountType value) {
  assert(::PartnerAccountType_IsValid(value));
  set_has_partner_account_type();
  partner_account_type_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.partner_account_type)
}

// optional uint32 partner_account_state = 45;
inline bool CSODOTAGameAccountClient::has_partner_account_state() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_partner_account_state() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CSODOTAGameAccountClient::clear_has_partner_account_state() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CSODOTAGameAccountClient::clear_partner_account_state() {
  partner_account_state_ = 0u;
  clear_has_partner_account_state();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::partner_account_state() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.partner_account_state)
  return partner_account_state_;
}
inline void CSODOTAGameAccountClient::set_partner_account_state(::google::protobuf::uint32 value) {
  set_has_partner_account_state();
  partner_account_state_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.partner_account_state)
}

// optional uint32 shutdownlawterminatetimestamp = 47;
inline bool CSODOTAGameAccountClient::has_shutdownlawterminatetimestamp() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_shutdownlawterminatetimestamp() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CSODOTAGameAccountClient::clear_has_shutdownlawterminatetimestamp() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CSODOTAGameAccountClient::clear_shutdownlawterminatetimestamp() {
  shutdownlawterminatetimestamp_ = 0u;
  clear_has_shutdownlawterminatetimestamp();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::shutdownlawterminatetimestamp() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.shutdownlawterminatetimestamp)
  return shutdownlawterminatetimestamp_;
}
inline void CSODOTAGameAccountClient::set_shutdownlawterminatetimestamp(::google::protobuf::uint32 value) {
  set_has_shutdownlawterminatetimestamp();
  shutdownlawterminatetimestamp_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.shutdownlawterminatetimestamp)
}

// optional uint32 low_priority_games_remaining = 48;
inline bool CSODOTAGameAccountClient::has_low_priority_games_remaining() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_low_priority_games_remaining() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CSODOTAGameAccountClient::clear_has_low_priority_games_remaining() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CSODOTAGameAccountClient::clear_low_priority_games_remaining() {
  low_priority_games_remaining_ = 0u;
  clear_has_low_priority_games_remaining();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::low_priority_games_remaining() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.low_priority_games_remaining)
  return low_priority_games_remaining_;
}
inline void CSODOTAGameAccountClient::set_low_priority_games_remaining(::google::protobuf::uint32 value) {
  set_has_low_priority_games_remaining();
  low_priority_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.low_priority_games_remaining)
}

// optional uint32 competitive_rank = 49;
inline bool CSODOTAGameAccountClient::has_competitive_rank() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_competitive_rank() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CSODOTAGameAccountClient::clear_has_competitive_rank() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CSODOTAGameAccountClient::clear_competitive_rank() {
  competitive_rank_ = 0u;
  clear_has_competitive_rank();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::competitive_rank() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.competitive_rank)
  return competitive_rank_;
}
inline void CSODOTAGameAccountClient::set_competitive_rank(::google::protobuf::uint32 value) {
  set_has_competitive_rank();
  competitive_rank_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.competitive_rank)
}

// optional uint32 calibration_games_remaining = 51;
inline bool CSODOTAGameAccountClient::has_calibration_games_remaining() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_calibration_games_remaining() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CSODOTAGameAccountClient::clear_has_calibration_games_remaining() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CSODOTAGameAccountClient::clear_calibration_games_remaining() {
  calibration_games_remaining_ = 0u;
  clear_has_calibration_games_remaining();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::calibration_games_remaining() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.calibration_games_remaining)
  return calibration_games_remaining_;
}
inline void CSODOTAGameAccountClient::set_calibration_games_remaining(::google::protobuf::uint32 value) {
  set_has_calibration_games_remaining();
  calibration_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.calibration_games_remaining)
}

// optional uint32 solo_competitive_rank = 52;
inline bool CSODOTAGameAccountClient::has_solo_competitive_rank() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_solo_competitive_rank() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CSODOTAGameAccountClient::clear_has_solo_competitive_rank() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CSODOTAGameAccountClient::clear_solo_competitive_rank() {
  solo_competitive_rank_ = 0u;
  clear_has_solo_competitive_rank();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::solo_competitive_rank() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.solo_competitive_rank)
  return solo_competitive_rank_;
}
inline void CSODOTAGameAccountClient::set_solo_competitive_rank(::google::protobuf::uint32 value) {
  set_has_solo_competitive_rank();
  solo_competitive_rank_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.solo_competitive_rank)
}

// optional uint32 solo_calibration_games_remaining = 54;
inline bool CSODOTAGameAccountClient::has_solo_calibration_games_remaining() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_solo_calibration_games_remaining() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CSODOTAGameAccountClient::clear_has_solo_calibration_games_remaining() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CSODOTAGameAccountClient::clear_solo_calibration_games_remaining() {
  solo_calibration_games_remaining_ = 0u;
  clear_has_solo_calibration_games_remaining();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::solo_calibration_games_remaining() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.solo_calibration_games_remaining)
  return solo_calibration_games_remaining_;
}
inline void CSODOTAGameAccountClient::set_solo_calibration_games_remaining(::google::protobuf::uint32 value) {
  set_has_solo_calibration_games_remaining();
  solo_calibration_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.solo_calibration_games_remaining)
}

// optional uint32 general_seasonal_ranked_rank = 75;
inline bool CSODOTAGameAccountClient::has_general_seasonal_ranked_rank() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_general_seasonal_ranked_rank() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CSODOTAGameAccountClient::clear_has_general_seasonal_ranked_rank() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CSODOTAGameAccountClient::clear_general_seasonal_ranked_rank() {
  general_seasonal_ranked_rank_ = 0u;
  clear_has_general_seasonal_ranked_rank();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::general_seasonal_ranked_rank() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.general_seasonal_ranked_rank)
  return general_seasonal_ranked_rank_;
}
inline void CSODOTAGameAccountClient::set_general_seasonal_ranked_rank(::google::protobuf::uint32 value) {
  set_has_general_seasonal_ranked_rank();
  general_seasonal_ranked_rank_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.general_seasonal_ranked_rank)
}

// optional uint32 general_seasonal_ranked_calibration_games_remaining = 76;
inline bool CSODOTAGameAccountClient::has_general_seasonal_ranked_calibration_games_remaining() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_general_seasonal_ranked_calibration_games_remaining() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CSODOTAGameAccountClient::clear_has_general_seasonal_ranked_calibration_games_remaining() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CSODOTAGameAccountClient::clear_general_seasonal_ranked_calibration_games_remaining() {
  general_seasonal_ranked_calibration_games_remaining_ = 0u;
  clear_has_general_seasonal_ranked_calibration_games_remaining();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::general_seasonal_ranked_calibration_games_remaining() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.general_seasonal_ranked_calibration_games_remaining)
  return general_seasonal_ranked_calibration_games_remaining_;
}
inline void CSODOTAGameAccountClient::set_general_seasonal_ranked_calibration_games_remaining(::google::protobuf::uint32 value) {
  set_has_general_seasonal_ranked_calibration_games_remaining();
  general_seasonal_ranked_calibration_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.general_seasonal_ranked_calibration_games_remaining)
}

// optional uint32 general_seasonal_ranked_games_played = 80;
inline bool CSODOTAGameAccountClient::has_general_seasonal_ranked_games_played() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_general_seasonal_ranked_games_played() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CSODOTAGameAccountClient::clear_has_general_seasonal_ranked_games_played() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CSODOTAGameAccountClient::clear_general_seasonal_ranked_games_played() {
  general_seasonal_ranked_games_played_ = 0u;
  clear_has_general_seasonal_ranked_games_played();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::general_seasonal_ranked_games_played() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.general_seasonal_ranked_games_played)
  return general_seasonal_ranked_games_played_;
}
inline void CSODOTAGameAccountClient::set_general_seasonal_ranked_games_played(::google::protobuf::uint32 value) {
  set_has_general_seasonal_ranked_games_played();
  general_seasonal_ranked_games_played_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.general_seasonal_ranked_games_played)
}

// optional uint32 general_seasonal_ranked_rank_peak = 81;
inline bool CSODOTAGameAccountClient::has_general_seasonal_ranked_rank_peak() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_general_seasonal_ranked_rank_peak() {
  _has_bits_[1] |= 0x00000010u;
}
inline void CSODOTAGameAccountClient::clear_has_general_seasonal_ranked_rank_peak() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void CSODOTAGameAccountClient::clear_general_seasonal_ranked_rank_peak() {
  general_seasonal_ranked_rank_peak_ = 0u;
  clear_has_general_seasonal_ranked_rank_peak();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::general_seasonal_ranked_rank_peak() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.general_seasonal_ranked_rank_peak)
  return general_seasonal_ranked_rank_peak_;
}
inline void CSODOTAGameAccountClient::set_general_seasonal_ranked_rank_peak(::google::protobuf::uint32 value) {
  set_has_general_seasonal_ranked_rank_peak();
  general_seasonal_ranked_rank_peak_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.general_seasonal_ranked_rank_peak)
}

// optional bool general_seasonal_rank_transferred = 83;
inline bool CSODOTAGameAccountClient::has_general_seasonal_rank_transferred() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_general_seasonal_rank_transferred() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CSODOTAGameAccountClient::clear_has_general_seasonal_rank_transferred() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CSODOTAGameAccountClient::clear_general_seasonal_rank_transferred() {
  general_seasonal_rank_transferred_ = false;
  clear_has_general_seasonal_rank_transferred();
}
inline bool CSODOTAGameAccountClient::general_seasonal_rank_transferred() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.general_seasonal_rank_transferred)
  return general_seasonal_rank_transferred_;
}
inline void CSODOTAGameAccountClient::set_general_seasonal_rank_transferred(bool value) {
  set_has_general_seasonal_rank_transferred();
  general_seasonal_rank_transferred_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.general_seasonal_rank_transferred)
}

// optional uint32 solo_seasonal_ranked_rank = 77;
inline bool CSODOTAGameAccountClient::has_solo_seasonal_ranked_rank() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_solo_seasonal_ranked_rank() {
  _has_bits_[1] |= 0x00000040u;
}
inline void CSODOTAGameAccountClient::clear_has_solo_seasonal_ranked_rank() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void CSODOTAGameAccountClient::clear_solo_seasonal_ranked_rank() {
  solo_seasonal_ranked_rank_ = 0u;
  clear_has_solo_seasonal_ranked_rank();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::solo_seasonal_ranked_rank() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.solo_seasonal_ranked_rank)
  return solo_seasonal_ranked_rank_;
}
inline void CSODOTAGameAccountClient::set_solo_seasonal_ranked_rank(::google::protobuf::uint32 value) {
  set_has_solo_seasonal_ranked_rank();
  solo_seasonal_ranked_rank_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.solo_seasonal_ranked_rank)
}

// optional uint32 solo_seasonal_ranked_calibration_games_remaining = 78;
inline bool CSODOTAGameAccountClient::has_solo_seasonal_ranked_calibration_games_remaining() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_solo_seasonal_ranked_calibration_games_remaining() {
  _has_bits_[1] |= 0x00000080u;
}
inline void CSODOTAGameAccountClient::clear_has_solo_seasonal_ranked_calibration_games_remaining() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void CSODOTAGameAccountClient::clear_solo_seasonal_ranked_calibration_games_remaining() {
  solo_seasonal_ranked_calibration_games_remaining_ = 0u;
  clear_has_solo_seasonal_ranked_calibration_games_remaining();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::solo_seasonal_ranked_calibration_games_remaining() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.solo_seasonal_ranked_calibration_games_remaining)
  return solo_seasonal_ranked_calibration_games_remaining_;
}
inline void CSODOTAGameAccountClient::set_solo_seasonal_ranked_calibration_games_remaining(::google::protobuf::uint32 value) {
  set_has_solo_seasonal_ranked_calibration_games_remaining();
  solo_seasonal_ranked_calibration_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.solo_seasonal_ranked_calibration_games_remaining)
}

// optional uint32 solo_seasonal_ranked_games_played = 79;
inline bool CSODOTAGameAccountClient::has_solo_seasonal_ranked_games_played() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_solo_seasonal_ranked_games_played() {
  _has_bits_[1] |= 0x00000100u;
}
inline void CSODOTAGameAccountClient::clear_has_solo_seasonal_ranked_games_played() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void CSODOTAGameAccountClient::clear_solo_seasonal_ranked_games_played() {
  solo_seasonal_ranked_games_played_ = 0u;
  clear_has_solo_seasonal_ranked_games_played();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::solo_seasonal_ranked_games_played() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.solo_seasonal_ranked_games_played)
  return solo_seasonal_ranked_games_played_;
}
inline void CSODOTAGameAccountClient::set_solo_seasonal_ranked_games_played(::google::protobuf::uint32 value) {
  set_has_solo_seasonal_ranked_games_played();
  solo_seasonal_ranked_games_played_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.solo_seasonal_ranked_games_played)
}

// optional uint32 solo_seasonal_ranked_rank_peak = 82;
inline bool CSODOTAGameAccountClient::has_solo_seasonal_ranked_rank_peak() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_solo_seasonal_ranked_rank_peak() {
  _has_bits_[1] |= 0x00000200u;
}
inline void CSODOTAGameAccountClient::clear_has_solo_seasonal_ranked_rank_peak() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void CSODOTAGameAccountClient::clear_solo_seasonal_ranked_rank_peak() {
  solo_seasonal_ranked_rank_peak_ = 0u;
  clear_has_solo_seasonal_ranked_rank_peak();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::solo_seasonal_ranked_rank_peak() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.solo_seasonal_ranked_rank_peak)
  return solo_seasonal_ranked_rank_peak_;
}
inline void CSODOTAGameAccountClient::set_solo_seasonal_ranked_rank_peak(::google::protobuf::uint32 value) {
  set_has_solo_seasonal_ranked_rank_peak();
  solo_seasonal_ranked_rank_peak_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.solo_seasonal_ranked_rank_peak)
}

// optional bool solo_seasonal_rank_transferred = 84;
inline bool CSODOTAGameAccountClient::has_solo_seasonal_rank_transferred() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_solo_seasonal_rank_transferred() {
  _has_bits_[1] |= 0x00000400u;
}
inline void CSODOTAGameAccountClient::clear_has_solo_seasonal_rank_transferred() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void CSODOTAGameAccountClient::clear_solo_seasonal_rank_transferred() {
  solo_seasonal_rank_transferred_ = false;
  clear_has_solo_seasonal_rank_transferred();
}
inline bool CSODOTAGameAccountClient::solo_seasonal_rank_transferred() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.solo_seasonal_rank_transferred)
  return solo_seasonal_rank_transferred_;
}
inline void CSODOTAGameAccountClient::set_solo_seasonal_rank_transferred(bool value) {
  set_has_solo_seasonal_rank_transferred();
  solo_seasonal_rank_transferred_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.solo_seasonal_rank_transferred)
}

// optional uint32 recruitment_level = 55;
inline bool CSODOTAGameAccountClient::has_recruitment_level() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_recruitment_level() {
  _has_bits_[1] |= 0x00000800u;
}
inline void CSODOTAGameAccountClient::clear_has_recruitment_level() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void CSODOTAGameAccountClient::clear_recruitment_level() {
  recruitment_level_ = 0u;
  clear_has_recruitment_level();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::recruitment_level() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.recruitment_level)
  return recruitment_level_;
}
inline void CSODOTAGameAccountClient::set_recruitment_level(::google::protobuf::uint32 value) {
  set_has_recruitment_level();
  recruitment_level_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.recruitment_level)
}

// optional bool has_new_notifications = 56;
inline bool CSODOTAGameAccountClient::has_has_new_notifications() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_has_new_notifications() {
  _has_bits_[1] |= 0x00001000u;
}
inline void CSODOTAGameAccountClient::clear_has_has_new_notifications() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void CSODOTAGameAccountClient::clear_has_new_notifications() {
  has_new_notifications_ = false;
  clear_has_has_new_notifications();
}
inline bool CSODOTAGameAccountClient::has_new_notifications() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.has_new_notifications)
  return has_new_notifications_;
}
inline void CSODOTAGameAccountClient::set_has_new_notifications(bool value) {
  set_has_has_new_notifications();
  has_new_notifications_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.has_new_notifications)
}

// optional bool is_league_admin = 57;
inline bool CSODOTAGameAccountClient::has_is_league_admin() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_is_league_admin() {
  _has_bits_[1] |= 0x00002000u;
}
inline void CSODOTAGameAccountClient::clear_has_is_league_admin() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void CSODOTAGameAccountClient::clear_is_league_admin() {
  is_league_admin_ = false;
  clear_has_is_league_admin();
}
inline bool CSODOTAGameAccountClient::is_league_admin() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.is_league_admin)
  return is_league_admin_;
}
inline void CSODOTAGameAccountClient::set_is_league_admin(bool value) {
  set_has_is_league_admin();
  is_league_admin_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.is_league_admin)
}

// optional uint32 casual_games_played = 60;
inline bool CSODOTAGameAccountClient::has_casual_games_played() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_casual_games_played() {
  _has_bits_[1] |= 0x00004000u;
}
inline void CSODOTAGameAccountClient::clear_has_casual_games_played() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void CSODOTAGameAccountClient::clear_casual_games_played() {
  casual_games_played_ = 0u;
  clear_has_casual_games_played();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::casual_games_played() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.casual_games_played)
  return casual_games_played_;
}
inline void CSODOTAGameAccountClient::set_casual_games_played(::google::protobuf::uint32 value) {
  set_has_casual_games_played();
  casual_games_played_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.casual_games_played)
}

// optional uint32 solo_competitive_games_played = 61;
inline bool CSODOTAGameAccountClient::has_solo_competitive_games_played() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_solo_competitive_games_played() {
  _has_bits_[1] |= 0x00008000u;
}
inline void CSODOTAGameAccountClient::clear_has_solo_competitive_games_played() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void CSODOTAGameAccountClient::clear_solo_competitive_games_played() {
  solo_competitive_games_played_ = 0u;
  clear_has_solo_competitive_games_played();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::solo_competitive_games_played() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.solo_competitive_games_played)
  return solo_competitive_games_played_;
}
inline void CSODOTAGameAccountClient::set_solo_competitive_games_played(::google::protobuf::uint32 value) {
  set_has_solo_competitive_games_played();
  solo_competitive_games_played_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.solo_competitive_games_played)
}

// optional uint32 party_competitive_games_played = 62;
inline bool CSODOTAGameAccountClient::has_party_competitive_games_played() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_party_competitive_games_played() {
  _has_bits_[1] |= 0x00010000u;
}
inline void CSODOTAGameAccountClient::clear_has_party_competitive_games_played() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void CSODOTAGameAccountClient::clear_party_competitive_games_played() {
  party_competitive_games_played_ = 0u;
  clear_has_party_competitive_games_played();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::party_competitive_games_played() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.party_competitive_games_played)
  return party_competitive_games_played_;
}
inline void CSODOTAGameAccountClient::set_party_competitive_games_played(::google::protobuf::uint32 value) {
  set_has_party_competitive_games_played();
  party_competitive_games_played_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.party_competitive_games_played)
}

// optional uint32 casual_1v1_games_played = 65;
inline bool CSODOTAGameAccountClient::has_casual_1v1_games_played() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_casual_1v1_games_played() {
  _has_bits_[1] |= 0x00020000u;
}
inline void CSODOTAGameAccountClient::clear_has_casual_1v1_games_played() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void CSODOTAGameAccountClient::clear_casual_1v1_games_played() {
  casual_1v1_games_played_ = 0u;
  clear_has_casual_1v1_games_played();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::casual_1v1_games_played() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.casual_1v1_games_played)
  return casual_1v1_games_played_;
}
inline void CSODOTAGameAccountClient::set_casual_1v1_games_played(::google::protobuf::uint32 value) {
  set_has_casual_1v1_games_played();
  casual_1v1_games_played_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.casual_1v1_games_played)
}

// optional uint32 competitive_team_games_played = 66;
inline bool CSODOTAGameAccountClient::has_competitive_team_games_played() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_competitive_team_games_played() {
  _has_bits_[1] |= 0x00040000u;
}
inline void CSODOTAGameAccountClient::clear_has_competitive_team_games_played() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void CSODOTAGameAccountClient::clear_competitive_team_games_played() {
  competitive_team_games_played_ = 0u;
  clear_has_competitive_team_games_played();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::competitive_team_games_played() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.competitive_team_games_played)
  return competitive_team_games_played_;
}
inline void CSODOTAGameAccountClient::set_competitive_team_games_played(::google::protobuf::uint32 value) {
  set_has_competitive_team_games_played();
  competitive_team_games_played_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.competitive_team_games_played)
}

// optional uint32 curr_all_hero_challenge_id = 67;
inline bool CSODOTAGameAccountClient::has_curr_all_hero_challenge_id() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_curr_all_hero_challenge_id() {
  _has_bits_[1] |= 0x00080000u;
}
inline void CSODOTAGameAccountClient::clear_has_curr_all_hero_challenge_id() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void CSODOTAGameAccountClient::clear_curr_all_hero_challenge_id() {
  curr_all_hero_challenge_id_ = 0u;
  clear_has_curr_all_hero_challenge_id();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::curr_all_hero_challenge_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.curr_all_hero_challenge_id)
  return curr_all_hero_challenge_id_;
}
inline void CSODOTAGameAccountClient::set_curr_all_hero_challenge_id(::google::protobuf::uint32 value) {
  set_has_curr_all_hero_challenge_id();
  curr_all_hero_challenge_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.curr_all_hero_challenge_id)
}

// optional uint32 play_time_points = 68;
inline bool CSODOTAGameAccountClient::has_play_time_points() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_play_time_points() {
  _has_bits_[1] |= 0x00100000u;
}
inline void CSODOTAGameAccountClient::clear_has_play_time_points() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void CSODOTAGameAccountClient::clear_play_time_points() {
  play_time_points_ = 0u;
  clear_has_play_time_points();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::play_time_points() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.play_time_points)
  return play_time_points_;
}
inline void CSODOTAGameAccountClient::set_play_time_points(::google::protobuf::uint32 value) {
  set_has_play_time_points();
  play_time_points_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.play_time_points)
}

// optional uint32 account_flags = 69;
inline bool CSODOTAGameAccountClient::has_account_flags() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_account_flags() {
  _has_bits_[1] |= 0x00200000u;
}
inline void CSODOTAGameAccountClient::clear_has_account_flags() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void CSODOTAGameAccountClient::clear_account_flags() {
  account_flags_ = 0u;
  clear_has_account_flags();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::account_flags() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.account_flags)
  return account_flags_;
}
inline void CSODOTAGameAccountClient::set_account_flags(::google::protobuf::uint32 value) {
  set_has_account_flags();
  account_flags_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.account_flags)
}

// optional uint32 play_time_level = 70;
inline bool CSODOTAGameAccountClient::has_play_time_level() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_play_time_level() {
  _has_bits_[1] |= 0x00400000u;
}
inline void CSODOTAGameAccountClient::clear_has_play_time_level() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void CSODOTAGameAccountClient::clear_play_time_level() {
  play_time_level_ = 0u;
  clear_has_play_time_level();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::play_time_level() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.play_time_level)
  return play_time_level_;
}
inline void CSODOTAGameAccountClient::set_play_time_level(::google::protobuf::uint32 value) {
  set_has_play_time_level();
  play_time_level_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.play_time_level)
}

// optional uint32 player_behavior_seq_num_last_report = 71;
inline bool CSODOTAGameAccountClient::has_player_behavior_seq_num_last_report() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_player_behavior_seq_num_last_report() {
  _has_bits_[1] |= 0x00800000u;
}
inline void CSODOTAGameAccountClient::clear_has_player_behavior_seq_num_last_report() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void CSODOTAGameAccountClient::clear_player_behavior_seq_num_last_report() {
  player_behavior_seq_num_last_report_ = 0u;
  clear_has_player_behavior_seq_num_last_report();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::player_behavior_seq_num_last_report() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.player_behavior_seq_num_last_report)
  return player_behavior_seq_num_last_report_;
}
inline void CSODOTAGameAccountClient::set_player_behavior_seq_num_last_report(::google::protobuf::uint32 value) {
  set_has_player_behavior_seq_num_last_report();
  player_behavior_seq_num_last_report_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.player_behavior_seq_num_last_report)
}

// optional uint32 player_behavior_score_last_report = 72;
inline bool CSODOTAGameAccountClient::has_player_behavior_score_last_report() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_player_behavior_score_last_report() {
  _has_bits_[1] |= 0x01000000u;
}
inline void CSODOTAGameAccountClient::clear_has_player_behavior_score_last_report() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void CSODOTAGameAccountClient::clear_player_behavior_score_last_report() {
  player_behavior_score_last_report_ = 0u;
  clear_has_player_behavior_score_last_report();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::player_behavior_score_last_report() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.player_behavior_score_last_report)
  return player_behavior_score_last_report_;
}
inline void CSODOTAGameAccountClient::set_player_behavior_score_last_report(::google::protobuf::uint32 value) {
  set_has_player_behavior_score_last_report();
  player_behavior_score_last_report_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.player_behavior_score_last_report)
}

// optional bool player_behavior_report_old_data = 73;
inline bool CSODOTAGameAccountClient::has_player_behavior_report_old_data() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_player_behavior_report_old_data() {
  _has_bits_[1] |= 0x02000000u;
}
inline void CSODOTAGameAccountClient::clear_has_player_behavior_report_old_data() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void CSODOTAGameAccountClient::clear_player_behavior_report_old_data() {
  player_behavior_report_old_data_ = false;
  clear_has_player_behavior_report_old_data();
}
inline bool CSODOTAGameAccountClient::player_behavior_report_old_data() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.player_behavior_report_old_data)
  return player_behavior_report_old_data_;
}
inline void CSODOTAGameAccountClient::set_player_behavior_report_old_data(bool value) {
  set_has_player_behavior_report_old_data();
  player_behavior_report_old_data_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.player_behavior_report_old_data)
}

// optional uint32 tourney_skill_level = 74;
inline bool CSODOTAGameAccountClient::has_tourney_skill_level() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_tourney_skill_level() {
  _has_bits_[1] |= 0x04000000u;
}
inline void CSODOTAGameAccountClient::clear_has_tourney_skill_level() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void CSODOTAGameAccountClient::clear_tourney_skill_level() {
  tourney_skill_level_ = 0u;
  clear_has_tourney_skill_level();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.tourney_skill_level)
  return tourney_skill_level_;
}
inline void CSODOTAGameAccountClient::set_tourney_skill_level(::google::protobuf::uint32 value) {
  set_has_tourney_skill_level();
  tourney_skill_level_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.tourney_skill_level)
}

// optional uint32 tourney_recent_participation_date = 85;
inline bool CSODOTAGameAccountClient::has_tourney_recent_participation_date() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_tourney_recent_participation_date() {
  _has_bits_[1] |= 0x08000000u;
}
inline void CSODOTAGameAccountClient::clear_has_tourney_recent_participation_date() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void CSODOTAGameAccountClient::clear_tourney_recent_participation_date() {
  tourney_recent_participation_date_ = 0u;
  clear_has_tourney_recent_participation_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::tourney_recent_participation_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.tourney_recent_participation_date)
  return tourney_recent_participation_date_;
}
inline void CSODOTAGameAccountClient::set_tourney_recent_participation_date(::google::protobuf::uint32 value) {
  set_has_tourney_recent_participation_date();
  tourney_recent_participation_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.tourney_recent_participation_date)
}

// optional uint32 favorite_team = 87;
inline bool CSODOTAGameAccountClient::has_favorite_team() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_favorite_team() {
  _has_bits_[1] |= 0x10000000u;
}
inline void CSODOTAGameAccountClient::clear_has_favorite_team() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void CSODOTAGameAccountClient::clear_favorite_team() {
  favorite_team_ = 0u;
  clear_has_favorite_team();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::favorite_team() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.favorite_team)
  return favorite_team_;
}
inline void CSODOTAGameAccountClient::set_favorite_team(::google::protobuf::uint32 value) {
  set_has_favorite_team();
  favorite_team_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.favorite_team)
}

// -------------------------------------------------------------------

// CMsgLobbyEventPoints_AccountPoints

// optional uint32 account_id = 1;
inline bool CMsgLobbyEventPoints_AccountPoints::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.account_id)
  return account_id_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.account_id)
}

// optional uint32 normal_points = 2;
inline bool CMsgLobbyEventPoints_AccountPoints::has_normal_points() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_has_normal_points() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_has_normal_points() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_normal_points() {
  normal_points_ = 0u;
  clear_has_normal_points();
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::normal_points() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.normal_points)
  return normal_points_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_normal_points(::google::protobuf::uint32 value) {
  set_has_normal_points();
  normal_points_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.normal_points)
}

// optional uint32 premium_points = 3;
inline bool CMsgLobbyEventPoints_AccountPoints::has_premium_points() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_has_premium_points() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_has_premium_points() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_premium_points() {
  premium_points_ = 0u;
  clear_has_premium_points();
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::premium_points() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.premium_points)
  return premium_points_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_premium_points(::google::protobuf::uint32 value) {
  set_has_premium_points();
  premium_points_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.premium_points)
}

// optional bool owned = 4;
inline bool CMsgLobbyEventPoints_AccountPoints::has_owned() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_has_owned() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_has_owned() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_owned() {
  owned_ = false;
  clear_has_owned();
}
inline bool CMsgLobbyEventPoints_AccountPoints::owned() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.owned)
  return owned_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_owned(bool value) {
  set_has_owned();
  owned_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.owned)
}

// optional uint32 favorite_team = 5;
inline bool CMsgLobbyEventPoints_AccountPoints::has_favorite_team() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_has_favorite_team() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_has_favorite_team() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_favorite_team() {
  favorite_team_ = 0u;
  clear_has_favorite_team();
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::favorite_team() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.favorite_team)
  return favorite_team_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_favorite_team(::google::protobuf::uint32 value) {
  set_has_favorite_team();
  favorite_team_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.favorite_team)
}

// optional uint32 favorite_team_level = 6;
inline bool CMsgLobbyEventPoints_AccountPoints::has_favorite_team_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_has_favorite_team_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_has_favorite_team_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_favorite_team_level() {
  favorite_team_level_ = 0u;
  clear_has_favorite_team_level();
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::favorite_team_level() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.favorite_team_level)
  return favorite_team_level_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_favorite_team_level(::google::protobuf::uint32 value) {
  set_has_favorite_team_level();
  favorite_team_level_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.favorite_team_level)
}

// optional uint32 points_held = 7;
inline bool CMsgLobbyEventPoints_AccountPoints::has_points_held() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_has_points_held() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_has_points_held() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_points_held() {
  points_held_ = 0u;
  clear_has_points_held();
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::points_held() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.points_held)
  return points_held_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_points_held(::google::protobuf::uint32 value) {
  set_has_points_held();
  points_held_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.points_held)
}

// optional uint32 premium_points_held = 8;
inline bool CMsgLobbyEventPoints_AccountPoints::has_premium_points_held() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_has_premium_points_held() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_has_premium_points_held() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_premium_points_held() {
  premium_points_held_ = 0u;
  clear_has_premium_points_held();
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::premium_points_held() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.premium_points_held)
  return premium_points_held_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_premium_points_held(::google::protobuf::uint32 value) {
  set_has_premium_points_held();
  premium_points_held_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.premium_points_held)
}

// optional uint32 favorite_team_foil_level = 9;
inline bool CMsgLobbyEventPoints_AccountPoints::has_favorite_team_foil_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_has_favorite_team_foil_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_has_favorite_team_foil_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_favorite_team_foil_level() {
  favorite_team_foil_level_ = 0u;
  clear_has_favorite_team_foil_level();
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::favorite_team_foil_level() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.favorite_team_foil_level)
  return favorite_team_foil_level_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_favorite_team_foil_level(::google::protobuf::uint32 value) {
  set_has_favorite_team_foil_level();
  favorite_team_foil_level_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.favorite_team_foil_level)
}

// optional uint32 wager_tokens_remaining = 10;
inline bool CMsgLobbyEventPoints_AccountPoints::has_wager_tokens_remaining() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_has_wager_tokens_remaining() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_has_wager_tokens_remaining() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_wager_tokens_remaining() {
  wager_tokens_remaining_ = 0u;
  clear_has_wager_tokens_remaining();
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::wager_tokens_remaining() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.wager_tokens_remaining)
  return wager_tokens_remaining_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_wager_tokens_remaining(::google::protobuf::uint32 value) {
  set_has_wager_tokens_remaining();
  wager_tokens_remaining_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.wager_tokens_remaining)
}

// optional uint32 wager_tokens_max = 11;
inline bool CMsgLobbyEventPoints_AccountPoints::has_wager_tokens_max() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_has_wager_tokens_max() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_has_wager_tokens_max() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_wager_tokens_max() {
  wager_tokens_max_ = 0u;
  clear_has_wager_tokens_max();
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::wager_tokens_max() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.wager_tokens_max)
  return wager_tokens_max_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_wager_tokens_max(::google::protobuf::uint32 value) {
  set_has_wager_tokens_max();
  wager_tokens_max_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.wager_tokens_max)
}

// optional uint64 active_effects_mask = 12;
inline bool CMsgLobbyEventPoints_AccountPoints::has_active_effects_mask() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_has_active_effects_mask() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_has_active_effects_mask() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_active_effects_mask() {
  active_effects_mask_ = GOOGLE_ULONGLONG(0);
  clear_has_active_effects_mask();
}
inline ::google::protobuf::uint64 CMsgLobbyEventPoints_AccountPoints::active_effects_mask() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.active_effects_mask)
  return active_effects_mask_;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_active_effects_mask(::google::protobuf::uint64 value) {
  set_has_active_effects_mask();
  active_effects_mask_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.active_effects_mask)
}

// -------------------------------------------------------------------

// CMsgLobbyEventPoints

// optional uint32 event_id = 1;
inline bool CMsgLobbyEventPoints::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgLobbyEventPoints::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgLobbyEventPoints::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgLobbyEventPoints::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
inline ::google::protobuf::uint32 CMsgLobbyEventPoints::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.event_id)
  return event_id_;
}
inline void CMsgLobbyEventPoints::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.event_id)
}

// repeated .CMsgLobbyEventPoints.AccountPoints account_points = 2;
inline int CMsgLobbyEventPoints::account_points_size() const {
  return account_points_.size();
}
inline void CMsgLobbyEventPoints::clear_account_points() {
  account_points_.Clear();
}
inline const ::CMsgLobbyEventPoints_AccountPoints& CMsgLobbyEventPoints::account_points(int index) const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.account_points)
  return account_points_.Get(index);
}
inline ::CMsgLobbyEventPoints_AccountPoints* CMsgLobbyEventPoints::mutable_account_points(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgLobbyEventPoints.account_points)
  return account_points_.Mutable(index);
}
inline ::CMsgLobbyEventPoints_AccountPoints* CMsgLobbyEventPoints::add_account_points() {
  // @@protoc_insertion_point(field_add:CMsgLobbyEventPoints.account_points)
  return account_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgLobbyEventPoints_AccountPoints >&
CMsgLobbyEventPoints::account_points() const {
  // @@protoc_insertion_point(field_list:CMsgLobbyEventPoints.account_points)
  return account_points_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgLobbyEventPoints_AccountPoints >*
CMsgLobbyEventPoints::mutable_account_points() {
  // @@protoc_insertion_point(field_mutable_list:CMsgLobbyEventPoints.account_points)
  return &account_points_;
}

// -------------------------------------------------------------------

// CMsgBattleCupVictory

// optional uint32 account_id = 1;
inline bool CMsgBattleCupVictory::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgBattleCupVictory::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgBattleCupVictory::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgBattleCupVictory::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgBattleCupVictory::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgBattleCupVictory.account_id)
  return account_id_;
}
inline void CMsgBattleCupVictory::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgBattleCupVictory.account_id)
}

// optional uint32 win_date = 2;
inline bool CMsgBattleCupVictory::has_win_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgBattleCupVictory::set_has_win_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgBattleCupVictory::clear_has_win_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgBattleCupVictory::clear_win_date() {
  win_date_ = 0u;
  clear_has_win_date();
}
inline ::google::protobuf::uint32 CMsgBattleCupVictory::win_date() const {
  // @@protoc_insertion_point(field_get:CMsgBattleCupVictory.win_date)
  return win_date_;
}
inline void CMsgBattleCupVictory::set_win_date(::google::protobuf::uint32 value) {
  set_has_win_date();
  win_date_ = value;
  // @@protoc_insertion_point(field_set:CMsgBattleCupVictory.win_date)
}

// optional uint32 valid_until = 3;
inline bool CMsgBattleCupVictory::has_valid_until() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgBattleCupVictory::set_has_valid_until() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgBattleCupVictory::clear_has_valid_until() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgBattleCupVictory::clear_valid_until() {
  valid_until_ = 0u;
  clear_has_valid_until();
}
inline ::google::protobuf::uint32 CMsgBattleCupVictory::valid_until() const {
  // @@protoc_insertion_point(field_get:CMsgBattleCupVictory.valid_until)
  return valid_until_;
}
inline void CMsgBattleCupVictory::set_valid_until(::google::protobuf::uint32 value) {
  set_has_valid_until();
  valid_until_ = value;
  // @@protoc_insertion_point(field_set:CMsgBattleCupVictory.valid_until)
}

// optional uint32 skill_level = 4;
inline bool CMsgBattleCupVictory::has_skill_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgBattleCupVictory::set_has_skill_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgBattleCupVictory::clear_has_skill_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgBattleCupVictory::clear_skill_level() {
  skill_level_ = 0u;
  clear_has_skill_level();
}
inline ::google::protobuf::uint32 CMsgBattleCupVictory::skill_level() const {
  // @@protoc_insertion_point(field_get:CMsgBattleCupVictory.skill_level)
  return skill_level_;
}
inline void CMsgBattleCupVictory::set_skill_level(::google::protobuf::uint32 value) {
  set_has_skill_level();
  skill_level_ = value;
  // @@protoc_insertion_point(field_set:CMsgBattleCupVictory.skill_level)
}

// optional uint32 tournament_id = 5;
inline bool CMsgBattleCupVictory::has_tournament_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgBattleCupVictory::set_has_tournament_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgBattleCupVictory::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgBattleCupVictory::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
inline ::google::protobuf::uint32 CMsgBattleCupVictory::tournament_id() const {
  // @@protoc_insertion_point(field_get:CMsgBattleCupVictory.tournament_id)
  return tournament_id_;
}
inline void CMsgBattleCupVictory::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgBattleCupVictory.tournament_id)
}

// optional uint32 division_id = 6;
inline bool CMsgBattleCupVictory::has_division_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgBattleCupVictory::set_has_division_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgBattleCupVictory::clear_has_division_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgBattleCupVictory::clear_division_id() {
  division_id_ = 0u;
  clear_has_division_id();
}
inline ::google::protobuf::uint32 CMsgBattleCupVictory::division_id() const {
  // @@protoc_insertion_point(field_get:CMsgBattleCupVictory.division_id)
  return division_id_;
}
inline void CMsgBattleCupVictory::set_division_id(::google::protobuf::uint32 value) {
  set_has_division_id();
  division_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgBattleCupVictory.division_id)
}

// optional uint32 team_id = 7;
inline bool CMsgBattleCupVictory::has_team_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgBattleCupVictory::set_has_team_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgBattleCupVictory::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgBattleCupVictory::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgBattleCupVictory::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgBattleCupVictory.team_id)
  return team_id_;
}
inline void CMsgBattleCupVictory::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgBattleCupVictory.team_id)
}

// optional uint32 streak = 8;
inline bool CMsgBattleCupVictory::has_streak() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgBattleCupVictory::set_has_streak() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgBattleCupVictory::clear_has_streak() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgBattleCupVictory::clear_streak() {
  streak_ = 0u;
  clear_has_streak();
}
inline ::google::protobuf::uint32 CMsgBattleCupVictory::streak() const {
  // @@protoc_insertion_point(field_get:CMsgBattleCupVictory.streak)
  return streak_;
}
inline void CMsgBattleCupVictory::set_streak(::google::protobuf::uint32 value) {
  set_has_streak();
  streak_ = value;
  // @@protoc_insertion_point(field_set:CMsgBattleCupVictory.streak)
}

// -------------------------------------------------------------------

// CMsgLobbyBattleCupVictoryList

// repeated .CMsgBattleCupVictory winners = 1;
inline int CMsgLobbyBattleCupVictoryList::winners_size() const {
  return winners_.size();
}
inline void CMsgLobbyBattleCupVictoryList::clear_winners() {
  winners_.Clear();
}
inline const ::CMsgBattleCupVictory& CMsgLobbyBattleCupVictoryList::winners(int index) const {
  // @@protoc_insertion_point(field_get:CMsgLobbyBattleCupVictoryList.winners)
  return winners_.Get(index);
}
inline ::CMsgBattleCupVictory* CMsgLobbyBattleCupVictoryList::mutable_winners(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgLobbyBattleCupVictoryList.winners)
  return winners_.Mutable(index);
}
inline ::CMsgBattleCupVictory* CMsgLobbyBattleCupVictoryList::add_winners() {
  // @@protoc_insertion_point(field_add:CMsgLobbyBattleCupVictoryList.winners)
  return winners_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgBattleCupVictory >&
CMsgLobbyBattleCupVictoryList::winners() const {
  // @@protoc_insertion_point(field_list:CMsgLobbyBattleCupVictoryList.winners)
  return winners_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgBattleCupVictory >*
CMsgLobbyBattleCupVictoryList::mutable_winners() {
  // @@protoc_insertion_point(field_mutable_list:CMsgLobbyBattleCupVictoryList.winners)
  return &winners_;
}

// -------------------------------------------------------------------

// CMsgDOTABroadcastNotification

// optional string message = 1;
inline bool CMsgDOTABroadcastNotification::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTABroadcastNotification::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTABroadcastNotification::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTABroadcastNotification::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& CMsgDOTABroadcastNotification::message() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABroadcastNotification.message)
  return *message_;
}
inline void CMsgDOTABroadcastNotification::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABroadcastNotification.message)
}
inline void CMsgDOTABroadcastNotification::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTABroadcastNotification.message)
}
inline void CMsgDOTABroadcastNotification::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTABroadcastNotification.message)
}
inline ::std::string* CMsgDOTABroadcastNotification::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTABroadcastNotification.message)
  return message_;
}
inline ::std::string* CMsgDOTABroadcastNotification::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTABroadcastNotification::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTABroadcastNotification.message)
}

// -------------------------------------------------------------------

// CProtoItemHeroStatue

// optional uint32 hero_id = 1;
inline bool CProtoItemHeroStatue::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProtoItemHeroStatue::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProtoItemHeroStatue::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProtoItemHeroStatue::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CProtoItemHeroStatue::hero_id() const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.hero_id)
  return hero_id_;
}
inline void CProtoItemHeroStatue::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.hero_id)
}

// optional uint32 status_effect_index = 2;
inline bool CProtoItemHeroStatue::has_status_effect_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProtoItemHeroStatue::set_has_status_effect_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProtoItemHeroStatue::clear_has_status_effect_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProtoItemHeroStatue::clear_status_effect_index() {
  status_effect_index_ = 0u;
  clear_has_status_effect_index();
}
inline ::google::protobuf::uint32 CProtoItemHeroStatue::status_effect_index() const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.status_effect_index)
  return status_effect_index_;
}
inline void CProtoItemHeroStatue::set_status_effect_index(::google::protobuf::uint32 value) {
  set_has_status_effect_index();
  status_effect_index_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.status_effect_index)
}

// optional string sequence_name = 3;
inline bool CProtoItemHeroStatue::has_sequence_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CProtoItemHeroStatue::set_has_sequence_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CProtoItemHeroStatue::clear_has_sequence_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CProtoItemHeroStatue::clear_sequence_name() {
  if (sequence_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sequence_name_->clear();
  }
  clear_has_sequence_name();
}
inline const ::std::string& CProtoItemHeroStatue::sequence_name() const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.sequence_name)
  return *sequence_name_;
}
inline void CProtoItemHeroStatue::set_sequence_name(const ::std::string& value) {
  set_has_sequence_name();
  if (sequence_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sequence_name_ = new ::std::string;
  }
  sequence_name_->assign(value);
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.sequence_name)
}
inline void CProtoItemHeroStatue::set_sequence_name(const char* value) {
  set_has_sequence_name();
  if (sequence_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sequence_name_ = new ::std::string;
  }
  sequence_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CProtoItemHeroStatue.sequence_name)
}
inline void CProtoItemHeroStatue::set_sequence_name(const char* value, size_t size) {
  set_has_sequence_name();
  if (sequence_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sequence_name_ = new ::std::string;
  }
  sequence_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CProtoItemHeroStatue.sequence_name)
}
inline ::std::string* CProtoItemHeroStatue::mutable_sequence_name() {
  set_has_sequence_name();
  if (sequence_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sequence_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CProtoItemHeroStatue.sequence_name)
  return sequence_name_;
}
inline ::std::string* CProtoItemHeroStatue::release_sequence_name() {
  clear_has_sequence_name();
  if (sequence_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sequence_name_;
    sequence_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CProtoItemHeroStatue::set_allocated_sequence_name(::std::string* sequence_name) {
  if (sequence_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sequence_name_;
  }
  if (sequence_name) {
    set_has_sequence_name();
    sequence_name_ = sequence_name;
  } else {
    clear_has_sequence_name();
    sequence_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemHeroStatue.sequence_name)
}

// optional float cycle = 4;
inline bool CProtoItemHeroStatue::has_cycle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CProtoItemHeroStatue::set_has_cycle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CProtoItemHeroStatue::clear_has_cycle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CProtoItemHeroStatue::clear_cycle() {
  cycle_ = 0;
  clear_has_cycle();
}
inline float CProtoItemHeroStatue::cycle() const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.cycle)
  return cycle_;
}
inline void CProtoItemHeroStatue::set_cycle(float value) {
  set_has_cycle();
  cycle_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.cycle)
}

// repeated uint32 wearable = 5;
inline int CProtoItemHeroStatue::wearable_size() const {
  return wearable_.size();
}
inline void CProtoItemHeroStatue::clear_wearable() {
  wearable_.Clear();
}
inline ::google::protobuf::uint32 CProtoItemHeroStatue::wearable(int index) const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.wearable)
  return wearable_.Get(index);
}
inline void CProtoItemHeroStatue::set_wearable(int index, ::google::protobuf::uint32 value) {
  wearable_.Set(index, value);
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.wearable)
}
inline void CProtoItemHeroStatue::add_wearable(::google::protobuf::uint32 value) {
  wearable_.Add(value);
  // @@protoc_insertion_point(field_add:CProtoItemHeroStatue.wearable)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CProtoItemHeroStatue::wearable() const {
  // @@protoc_insertion_point(field_list:CProtoItemHeroStatue.wearable)
  return wearable_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CProtoItemHeroStatue::mutable_wearable() {
  // @@protoc_insertion_point(field_mutable_list:CProtoItemHeroStatue.wearable)
  return &wearable_;
}

// optional string inscription = 6;
inline bool CProtoItemHeroStatue::has_inscription() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CProtoItemHeroStatue::set_has_inscription() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CProtoItemHeroStatue::clear_has_inscription() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CProtoItemHeroStatue::clear_inscription() {
  if (inscription_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inscription_->clear();
  }
  clear_has_inscription();
}
inline const ::std::string& CProtoItemHeroStatue::inscription() const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.inscription)
  return *inscription_;
}
inline void CProtoItemHeroStatue::set_inscription(const ::std::string& value) {
  set_has_inscription();
  if (inscription_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inscription_ = new ::std::string;
  }
  inscription_->assign(value);
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.inscription)
}
inline void CProtoItemHeroStatue::set_inscription(const char* value) {
  set_has_inscription();
  if (inscription_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inscription_ = new ::std::string;
  }
  inscription_->assign(value);
  // @@protoc_insertion_point(field_set_char:CProtoItemHeroStatue.inscription)
}
inline void CProtoItemHeroStatue::set_inscription(const char* value, size_t size) {
  set_has_inscription();
  if (inscription_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inscription_ = new ::std::string;
  }
  inscription_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CProtoItemHeroStatue.inscription)
}
inline ::std::string* CProtoItemHeroStatue::mutable_inscription() {
  set_has_inscription();
  if (inscription_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inscription_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CProtoItemHeroStatue.inscription)
  return inscription_;
}
inline ::std::string* CProtoItemHeroStatue::release_inscription() {
  clear_has_inscription();
  if (inscription_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = inscription_;
    inscription_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CProtoItemHeroStatue::set_allocated_inscription(::std::string* inscription) {
  if (inscription_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inscription_;
  }
  if (inscription) {
    set_has_inscription();
    inscription_ = inscription;
  } else {
    clear_has_inscription();
    inscription_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemHeroStatue.inscription)
}

// repeated uint32 style = 7;
inline int CProtoItemHeroStatue::style_size() const {
  return style_.size();
}
inline void CProtoItemHeroStatue::clear_style() {
  style_.Clear();
}
inline ::google::protobuf::uint32 CProtoItemHeroStatue::style(int index) const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.style)
  return style_.Get(index);
}
inline void CProtoItemHeroStatue::set_style(int index, ::google::protobuf::uint32 value) {
  style_.Set(index, value);
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.style)
}
inline void CProtoItemHeroStatue::add_style(::google::protobuf::uint32 value) {
  style_.Add(value);
  // @@protoc_insertion_point(field_add:CProtoItemHeroStatue.style)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CProtoItemHeroStatue::style() const {
  // @@protoc_insertion_point(field_list:CProtoItemHeroStatue.style)
  return style_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CProtoItemHeroStatue::mutable_style() {
  // @@protoc_insertion_point(field_mutable_list:CProtoItemHeroStatue.style)
  return &style_;
}

// optional bool tournament_drop = 8;
inline bool CProtoItemHeroStatue::has_tournament_drop() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CProtoItemHeroStatue::set_has_tournament_drop() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CProtoItemHeroStatue::clear_has_tournament_drop() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CProtoItemHeroStatue::clear_tournament_drop() {
  tournament_drop_ = false;
  clear_has_tournament_drop();
}
inline bool CProtoItemHeroStatue::tournament_drop() const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.tournament_drop)
  return tournament_drop_;
}
inline void CProtoItemHeroStatue::set_tournament_drop(bool value) {
  set_has_tournament_drop();
  tournament_drop_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.tournament_drop)
}

// -------------------------------------------------------------------

// CProtoItemTeamShowcase

// optional uint32 hero_id = 1;
inline bool CProtoItemTeamShowcase::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProtoItemTeamShowcase::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProtoItemTeamShowcase::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProtoItemTeamShowcase::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CProtoItemTeamShowcase::hero_id() const {
  // @@protoc_insertion_point(field_get:CProtoItemTeamShowcase.hero_id)
  return hero_id_;
}
inline void CProtoItemTeamShowcase::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemTeamShowcase.hero_id)
}

// optional uint32 status_effect_index = 2;
inline bool CProtoItemTeamShowcase::has_status_effect_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProtoItemTeamShowcase::set_has_status_effect_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProtoItemTeamShowcase::clear_has_status_effect_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProtoItemTeamShowcase::clear_status_effect_index() {
  status_effect_index_ = 0u;
  clear_has_status_effect_index();
}
inline ::google::protobuf::uint32 CProtoItemTeamShowcase::status_effect_index() const {
  // @@protoc_insertion_point(field_get:CProtoItemTeamShowcase.status_effect_index)
  return status_effect_index_;
}
inline void CProtoItemTeamShowcase::set_status_effect_index(::google::protobuf::uint32 value) {
  set_has_status_effect_index();
  status_effect_index_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemTeamShowcase.status_effect_index)
}

// optional string sequence_name = 3;
inline bool CProtoItemTeamShowcase::has_sequence_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CProtoItemTeamShowcase::set_has_sequence_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CProtoItemTeamShowcase::clear_has_sequence_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CProtoItemTeamShowcase::clear_sequence_name() {
  if (sequence_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sequence_name_->clear();
  }
  clear_has_sequence_name();
}
inline const ::std::string& CProtoItemTeamShowcase::sequence_name() const {
  // @@protoc_insertion_point(field_get:CProtoItemTeamShowcase.sequence_name)
  return *sequence_name_;
}
inline void CProtoItemTeamShowcase::set_sequence_name(const ::std::string& value) {
  set_has_sequence_name();
  if (sequence_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sequence_name_ = new ::std::string;
  }
  sequence_name_->assign(value);
  // @@protoc_insertion_point(field_set:CProtoItemTeamShowcase.sequence_name)
}
inline void CProtoItemTeamShowcase::set_sequence_name(const char* value) {
  set_has_sequence_name();
  if (sequence_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sequence_name_ = new ::std::string;
  }
  sequence_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CProtoItemTeamShowcase.sequence_name)
}
inline void CProtoItemTeamShowcase::set_sequence_name(const char* value, size_t size) {
  set_has_sequence_name();
  if (sequence_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sequence_name_ = new ::std::string;
  }
  sequence_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CProtoItemTeamShowcase.sequence_name)
}
inline ::std::string* CProtoItemTeamShowcase::mutable_sequence_name() {
  set_has_sequence_name();
  if (sequence_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sequence_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CProtoItemTeamShowcase.sequence_name)
  return sequence_name_;
}
inline ::std::string* CProtoItemTeamShowcase::release_sequence_name() {
  clear_has_sequence_name();
  if (sequence_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sequence_name_;
    sequence_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CProtoItemTeamShowcase::set_allocated_sequence_name(::std::string* sequence_name) {
  if (sequence_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sequence_name_;
  }
  if (sequence_name) {
    set_has_sequence_name();
    sequence_name_ = sequence_name;
  } else {
    clear_has_sequence_name();
    sequence_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemTeamShowcase.sequence_name)
}

// optional float cycle = 4;
inline bool CProtoItemTeamShowcase::has_cycle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CProtoItemTeamShowcase::set_has_cycle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CProtoItemTeamShowcase::clear_has_cycle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CProtoItemTeamShowcase::clear_cycle() {
  cycle_ = 0;
  clear_has_cycle();
}
inline float CProtoItemTeamShowcase::cycle() const {
  // @@protoc_insertion_point(field_get:CProtoItemTeamShowcase.cycle)
  return cycle_;
}
inline void CProtoItemTeamShowcase::set_cycle(float value) {
  set_has_cycle();
  cycle_ = value;
  // @@protoc_insertion_point(field_set:CProtoItemTeamShowcase.cycle)
}

// repeated uint32 wearable = 5;
inline int CProtoItemTeamShowcase::wearable_size() const {
  return wearable_.size();
}
inline void CProtoItemTeamShowcase::clear_wearable() {
  wearable_.Clear();
}
inline ::google::protobuf::uint32 CProtoItemTeamShowcase::wearable(int index) const {
  // @@protoc_insertion_point(field_get:CProtoItemTeamShowcase.wearable)
  return wearable_.Get(index);
}
inline void CProtoItemTeamShowcase::set_wearable(int index, ::google::protobuf::uint32 value) {
  wearable_.Set(index, value);
  // @@protoc_insertion_point(field_set:CProtoItemTeamShowcase.wearable)
}
inline void CProtoItemTeamShowcase::add_wearable(::google::protobuf::uint32 value) {
  wearable_.Add(value);
  // @@protoc_insertion_point(field_add:CProtoItemTeamShowcase.wearable)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CProtoItemTeamShowcase::wearable() const {
  // @@protoc_insertion_point(field_list:CProtoItemTeamShowcase.wearable)
  return wearable_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CProtoItemTeamShowcase::mutable_wearable() {
  // @@protoc_insertion_point(field_mutable_list:CProtoItemTeamShowcase.wearable)
  return &wearable_;
}

// optional string inscription = 6;
inline bool CProtoItemTeamShowcase::has_inscription() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CProtoItemTeamShowcase::set_has_inscription() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CProtoItemTeamShowcase::clear_has_inscription() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CProtoItemTeamShowcase::clear_inscription() {
  if (inscription_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inscription_->clear();
  }
  clear_has_inscription();
}
inline const ::std::string& CProtoItemTeamShowcase::inscription() const {
  // @@protoc_insertion_point(field_get:CProtoItemTeamShowcase.inscription)
  return *inscription_;
}
inline void CProtoItemTeamShowcase::set_inscription(const ::std::string& value) {
  set_has_inscription();
  if (inscription_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inscription_ = new ::std::string;
  }
  inscription_->assign(value);
  // @@protoc_insertion_point(field_set:CProtoItemTeamShowcase.inscription)
}
inline void CProtoItemTeamShowcase::set_inscription(const char* value) {
  set_has_inscription();
  if (inscription_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inscription_ = new ::std::string;
  }
  inscription_->assign(value);
  // @@protoc_insertion_point(field_set_char:CProtoItemTeamShowcase.inscription)
}
inline void CProtoItemTeamShowcase::set_inscription(const char* value, size_t size) {
  set_has_inscription();
  if (inscription_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inscription_ = new ::std::string;
  }
  inscription_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CProtoItemTeamShowcase.inscription)
}
inline ::std::string* CProtoItemTeamShowcase::mutable_inscription() {
  set_has_inscription();
  if (inscription_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inscription_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CProtoItemTeamShowcase.inscription)
  return inscription_;
}
inline ::std::string* CProtoItemTeamShowcase::release_inscription() {
  clear_has_inscription();
  if (inscription_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = inscription_;
    inscription_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CProtoItemTeamShowcase::set_allocated_inscription(::std::string* inscription) {
  if (inscription_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inscription_;
  }
  if (inscription) {
    set_has_inscription();
    inscription_ = inscription;
  } else {
    clear_has_inscription();
    inscription_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CProtoItemTeamShowcase.inscription)
}

// repeated uint32 style = 7;
inline int CProtoItemTeamShowcase::style_size() const {
  return style_.size();
}
inline void CProtoItemTeamShowcase::clear_style() {
  style_.Clear();
}
inline ::google::protobuf::uint32 CProtoItemTeamShowcase::style(int index) const {
  // @@protoc_insertion_point(field_get:CProtoItemTeamShowcase.style)
  return style_.Get(index);
}
inline void CProtoItemTeamShowcase::set_style(int index, ::google::protobuf::uint32 value) {
  style_.Set(index, value);
  // @@protoc_insertion_point(field_set:CProtoItemTeamShowcase.style)
}
inline void CProtoItemTeamShowcase::add_style(::google::protobuf::uint32 value) {
  style_.Add(value);
  // @@protoc_insertion_point(field_add:CProtoItemTeamShowcase.style)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CProtoItemTeamShowcase::style() const {
  // @@protoc_insertion_point(field_list:CProtoItemTeamShowcase.style)
  return style_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CProtoItemTeamShowcase::mutable_style() {
  // @@protoc_insertion_point(field_mutable_list:CProtoItemTeamShowcase.style)
  return &style_;
}

// -------------------------------------------------------------------

// CMatchPlayerAbilityUpgrade

// optional uint32 ability = 1;
inline bool CMatchPlayerAbilityUpgrade::has_ability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMatchPlayerAbilityUpgrade::set_has_ability() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMatchPlayerAbilityUpgrade::clear_has_ability() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMatchPlayerAbilityUpgrade::clear_ability() {
  ability_ = 0u;
  clear_has_ability();
}
inline ::google::protobuf::uint32 CMatchPlayerAbilityUpgrade::ability() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerAbilityUpgrade.ability)
  return ability_;
}
inline void CMatchPlayerAbilityUpgrade::set_ability(::google::protobuf::uint32 value) {
  set_has_ability();
  ability_ = value;
  // @@protoc_insertion_point(field_set:CMatchPlayerAbilityUpgrade.ability)
}

// optional uint32 time = 2;
inline bool CMatchPlayerAbilityUpgrade::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMatchPlayerAbilityUpgrade::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMatchPlayerAbilityUpgrade::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMatchPlayerAbilityUpgrade::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 CMatchPlayerAbilityUpgrade::time() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerAbilityUpgrade.time)
  return time_;
}
inline void CMatchPlayerAbilityUpgrade::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:CMatchPlayerAbilityUpgrade.time)
}

// -------------------------------------------------------------------

// CMatchAdditionalUnitInventory

// optional string unit_name = 1;
inline bool CMatchAdditionalUnitInventory::has_unit_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMatchAdditionalUnitInventory::set_has_unit_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMatchAdditionalUnitInventory::clear_has_unit_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMatchAdditionalUnitInventory::clear_unit_name() {
  if (unit_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unit_name_->clear();
  }
  clear_has_unit_name();
}
inline const ::std::string& CMatchAdditionalUnitInventory::unit_name() const {
  // @@protoc_insertion_point(field_get:CMatchAdditionalUnitInventory.unit_name)
  return *unit_name_;
}
inline void CMatchAdditionalUnitInventory::set_unit_name(const ::std::string& value) {
  set_has_unit_name();
  if (unit_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unit_name_ = new ::std::string;
  }
  unit_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMatchAdditionalUnitInventory.unit_name)
}
inline void CMatchAdditionalUnitInventory::set_unit_name(const char* value) {
  set_has_unit_name();
  if (unit_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unit_name_ = new ::std::string;
  }
  unit_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMatchAdditionalUnitInventory.unit_name)
}
inline void CMatchAdditionalUnitInventory::set_unit_name(const char* value, size_t size) {
  set_has_unit_name();
  if (unit_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unit_name_ = new ::std::string;
  }
  unit_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMatchAdditionalUnitInventory.unit_name)
}
inline ::std::string* CMatchAdditionalUnitInventory::mutable_unit_name() {
  set_has_unit_name();
  if (unit_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unit_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMatchAdditionalUnitInventory.unit_name)
  return unit_name_;
}
inline ::std::string* CMatchAdditionalUnitInventory::release_unit_name() {
  clear_has_unit_name();
  if (unit_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = unit_name_;
    unit_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMatchAdditionalUnitInventory::set_allocated_unit_name(::std::string* unit_name) {
  if (unit_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unit_name_;
  }
  if (unit_name) {
    set_has_unit_name();
    unit_name_ = unit_name;
  } else {
    clear_has_unit_name();
    unit_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMatchAdditionalUnitInventory.unit_name)
}

// repeated uint32 items = 2;
inline int CMatchAdditionalUnitInventory::items_size() const {
  return items_.size();
}
inline void CMatchAdditionalUnitInventory::clear_items() {
  items_.Clear();
}
inline ::google::protobuf::uint32 CMatchAdditionalUnitInventory::items(int index) const {
  // @@protoc_insertion_point(field_get:CMatchAdditionalUnitInventory.items)
  return items_.Get(index);
}
inline void CMatchAdditionalUnitInventory::set_items(int index, ::google::protobuf::uint32 value) {
  items_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMatchAdditionalUnitInventory.items)
}
inline void CMatchAdditionalUnitInventory::add_items(::google::protobuf::uint32 value) {
  items_.Add(value);
  // @@protoc_insertion_point(field_add:CMatchAdditionalUnitInventory.items)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMatchAdditionalUnitInventory::items() const {
  // @@protoc_insertion_point(field_list:CMatchAdditionalUnitInventory.items)
  return items_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMatchAdditionalUnitInventory::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CMatchAdditionalUnitInventory.items)
  return &items_;
}

// -------------------------------------------------------------------

// CMatchPlayerPermanentBuff

// optional uint32 permanent_buff = 1;
inline bool CMatchPlayerPermanentBuff::has_permanent_buff() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMatchPlayerPermanentBuff::set_has_permanent_buff() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMatchPlayerPermanentBuff::clear_has_permanent_buff() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMatchPlayerPermanentBuff::clear_permanent_buff() {
  permanent_buff_ = 0u;
  clear_has_permanent_buff();
}
inline ::google::protobuf::uint32 CMatchPlayerPermanentBuff::permanent_buff() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerPermanentBuff.permanent_buff)
  return permanent_buff_;
}
inline void CMatchPlayerPermanentBuff::set_permanent_buff(::google::protobuf::uint32 value) {
  set_has_permanent_buff();
  permanent_buff_ = value;
  // @@protoc_insertion_point(field_set:CMatchPlayerPermanentBuff.permanent_buff)
}

// optional uint32 stack_count = 2;
inline bool CMatchPlayerPermanentBuff::has_stack_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMatchPlayerPermanentBuff::set_has_stack_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMatchPlayerPermanentBuff::clear_has_stack_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMatchPlayerPermanentBuff::clear_stack_count() {
  stack_count_ = 0u;
  clear_has_stack_count();
}
inline ::google::protobuf::uint32 CMatchPlayerPermanentBuff::stack_count() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerPermanentBuff.stack_count)
  return stack_count_;
}
inline void CMatchPlayerPermanentBuff::set_stack_count(::google::protobuf::uint32 value) {
  set_has_stack_count();
  stack_count_ = value;
  // @@protoc_insertion_point(field_set:CMatchPlayerPermanentBuff.stack_count)
}

// -------------------------------------------------------------------

// CMatchHeroSelectEvent

// optional bool is_pick = 1;
inline bool CMatchHeroSelectEvent::has_is_pick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMatchHeroSelectEvent::set_has_is_pick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMatchHeroSelectEvent::clear_has_is_pick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMatchHeroSelectEvent::clear_is_pick() {
  is_pick_ = false;
  clear_has_is_pick();
}
inline bool CMatchHeroSelectEvent::is_pick() const {
  // @@protoc_insertion_point(field_get:CMatchHeroSelectEvent.is_pick)
  return is_pick_;
}
inline void CMatchHeroSelectEvent::set_is_pick(bool value) {
  set_has_is_pick();
  is_pick_ = value;
  // @@protoc_insertion_point(field_set:CMatchHeroSelectEvent.is_pick)
}

// optional uint32 team = 2;
inline bool CMatchHeroSelectEvent::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMatchHeroSelectEvent::set_has_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMatchHeroSelectEvent::clear_has_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMatchHeroSelectEvent::clear_team() {
  team_ = 0u;
  clear_has_team();
}
inline ::google::protobuf::uint32 CMatchHeroSelectEvent::team() const {
  // @@protoc_insertion_point(field_get:CMatchHeroSelectEvent.team)
  return team_;
}
inline void CMatchHeroSelectEvent::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CMatchHeroSelectEvent.team)
}

// optional uint32 hero_id = 3;
inline bool CMatchHeroSelectEvent::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMatchHeroSelectEvent::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMatchHeroSelectEvent::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMatchHeroSelectEvent::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMatchHeroSelectEvent::hero_id() const {
  // @@protoc_insertion_point(field_get:CMatchHeroSelectEvent.hero_id)
  return hero_id_;
}
inline void CMatchHeroSelectEvent::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMatchHeroSelectEvent.hero_id)
}

// -------------------------------------------------------------------

// CMsgDOTAProcessFantasyScheduledEvent

// optional uint32 event = 1;
inline bool CMsgDOTAProcessFantasyScheduledEvent::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_has_event() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_has_event() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_event() {
  event_ = 0u;
  clear_has_event();
}
inline ::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::event() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProcessFantasyScheduledEvent.event)
  return event_;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_event(::google::protobuf::uint32 value) {
  set_has_event();
  event_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProcessFantasyScheduledEvent.event)
}

// optional uint32 timestamp = 2;
inline bool CMsgDOTAProcessFantasyScheduledEvent::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProcessFantasyScheduledEvent.timestamp)
  return timestamp_;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProcessFantasyScheduledEvent.timestamp)
}

// optional uint32 fantasy_league_id = 3;
inline bool CMsgDOTAProcessFantasyScheduledEvent::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
inline ::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProcessFantasyScheduledEvent.fantasy_league_id)
  return fantasy_league_id_;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProcessFantasyScheduledEvent.fantasy_league_id)
}

// optional uint32 season = 4;
inline bool CMsgDOTAProcessFantasyScheduledEvent::has_season() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_has_season() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_has_season() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_season() {
  season_ = 0u;
  clear_has_season();
}
inline ::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::season() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProcessFantasyScheduledEvent.season)
  return season_;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_season(::google::protobuf::uint32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProcessFantasyScheduledEvent.season)
}

// optional uint32 reference_data = 5;
inline bool CMsgDOTAProcessFantasyScheduledEvent::has_reference_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_has_reference_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_has_reference_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_reference_data() {
  reference_data_ = 0u;
  clear_has_reference_data();
}
inline ::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::reference_data() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProcessFantasyScheduledEvent.reference_data)
  return reference_data_;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_reference_data(::google::protobuf::uint32 value) {
  set_has_reference_data();
  reference_data_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProcessFantasyScheduledEvent.reference_data)
}

// -------------------------------------------------------------------

// CMsgDOTAHasItemQuery

// optional uint32 account_id = 1;
inline bool CMsgDOTAHasItemQuery::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAHasItemQuery::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAHasItemQuery::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAHasItemQuery::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAHasItemQuery::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHasItemQuery.account_id)
  return account_id_;
}
inline void CMsgDOTAHasItemQuery::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHasItemQuery.account_id)
}

// optional uint64 item_id = 2;
inline bool CMsgDOTAHasItemQuery::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAHasItemQuery::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAHasItemQuery::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAHasItemQuery::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
inline ::google::protobuf::uint64 CMsgDOTAHasItemQuery::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHasItemQuery.item_id)
  return item_id_;
}
inline void CMsgDOTAHasItemQuery::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHasItemQuery.item_id)
}

// -------------------------------------------------------------------

// CMsgDOTAHasItemResponse

// optional bool has_item = 1;
inline bool CMsgDOTAHasItemResponse::has_has_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAHasItemResponse::set_has_has_item() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAHasItemResponse::clear_has_has_item() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAHasItemResponse::clear_has_item() {
  has_item_ = false;
  clear_has_has_item();
}
inline bool CMsgDOTAHasItemResponse::has_item() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHasItemResponse.has_item)
  return has_item_;
}
inline void CMsgDOTAHasItemResponse::set_has_item(bool value) {
  set_has_has_item();
  has_item_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHasItemResponse.has_item)
}

// -------------------------------------------------------------------

// CMsgDOTAHasItemDefsQuery

// optional uint32 account_id = 1;
inline bool CMsgDOTAHasItemDefsQuery::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAHasItemDefsQuery::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAHasItemDefsQuery::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAHasItemDefsQuery::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAHasItemDefsQuery::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHasItemDefsQuery.account_id)
  return account_id_;
}
inline void CMsgDOTAHasItemDefsQuery::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHasItemDefsQuery.account_id)
}

// repeated uint32 itemdef_ids = 2;
inline int CMsgDOTAHasItemDefsQuery::itemdef_ids_size() const {
  return itemdef_ids_.size();
}
inline void CMsgDOTAHasItemDefsQuery::clear_itemdef_ids() {
  itemdef_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTAHasItemDefsQuery::itemdef_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHasItemDefsQuery.itemdef_ids)
  return itemdef_ids_.Get(index);
}
inline void CMsgDOTAHasItemDefsQuery::set_itemdef_ids(int index, ::google::protobuf::uint32 value) {
  itemdef_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAHasItemDefsQuery.itemdef_ids)
}
inline void CMsgDOTAHasItemDefsQuery::add_itemdef_ids(::google::protobuf::uint32 value) {
  itemdef_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAHasItemDefsQuery.itemdef_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAHasItemDefsQuery::itemdef_ids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAHasItemDefsQuery.itemdef_ids)
  return itemdef_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAHasItemDefsQuery::mutable_itemdef_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAHasItemDefsQuery.itemdef_ids)
  return &itemdef_ids_;
}

// -------------------------------------------------------------------

// CMsgDOTAHasItemDefsResponse

// optional bool has_items = 1;
inline bool CMsgDOTAHasItemDefsResponse::has_has_items() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAHasItemDefsResponse::set_has_has_items() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAHasItemDefsResponse::clear_has_has_items() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAHasItemDefsResponse::clear_has_items() {
  has_items_ = false;
  clear_has_has_items();
}
inline bool CMsgDOTAHasItemDefsResponse::has_items() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHasItemDefsResponse.has_items)
  return has_items_;
}
inline void CMsgDOTAHasItemDefsResponse::set_has_items(bool value) {
  set_has_has_items();
  has_items_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHasItemDefsResponse.has_items)
}

// -------------------------------------------------------------------

// CMsgGCGetPlayerCardItemInfo

// optional uint32 account_id = 1;
inline bool CMsgGCGetPlayerCardItemInfo::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCGetPlayerCardItemInfo::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCGetPlayerCardItemInfo::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCGetPlayerCardItemInfo::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgGCGetPlayerCardItemInfo::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetPlayerCardItemInfo.account_id)
  return account_id_;
}
inline void CMsgGCGetPlayerCardItemInfo::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCGetPlayerCardItemInfo.account_id)
}

// repeated uint64 player_card_item_ids = 2;
inline int CMsgGCGetPlayerCardItemInfo::player_card_item_ids_size() const {
  return player_card_item_ids_.size();
}
inline void CMsgGCGetPlayerCardItemInfo::clear_player_card_item_ids() {
  player_card_item_ids_.Clear();
}
inline ::google::protobuf::uint64 CMsgGCGetPlayerCardItemInfo::player_card_item_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCGetPlayerCardItemInfo.player_card_item_ids)
  return player_card_item_ids_.Get(index);
}
inline void CMsgGCGetPlayerCardItemInfo::set_player_card_item_ids(int index, ::google::protobuf::uint64 value) {
  player_card_item_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCGetPlayerCardItemInfo.player_card_item_ids)
}
inline void CMsgGCGetPlayerCardItemInfo::add_player_card_item_ids(::google::protobuf::uint64 value) {
  player_card_item_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgGCGetPlayerCardItemInfo.player_card_item_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgGCGetPlayerCardItemInfo::player_card_item_ids() const {
  // @@protoc_insertion_point(field_list:CMsgGCGetPlayerCardItemInfo.player_card_item_ids)
  return player_card_item_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgGCGetPlayerCardItemInfo::mutable_player_card_item_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCGetPlayerCardItemInfo.player_card_item_ids)
  return &player_card_item_ids_;
}

// -------------------------------------------------------------------

// CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo

// optional uint64 player_card_item_id = 1;
inline bool CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::has_player_card_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::set_has_player_card_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::clear_has_player_card_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::clear_player_card_item_id() {
  player_card_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_card_item_id();
}
inline ::google::protobuf::uint64 CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::player_card_item_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo.player_card_item_id)
  return player_card_item_id_;
}
inline void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::set_player_card_item_id(::google::protobuf::uint64 value) {
  set_has_player_card_item_id();
  player_card_item_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo.player_card_item_id)
}

// optional uint32 account_id = 2;
inline bool CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo.account_id)
  return account_id_;
}
inline void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo.account_id)
}

// optional uint64 packed_bonuses = 3;
inline bool CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::has_packed_bonuses() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::set_has_packed_bonuses() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::clear_has_packed_bonuses() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::clear_packed_bonuses() {
  packed_bonuses_ = GOOGLE_ULONGLONG(0);
  clear_has_packed_bonuses();
}
inline ::google::protobuf::uint64 CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::packed_bonuses() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo.packed_bonuses)
  return packed_bonuses_;
}
inline void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::set_packed_bonuses(::google::protobuf::uint64 value) {
  set_has_packed_bonuses();
  packed_bonuses_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo.packed_bonuses)
}

// -------------------------------------------------------------------

// CMsgGCGetPlayerCardItemInfoResponse

// repeated .CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo player_card_infos = 1;
inline int CMsgGCGetPlayerCardItemInfoResponse::player_card_infos_size() const {
  return player_card_infos_.size();
}
inline void CMsgGCGetPlayerCardItemInfoResponse::clear_player_card_infos() {
  player_card_infos_.Clear();
}
inline const ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& CMsgGCGetPlayerCardItemInfoResponse::player_card_infos(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCGetPlayerCardItemInfoResponse.player_card_infos)
  return player_card_infos_.Get(index);
}
inline ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* CMsgGCGetPlayerCardItemInfoResponse::mutable_player_card_infos(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCGetPlayerCardItemInfoResponse.player_card_infos)
  return player_card_infos_.Mutable(index);
}
inline ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* CMsgGCGetPlayerCardItemInfoResponse::add_player_card_infos() {
  // @@protoc_insertion_point(field_add:CMsgGCGetPlayerCardItemInfoResponse.player_card_infos)
  return player_card_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo >&
CMsgGCGetPlayerCardItemInfoResponse::player_card_infos() const {
  // @@protoc_insertion_point(field_list:CMsgGCGetPlayerCardItemInfoResponse.player_card_infos)
  return player_card_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo >*
CMsgGCGetPlayerCardItemInfoResponse::mutable_player_card_infos() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCGetPlayerCardItemInfoResponse.player_card_infos)
  return &player_card_infos_;
}

// -------------------------------------------------------------------

// CMsgGCToGCFantasySetMatchLeague

// optional uint64 match_id = 1;
inline bool CMsgGCToGCFantasySetMatchLeague::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToGCFantasySetMatchLeague::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToGCFantasySetMatchLeague::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToGCFantasySetMatchLeague::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
inline ::google::protobuf::uint64 CMsgGCToGCFantasySetMatchLeague::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCFantasySetMatchLeague.match_id)
  return match_id_;
}
inline void CMsgGCToGCFantasySetMatchLeague::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCFantasySetMatchLeague.match_id)
}

// optional uint32 league_id = 2;
inline bool CMsgGCToGCFantasySetMatchLeague::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCToGCFantasySetMatchLeague::set_has_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCToGCFantasySetMatchLeague::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCToGCFantasySetMatchLeague::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgGCToGCFantasySetMatchLeague::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCFantasySetMatchLeague.league_id)
  return league_id_;
}
inline void CMsgGCToGCFantasySetMatchLeague::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCFantasySetMatchLeague.league_id)
}

// -------------------------------------------------------------------

// CSODOTAMapLocationState

// optional uint32 account_id = 1;
inline bool CSODOTAMapLocationState::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAMapLocationState::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAMapLocationState::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAMapLocationState::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CSODOTAMapLocationState::account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAMapLocationState.account_id)
  return account_id_;
}
inline void CSODOTAMapLocationState::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAMapLocationState.account_id)
}

// optional int32 location_id = 2;
inline bool CSODOTAMapLocationState::has_location_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAMapLocationState::set_has_location_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAMapLocationState::clear_has_location_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAMapLocationState::clear_location_id() {
  location_id_ = 0;
  clear_has_location_id();
}
inline ::google::protobuf::int32 CSODOTAMapLocationState::location_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAMapLocationState.location_id)
  return location_id_;
}
inline void CSODOTAMapLocationState::set_location_id(::google::protobuf::int32 value) {
  set_has_location_id();
  location_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAMapLocationState.location_id)
}

// optional bool completed = 3;
inline bool CSODOTAMapLocationState::has_completed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTAMapLocationState::set_has_completed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSODOTAMapLocationState::clear_has_completed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSODOTAMapLocationState::clear_completed() {
  completed_ = false;
  clear_has_completed();
}
inline bool CSODOTAMapLocationState::completed() const {
  // @@protoc_insertion_point(field_get:CSODOTAMapLocationState.completed)
  return completed_;
}
inline void CSODOTAMapLocationState::set_completed(bool value) {
  set_has_completed();
  completed_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAMapLocationState.completed)
}

// -------------------------------------------------------------------

// CMsgLeagueAdminList

// repeated uint32 account_ids = 1;
inline int CMsgLeagueAdminList::account_ids_size() const {
  return account_ids_.size();
}
inline void CMsgLeagueAdminList::clear_account_ids() {
  account_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgLeagueAdminList::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgLeagueAdminList.account_ids)
  return account_ids_.Get(index);
}
inline void CMsgLeagueAdminList::set_account_ids(int index, ::google::protobuf::uint32 value) {
  account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgLeagueAdminList.account_ids)
}
inline void CMsgLeagueAdminList::add_account_ids(::google::protobuf::uint32 value) {
  account_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgLeagueAdminList.account_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgLeagueAdminList::account_ids() const {
  // @@protoc_insertion_point(field_list:CMsgLeagueAdminList.account_ids)
  return account_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgLeagueAdminList::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgLeagueAdminList.account_ids)
  return &account_ids_;
}

// -------------------------------------------------------------------

// CCompendiumTimestampedData

// optional uint32 game_time = 1;
inline bool CCompendiumTimestampedData::has_game_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCompendiumTimestampedData::set_has_game_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CCompendiumTimestampedData::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CCompendiumTimestampedData::clear_game_time() {
  game_time_ = 0u;
  clear_has_game_time();
}
inline ::google::protobuf::uint32 CCompendiumTimestampedData::game_time() const {
  // @@protoc_insertion_point(field_get:CCompendiumTimestampedData.game_time)
  return game_time_;
}
inline void CCompendiumTimestampedData::set_game_time(::google::protobuf::uint32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:CCompendiumTimestampedData.game_time)
}

// optional uint32 gpm = 2;
inline bool CCompendiumTimestampedData::has_gpm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCompendiumTimestampedData::set_has_gpm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CCompendiumTimestampedData::clear_has_gpm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CCompendiumTimestampedData::clear_gpm() {
  gpm_ = 0u;
  clear_has_gpm();
}
inline ::google::protobuf::uint32 CCompendiumTimestampedData::gpm() const {
  // @@protoc_insertion_point(field_get:CCompendiumTimestampedData.gpm)
  return gpm_;
}
inline void CCompendiumTimestampedData::set_gpm(::google::protobuf::uint32 value) {
  set_has_gpm();
  gpm_ = value;
  // @@protoc_insertion_point(field_set:CCompendiumTimestampedData.gpm)
}

// optional uint32 xpm = 3;
inline bool CCompendiumTimestampedData::has_xpm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CCompendiumTimestampedData::set_has_xpm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CCompendiumTimestampedData::clear_has_xpm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CCompendiumTimestampedData::clear_xpm() {
  xpm_ = 0u;
  clear_has_xpm();
}
inline ::google::protobuf::uint32 CCompendiumTimestampedData::xpm() const {
  // @@protoc_insertion_point(field_get:CCompendiumTimestampedData.xpm)
  return xpm_;
}
inline void CCompendiumTimestampedData::set_xpm(::google::protobuf::uint32 value) {
  set_has_xpm();
  xpm_ = value;
  // @@protoc_insertion_point(field_set:CCompendiumTimestampedData.xpm)
}

// optional uint32 kills = 4;
inline bool CCompendiumTimestampedData::has_kills() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CCompendiumTimestampedData::set_has_kills() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CCompendiumTimestampedData::clear_has_kills() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CCompendiumTimestampedData::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
inline ::google::protobuf::uint32 CCompendiumTimestampedData::kills() const {
  // @@protoc_insertion_point(field_get:CCompendiumTimestampedData.kills)
  return kills_;
}
inline void CCompendiumTimestampedData::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:CCompendiumTimestampedData.kills)
}

// optional uint32 deaths = 5;
inline bool CCompendiumTimestampedData::has_deaths() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CCompendiumTimestampedData::set_has_deaths() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CCompendiumTimestampedData::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CCompendiumTimestampedData::clear_deaths() {
  deaths_ = 0u;
  clear_has_deaths();
}
inline ::google::protobuf::uint32 CCompendiumTimestampedData::deaths() const {
  // @@protoc_insertion_point(field_get:CCompendiumTimestampedData.deaths)
  return deaths_;
}
inline void CCompendiumTimestampedData::set_deaths(::google::protobuf::uint32 value) {
  set_has_deaths();
  deaths_ = value;
  // @@protoc_insertion_point(field_set:CCompendiumTimestampedData.deaths)
}

// repeated uint32 item_purchases = 6;
inline int CCompendiumTimestampedData::item_purchases_size() const {
  return item_purchases_.size();
}
inline void CCompendiumTimestampedData::clear_item_purchases() {
  item_purchases_.Clear();
}
inline ::google::protobuf::uint32 CCompendiumTimestampedData::item_purchases(int index) const {
  // @@protoc_insertion_point(field_get:CCompendiumTimestampedData.item_purchases)
  return item_purchases_.Get(index);
}
inline void CCompendiumTimestampedData::set_item_purchases(int index, ::google::protobuf::uint32 value) {
  item_purchases_.Set(index, value);
  // @@protoc_insertion_point(field_set:CCompendiumTimestampedData.item_purchases)
}
inline void CCompendiumTimestampedData::add_item_purchases(::google::protobuf::uint32 value) {
  item_purchases_.Add(value);
  // @@protoc_insertion_point(field_add:CCompendiumTimestampedData.item_purchases)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CCompendiumTimestampedData::item_purchases() const {
  // @@protoc_insertion_point(field_list:CCompendiumTimestampedData.item_purchases)
  return item_purchases_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CCompendiumTimestampedData::mutable_item_purchases() {
  // @@protoc_insertion_point(field_mutable_list:CCompendiumTimestampedData.item_purchases)
  return &item_purchases_;
}

// -------------------------------------------------------------------

// CCompendiumGameTimeline

// repeated .CCompendiumTimestampedData data = 1;
inline int CCompendiumGameTimeline::data_size() const {
  return data_.size();
}
inline void CCompendiumGameTimeline::clear_data() {
  data_.Clear();
}
inline const ::CCompendiumTimestampedData& CCompendiumGameTimeline::data(int index) const {
  // @@protoc_insertion_point(field_get:CCompendiumGameTimeline.data)
  return data_.Get(index);
}
inline ::CCompendiumTimestampedData* CCompendiumGameTimeline::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:CCompendiumGameTimeline.data)
  return data_.Mutable(index);
}
inline ::CCompendiumTimestampedData* CCompendiumGameTimeline::add_data() {
  // @@protoc_insertion_point(field_add:CCompendiumGameTimeline.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CCompendiumTimestampedData >&
CCompendiumGameTimeline::data() const {
  // @@protoc_insertion_point(field_list:CCompendiumGameTimeline.data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::CCompendiumTimestampedData >*
CCompendiumGameTimeline::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:CCompendiumGameTimeline.data)
  return &data_;
}

// repeated string tags = 2;
inline int CCompendiumGameTimeline::tags_size() const {
  return tags_.size();
}
inline void CCompendiumGameTimeline::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& CCompendiumGameTimeline::tags(int index) const {
  // @@protoc_insertion_point(field_get:CCompendiumGameTimeline.tags)
  return tags_.Get(index);
}
inline ::std::string* CCompendiumGameTimeline::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CCompendiumGameTimeline.tags)
  return tags_.Mutable(index);
}
inline void CCompendiumGameTimeline::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CCompendiumGameTimeline.tags)
  tags_.Mutable(index)->assign(value);
}
inline void CCompendiumGameTimeline::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CCompendiumGameTimeline.tags)
}
inline void CCompendiumGameTimeline::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCompendiumGameTimeline.tags)
}
inline ::std::string* CCompendiumGameTimeline::add_tags() {
  return tags_.Add();
}
inline void CCompendiumGameTimeline::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CCompendiumGameTimeline.tags)
}
inline void CCompendiumGameTimeline::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CCompendiumGameTimeline.tags)
}
inline void CCompendiumGameTimeline::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CCompendiumGameTimeline.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CCompendiumGameTimeline::tags() const {
  // @@protoc_insertion_point(field_list:CCompendiumGameTimeline.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CCompendiumGameTimeline::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CCompendiumGameTimeline.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// CCompendiumGameList

// repeated .CCompendiumGameTimeline games = 1;
inline int CCompendiumGameList::games_size() const {
  return games_.size();
}
inline void CCompendiumGameList::clear_games() {
  games_.Clear();
}
inline const ::CCompendiumGameTimeline& CCompendiumGameList::games(int index) const {
  // @@protoc_insertion_point(field_get:CCompendiumGameList.games)
  return games_.Get(index);
}
inline ::CCompendiumGameTimeline* CCompendiumGameList::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:CCompendiumGameList.games)
  return games_.Mutable(index);
}
inline ::CCompendiumGameTimeline* CCompendiumGameList::add_games() {
  // @@protoc_insertion_point(field_add:CCompendiumGameList.games)
  return games_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CCompendiumGameTimeline >&
CCompendiumGameList::games() const {
  // @@protoc_insertion_point(field_list:CCompendiumGameList.games)
  return games_;
}
inline ::google::protobuf::RepeatedPtrField< ::CCompendiumGameTimeline >*
CCompendiumGameList::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:CCompendiumGameList.games)
  return &games_;
}

// -------------------------------------------------------------------

// CAdditionalEquipSlot

// optional uint32 class_id = 1;
inline bool CAdditionalEquipSlot::has_class_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAdditionalEquipSlot::set_has_class_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAdditionalEquipSlot::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAdditionalEquipSlot::clear_class_id() {
  class_id_ = 0u;
  clear_has_class_id();
}
inline ::google::protobuf::uint32 CAdditionalEquipSlot::class_id() const {
  // @@protoc_insertion_point(field_get:CAdditionalEquipSlot.class_id)
  return class_id_;
}
inline void CAdditionalEquipSlot::set_class_id(::google::protobuf::uint32 value) {
  set_has_class_id();
  class_id_ = value;
  // @@protoc_insertion_point(field_set:CAdditionalEquipSlot.class_id)
}

// optional uint32 slot_id = 2;
inline bool CAdditionalEquipSlot::has_slot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAdditionalEquipSlot::set_has_slot_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAdditionalEquipSlot::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAdditionalEquipSlot::clear_slot_id() {
  slot_id_ = 0u;
  clear_has_slot_id();
}
inline ::google::protobuf::uint32 CAdditionalEquipSlot::slot_id() const {
  // @@protoc_insertion_point(field_get:CAdditionalEquipSlot.slot_id)
  return slot_id_;
}
inline void CAdditionalEquipSlot::set_slot_id(::google::protobuf::uint32 value) {
  set_has_slot_id();
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:CAdditionalEquipSlot.slot_id)
}

// optional uint32 def_index = 3;
inline bool CAdditionalEquipSlot::has_def_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CAdditionalEquipSlot::set_has_def_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CAdditionalEquipSlot::clear_has_def_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CAdditionalEquipSlot::clear_def_index() {
  def_index_ = 0u;
  clear_has_def_index();
}
inline ::google::protobuf::uint32 CAdditionalEquipSlot::def_index() const {
  // @@protoc_insertion_point(field_get:CAdditionalEquipSlot.def_index)
  return def_index_;
}
inline void CAdditionalEquipSlot::set_def_index(::google::protobuf::uint32 value) {
  set_has_def_index();
  def_index_ = value;
  // @@protoc_insertion_point(field_set:CAdditionalEquipSlot.def_index)
}

// -------------------------------------------------------------------

// CMsgDOTACombatLogEntry

// optional .DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_INVALID];
inline bool CMsgDOTACombatLogEntry::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTACombatLogEntry::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTACombatLogEntry::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::DOTA_COMBATLOG_TYPES CMsgDOTACombatLogEntry::type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.type)
  return static_cast< ::DOTA_COMBATLOG_TYPES >(type_);
}
inline void CMsgDOTACombatLogEntry::set_type(::DOTA_COMBATLOG_TYPES value) {
  assert(::DOTA_COMBATLOG_TYPES_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.type)
}

// optional uint32 target_name = 2;
inline bool CMsgDOTACombatLogEntry::has_target_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_target_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTACombatLogEntry::clear_has_target_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTACombatLogEntry::clear_target_name() {
  target_name_ = 0u;
  clear_has_target_name();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::target_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.target_name)
  return target_name_;
}
inline void CMsgDOTACombatLogEntry::set_target_name(::google::protobuf::uint32 value) {
  set_has_target_name();
  target_name_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.target_name)
}

// optional uint32 target_source_name = 3;
inline bool CMsgDOTACombatLogEntry::has_target_source_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_target_source_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTACombatLogEntry::clear_has_target_source_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTACombatLogEntry::clear_target_source_name() {
  target_source_name_ = 0u;
  clear_has_target_source_name();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::target_source_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.target_source_name)
  return target_source_name_;
}
inline void CMsgDOTACombatLogEntry::set_target_source_name(::google::protobuf::uint32 value) {
  set_has_target_source_name();
  target_source_name_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.target_source_name)
}

// optional uint32 attacker_name = 4;
inline bool CMsgDOTACombatLogEntry::has_attacker_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_attacker_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTACombatLogEntry::clear_has_attacker_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTACombatLogEntry::clear_attacker_name() {
  attacker_name_ = 0u;
  clear_has_attacker_name();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::attacker_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.attacker_name)
  return attacker_name_;
}
inline void CMsgDOTACombatLogEntry::set_attacker_name(::google::protobuf::uint32 value) {
  set_has_attacker_name();
  attacker_name_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.attacker_name)
}

// optional uint32 damage_source_name = 5;
inline bool CMsgDOTACombatLogEntry::has_damage_source_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_damage_source_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTACombatLogEntry::clear_has_damage_source_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTACombatLogEntry::clear_damage_source_name() {
  damage_source_name_ = 0u;
  clear_has_damage_source_name();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::damage_source_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.damage_source_name)
  return damage_source_name_;
}
inline void CMsgDOTACombatLogEntry::set_damage_source_name(::google::protobuf::uint32 value) {
  set_has_damage_source_name();
  damage_source_name_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.damage_source_name)
}

// optional uint32 inflictor_name = 6;
inline bool CMsgDOTACombatLogEntry::has_inflictor_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_inflictor_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTACombatLogEntry::clear_has_inflictor_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTACombatLogEntry::clear_inflictor_name() {
  inflictor_name_ = 0u;
  clear_has_inflictor_name();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::inflictor_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.inflictor_name)
  return inflictor_name_;
}
inline void CMsgDOTACombatLogEntry::set_inflictor_name(::google::protobuf::uint32 value) {
  set_has_inflictor_name();
  inflictor_name_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.inflictor_name)
}

// optional bool is_attacker_illusion = 7;
inline bool CMsgDOTACombatLogEntry::has_is_attacker_illusion() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_is_attacker_illusion() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTACombatLogEntry::clear_has_is_attacker_illusion() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTACombatLogEntry::clear_is_attacker_illusion() {
  is_attacker_illusion_ = false;
  clear_has_is_attacker_illusion();
}
inline bool CMsgDOTACombatLogEntry::is_attacker_illusion() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_attacker_illusion)
  return is_attacker_illusion_;
}
inline void CMsgDOTACombatLogEntry::set_is_attacker_illusion(bool value) {
  set_has_is_attacker_illusion();
  is_attacker_illusion_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_attacker_illusion)
}

// optional bool is_attacker_hero = 8;
inline bool CMsgDOTACombatLogEntry::has_is_attacker_hero() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_is_attacker_hero() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTACombatLogEntry::clear_has_is_attacker_hero() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTACombatLogEntry::clear_is_attacker_hero() {
  is_attacker_hero_ = false;
  clear_has_is_attacker_hero();
}
inline bool CMsgDOTACombatLogEntry::is_attacker_hero() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_attacker_hero)
  return is_attacker_hero_;
}
inline void CMsgDOTACombatLogEntry::set_is_attacker_hero(bool value) {
  set_has_is_attacker_hero();
  is_attacker_hero_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_attacker_hero)
}

// optional bool is_target_illusion = 9;
inline bool CMsgDOTACombatLogEntry::has_is_target_illusion() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_is_target_illusion() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTACombatLogEntry::clear_has_is_target_illusion() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTACombatLogEntry::clear_is_target_illusion() {
  is_target_illusion_ = false;
  clear_has_is_target_illusion();
}
inline bool CMsgDOTACombatLogEntry::is_target_illusion() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_target_illusion)
  return is_target_illusion_;
}
inline void CMsgDOTACombatLogEntry::set_is_target_illusion(bool value) {
  set_has_is_target_illusion();
  is_target_illusion_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_target_illusion)
}

// optional bool is_target_hero = 10;
inline bool CMsgDOTACombatLogEntry::has_is_target_hero() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_is_target_hero() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTACombatLogEntry::clear_has_is_target_hero() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTACombatLogEntry::clear_is_target_hero() {
  is_target_hero_ = false;
  clear_has_is_target_hero();
}
inline bool CMsgDOTACombatLogEntry::is_target_hero() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_target_hero)
  return is_target_hero_;
}
inline void CMsgDOTACombatLogEntry::set_is_target_hero(bool value) {
  set_has_is_target_hero();
  is_target_hero_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_target_hero)
}

// optional bool is_visible_radiant = 11;
inline bool CMsgDOTACombatLogEntry::has_is_visible_radiant() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_is_visible_radiant() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgDOTACombatLogEntry::clear_has_is_visible_radiant() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgDOTACombatLogEntry::clear_is_visible_radiant() {
  is_visible_radiant_ = false;
  clear_has_is_visible_radiant();
}
inline bool CMsgDOTACombatLogEntry::is_visible_radiant() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_visible_radiant)
  return is_visible_radiant_;
}
inline void CMsgDOTACombatLogEntry::set_is_visible_radiant(bool value) {
  set_has_is_visible_radiant();
  is_visible_radiant_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_visible_radiant)
}

// optional bool is_visible_dire = 12;
inline bool CMsgDOTACombatLogEntry::has_is_visible_dire() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_is_visible_dire() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgDOTACombatLogEntry::clear_has_is_visible_dire() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgDOTACombatLogEntry::clear_is_visible_dire() {
  is_visible_dire_ = false;
  clear_has_is_visible_dire();
}
inline bool CMsgDOTACombatLogEntry::is_visible_dire() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_visible_dire)
  return is_visible_dire_;
}
inline void CMsgDOTACombatLogEntry::set_is_visible_dire(bool value) {
  set_has_is_visible_dire();
  is_visible_dire_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_visible_dire)
}

// optional uint32 value = 13;
inline bool CMsgDOTACombatLogEntry::has_value() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_value() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_value() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgDOTACombatLogEntry::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::value() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.value)
  return value_;
}
inline void CMsgDOTACombatLogEntry::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.value)
}

// optional int32 health = 14;
inline bool CMsgDOTACombatLogEntry::has_health() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_health() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_health() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgDOTACombatLogEntry::clear_health() {
  health_ = 0;
  clear_has_health();
}
inline ::google::protobuf::int32 CMsgDOTACombatLogEntry::health() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.health)
  return health_;
}
inline void CMsgDOTACombatLogEntry::set_health(::google::protobuf::int32 value) {
  set_has_health();
  health_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.health)
}

// optional float timestamp = 15;
inline bool CMsgDOTACombatLogEntry::has_timestamp() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_timestamp() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgDOTACombatLogEntry::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline float CMsgDOTACombatLogEntry::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.timestamp)
  return timestamp_;
}
inline void CMsgDOTACombatLogEntry::set_timestamp(float value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.timestamp)
}

// optional float stun_duration = 16;
inline bool CMsgDOTACombatLogEntry::has_stun_duration() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_stun_duration() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_stun_duration() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgDOTACombatLogEntry::clear_stun_duration() {
  stun_duration_ = 0;
  clear_has_stun_duration();
}
inline float CMsgDOTACombatLogEntry::stun_duration() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.stun_duration)
  return stun_duration_;
}
inline void CMsgDOTACombatLogEntry::set_stun_duration(float value) {
  set_has_stun_duration();
  stun_duration_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.stun_duration)
}

// optional float slow_duration = 17;
inline bool CMsgDOTACombatLogEntry::has_slow_duration() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_slow_duration() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_slow_duration() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgDOTACombatLogEntry::clear_slow_duration() {
  slow_duration_ = 0;
  clear_has_slow_duration();
}
inline float CMsgDOTACombatLogEntry::slow_duration() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.slow_duration)
  return slow_duration_;
}
inline void CMsgDOTACombatLogEntry::set_slow_duration(float value) {
  set_has_slow_duration();
  slow_duration_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.slow_duration)
}

// optional bool is_ability_toggle_on = 18;
inline bool CMsgDOTACombatLogEntry::has_is_ability_toggle_on() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_is_ability_toggle_on() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_is_ability_toggle_on() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgDOTACombatLogEntry::clear_is_ability_toggle_on() {
  is_ability_toggle_on_ = false;
  clear_has_is_ability_toggle_on();
}
inline bool CMsgDOTACombatLogEntry::is_ability_toggle_on() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_ability_toggle_on)
  return is_ability_toggle_on_;
}
inline void CMsgDOTACombatLogEntry::set_is_ability_toggle_on(bool value) {
  set_has_is_ability_toggle_on();
  is_ability_toggle_on_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_ability_toggle_on)
}

// optional bool is_ability_toggle_off = 19;
inline bool CMsgDOTACombatLogEntry::has_is_ability_toggle_off() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_is_ability_toggle_off() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_is_ability_toggle_off() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgDOTACombatLogEntry::clear_is_ability_toggle_off() {
  is_ability_toggle_off_ = false;
  clear_has_is_ability_toggle_off();
}
inline bool CMsgDOTACombatLogEntry::is_ability_toggle_off() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_ability_toggle_off)
  return is_ability_toggle_off_;
}
inline void CMsgDOTACombatLogEntry::set_is_ability_toggle_off(bool value) {
  set_has_is_ability_toggle_off();
  is_ability_toggle_off_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_ability_toggle_off)
}

// optional uint32 ability_level = 20;
inline bool CMsgDOTACombatLogEntry::has_ability_level() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_ability_level() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_ability_level() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgDOTACombatLogEntry::clear_ability_level() {
  ability_level_ = 0u;
  clear_has_ability_level();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::ability_level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.ability_level)
  return ability_level_;
}
inline void CMsgDOTACombatLogEntry::set_ability_level(::google::protobuf::uint32 value) {
  set_has_ability_level();
  ability_level_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.ability_level)
}

// optional float location_x = 21;
inline bool CMsgDOTACombatLogEntry::has_location_x() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_location_x() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_location_x() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMsgDOTACombatLogEntry::clear_location_x() {
  location_x_ = 0;
  clear_has_location_x();
}
inline float CMsgDOTACombatLogEntry::location_x() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.location_x)
  return location_x_;
}
inline void CMsgDOTACombatLogEntry::set_location_x(float value) {
  set_has_location_x();
  location_x_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.location_x)
}

// optional float location_y = 22;
inline bool CMsgDOTACombatLogEntry::has_location_y() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_location_y() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_location_y() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMsgDOTACombatLogEntry::clear_location_y() {
  location_y_ = 0;
  clear_has_location_y();
}
inline float CMsgDOTACombatLogEntry::location_y() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.location_y)
  return location_y_;
}
inline void CMsgDOTACombatLogEntry::set_location_y(float value) {
  set_has_location_y();
  location_y_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.location_y)
}

// optional uint32 gold_reason = 23;
inline bool CMsgDOTACombatLogEntry::has_gold_reason() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_gold_reason() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_gold_reason() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CMsgDOTACombatLogEntry::clear_gold_reason() {
  gold_reason_ = 0u;
  clear_has_gold_reason();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::gold_reason() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.gold_reason)
  return gold_reason_;
}
inline void CMsgDOTACombatLogEntry::set_gold_reason(::google::protobuf::uint32 value) {
  set_has_gold_reason();
  gold_reason_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.gold_reason)
}

// optional float timestamp_raw = 24;
inline bool CMsgDOTACombatLogEntry::has_timestamp_raw() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_timestamp_raw() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_timestamp_raw() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CMsgDOTACombatLogEntry::clear_timestamp_raw() {
  timestamp_raw_ = 0;
  clear_has_timestamp_raw();
}
inline float CMsgDOTACombatLogEntry::timestamp_raw() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.timestamp_raw)
  return timestamp_raw_;
}
inline void CMsgDOTACombatLogEntry::set_timestamp_raw(float value) {
  set_has_timestamp_raw();
  timestamp_raw_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.timestamp_raw)
}

// optional float modifier_duration = 25;
inline bool CMsgDOTACombatLogEntry::has_modifier_duration() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_modifier_duration() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_modifier_duration() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CMsgDOTACombatLogEntry::clear_modifier_duration() {
  modifier_duration_ = 0;
  clear_has_modifier_duration();
}
inline float CMsgDOTACombatLogEntry::modifier_duration() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.modifier_duration)
  return modifier_duration_;
}
inline void CMsgDOTACombatLogEntry::set_modifier_duration(float value) {
  set_has_modifier_duration();
  modifier_duration_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.modifier_duration)
}

// optional uint32 xp_reason = 26;
inline bool CMsgDOTACombatLogEntry::has_xp_reason() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_xp_reason() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_xp_reason() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CMsgDOTACombatLogEntry::clear_xp_reason() {
  xp_reason_ = 0u;
  clear_has_xp_reason();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::xp_reason() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.xp_reason)
  return xp_reason_;
}
inline void CMsgDOTACombatLogEntry::set_xp_reason(::google::protobuf::uint32 value) {
  set_has_xp_reason();
  xp_reason_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.xp_reason)
}

// optional uint32 last_hits = 27;
inline bool CMsgDOTACombatLogEntry::has_last_hits() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_last_hits() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_last_hits() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CMsgDOTACombatLogEntry::clear_last_hits() {
  last_hits_ = 0u;
  clear_has_last_hits();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::last_hits() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.last_hits)
  return last_hits_;
}
inline void CMsgDOTACombatLogEntry::set_last_hits(::google::protobuf::uint32 value) {
  set_has_last_hits();
  last_hits_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.last_hits)
}

// optional uint32 attacker_team = 28;
inline bool CMsgDOTACombatLogEntry::has_attacker_team() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_attacker_team() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_attacker_team() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CMsgDOTACombatLogEntry::clear_attacker_team() {
  attacker_team_ = 0u;
  clear_has_attacker_team();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::attacker_team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.attacker_team)
  return attacker_team_;
}
inline void CMsgDOTACombatLogEntry::set_attacker_team(::google::protobuf::uint32 value) {
  set_has_attacker_team();
  attacker_team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.attacker_team)
}

// optional uint32 target_team = 29;
inline bool CMsgDOTACombatLogEntry::has_target_team() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_target_team() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_target_team() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CMsgDOTACombatLogEntry::clear_target_team() {
  target_team_ = 0u;
  clear_has_target_team();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::target_team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.target_team)
  return target_team_;
}
inline void CMsgDOTACombatLogEntry::set_target_team(::google::protobuf::uint32 value) {
  set_has_target_team();
  target_team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.target_team)
}

// optional uint32 obs_wards_placed = 30;
inline bool CMsgDOTACombatLogEntry::has_obs_wards_placed() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_obs_wards_placed() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_obs_wards_placed() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CMsgDOTACombatLogEntry::clear_obs_wards_placed() {
  obs_wards_placed_ = 0u;
  clear_has_obs_wards_placed();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::obs_wards_placed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.obs_wards_placed)
  return obs_wards_placed_;
}
inline void CMsgDOTACombatLogEntry::set_obs_wards_placed(::google::protobuf::uint32 value) {
  set_has_obs_wards_placed();
  obs_wards_placed_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.obs_wards_placed)
}

// optional uint32 assist_player0 = 31;
inline bool CMsgDOTACombatLogEntry::has_assist_player0() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_assist_player0() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_assist_player0() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CMsgDOTACombatLogEntry::clear_assist_player0() {
  assist_player0_ = 0u;
  clear_has_assist_player0();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::assist_player0() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.assist_player0)
  return assist_player0_;
}
inline void CMsgDOTACombatLogEntry::set_assist_player0(::google::protobuf::uint32 value) {
  set_has_assist_player0();
  assist_player0_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.assist_player0)
}

// optional uint32 assist_player1 = 32;
inline bool CMsgDOTACombatLogEntry::has_assist_player1() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_assist_player1() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_assist_player1() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CMsgDOTACombatLogEntry::clear_assist_player1() {
  assist_player1_ = 0u;
  clear_has_assist_player1();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::assist_player1() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.assist_player1)
  return assist_player1_;
}
inline void CMsgDOTACombatLogEntry::set_assist_player1(::google::protobuf::uint32 value) {
  set_has_assist_player1();
  assist_player1_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.assist_player1)
}

// optional uint32 assist_player2 = 33;
inline bool CMsgDOTACombatLogEntry::has_assist_player2() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_assist_player2() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CMsgDOTACombatLogEntry::clear_has_assist_player2() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CMsgDOTACombatLogEntry::clear_assist_player2() {
  assist_player2_ = 0u;
  clear_has_assist_player2();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::assist_player2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.assist_player2)
  return assist_player2_;
}
inline void CMsgDOTACombatLogEntry::set_assist_player2(::google::protobuf::uint32 value) {
  set_has_assist_player2();
  assist_player2_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.assist_player2)
}

// optional uint32 assist_player3 = 34;
inline bool CMsgDOTACombatLogEntry::has_assist_player3() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_assist_player3() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CMsgDOTACombatLogEntry::clear_has_assist_player3() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CMsgDOTACombatLogEntry::clear_assist_player3() {
  assist_player3_ = 0u;
  clear_has_assist_player3();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::assist_player3() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.assist_player3)
  return assist_player3_;
}
inline void CMsgDOTACombatLogEntry::set_assist_player3(::google::protobuf::uint32 value) {
  set_has_assist_player3();
  assist_player3_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.assist_player3)
}

// optional uint32 stack_count = 35;
inline bool CMsgDOTACombatLogEntry::has_stack_count() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_stack_count() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CMsgDOTACombatLogEntry::clear_has_stack_count() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CMsgDOTACombatLogEntry::clear_stack_count() {
  stack_count_ = 0u;
  clear_has_stack_count();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::stack_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.stack_count)
  return stack_count_;
}
inline void CMsgDOTACombatLogEntry::set_stack_count(::google::protobuf::uint32 value) {
  set_has_stack_count();
  stack_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.stack_count)
}

// optional bool hidden_modifier = 36;
inline bool CMsgDOTACombatLogEntry::has_hidden_modifier() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_hidden_modifier() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CMsgDOTACombatLogEntry::clear_has_hidden_modifier() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CMsgDOTACombatLogEntry::clear_hidden_modifier() {
  hidden_modifier_ = false;
  clear_has_hidden_modifier();
}
inline bool CMsgDOTACombatLogEntry::hidden_modifier() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.hidden_modifier)
  return hidden_modifier_;
}
inline void CMsgDOTACombatLogEntry::set_hidden_modifier(bool value) {
  set_has_hidden_modifier();
  hidden_modifier_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.hidden_modifier)
}

// optional bool is_target_building = 37;
inline bool CMsgDOTACombatLogEntry::has_is_target_building() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_is_target_building() {
  _has_bits_[1] |= 0x00000010u;
}
inline void CMsgDOTACombatLogEntry::clear_has_is_target_building() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void CMsgDOTACombatLogEntry::clear_is_target_building() {
  is_target_building_ = false;
  clear_has_is_target_building();
}
inline bool CMsgDOTACombatLogEntry::is_target_building() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_target_building)
  return is_target_building_;
}
inline void CMsgDOTACombatLogEntry::set_is_target_building(bool value) {
  set_has_is_target_building();
  is_target_building_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_target_building)
}

// optional uint32 neutral_camp_type = 38;
inline bool CMsgDOTACombatLogEntry::has_neutral_camp_type() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_neutral_camp_type() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CMsgDOTACombatLogEntry::clear_has_neutral_camp_type() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CMsgDOTACombatLogEntry::clear_neutral_camp_type() {
  neutral_camp_type_ = 0u;
  clear_has_neutral_camp_type();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::neutral_camp_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.neutral_camp_type)
  return neutral_camp_type_;
}
inline void CMsgDOTACombatLogEntry::set_neutral_camp_type(::google::protobuf::uint32 value) {
  set_has_neutral_camp_type();
  neutral_camp_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.neutral_camp_type)
}

// optional uint32 rune_type = 39;
inline bool CMsgDOTACombatLogEntry::has_rune_type() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_rune_type() {
  _has_bits_[1] |= 0x00000040u;
}
inline void CMsgDOTACombatLogEntry::clear_has_rune_type() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void CMsgDOTACombatLogEntry::clear_rune_type() {
  rune_type_ = 0u;
  clear_has_rune_type();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::rune_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.rune_type)
  return rune_type_;
}
inline void CMsgDOTACombatLogEntry::set_rune_type(::google::protobuf::uint32 value) {
  set_has_rune_type();
  rune_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.rune_type)
}

// repeated uint32 assist_players = 40;
inline int CMsgDOTACombatLogEntry::assist_players_size() const {
  return assist_players_.size();
}
inline void CMsgDOTACombatLogEntry::clear_assist_players() {
  assist_players_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::assist_players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.assist_players)
  return assist_players_.Get(index);
}
inline void CMsgDOTACombatLogEntry::set_assist_players(int index, ::google::protobuf::uint32 value) {
  assist_players_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.assist_players)
}
inline void CMsgDOTACombatLogEntry::add_assist_players(::google::protobuf::uint32 value) {
  assist_players_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTACombatLogEntry.assist_players)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTACombatLogEntry::assist_players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTACombatLogEntry.assist_players)
  return assist_players_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTACombatLogEntry::mutable_assist_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTACombatLogEntry.assist_players)
  return &assist_players_;
}

// optional bool is_heal_save = 41;
inline bool CMsgDOTACombatLogEntry::has_is_heal_save() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_is_heal_save() {
  _has_bits_[1] |= 0x00000100u;
}
inline void CMsgDOTACombatLogEntry::clear_has_is_heal_save() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void CMsgDOTACombatLogEntry::clear_is_heal_save() {
  is_heal_save_ = false;
  clear_has_is_heal_save();
}
inline bool CMsgDOTACombatLogEntry::is_heal_save() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_heal_save)
  return is_heal_save_;
}
inline void CMsgDOTACombatLogEntry::set_is_heal_save(bool value) {
  set_has_is_heal_save();
  is_heal_save_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_heal_save)
}

// optional bool is_ultimate_ability = 42;
inline bool CMsgDOTACombatLogEntry::has_is_ultimate_ability() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_is_ultimate_ability() {
  _has_bits_[1] |= 0x00000200u;
}
inline void CMsgDOTACombatLogEntry::clear_has_is_ultimate_ability() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void CMsgDOTACombatLogEntry::clear_is_ultimate_ability() {
  is_ultimate_ability_ = false;
  clear_has_is_ultimate_ability();
}
inline bool CMsgDOTACombatLogEntry::is_ultimate_ability() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.is_ultimate_ability)
  return is_ultimate_ability_;
}
inline void CMsgDOTACombatLogEntry::set_is_ultimate_ability(bool value) {
  set_has_is_ultimate_ability();
  is_ultimate_ability_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.is_ultimate_ability)
}

// optional uint32 attacker_hero_level = 43;
inline bool CMsgDOTACombatLogEntry::has_attacker_hero_level() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_attacker_hero_level() {
  _has_bits_[1] |= 0x00000400u;
}
inline void CMsgDOTACombatLogEntry::clear_has_attacker_hero_level() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void CMsgDOTACombatLogEntry::clear_attacker_hero_level() {
  attacker_hero_level_ = 0u;
  clear_has_attacker_hero_level();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::attacker_hero_level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.attacker_hero_level)
  return attacker_hero_level_;
}
inline void CMsgDOTACombatLogEntry::set_attacker_hero_level(::google::protobuf::uint32 value) {
  set_has_attacker_hero_level();
  attacker_hero_level_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.attacker_hero_level)
}

// optional uint32 target_hero_level = 44;
inline bool CMsgDOTACombatLogEntry::has_target_hero_level() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_target_hero_level() {
  _has_bits_[1] |= 0x00000800u;
}
inline void CMsgDOTACombatLogEntry::clear_has_target_hero_level() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void CMsgDOTACombatLogEntry::clear_target_hero_level() {
  target_hero_level_ = 0u;
  clear_has_target_hero_level();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::target_hero_level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.target_hero_level)
  return target_hero_level_;
}
inline void CMsgDOTACombatLogEntry::set_target_hero_level(::google::protobuf::uint32 value) {
  set_has_target_hero_level();
  target_hero_level_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.target_hero_level)
}

// optional uint32 xpm = 45;
inline bool CMsgDOTACombatLogEntry::has_xpm() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_xpm() {
  _has_bits_[1] |= 0x00001000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_xpm() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void CMsgDOTACombatLogEntry::clear_xpm() {
  xpm_ = 0u;
  clear_has_xpm();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::xpm() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.xpm)
  return xpm_;
}
inline void CMsgDOTACombatLogEntry::set_xpm(::google::protobuf::uint32 value) {
  set_has_xpm();
  xpm_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.xpm)
}

// optional uint32 gpm = 46;
inline bool CMsgDOTACombatLogEntry::has_gpm() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_gpm() {
  _has_bits_[1] |= 0x00002000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_gpm() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void CMsgDOTACombatLogEntry::clear_gpm() {
  gpm_ = 0u;
  clear_has_gpm();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::gpm() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.gpm)
  return gpm_;
}
inline void CMsgDOTACombatLogEntry::set_gpm(::google::protobuf::uint32 value) {
  set_has_gpm();
  gpm_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.gpm)
}

// optional uint32 event_location = 47;
inline bool CMsgDOTACombatLogEntry::has_event_location() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_event_location() {
  _has_bits_[1] |= 0x00004000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_event_location() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void CMsgDOTACombatLogEntry::clear_event_location() {
  event_location_ = 0u;
  clear_has_event_location();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::event_location() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.event_location)
  return event_location_;
}
inline void CMsgDOTACombatLogEntry::set_event_location(::google::protobuf::uint32 value) {
  set_has_event_location();
  event_location_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.event_location)
}

// optional bool target_is_self = 48;
inline bool CMsgDOTACombatLogEntry::has_target_is_self() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_target_is_self() {
  _has_bits_[1] |= 0x00008000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_target_is_self() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void CMsgDOTACombatLogEntry::clear_target_is_self() {
  target_is_self_ = false;
  clear_has_target_is_self();
}
inline bool CMsgDOTACombatLogEntry::target_is_self() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.target_is_self)
  return target_is_self_;
}
inline void CMsgDOTACombatLogEntry::set_target_is_self(bool value) {
  set_has_target_is_self();
  target_is_self_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.target_is_self)
}

// optional uint32 damage_type = 49;
inline bool CMsgDOTACombatLogEntry::has_damage_type() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_damage_type() {
  _has_bits_[1] |= 0x00010000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_damage_type() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void CMsgDOTACombatLogEntry::clear_damage_type() {
  damage_type_ = 0u;
  clear_has_damage_type();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::damage_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.damage_type)
  return damage_type_;
}
inline void CMsgDOTACombatLogEntry::set_damage_type(::google::protobuf::uint32 value) {
  set_has_damage_type();
  damage_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.damage_type)
}

// optional bool invisibility_modifier = 50;
inline bool CMsgDOTACombatLogEntry::has_invisibility_modifier() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_invisibility_modifier() {
  _has_bits_[1] |= 0x00020000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_invisibility_modifier() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void CMsgDOTACombatLogEntry::clear_invisibility_modifier() {
  invisibility_modifier_ = false;
  clear_has_invisibility_modifier();
}
inline bool CMsgDOTACombatLogEntry::invisibility_modifier() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.invisibility_modifier)
  return invisibility_modifier_;
}
inline void CMsgDOTACombatLogEntry::set_invisibility_modifier(bool value) {
  set_has_invisibility_modifier();
  invisibility_modifier_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.invisibility_modifier)
}

// optional uint32 damage_category = 51;
inline bool CMsgDOTACombatLogEntry::has_damage_category() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_damage_category() {
  _has_bits_[1] |= 0x00040000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_damage_category() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void CMsgDOTACombatLogEntry::clear_damage_category() {
  damage_category_ = 0u;
  clear_has_damage_category();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::damage_category() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.damage_category)
  return damage_category_;
}
inline void CMsgDOTACombatLogEntry::set_damage_category(::google::protobuf::uint32 value) {
  set_has_damage_category();
  damage_category_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.damage_category)
}

// optional uint32 networth = 52;
inline bool CMsgDOTACombatLogEntry::has_networth() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_networth() {
  _has_bits_[1] |= 0x00080000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_networth() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void CMsgDOTACombatLogEntry::clear_networth() {
  networth_ = 0u;
  clear_has_networth();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::networth() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.networth)
  return networth_;
}
inline void CMsgDOTACombatLogEntry::set_networth(::google::protobuf::uint32 value) {
  set_has_networth();
  networth_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.networth)
}

// optional uint32 building_type = 53;
inline bool CMsgDOTACombatLogEntry::has_building_type() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_building_type() {
  _has_bits_[1] |= 0x00100000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_building_type() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void CMsgDOTACombatLogEntry::clear_building_type() {
  building_type_ = 0u;
  clear_has_building_type();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::building_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.building_type)
  return building_type_;
}
inline void CMsgDOTACombatLogEntry::set_building_type(::google::protobuf::uint32 value) {
  set_has_building_type();
  building_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.building_type)
}

// optional float modifier_elapsed_duration = 54;
inline bool CMsgDOTACombatLogEntry::has_modifier_elapsed_duration() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_modifier_elapsed_duration() {
  _has_bits_[1] |= 0x00200000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_modifier_elapsed_duration() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void CMsgDOTACombatLogEntry::clear_modifier_elapsed_duration() {
  modifier_elapsed_duration_ = 0;
  clear_has_modifier_elapsed_duration();
}
inline float CMsgDOTACombatLogEntry::modifier_elapsed_duration() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.modifier_elapsed_duration)
  return modifier_elapsed_duration_;
}
inline void CMsgDOTACombatLogEntry::set_modifier_elapsed_duration(float value) {
  set_has_modifier_elapsed_duration();
  modifier_elapsed_duration_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.modifier_elapsed_duration)
}

// optional bool silence_modifier = 55;
inline bool CMsgDOTACombatLogEntry::has_silence_modifier() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_silence_modifier() {
  _has_bits_[1] |= 0x00400000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_silence_modifier() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void CMsgDOTACombatLogEntry::clear_silence_modifier() {
  silence_modifier_ = false;
  clear_has_silence_modifier();
}
inline bool CMsgDOTACombatLogEntry::silence_modifier() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.silence_modifier)
  return silence_modifier_;
}
inline void CMsgDOTACombatLogEntry::set_silence_modifier(bool value) {
  set_has_silence_modifier();
  silence_modifier_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.silence_modifier)
}

// optional bool heal_from_lifesteal = 56;
inline bool CMsgDOTACombatLogEntry::has_heal_from_lifesteal() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_heal_from_lifesteal() {
  _has_bits_[1] |= 0x00800000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_heal_from_lifesteal() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void CMsgDOTACombatLogEntry::clear_heal_from_lifesteal() {
  heal_from_lifesteal_ = false;
  clear_has_heal_from_lifesteal();
}
inline bool CMsgDOTACombatLogEntry::heal_from_lifesteal() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.heal_from_lifesteal)
  return heal_from_lifesteal_;
}
inline void CMsgDOTACombatLogEntry::set_heal_from_lifesteal(bool value) {
  set_has_heal_from_lifesteal();
  heal_from_lifesteal_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.heal_from_lifesteal)
}

// optional bool modifier_purged = 57;
inline bool CMsgDOTACombatLogEntry::has_modifier_purged() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_modifier_purged() {
  _has_bits_[1] |= 0x01000000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_modifier_purged() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void CMsgDOTACombatLogEntry::clear_modifier_purged() {
  modifier_purged_ = false;
  clear_has_modifier_purged();
}
inline bool CMsgDOTACombatLogEntry::modifier_purged() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.modifier_purged)
  return modifier_purged_;
}
inline void CMsgDOTACombatLogEntry::set_modifier_purged(bool value) {
  set_has_modifier_purged();
  modifier_purged_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.modifier_purged)
}

// optional bool spell_evaded = 58;
inline bool CMsgDOTACombatLogEntry::has_spell_evaded() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_spell_evaded() {
  _has_bits_[1] |= 0x02000000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_spell_evaded() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void CMsgDOTACombatLogEntry::clear_spell_evaded() {
  spell_evaded_ = false;
  clear_has_spell_evaded();
}
inline bool CMsgDOTACombatLogEntry::spell_evaded() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.spell_evaded)
  return spell_evaded_;
}
inline void CMsgDOTACombatLogEntry::set_spell_evaded(bool value) {
  set_has_spell_evaded();
  spell_evaded_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.spell_evaded)
}

// optional bool motion_controller_modifier = 59;
inline bool CMsgDOTACombatLogEntry::has_motion_controller_modifier() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_motion_controller_modifier() {
  _has_bits_[1] |= 0x04000000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_motion_controller_modifier() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void CMsgDOTACombatLogEntry::clear_motion_controller_modifier() {
  motion_controller_modifier_ = false;
  clear_has_motion_controller_modifier();
}
inline bool CMsgDOTACombatLogEntry::motion_controller_modifier() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.motion_controller_modifier)
  return motion_controller_modifier_;
}
inline void CMsgDOTACombatLogEntry::set_motion_controller_modifier(bool value) {
  set_has_motion_controller_modifier();
  motion_controller_modifier_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.motion_controller_modifier)
}

// optional bool long_range_kill = 60;
inline bool CMsgDOTACombatLogEntry::has_long_range_kill() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_long_range_kill() {
  _has_bits_[1] |= 0x08000000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_long_range_kill() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void CMsgDOTACombatLogEntry::clear_long_range_kill() {
  long_range_kill_ = false;
  clear_has_long_range_kill();
}
inline bool CMsgDOTACombatLogEntry::long_range_kill() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.long_range_kill)
  return long_range_kill_;
}
inline void CMsgDOTACombatLogEntry::set_long_range_kill(bool value) {
  set_has_long_range_kill();
  long_range_kill_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.long_range_kill)
}

// optional uint32 modifier_purge_ability = 61;
inline bool CMsgDOTACombatLogEntry::has_modifier_purge_ability() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_modifier_purge_ability() {
  _has_bits_[1] |= 0x10000000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_modifier_purge_ability() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void CMsgDOTACombatLogEntry::clear_modifier_purge_ability() {
  modifier_purge_ability_ = 0u;
  clear_has_modifier_purge_ability();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::modifier_purge_ability() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.modifier_purge_ability)
  return modifier_purge_ability_;
}
inline void CMsgDOTACombatLogEntry::set_modifier_purge_ability(::google::protobuf::uint32 value) {
  set_has_modifier_purge_ability();
  modifier_purge_ability_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.modifier_purge_ability)
}

// optional uint32 modifier_purge_npc = 62;
inline bool CMsgDOTACombatLogEntry::has_modifier_purge_npc() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::set_has_modifier_purge_npc() {
  _has_bits_[1] |= 0x20000000u;
}
inline void CMsgDOTACombatLogEntry::clear_has_modifier_purge_npc() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void CMsgDOTACombatLogEntry::clear_modifier_purge_npc() {
  modifier_purge_npc_ = 0u;
  clear_has_modifier_purge_npc();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::modifier_purge_npc() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACombatLogEntry.modifier_purge_npc)
  return modifier_purge_npc_;
}
inline void CMsgDOTACombatLogEntry::set_modifier_purge_npc(::google::protobuf::uint32 value) {
  set_has_modifier_purge_npc();
  modifier_purge_npc_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACombatLogEntry.modifier_purge_npc)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Trophy

// optional uint32 trophy_id = 1;
inline bool CMsgDOTAProfileCard_Slot_Trophy::has_trophy_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Trophy::set_has_trophy_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAProfileCard_Slot_Trophy::clear_has_trophy_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAProfileCard_Slot_Trophy::clear_trophy_id() {
  trophy_id_ = 0u;
  clear_has_trophy_id();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Trophy::trophy_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Trophy.trophy_id)
  return trophy_id_;
}
inline void CMsgDOTAProfileCard_Slot_Trophy::set_trophy_id(::google::protobuf::uint32 value) {
  set_has_trophy_id();
  trophy_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Trophy.trophy_id)
}

// optional uint32 trophy_score = 2;
inline bool CMsgDOTAProfileCard_Slot_Trophy::has_trophy_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Trophy::set_has_trophy_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAProfileCard_Slot_Trophy::clear_has_trophy_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAProfileCard_Slot_Trophy::clear_trophy_score() {
  trophy_score_ = 0u;
  clear_has_trophy_score();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Trophy::trophy_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Trophy.trophy_score)
  return trophy_score_;
}
inline void CMsgDOTAProfileCard_Slot_Trophy::set_trophy_score(::google::protobuf::uint32 value) {
  set_has_trophy_score();
  trophy_score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Trophy.trophy_score)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Stat

// optional .CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_SoloRank];
inline bool CMsgDOTAProfileCard_Slot_Stat::has_stat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Stat::set_has_stat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAProfileCard_Slot_Stat::clear_has_stat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAProfileCard_Slot_Stat::clear_stat_id() {
  stat_id_ = 1;
  clear_has_stat_id();
}
inline ::CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard_Slot_Stat::stat_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Stat.stat_id)
  return static_cast< ::CMsgDOTAProfileCard_EStatID >(stat_id_);
}
inline void CMsgDOTAProfileCard_Slot_Stat::set_stat_id(::CMsgDOTAProfileCard_EStatID value) {
  assert(::CMsgDOTAProfileCard_EStatID_IsValid(value));
  set_has_stat_id();
  stat_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Stat.stat_id)
}

// optional uint32 stat_score = 2;
inline bool CMsgDOTAProfileCard_Slot_Stat::has_stat_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Stat::set_has_stat_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAProfileCard_Slot_Stat::clear_has_stat_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAProfileCard_Slot_Stat::clear_stat_score() {
  stat_score_ = 0u;
  clear_has_stat_score();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Stat::stat_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Stat.stat_score)
  return stat_score_;
}
inline void CMsgDOTAProfileCard_Slot_Stat::set_stat_score(::google::protobuf::uint32 value) {
  set_has_stat_score();
  stat_score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Stat.stat_score)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Item

// optional bytes serialized_item = 1;
inline bool CMsgDOTAProfileCard_Slot_Item::has_serialized_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Item::set_has_serialized_item() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAProfileCard_Slot_Item::clear_has_serialized_item() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAProfileCard_Slot_Item::clear_serialized_item() {
  if (serialized_item_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_item_->clear();
  }
  clear_has_serialized_item();
}
inline const ::std::string& CMsgDOTAProfileCard_Slot_Item::serialized_item() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Item.serialized_item)
  return *serialized_item_;
}
inline void CMsgDOTAProfileCard_Slot_Item::set_serialized_item(const ::std::string& value) {
  set_has_serialized_item();
  if (serialized_item_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_item_ = new ::std::string;
  }
  serialized_item_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Item.serialized_item)
}
inline void CMsgDOTAProfileCard_Slot_Item::set_serialized_item(const char* value) {
  set_has_serialized_item();
  if (serialized_item_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_item_ = new ::std::string;
  }
  serialized_item_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAProfileCard.Slot.Item.serialized_item)
}
inline void CMsgDOTAProfileCard_Slot_Item::set_serialized_item(const void* value, size_t size) {
  set_has_serialized_item();
  if (serialized_item_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_item_ = new ::std::string;
  }
  serialized_item_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAProfileCard.Slot.Item.serialized_item)
}
inline ::std::string* CMsgDOTAProfileCard_Slot_Item::mutable_serialized_item() {
  set_has_serialized_item();
  if (serialized_item_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_item_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.Item.serialized_item)
  return serialized_item_;
}
inline ::std::string* CMsgDOTAProfileCard_Slot_Item::release_serialized_item() {
  clear_has_serialized_item();
  if (serialized_item_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serialized_item_;
    serialized_item_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAProfileCard_Slot_Item::set_allocated_serialized_item(::std::string* serialized_item) {
  if (serialized_item_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serialized_item_;
  }
  if (serialized_item) {
    set_has_serialized_item();
    serialized_item_ = serialized_item;
  } else {
    clear_has_serialized_item();
    serialized_item_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.Item.serialized_item)
}

// optional uint64 item_id = 2;
inline bool CMsgDOTAProfileCard_Slot_Item::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Item::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAProfileCard_Slot_Item::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAProfileCard_Slot_Item::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
inline ::google::protobuf::uint64 CMsgDOTAProfileCard_Slot_Item::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Item.item_id)
  return item_id_;
}
inline void CMsgDOTAProfileCard_Slot_Item::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Item.item_id)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Hero

// optional uint32 hero_id = 1;
inline bool CMsgDOTAProfileCard_Slot_Hero::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Hero::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAProfileCard_Slot_Hero::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAProfileCard_Slot_Hero::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Hero::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Hero.hero_id)
  return hero_id_;
}
inline void CMsgDOTAProfileCard_Slot_Hero::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Hero.hero_id)
}

// optional uint32 hero_wins = 2;
inline bool CMsgDOTAProfileCard_Slot_Hero::has_hero_wins() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Hero::set_has_hero_wins() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAProfileCard_Slot_Hero::clear_has_hero_wins() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAProfileCard_Slot_Hero::clear_hero_wins() {
  hero_wins_ = 0u;
  clear_has_hero_wins();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Hero::hero_wins() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Hero.hero_wins)
  return hero_wins_;
}
inline void CMsgDOTAProfileCard_Slot_Hero::set_hero_wins(::google::protobuf::uint32 value) {
  set_has_hero_wins();
  hero_wins_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Hero.hero_wins)
}

// optional uint32 hero_losses = 3;
inline bool CMsgDOTAProfileCard_Slot_Hero::has_hero_losses() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Hero::set_has_hero_losses() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAProfileCard_Slot_Hero::clear_has_hero_losses() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAProfileCard_Slot_Hero::clear_hero_losses() {
  hero_losses_ = 0u;
  clear_has_hero_losses();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Hero::hero_losses() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Hero.hero_losses)
  return hero_losses_;
}
inline void CMsgDOTAProfileCard_Slot_Hero::set_hero_losses(::google::protobuf::uint32 value) {
  set_has_hero_losses();
  hero_losses_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Hero.hero_losses)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Emoticon

// optional uint32 emoticon_id = 1;
inline bool CMsgDOTAProfileCard_Slot_Emoticon::has_emoticon_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileCard_Slot_Emoticon::set_has_emoticon_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAProfileCard_Slot_Emoticon::clear_has_emoticon_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAProfileCard_Slot_Emoticon::clear_emoticon_id() {
  emoticon_id_ = 0u;
  clear_has_emoticon_id();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Emoticon::emoticon_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Emoticon.emoticon_id)
  return emoticon_id_;
}
inline void CMsgDOTAProfileCard_Slot_Emoticon::set_emoticon_id(::google::protobuf::uint32 value) {
  set_has_emoticon_id();
  emoticon_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Emoticon.emoticon_id)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot

// optional uint32 slot_id = 1;
inline bool CMsgDOTAProfileCard_Slot::has_slot_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileCard_Slot::set_has_slot_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAProfileCard_Slot::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAProfileCard_Slot::clear_slot_id() {
  slot_id_ = 0u;
  clear_has_slot_id();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard_Slot::slot_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.slot_id)
  return slot_id_;
}
inline void CMsgDOTAProfileCard_Slot::set_slot_id(::google::protobuf::uint32 value) {
  set_has_slot_id();
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.slot_id)
}

// optional .CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
inline bool CMsgDOTAProfileCard_Slot::has_trophy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProfileCard_Slot::set_has_trophy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAProfileCard_Slot::clear_has_trophy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAProfileCard_Slot::clear_trophy() {
  if (trophy_ != NULL) trophy_->::CMsgDOTAProfileCard_Slot_Trophy::Clear();
  clear_has_trophy();
}
inline const ::CMsgDOTAProfileCard_Slot_Trophy& CMsgDOTAProfileCard_Slot::trophy() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.trophy)
  return trophy_ != NULL ? *trophy_ : *default_instance_->trophy_;
}
inline ::CMsgDOTAProfileCard_Slot_Trophy* CMsgDOTAProfileCard_Slot::mutable_trophy() {
  set_has_trophy();
  if (trophy_ == NULL) trophy_ = new ::CMsgDOTAProfileCard_Slot_Trophy;
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.trophy)
  return trophy_;
}
inline ::CMsgDOTAProfileCard_Slot_Trophy* CMsgDOTAProfileCard_Slot::release_trophy() {
  clear_has_trophy();
  ::CMsgDOTAProfileCard_Slot_Trophy* temp = trophy_;
  trophy_ = NULL;
  return temp;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_trophy(::CMsgDOTAProfileCard_Slot_Trophy* trophy) {
  delete trophy_;
  trophy_ = trophy;
  if (trophy) {
    set_has_trophy();
  } else {
    clear_has_trophy();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.trophy)
}

// optional .CMsgDOTAProfileCard.Slot.Stat stat = 3;
inline bool CMsgDOTAProfileCard_Slot::has_stat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAProfileCard_Slot::set_has_stat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAProfileCard_Slot::clear_has_stat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAProfileCard_Slot::clear_stat() {
  if (stat_ != NULL) stat_->::CMsgDOTAProfileCard_Slot_Stat::Clear();
  clear_has_stat();
}
inline const ::CMsgDOTAProfileCard_Slot_Stat& CMsgDOTAProfileCard_Slot::stat() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.stat)
  return stat_ != NULL ? *stat_ : *default_instance_->stat_;
}
inline ::CMsgDOTAProfileCard_Slot_Stat* CMsgDOTAProfileCard_Slot::mutable_stat() {
  set_has_stat();
  if (stat_ == NULL) stat_ = new ::CMsgDOTAProfileCard_Slot_Stat;
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.stat)
  return stat_;
}
inline ::CMsgDOTAProfileCard_Slot_Stat* CMsgDOTAProfileCard_Slot::release_stat() {
  clear_has_stat();
  ::CMsgDOTAProfileCard_Slot_Stat* temp = stat_;
  stat_ = NULL;
  return temp;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_stat(::CMsgDOTAProfileCard_Slot_Stat* stat) {
  delete stat_;
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.stat)
}

// optional .CMsgDOTAProfileCard.Slot.Item item = 4;
inline bool CMsgDOTAProfileCard_Slot::has_item() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAProfileCard_Slot::set_has_item() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAProfileCard_Slot::clear_has_item() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAProfileCard_Slot::clear_item() {
  if (item_ != NULL) item_->::CMsgDOTAProfileCard_Slot_Item::Clear();
  clear_has_item();
}
inline const ::CMsgDOTAProfileCard_Slot_Item& CMsgDOTAProfileCard_Slot::item() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.item)
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::CMsgDOTAProfileCard_Slot_Item* CMsgDOTAProfileCard_Slot::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::CMsgDOTAProfileCard_Slot_Item;
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.item)
  return item_;
}
inline ::CMsgDOTAProfileCard_Slot_Item* CMsgDOTAProfileCard_Slot::release_item() {
  clear_has_item();
  ::CMsgDOTAProfileCard_Slot_Item* temp = item_;
  item_ = NULL;
  return temp;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_item(::CMsgDOTAProfileCard_Slot_Item* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.item)
}

// optional .CMsgDOTAProfileCard.Slot.Hero hero = 5;
inline bool CMsgDOTAProfileCard_Slot::has_hero() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAProfileCard_Slot::set_has_hero() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAProfileCard_Slot::clear_has_hero() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAProfileCard_Slot::clear_hero() {
  if (hero_ != NULL) hero_->::CMsgDOTAProfileCard_Slot_Hero::Clear();
  clear_has_hero();
}
inline const ::CMsgDOTAProfileCard_Slot_Hero& CMsgDOTAProfileCard_Slot::hero() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.hero)
  return hero_ != NULL ? *hero_ : *default_instance_->hero_;
}
inline ::CMsgDOTAProfileCard_Slot_Hero* CMsgDOTAProfileCard_Slot::mutable_hero() {
  set_has_hero();
  if (hero_ == NULL) hero_ = new ::CMsgDOTAProfileCard_Slot_Hero;
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.hero)
  return hero_;
}
inline ::CMsgDOTAProfileCard_Slot_Hero* CMsgDOTAProfileCard_Slot::release_hero() {
  clear_has_hero();
  ::CMsgDOTAProfileCard_Slot_Hero* temp = hero_;
  hero_ = NULL;
  return temp;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_hero(::CMsgDOTAProfileCard_Slot_Hero* hero) {
  delete hero_;
  hero_ = hero;
  if (hero) {
    set_has_hero();
  } else {
    clear_has_hero();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.hero)
}

// optional .CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
inline bool CMsgDOTAProfileCard_Slot::has_emoticon() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAProfileCard_Slot::set_has_emoticon() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAProfileCard_Slot::clear_has_emoticon() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAProfileCard_Slot::clear_emoticon() {
  if (emoticon_ != NULL) emoticon_->::CMsgDOTAProfileCard_Slot_Emoticon::Clear();
  clear_has_emoticon();
}
inline const ::CMsgDOTAProfileCard_Slot_Emoticon& CMsgDOTAProfileCard_Slot::emoticon() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.emoticon)
  return emoticon_ != NULL ? *emoticon_ : *default_instance_->emoticon_;
}
inline ::CMsgDOTAProfileCard_Slot_Emoticon* CMsgDOTAProfileCard_Slot::mutable_emoticon() {
  set_has_emoticon();
  if (emoticon_ == NULL) emoticon_ = new ::CMsgDOTAProfileCard_Slot_Emoticon;
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.emoticon)
  return emoticon_;
}
inline ::CMsgDOTAProfileCard_Slot_Emoticon* CMsgDOTAProfileCard_Slot::release_emoticon() {
  clear_has_emoticon();
  ::CMsgDOTAProfileCard_Slot_Emoticon* temp = emoticon_;
  emoticon_ = NULL;
  return temp;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_emoticon(::CMsgDOTAProfileCard_Slot_Emoticon* emoticon) {
  delete emoticon_;
  emoticon_ = emoticon;
  if (emoticon) {
    set_has_emoticon();
  } else {
    clear_has_emoticon();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.emoticon)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard

// optional uint32 account_id = 1;
inline bool CMsgDOTAProfileCard::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileCard::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAProfileCard::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAProfileCard::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.account_id)
  return account_id_;
}
inline void CMsgDOTAProfileCard::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.account_id)
}

// optional uint32 background_def_index = 2;
inline bool CMsgDOTAProfileCard::has_background_def_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProfileCard::set_has_background_def_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAProfileCard::clear_has_background_def_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAProfileCard::clear_background_def_index() {
  background_def_index_ = 0u;
  clear_has_background_def_index();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard::background_def_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.background_def_index)
  return background_def_index_;
}
inline void CMsgDOTAProfileCard::set_background_def_index(::google::protobuf::uint32 value) {
  set_has_background_def_index();
  background_def_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.background_def_index)
}

// repeated .CMsgDOTAProfileCard.Slot slots = 3;
inline int CMsgDOTAProfileCard::slots_size() const {
  return slots_.size();
}
inline void CMsgDOTAProfileCard::clear_slots() {
  slots_.Clear();
}
inline const ::CMsgDOTAProfileCard_Slot& CMsgDOTAProfileCard::slots(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.slots)
  return slots_.Get(index);
}
inline ::CMsgDOTAProfileCard_Slot* CMsgDOTAProfileCard::mutable_slots(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.slots)
  return slots_.Mutable(index);
}
inline ::CMsgDOTAProfileCard_Slot* CMsgDOTAProfileCard::add_slots() {
  // @@protoc_insertion_point(field_add:CMsgDOTAProfileCard.slots)
  return slots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProfileCard_Slot >&
CMsgDOTAProfileCard::slots() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAProfileCard.slots)
  return slots_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProfileCard_Slot >*
CMsgDOTAProfileCard::mutable_slots() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAProfileCard.slots)
  return &slots_;
}

// optional uint32 badge_points = 4;
inline bool CMsgDOTAProfileCard::has_badge_points() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAProfileCard::set_has_badge_points() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAProfileCard::clear_has_badge_points() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAProfileCard::clear_badge_points() {
  badge_points_ = 0u;
  clear_has_badge_points();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard::badge_points() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.badge_points)
  return badge_points_;
}
inline void CMsgDOTAProfileCard::set_badge_points(::google::protobuf::uint32 value) {
  set_has_badge_points();
  badge_points_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.badge_points)
}

// optional uint32 event_points = 5;
inline bool CMsgDOTAProfileCard::has_event_points() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAProfileCard::set_has_event_points() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAProfileCard::clear_has_event_points() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAProfileCard::clear_event_points() {
  event_points_ = 0u;
  clear_has_event_points();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard::event_points() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.event_points)
  return event_points_;
}
inline void CMsgDOTAProfileCard::set_event_points(::google::protobuf::uint32 value) {
  set_has_event_points();
  event_points_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.event_points)
}

// optional uint32 event_id = 6;
inline bool CMsgDOTAProfileCard::has_event_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAProfileCard::set_has_event_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAProfileCard::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAProfileCard::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileCard::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.event_id)
  return event_id_;
}
inline void CMsgDOTAProfileCard::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.event_id)
}

// optional .CMsgBattleCupVictory recent_battle_cup_victory = 7;
inline bool CMsgDOTAProfileCard::has_recent_battle_cup_victory() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAProfileCard::set_has_recent_battle_cup_victory() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTAProfileCard::clear_has_recent_battle_cup_victory() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTAProfileCard::clear_recent_battle_cup_victory() {
  if (recent_battle_cup_victory_ != NULL) recent_battle_cup_victory_->::CMsgBattleCupVictory::Clear();
  clear_has_recent_battle_cup_victory();
}
inline const ::CMsgBattleCupVictory& CMsgDOTAProfileCard::recent_battle_cup_victory() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.recent_battle_cup_victory)
  return recent_battle_cup_victory_ != NULL ? *recent_battle_cup_victory_ : *default_instance_->recent_battle_cup_victory_;
}
inline ::CMsgBattleCupVictory* CMsgDOTAProfileCard::mutable_recent_battle_cup_victory() {
  set_has_recent_battle_cup_victory();
  if (recent_battle_cup_victory_ == NULL) recent_battle_cup_victory_ = new ::CMsgBattleCupVictory;
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.recent_battle_cup_victory)
  return recent_battle_cup_victory_;
}
inline ::CMsgBattleCupVictory* CMsgDOTAProfileCard::release_recent_battle_cup_victory() {
  clear_has_recent_battle_cup_victory();
  ::CMsgBattleCupVictory* temp = recent_battle_cup_victory_;
  recent_battle_cup_victory_ = NULL;
  return temp;
}
inline void CMsgDOTAProfileCard::set_allocated_recent_battle_cup_victory(::CMsgBattleCupVictory* recent_battle_cup_victory) {
  delete recent_battle_cup_victory_;
  recent_battle_cup_victory_ = recent_battle_cup_victory;
  if (recent_battle_cup_victory) {
    set_has_recent_battle_cup_victory();
  } else {
    clear_has_recent_battle_cup_victory();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.recent_battle_cup_victory)
}

// -------------------------------------------------------------------

// CSODOTAPlayerChallenge

// optional uint32 account_id = 1;
inline bool CSODOTAPlayerChallenge::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAPlayerChallenge::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAPlayerChallenge::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAPlayerChallenge::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.account_id)
  return account_id_;
}
inline void CSODOTAPlayerChallenge::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.account_id)
}

// optional uint32 event_id = 2;
inline bool CSODOTAPlayerChallenge::has_event_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAPlayerChallenge::set_has_event_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAPlayerChallenge::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAPlayerChallenge::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::event_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.event_id)
  return event_id_;
}
inline void CSODOTAPlayerChallenge::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.event_id)
}

// optional uint32 slot_id = 3;
inline bool CSODOTAPlayerChallenge::has_slot_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTAPlayerChallenge::set_has_slot_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSODOTAPlayerChallenge::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSODOTAPlayerChallenge::clear_slot_id() {
  slot_id_ = 0u;
  clear_has_slot_id();
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::slot_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.slot_id)
  return slot_id_;
}
inline void CSODOTAPlayerChallenge::set_slot_id(::google::protobuf::uint32 value) {
  set_has_slot_id();
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.slot_id)
}

// optional uint32 challenge_type = 4;
inline bool CSODOTAPlayerChallenge::has_challenge_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSODOTAPlayerChallenge::set_has_challenge_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSODOTAPlayerChallenge::clear_has_challenge_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSODOTAPlayerChallenge::clear_challenge_type() {
  challenge_type_ = 0u;
  clear_has_challenge_type();
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::challenge_type() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.challenge_type)
  return challenge_type_;
}
inline void CSODOTAPlayerChallenge::set_challenge_type(::google::protobuf::uint32 value) {
  set_has_challenge_type();
  challenge_type_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.challenge_type)
}

// optional uint32 int_param_0 = 5;
inline bool CSODOTAPlayerChallenge::has_int_param_0() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTAPlayerChallenge::set_has_int_param_0() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSODOTAPlayerChallenge::clear_has_int_param_0() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSODOTAPlayerChallenge::clear_int_param_0() {
  int_param_0_ = 0u;
  clear_has_int_param_0();
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::int_param_0() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.int_param_0)
  return int_param_0_;
}
inline void CSODOTAPlayerChallenge::set_int_param_0(::google::protobuf::uint32 value) {
  set_has_int_param_0();
  int_param_0_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.int_param_0)
}

// optional uint32 int_param_1 = 6;
inline bool CSODOTAPlayerChallenge::has_int_param_1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTAPlayerChallenge::set_has_int_param_1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSODOTAPlayerChallenge::clear_has_int_param_1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSODOTAPlayerChallenge::clear_int_param_1() {
  int_param_1_ = 0u;
  clear_has_int_param_1();
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::int_param_1() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.int_param_1)
  return int_param_1_;
}
inline void CSODOTAPlayerChallenge::set_int_param_1(::google::protobuf::uint32 value) {
  set_has_int_param_1();
  int_param_1_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.int_param_1)
}

// optional uint32 created_time = 7;
inline bool CSODOTAPlayerChallenge::has_created_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSODOTAPlayerChallenge::set_has_created_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSODOTAPlayerChallenge::clear_has_created_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSODOTAPlayerChallenge::clear_created_time() {
  created_time_ = 0u;
  clear_has_created_time();
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::created_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.created_time)
  return created_time_;
}
inline void CSODOTAPlayerChallenge::set_created_time(::google::protobuf::uint32 value) {
  set_has_created_time();
  created_time_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.created_time)
}

// optional uint32 completed = 8;
inline bool CSODOTAPlayerChallenge::has_completed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSODOTAPlayerChallenge::set_has_completed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSODOTAPlayerChallenge::clear_has_completed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSODOTAPlayerChallenge::clear_completed() {
  completed_ = 0u;
  clear_has_completed();
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::completed() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.completed)
  return completed_;
}
inline void CSODOTAPlayerChallenge::set_completed(::google::protobuf::uint32 value) {
  set_has_completed();
  completed_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.completed)
}

// optional uint32 sequence_id = 9;
inline bool CSODOTAPlayerChallenge::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSODOTAPlayerChallenge::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSODOTAPlayerChallenge::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSODOTAPlayerChallenge::clear_sequence_id() {
  sequence_id_ = 0u;
  clear_has_sequence_id();
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::sequence_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.sequence_id)
  return sequence_id_;
}
inline void CSODOTAPlayerChallenge::set_sequence_id(::google::protobuf::uint32 value) {
  set_has_sequence_id();
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.sequence_id)
}

// optional uint32 challenge_tier = 10;
inline bool CSODOTAPlayerChallenge::has_challenge_tier() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSODOTAPlayerChallenge::set_has_challenge_tier() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSODOTAPlayerChallenge::clear_has_challenge_tier() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSODOTAPlayerChallenge::clear_challenge_tier() {
  challenge_tier_ = 0u;
  clear_has_challenge_tier();
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::challenge_tier() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.challenge_tier)
  return challenge_tier_;
}
inline void CSODOTAPlayerChallenge::set_challenge_tier(::google::protobuf::uint32 value) {
  set_has_challenge_tier();
  challenge_tier_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.challenge_tier)
}

// optional uint32 flags = 11;
inline bool CSODOTAPlayerChallenge::has_flags() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSODOTAPlayerChallenge::set_has_flags() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSODOTAPlayerChallenge::clear_has_flags() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSODOTAPlayerChallenge::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::flags() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.flags)
  return flags_;
}
inline void CSODOTAPlayerChallenge::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.flags)
}

// optional uint32 attempts = 12;
inline bool CSODOTAPlayerChallenge::has_attempts() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSODOTAPlayerChallenge::set_has_attempts() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CSODOTAPlayerChallenge::clear_has_attempts() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CSODOTAPlayerChallenge::clear_attempts() {
  attempts_ = 0u;
  clear_has_attempts();
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::attempts() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.attempts)
  return attempts_;
}
inline void CSODOTAPlayerChallenge::set_attempts(::google::protobuf::uint32 value) {
  set_has_attempts();
  attempts_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.attempts)
}

// optional uint32 complete_limit = 13;
inline bool CSODOTAPlayerChallenge::has_complete_limit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSODOTAPlayerChallenge::set_has_complete_limit() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CSODOTAPlayerChallenge::clear_has_complete_limit() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CSODOTAPlayerChallenge::clear_complete_limit() {
  complete_limit_ = 0u;
  clear_has_complete_limit();
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::complete_limit() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.complete_limit)
  return complete_limit_;
}
inline void CSODOTAPlayerChallenge::set_complete_limit(::google::protobuf::uint32 value) {
  set_has_complete_limit();
  complete_limit_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.complete_limit)
}

// optional uint32 quest_rank = 14;
inline bool CSODOTAPlayerChallenge::has_quest_rank() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CSODOTAPlayerChallenge::set_has_quest_rank() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CSODOTAPlayerChallenge::clear_has_quest_rank() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CSODOTAPlayerChallenge::clear_quest_rank() {
  quest_rank_ = 0u;
  clear_has_quest_rank();
}
inline ::google::protobuf::uint32 CSODOTAPlayerChallenge::quest_rank() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.quest_rank)
  return quest_rank_;
}
inline void CSODOTAPlayerChallenge::set_quest_rank(::google::protobuf::uint32 value) {
  set_has_quest_rank();
  quest_rank_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.quest_rank)
}

// -------------------------------------------------------------------

// CMsgClientToGCRerollPlayerChallenge

// optional uint32 event_id = 1;
inline bool CMsgClientToGCRerollPlayerChallenge::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientToGCRerollPlayerChallenge::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientToGCRerollPlayerChallenge::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientToGCRerollPlayerChallenge::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
inline ::google::protobuf::uint32 CMsgClientToGCRerollPlayerChallenge::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCRerollPlayerChallenge.event_id)
  return event_id_;
}
inline void CMsgClientToGCRerollPlayerChallenge::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientToGCRerollPlayerChallenge.event_id)
}

// optional uint32 sequence_id = 3;
inline bool CMsgClientToGCRerollPlayerChallenge::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientToGCRerollPlayerChallenge::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientToGCRerollPlayerChallenge::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientToGCRerollPlayerChallenge::clear_sequence_id() {
  sequence_id_ = 0u;
  clear_has_sequence_id();
}
inline ::google::protobuf::uint32 CMsgClientToGCRerollPlayerChallenge::sequence_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCRerollPlayerChallenge.sequence_id)
  return sequence_id_;
}
inline void CMsgClientToGCRerollPlayerChallenge::set_sequence_id(::google::protobuf::uint32 value) {
  set_has_sequence_id();
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientToGCRerollPlayerChallenge.sequence_id)
}

// -------------------------------------------------------------------

// CMsgGCRerollPlayerChallengeResponse

// optional .CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
inline bool CMsgGCRerollPlayerChallengeResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCRerollPlayerChallengeResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCRerollPlayerChallengeResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCRerollPlayerChallengeResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgGCRerollPlayerChallengeResponse.result)
  return static_cast< ::CMsgGCRerollPlayerChallengeResponse_EResult >(result_);
}
inline void CMsgGCRerollPlayerChallengeResponse::set_result(::CMsgGCRerollPlayerChallengeResponse_EResult value) {
  assert(::CMsgGCRerollPlayerChallengeResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCRerollPlayerChallengeResponse.result)
}

// -------------------------------------------------------------------

// CMsgGCTopCustomGamesList

// repeated uint64 top_custom_games = 1;
inline int CMsgGCTopCustomGamesList::top_custom_games_size() const {
  return top_custom_games_.size();
}
inline void CMsgGCTopCustomGamesList::clear_top_custom_games() {
  top_custom_games_.Clear();
}
inline ::google::protobuf::uint64 CMsgGCTopCustomGamesList::top_custom_games(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCTopCustomGamesList.top_custom_games)
  return top_custom_games_.Get(index);
}
inline void CMsgGCTopCustomGamesList::set_top_custom_games(int index, ::google::protobuf::uint64 value) {
  top_custom_games_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCTopCustomGamesList.top_custom_games)
}
inline void CMsgGCTopCustomGamesList::add_top_custom_games(::google::protobuf::uint64 value) {
  top_custom_games_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgGCTopCustomGamesList.top_custom_games)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgGCTopCustomGamesList::top_custom_games() const {
  // @@protoc_insertion_point(field_list:CMsgGCTopCustomGamesList.top_custom_games)
  return top_custom_games_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgGCTopCustomGamesList::mutable_top_custom_games() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCTopCustomGamesList.top_custom_games)
  return &top_custom_games_;
}

// optional uint64 game_of_the_day = 2;
inline bool CMsgGCTopCustomGamesList::has_game_of_the_day() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCTopCustomGamesList::set_has_game_of_the_day() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCTopCustomGamesList::clear_has_game_of_the_day() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCTopCustomGamesList::clear_game_of_the_day() {
  game_of_the_day_ = GOOGLE_ULONGLONG(0);
  clear_has_game_of_the_day();
}
inline ::google::protobuf::uint64 CMsgGCTopCustomGamesList::game_of_the_day() const {
  // @@protoc_insertion_point(field_get:CMsgGCTopCustomGamesList.game_of_the_day)
  return game_of_the_day_;
}
inline void CMsgGCTopCustomGamesList::set_game_of_the_day(::google::protobuf::uint64 value) {
  set_has_game_of_the_day();
  game_of_the_day_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCTopCustomGamesList.game_of_the_day)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_TeamDetails

// optional uint32 team_number = 1;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_has_team_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_team_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_number() {
  team_number_ = 0u;
  clear_has_team_number();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_TeamDetails::team_number() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.team_number)
  return team_number_;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_number(::google::protobuf::uint32 value) {
  set_has_team_number();
  team_number_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.team_number)
}

// optional uint32 team_id = 2;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_TeamDetails::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.team_id)
  return team_id_;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.team_id)
}

// optional string team_name = 3;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_has_team_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& CMsgDOTARealtimeGameStats_TeamDetails::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.team_name)
  return *team_name_;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.team_name)
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTARealtimeGameStats.TeamDetails.team_name)
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTARealtimeGameStats.TeamDetails.team_name)
}
inline ::std::string* CMsgDOTARealtimeGameStats_TeamDetails::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.TeamDetails.team_name)
  return team_name_;
}
inline ::std::string* CMsgDOTARealtimeGameStats_TeamDetails::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_allocated_team_name(::std::string* team_name) {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_;
  }
  if (team_name) {
    set_has_team_name();
    team_name_ = team_name;
  } else {
    clear_has_team_name();
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStats.TeamDetails.team_name)
}

// optional fixed64 team_logo = 4;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_logo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_has_team_logo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_team_logo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_logo() {
  team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo();
}
inline ::google::protobuf::uint64 CMsgDOTARealtimeGameStats_TeamDetails::team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.team_logo)
  return team_logo_;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_logo(::google::protobuf::uint64 value) {
  set_has_team_logo();
  team_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.team_logo)
}

// optional uint32 score = 5;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_TeamDetails::score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.score)
  return score_;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.score)
}

// repeated .CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
inline int CMsgDOTARealtimeGameStats_TeamDetails::players_size() const {
  return players_.size();
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_players() {
  players_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_PlayerDetails& CMsgDOTARealtimeGameStats_TeamDetails::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.players)
  return players_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_PlayerDetails* CMsgDOTARealtimeGameStats_TeamDetails::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.TeamDetails.players)
  return players_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_PlayerDetails* CMsgDOTARealtimeGameStats_TeamDetails::add_players() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.TeamDetails.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PlayerDetails >&
CMsgDOTARealtimeGameStats_TeamDetails::players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.TeamDetails.players)
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PlayerDetails >*
CMsgDOTARealtimeGameStats_TeamDetails::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.TeamDetails.players)
  return &players_;
}

// optional bool only_team = 7;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_only_team() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_has_only_team() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_only_team() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_only_team() {
  only_team_ = false;
  clear_has_only_team();
}
inline bool CMsgDOTARealtimeGameStats_TeamDetails::only_team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.only_team)
  return only_team_;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_only_team(bool value) {
  set_has_only_team();
  only_team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.only_team)
}

// optional uint32 cheers = 8;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_cheers() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_has_cheers() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_cheers() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_cheers() {
  cheers_ = 0u;
  clear_has_cheers();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_TeamDetails::cheers() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.cheers)
  return cheers_;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_cheers(::google::protobuf::uint32 value) {
  set_has_cheers();
  cheers_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.cheers)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_ItemDetails

// optional uint32 id = 1;
inline bool CMsgDOTARealtimeGameStats_ItemDetails::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_ItemDetails::id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.ItemDetails.id)
  return id_;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.ItemDetails.id)
}

// optional string name = 2;
inline bool CMsgDOTARealtimeGameStats_ItemDetails::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgDOTARealtimeGameStats_ItemDetails::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.ItemDetails.name)
  return *name_;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.ItemDetails.name)
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTARealtimeGameStats.ItemDetails.name)
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTARealtimeGameStats.ItemDetails.name)
}
inline ::std::string* CMsgDOTARealtimeGameStats_ItemDetails::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.ItemDetails.name)
  return name_;
}
inline ::std::string* CMsgDOTARealtimeGameStats_ItemDetails::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStats.ItemDetails.name)
}

// optional int32 time = 3;
inline bool CMsgDOTARealtimeGameStats_ItemDetails::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_ItemDetails::time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.ItemDetails.time)
  return time_;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.ItemDetails.time)
}

// optional bool sold = 4;
inline bool CMsgDOTARealtimeGameStats_ItemDetails::has_sold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_has_sold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_has_sold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_sold() {
  sold_ = false;
  clear_has_sold();
}
inline bool CMsgDOTARealtimeGameStats_ItemDetails::sold() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.ItemDetails.sold)
  return sold_;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_sold(bool value) {
  set_has_sold();
  sold_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.ItemDetails.sold)
}

// optional uint32 stackcount = 5;
inline bool CMsgDOTARealtimeGameStats_ItemDetails::has_stackcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_has_stackcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_has_stackcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_stackcount() {
  stackcount_ = 0u;
  clear_has_stackcount();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_ItemDetails::stackcount() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.ItemDetails.stackcount)
  return stackcount_;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_stackcount(::google::protobuf::uint32 value) {
  set_has_stackcount();
  stackcount_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.ItemDetails.stackcount)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_AbilityDetails

// optional uint32 id = 1;
inline bool CMsgDOTARealtimeGameStats_AbilityDetails::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_AbilityDetails::id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.AbilityDetails.id)
  return id_;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.AbilityDetails.id)
}

// optional string name = 2;
inline bool CMsgDOTARealtimeGameStats_AbilityDetails::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgDOTARealtimeGameStats_AbilityDetails::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.AbilityDetails.name)
  return *name_;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.AbilityDetails.name)
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTARealtimeGameStats.AbilityDetails.name)
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTARealtimeGameStats.AbilityDetails.name)
}
inline ::std::string* CMsgDOTARealtimeGameStats_AbilityDetails::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.AbilityDetails.name)
  return name_;
}
inline ::std::string* CMsgDOTARealtimeGameStats_AbilityDetails::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStats.AbilityDetails.name)
}

// optional uint32 level = 3;
inline bool CMsgDOTARealtimeGameStats_AbilityDetails::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_AbilityDetails::level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.AbilityDetails.level)
  return level_;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.AbilityDetails.level)
}

// optional float cooldown = 4;
inline bool CMsgDOTARealtimeGameStats_AbilityDetails::has_cooldown() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_has_cooldown() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_has_cooldown() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_cooldown() {
  cooldown_ = 0;
  clear_has_cooldown();
}
inline float CMsgDOTARealtimeGameStats_AbilityDetails::cooldown() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.AbilityDetails.cooldown)
  return cooldown_;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_cooldown(float value) {
  set_has_cooldown();
  cooldown_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.AbilityDetails.cooldown)
}

// optional float cooldown_max = 5;
inline bool CMsgDOTARealtimeGameStats_AbilityDetails::has_cooldown_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_has_cooldown_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_has_cooldown_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_cooldown_max() {
  cooldown_max_ = 0;
  clear_has_cooldown_max();
}
inline float CMsgDOTARealtimeGameStats_AbilityDetails::cooldown_max() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.AbilityDetails.cooldown_max)
  return cooldown_max_;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_cooldown_max(float value) {
  set_has_cooldown_max();
  cooldown_max_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.AbilityDetails.cooldown_max)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_HeroToHeroStats

// optional uint32 victimid = 1;
inline bool CMsgDOTARealtimeGameStats_HeroToHeroStats::has_victimid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_has_victimid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_has_victimid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_victimid() {
  victimid_ = 0u;
  clear_has_victimid();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_HeroToHeroStats::victimid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.HeroToHeroStats.victimid)
  return victimid_;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_victimid(::google::protobuf::uint32 value) {
  set_has_victimid();
  victimid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.HeroToHeroStats.victimid)
}

// optional uint32 kills = 2;
inline bool CMsgDOTARealtimeGameStats_HeroToHeroStats::has_kills() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_has_kills() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_has_kills() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_HeroToHeroStats::kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.HeroToHeroStats.kills)
  return kills_;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.HeroToHeroStats.kills)
}

// optional uint32 assists = 3;
inline bool CMsgDOTARealtimeGameStats_HeroToHeroStats::has_assists() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_has_assists() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_has_assists() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_assists() {
  assists_ = 0u;
  clear_has_assists();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_HeroToHeroStats::assists() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.HeroToHeroStats.assists)
  return assists_;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_assists(::google::protobuf::uint32 value) {
  set_has_assists();
  assists_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.HeroToHeroStats.assists)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_AbilityList

// repeated uint32 id = 1;
inline int CMsgDOTARealtimeGameStats_AbilityList::id_size() const {
  return id_.size();
}
inline void CMsgDOTARealtimeGameStats_AbilityList::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_AbilityList::id(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.AbilityList.id)
  return id_.Get(index);
}
inline void CMsgDOTARealtimeGameStats_AbilityList::set_id(int index, ::google::protobuf::uint32 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.AbilityList.id)
}
inline void CMsgDOTARealtimeGameStats_AbilityList::add_id(::google::protobuf::uint32 value) {
  id_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.AbilityList.id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTARealtimeGameStats_AbilityList::id() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.AbilityList.id)
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTARealtimeGameStats_AbilityList::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.AbilityList.id)
  return &id_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_PlayerDetails

// optional uint32 accountid = 1;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::accountid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.accountid)
  return accountid_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.accountid)
}

// optional uint32 playerid = 2;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::playerid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.playerid)
  return playerid_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.playerid)
}

// optional string name = 3;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgDOTARealtimeGameStats_PlayerDetails::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.name)
  return *name_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.name)
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTARealtimeGameStats.PlayerDetails.name)
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTARealtimeGameStats.PlayerDetails.name)
}
inline ::std::string* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.name)
  return name_;
}
inline ::std::string* CMsgDOTARealtimeGameStats_PlayerDetails::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStats.PlayerDetails.name)
}

// optional uint32 team = 4;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_team() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_team() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_team() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_team() {
  team_ = 0u;
  clear_has_team();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.team)
  return team_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.team)
}

// optional uint32 heroid = 5;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_heroid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_heroid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::heroid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.heroid)
  return heroid_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.heroid)
}

// optional uint32 healthpoints = 6;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_healthpoints() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_healthpoints() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_healthpoints() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_healthpoints() {
  healthpoints_ = 0u;
  clear_has_healthpoints();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::healthpoints() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.healthpoints)
  return healthpoints_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_healthpoints(::google::protobuf::uint32 value) {
  set_has_healthpoints();
  healthpoints_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.healthpoints)
}

// optional uint32 maxhealthpoints = 7;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_maxhealthpoints() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_maxhealthpoints() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_maxhealthpoints() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_maxhealthpoints() {
  maxhealthpoints_ = 0u;
  clear_has_maxhealthpoints();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::maxhealthpoints() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.maxhealthpoints)
  return maxhealthpoints_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_maxhealthpoints(::google::protobuf::uint32 value) {
  set_has_maxhealthpoints();
  maxhealthpoints_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.maxhealthpoints)
}

// optional float healthregenrate = 8;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_healthregenrate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_healthregenrate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_healthregenrate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_healthregenrate() {
  healthregenrate_ = 0;
  clear_has_healthregenrate();
}
inline float CMsgDOTARealtimeGameStats_PlayerDetails::healthregenrate() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.healthregenrate)
  return healthregenrate_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_healthregenrate(float value) {
  set_has_healthregenrate();
  healthregenrate_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.healthregenrate)
}

// optional uint32 manapoints = 9;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_manapoints() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_manapoints() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_manapoints() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_manapoints() {
  manapoints_ = 0u;
  clear_has_manapoints();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::manapoints() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.manapoints)
  return manapoints_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_manapoints(::google::protobuf::uint32 value) {
  set_has_manapoints();
  manapoints_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.manapoints)
}

// optional uint32 maxmanapoints = 10;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_maxmanapoints() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_maxmanapoints() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_maxmanapoints() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_maxmanapoints() {
  maxmanapoints_ = 0u;
  clear_has_maxmanapoints();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::maxmanapoints() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.maxmanapoints)
  return maxmanapoints_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_maxmanapoints(::google::protobuf::uint32 value) {
  set_has_maxmanapoints();
  maxmanapoints_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.maxmanapoints)
}

// optional float manaregenrate = 11;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_manaregenrate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_manaregenrate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_manaregenrate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_manaregenrate() {
  manaregenrate_ = 0;
  clear_has_manaregenrate();
}
inline float CMsgDOTARealtimeGameStats_PlayerDetails::manaregenrate() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.manaregenrate)
  return manaregenrate_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_manaregenrate(float value) {
  set_has_manaregenrate();
  manaregenrate_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.manaregenrate)
}

// optional uint32 base_strength = 12;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_strength() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_base_strength() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_base_strength() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_strength() {
  base_strength_ = 0u;
  clear_has_base_strength();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::base_strength() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.base_strength)
  return base_strength_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_strength(::google::protobuf::uint32 value) {
  set_has_base_strength();
  base_strength_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.base_strength)
}

// optional uint32 base_agility = 13;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_agility() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_base_agility() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_base_agility() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_agility() {
  base_agility_ = 0u;
  clear_has_base_agility();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::base_agility() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.base_agility)
  return base_agility_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_agility(::google::protobuf::uint32 value) {
  set_has_base_agility();
  base_agility_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.base_agility)
}

// optional uint32 base_intelligence = 14;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_intelligence() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_base_intelligence() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_base_intelligence() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_intelligence() {
  base_intelligence_ = 0u;
  clear_has_base_intelligence();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::base_intelligence() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.base_intelligence)
  return base_intelligence_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_intelligence(::google::protobuf::uint32 value) {
  set_has_base_intelligence();
  base_intelligence_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.base_intelligence)
}

// optional int32 base_armor = 15;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_armor() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_base_armor() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_base_armor() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_armor() {
  base_armor_ = 0;
  clear_has_base_armor();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_PlayerDetails::base_armor() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.base_armor)
  return base_armor_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_armor(::google::protobuf::int32 value) {
  set_has_base_armor();
  base_armor_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.base_armor)
}

// optional uint32 base_movespeed = 16;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_movespeed() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_base_movespeed() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_base_movespeed() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_movespeed() {
  base_movespeed_ = 0u;
  clear_has_base_movespeed();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::base_movespeed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.base_movespeed)
  return base_movespeed_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_movespeed(::google::protobuf::uint32 value) {
  set_has_base_movespeed();
  base_movespeed_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.base_movespeed)
}

// optional uint32 base_damage = 17;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_damage() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_base_damage() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_base_damage() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_damage() {
  base_damage_ = 0u;
  clear_has_base_damage();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::base_damage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.base_damage)
  return base_damage_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_damage(::google::protobuf::uint32 value) {
  set_has_base_damage();
  base_damage_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.base_damage)
}

// optional uint32 strength = 18;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_strength() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_strength() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_strength() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_strength() {
  strength_ = 0u;
  clear_has_strength();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::strength() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.strength)
  return strength_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_strength(::google::protobuf::uint32 value) {
  set_has_strength();
  strength_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.strength)
}

// optional uint32 agility = 19;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_agility() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_agility() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_agility() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_agility() {
  agility_ = 0u;
  clear_has_agility();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::agility() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.agility)
  return agility_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_agility(::google::protobuf::uint32 value) {
  set_has_agility();
  agility_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.agility)
}

// optional uint32 intelligence = 20;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_intelligence() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_intelligence() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_intelligence() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_intelligence() {
  intelligence_ = 0u;
  clear_has_intelligence();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::intelligence() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.intelligence)
  return intelligence_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_intelligence(::google::protobuf::uint32 value) {
  set_has_intelligence();
  intelligence_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.intelligence)
}

// optional int32 armor = 21;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_armor() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_armor() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_armor() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_armor() {
  armor_ = 0;
  clear_has_armor();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_PlayerDetails::armor() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.armor)
  return armor_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_armor(::google::protobuf::int32 value) {
  set_has_armor();
  armor_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.armor)
}

// optional uint32 movespeed = 22;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_movespeed() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_movespeed() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_movespeed() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_movespeed() {
  movespeed_ = 0u;
  clear_has_movespeed();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::movespeed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.movespeed)
  return movespeed_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_movespeed(::google::protobuf::uint32 value) {
  set_has_movespeed();
  movespeed_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.movespeed)
}

// optional uint32 damage = 23;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_damage() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_damage() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_damage() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_damage() {
  damage_ = 0u;
  clear_has_damage();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::damage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.damage)
  return damage_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_damage(::google::protobuf::uint32 value) {
  set_has_damage();
  damage_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.damage)
}

// optional uint32 hero_damage = 24;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_hero_damage() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_hero_damage() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_hero_damage() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_hero_damage() {
  hero_damage_ = 0u;
  clear_has_hero_damage();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::hero_damage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.hero_damage)
  return hero_damage_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_hero_damage(::google::protobuf::uint32 value) {
  set_has_hero_damage();
  hero_damage_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.hero_damage)
}

// optional uint32 tower_damage = 25;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_tower_damage() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_tower_damage() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_tower_damage() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_tower_damage() {
  tower_damage_ = 0u;
  clear_has_tower_damage();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::tower_damage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.tower_damage)
  return tower_damage_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_tower_damage(::google::protobuf::uint32 value) {
  set_has_tower_damage();
  tower_damage_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.tower_damage)
}

// repeated .CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
inline int CMsgDOTARealtimeGameStats_PlayerDetails::abilities_size() const {
  return abilities_.size();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_abilities() {
  abilities_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_AbilityDetails& CMsgDOTARealtimeGameStats_PlayerDetails::abilities(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return abilities_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_AbilityDetails* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_abilities(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return abilities_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_AbilityDetails* CMsgDOTARealtimeGameStats_PlayerDetails::add_abilities() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return abilities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityDetails >&
CMsgDOTARealtimeGameStats_PlayerDetails::abilities() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return abilities_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityDetails >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_abilities() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return &abilities_;
}

// optional uint32 level = 27;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_level() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_level() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_level() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.level)
  return level_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.level)
}

// optional uint32 kill_count = 28;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_kill_count() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_kill_count() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_kill_count() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_kill_count() {
  kill_count_ = 0u;
  clear_has_kill_count();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::kill_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.kill_count)
  return kill_count_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_kill_count(::google::protobuf::uint32 value) {
  set_has_kill_count();
  kill_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.kill_count)
}

// optional uint32 death_count = 29;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_death_count() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_death_count() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_death_count() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_death_count() {
  death_count_ = 0u;
  clear_has_death_count();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::death_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.death_count)
  return death_count_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_death_count(::google::protobuf::uint32 value) {
  set_has_death_count();
  death_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.death_count)
}

// optional uint32 assists_count = 30;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_assists_count() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_assists_count() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_assists_count() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_assists_count() {
  assists_count_ = 0u;
  clear_has_assists_count();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::assists_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.assists_count)
  return assists_count_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_assists_count(::google::protobuf::uint32 value) {
  set_has_assists_count();
  assists_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.assists_count)
}

// optional uint32 denies_count = 31;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_denies_count() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_denies_count() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_denies_count() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_denies_count() {
  denies_count_ = 0u;
  clear_has_denies_count();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::denies_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.denies_count)
  return denies_count_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_denies_count(::google::protobuf::uint32 value) {
  set_has_denies_count();
  denies_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.denies_count)
}

// optional uint32 lh_count = 32;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_lh_count() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_lh_count() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_lh_count() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_lh_count() {
  lh_count_ = 0u;
  clear_has_lh_count();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::lh_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.lh_count)
  return lh_count_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_lh_count(::google::protobuf::uint32 value) {
  set_has_lh_count();
  lh_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.lh_count)
}

// optional uint32 hero_healing = 33;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_hero_healing() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_hero_healing() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_hero_healing() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_hero_healing() {
  hero_healing_ = 0u;
  clear_has_hero_healing();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::hero_healing() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.hero_healing)
  return hero_healing_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_hero_healing(::google::protobuf::uint32 value) {
  set_has_hero_healing();
  hero_healing_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.hero_healing)
}

// optional uint32 gold_per_min = 34;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_gold_per_min() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_gold_per_min() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_gold_per_min() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_gold_per_min() {
  gold_per_min_ = 0u;
  clear_has_gold_per_min();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::gold_per_min() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.gold_per_min)
  return gold_per_min_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_gold_per_min(::google::protobuf::uint32 value) {
  set_has_gold_per_min();
  gold_per_min_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.gold_per_min)
}

// optional uint32 xp_per_min = 35;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_xp_per_min() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_xp_per_min() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_xp_per_min() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_xp_per_min() {
  xp_per_min_ = 0u;
  clear_has_xp_per_min();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::xp_per_min() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.xp_per_min)
  return xp_per_min_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_xp_per_min(::google::protobuf::uint32 value) {
  set_has_xp_per_min();
  xp_per_min_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.xp_per_min)
}

// optional uint32 net_gold = 36;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_net_gold() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_net_gold() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_net_gold() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_net_gold() {
  net_gold_ = 0u;
  clear_has_net_gold();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::net_gold() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.net_gold)
  return net_gold_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_net_gold(::google::protobuf::uint32 value) {
  set_has_net_gold();
  net_gold_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.net_gold)
}

// optional uint32 gold = 37;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_gold() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_gold() {
  _has_bits_[1] |= 0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_gold() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::gold() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.gold)
  return gold_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.gold)
}

// optional float x = 38;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_x() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_x() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_x() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float CMsgDOTARealtimeGameStats_PlayerDetails::x() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.x)
  return x_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.x)
}

// optional float y = 39;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_y() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_y() {
  _has_bits_[1] |= 0x00000040u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_y() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float CMsgDOTARealtimeGameStats_PlayerDetails::y() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.y)
  return y_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.y)
}

// optional int32 respawn_time = 40;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_respawn_time() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_respawn_time() {
  _has_bits_[1] |= 0x00000080u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_respawn_time() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_respawn_time() {
  respawn_time_ = 0;
  clear_has_respawn_time();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_PlayerDetails::respawn_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.respawn_time)
  return respawn_time_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_respawn_time(::google::protobuf::int32 value) {
  set_has_respawn_time();
  respawn_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.respawn_time)
}

// optional uint32 ultimate_cooldown = 41;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_ultimate_cooldown() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_ultimate_cooldown() {
  _has_bits_[1] |= 0x00000100u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_ultimate_cooldown() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_ultimate_cooldown() {
  ultimate_cooldown_ = 0u;
  clear_has_ultimate_cooldown();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::ultimate_cooldown() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.ultimate_cooldown)
  return ultimate_cooldown_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_ultimate_cooldown(::google::protobuf::uint32 value) {
  set_has_ultimate_cooldown();
  ultimate_cooldown_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.ultimate_cooldown)
}

// optional bool has_buyback = 42;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_has_buyback() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_has_buyback() {
  _has_bits_[1] |= 0x00000200u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_has_buyback() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_buyback() {
  has_buyback_ = false;
  clear_has_has_buyback();
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_buyback() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.has_buyback)
  return has_buyback_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_buyback(bool value) {
  set_has_has_buyback();
  has_buyback_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.has_buyback)
}

// repeated .CMsgDOTARealtimeGameStats.ItemDetails items = 43;
inline int CMsgDOTARealtimeGameStats_PlayerDetails::items_size() const {
  return items_.size();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_items() {
  items_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_ItemDetails& CMsgDOTARealtimeGameStats_PlayerDetails::items(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return items_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return items_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::add_items() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >&
CMsgDOTARealtimeGameStats_PlayerDetails::items() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return &items_;
}

// repeated .CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
inline int CMsgDOTARealtimeGameStats_PlayerDetails::stashitems_size() const {
  return stashitems_.size();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_stashitems() {
  stashitems_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_ItemDetails& CMsgDOTARealtimeGameStats_PlayerDetails::stashitems(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return stashitems_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_stashitems(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return stashitems_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::add_stashitems() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return stashitems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >&
CMsgDOTARealtimeGameStats_PlayerDetails::stashitems() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return stashitems_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_stashitems() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return &stashitems_;
}

// repeated .CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
inline int CMsgDOTARealtimeGameStats_PlayerDetails::itemshoppinglist_size() const {
  return itemshoppinglist_.size();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_itemshoppinglist() {
  itemshoppinglist_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_ItemDetails& CMsgDOTARealtimeGameStats_PlayerDetails::itemshoppinglist(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return itemshoppinglist_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_itemshoppinglist(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return itemshoppinglist_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::add_itemshoppinglist() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return itemshoppinglist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >&
CMsgDOTARealtimeGameStats_PlayerDetails::itemshoppinglist() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return itemshoppinglist_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_itemshoppinglist() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return &itemshoppinglist_;
}

// repeated .CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
inline int CMsgDOTARealtimeGameStats_PlayerDetails::levelpoints_size() const {
  return levelpoints_.size();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_levelpoints() {
  levelpoints_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_AbilityList& CMsgDOTARealtimeGameStats_PlayerDetails::levelpoints(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return levelpoints_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_AbilityList* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_levelpoints(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return levelpoints_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_AbilityList* CMsgDOTARealtimeGameStats_PlayerDetails::add_levelpoints() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return levelpoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityList >&
CMsgDOTARealtimeGameStats_PlayerDetails::levelpoints() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return levelpoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityList >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_levelpoints() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return &levelpoints_;
}

// repeated .CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
inline int CMsgDOTARealtimeGameStats_PlayerDetails::hero_to_hero_stats_size() const {
  return hero_to_hero_stats_.size();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_hero_to_hero_stats() {
  hero_to_hero_stats_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_HeroToHeroStats& CMsgDOTARealtimeGameStats_PlayerDetails::hero_to_hero_stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return hero_to_hero_stats_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_HeroToHeroStats* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_hero_to_hero_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return hero_to_hero_stats_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_HeroToHeroStats* CMsgDOTARealtimeGameStats_PlayerDetails::add_hero_to_hero_stats() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return hero_to_hero_stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_HeroToHeroStats >&
CMsgDOTARealtimeGameStats_PlayerDetails::hero_to_hero_stats() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return hero_to_hero_stats_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_HeroToHeroStats >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_hero_to_hero_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return &hero_to_hero_stats_;
}

// optional bool has_ultimate = 48;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_has_ultimate() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_has_ultimate() {
  _has_bits_[1] |= 0x00008000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_has_ultimate() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_ultimate() {
  has_ultimate_ = false;
  clear_has_has_ultimate();
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_ultimate() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.has_ultimate)
  return has_ultimate_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_ultimate(bool value) {
  set_has_has_ultimate();
  has_ultimate_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.has_ultimate)
}

// optional bool has_ultimate_mana = 49;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_has_ultimate_mana() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_has_ultimate_mana() {
  _has_bits_[1] |= 0x00010000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_has_ultimate_mana() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_ultimate_mana() {
  has_ultimate_mana_ = false;
  clear_has_has_ultimate_mana();
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_ultimate_mana() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.has_ultimate_mana)
  return has_ultimate_mana_;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_ultimate_mana(bool value) {
  set_has_has_ultimate_mana();
  has_ultimate_mana_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.has_ultimate_mana)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_BuildingDetails

// optional uint32 team = 2;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_team() {
  team_ = 0u;
  clear_has_team();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BuildingDetails::team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.team)
  return team_;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.team)
}

// optional float heading = 3;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_heading() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_heading() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_heading() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline float CMsgDOTARealtimeGameStats_BuildingDetails::heading() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.heading)
  return heading_;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_heading(float value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.heading)
}

// optional uint32 lane = 4;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_lane() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_lane() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_lane() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_lane() {
  lane_ = 0u;
  clear_has_lane();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BuildingDetails::lane() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.lane)
  return lane_;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_lane(::google::protobuf::uint32 value) {
  set_has_lane();
  lane_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.lane)
}

// optional uint32 tier = 5;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_tier() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_tier() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_tier() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_tier() {
  tier_ = 0u;
  clear_has_tier();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BuildingDetails::tier() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.tier)
  return tier_;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_tier(::google::protobuf::uint32 value) {
  set_has_tier();
  tier_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.tier)
}

// optional uint32 type = 6;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BuildingDetails::type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.type)
  return type_;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.type)
}

// optional float x = 7;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float CMsgDOTARealtimeGameStats_BuildingDetails::x() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.x)
  return x_;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.x)
}

// optional float y = 8;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float CMsgDOTARealtimeGameStats_BuildingDetails::y() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.y)
  return y_;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.y)
}

// optional bool destroyed = 9;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_destroyed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_destroyed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_destroyed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_destroyed() {
  destroyed_ = false;
  clear_has_destroyed();
}
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::destroyed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.destroyed)
  return destroyed_;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_destroyed(bool value) {
  set_has_destroyed();
  destroyed_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.destroyed)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_KillDetails

// optional uint32 player_id = 1;
inline bool CMsgDOTARealtimeGameStats_KillDetails::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_KillDetails::player_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.KillDetails.player_id)
  return player_id_;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.KillDetails.player_id)
}

// optional int32 death_time = 2;
inline bool CMsgDOTARealtimeGameStats_KillDetails::has_death_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::set_has_death_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::clear_has_death_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::clear_death_time() {
  death_time_ = 0;
  clear_has_death_time();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_KillDetails::death_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.KillDetails.death_time)
  return death_time_;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::set_death_time(::google::protobuf::int32 value) {
  set_has_death_time();
  death_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.KillDetails.death_time)
}

// optional uint32 killer_player_id = 3;
inline bool CMsgDOTARealtimeGameStats_KillDetails::has_killer_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::set_has_killer_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::clear_has_killer_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::clear_killer_player_id() {
  killer_player_id_ = 0u;
  clear_has_killer_player_id();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_KillDetails::killer_player_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.KillDetails.killer_player_id)
  return killer_player_id_;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::set_killer_player_id(::google::protobuf::uint32 value) {
  set_has_killer_player_id();
  killer_player_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.KillDetails.killer_player_id)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_BroadcasterDetails

// optional uint32 player_id = 1;
inline bool CMsgDOTARealtimeGameStats_BroadcasterDetails::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BroadcasterDetails::player_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BroadcasterDetails.player_id)
  return player_id_;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BroadcasterDetails.player_id)
}

// optional uint32 selected_hero = 2;
inline bool CMsgDOTARealtimeGameStats_BroadcasterDetails::has_selected_hero() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_has_selected_hero() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_has_selected_hero() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_selected_hero() {
  selected_hero_ = 0u;
  clear_has_selected_hero();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BroadcasterDetails::selected_hero() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BroadcasterDetails.selected_hero)
  return selected_hero_;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_selected_hero(::google::protobuf::uint32 value) {
  set_has_selected_hero();
  selected_hero_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BroadcasterDetails.selected_hero)
}

// optional uint32 selected_graph = 3;
inline bool CMsgDOTARealtimeGameStats_BroadcasterDetails::has_selected_graph() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_has_selected_graph() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_has_selected_graph() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_selected_graph() {
  selected_graph_ = 0u;
  clear_has_selected_graph();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BroadcasterDetails::selected_graph() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BroadcasterDetails.selected_graph)
  return selected_graph_;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_selected_graph(::google::protobuf::uint32 value) {
  set_has_selected_graph();
  selected_graph_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BroadcasterDetails.selected_graph)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_PickBanDetails

// optional uint32 hero = 1;
inline bool CMsgDOTARealtimeGameStats_PickBanDetails::has_hero() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PickBanDetails::set_has_hero() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_PickBanDetails::clear_has_hero() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_PickBanDetails::clear_hero() {
  hero_ = 0u;
  clear_has_hero();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PickBanDetails::hero() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PickBanDetails.hero)
  return hero_;
}
inline void CMsgDOTARealtimeGameStats_PickBanDetails::set_hero(::google::protobuf::uint32 value) {
  set_has_hero();
  hero_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PickBanDetails.hero)
}

// optional uint32 team = 2;
inline bool CMsgDOTARealtimeGameStats_PickBanDetails::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_PickBanDetails::set_has_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_PickBanDetails::clear_has_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_PickBanDetails::clear_team() {
  team_ = 0u;
  clear_has_team();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PickBanDetails::team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PickBanDetails.team)
  return team_;
}
inline void CMsgDOTARealtimeGameStats_PickBanDetails::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PickBanDetails.team)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_MatchDetails

// optional fixed64 server_steam_id = 1;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_server_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_has_server_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_server_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_server_steam_id() {
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steam_id();
}
inline ::google::protobuf::uint64 CMsgDOTARealtimeGameStats_MatchDetails::server_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.server_steam_id)
  return server_steam_id_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_server_steam_id(::google::protobuf::uint64 value) {
  set_has_server_steam_id();
  server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.server_steam_id)
}

// optional uint64 matchid = 2;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_matchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_has_matchid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_matchid() {
  matchid_ = GOOGLE_ULONGLONG(0);
  clear_has_matchid();
}
inline ::google::protobuf::uint64 CMsgDOTARealtimeGameStats_MatchDetails::matchid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.matchid)
  return matchid_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_matchid(::google::protobuf::uint64 value) {
  set_has_matchid();
  matchid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.matchid)
}

// optional uint32 timestamp = 3;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.timestamp)
  return timestamp_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.timestamp)
}

// optional float time_of_day = 4;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_time_of_day() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_has_time_of_day() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_time_of_day() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_time_of_day() {
  time_of_day_ = 0;
  clear_has_time_of_day();
}
inline float CMsgDOTARealtimeGameStats_MatchDetails::time_of_day() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.time_of_day)
  return time_of_day_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_time_of_day(float value) {
  set_has_time_of_day();
  time_of_day_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.time_of_day)
}

// optional bool is_nightstalker_night = 5;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_is_nightstalker_night() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_has_is_nightstalker_night() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_is_nightstalker_night() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_is_nightstalker_night() {
  is_nightstalker_night_ = false;
  clear_has_is_nightstalker_night();
}
inline bool CMsgDOTARealtimeGameStats_MatchDetails::is_nightstalker_night() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.is_nightstalker_night)
  return is_nightstalker_night_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_is_nightstalker_night(bool value) {
  set_has_is_nightstalker_night();
  is_nightstalker_night_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.is_nightstalker_night)
}

// optional int32 game_time = 6;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_game_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_has_game_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_game_time() {
  game_time_ = 0;
  clear_has_game_time();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_MatchDetails::game_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.game_time)
  return game_time_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_game_time(::google::protobuf::int32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.game_time)
}

// optional uint32 teamid_radiant = 8;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_teamid_radiant() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_has_teamid_radiant() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_teamid_radiant() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_teamid_radiant() {
  teamid_radiant_ = 0u;
  clear_has_teamid_radiant();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::teamid_radiant() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.teamid_radiant)
  return teamid_radiant_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_teamid_radiant(::google::protobuf::uint32 value) {
  set_has_teamid_radiant();
  teamid_radiant_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.teamid_radiant)
}

// optional uint32 teamid_dire = 9;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_teamid_dire() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_has_teamid_dire() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_teamid_dire() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_teamid_dire() {
  teamid_dire_ = 0u;
  clear_has_teamid_dire();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::teamid_dire() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.teamid_dire)
  return teamid_dire_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_teamid_dire(::google::protobuf::uint32 value) {
  set_has_teamid_dire();
  teamid_dire_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.teamid_dire)
}

// repeated .CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
inline int CMsgDOTARealtimeGameStats_MatchDetails::picks_size() const {
  return picks_.size();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_picks() {
  picks_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_PickBanDetails& CMsgDOTARealtimeGameStats_MatchDetails::picks(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return picks_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_MatchDetails::mutable_picks(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return picks_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_MatchDetails::add_picks() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return picks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >&
CMsgDOTARealtimeGameStats_MatchDetails::picks() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return picks_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >*
CMsgDOTARealtimeGameStats_MatchDetails::mutable_picks() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return &picks_;
}

// repeated .CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
inline int CMsgDOTARealtimeGameStats_MatchDetails::bans_size() const {
  return bans_.size();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_bans() {
  bans_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_PickBanDetails& CMsgDOTARealtimeGameStats_MatchDetails::bans(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return bans_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_MatchDetails::mutable_bans(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return bans_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_MatchDetails::add_bans() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return bans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >&
CMsgDOTARealtimeGameStats_MatchDetails::bans() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return bans_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >*
CMsgDOTARealtimeGameStats_MatchDetails::mutable_bans() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return &bans_;
}

// repeated .CMsgDOTARealtimeGameStats.KillDetails kills = 12;
inline int CMsgDOTARealtimeGameStats_MatchDetails::kills_size() const {
  return kills_.size();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_kills() {
  kills_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_KillDetails& CMsgDOTARealtimeGameStats_MatchDetails::kills(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return kills_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_KillDetails* CMsgDOTARealtimeGameStats_MatchDetails::mutable_kills(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return kills_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_KillDetails* CMsgDOTARealtimeGameStats_MatchDetails::add_kills() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return kills_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_KillDetails >&
CMsgDOTARealtimeGameStats_MatchDetails::kills() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return kills_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_KillDetails >*
CMsgDOTARealtimeGameStats_MatchDetails::mutable_kills() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return &kills_;
}

// repeated .CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
inline int CMsgDOTARealtimeGameStats_MatchDetails::broadcasters_size() const {
  return broadcasters_.size();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_broadcasters() {
  broadcasters_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_BroadcasterDetails& CMsgDOTARealtimeGameStats_MatchDetails::broadcasters(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return broadcasters_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_BroadcasterDetails* CMsgDOTARealtimeGameStats_MatchDetails::mutable_broadcasters(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return broadcasters_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_BroadcasterDetails* CMsgDOTARealtimeGameStats_MatchDetails::add_broadcasters() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return broadcasters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BroadcasterDetails >&
CMsgDOTARealtimeGameStats_MatchDetails::broadcasters() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return broadcasters_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BroadcasterDetails >*
CMsgDOTARealtimeGameStats_MatchDetails::mutable_broadcasters() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return &broadcasters_;
}

// optional uint32 game_mode = 14;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_game_mode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_has_game_mode() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.game_mode)
  return game_mode_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.game_mode)
}

// optional uint32 league_id = 15;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_league_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_has_league_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_league_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.league_id)
  return league_id_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.league_id)
}

// optional bool single_team = 16;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_single_team() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_has_single_team() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_single_team() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_single_team() {
  single_team_ = false;
  clear_has_single_team();
}
inline bool CMsgDOTARealtimeGameStats_MatchDetails::single_team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.single_team)
  return single_team_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_single_team(bool value) {
  set_has_single_team();
  single_team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.single_team)
}

// optional uint32 cheers_peak = 17;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_cheers_peak() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_has_cheers_peak() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_cheers_peak() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_cheers_peak() {
  cheers_peak_ = 0u;
  clear_has_cheers_peak();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::cheers_peak() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.cheers_peak)
  return cheers_peak_;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_cheers_peak(::google::protobuf::uint32 value) {
  set_has_cheers_peak();
  cheers_peak_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.cheers_peak)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_GraphData_LocationStats

// repeated int32 stats = 1;
inline int CMsgDOTARealtimeGameStats_GraphData_LocationStats::stats_size() const {
  return stats_.size();
}
inline void CMsgDOTARealtimeGameStats_GraphData_LocationStats::clear_stats() {
  stats_.Clear();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData_LocationStats::stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
  return stats_.Get(index);
}
inline void CMsgDOTARealtimeGameStats_GraphData_LocationStats::set_stats(int index, ::google::protobuf::int32 value) {
  stats_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
}
inline void CMsgDOTARealtimeGameStats_GraphData_LocationStats::add_stats(::google::protobuf::int32 value) {
  stats_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData_LocationStats::stats() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
  return stats_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData_LocationStats::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
  return &stats_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats

// repeated .CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
inline int CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::loc_stats_size() const {
  return loc_stats_.size();
}
inline void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::clear_loc_stats() {
  loc_stats_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_GraphData_LocationStats& CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::loc_stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return loc_stats_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_GraphData_LocationStats* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::mutable_loc_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return loc_stats_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_GraphData_LocationStats* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::add_loc_stats() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return loc_stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_LocationStats >&
CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::loc_stats() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return loc_stats_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_LocationStats >*
CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::mutable_loc_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return &loc_stats_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_GraphData

// repeated int32 graph_gold = 1;
inline int CMsgDOTARealtimeGameStats_GraphData::graph_gold_size() const {
  return graph_gold_.size();
}
inline void CMsgDOTARealtimeGameStats_GraphData::clear_graph_gold() {
  graph_gold_.Clear();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData::graph_gold(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.graph_gold)
  return graph_gold_.Get(index);
}
inline void CMsgDOTARealtimeGameStats_GraphData::set_graph_gold(int index, ::google::protobuf::int32 value) {
  graph_gold_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.GraphData.graph_gold)
}
inline void CMsgDOTARealtimeGameStats_GraphData::add_graph_gold(::google::protobuf::int32 value) {
  graph_gold_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.graph_gold)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData::graph_gold() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.graph_gold)
  return graph_gold_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_gold() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.graph_gold)
  return &graph_gold_;
}

// repeated int32 graph_xp = 2;
inline int CMsgDOTARealtimeGameStats_GraphData::graph_xp_size() const {
  return graph_xp_.size();
}
inline void CMsgDOTARealtimeGameStats_GraphData::clear_graph_xp() {
  graph_xp_.Clear();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData::graph_xp(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.graph_xp)
  return graph_xp_.Get(index);
}
inline void CMsgDOTARealtimeGameStats_GraphData::set_graph_xp(int index, ::google::protobuf::int32 value) {
  graph_xp_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.GraphData.graph_xp)
}
inline void CMsgDOTARealtimeGameStats_GraphData::add_graph_xp(::google::protobuf::int32 value) {
  graph_xp_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.graph_xp)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData::graph_xp() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.graph_xp)
  return graph_xp_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_xp() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.graph_xp)
  return &graph_xp_;
}

// repeated int32 graph_kill = 3;
inline int CMsgDOTARealtimeGameStats_GraphData::graph_kill_size() const {
  return graph_kill_.size();
}
inline void CMsgDOTARealtimeGameStats_GraphData::clear_graph_kill() {
  graph_kill_.Clear();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData::graph_kill(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.graph_kill)
  return graph_kill_.Get(index);
}
inline void CMsgDOTARealtimeGameStats_GraphData::set_graph_kill(int index, ::google::protobuf::int32 value) {
  graph_kill_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.GraphData.graph_kill)
}
inline void CMsgDOTARealtimeGameStats_GraphData::add_graph_kill(::google::protobuf::int32 value) {
  graph_kill_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.graph_kill)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData::graph_kill() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.graph_kill)
  return graph_kill_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_kill() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.graph_kill)
  return &graph_kill_;
}

// repeated int32 graph_tower = 4;
inline int CMsgDOTARealtimeGameStats_GraphData::graph_tower_size() const {
  return graph_tower_.size();
}
inline void CMsgDOTARealtimeGameStats_GraphData::clear_graph_tower() {
  graph_tower_.Clear();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData::graph_tower(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.graph_tower)
  return graph_tower_.Get(index);
}
inline void CMsgDOTARealtimeGameStats_GraphData::set_graph_tower(int index, ::google::protobuf::int32 value) {
  graph_tower_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.GraphData.graph_tower)
}
inline void CMsgDOTARealtimeGameStats_GraphData::add_graph_tower(::google::protobuf::int32 value) {
  graph_tower_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.graph_tower)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData::graph_tower() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.graph_tower)
  return graph_tower_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_tower() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.graph_tower)
  return &graph_tower_;
}

// repeated int32 graph_rax = 5;
inline int CMsgDOTARealtimeGameStats_GraphData::graph_rax_size() const {
  return graph_rax_.size();
}
inline void CMsgDOTARealtimeGameStats_GraphData::clear_graph_rax() {
  graph_rax_.Clear();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData::graph_rax(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.graph_rax)
  return graph_rax_.Get(index);
}
inline void CMsgDOTARealtimeGameStats_GraphData::set_graph_rax(int index, ::google::protobuf::int32 value) {
  graph_rax_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.GraphData.graph_rax)
}
inline void CMsgDOTARealtimeGameStats_GraphData::add_graph_rax(::google::protobuf::int32 value) {
  graph_rax_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.graph_rax)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData::graph_rax() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.graph_rax)
  return graph_rax_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_rax() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.graph_rax)
  return &graph_rax_;
}

// repeated .CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
inline int CMsgDOTARealtimeGameStats_GraphData::team_loc_stats_size() const {
  return team_loc_stats_.size();
}
inline void CMsgDOTARealtimeGameStats_GraphData::clear_team_loc_stats() {
  team_loc_stats_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& CMsgDOTARealtimeGameStats_GraphData::team_loc_stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return team_loc_stats_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* CMsgDOTARealtimeGameStats_GraphData::mutable_team_loc_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return team_loc_stats_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* CMsgDOTARealtimeGameStats_GraphData::add_team_loc_stats() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return team_loc_stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats >&
CMsgDOTARealtimeGameStats_GraphData::team_loc_stats() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return team_loc_stats_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats >*
CMsgDOTARealtimeGameStats_GraphData::mutable_team_loc_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return &team_loc_stats_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats

// optional .CMsgDOTARealtimeGameStats.MatchDetails match = 1;
inline bool CMsgDOTARealtimeGameStats::has_match() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStats::set_has_match() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStats::clear_has_match() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStats::clear_match() {
  if (match_ != NULL) match_->::CMsgDOTARealtimeGameStats_MatchDetails::Clear();
  clear_has_match();
}
inline const ::CMsgDOTARealtimeGameStats_MatchDetails& CMsgDOTARealtimeGameStats::match() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.match)
  return match_ != NULL ? *match_ : *default_instance_->match_;
}
inline ::CMsgDOTARealtimeGameStats_MatchDetails* CMsgDOTARealtimeGameStats::mutable_match() {
  set_has_match();
  if (match_ == NULL) match_ = new ::CMsgDOTARealtimeGameStats_MatchDetails;
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.match)
  return match_;
}
inline ::CMsgDOTARealtimeGameStats_MatchDetails* CMsgDOTARealtimeGameStats::release_match() {
  clear_has_match();
  ::CMsgDOTARealtimeGameStats_MatchDetails* temp = match_;
  match_ = NULL;
  return temp;
}
inline void CMsgDOTARealtimeGameStats::set_allocated_match(::CMsgDOTARealtimeGameStats_MatchDetails* match) {
  delete match_;
  match_ = match;
  if (match) {
    set_has_match();
  } else {
    clear_has_match();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStats.match)
}

// repeated .CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
inline int CMsgDOTARealtimeGameStats::teams_size() const {
  return teams_.size();
}
inline void CMsgDOTARealtimeGameStats::clear_teams() {
  teams_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_TeamDetails& CMsgDOTARealtimeGameStats::teams(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.teams)
  return teams_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_TeamDetails* CMsgDOTARealtimeGameStats::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.teams)
  return teams_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_TeamDetails* CMsgDOTARealtimeGameStats::add_teams() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.teams)
  return teams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_TeamDetails >&
CMsgDOTARealtimeGameStats::teams() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.teams)
  return teams_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_TeamDetails >*
CMsgDOTARealtimeGameStats::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.teams)
  return &teams_;
}

// repeated .CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
inline int CMsgDOTARealtimeGameStats::buildings_size() const {
  return buildings_.size();
}
inline void CMsgDOTARealtimeGameStats::clear_buildings() {
  buildings_.Clear();
}
inline const ::CMsgDOTARealtimeGameStats_BuildingDetails& CMsgDOTARealtimeGameStats::buildings(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.buildings)
  return buildings_.Get(index);
}
inline ::CMsgDOTARealtimeGameStats_BuildingDetails* CMsgDOTARealtimeGameStats::mutable_buildings(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.buildings)
  return buildings_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStats_BuildingDetails* CMsgDOTARealtimeGameStats::add_buildings() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.buildings)
  return buildings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BuildingDetails >&
CMsgDOTARealtimeGameStats::buildings() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.buildings)
  return buildings_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BuildingDetails >*
CMsgDOTARealtimeGameStats::mutable_buildings() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.buildings)
  return &buildings_;
}

// optional .CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
inline bool CMsgDOTARealtimeGameStats::has_graph_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStats::set_has_graph_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARealtimeGameStats::clear_has_graph_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARealtimeGameStats::clear_graph_data() {
  if (graph_data_ != NULL) graph_data_->::CMsgDOTARealtimeGameStats_GraphData::Clear();
  clear_has_graph_data();
}
inline const ::CMsgDOTARealtimeGameStats_GraphData& CMsgDOTARealtimeGameStats::graph_data() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.graph_data)
  return graph_data_ != NULL ? *graph_data_ : *default_instance_->graph_data_;
}
inline ::CMsgDOTARealtimeGameStats_GraphData* CMsgDOTARealtimeGameStats::mutable_graph_data() {
  set_has_graph_data();
  if (graph_data_ == NULL) graph_data_ = new ::CMsgDOTARealtimeGameStats_GraphData;
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.graph_data)
  return graph_data_;
}
inline ::CMsgDOTARealtimeGameStats_GraphData* CMsgDOTARealtimeGameStats::release_graph_data() {
  clear_has_graph_data();
  ::CMsgDOTARealtimeGameStats_GraphData* temp = graph_data_;
  graph_data_ = NULL;
  return temp;
}
inline void CMsgDOTARealtimeGameStats::set_allocated_graph_data(::CMsgDOTARealtimeGameStats_GraphData* graph_data) {
  delete graph_data_;
  graph_data_ = graph_data;
  if (graph_data) {
    set_has_graph_data();
  } else {
    clear_has_graph_data();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStats.graph_data)
}

// optional bool delta_frame = 5;
inline bool CMsgDOTARealtimeGameStats::has_delta_frame() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStats::set_has_delta_frame() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTARealtimeGameStats::clear_has_delta_frame() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTARealtimeGameStats::clear_delta_frame() {
  delta_frame_ = false;
  clear_has_delta_frame();
}
inline bool CMsgDOTARealtimeGameStats::delta_frame() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.delta_frame)
  return delta_frame_;
}
inline void CMsgDOTARealtimeGameStats::set_delta_frame(bool value) {
  set_has_delta_frame();
  delta_frame_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.delta_frame)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse_TeamDetails

// optional uint32 team_number = 1;
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_has_team_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_has_team_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_number() {
  team_number_ = 0u;
  clear_has_team_number();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_number() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_number)
  return team_number_;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_number(::google::protobuf::uint32 value) {
  set_has_team_number();
  team_number_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_number)
}

// optional uint32 team_id = 2;
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_id)
  return team_id_;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_id)
}

// optional string team_name = 3;
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_has_team_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
  return *team_name_;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
}
inline ::std::string* CMsgDOTARealtimeGameStatsTerse_TeamDetails::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
  return team_name_;
}
inline ::std::string* CMsgDOTARealtimeGameStatsTerse_TeamDetails::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_allocated_team_name(::std::string* team_name) {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_;
  }
  if (team_name) {
    set_has_team_name();
    team_name_ = team_name;
  } else {
    clear_has_team_name();
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
}

// optional fixed64 team_logo = 4;
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_logo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_has_team_logo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_has_team_logo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_logo() {
  team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo();
}
inline ::google::protobuf::uint64 CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo)
  return team_logo_;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_logo(::google::protobuf::uint64 value) {
  set_has_team_logo();
  team_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo)
}

// optional uint32 score = 5;
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_TeamDetails::score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.TeamDetails.score)
  return score_;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.TeamDetails.score)
}

// repeated .CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
inline int CMsgDOTARealtimeGameStatsTerse_TeamDetails::players_size() const {
  return players_.size();
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_players() {
  players_.Clear();
}
inline const ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails& CMsgDOTARealtimeGameStatsTerse_TeamDetails::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return players_.Get(index);
}
inline ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails* CMsgDOTARealtimeGameStatsTerse_TeamDetails::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return players_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails* CMsgDOTARealtimeGameStatsTerse_TeamDetails::add_players() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails >&
CMsgDOTARealtimeGameStatsTerse_TeamDetails::players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails >*
CMsgDOTARealtimeGameStatsTerse_TeamDetails::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return &players_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse_PlayerDetails

// optional uint32 accountid = 1;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::accountid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.accountid)
  return accountid_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.accountid)
}

// optional uint32 playerid = 2;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::playerid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.playerid)
  return playerid_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.playerid)
}

// optional string name = 3;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgDOTARealtimeGameStatsTerse_PlayerDetails::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
  return *name_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
}
inline ::std::string* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
  return name_;
}
inline ::std::string* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
}

// optional uint32 team = 4;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_team() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_team() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_team() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_team() {
  team_ = 0u;
  clear_has_team();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.team)
  return team_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.team)
}

// optional uint32 heroid = 5;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_heroid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_heroid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::heroid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.heroid)
  return heroid_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.heroid)
}

// optional uint32 level = 6;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.level)
  return level_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.level)
}

// optional uint32 kill_count = 7;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_kill_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_kill_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_kill_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_kill_count() {
  kill_count_ = 0u;
  clear_has_kill_count();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kill_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.kill_count)
  return kill_count_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_kill_count(::google::protobuf::uint32 value) {
  set_has_kill_count();
  kill_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.kill_count)
}

// optional uint32 death_count = 8;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_death_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_death_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_death_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_death_count() {
  death_count_ = 0u;
  clear_has_death_count();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::death_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.death_count)
  return death_count_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_death_count(::google::protobuf::uint32 value) {
  set_has_death_count();
  death_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.death_count)
}

// optional uint32 assists_count = 9;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_assists_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_assists_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_assists_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_assists_count() {
  assists_count_ = 0u;
  clear_has_assists_count();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::assists_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.assists_count)
  return assists_count_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_assists_count(::google::protobuf::uint32 value) {
  set_has_assists_count();
  assists_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.assists_count)
}

// optional uint32 denies_count = 10;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_denies_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_denies_count() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_denies_count() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_denies_count() {
  denies_count_ = 0u;
  clear_has_denies_count();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::denies_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.denies_count)
  return denies_count_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_denies_count(::google::protobuf::uint32 value) {
  set_has_denies_count();
  denies_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.denies_count)
}

// optional uint32 lh_count = 11;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_lh_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_lh_count() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_lh_count() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_lh_count() {
  lh_count_ = 0u;
  clear_has_lh_count();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::lh_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.lh_count)
  return lh_count_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_lh_count(::google::protobuf::uint32 value) {
  set_has_lh_count();
  lh_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.lh_count)
}

// optional uint32 gold = 12;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_gold() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_gold() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_gold() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::gold() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.gold)
  return gold_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.gold)
}

// optional float x = 13;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_x() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_x() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_x() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float CMsgDOTARealtimeGameStatsTerse_PlayerDetails::x() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.x)
  return x_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.x)
}

// optional float y = 14;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_y() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_y() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_y() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float CMsgDOTARealtimeGameStatsTerse_PlayerDetails::y() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.y)
  return y_;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.y)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse_BuildingDetails

// optional uint32 team = 1;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_team() {
  team_ = 0u;
  clear_has_team();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_BuildingDetails::team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.team)
  return team_;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.team)
}

// optional float heading = 2;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_heading() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_heading() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_heading() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline float CMsgDOTARealtimeGameStatsTerse_BuildingDetails::heading() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.heading)
  return heading_;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_heading(float value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.heading)
}

// optional uint32 type = 3;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_BuildingDetails::type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.type)
  return type_;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.type)
}

// optional uint32 lane = 4;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_lane() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_lane() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_lane() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_lane() {
  lane_ = 0u;
  clear_has_lane();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_BuildingDetails::lane() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.lane)
  return lane_;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_lane(::google::protobuf::uint32 value) {
  set_has_lane();
  lane_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.lane)
}

// optional uint32 tier = 5;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_tier() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_tier() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_tier() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_tier() {
  tier_ = 0u;
  clear_has_tier();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_BuildingDetails::tier() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.tier)
  return tier_;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_tier(::google::protobuf::uint32 value) {
  set_has_tier();
  tier_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.tier)
}

// optional float x = 6;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float CMsgDOTARealtimeGameStatsTerse_BuildingDetails::x() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.x)
  return x_;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.x)
}

// optional float y = 7;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float CMsgDOTARealtimeGameStatsTerse_BuildingDetails::y() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.y)
  return y_;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.y)
}

// optional bool destroyed = 8;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_destroyed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_destroyed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_destroyed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_destroyed() {
  destroyed_ = false;
  clear_has_destroyed();
}
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::destroyed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.destroyed)
  return destroyed_;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_destroyed(bool value) {
  set_has_destroyed();
  destroyed_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.destroyed)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse_MatchDetails

// optional fixed64 server_steam_id = 1;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_server_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_has_server_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_has_server_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_server_steam_id() {
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steam_id();
}
inline ::google::protobuf::uint64 CMsgDOTARealtimeGameStatsTerse_MatchDetails::server_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.server_steam_id)
  return server_steam_id_;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_server_steam_id(::google::protobuf::uint64 value) {
  set_has_server_steam_id();
  server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.server_steam_id)
}

// optional uint64 matchid = 2;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_matchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_has_matchid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_matchid() {
  matchid_ = GOOGLE_ULONGLONG(0);
  clear_has_matchid();
}
inline ::google::protobuf::uint64 CMsgDOTARealtimeGameStatsTerse_MatchDetails::matchid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.matchid)
  return matchid_;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_matchid(::google::protobuf::uint64 value) {
  set_has_matchid();
  matchid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.matchid)
}

// optional uint32 timestamp = 3;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_MatchDetails::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.timestamp)
  return timestamp_;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.timestamp)
}

// optional int32 game_time = 4;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_game_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_has_game_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_game_time() {
  game_time_ = 0;
  clear_has_game_time();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStatsTerse_MatchDetails::game_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_time)
  return game_time_;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_game_time(::google::protobuf::int32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_time)
}

// repeated uint32 steam_broadcaster_account_ids = 6;
inline int CMsgDOTARealtimeGameStatsTerse_MatchDetails::steam_broadcaster_account_ids_size() const {
  return steam_broadcaster_account_ids_.size();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_steam_broadcaster_account_ids() {
  steam_broadcaster_account_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_MatchDetails::steam_broadcaster_account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
  return steam_broadcaster_account_ids_.Get(index);
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_steam_broadcaster_account_ids(int index, ::google::protobuf::uint32 value) {
  steam_broadcaster_account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::add_steam_broadcaster_account_ids(::google::protobuf::uint32 value) {
  steam_broadcaster_account_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTARealtimeGameStatsTerse_MatchDetails::steam_broadcaster_account_ids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
  return steam_broadcaster_account_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTARealtimeGameStatsTerse_MatchDetails::mutable_steam_broadcaster_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
  return &steam_broadcaster_account_ids_;
}

// optional uint32 game_mode = 7;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_game_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_has_game_mode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_MatchDetails::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_mode)
  return game_mode_;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_mode)
}

// optional uint32 league_id = 8;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_league_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_has_league_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_MatchDetails::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.league_id)
  return league_id_;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.league_id)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse_GraphData

// repeated int32 graph_gold = 1;
inline int CMsgDOTARealtimeGameStatsTerse_GraphData::graph_gold_size() const {
  return graph_gold_.size();
}
inline void CMsgDOTARealtimeGameStatsTerse_GraphData::clear_graph_gold() {
  graph_gold_.Clear();
}
inline ::google::protobuf::int32 CMsgDOTARealtimeGameStatsTerse_GraphData::graph_gold(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
  return graph_gold_.Get(index);
}
inline void CMsgDOTARealtimeGameStatsTerse_GraphData::set_graph_gold(int index, ::google::protobuf::int32 value) {
  graph_gold_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
}
inline void CMsgDOTARealtimeGameStatsTerse_GraphData::add_graph_gold(::google::protobuf::int32 value) {
  graph_gold_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStatsTerse_GraphData::graph_gold() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
  return graph_gold_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStatsTerse_GraphData::mutable_graph_gold() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
  return &graph_gold_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse

// optional .CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
inline bool CMsgDOTARealtimeGameStatsTerse::has_match() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse::set_has_match() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARealtimeGameStatsTerse::clear_has_match() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARealtimeGameStatsTerse::clear_match() {
  if (match_ != NULL) match_->::CMsgDOTARealtimeGameStatsTerse_MatchDetails::Clear();
  clear_has_match();
}
inline const ::CMsgDOTARealtimeGameStatsTerse_MatchDetails& CMsgDOTARealtimeGameStatsTerse::match() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.match)
  return match_ != NULL ? *match_ : *default_instance_->match_;
}
inline ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* CMsgDOTARealtimeGameStatsTerse::mutable_match() {
  set_has_match();
  if (match_ == NULL) match_ = new ::CMsgDOTARealtimeGameStatsTerse_MatchDetails;
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.match)
  return match_;
}
inline ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* CMsgDOTARealtimeGameStatsTerse::release_match() {
  clear_has_match();
  ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* temp = match_;
  match_ = NULL;
  return temp;
}
inline void CMsgDOTARealtimeGameStatsTerse::set_allocated_match(::CMsgDOTARealtimeGameStatsTerse_MatchDetails* match) {
  delete match_;
  match_ = match;
  if (match) {
    set_has_match();
  } else {
    clear_has_match();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStatsTerse.match)
}

// repeated .CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
inline int CMsgDOTARealtimeGameStatsTerse::teams_size() const {
  return teams_.size();
}
inline void CMsgDOTARealtimeGameStatsTerse::clear_teams() {
  teams_.Clear();
}
inline const ::CMsgDOTARealtimeGameStatsTerse_TeamDetails& CMsgDOTARealtimeGameStatsTerse::teams(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.teams)
  return teams_.Get(index);
}
inline ::CMsgDOTARealtimeGameStatsTerse_TeamDetails* CMsgDOTARealtimeGameStatsTerse::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.teams)
  return teams_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStatsTerse_TeamDetails* CMsgDOTARealtimeGameStatsTerse::add_teams() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStatsTerse.teams)
  return teams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_TeamDetails >&
CMsgDOTARealtimeGameStatsTerse::teams() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStatsTerse.teams)
  return teams_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_TeamDetails >*
CMsgDOTARealtimeGameStatsTerse::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStatsTerse.teams)
  return &teams_;
}

// repeated .CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
inline int CMsgDOTARealtimeGameStatsTerse::buildings_size() const {
  return buildings_.size();
}
inline void CMsgDOTARealtimeGameStatsTerse::clear_buildings() {
  buildings_.Clear();
}
inline const ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails& CMsgDOTARealtimeGameStatsTerse::buildings(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.buildings)
  return buildings_.Get(index);
}
inline ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails* CMsgDOTARealtimeGameStatsTerse::mutable_buildings(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.buildings)
  return buildings_.Mutable(index);
}
inline ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails* CMsgDOTARealtimeGameStatsTerse::add_buildings() {
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStatsTerse.buildings)
  return buildings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails >&
CMsgDOTARealtimeGameStatsTerse::buildings() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStatsTerse.buildings)
  return buildings_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails >*
CMsgDOTARealtimeGameStatsTerse::mutable_buildings() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStatsTerse.buildings)
  return &buildings_;
}

// optional .CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
inline bool CMsgDOTARealtimeGameStatsTerse::has_graph_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse::set_has_graph_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARealtimeGameStatsTerse::clear_has_graph_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARealtimeGameStatsTerse::clear_graph_data() {
  if (graph_data_ != NULL) graph_data_->::CMsgDOTARealtimeGameStatsTerse_GraphData::Clear();
  clear_has_graph_data();
}
inline const ::CMsgDOTARealtimeGameStatsTerse_GraphData& CMsgDOTARealtimeGameStatsTerse::graph_data() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.graph_data)
  return graph_data_ != NULL ? *graph_data_ : *default_instance_->graph_data_;
}
inline ::CMsgDOTARealtimeGameStatsTerse_GraphData* CMsgDOTARealtimeGameStatsTerse::mutable_graph_data() {
  set_has_graph_data();
  if (graph_data_ == NULL) graph_data_ = new ::CMsgDOTARealtimeGameStatsTerse_GraphData;
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.graph_data)
  return graph_data_;
}
inline ::CMsgDOTARealtimeGameStatsTerse_GraphData* CMsgDOTARealtimeGameStatsTerse::release_graph_data() {
  clear_has_graph_data();
  ::CMsgDOTARealtimeGameStatsTerse_GraphData* temp = graph_data_;
  graph_data_ = NULL;
  return temp;
}
inline void CMsgDOTARealtimeGameStatsTerse::set_allocated_graph_data(::CMsgDOTARealtimeGameStatsTerse_GraphData* graph_data) {
  delete graph_data_;
  graph_data_ = graph_data;
  if (graph_data) {
    set_has_graph_data();
  } else {
    clear_has_graph_data();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStatsTerse.graph_data)
}

// optional bool delta_frame = 5;
inline bool CMsgDOTARealtimeGameStatsTerse::has_delta_frame() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARealtimeGameStatsTerse::set_has_delta_frame() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTARealtimeGameStatsTerse::clear_has_delta_frame() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTARealtimeGameStatsTerse::clear_delta_frame() {
  delta_frame_ = false;
  clear_has_delta_frame();
}
inline bool CMsgDOTARealtimeGameStatsTerse::delta_frame() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.delta_frame)
  return delta_frame_;
}
inline void CMsgDOTARealtimeGameStatsTerse::set_delta_frame(bool value) {
  set_has_delta_frame();
  delta_frame_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.delta_frame)
}

// -------------------------------------------------------------------

// CMsgGCToClientMatchGroupsVersion

// optional uint32 matchgroups_version = 1;
inline bool CMsgGCToClientMatchGroupsVersion::has_matchgroups_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToClientMatchGroupsVersion::set_has_matchgroups_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToClientMatchGroupsVersion::clear_has_matchgroups_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToClientMatchGroupsVersion::clear_matchgroups_version() {
  matchgroups_version_ = 0u;
  clear_has_matchgroups_version();
}
inline ::google::protobuf::uint32 CMsgGCToClientMatchGroupsVersion::matchgroups_version() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientMatchGroupsVersion.matchgroups_version)
  return matchgroups_version_;
}
inline void CMsgGCToClientMatchGroupsVersion::set_matchgroups_version(::google::protobuf::uint32 value) {
  set_has_matchgroups_version();
  matchgroups_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToClientMatchGroupsVersion.matchgroups_version)
}

// -------------------------------------------------------------------

// CMsgDOTASDOHeroStatsHistory

// optional uint64 match_id = 1;
inline bool CMsgDOTASDOHeroStatsHistory::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTASDOHeroStatsHistory::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
inline ::google::protobuf::uint64 CMsgDOTASDOHeroStatsHistory::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASDOHeroStatsHistory.match_id)
  return match_id_;
}
inline void CMsgDOTASDOHeroStatsHistory::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASDOHeroStatsHistory.match_id)
}

// optional uint32 game_mode = 2;
inline bool CMsgDOTASDOHeroStatsHistory::has_game_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTASDOHeroStatsHistory::set_has_game_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
inline ::google::protobuf::uint32 CMsgDOTASDOHeroStatsHistory::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASDOHeroStatsHistory.game_mode)
  return game_mode_;
}
inline void CMsgDOTASDOHeroStatsHistory::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASDOHeroStatsHistory.game_mode)
}

// optional uint32 lobby_type = 3;
inline bool CMsgDOTASDOHeroStatsHistory::has_lobby_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTASDOHeroStatsHistory::set_has_lobby_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_has_lobby_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_lobby_type() {
  lobby_type_ = 0u;
  clear_has_lobby_type();
}
inline ::google::protobuf::uint32 CMsgDOTASDOHeroStatsHistory::lobby_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASDOHeroStatsHistory.lobby_type)
  return lobby_type_;
}
inline void CMsgDOTASDOHeroStatsHistory::set_lobby_type(::google::protobuf::uint32 value) {
  set_has_lobby_type();
  lobby_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASDOHeroStatsHistory.lobby_type)
}

// optional uint32 start_time = 4;
inline bool CMsgDOTASDOHeroStatsHistory::has_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTASDOHeroStatsHistory::set_has_start_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
inline ::google::protobuf::uint32 CMsgDOTASDOHeroStatsHistory::start_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASDOHeroStatsHistory.start_time)
  return start_time_;
}
inline void CMsgDOTASDOHeroStatsHistory::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASDOHeroStatsHistory.start_time)
}

// optional bool won = 5;
inline bool CMsgDOTASDOHeroStatsHistory::has_won() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTASDOHeroStatsHistory::set_has_won() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_has_won() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_won() {
  won_ = false;
  clear_has_won();
}
inline bool CMsgDOTASDOHeroStatsHistory::won() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASDOHeroStatsHistory.won)
  return won_;
}
inline void CMsgDOTASDOHeroStatsHistory::set_won(bool value) {
  set_has_won();
  won_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASDOHeroStatsHistory.won)
}

// optional uint32 gpm = 6;
inline bool CMsgDOTASDOHeroStatsHistory::has_gpm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTASDOHeroStatsHistory::set_has_gpm() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_has_gpm() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_gpm() {
  gpm_ = 0u;
  clear_has_gpm();
}
inline ::google::protobuf::uint32 CMsgDOTASDOHeroStatsHistory::gpm() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASDOHeroStatsHistory.gpm)
  return gpm_;
}
inline void CMsgDOTASDOHeroStatsHistory::set_gpm(::google::protobuf::uint32 value) {
  set_has_gpm();
  gpm_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASDOHeroStatsHistory.gpm)
}

// optional uint32 xpm = 7;
inline bool CMsgDOTASDOHeroStatsHistory::has_xpm() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTASDOHeroStatsHistory::set_has_xpm() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_has_xpm() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_xpm() {
  xpm_ = 0u;
  clear_has_xpm();
}
inline ::google::protobuf::uint32 CMsgDOTASDOHeroStatsHistory::xpm() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASDOHeroStatsHistory.xpm)
  return xpm_;
}
inline void CMsgDOTASDOHeroStatsHistory::set_xpm(::google::protobuf::uint32 value) {
  set_has_xpm();
  xpm_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASDOHeroStatsHistory.xpm)
}

// optional uint32 kills = 8;
inline bool CMsgDOTASDOHeroStatsHistory::has_kills() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTASDOHeroStatsHistory::set_has_kills() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_has_kills() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
inline ::google::protobuf::uint32 CMsgDOTASDOHeroStatsHistory::kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASDOHeroStatsHistory.kills)
  return kills_;
}
inline void CMsgDOTASDOHeroStatsHistory::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASDOHeroStatsHistory.kills)
}

// optional uint32 deaths = 9;
inline bool CMsgDOTASDOHeroStatsHistory::has_deaths() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTASDOHeroStatsHistory::set_has_deaths() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_deaths() {
  deaths_ = 0u;
  clear_has_deaths();
}
inline ::google::protobuf::uint32 CMsgDOTASDOHeroStatsHistory::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASDOHeroStatsHistory.deaths)
  return deaths_;
}
inline void CMsgDOTASDOHeroStatsHistory::set_deaths(::google::protobuf::uint32 value) {
  set_has_deaths();
  deaths_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASDOHeroStatsHistory.deaths)
}

// optional uint32 assists = 10;
inline bool CMsgDOTASDOHeroStatsHistory::has_assists() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTASDOHeroStatsHistory::set_has_assists() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_has_assists() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTASDOHeroStatsHistory::clear_assists() {
  assists_ = 0u;
  clear_has_assists();
}
inline ::google::protobuf::uint32 CMsgDOTASDOHeroStatsHistory::assists() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASDOHeroStatsHistory.assists)
  return assists_;
}
inline void CMsgDOTASDOHeroStatsHistory::set_assists(::google::protobuf::uint32 value) {
  set_has_assists();
  assists_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASDOHeroStatsHistory.assists)
}

// -------------------------------------------------------------------

// CMsgDOTASeasonRewards_Reward

// optional string name = 1;
inline bool CMsgDOTASeasonRewards_Reward::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTASeasonRewards_Reward::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTASeasonRewards_Reward::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTASeasonRewards_Reward::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgDOTASeasonRewards_Reward::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonRewards.Reward.name)
  return *name_;
}
inline void CMsgDOTASeasonRewards_Reward::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonRewards.Reward.name)
}
inline void CMsgDOTASeasonRewards_Reward::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTASeasonRewards.Reward.name)
}
inline void CMsgDOTASeasonRewards_Reward::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTASeasonRewards.Reward.name)
}
inline ::std::string* CMsgDOTASeasonRewards_Reward::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonRewards.Reward.name)
  return name_;
}
inline ::std::string* CMsgDOTASeasonRewards_Reward::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTASeasonRewards_Reward::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTASeasonRewards.Reward.name)
}

// optional uint32 itemdef = 2;
inline bool CMsgDOTASeasonRewards_Reward::has_itemdef() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTASeasonRewards_Reward::set_has_itemdef() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTASeasonRewards_Reward::clear_has_itemdef() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTASeasonRewards_Reward::clear_itemdef() {
  itemdef_ = 0u;
  clear_has_itemdef();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonRewards_Reward::itemdef() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonRewards.Reward.itemdef)
  return itemdef_;
}
inline void CMsgDOTASeasonRewards_Reward::set_itemdef(::google::protobuf::uint32 value) {
  set_has_itemdef();
  itemdef_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonRewards.Reward.itemdef)
}

// optional uint32 importance = 3;
inline bool CMsgDOTASeasonRewards_Reward::has_importance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTASeasonRewards_Reward::set_has_importance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTASeasonRewards_Reward::clear_has_importance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTASeasonRewards_Reward::clear_importance() {
  importance_ = 0u;
  clear_has_importance();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonRewards_Reward::importance() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonRewards.Reward.importance)
  return importance_;
}
inline void CMsgDOTASeasonRewards_Reward::set_importance(::google::protobuf::uint32 value) {
  set_has_importance();
  importance_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonRewards.Reward.importance)
}

// optional uint32 base_level = 4;
inline bool CMsgDOTASeasonRewards_Reward::has_base_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTASeasonRewards_Reward::set_has_base_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTASeasonRewards_Reward::clear_has_base_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTASeasonRewards_Reward::clear_base_level() {
  base_level_ = 0u;
  clear_has_base_level();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonRewards_Reward::base_level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonRewards.Reward.base_level)
  return base_level_;
}
inline void CMsgDOTASeasonRewards_Reward::set_base_level(::google::protobuf::uint32 value) {
  set_has_base_level();
  base_level_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonRewards.Reward.base_level)
}

// optional uint32 repeat_level = 5;
inline bool CMsgDOTASeasonRewards_Reward::has_repeat_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTASeasonRewards_Reward::set_has_repeat_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTASeasonRewards_Reward::clear_has_repeat_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTASeasonRewards_Reward::clear_repeat_level() {
  repeat_level_ = 0u;
  clear_has_repeat_level();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonRewards_Reward::repeat_level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonRewards.Reward.repeat_level)
  return repeat_level_;
}
inline void CMsgDOTASeasonRewards_Reward::set_repeat_level(::google::protobuf::uint32 value) {
  set_has_repeat_level();
  repeat_level_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonRewards.Reward.repeat_level)
}

// optional .CMsgDOTASeasonRewards.ERewardType reward_type = 6 [default = EconItem];
inline bool CMsgDOTASeasonRewards_Reward::has_reward_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTASeasonRewards_Reward::set_has_reward_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTASeasonRewards_Reward::clear_has_reward_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTASeasonRewards_Reward::clear_reward_type() {
  reward_type_ = 0;
  clear_has_reward_type();
}
inline ::CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards_Reward::reward_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonRewards.Reward.reward_type)
  return static_cast< ::CMsgDOTASeasonRewards_ERewardType >(reward_type_);
}
inline void CMsgDOTASeasonRewards_Reward::set_reward_type(::CMsgDOTASeasonRewards_ERewardType value) {
  assert(::CMsgDOTASeasonRewards_ERewardType_IsValid(value));
  set_has_reward_type();
  reward_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonRewards.Reward.reward_type)
}

// optional string image = 7;
inline bool CMsgDOTASeasonRewards_Reward::has_image() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTASeasonRewards_Reward::set_has_image() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTASeasonRewards_Reward::clear_has_image() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTASeasonRewards_Reward::clear_image() {
  if (image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_->clear();
  }
  clear_has_image();
}
inline const ::std::string& CMsgDOTASeasonRewards_Reward::image() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonRewards.Reward.image)
  return *image_;
}
inline void CMsgDOTASeasonRewards_Reward::set_image(const ::std::string& value) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_ = new ::std::string;
  }
  image_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonRewards.Reward.image)
}
inline void CMsgDOTASeasonRewards_Reward::set_image(const char* value) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_ = new ::std::string;
  }
  image_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTASeasonRewards.Reward.image)
}
inline void CMsgDOTASeasonRewards_Reward::set_image(const char* value, size_t size) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_ = new ::std::string;
  }
  image_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTASeasonRewards.Reward.image)
}
inline ::std::string* CMsgDOTASeasonRewards_Reward::mutable_image() {
  set_has_image();
  if (image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonRewards.Reward.image)
  return image_;
}
inline ::std::string* CMsgDOTASeasonRewards_Reward::release_image() {
  clear_has_image();
  if (image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_;
    image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTASeasonRewards_Reward::set_allocated_image(::std::string* image) {
  if (image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_;
  }
  if (image) {
    set_has_image();
    image_ = image;
  } else {
    clear_has_image();
    image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTASeasonRewards.Reward.image)
}

// optional uint32 action_id = 8;
inline bool CMsgDOTASeasonRewards_Reward::has_action_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTASeasonRewards_Reward::set_has_action_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTASeasonRewards_Reward::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTASeasonRewards_Reward::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonRewards_Reward::action_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonRewards.Reward.action_id)
  return action_id_;
}
inline void CMsgDOTASeasonRewards_Reward::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonRewards.Reward.action_id)
}

// optional uint32 effect_index = 9;
inline bool CMsgDOTASeasonRewards_Reward::has_effect_index() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTASeasonRewards_Reward::set_has_effect_index() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTASeasonRewards_Reward::clear_has_effect_index() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTASeasonRewards_Reward::clear_effect_index() {
  effect_index_ = 0u;
  clear_has_effect_index();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonRewards_Reward::effect_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonRewards.Reward.effect_index)
  return effect_index_;
}
inline void CMsgDOTASeasonRewards_Reward::set_effect_index(::google::protobuf::uint32 value) {
  set_has_effect_index();
  effect_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonRewards.Reward.effect_index)
}

// -------------------------------------------------------------------

// CMsgDOTASeasonRewards

// repeated .CMsgDOTASeasonRewards.Reward rewards = 1;
inline int CMsgDOTASeasonRewards::rewards_size() const {
  return rewards_.size();
}
inline void CMsgDOTASeasonRewards::clear_rewards() {
  rewards_.Clear();
}
inline const ::CMsgDOTASeasonRewards_Reward& CMsgDOTASeasonRewards::rewards(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonRewards.rewards)
  return rewards_.Get(index);
}
inline ::CMsgDOTASeasonRewards_Reward* CMsgDOTASeasonRewards::mutable_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonRewards.rewards)
  return rewards_.Mutable(index);
}
inline ::CMsgDOTASeasonRewards_Reward* CMsgDOTASeasonRewards::add_rewards() {
  // @@protoc_insertion_point(field_add:CMsgDOTASeasonRewards.rewards)
  return rewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonRewards_Reward >&
CMsgDOTASeasonRewards::rewards() const {
  // @@protoc_insertion_point(field_list:CMsgDOTASeasonRewards.rewards)
  return rewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonRewards_Reward >*
CMsgDOTASeasonRewards::mutable_rewards() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTASeasonRewards.rewards)
  return &rewards_;
}

// -------------------------------------------------------------------

// CMsgDOTASeasonAchievements_Achievement

// optional string name = 1;
inline bool CMsgDOTASeasonAchievements_Achievement::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTASeasonAchievements_Achievement::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTASeasonAchievements_Achievement::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTASeasonAchievements_Achievement::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgDOTASeasonAchievements_Achievement::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonAchievements.Achievement.name)
  return *name_;
}
inline void CMsgDOTASeasonAchievements_Achievement::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonAchievements.Achievement.name)
}
inline void CMsgDOTASeasonAchievements_Achievement::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTASeasonAchievements.Achievement.name)
}
inline void CMsgDOTASeasonAchievements_Achievement::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTASeasonAchievements.Achievement.name)
}
inline ::std::string* CMsgDOTASeasonAchievements_Achievement::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonAchievements.Achievement.name)
  return name_;
}
inline ::std::string* CMsgDOTASeasonAchievements_Achievement::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTASeasonAchievements_Achievement::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTASeasonAchievements.Achievement.name)
}

// optional string description = 2;
inline bool CMsgDOTASeasonAchievements_Achievement::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTASeasonAchievements_Achievement::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTASeasonAchievements_Achievement::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTASeasonAchievements_Achievement::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& CMsgDOTASeasonAchievements_Achievement::description() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonAchievements.Achievement.description)
  return *description_;
}
inline void CMsgDOTASeasonAchievements_Achievement::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonAchievements.Achievement.description)
}
inline void CMsgDOTASeasonAchievements_Achievement::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTASeasonAchievements.Achievement.description)
}
inline void CMsgDOTASeasonAchievements_Achievement::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTASeasonAchievements.Achievement.description)
}
inline ::std::string* CMsgDOTASeasonAchievements_Achievement::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonAchievements.Achievement.description)
  return description_;
}
inline ::std::string* CMsgDOTASeasonAchievements_Achievement::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTASeasonAchievements_Achievement::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTASeasonAchievements.Achievement.description)
}

// optional string image = 3;
inline bool CMsgDOTASeasonAchievements_Achievement::has_image() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTASeasonAchievements_Achievement::set_has_image() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTASeasonAchievements_Achievement::clear_has_image() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTASeasonAchievements_Achievement::clear_image() {
  if (image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_->clear();
  }
  clear_has_image();
}
inline const ::std::string& CMsgDOTASeasonAchievements_Achievement::image() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonAchievements.Achievement.image)
  return *image_;
}
inline void CMsgDOTASeasonAchievements_Achievement::set_image(const ::std::string& value) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_ = new ::std::string;
  }
  image_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonAchievements.Achievement.image)
}
inline void CMsgDOTASeasonAchievements_Achievement::set_image(const char* value) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_ = new ::std::string;
  }
  image_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTASeasonAchievements.Achievement.image)
}
inline void CMsgDOTASeasonAchievements_Achievement::set_image(const char* value, size_t size) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_ = new ::std::string;
  }
  image_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTASeasonAchievements.Achievement.image)
}
inline ::std::string* CMsgDOTASeasonAchievements_Achievement::mutable_image() {
  set_has_image();
  if (image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonAchievements.Achievement.image)
  return image_;
}
inline ::std::string* CMsgDOTASeasonAchievements_Achievement::release_image() {
  clear_has_image();
  if (image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_;
    image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTASeasonAchievements_Achievement::set_allocated_image(::std::string* image) {
  if (image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_;
  }
  if (image) {
    set_has_image();
    image_ = image;
  } else {
    clear_has_image();
    image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTASeasonAchievements.Achievement.image)
}

// optional uint32 action_id = 4;
inline bool CMsgDOTASeasonAchievements_Achievement::has_action_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTASeasonAchievements_Achievement::set_has_action_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTASeasonAchievements_Achievement::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTASeasonAchievements_Achievement::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonAchievements_Achievement::action_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonAchievements.Achievement.action_id)
  return action_id_;
}
inline void CMsgDOTASeasonAchievements_Achievement::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonAchievements.Achievement.action_id)
}

// optional uint32 max_grants = 5;
inline bool CMsgDOTASeasonAchievements_Achievement::has_max_grants() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTASeasonAchievements_Achievement::set_has_max_grants() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTASeasonAchievements_Achievement::clear_has_max_grants() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTASeasonAchievements_Achievement::clear_max_grants() {
  max_grants_ = 0u;
  clear_has_max_grants();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonAchievements_Achievement::max_grants() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonAchievements.Achievement.max_grants)
  return max_grants_;
}
inline void CMsgDOTASeasonAchievements_Achievement::set_max_grants(::google::protobuf::uint32 value) {
  set_has_max_grants();
  max_grants_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonAchievements.Achievement.max_grants)
}

// optional uint32 normal_points = 6;
inline bool CMsgDOTASeasonAchievements_Achievement::has_normal_points() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTASeasonAchievements_Achievement::set_has_normal_points() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTASeasonAchievements_Achievement::clear_has_normal_points() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTASeasonAchievements_Achievement::clear_normal_points() {
  normal_points_ = 0u;
  clear_has_normal_points();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonAchievements_Achievement::normal_points() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonAchievements.Achievement.normal_points)
  return normal_points_;
}
inline void CMsgDOTASeasonAchievements_Achievement::set_normal_points(::google::protobuf::uint32 value) {
  set_has_normal_points();
  normal_points_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonAchievements.Achievement.normal_points)
}

// optional uint32 tracking_achievement = 7;
inline bool CMsgDOTASeasonAchievements_Achievement::has_tracking_achievement() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTASeasonAchievements_Achievement::set_has_tracking_achievement() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTASeasonAchievements_Achievement::clear_has_tracking_achievement() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTASeasonAchievements_Achievement::clear_tracking_achievement() {
  tracking_achievement_ = 0u;
  clear_has_tracking_achievement();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonAchievements_Achievement::tracking_achievement() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonAchievements.Achievement.tracking_achievement)
  return tracking_achievement_;
}
inline void CMsgDOTASeasonAchievements_Achievement::set_tracking_achievement(::google::protobuf::uint32 value) {
  set_has_tracking_achievement();
  tracking_achievement_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonAchievements.Achievement.tracking_achievement)
}

// optional uint32 achievement_goal = 8;
inline bool CMsgDOTASeasonAchievements_Achievement::has_achievement_goal() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTASeasonAchievements_Achievement::set_has_achievement_goal() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTASeasonAchievements_Achievement::clear_has_achievement_goal() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTASeasonAchievements_Achievement::clear_achievement_goal() {
  achievement_goal_ = 0u;
  clear_has_achievement_goal();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonAchievements_Achievement::achievement_goal() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonAchievements.Achievement.achievement_goal)
  return achievement_goal_;
}
inline void CMsgDOTASeasonAchievements_Achievement::set_achievement_goal(::google::protobuf::uint32 value) {
  set_has_achievement_goal();
  achievement_goal_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonAchievements.Achievement.achievement_goal)
}

// optional uint32 achievement_level = 9;
inline bool CMsgDOTASeasonAchievements_Achievement::has_achievement_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTASeasonAchievements_Achievement::set_has_achievement_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTASeasonAchievements_Achievement::clear_has_achievement_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTASeasonAchievements_Achievement::clear_achievement_level() {
  achievement_level_ = 0u;
  clear_has_achievement_level();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonAchievements_Achievement::achievement_level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonAchievements.Achievement.achievement_level)
  return achievement_level_;
}
inline void CMsgDOTASeasonAchievements_Achievement::set_achievement_level(::google::protobuf::uint32 value) {
  set_has_achievement_level();
  achievement_level_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonAchievements.Achievement.achievement_level)
}

// -------------------------------------------------------------------

// CMsgDOTASeasonAchievements

// repeated .CMsgDOTASeasonAchievements.Achievement achievements = 1;
inline int CMsgDOTASeasonAchievements::achievements_size() const {
  return achievements_.size();
}
inline void CMsgDOTASeasonAchievements::clear_achievements() {
  achievements_.Clear();
}
inline const ::CMsgDOTASeasonAchievements_Achievement& CMsgDOTASeasonAchievements::achievements(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonAchievements.achievements)
  return achievements_.Get(index);
}
inline ::CMsgDOTASeasonAchievements_Achievement* CMsgDOTASeasonAchievements::mutable_achievements(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonAchievements.achievements)
  return achievements_.Mutable(index);
}
inline ::CMsgDOTASeasonAchievements_Achievement* CMsgDOTASeasonAchievements::add_achievements() {
  // @@protoc_insertion_point(field_add:CMsgDOTASeasonAchievements.achievements)
  return achievements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonAchievements_Achievement >&
CMsgDOTASeasonAchievements::achievements() const {
  // @@protoc_insertion_point(field_list:CMsgDOTASeasonAchievements.achievements)
  return achievements_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonAchievements_Achievement >*
CMsgDOTASeasonAchievements::mutable_achievements() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTASeasonAchievements.achievements)
  return &achievements_;
}

// -------------------------------------------------------------------

// CMsgDOTASeasonPredictions_Choice

// optional uint32 value = 1;
inline bool CMsgDOTASeasonPredictions_Choice::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTASeasonPredictions_Choice::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTASeasonPredictions_Choice::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTASeasonPredictions_Choice::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_Choice::value() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Choice.value)
  return value_;
}
inline void CMsgDOTASeasonPredictions_Choice::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Choice.value)
}

// optional string name = 2;
inline bool CMsgDOTASeasonPredictions_Choice::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTASeasonPredictions_Choice::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTASeasonPredictions_Choice::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTASeasonPredictions_Choice::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgDOTASeasonPredictions_Choice::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Choice.name)
  return *name_;
}
inline void CMsgDOTASeasonPredictions_Choice::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Choice.name)
}
inline void CMsgDOTASeasonPredictions_Choice::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTASeasonPredictions.Choice.name)
}
inline void CMsgDOTASeasonPredictions_Choice::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTASeasonPredictions.Choice.name)
}
inline ::std::string* CMsgDOTASeasonPredictions_Choice::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonPredictions.Choice.name)
  return name_;
}
inline ::std::string* CMsgDOTASeasonPredictions_Choice::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTASeasonPredictions_Choice::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTASeasonPredictions.Choice.name)
}

// optional uint32 min_raw_value = 3;
inline bool CMsgDOTASeasonPredictions_Choice::has_min_raw_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTASeasonPredictions_Choice::set_has_min_raw_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTASeasonPredictions_Choice::clear_has_min_raw_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTASeasonPredictions_Choice::clear_min_raw_value() {
  min_raw_value_ = 0u;
  clear_has_min_raw_value();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_Choice::min_raw_value() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Choice.min_raw_value)
  return min_raw_value_;
}
inline void CMsgDOTASeasonPredictions_Choice::set_min_raw_value(::google::protobuf::uint32 value) {
  set_has_min_raw_value();
  min_raw_value_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Choice.min_raw_value)
}

// optional uint32 max_raw_value = 4;
inline bool CMsgDOTASeasonPredictions_Choice::has_max_raw_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTASeasonPredictions_Choice::set_has_max_raw_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTASeasonPredictions_Choice::clear_has_max_raw_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTASeasonPredictions_Choice::clear_max_raw_value() {
  max_raw_value_ = 0u;
  clear_has_max_raw_value();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_Choice::max_raw_value() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Choice.max_raw_value)
  return max_raw_value_;
}
inline void CMsgDOTASeasonPredictions_Choice::set_max_raw_value(::google::protobuf::uint32 value) {
  set_has_max_raw_value();
  max_raw_value_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Choice.max_raw_value)
}

// -------------------------------------------------------------------

// CMsgDOTASeasonPredictions_Answers

// optional uint32 answer_id = 1;
inline bool CMsgDOTASeasonPredictions_Answers::has_answer_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTASeasonPredictions_Answers::set_has_answer_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTASeasonPredictions_Answers::clear_has_answer_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTASeasonPredictions_Answers::clear_answer_id() {
  answer_id_ = 0u;
  clear_has_answer_id();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_Answers::answer_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Answers.answer_id)
  return answer_id_;
}
inline void CMsgDOTASeasonPredictions_Answers::set_answer_id(::google::protobuf::uint32 value) {
  set_has_answer_id();
  answer_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Answers.answer_id)
}

// -------------------------------------------------------------------

// CMsgDOTASeasonPredictions_QueryKeyValues

// optional string name = 1;
inline bool CMsgDOTASeasonPredictions_QueryKeyValues::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTASeasonPredictions_QueryKeyValues::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTASeasonPredictions_QueryKeyValues::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTASeasonPredictions_QueryKeyValues::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgDOTASeasonPredictions_QueryKeyValues::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.QueryKeyValues.name)
  return *name_;
}
inline void CMsgDOTASeasonPredictions_QueryKeyValues::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.QueryKeyValues.name)
}
inline void CMsgDOTASeasonPredictions_QueryKeyValues::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTASeasonPredictions.QueryKeyValues.name)
}
inline void CMsgDOTASeasonPredictions_QueryKeyValues::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTASeasonPredictions.QueryKeyValues.name)
}
inline ::std::string* CMsgDOTASeasonPredictions_QueryKeyValues::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonPredictions.QueryKeyValues.name)
  return name_;
}
inline ::std::string* CMsgDOTASeasonPredictions_QueryKeyValues::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTASeasonPredictions_QueryKeyValues::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTASeasonPredictions.QueryKeyValues.name)
}

// optional string value = 2;
inline bool CMsgDOTASeasonPredictions_QueryKeyValues::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTASeasonPredictions_QueryKeyValues::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTASeasonPredictions_QueryKeyValues::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTASeasonPredictions_QueryKeyValues::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& CMsgDOTASeasonPredictions_QueryKeyValues::value() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.QueryKeyValues.value)
  return *value_;
}
inline void CMsgDOTASeasonPredictions_QueryKeyValues::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.QueryKeyValues.value)
}
inline void CMsgDOTASeasonPredictions_QueryKeyValues::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTASeasonPredictions.QueryKeyValues.value)
}
inline void CMsgDOTASeasonPredictions_QueryKeyValues::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTASeasonPredictions.QueryKeyValues.value)
}
inline ::std::string* CMsgDOTASeasonPredictions_QueryKeyValues::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonPredictions.QueryKeyValues.value)
  return value_;
}
inline ::std::string* CMsgDOTASeasonPredictions_QueryKeyValues::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTASeasonPredictions_QueryKeyValues::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTASeasonPredictions.QueryKeyValues.value)
}

// -------------------------------------------------------------------

// CMsgDOTASeasonPredictions_Prediction

// optional .CMsgDOTASeasonPredictions.ePredictionType type = 1 [default = Generic];
inline bool CMsgDOTASeasonPredictions_Prediction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions_Prediction::type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.type)
  return static_cast< ::CMsgDOTASeasonPredictions_ePredictionType >(type_);
}
inline void CMsgDOTASeasonPredictions_Prediction::set_type(::CMsgDOTASeasonPredictions_ePredictionType value) {
  assert(::CMsgDOTASeasonPredictions_ePredictionType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.type)
}

// optional string question = 2;
inline bool CMsgDOTASeasonPredictions_Prediction::has_question() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_has_question() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_has_question() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_question() {
  if (question_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    question_->clear();
  }
  clear_has_question();
}
inline const ::std::string& CMsgDOTASeasonPredictions_Prediction::question() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.question)
  return *question_;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_question(const ::std::string& value) {
  set_has_question();
  if (question_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    question_ = new ::std::string;
  }
  question_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.question)
}
inline void CMsgDOTASeasonPredictions_Prediction::set_question(const char* value) {
  set_has_question();
  if (question_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    question_ = new ::std::string;
  }
  question_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTASeasonPredictions.Prediction.question)
}
inline void CMsgDOTASeasonPredictions_Prediction::set_question(const char* value, size_t size) {
  set_has_question();
  if (question_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    question_ = new ::std::string;
  }
  question_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTASeasonPredictions.Prediction.question)
}
inline ::std::string* CMsgDOTASeasonPredictions_Prediction::mutable_question() {
  set_has_question();
  if (question_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    question_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonPredictions.Prediction.question)
  return question_;
}
inline ::std::string* CMsgDOTASeasonPredictions_Prediction::release_question() {
  clear_has_question();
  if (question_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = question_;
    question_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTASeasonPredictions_Prediction::set_allocated_question(::std::string* question) {
  if (question_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete question_;
  }
  if (question) {
    set_has_question();
    question_ = question;
  } else {
    clear_has_question();
    question_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTASeasonPredictions.Prediction.question)
}

// repeated .CMsgDOTASeasonPredictions.Choice choices = 3;
inline int CMsgDOTASeasonPredictions_Prediction::choices_size() const {
  return choices_.size();
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_choices() {
  choices_.Clear();
}
inline const ::CMsgDOTASeasonPredictions_Choice& CMsgDOTASeasonPredictions_Prediction::choices(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.choices)
  return choices_.Get(index);
}
inline ::CMsgDOTASeasonPredictions_Choice* CMsgDOTASeasonPredictions_Prediction::mutable_choices(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonPredictions.Prediction.choices)
  return choices_.Mutable(index);
}
inline ::CMsgDOTASeasonPredictions_Choice* CMsgDOTASeasonPredictions_Prediction::add_choices() {
  // @@protoc_insertion_point(field_add:CMsgDOTASeasonPredictions.Prediction.choices)
  return choices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Choice >&
CMsgDOTASeasonPredictions_Prediction::choices() const {
  // @@protoc_insertion_point(field_list:CMsgDOTASeasonPredictions.Prediction.choices)
  return choices_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Choice >*
CMsgDOTASeasonPredictions_Prediction::mutable_choices() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTASeasonPredictions.Prediction.choices)
  return &choices_;
}

// optional uint32 selection_id = 4;
inline bool CMsgDOTASeasonPredictions_Prediction::has_selection_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_has_selection_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_has_selection_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_selection_id() {
  selection_id_ = 0u;
  clear_has_selection_id();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_Prediction::selection_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.selection_id)
  return selection_id_;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_selection_id(::google::protobuf::uint32 value) {
  set_has_selection_id();
  selection_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.selection_id)
}

// optional uint32 start_date = 5;
inline bool CMsgDOTASeasonPredictions_Prediction::has_start_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_has_start_date() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_has_start_date() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_start_date() {
  start_date_ = 0u;
  clear_has_start_date();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_Prediction::start_date() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.start_date)
  return start_date_;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_start_date(::google::protobuf::uint32 value) {
  set_has_start_date();
  start_date_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.start_date)
}

// optional uint32 lock_date = 6;
inline bool CMsgDOTASeasonPredictions_Prediction::has_lock_date() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_has_lock_date() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_has_lock_date() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_lock_date() {
  lock_date_ = 0u;
  clear_has_lock_date();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_Prediction::lock_date() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.lock_date)
  return lock_date_;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_lock_date(::google::protobuf::uint32 value) {
  set_has_lock_date();
  lock_date_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.lock_date)
}

// optional uint32 reward = 7;
inline bool CMsgDOTASeasonPredictions_Prediction::has_reward() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_has_reward() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_has_reward() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_reward() {
  reward_ = 0u;
  clear_has_reward();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_Prediction::reward() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.reward)
  return reward_;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_reward(::google::protobuf::uint32 value) {
  set_has_reward();
  reward_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.reward)
}

// optional .CMsgDOTASeasonPredictions.eAnswerType answer_type = 8 [default = SingleInt];
inline bool CMsgDOTASeasonPredictions_Prediction::has_answer_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_has_answer_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_has_answer_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_answer_type() {
  answer_type_ = 0;
  clear_has_answer_type();
}
inline ::CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions_Prediction::answer_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.answer_type)
  return static_cast< ::CMsgDOTASeasonPredictions_eAnswerType >(answer_type_);
}
inline void CMsgDOTASeasonPredictions_Prediction::set_answer_type(::CMsgDOTASeasonPredictions_eAnswerType value) {
  assert(::CMsgDOTASeasonPredictions_eAnswerType_IsValid(value));
  set_has_answer_type();
  answer_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.answer_type)
}

// optional uint32 answer_id = 9;
inline bool CMsgDOTASeasonPredictions_Prediction::has_answer_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_has_answer_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_has_answer_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_answer_id() {
  answer_id_ = 0u;
  clear_has_answer_id();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_Prediction::answer_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.answer_id)
  return answer_id_;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_answer_id(::google::protobuf::uint32 value) {
  set_has_answer_id();
  answer_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.answer_id)
}

// repeated .CMsgDOTASeasonPredictions.Answers answers = 10;
inline int CMsgDOTASeasonPredictions_Prediction::answers_size() const {
  return answers_.size();
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_answers() {
  answers_.Clear();
}
inline const ::CMsgDOTASeasonPredictions_Answers& CMsgDOTASeasonPredictions_Prediction::answers(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.answers)
  return answers_.Get(index);
}
inline ::CMsgDOTASeasonPredictions_Answers* CMsgDOTASeasonPredictions_Prediction::mutable_answers(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonPredictions.Prediction.answers)
  return answers_.Mutable(index);
}
inline ::CMsgDOTASeasonPredictions_Answers* CMsgDOTASeasonPredictions_Prediction::add_answers() {
  // @@protoc_insertion_point(field_add:CMsgDOTASeasonPredictions.Prediction.answers)
  return answers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Answers >&
CMsgDOTASeasonPredictions_Prediction::answers() const {
  // @@protoc_insertion_point(field_list:CMsgDOTASeasonPredictions.Prediction.answers)
  return answers_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Answers >*
CMsgDOTASeasonPredictions_Prediction::mutable_answers() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTASeasonPredictions.Prediction.answers)
  return &answers_;
}

// optional string query_name = 11;
inline bool CMsgDOTASeasonPredictions_Prediction::has_query_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_has_query_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_has_query_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_query_name() {
  if (query_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    query_name_->clear();
  }
  clear_has_query_name();
}
inline const ::std::string& CMsgDOTASeasonPredictions_Prediction::query_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.query_name)
  return *query_name_;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_query_name(const ::std::string& value) {
  set_has_query_name();
  if (query_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    query_name_ = new ::std::string;
  }
  query_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.query_name)
}
inline void CMsgDOTASeasonPredictions_Prediction::set_query_name(const char* value) {
  set_has_query_name();
  if (query_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    query_name_ = new ::std::string;
  }
  query_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTASeasonPredictions.Prediction.query_name)
}
inline void CMsgDOTASeasonPredictions_Prediction::set_query_name(const char* value, size_t size) {
  set_has_query_name();
  if (query_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    query_name_ = new ::std::string;
  }
  query_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTASeasonPredictions.Prediction.query_name)
}
inline ::std::string* CMsgDOTASeasonPredictions_Prediction::mutable_query_name() {
  set_has_query_name();
  if (query_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    query_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonPredictions.Prediction.query_name)
  return query_name_;
}
inline ::std::string* CMsgDOTASeasonPredictions_Prediction::release_query_name() {
  clear_has_query_name();
  if (query_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = query_name_;
    query_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTASeasonPredictions_Prediction::set_allocated_query_name(::std::string* query_name) {
  if (query_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete query_name_;
  }
  if (query_name) {
    set_has_query_name();
    query_name_ = query_name;
  } else {
    clear_has_query_name();
    query_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTASeasonPredictions.Prediction.query_name)
}

// repeated uint32 query_bind_params = 12;
inline int CMsgDOTASeasonPredictions_Prediction::query_bind_params_size() const {
  return query_bind_params_.size();
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_query_bind_params() {
  query_bind_params_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_Prediction::query_bind_params(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.query_bind_params)
  return query_bind_params_.Get(index);
}
inline void CMsgDOTASeasonPredictions_Prediction::set_query_bind_params(int index, ::google::protobuf::uint32 value) {
  query_bind_params_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.query_bind_params)
}
inline void CMsgDOTASeasonPredictions_Prediction::add_query_bind_params(::google::protobuf::uint32 value) {
  query_bind_params_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTASeasonPredictions.Prediction.query_bind_params)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTASeasonPredictions_Prediction::query_bind_params() const {
  // @@protoc_insertion_point(field_list:CMsgDOTASeasonPredictions.Prediction.query_bind_params)
  return query_bind_params_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTASeasonPredictions_Prediction::mutable_query_bind_params() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTASeasonPredictions.Prediction.query_bind_params)
  return &query_bind_params_;
}

// optional uint32 lock_on_selection_id = 13;
inline bool CMsgDOTASeasonPredictions_Prediction::has_lock_on_selection_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_has_lock_on_selection_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_has_lock_on_selection_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_lock_on_selection_id() {
  lock_on_selection_id_ = 0u;
  clear_has_lock_on_selection_id();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_Prediction::lock_on_selection_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.lock_on_selection_id)
  return lock_on_selection_id_;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_lock_on_selection_id(::google::protobuf::uint32 value) {
  set_has_lock_on_selection_id();
  lock_on_selection_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.lock_on_selection_id)
}

// optional uint32 lock_on_selection_value = 14;
inline bool CMsgDOTASeasonPredictions_Prediction::has_lock_on_selection_value() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_has_lock_on_selection_value() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_has_lock_on_selection_value() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_lock_on_selection_value() {
  lock_on_selection_value_ = 0u;
  clear_has_lock_on_selection_value();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_Prediction::lock_on_selection_value() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.lock_on_selection_value)
  return lock_on_selection_value_;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_lock_on_selection_value(::google::protobuf::uint32 value) {
  set_has_lock_on_selection_value();
  lock_on_selection_value_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.lock_on_selection_value)
}

// optional bool lock_on_selection_set = 15;
inline bool CMsgDOTASeasonPredictions_Prediction::has_lock_on_selection_set() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_has_lock_on_selection_set() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_has_lock_on_selection_set() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_lock_on_selection_set() {
  lock_on_selection_set_ = false;
  clear_has_lock_on_selection_set();
}
inline bool CMsgDOTASeasonPredictions_Prediction::lock_on_selection_set() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.lock_on_selection_set)
  return lock_on_selection_set_;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_lock_on_selection_set(bool value) {
  set_has_lock_on_selection_set();
  lock_on_selection_set_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.lock_on_selection_set)
}

// -------------------------------------------------------------------

// CMsgDOTASeasonPredictions_InGamePrediction

// optional uint32 id = 1;
inline bool CMsgDOTASeasonPredictions_InGamePrediction::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_InGamePrediction::id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.InGamePrediction.id)
  return id_;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.InGamePrediction.id)
}

// optional string name = 2;
inline bool CMsgDOTASeasonPredictions_InGamePrediction::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgDOTASeasonPredictions_InGamePrediction::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.InGamePrediction.name)
  return *name_;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.InGamePrediction.name)
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTASeasonPredictions.InGamePrediction.name)
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTASeasonPredictions.InGamePrediction.name)
}
inline ::std::string* CMsgDOTASeasonPredictions_InGamePrediction::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonPredictions.InGamePrediction.name)
  return name_;
}
inline ::std::string* CMsgDOTASeasonPredictions_InGamePrediction::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTASeasonPredictions.InGamePrediction.name)
}

// optional .CMsgDOTASeasonPredictions.ePredictionType type = 3 [default = Generic];
inline bool CMsgDOTASeasonPredictions_InGamePrediction::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions_InGamePrediction::type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.InGamePrediction.type)
  return static_cast< ::CMsgDOTASeasonPredictions_ePredictionType >(type_);
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_type(::CMsgDOTASeasonPredictions_ePredictionType value) {
  assert(::CMsgDOTASeasonPredictions_ePredictionType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.InGamePrediction.type)
}

// optional .CMsgDOTASeasonPredictions.eRandomSelectionGroup_t group = 4 [default = EarlyGame];
inline bool CMsgDOTASeasonPredictions_InGamePrediction::has_group() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_has_group() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_has_group() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_group() {
  group_ = 0;
  clear_has_group();
}
inline ::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t CMsgDOTASeasonPredictions_InGamePrediction::group() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.InGamePrediction.group)
  return static_cast< ::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t >(group_);
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_group(::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t value) {
  assert(::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_IsValid(value));
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.InGamePrediction.group)
}

// optional string question = 5;
inline bool CMsgDOTASeasonPredictions_InGamePrediction::has_question() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_has_question() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_has_question() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_question() {
  if (question_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    question_->clear();
  }
  clear_has_question();
}
inline const ::std::string& CMsgDOTASeasonPredictions_InGamePrediction::question() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.InGamePrediction.question)
  return *question_;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_question(const ::std::string& value) {
  set_has_question();
  if (question_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    question_ = new ::std::string;
  }
  question_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.InGamePrediction.question)
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_question(const char* value) {
  set_has_question();
  if (question_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    question_ = new ::std::string;
  }
  question_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTASeasonPredictions.InGamePrediction.question)
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_question(const char* value, size_t size) {
  set_has_question();
  if (question_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    question_ = new ::std::string;
  }
  question_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTASeasonPredictions.InGamePrediction.question)
}
inline ::std::string* CMsgDOTASeasonPredictions_InGamePrediction::mutable_question() {
  set_has_question();
  if (question_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    question_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonPredictions.InGamePrediction.question)
  return question_;
}
inline ::std::string* CMsgDOTASeasonPredictions_InGamePrediction::release_question() {
  clear_has_question();
  if (question_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = question_;
    question_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_allocated_question(::std::string* question) {
  if (question_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete question_;
  }
  if (question) {
    set_has_question();
    question_ = question;
  } else {
    clear_has_question();
    question_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTASeasonPredictions.InGamePrediction.question)
}

// repeated .CMsgDOTASeasonPredictions.Choice choices = 6;
inline int CMsgDOTASeasonPredictions_InGamePrediction::choices_size() const {
  return choices_.size();
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_choices() {
  choices_.Clear();
}
inline const ::CMsgDOTASeasonPredictions_Choice& CMsgDOTASeasonPredictions_InGamePrediction::choices(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.InGamePrediction.choices)
  return choices_.Get(index);
}
inline ::CMsgDOTASeasonPredictions_Choice* CMsgDOTASeasonPredictions_InGamePrediction::mutable_choices(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonPredictions.InGamePrediction.choices)
  return choices_.Mutable(index);
}
inline ::CMsgDOTASeasonPredictions_Choice* CMsgDOTASeasonPredictions_InGamePrediction::add_choices() {
  // @@protoc_insertion_point(field_add:CMsgDOTASeasonPredictions.InGamePrediction.choices)
  return choices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Choice >&
CMsgDOTASeasonPredictions_InGamePrediction::choices() const {
  // @@protoc_insertion_point(field_list:CMsgDOTASeasonPredictions.InGamePrediction.choices)
  return choices_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Choice >*
CMsgDOTASeasonPredictions_InGamePrediction::mutable_choices() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTASeasonPredictions.InGamePrediction.choices)
  return &choices_;
}

// repeated string required_heroes = 7;
inline int CMsgDOTASeasonPredictions_InGamePrediction::required_heroes_size() const {
  return required_heroes_.size();
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_required_heroes() {
  required_heroes_.Clear();
}
inline const ::std::string& CMsgDOTASeasonPredictions_InGamePrediction::required_heroes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
  return required_heroes_.Get(index);
}
inline ::std::string* CMsgDOTASeasonPredictions_InGamePrediction::mutable_required_heroes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
  return required_heroes_.Mutable(index);
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_required_heroes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
  required_heroes_.Mutable(index)->assign(value);
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_required_heroes(int index, const char* value) {
  required_heroes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_required_heroes(int index, const char* value, size_t size) {
  required_heroes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
}
inline ::std::string* CMsgDOTASeasonPredictions_InGamePrediction::add_required_heroes() {
  return required_heroes_.Add();
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::add_required_heroes(const ::std::string& value) {
  required_heroes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::add_required_heroes(const char* value) {
  required_heroes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::add_required_heroes(const char* value, size_t size) {
  required_heroes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgDOTASeasonPredictions_InGamePrediction::required_heroes() const {
  // @@protoc_insertion_point(field_list:CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
  return required_heroes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgDOTASeasonPredictions_InGamePrediction::mutable_required_heroes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
  return &required_heroes_;
}

// optional string query_name = 8;
inline bool CMsgDOTASeasonPredictions_InGamePrediction::has_query_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_has_query_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_has_query_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_query_name() {
  if (query_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    query_name_->clear();
  }
  clear_has_query_name();
}
inline const ::std::string& CMsgDOTASeasonPredictions_InGamePrediction::query_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.InGamePrediction.query_name)
  return *query_name_;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_query_name(const ::std::string& value) {
  set_has_query_name();
  if (query_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    query_name_ = new ::std::string;
  }
  query_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.InGamePrediction.query_name)
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_query_name(const char* value) {
  set_has_query_name();
  if (query_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    query_name_ = new ::std::string;
  }
  query_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTASeasonPredictions.InGamePrediction.query_name)
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_query_name(const char* value, size_t size) {
  set_has_query_name();
  if (query_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    query_name_ = new ::std::string;
  }
  query_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTASeasonPredictions.InGamePrediction.query_name)
}
inline ::std::string* CMsgDOTASeasonPredictions_InGamePrediction::mutable_query_name() {
  set_has_query_name();
  if (query_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    query_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonPredictions.InGamePrediction.query_name)
  return query_name_;
}
inline ::std::string* CMsgDOTASeasonPredictions_InGamePrediction::release_query_name() {
  clear_has_query_name();
  if (query_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = query_name_;
    query_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_allocated_query_name(::std::string* query_name) {
  if (query_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete query_name_;
  }
  if (query_name) {
    set_has_query_name();
    query_name_ = query_name;
  } else {
    clear_has_query_name();
    query_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTASeasonPredictions.InGamePrediction.query_name)
}

// repeated .CMsgDOTASeasonPredictions.QueryKeyValues query_values = 9;
inline int CMsgDOTASeasonPredictions_InGamePrediction::query_values_size() const {
  return query_values_.size();
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_query_values() {
  query_values_.Clear();
}
inline const ::CMsgDOTASeasonPredictions_QueryKeyValues& CMsgDOTASeasonPredictions_InGamePrediction::query_values(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.InGamePrediction.query_values)
  return query_values_.Get(index);
}
inline ::CMsgDOTASeasonPredictions_QueryKeyValues* CMsgDOTASeasonPredictions_InGamePrediction::mutable_query_values(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonPredictions.InGamePrediction.query_values)
  return query_values_.Mutable(index);
}
inline ::CMsgDOTASeasonPredictions_QueryKeyValues* CMsgDOTASeasonPredictions_InGamePrediction::add_query_values() {
  // @@protoc_insertion_point(field_add:CMsgDOTASeasonPredictions.InGamePrediction.query_values)
  return query_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_QueryKeyValues >&
CMsgDOTASeasonPredictions_InGamePrediction::query_values() const {
  // @@protoc_insertion_point(field_list:CMsgDOTASeasonPredictions.InGamePrediction.query_values)
  return query_values_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_QueryKeyValues >*
CMsgDOTASeasonPredictions_InGamePrediction::mutable_query_values() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTASeasonPredictions.InGamePrediction.query_values)
  return &query_values_;
}

// optional .CMsgDOTASeasonPredictions.eResolutionType_t answer_resolution_type = 10 [default = InvalidQuery];
inline bool CMsgDOTASeasonPredictions_InGamePrediction::has_answer_resolution_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_has_answer_resolution_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_has_answer_resolution_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_answer_resolution_type() {
  answer_resolution_type_ = 0;
  clear_has_answer_resolution_type();
}
inline ::CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions_InGamePrediction::answer_resolution_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.InGamePrediction.answer_resolution_type)
  return static_cast< ::CMsgDOTASeasonPredictions_eResolutionType_t >(answer_resolution_type_);
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_answer_resolution_type(::CMsgDOTASeasonPredictions_eResolutionType_t value) {
  assert(::CMsgDOTASeasonPredictions_eResolutionType_t_IsValid(value));
  set_has_answer_resolution_type();
  answer_resolution_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.InGamePrediction.answer_resolution_type)
}

// optional uint32 points_to_grant = 11;
inline bool CMsgDOTASeasonPredictions_InGamePrediction::has_points_to_grant() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_has_points_to_grant() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_has_points_to_grant() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_points_to_grant() {
  points_to_grant_ = 0u;
  clear_has_points_to_grant();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_InGamePrediction::points_to_grant() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.InGamePrediction.points_to_grant)
  return points_to_grant_;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_points_to_grant(::google::protobuf::uint32 value) {
  set_has_points_to_grant();
  points_to_grant_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.InGamePrediction.points_to_grant)
}

// optional uint32 reward_action = 12;
inline bool CMsgDOTASeasonPredictions_InGamePrediction::has_reward_action() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_has_reward_action() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_has_reward_action() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_reward_action() {
  reward_action_ = 0u;
  clear_has_reward_action();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_InGamePrediction::reward_action() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.InGamePrediction.reward_action)
  return reward_action_;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_reward_action(::google::protobuf::uint32 value) {
  set_has_reward_action();
  reward_action_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.InGamePrediction.reward_action)
}

// optional uint32 debug_force_selection = 13;
inline bool CMsgDOTASeasonPredictions_InGamePrediction::has_debug_force_selection() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_has_debug_force_selection() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_has_debug_force_selection() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_debug_force_selection() {
  debug_force_selection_ = 0u;
  clear_has_debug_force_selection();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions_InGamePrediction::debug_force_selection() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.InGamePrediction.debug_force_selection)
  return debug_force_selection_;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_debug_force_selection(::google::protobuf::uint32 value) {
  set_has_debug_force_selection();
  debug_force_selection_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.InGamePrediction.debug_force_selection)
}

// optional .CMsgDOTASeasonPredictions.eRawValueType_t raw_value_type = 14 [default = Number];
inline bool CMsgDOTASeasonPredictions_InGamePrediction::has_raw_value_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_has_raw_value_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_has_raw_value_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::clear_raw_value_type() {
  raw_value_type_ = 0;
  clear_has_raw_value_type();
}
inline ::CMsgDOTASeasonPredictions_eRawValueType_t CMsgDOTASeasonPredictions_InGamePrediction::raw_value_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.InGamePrediction.raw_value_type)
  return static_cast< ::CMsgDOTASeasonPredictions_eRawValueType_t >(raw_value_type_);
}
inline void CMsgDOTASeasonPredictions_InGamePrediction::set_raw_value_type(::CMsgDOTASeasonPredictions_eRawValueType_t value) {
  assert(::CMsgDOTASeasonPredictions_eRawValueType_t_IsValid(value));
  set_has_raw_value_type();
  raw_value_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.InGamePrediction.raw_value_type)
}

// -------------------------------------------------------------------

// CMsgDOTASeasonPredictions

// repeated .CMsgDOTASeasonPredictions.Prediction predictions = 1;
inline int CMsgDOTASeasonPredictions::predictions_size() const {
  return predictions_.size();
}
inline void CMsgDOTASeasonPredictions::clear_predictions() {
  predictions_.Clear();
}
inline const ::CMsgDOTASeasonPredictions_Prediction& CMsgDOTASeasonPredictions::predictions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.predictions)
  return predictions_.Get(index);
}
inline ::CMsgDOTASeasonPredictions_Prediction* CMsgDOTASeasonPredictions::mutable_predictions(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonPredictions.predictions)
  return predictions_.Mutable(index);
}
inline ::CMsgDOTASeasonPredictions_Prediction* CMsgDOTASeasonPredictions::add_predictions() {
  // @@protoc_insertion_point(field_add:CMsgDOTASeasonPredictions.predictions)
  return predictions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Prediction >&
CMsgDOTASeasonPredictions::predictions() const {
  // @@protoc_insertion_point(field_list:CMsgDOTASeasonPredictions.predictions)
  return predictions_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Prediction >*
CMsgDOTASeasonPredictions::mutable_predictions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTASeasonPredictions.predictions)
  return &predictions_;
}

// repeated .CMsgDOTASeasonPredictions.InGamePrediction in_game_predictions = 2;
inline int CMsgDOTASeasonPredictions::in_game_predictions_size() const {
  return in_game_predictions_.size();
}
inline void CMsgDOTASeasonPredictions::clear_in_game_predictions() {
  in_game_predictions_.Clear();
}
inline const ::CMsgDOTASeasonPredictions_InGamePrediction& CMsgDOTASeasonPredictions::in_game_predictions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.in_game_predictions)
  return in_game_predictions_.Get(index);
}
inline ::CMsgDOTASeasonPredictions_InGamePrediction* CMsgDOTASeasonPredictions::mutable_in_game_predictions(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonPredictions.in_game_predictions)
  return in_game_predictions_.Mutable(index);
}
inline ::CMsgDOTASeasonPredictions_InGamePrediction* CMsgDOTASeasonPredictions::add_in_game_predictions() {
  // @@protoc_insertion_point(field_add:CMsgDOTASeasonPredictions.in_game_predictions)
  return in_game_predictions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_InGamePrediction >&
CMsgDOTASeasonPredictions::in_game_predictions() const {
  // @@protoc_insertion_point(field_list:CMsgDOTASeasonPredictions.in_game_predictions)
  return in_game_predictions_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTASeasonPredictions_InGamePrediction >*
CMsgDOTASeasonPredictions::mutable_in_game_predictions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTASeasonPredictions.in_game_predictions)
  return &in_game_predictions_;
}

// optional uint32 in_game_prediction_count_per_game = 3;
inline bool CMsgDOTASeasonPredictions::has_in_game_prediction_count_per_game() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTASeasonPredictions::set_has_in_game_prediction_count_per_game() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTASeasonPredictions::clear_has_in_game_prediction_count_per_game() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTASeasonPredictions::clear_in_game_prediction_count_per_game() {
  in_game_prediction_count_per_game_ = 0u;
  clear_has_in_game_prediction_count_per_game();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions::in_game_prediction_count_per_game() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.in_game_prediction_count_per_game)
  return in_game_prediction_count_per_game_;
}
inline void CMsgDOTASeasonPredictions::set_in_game_prediction_count_per_game(::google::protobuf::uint32 value) {
  set_has_in_game_prediction_count_per_game();
  in_game_prediction_count_per_game_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.in_game_prediction_count_per_game)
}

// optional uint32 in_game_prediction_voting_period_minutes = 4;
inline bool CMsgDOTASeasonPredictions::has_in_game_prediction_voting_period_minutes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTASeasonPredictions::set_has_in_game_prediction_voting_period_minutes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTASeasonPredictions::clear_has_in_game_prediction_voting_period_minutes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTASeasonPredictions::clear_in_game_prediction_voting_period_minutes() {
  in_game_prediction_voting_period_minutes_ = 0u;
  clear_has_in_game_prediction_voting_period_minutes();
}
inline ::google::protobuf::uint32 CMsgDOTASeasonPredictions::in_game_prediction_voting_period_minutes() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.in_game_prediction_voting_period_minutes)
  return in_game_prediction_voting_period_minutes_;
}
inline void CMsgDOTASeasonPredictions::set_in_game_prediction_voting_period_minutes(::google::protobuf::uint32 value) {
  set_has_in_game_prediction_voting_period_minutes();
  in_game_prediction_voting_period_minutes_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.in_game_prediction_voting_period_minutes)
}

// -------------------------------------------------------------------

// CMsgDOTAMatch_Player_CustomGameData

// optional uint32 dota_team = 1;
inline bool CMsgDOTAMatch_Player_CustomGameData::has_dota_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatch_Player_CustomGameData::set_has_dota_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAMatch_Player_CustomGameData::clear_has_dota_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAMatch_Player_CustomGameData::clear_dota_team() {
  dota_team_ = 0u;
  clear_has_dota_team();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player_CustomGameData::dota_team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.CustomGameData.dota_team)
  return dota_team_;
}
inline void CMsgDOTAMatch_Player_CustomGameData::set_dota_team(::google::protobuf::uint32 value) {
  set_has_dota_team();
  dota_team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.CustomGameData.dota_team)
}

// optional bool winner = 2;
inline bool CMsgDOTAMatch_Player_CustomGameData::has_winner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatch_Player_CustomGameData::set_has_winner() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAMatch_Player_CustomGameData::clear_has_winner() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAMatch_Player_CustomGameData::clear_winner() {
  winner_ = false;
  clear_has_winner();
}
inline bool CMsgDOTAMatch_Player_CustomGameData::winner() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.CustomGameData.winner)
  return winner_;
}
inline void CMsgDOTAMatch_Player_CustomGameData::set_winner(bool value) {
  set_has_winner();
  winner_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.CustomGameData.winner)
}

// -------------------------------------------------------------------

// CMsgDOTAMatch_Player

// optional uint32 account_id = 1;
inline bool CMsgDOTAMatch_Player::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAMatch_Player::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAMatch_Player::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.account_id)
  return account_id_;
}
inline void CMsgDOTAMatch_Player::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.account_id)
}

// optional uint32 player_slot = 2;
inline bool CMsgDOTAMatch_Player::has_player_slot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_player_slot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAMatch_Player::clear_has_player_slot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAMatch_Player::clear_player_slot() {
  player_slot_ = 0u;
  clear_has_player_slot();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::player_slot() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.player_slot)
  return player_slot_;
}
inline void CMsgDOTAMatch_Player::set_player_slot(::google::protobuf::uint32 value) {
  set_has_player_slot();
  player_slot_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.player_slot)
}

// optional uint32 hero_id = 3;
inline bool CMsgDOTAMatch_Player::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAMatch_Player::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAMatch_Player::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.hero_id)
  return hero_id_;
}
inline void CMsgDOTAMatch_Player::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.hero_id)
}

// optional uint32 item_0 = 4;
inline bool CMsgDOTAMatch_Player::has_item_0() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_item_0() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAMatch_Player::clear_has_item_0() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAMatch_Player::clear_item_0() {
  item_0_ = 0u;
  clear_has_item_0();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::item_0() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.item_0)
  return item_0_;
}
inline void CMsgDOTAMatch_Player::set_item_0(::google::protobuf::uint32 value) {
  set_has_item_0();
  item_0_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.item_0)
}

// optional uint32 item_1 = 5;
inline bool CMsgDOTAMatch_Player::has_item_1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_item_1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAMatch_Player::clear_has_item_1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAMatch_Player::clear_item_1() {
  item_1_ = 0u;
  clear_has_item_1();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::item_1() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.item_1)
  return item_1_;
}
inline void CMsgDOTAMatch_Player::set_item_1(::google::protobuf::uint32 value) {
  set_has_item_1();
  item_1_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.item_1)
}

// optional uint32 item_2 = 6;
inline bool CMsgDOTAMatch_Player::has_item_2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_item_2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAMatch_Player::clear_has_item_2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAMatch_Player::clear_item_2() {
  item_2_ = 0u;
  clear_has_item_2();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::item_2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.item_2)
  return item_2_;
}
inline void CMsgDOTAMatch_Player::set_item_2(::google::protobuf::uint32 value) {
  set_has_item_2();
  item_2_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.item_2)
}

// optional uint32 item_3 = 7;
inline bool CMsgDOTAMatch_Player::has_item_3() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_item_3() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTAMatch_Player::clear_has_item_3() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTAMatch_Player::clear_item_3() {
  item_3_ = 0u;
  clear_has_item_3();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::item_3() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.item_3)
  return item_3_;
}
inline void CMsgDOTAMatch_Player::set_item_3(::google::protobuf::uint32 value) {
  set_has_item_3();
  item_3_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.item_3)
}

// optional uint32 item_4 = 8;
inline bool CMsgDOTAMatch_Player::has_item_4() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_item_4() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTAMatch_Player::clear_has_item_4() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTAMatch_Player::clear_item_4() {
  item_4_ = 0u;
  clear_has_item_4();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::item_4() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.item_4)
  return item_4_;
}
inline void CMsgDOTAMatch_Player::set_item_4(::google::protobuf::uint32 value) {
  set_has_item_4();
  item_4_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.item_4)
}

// optional uint32 item_5 = 9;
inline bool CMsgDOTAMatch_Player::has_item_5() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_item_5() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTAMatch_Player::clear_has_item_5() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTAMatch_Player::clear_item_5() {
  item_5_ = 0u;
  clear_has_item_5();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::item_5() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.item_5)
  return item_5_;
}
inline void CMsgDOTAMatch_Player::set_item_5(::google::protobuf::uint32 value) {
  set_has_item_5();
  item_5_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.item_5)
}

// optional uint32 item_6 = 59;
inline bool CMsgDOTAMatch_Player::has_item_6() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_item_6() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTAMatch_Player::clear_has_item_6() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTAMatch_Player::clear_item_6() {
  item_6_ = 0u;
  clear_has_item_6();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::item_6() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.item_6)
  return item_6_;
}
inline void CMsgDOTAMatch_Player::set_item_6(::google::protobuf::uint32 value) {
  set_has_item_6();
  item_6_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.item_6)
}

// optional uint32 item_7 = 60;
inline bool CMsgDOTAMatch_Player::has_item_7() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_item_7() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgDOTAMatch_Player::clear_has_item_7() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgDOTAMatch_Player::clear_item_7() {
  item_7_ = 0u;
  clear_has_item_7();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::item_7() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.item_7)
  return item_7_;
}
inline void CMsgDOTAMatch_Player::set_item_7(::google::protobuf::uint32 value) {
  set_has_item_7();
  item_7_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.item_7)
}

// optional uint32 item_8 = 61;
inline bool CMsgDOTAMatch_Player::has_item_8() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_item_8() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgDOTAMatch_Player::clear_has_item_8() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgDOTAMatch_Player::clear_item_8() {
  item_8_ = 0u;
  clear_has_item_8();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::item_8() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.item_8)
  return item_8_;
}
inline void CMsgDOTAMatch_Player::set_item_8(::google::protobuf::uint32 value) {
  set_has_item_8();
  item_8_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.item_8)
}

// optional float expected_team_contribution = 10;
inline bool CMsgDOTAMatch_Player::has_expected_team_contribution() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_expected_team_contribution() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgDOTAMatch_Player::clear_has_expected_team_contribution() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgDOTAMatch_Player::clear_expected_team_contribution() {
  expected_team_contribution_ = 0;
  clear_has_expected_team_contribution();
}
inline float CMsgDOTAMatch_Player::expected_team_contribution() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.expected_team_contribution)
  return expected_team_contribution_;
}
inline void CMsgDOTAMatch_Player::set_expected_team_contribution(float value) {
  set_has_expected_team_contribution();
  expected_team_contribution_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.expected_team_contribution)
}

// optional float scaled_metric = 11;
inline bool CMsgDOTAMatch_Player::has_scaled_metric() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_scaled_metric() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgDOTAMatch_Player::clear_has_scaled_metric() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgDOTAMatch_Player::clear_scaled_metric() {
  scaled_metric_ = 0;
  clear_has_scaled_metric();
}
inline float CMsgDOTAMatch_Player::scaled_metric() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.scaled_metric)
  return scaled_metric_;
}
inline void CMsgDOTAMatch_Player::set_scaled_metric(float value) {
  set_has_scaled_metric();
  scaled_metric_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.scaled_metric)
}

// optional uint32 previous_rank = 12;
inline bool CMsgDOTAMatch_Player::has_previous_rank() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_previous_rank() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgDOTAMatch_Player::clear_has_previous_rank() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgDOTAMatch_Player::clear_previous_rank() {
  previous_rank_ = 0u;
  clear_has_previous_rank();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::previous_rank() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.previous_rank)
  return previous_rank_;
}
inline void CMsgDOTAMatch_Player::set_previous_rank(::google::protobuf::uint32 value) {
  set_has_previous_rank();
  previous_rank_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.previous_rank)
}

// optional sint32 rank_change = 13;
inline bool CMsgDOTAMatch_Player::has_rank_change() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_rank_change() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgDOTAMatch_Player::clear_has_rank_change() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgDOTAMatch_Player::clear_rank_change() {
  rank_change_ = 0;
  clear_has_rank_change();
}
inline ::google::protobuf::int32 CMsgDOTAMatch_Player::rank_change() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.rank_change)
  return rank_change_;
}
inline void CMsgDOTAMatch_Player::set_rank_change(::google::protobuf::int32 value) {
  set_has_rank_change();
  rank_change_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.rank_change)
}

// optional bool solo_rank = 49;
inline bool CMsgDOTAMatch_Player::has_solo_rank() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_solo_rank() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgDOTAMatch_Player::clear_has_solo_rank() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgDOTAMatch_Player::clear_solo_rank() {
  solo_rank_ = false;
  clear_has_solo_rank();
}
inline bool CMsgDOTAMatch_Player::solo_rank() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.solo_rank)
  return solo_rank_;
}
inline void CMsgDOTAMatch_Player::set_solo_rank(bool value) {
  set_has_solo_rank();
  solo_rank_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.solo_rank)
}

// optional bool seasonal_rank = 53;
inline bool CMsgDOTAMatch_Player::has_seasonal_rank() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_seasonal_rank() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgDOTAMatch_Player::clear_has_seasonal_rank() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgDOTAMatch_Player::clear_seasonal_rank() {
  seasonal_rank_ = false;
  clear_has_seasonal_rank();
}
inline bool CMsgDOTAMatch_Player::seasonal_rank() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.seasonal_rank)
  return seasonal_rank_;
}
inline void CMsgDOTAMatch_Player::set_seasonal_rank(bool value) {
  set_has_seasonal_rank();
  seasonal_rank_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.seasonal_rank)
}

// optional uint32 kills = 14;
inline bool CMsgDOTAMatch_Player::has_kills() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_kills() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgDOTAMatch_Player::clear_has_kills() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgDOTAMatch_Player::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.kills)
  return kills_;
}
inline void CMsgDOTAMatch_Player::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.kills)
}

// optional uint32 deaths = 15;
inline bool CMsgDOTAMatch_Player::has_deaths() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_deaths() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgDOTAMatch_Player::clear_has_deaths() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgDOTAMatch_Player::clear_deaths() {
  deaths_ = 0u;
  clear_has_deaths();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.deaths)
  return deaths_;
}
inline void CMsgDOTAMatch_Player::set_deaths(::google::protobuf::uint32 value) {
  set_has_deaths();
  deaths_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.deaths)
}

// optional uint32 assists = 16;
inline bool CMsgDOTAMatch_Player::has_assists() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_assists() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMsgDOTAMatch_Player::clear_has_assists() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMsgDOTAMatch_Player::clear_assists() {
  assists_ = 0u;
  clear_has_assists();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::assists() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.assists)
  return assists_;
}
inline void CMsgDOTAMatch_Player::set_assists(::google::protobuf::uint32 value) {
  set_has_assists();
  assists_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.assists)
}

// optional uint32 leaver_status = 17;
inline bool CMsgDOTAMatch_Player::has_leaver_status() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_leaver_status() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMsgDOTAMatch_Player::clear_has_leaver_status() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMsgDOTAMatch_Player::clear_leaver_status() {
  leaver_status_ = 0u;
  clear_has_leaver_status();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::leaver_status() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.leaver_status)
  return leaver_status_;
}
inline void CMsgDOTAMatch_Player::set_leaver_status(::google::protobuf::uint32 value) {
  set_has_leaver_status();
  leaver_status_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.leaver_status)
}

// optional uint32 gold = 18;
inline bool CMsgDOTAMatch_Player::has_gold() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_gold() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CMsgDOTAMatch_Player::clear_has_gold() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CMsgDOTAMatch_Player::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::gold() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.gold)
  return gold_;
}
inline void CMsgDOTAMatch_Player::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.gold)
}

// optional uint32 last_hits = 19;
inline bool CMsgDOTAMatch_Player::has_last_hits() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_last_hits() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CMsgDOTAMatch_Player::clear_has_last_hits() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CMsgDOTAMatch_Player::clear_last_hits() {
  last_hits_ = 0u;
  clear_has_last_hits();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::last_hits() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.last_hits)
  return last_hits_;
}
inline void CMsgDOTAMatch_Player::set_last_hits(::google::protobuf::uint32 value) {
  set_has_last_hits();
  last_hits_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.last_hits)
}

// optional uint32 denies = 20;
inline bool CMsgDOTAMatch_Player::has_denies() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_denies() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CMsgDOTAMatch_Player::clear_has_denies() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CMsgDOTAMatch_Player::clear_denies() {
  denies_ = 0u;
  clear_has_denies();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::denies() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.denies)
  return denies_;
}
inline void CMsgDOTAMatch_Player::set_denies(::google::protobuf::uint32 value) {
  set_has_denies();
  denies_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.denies)
}

// optional uint32 gold_per_min = 21;
inline bool CMsgDOTAMatch_Player::has_gold_per_min() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_gold_per_min() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CMsgDOTAMatch_Player::clear_has_gold_per_min() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CMsgDOTAMatch_Player::clear_gold_per_min() {
  gold_per_min_ = 0u;
  clear_has_gold_per_min();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::gold_per_min() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.gold_per_min)
  return gold_per_min_;
}
inline void CMsgDOTAMatch_Player::set_gold_per_min(::google::protobuf::uint32 value) {
  set_has_gold_per_min();
  gold_per_min_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.gold_per_min)
}

// optional uint32 XP_per_min = 22;
inline bool CMsgDOTAMatch_Player::has_xp_per_min() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_xp_per_min() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CMsgDOTAMatch_Player::clear_has_xp_per_min() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CMsgDOTAMatch_Player::clear_xp_per_min() {
  xp_per_min_ = 0u;
  clear_has_xp_per_min();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::xp_per_min() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.XP_per_min)
  return xp_per_min_;
}
inline void CMsgDOTAMatch_Player::set_xp_per_min(::google::protobuf::uint32 value) {
  set_has_xp_per_min();
  xp_per_min_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.XP_per_min)
}

// optional uint32 gold_spent = 23;
inline bool CMsgDOTAMatch_Player::has_gold_spent() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_gold_spent() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CMsgDOTAMatch_Player::clear_has_gold_spent() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CMsgDOTAMatch_Player::clear_gold_spent() {
  gold_spent_ = 0u;
  clear_has_gold_spent();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::gold_spent() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.gold_spent)
  return gold_spent_;
}
inline void CMsgDOTAMatch_Player::set_gold_spent(::google::protobuf::uint32 value) {
  set_has_gold_spent();
  gold_spent_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.gold_spent)
}

// optional uint32 hero_damage = 24;
inline bool CMsgDOTAMatch_Player::has_hero_damage() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_hero_damage() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CMsgDOTAMatch_Player::clear_has_hero_damage() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CMsgDOTAMatch_Player::clear_hero_damage() {
  hero_damage_ = 0u;
  clear_has_hero_damage();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::hero_damage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.hero_damage)
  return hero_damage_;
}
inline void CMsgDOTAMatch_Player::set_hero_damage(::google::protobuf::uint32 value) {
  set_has_hero_damage();
  hero_damage_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.hero_damage)
}

// optional uint32 tower_damage = 25;
inline bool CMsgDOTAMatch_Player::has_tower_damage() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_tower_damage() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CMsgDOTAMatch_Player::clear_has_tower_damage() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CMsgDOTAMatch_Player::clear_tower_damage() {
  tower_damage_ = 0u;
  clear_has_tower_damage();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::tower_damage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.tower_damage)
  return tower_damage_;
}
inline void CMsgDOTAMatch_Player::set_tower_damage(::google::protobuf::uint32 value) {
  set_has_tower_damage();
  tower_damage_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.tower_damage)
}

// optional uint32 hero_healing = 26;
inline bool CMsgDOTAMatch_Player::has_hero_healing() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_hero_healing() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CMsgDOTAMatch_Player::clear_has_hero_healing() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CMsgDOTAMatch_Player::clear_hero_healing() {
  hero_healing_ = 0u;
  clear_has_hero_healing();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::hero_healing() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.hero_healing)
  return hero_healing_;
}
inline void CMsgDOTAMatch_Player::set_hero_healing(::google::protobuf::uint32 value) {
  set_has_hero_healing();
  hero_healing_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.hero_healing)
}

// optional uint32 level = 27;
inline bool CMsgDOTAMatch_Player::has_level() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_level() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CMsgDOTAMatch_Player::clear_has_level() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CMsgDOTAMatch_Player::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.level)
  return level_;
}
inline void CMsgDOTAMatch_Player::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.level)
}

// optional uint32 time_last_seen = 28;
inline bool CMsgDOTAMatch_Player::has_time_last_seen() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_time_last_seen() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CMsgDOTAMatch_Player::clear_has_time_last_seen() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CMsgDOTAMatch_Player::clear_time_last_seen() {
  time_last_seen_ = 0u;
  clear_has_time_last_seen();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::time_last_seen() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.time_last_seen)
  return time_last_seen_;
}
inline void CMsgDOTAMatch_Player::set_time_last_seen(::google::protobuf::uint32 value) {
  set_has_time_last_seen();
  time_last_seen_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.time_last_seen)
}

// optional string player_name = 29;
inline bool CMsgDOTAMatch_Player::has_player_name() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_player_name() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CMsgDOTAMatch_Player::clear_has_player_name() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CMsgDOTAMatch_Player::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& CMsgDOTAMatch_Player::player_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.player_name)
  return *player_name_;
}
inline void CMsgDOTAMatch_Player::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.player_name)
}
inline void CMsgDOTAMatch_Player::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAMatch.Player.player_name)
}
inline void CMsgDOTAMatch_Player::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAMatch.Player.player_name)
}
inline ::std::string* CMsgDOTAMatch_Player::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.Player.player_name)
  return player_name_;
}
inline ::std::string* CMsgDOTAMatch_Player::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAMatch_Player::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.Player.player_name)
}

// optional uint32 support_ability_value = 30;
inline bool CMsgDOTAMatch_Player::has_support_ability_value() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_support_ability_value() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CMsgDOTAMatch_Player::clear_has_support_ability_value() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CMsgDOTAMatch_Player::clear_support_ability_value() {
  support_ability_value_ = 0u;
  clear_has_support_ability_value();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::support_ability_value() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.support_ability_value)
  return support_ability_value_;
}
inline void CMsgDOTAMatch_Player::set_support_ability_value(::google::protobuf::uint32 value) {
  set_has_support_ability_value();
  support_ability_value_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.support_ability_value)
}

// optional bool feeding_detected = 32;
inline bool CMsgDOTAMatch_Player::has_feeding_detected() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_feeding_detected() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CMsgDOTAMatch_Player::clear_has_feeding_detected() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CMsgDOTAMatch_Player::clear_feeding_detected() {
  feeding_detected_ = false;
  clear_has_feeding_detected();
}
inline bool CMsgDOTAMatch_Player::feeding_detected() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.feeding_detected)
  return feeding_detected_;
}
inline void CMsgDOTAMatch_Player::set_feeding_detected(bool value) {
  set_has_feeding_detected();
  feeding_detected_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.feeding_detected)
}

// optional uint32 search_rank = 34;
inline bool CMsgDOTAMatch_Player::has_search_rank() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_search_rank() {
  _has_bits_[1] |= 0x00000010u;
}
inline void CMsgDOTAMatch_Player::clear_has_search_rank() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void CMsgDOTAMatch_Player::clear_search_rank() {
  search_rank_ = 0u;
  clear_has_search_rank();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::search_rank() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.search_rank)
  return search_rank_;
}
inline void CMsgDOTAMatch_Player::set_search_rank(::google::protobuf::uint32 value) {
  set_has_search_rank();
  search_rank_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.search_rank)
}

// optional uint32 search_rank_uncertainty = 35;
inline bool CMsgDOTAMatch_Player::has_search_rank_uncertainty() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_search_rank_uncertainty() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CMsgDOTAMatch_Player::clear_has_search_rank_uncertainty() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CMsgDOTAMatch_Player::clear_search_rank_uncertainty() {
  search_rank_uncertainty_ = 0u;
  clear_has_search_rank_uncertainty();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::search_rank_uncertainty() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.search_rank_uncertainty)
  return search_rank_uncertainty_;
}
inline void CMsgDOTAMatch_Player::set_search_rank_uncertainty(::google::protobuf::uint32 value) {
  set_has_search_rank_uncertainty();
  search_rank_uncertainty_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.search_rank_uncertainty)
}

// optional int32 rank_uncertainty_change = 36;
inline bool CMsgDOTAMatch_Player::has_rank_uncertainty_change() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_rank_uncertainty_change() {
  _has_bits_[1] |= 0x00000040u;
}
inline void CMsgDOTAMatch_Player::clear_has_rank_uncertainty_change() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void CMsgDOTAMatch_Player::clear_rank_uncertainty_change() {
  rank_uncertainty_change_ = 0;
  clear_has_rank_uncertainty_change();
}
inline ::google::protobuf::int32 CMsgDOTAMatch_Player::rank_uncertainty_change() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.rank_uncertainty_change)
  return rank_uncertainty_change_;
}
inline void CMsgDOTAMatch_Player::set_rank_uncertainty_change(::google::protobuf::int32 value) {
  set_has_rank_uncertainty_change();
  rank_uncertainty_change_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.rank_uncertainty_change)
}

// optional uint32 hero_play_count = 37;
inline bool CMsgDOTAMatch_Player::has_hero_play_count() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_hero_play_count() {
  _has_bits_[1] |= 0x00000080u;
}
inline void CMsgDOTAMatch_Player::clear_has_hero_play_count() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void CMsgDOTAMatch_Player::clear_hero_play_count() {
  hero_play_count_ = 0u;
  clear_has_hero_play_count();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::hero_play_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.hero_play_count)
  return hero_play_count_;
}
inline void CMsgDOTAMatch_Player::set_hero_play_count(::google::protobuf::uint32 value) {
  set_has_hero_play_count();
  hero_play_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.hero_play_count)
}

// optional fixed64 party_id = 38;
inline bool CMsgDOTAMatch_Player::has_party_id() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_party_id() {
  _has_bits_[1] |= 0x00000100u;
}
inline void CMsgDOTAMatch_Player::clear_has_party_id() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void CMsgDOTAMatch_Player::clear_party_id() {
  party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_party_id();
}
inline ::google::protobuf::uint64 CMsgDOTAMatch_Player::party_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.party_id)
  return party_id_;
}
inline void CMsgDOTAMatch_Player::set_party_id(::google::protobuf::uint64 value) {
  set_has_party_id();
  party_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.party_id)
}

// optional uint32 scaled_hero_damage = 54;
inline bool CMsgDOTAMatch_Player::has_scaled_hero_damage() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_scaled_hero_damage() {
  _has_bits_[1] |= 0x00000200u;
}
inline void CMsgDOTAMatch_Player::clear_has_scaled_hero_damage() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void CMsgDOTAMatch_Player::clear_scaled_hero_damage() {
  scaled_hero_damage_ = 0u;
  clear_has_scaled_hero_damage();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::scaled_hero_damage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.scaled_hero_damage)
  return scaled_hero_damage_;
}
inline void CMsgDOTAMatch_Player::set_scaled_hero_damage(::google::protobuf::uint32 value) {
  set_has_scaled_hero_damage();
  scaled_hero_damage_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.scaled_hero_damage)
}

// optional uint32 scaled_tower_damage = 55;
inline bool CMsgDOTAMatch_Player::has_scaled_tower_damage() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_scaled_tower_damage() {
  _has_bits_[1] |= 0x00000400u;
}
inline void CMsgDOTAMatch_Player::clear_has_scaled_tower_damage() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void CMsgDOTAMatch_Player::clear_scaled_tower_damage() {
  scaled_tower_damage_ = 0u;
  clear_has_scaled_tower_damage();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::scaled_tower_damage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.scaled_tower_damage)
  return scaled_tower_damage_;
}
inline void CMsgDOTAMatch_Player::set_scaled_tower_damage(::google::protobuf::uint32 value) {
  set_has_scaled_tower_damage();
  scaled_tower_damage_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.scaled_tower_damage)
}

// optional uint32 scaled_hero_healing = 56;
inline bool CMsgDOTAMatch_Player::has_scaled_hero_healing() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_scaled_hero_healing() {
  _has_bits_[1] |= 0x00000800u;
}
inline void CMsgDOTAMatch_Player::clear_has_scaled_hero_healing() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void CMsgDOTAMatch_Player::clear_scaled_hero_healing() {
  scaled_hero_healing_ = 0u;
  clear_has_scaled_hero_healing();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::scaled_hero_healing() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.scaled_hero_healing)
  return scaled_hero_healing_;
}
inline void CMsgDOTAMatch_Player::set_scaled_hero_healing(::google::protobuf::uint32 value) {
  set_has_scaled_hero_healing();
  scaled_hero_healing_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.scaled_hero_healing)
}

// optional float scaled_kills = 39;
inline bool CMsgDOTAMatch_Player::has_scaled_kills() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_scaled_kills() {
  _has_bits_[1] |= 0x00001000u;
}
inline void CMsgDOTAMatch_Player::clear_has_scaled_kills() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void CMsgDOTAMatch_Player::clear_scaled_kills() {
  scaled_kills_ = 0;
  clear_has_scaled_kills();
}
inline float CMsgDOTAMatch_Player::scaled_kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.scaled_kills)
  return scaled_kills_;
}
inline void CMsgDOTAMatch_Player::set_scaled_kills(float value) {
  set_has_scaled_kills();
  scaled_kills_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.scaled_kills)
}

// optional float scaled_deaths = 40;
inline bool CMsgDOTAMatch_Player::has_scaled_deaths() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_scaled_deaths() {
  _has_bits_[1] |= 0x00002000u;
}
inline void CMsgDOTAMatch_Player::clear_has_scaled_deaths() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void CMsgDOTAMatch_Player::clear_scaled_deaths() {
  scaled_deaths_ = 0;
  clear_has_scaled_deaths();
}
inline float CMsgDOTAMatch_Player::scaled_deaths() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.scaled_deaths)
  return scaled_deaths_;
}
inline void CMsgDOTAMatch_Player::set_scaled_deaths(float value) {
  set_has_scaled_deaths();
  scaled_deaths_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.scaled_deaths)
}

// optional float scaled_assists = 41;
inline bool CMsgDOTAMatch_Player::has_scaled_assists() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_scaled_assists() {
  _has_bits_[1] |= 0x00004000u;
}
inline void CMsgDOTAMatch_Player::clear_has_scaled_assists() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void CMsgDOTAMatch_Player::clear_scaled_assists() {
  scaled_assists_ = 0;
  clear_has_scaled_assists();
}
inline float CMsgDOTAMatch_Player::scaled_assists() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.scaled_assists)
  return scaled_assists_;
}
inline void CMsgDOTAMatch_Player::set_scaled_assists(float value) {
  set_has_scaled_assists();
  scaled_assists_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.scaled_assists)
}

// optional uint32 claimed_farm_gold = 42;
inline bool CMsgDOTAMatch_Player::has_claimed_farm_gold() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_claimed_farm_gold() {
  _has_bits_[1] |= 0x00008000u;
}
inline void CMsgDOTAMatch_Player::clear_has_claimed_farm_gold() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void CMsgDOTAMatch_Player::clear_claimed_farm_gold() {
  claimed_farm_gold_ = 0u;
  clear_has_claimed_farm_gold();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::claimed_farm_gold() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.claimed_farm_gold)
  return claimed_farm_gold_;
}
inline void CMsgDOTAMatch_Player::set_claimed_farm_gold(::google::protobuf::uint32 value) {
  set_has_claimed_farm_gold();
  claimed_farm_gold_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.claimed_farm_gold)
}

// optional uint32 support_gold = 43;
inline bool CMsgDOTAMatch_Player::has_support_gold() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_support_gold() {
  _has_bits_[1] |= 0x00010000u;
}
inline void CMsgDOTAMatch_Player::clear_has_support_gold() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void CMsgDOTAMatch_Player::clear_support_gold() {
  support_gold_ = 0u;
  clear_has_support_gold();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::support_gold() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.support_gold)
  return support_gold_;
}
inline void CMsgDOTAMatch_Player::set_support_gold(::google::protobuf::uint32 value) {
  set_has_support_gold();
  support_gold_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.support_gold)
}

// optional uint32 claimed_denies = 44;
inline bool CMsgDOTAMatch_Player::has_claimed_denies() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_claimed_denies() {
  _has_bits_[1] |= 0x00020000u;
}
inline void CMsgDOTAMatch_Player::clear_has_claimed_denies() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void CMsgDOTAMatch_Player::clear_claimed_denies() {
  claimed_denies_ = 0u;
  clear_has_claimed_denies();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::claimed_denies() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.claimed_denies)
  return claimed_denies_;
}
inline void CMsgDOTAMatch_Player::set_claimed_denies(::google::protobuf::uint32 value) {
  set_has_claimed_denies();
  claimed_denies_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.claimed_denies)
}

// optional uint32 claimed_misses = 45;
inline bool CMsgDOTAMatch_Player::has_claimed_misses() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_claimed_misses() {
  _has_bits_[1] |= 0x00040000u;
}
inline void CMsgDOTAMatch_Player::clear_has_claimed_misses() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void CMsgDOTAMatch_Player::clear_claimed_misses() {
  claimed_misses_ = 0u;
  clear_has_claimed_misses();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::claimed_misses() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.claimed_misses)
  return claimed_misses_;
}
inline void CMsgDOTAMatch_Player::set_claimed_misses(::google::protobuf::uint32 value) {
  set_has_claimed_misses();
  claimed_misses_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.claimed_misses)
}

// optional uint32 misses = 46;
inline bool CMsgDOTAMatch_Player::has_misses() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_misses() {
  _has_bits_[1] |= 0x00080000u;
}
inline void CMsgDOTAMatch_Player::clear_has_misses() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void CMsgDOTAMatch_Player::clear_misses() {
  misses_ = 0u;
  clear_has_misses();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::misses() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.misses)
  return misses_;
}
inline void CMsgDOTAMatch_Player::set_misses(::google::protobuf::uint32 value) {
  set_has_misses();
  misses_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.misses)
}

// repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 47;
inline int CMsgDOTAMatch_Player::ability_upgrades_size() const {
  return ability_upgrades_.size();
}
inline void CMsgDOTAMatch_Player::clear_ability_upgrades() {
  ability_upgrades_.Clear();
}
inline const ::CMatchPlayerAbilityUpgrade& CMsgDOTAMatch_Player::ability_upgrades(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.ability_upgrades)
  return ability_upgrades_.Get(index);
}
inline ::CMatchPlayerAbilityUpgrade* CMsgDOTAMatch_Player::mutable_ability_upgrades(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.Player.ability_upgrades)
  return ability_upgrades_.Mutable(index);
}
inline ::CMatchPlayerAbilityUpgrade* CMsgDOTAMatch_Player::add_ability_upgrades() {
  // @@protoc_insertion_point(field_add:CMsgDOTAMatch.Player.ability_upgrades)
  return ability_upgrades_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade >&
CMsgDOTAMatch_Player::ability_upgrades() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatch.Player.ability_upgrades)
  return ability_upgrades_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade >*
CMsgDOTAMatch_Player::mutable_ability_upgrades() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatch.Player.ability_upgrades)
  return &ability_upgrades_;
}

// repeated .CMatchAdditionalUnitInventory additional_units_inventory = 48;
inline int CMsgDOTAMatch_Player::additional_units_inventory_size() const {
  return additional_units_inventory_.size();
}
inline void CMsgDOTAMatch_Player::clear_additional_units_inventory() {
  additional_units_inventory_.Clear();
}
inline const ::CMatchAdditionalUnitInventory& CMsgDOTAMatch_Player::additional_units_inventory(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.additional_units_inventory)
  return additional_units_inventory_.Get(index);
}
inline ::CMatchAdditionalUnitInventory* CMsgDOTAMatch_Player::mutable_additional_units_inventory(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.Player.additional_units_inventory)
  return additional_units_inventory_.Mutable(index);
}
inline ::CMatchAdditionalUnitInventory* CMsgDOTAMatch_Player::add_additional_units_inventory() {
  // @@protoc_insertion_point(field_add:CMsgDOTAMatch.Player.additional_units_inventory)
  return additional_units_inventory_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMatchAdditionalUnitInventory >&
CMsgDOTAMatch_Player::additional_units_inventory() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatch.Player.additional_units_inventory)
  return additional_units_inventory_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMatchAdditionalUnitInventory >*
CMsgDOTAMatch_Player::mutable_additional_units_inventory() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatch.Player.additional_units_inventory)
  return &additional_units_inventory_;
}

// repeated .CMatchPlayerPermanentBuff permanent_buffs = 57;
inline int CMsgDOTAMatch_Player::permanent_buffs_size() const {
  return permanent_buffs_.size();
}
inline void CMsgDOTAMatch_Player::clear_permanent_buffs() {
  permanent_buffs_.Clear();
}
inline const ::CMatchPlayerPermanentBuff& CMsgDOTAMatch_Player::permanent_buffs(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.permanent_buffs)
  return permanent_buffs_.Get(index);
}
inline ::CMatchPlayerPermanentBuff* CMsgDOTAMatch_Player::mutable_permanent_buffs(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.Player.permanent_buffs)
  return permanent_buffs_.Mutable(index);
}
inline ::CMatchPlayerPermanentBuff* CMsgDOTAMatch_Player::add_permanent_buffs() {
  // @@protoc_insertion_point(field_add:CMsgDOTAMatch.Player.permanent_buffs)
  return permanent_buffs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMatchPlayerPermanentBuff >&
CMsgDOTAMatch_Player::permanent_buffs() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatch.Player.permanent_buffs)
  return permanent_buffs_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMatchPlayerPermanentBuff >*
CMsgDOTAMatch_Player::mutable_permanent_buffs() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatch.Player.permanent_buffs)
  return &permanent_buffs_;
}

// optional .CMsgDOTAMatch.Player.CustomGameData custom_game_data = 50;
inline bool CMsgDOTAMatch_Player::has_custom_game_data() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_custom_game_data() {
  _has_bits_[1] |= 0x00800000u;
}
inline void CMsgDOTAMatch_Player::clear_has_custom_game_data() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void CMsgDOTAMatch_Player::clear_custom_game_data() {
  if (custom_game_data_ != NULL) custom_game_data_->::CMsgDOTAMatch_Player_CustomGameData::Clear();
  clear_has_custom_game_data();
}
inline const ::CMsgDOTAMatch_Player_CustomGameData& CMsgDOTAMatch_Player::custom_game_data() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.custom_game_data)
  return custom_game_data_ != NULL ? *custom_game_data_ : *default_instance_->custom_game_data_;
}
inline ::CMsgDOTAMatch_Player_CustomGameData* CMsgDOTAMatch_Player::mutable_custom_game_data() {
  set_has_custom_game_data();
  if (custom_game_data_ == NULL) custom_game_data_ = new ::CMsgDOTAMatch_Player_CustomGameData;
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.Player.custom_game_data)
  return custom_game_data_;
}
inline ::CMsgDOTAMatch_Player_CustomGameData* CMsgDOTAMatch_Player::release_custom_game_data() {
  clear_has_custom_game_data();
  ::CMsgDOTAMatch_Player_CustomGameData* temp = custom_game_data_;
  custom_game_data_ = NULL;
  return temp;
}
inline void CMsgDOTAMatch_Player::set_allocated_custom_game_data(::CMsgDOTAMatch_Player_CustomGameData* custom_game_data) {
  delete custom_game_data_;
  custom_game_data_ = custom_game_data;
  if (custom_game_data) {
    set_has_custom_game_data();
  } else {
    clear_has_custom_game_data();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.Player.custom_game_data)
}

// optional bool active_battle_pass = 51;
inline bool CMsgDOTAMatch_Player::has_active_battle_pass() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_active_battle_pass() {
  _has_bits_[1] |= 0x01000000u;
}
inline void CMsgDOTAMatch_Player::clear_has_active_battle_pass() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void CMsgDOTAMatch_Player::clear_active_battle_pass() {
  active_battle_pass_ = false;
  clear_has_active_battle_pass();
}
inline bool CMsgDOTAMatch_Player::active_battle_pass() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.active_battle_pass)
  return active_battle_pass_;
}
inline void CMsgDOTAMatch_Player::set_active_battle_pass(bool value) {
  set_has_active_battle_pass();
  active_battle_pass_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.active_battle_pass)
}

// optional uint32 net_worth = 52;
inline bool CMsgDOTAMatch_Player::has_net_worth() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_net_worth() {
  _has_bits_[1] |= 0x02000000u;
}
inline void CMsgDOTAMatch_Player::clear_has_net_worth() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void CMsgDOTAMatch_Player::clear_net_worth() {
  net_worth_ = 0u;
  clear_has_net_worth();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::net_worth() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.net_worth)
  return net_worth_;
}
inline void CMsgDOTAMatch_Player::set_net_worth(::google::protobuf::uint32 value) {
  set_has_net_worth();
  net_worth_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.net_worth)
}

// optional uint32 bot_difficulty = 58;
inline bool CMsgDOTAMatch_Player::has_bot_difficulty() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_bot_difficulty() {
  _has_bits_[1] |= 0x04000000u;
}
inline void CMsgDOTAMatch_Player::clear_has_bot_difficulty() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void CMsgDOTAMatch_Player::clear_bot_difficulty() {
  bot_difficulty_ = 0u;
  clear_has_bot_difficulty();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::bot_difficulty() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.bot_difficulty)
  return bot_difficulty_;
}
inline void CMsgDOTAMatch_Player::set_bot_difficulty(::google::protobuf::uint32 value) {
  set_has_bot_difficulty();
  bot_difficulty_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.bot_difficulty)
}

// -------------------------------------------------------------------

// CMsgDOTAMatch_BroadcasterInfo

// optional uint32 account_id = 1;
inline bool CMsgDOTAMatch_BroadcasterInfo::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatch_BroadcasterInfo::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAMatch_BroadcasterInfo::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAMatch_BroadcasterInfo::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_BroadcasterInfo::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.BroadcasterInfo.account_id)
  return account_id_;
}
inline void CMsgDOTAMatch_BroadcasterInfo::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.BroadcasterInfo.account_id)
}

// optional string name = 2;
inline bool CMsgDOTAMatch_BroadcasterInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatch_BroadcasterInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAMatch_BroadcasterInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAMatch_BroadcasterInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgDOTAMatch_BroadcasterInfo::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.BroadcasterInfo.name)
  return *name_;
}
inline void CMsgDOTAMatch_BroadcasterInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.BroadcasterInfo.name)
}
inline void CMsgDOTAMatch_BroadcasterInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAMatch.BroadcasterInfo.name)
}
inline void CMsgDOTAMatch_BroadcasterInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAMatch.BroadcasterInfo.name)
}
inline ::std::string* CMsgDOTAMatch_BroadcasterInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.BroadcasterInfo.name)
  return name_;
}
inline ::std::string* CMsgDOTAMatch_BroadcasterInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAMatch_BroadcasterInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.BroadcasterInfo.name)
}

// -------------------------------------------------------------------

// CMsgDOTAMatch_BroadcasterChannel

// optional string country_code = 1;
inline bool CMsgDOTAMatch_BroadcasterChannel::has_country_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatch_BroadcasterChannel::set_has_country_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAMatch_BroadcasterChannel::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAMatch_BroadcasterChannel::clear_country_code() {
  if (country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_code_->clear();
  }
  clear_has_country_code();
}
inline const ::std::string& CMsgDOTAMatch_BroadcasterChannel::country_code() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.BroadcasterChannel.country_code)
  return *country_code_;
}
inline void CMsgDOTAMatch_BroadcasterChannel::set_country_code(const ::std::string& value) {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_code_ = new ::std::string;
  }
  country_code_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.BroadcasterChannel.country_code)
}
inline void CMsgDOTAMatch_BroadcasterChannel::set_country_code(const char* value) {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_code_ = new ::std::string;
  }
  country_code_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAMatch.BroadcasterChannel.country_code)
}
inline void CMsgDOTAMatch_BroadcasterChannel::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_code_ = new ::std::string;
  }
  country_code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAMatch.BroadcasterChannel.country_code)
}
inline ::std::string* CMsgDOTAMatch_BroadcasterChannel::mutable_country_code() {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.BroadcasterChannel.country_code)
  return country_code_;
}
inline ::std::string* CMsgDOTAMatch_BroadcasterChannel::release_country_code() {
  clear_has_country_code();
  if (country_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = country_code_;
    country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAMatch_BroadcasterChannel::set_allocated_country_code(::std::string* country_code) {
  if (country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_code_;
  }
  if (country_code) {
    set_has_country_code();
    country_code_ = country_code;
  } else {
    clear_has_country_code();
    country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.BroadcasterChannel.country_code)
}

// optional string description = 2;
inline bool CMsgDOTAMatch_BroadcasterChannel::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatch_BroadcasterChannel::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAMatch_BroadcasterChannel::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAMatch_BroadcasterChannel::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& CMsgDOTAMatch_BroadcasterChannel::description() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.BroadcasterChannel.description)
  return *description_;
}
inline void CMsgDOTAMatch_BroadcasterChannel::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.BroadcasterChannel.description)
}
inline void CMsgDOTAMatch_BroadcasterChannel::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAMatch.BroadcasterChannel.description)
}
inline void CMsgDOTAMatch_BroadcasterChannel::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAMatch.BroadcasterChannel.description)
}
inline ::std::string* CMsgDOTAMatch_BroadcasterChannel::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.BroadcasterChannel.description)
  return description_;
}
inline ::std::string* CMsgDOTAMatch_BroadcasterChannel::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAMatch_BroadcasterChannel::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.BroadcasterChannel.description)
}

// repeated .CMsgDOTAMatch.BroadcasterInfo broadcaster_infos = 3;
inline int CMsgDOTAMatch_BroadcasterChannel::broadcaster_infos_size() const {
  return broadcaster_infos_.size();
}
inline void CMsgDOTAMatch_BroadcasterChannel::clear_broadcaster_infos() {
  broadcaster_infos_.Clear();
}
inline const ::CMsgDOTAMatch_BroadcasterInfo& CMsgDOTAMatch_BroadcasterChannel::broadcaster_infos(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.BroadcasterChannel.broadcaster_infos)
  return broadcaster_infos_.Get(index);
}
inline ::CMsgDOTAMatch_BroadcasterInfo* CMsgDOTAMatch_BroadcasterChannel::mutable_broadcaster_infos(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.BroadcasterChannel.broadcaster_infos)
  return broadcaster_infos_.Mutable(index);
}
inline ::CMsgDOTAMatch_BroadcasterInfo* CMsgDOTAMatch_BroadcasterChannel::add_broadcaster_infos() {
  // @@protoc_insertion_point(field_add:CMsgDOTAMatch.BroadcasterChannel.broadcaster_infos)
  return broadcaster_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch_BroadcasterInfo >&
CMsgDOTAMatch_BroadcasterChannel::broadcaster_infos() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatch.BroadcasterChannel.broadcaster_infos)
  return broadcaster_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch_BroadcasterInfo >*
CMsgDOTAMatch_BroadcasterChannel::mutable_broadcaster_infos() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatch.BroadcasterChannel.broadcaster_infos)
  return &broadcaster_infos_;
}

// optional string language_code = 4;
inline bool CMsgDOTAMatch_BroadcasterChannel::has_language_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAMatch_BroadcasterChannel::set_has_language_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAMatch_BroadcasterChannel::clear_has_language_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAMatch_BroadcasterChannel::clear_language_code() {
  if (language_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_code_->clear();
  }
  clear_has_language_code();
}
inline const ::std::string& CMsgDOTAMatch_BroadcasterChannel::language_code() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.BroadcasterChannel.language_code)
  return *language_code_;
}
inline void CMsgDOTAMatch_BroadcasterChannel::set_language_code(const ::std::string& value) {
  set_has_language_code();
  if (language_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_code_ = new ::std::string;
  }
  language_code_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.BroadcasterChannel.language_code)
}
inline void CMsgDOTAMatch_BroadcasterChannel::set_language_code(const char* value) {
  set_has_language_code();
  if (language_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_code_ = new ::std::string;
  }
  language_code_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAMatch.BroadcasterChannel.language_code)
}
inline void CMsgDOTAMatch_BroadcasterChannel::set_language_code(const char* value, size_t size) {
  set_has_language_code();
  if (language_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_code_ = new ::std::string;
  }
  language_code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAMatch.BroadcasterChannel.language_code)
}
inline ::std::string* CMsgDOTAMatch_BroadcasterChannel::mutable_language_code() {
  set_has_language_code();
  if (language_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.BroadcasterChannel.language_code)
  return language_code_;
}
inline ::std::string* CMsgDOTAMatch_BroadcasterChannel::release_language_code() {
  clear_has_language_code();
  if (language_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = language_code_;
    language_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAMatch_BroadcasterChannel::set_allocated_language_code(::std::string* language_code) {
  if (language_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete language_code_;
  }
  if (language_code) {
    set_has_language_code();
    language_code_ = language_code;
  } else {
    clear_has_language_code();
    language_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.BroadcasterChannel.language_code)
}

// -------------------------------------------------------------------

// CMsgDOTAMatch_CustomGameData

// optional uint64 custom_game_id = 1;
inline bool CMsgDOTAMatch_CustomGameData::has_custom_game_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatch_CustomGameData::set_has_custom_game_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAMatch_CustomGameData::clear_has_custom_game_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAMatch_CustomGameData::clear_custom_game_id() {
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_id();
}
inline ::google::protobuf::uint64 CMsgDOTAMatch_CustomGameData::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.CustomGameData.custom_game_id)
  return custom_game_id_;
}
inline void CMsgDOTAMatch_CustomGameData::set_custom_game_id(::google::protobuf::uint64 value) {
  set_has_custom_game_id();
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.CustomGameData.custom_game_id)
}

// optional string map_name = 2;
inline bool CMsgDOTAMatch_CustomGameData::has_map_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatch_CustomGameData::set_has_map_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAMatch_CustomGameData::clear_has_map_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAMatch_CustomGameData::clear_map_name() {
  if (map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    map_name_->clear();
  }
  clear_has_map_name();
}
inline const ::std::string& CMsgDOTAMatch_CustomGameData::map_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.CustomGameData.map_name)
  return *map_name_;
}
inline void CMsgDOTAMatch_CustomGameData::set_map_name(const ::std::string& value) {
  set_has_map_name();
  if (map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    map_name_ = new ::std::string;
  }
  map_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.CustomGameData.map_name)
}
inline void CMsgDOTAMatch_CustomGameData::set_map_name(const char* value) {
  set_has_map_name();
  if (map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    map_name_ = new ::std::string;
  }
  map_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAMatch.CustomGameData.map_name)
}
inline void CMsgDOTAMatch_CustomGameData::set_map_name(const char* value, size_t size) {
  set_has_map_name();
  if (map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    map_name_ = new ::std::string;
  }
  map_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAMatch.CustomGameData.map_name)
}
inline ::std::string* CMsgDOTAMatch_CustomGameData::mutable_map_name() {
  set_has_map_name();
  if (map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    map_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.CustomGameData.map_name)
  return map_name_;
}
inline ::std::string* CMsgDOTAMatch_CustomGameData::release_map_name() {
  clear_has_map_name();
  if (map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = map_name_;
    map_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAMatch_CustomGameData::set_allocated_map_name(::std::string* map_name) {
  if (map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete map_name_;
  }
  if (map_name) {
    set_has_map_name();
    map_name_ = map_name;
  } else {
    clear_has_map_name();
    map_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.CustomGameData.map_name)
}

// -------------------------------------------------------------------

// CMsgDOTAMatch

// optional uint32 duration = 3;
inline bool CMsgDOTAMatch::has_duration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatch::set_has_duration() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAMatch::clear_has_duration() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAMatch::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::duration() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.duration)
  return duration_;
}
inline void CMsgDOTAMatch::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.duration)
}

// optional fixed32 startTime = 4;
inline bool CMsgDOTAMatch::has_starttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatch::set_has_starttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAMatch::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAMatch::clear_starttime() {
  starttime_ = 0u;
  clear_has_starttime();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::starttime() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.startTime)
  return starttime_;
}
inline void CMsgDOTAMatch::set_starttime(::google::protobuf::uint32 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.startTime)
}

// repeated .CMsgDOTAMatch.Player players = 5;
inline int CMsgDOTAMatch::players_size() const {
  return players_.size();
}
inline void CMsgDOTAMatch::clear_players() {
  players_.Clear();
}
inline const ::CMsgDOTAMatch_Player& CMsgDOTAMatch::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.players)
  return players_.Get(index);
}
inline ::CMsgDOTAMatch_Player* CMsgDOTAMatch::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.players)
  return players_.Mutable(index);
}
inline ::CMsgDOTAMatch_Player* CMsgDOTAMatch::add_players() {
  // @@protoc_insertion_point(field_add:CMsgDOTAMatch.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch_Player >&
CMsgDOTAMatch::players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatch.players)
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch_Player >*
CMsgDOTAMatch::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatch.players)
  return &players_;
}

// optional uint64 match_id = 6;
inline bool CMsgDOTAMatch::has_match_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAMatch::set_has_match_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAMatch::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAMatch::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
inline ::google::protobuf::uint64 CMsgDOTAMatch::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.match_id)
  return match_id_;
}
inline void CMsgDOTAMatch::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.match_id)
}

// repeated uint32 tower_status = 8;
inline int CMsgDOTAMatch::tower_status_size() const {
  return tower_status_.size();
}
inline void CMsgDOTAMatch::clear_tower_status() {
  tower_status_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::tower_status(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.tower_status)
  return tower_status_.Get(index);
}
inline void CMsgDOTAMatch::set_tower_status(int index, ::google::protobuf::uint32 value) {
  tower_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.tower_status)
}
inline void CMsgDOTAMatch::add_tower_status(::google::protobuf::uint32 value) {
  tower_status_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAMatch.tower_status)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAMatch::tower_status() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatch.tower_status)
  return tower_status_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAMatch::mutable_tower_status() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatch.tower_status)
  return &tower_status_;
}

// repeated uint32 barracks_status = 9;
inline int CMsgDOTAMatch::barracks_status_size() const {
  return barracks_status_.size();
}
inline void CMsgDOTAMatch::clear_barracks_status() {
  barracks_status_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::barracks_status(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.barracks_status)
  return barracks_status_.Get(index);
}
inline void CMsgDOTAMatch::set_barracks_status(int index, ::google::protobuf::uint32 value) {
  barracks_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.barracks_status)
}
inline void CMsgDOTAMatch::add_barracks_status(::google::protobuf::uint32 value) {
  barracks_status_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAMatch.barracks_status)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAMatch::barracks_status() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatch.barracks_status)
  return barracks_status_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAMatch::mutable_barracks_status() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatch.barracks_status)
  return &barracks_status_;
}

// optional uint32 cluster = 10;
inline bool CMsgDOTAMatch::has_cluster() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAMatch::set_has_cluster() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTAMatch::clear_has_cluster() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTAMatch::clear_cluster() {
  cluster_ = 0u;
  clear_has_cluster();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::cluster() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.cluster)
  return cluster_;
}
inline void CMsgDOTAMatch::set_cluster(::google::protobuf::uint32 value) {
  set_has_cluster();
  cluster_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.cluster)
}

// optional uint32 first_blood_time = 12;
inline bool CMsgDOTAMatch::has_first_blood_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTAMatch::set_has_first_blood_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTAMatch::clear_has_first_blood_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTAMatch::clear_first_blood_time() {
  first_blood_time_ = 0u;
  clear_has_first_blood_time();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::first_blood_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.first_blood_time)
  return first_blood_time_;
}
inline void CMsgDOTAMatch::set_first_blood_time(::google::protobuf::uint32 value) {
  set_has_first_blood_time();
  first_blood_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.first_blood_time)
}

// optional fixed32 replay_salt = 13;
inline bool CMsgDOTAMatch::has_replay_salt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTAMatch::set_has_replay_salt() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTAMatch::clear_has_replay_salt() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTAMatch::clear_replay_salt() {
  replay_salt_ = 0u;
  clear_has_replay_salt();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::replay_salt() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.replay_salt)
  return replay_salt_;
}
inline void CMsgDOTAMatch::set_replay_salt(::google::protobuf::uint32 value) {
  set_has_replay_salt();
  replay_salt_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.replay_salt)
}

// optional fixed32 server_ip = 14;
inline bool CMsgDOTAMatch::has_server_ip() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTAMatch::set_has_server_ip() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTAMatch::clear_has_server_ip() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTAMatch::clear_server_ip() {
  server_ip_ = 0u;
  clear_has_server_ip();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::server_ip() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.server_ip)
  return server_ip_;
}
inline void CMsgDOTAMatch::set_server_ip(::google::protobuf::uint32 value) {
  set_has_server_ip();
  server_ip_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.server_ip)
}

// optional uint32 server_port = 15;
inline bool CMsgDOTAMatch::has_server_port() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTAMatch::set_has_server_port() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgDOTAMatch::clear_has_server_port() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgDOTAMatch::clear_server_port() {
  server_port_ = 0u;
  clear_has_server_port();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::server_port() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.server_port)
  return server_port_;
}
inline void CMsgDOTAMatch::set_server_port(::google::protobuf::uint32 value) {
  set_has_server_port();
  server_port_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.server_port)
}

// optional uint32 lobby_type = 16;
inline bool CMsgDOTAMatch::has_lobby_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTAMatch::set_has_lobby_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgDOTAMatch::clear_has_lobby_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgDOTAMatch::clear_lobby_type() {
  lobby_type_ = 0u;
  clear_has_lobby_type();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::lobby_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.lobby_type)
  return lobby_type_;
}
inline void CMsgDOTAMatch::set_lobby_type(::google::protobuf::uint32 value) {
  set_has_lobby_type();
  lobby_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.lobby_type)
}

// optional uint32 human_players = 17;
inline bool CMsgDOTAMatch::has_human_players() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTAMatch::set_has_human_players() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgDOTAMatch::clear_has_human_players() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgDOTAMatch::clear_human_players() {
  human_players_ = 0u;
  clear_has_human_players();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::human_players() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.human_players)
  return human_players_;
}
inline void CMsgDOTAMatch::set_human_players(::google::protobuf::uint32 value) {
  set_has_human_players();
  human_players_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.human_players)
}

// optional uint32 average_skill = 18;
inline bool CMsgDOTAMatch::has_average_skill() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTAMatch::set_has_average_skill() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgDOTAMatch::clear_has_average_skill() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgDOTAMatch::clear_average_skill() {
  average_skill_ = 0u;
  clear_has_average_skill();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::average_skill() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.average_skill)
  return average_skill_;
}
inline void CMsgDOTAMatch::set_average_skill(::google::protobuf::uint32 value) {
  set_has_average_skill();
  average_skill_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.average_skill)
}

// optional float game_balance = 19;
inline bool CMsgDOTAMatch::has_game_balance() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTAMatch::set_has_game_balance() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgDOTAMatch::clear_has_game_balance() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgDOTAMatch::clear_game_balance() {
  game_balance_ = 0;
  clear_has_game_balance();
}
inline float CMsgDOTAMatch::game_balance() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.game_balance)
  return game_balance_;
}
inline void CMsgDOTAMatch::set_game_balance(float value) {
  set_has_game_balance();
  game_balance_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.game_balance)
}

// optional uint32 radiant_team_id = 20;
inline bool CMsgDOTAMatch::has_radiant_team_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgDOTAMatch::set_has_radiant_team_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgDOTAMatch::clear_has_radiant_team_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgDOTAMatch::clear_radiant_team_id() {
  radiant_team_id_ = 0u;
  clear_has_radiant_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::radiant_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.radiant_team_id)
  return radiant_team_id_;
}
inline void CMsgDOTAMatch::set_radiant_team_id(::google::protobuf::uint32 value) {
  set_has_radiant_team_id();
  radiant_team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.radiant_team_id)
}

// optional uint32 dire_team_id = 21;
inline bool CMsgDOTAMatch::has_dire_team_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgDOTAMatch::set_has_dire_team_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgDOTAMatch::clear_has_dire_team_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgDOTAMatch::clear_dire_team_id() {
  dire_team_id_ = 0u;
  clear_has_dire_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::dire_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.dire_team_id)
  return dire_team_id_;
}
inline void CMsgDOTAMatch::set_dire_team_id(::google::protobuf::uint32 value) {
  set_has_dire_team_id();
  dire_team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.dire_team_id)
}

// optional uint32 leagueid = 22;
inline bool CMsgDOTAMatch::has_leagueid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgDOTAMatch::set_has_leagueid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgDOTAMatch::clear_has_leagueid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgDOTAMatch::clear_leagueid() {
  leagueid_ = 0u;
  clear_has_leagueid();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::leagueid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.leagueid)
  return leagueid_;
}
inline void CMsgDOTAMatch::set_leagueid(::google::protobuf::uint32 value) {
  set_has_leagueid();
  leagueid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.leagueid)
}

// optional string radiant_team_name = 23;
inline bool CMsgDOTAMatch::has_radiant_team_name() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgDOTAMatch::set_has_radiant_team_name() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgDOTAMatch::clear_has_radiant_team_name() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgDOTAMatch::clear_radiant_team_name() {
  if (radiant_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radiant_team_name_->clear();
  }
  clear_has_radiant_team_name();
}
inline const ::std::string& CMsgDOTAMatch::radiant_team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.radiant_team_name)
  return *radiant_team_name_;
}
inline void CMsgDOTAMatch::set_radiant_team_name(const ::std::string& value) {
  set_has_radiant_team_name();
  if (radiant_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radiant_team_name_ = new ::std::string;
  }
  radiant_team_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.radiant_team_name)
}
inline void CMsgDOTAMatch::set_radiant_team_name(const char* value) {
  set_has_radiant_team_name();
  if (radiant_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radiant_team_name_ = new ::std::string;
  }
  radiant_team_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAMatch.radiant_team_name)
}
inline void CMsgDOTAMatch::set_radiant_team_name(const char* value, size_t size) {
  set_has_radiant_team_name();
  if (radiant_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radiant_team_name_ = new ::std::string;
  }
  radiant_team_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAMatch.radiant_team_name)
}
inline ::std::string* CMsgDOTAMatch::mutable_radiant_team_name() {
  set_has_radiant_team_name();
  if (radiant_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radiant_team_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.radiant_team_name)
  return radiant_team_name_;
}
inline ::std::string* CMsgDOTAMatch::release_radiant_team_name() {
  clear_has_radiant_team_name();
  if (radiant_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = radiant_team_name_;
    radiant_team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAMatch::set_allocated_radiant_team_name(::std::string* radiant_team_name) {
  if (radiant_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radiant_team_name_;
  }
  if (radiant_team_name) {
    set_has_radiant_team_name();
    radiant_team_name_ = radiant_team_name;
  } else {
    clear_has_radiant_team_name();
    radiant_team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.radiant_team_name)
}

// optional string dire_team_name = 24;
inline bool CMsgDOTAMatch::has_dire_team_name() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgDOTAMatch::set_has_dire_team_name() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgDOTAMatch::clear_has_dire_team_name() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgDOTAMatch::clear_dire_team_name() {
  if (dire_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dire_team_name_->clear();
  }
  clear_has_dire_team_name();
}
inline const ::std::string& CMsgDOTAMatch::dire_team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.dire_team_name)
  return *dire_team_name_;
}
inline void CMsgDOTAMatch::set_dire_team_name(const ::std::string& value) {
  set_has_dire_team_name();
  if (dire_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dire_team_name_ = new ::std::string;
  }
  dire_team_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.dire_team_name)
}
inline void CMsgDOTAMatch::set_dire_team_name(const char* value) {
  set_has_dire_team_name();
  if (dire_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dire_team_name_ = new ::std::string;
  }
  dire_team_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAMatch.dire_team_name)
}
inline void CMsgDOTAMatch::set_dire_team_name(const char* value, size_t size) {
  set_has_dire_team_name();
  if (dire_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dire_team_name_ = new ::std::string;
  }
  dire_team_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAMatch.dire_team_name)
}
inline ::std::string* CMsgDOTAMatch::mutable_dire_team_name() {
  set_has_dire_team_name();
  if (dire_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dire_team_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.dire_team_name)
  return dire_team_name_;
}
inline ::std::string* CMsgDOTAMatch::release_dire_team_name() {
  clear_has_dire_team_name();
  if (dire_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dire_team_name_;
    dire_team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAMatch::set_allocated_dire_team_name(::std::string* dire_team_name) {
  if (dire_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dire_team_name_;
  }
  if (dire_team_name) {
    set_has_dire_team_name();
    dire_team_name_ = dire_team_name;
  } else {
    clear_has_dire_team_name();
    dire_team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.dire_team_name)
}

// optional uint64 radiant_team_logo = 25;
inline bool CMsgDOTAMatch::has_radiant_team_logo() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgDOTAMatch::set_has_radiant_team_logo() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMsgDOTAMatch::clear_has_radiant_team_logo() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMsgDOTAMatch::clear_radiant_team_logo() {
  radiant_team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_radiant_team_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAMatch::radiant_team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.radiant_team_logo)
  return radiant_team_logo_;
}
inline void CMsgDOTAMatch::set_radiant_team_logo(::google::protobuf::uint64 value) {
  set_has_radiant_team_logo();
  radiant_team_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.radiant_team_logo)
}

// optional uint64 dire_team_logo = 26;
inline bool CMsgDOTAMatch::has_dire_team_logo() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgDOTAMatch::set_has_dire_team_logo() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMsgDOTAMatch::clear_has_dire_team_logo() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMsgDOTAMatch::clear_dire_team_logo() {
  dire_team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_dire_team_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAMatch::dire_team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.dire_team_logo)
  return dire_team_logo_;
}
inline void CMsgDOTAMatch::set_dire_team_logo(::google::protobuf::uint64 value) {
  set_has_dire_team_logo();
  dire_team_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.dire_team_logo)
}

// optional uint32 radiant_team_complete = 27;
inline bool CMsgDOTAMatch::has_radiant_team_complete() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgDOTAMatch::set_has_radiant_team_complete() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CMsgDOTAMatch::clear_has_radiant_team_complete() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CMsgDOTAMatch::clear_radiant_team_complete() {
  radiant_team_complete_ = 0u;
  clear_has_radiant_team_complete();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::radiant_team_complete() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.radiant_team_complete)
  return radiant_team_complete_;
}
inline void CMsgDOTAMatch::set_radiant_team_complete(::google::protobuf::uint32 value) {
  set_has_radiant_team_complete();
  radiant_team_complete_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.radiant_team_complete)
}

// optional uint32 dire_team_complete = 28;
inline bool CMsgDOTAMatch::has_dire_team_complete() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgDOTAMatch::set_has_dire_team_complete() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CMsgDOTAMatch::clear_has_dire_team_complete() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CMsgDOTAMatch::clear_dire_team_complete() {
  dire_team_complete_ = 0u;
  clear_has_dire_team_complete();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::dire_team_complete() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.dire_team_complete)
  return dire_team_complete_;
}
inline void CMsgDOTAMatch::set_dire_team_complete(::google::protobuf::uint32 value) {
  set_has_dire_team_complete();
  dire_team_complete_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.dire_team_complete)
}

// optional uint32 positive_votes = 29;
inline bool CMsgDOTAMatch::has_positive_votes() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgDOTAMatch::set_has_positive_votes() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CMsgDOTAMatch::clear_has_positive_votes() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CMsgDOTAMatch::clear_positive_votes() {
  positive_votes_ = 0u;
  clear_has_positive_votes();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::positive_votes() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.positive_votes)
  return positive_votes_;
}
inline void CMsgDOTAMatch::set_positive_votes(::google::protobuf::uint32 value) {
  set_has_positive_votes();
  positive_votes_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.positive_votes)
}

// optional uint32 negative_votes = 30;
inline bool CMsgDOTAMatch::has_negative_votes() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CMsgDOTAMatch::set_has_negative_votes() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CMsgDOTAMatch::clear_has_negative_votes() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CMsgDOTAMatch::clear_negative_votes() {
  negative_votes_ = 0u;
  clear_has_negative_votes();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::negative_votes() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.negative_votes)
  return negative_votes_;
}
inline void CMsgDOTAMatch::set_negative_votes(::google::protobuf::uint32 value) {
  set_has_negative_votes();
  negative_votes_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.negative_votes)
}

// optional .DOTA_GameMode game_mode = 31 [default = DOTA_GAMEMODE_NONE];
inline bool CMsgDOTAMatch::has_game_mode() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CMsgDOTAMatch::set_has_game_mode() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CMsgDOTAMatch::clear_has_game_mode() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CMsgDOTAMatch::clear_game_mode() {
  game_mode_ = 0;
  clear_has_game_mode();
}
inline ::DOTA_GameMode CMsgDOTAMatch::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.game_mode)
  return static_cast< ::DOTA_GameMode >(game_mode_);
}
inline void CMsgDOTAMatch::set_game_mode(::DOTA_GameMode value) {
  assert(::DOTA_GameMode_IsValid(value));
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.game_mode)
}

// repeated .CMatchHeroSelectEvent picks_bans = 32;
inline int CMsgDOTAMatch::picks_bans_size() const {
  return picks_bans_.size();
}
inline void CMsgDOTAMatch::clear_picks_bans() {
  picks_bans_.Clear();
}
inline const ::CMatchHeroSelectEvent& CMsgDOTAMatch::picks_bans(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.picks_bans)
  return picks_bans_.Get(index);
}
inline ::CMatchHeroSelectEvent* CMsgDOTAMatch::mutable_picks_bans(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.picks_bans)
  return picks_bans_.Mutable(index);
}
inline ::CMatchHeroSelectEvent* CMsgDOTAMatch::add_picks_bans() {
  // @@protoc_insertion_point(field_add:CMsgDOTAMatch.picks_bans)
  return picks_bans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMatchHeroSelectEvent >&
CMsgDOTAMatch::picks_bans() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatch.picks_bans)
  return picks_bans_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMatchHeroSelectEvent >*
CMsgDOTAMatch::mutable_picks_bans() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatch.picks_bans)
  return &picks_bans_;
}

// optional uint64 match_seq_num = 33;
inline bool CMsgDOTAMatch::has_match_seq_num() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CMsgDOTAMatch::set_has_match_seq_num() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CMsgDOTAMatch::clear_has_match_seq_num() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CMsgDOTAMatch::clear_match_seq_num() {
  match_seq_num_ = GOOGLE_ULONGLONG(0);
  clear_has_match_seq_num();
}
inline ::google::protobuf::uint64 CMsgDOTAMatch::match_seq_num() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.match_seq_num)
  return match_seq_num_;
}
inline void CMsgDOTAMatch::set_match_seq_num(::google::protobuf::uint64 value) {
  set_has_match_seq_num();
  match_seq_num_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.match_seq_num)
}

// optional .CMsgDOTAMatch.ReplayState replay_state = 34 [default = REPLAY_AVAILABLE];
inline bool CMsgDOTAMatch::has_replay_state() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CMsgDOTAMatch::set_has_replay_state() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CMsgDOTAMatch::clear_has_replay_state() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CMsgDOTAMatch::clear_replay_state() {
  replay_state_ = 0;
  clear_has_replay_state();
}
inline ::CMsgDOTAMatch_ReplayState CMsgDOTAMatch::replay_state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.replay_state)
  return static_cast< ::CMsgDOTAMatch_ReplayState >(replay_state_);
}
inline void CMsgDOTAMatch::set_replay_state(::CMsgDOTAMatch_ReplayState value) {
  assert(::CMsgDOTAMatch_ReplayState_IsValid(value));
  set_has_replay_state();
  replay_state_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.replay_state)
}

// optional uint32 radiant_guild_id = 35;
inline bool CMsgDOTAMatch::has_radiant_guild_id() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CMsgDOTAMatch::set_has_radiant_guild_id() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CMsgDOTAMatch::clear_has_radiant_guild_id() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CMsgDOTAMatch::clear_radiant_guild_id() {
  radiant_guild_id_ = 0u;
  clear_has_radiant_guild_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::radiant_guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.radiant_guild_id)
  return radiant_guild_id_;
}
inline void CMsgDOTAMatch::set_radiant_guild_id(::google::protobuf::uint32 value) {
  set_has_radiant_guild_id();
  radiant_guild_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.radiant_guild_id)
}

// optional uint32 dire_guild_id = 36;
inline bool CMsgDOTAMatch::has_dire_guild_id() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CMsgDOTAMatch::set_has_dire_guild_id() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CMsgDOTAMatch::clear_has_dire_guild_id() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CMsgDOTAMatch::clear_dire_guild_id() {
  dire_guild_id_ = 0u;
  clear_has_dire_guild_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::dire_guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.dire_guild_id)
  return dire_guild_id_;
}
inline void CMsgDOTAMatch::set_dire_guild_id(::google::protobuf::uint32 value) {
  set_has_dire_guild_id();
  dire_guild_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.dire_guild_id)
}

// optional string radiant_team_tag = 37;
inline bool CMsgDOTAMatch::has_radiant_team_tag() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatch::set_has_radiant_team_tag() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CMsgDOTAMatch::clear_has_radiant_team_tag() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CMsgDOTAMatch::clear_radiant_team_tag() {
  if (radiant_team_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radiant_team_tag_->clear();
  }
  clear_has_radiant_team_tag();
}
inline const ::std::string& CMsgDOTAMatch::radiant_team_tag() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.radiant_team_tag)
  return *radiant_team_tag_;
}
inline void CMsgDOTAMatch::set_radiant_team_tag(const ::std::string& value) {
  set_has_radiant_team_tag();
  if (radiant_team_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radiant_team_tag_ = new ::std::string;
  }
  radiant_team_tag_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.radiant_team_tag)
}
inline void CMsgDOTAMatch::set_radiant_team_tag(const char* value) {
  set_has_radiant_team_tag();
  if (radiant_team_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radiant_team_tag_ = new ::std::string;
  }
  radiant_team_tag_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAMatch.radiant_team_tag)
}
inline void CMsgDOTAMatch::set_radiant_team_tag(const char* value, size_t size) {
  set_has_radiant_team_tag();
  if (radiant_team_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radiant_team_tag_ = new ::std::string;
  }
  radiant_team_tag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAMatch.radiant_team_tag)
}
inline ::std::string* CMsgDOTAMatch::mutable_radiant_team_tag() {
  set_has_radiant_team_tag();
  if (radiant_team_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radiant_team_tag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.radiant_team_tag)
  return radiant_team_tag_;
}
inline ::std::string* CMsgDOTAMatch::release_radiant_team_tag() {
  clear_has_radiant_team_tag();
  if (radiant_team_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = radiant_team_tag_;
    radiant_team_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAMatch::set_allocated_radiant_team_tag(::std::string* radiant_team_tag) {
  if (radiant_team_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radiant_team_tag_;
  }
  if (radiant_team_tag) {
    set_has_radiant_team_tag();
    radiant_team_tag_ = radiant_team_tag;
  } else {
    clear_has_radiant_team_tag();
    radiant_team_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.radiant_team_tag)
}

// optional string dire_team_tag = 38;
inline bool CMsgDOTAMatch::has_dire_team_tag() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatch::set_has_dire_team_tag() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CMsgDOTAMatch::clear_has_dire_team_tag() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CMsgDOTAMatch::clear_dire_team_tag() {
  if (dire_team_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dire_team_tag_->clear();
  }
  clear_has_dire_team_tag();
}
inline const ::std::string& CMsgDOTAMatch::dire_team_tag() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.dire_team_tag)
  return *dire_team_tag_;
}
inline void CMsgDOTAMatch::set_dire_team_tag(const ::std::string& value) {
  set_has_dire_team_tag();
  if (dire_team_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dire_team_tag_ = new ::std::string;
  }
  dire_team_tag_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.dire_team_tag)
}
inline void CMsgDOTAMatch::set_dire_team_tag(const char* value) {
  set_has_dire_team_tag();
  if (dire_team_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dire_team_tag_ = new ::std::string;
  }
  dire_team_tag_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAMatch.dire_team_tag)
}
inline void CMsgDOTAMatch::set_dire_team_tag(const char* value, size_t size) {
  set_has_dire_team_tag();
  if (dire_team_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dire_team_tag_ = new ::std::string;
  }
  dire_team_tag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAMatch.dire_team_tag)
}
inline ::std::string* CMsgDOTAMatch::mutable_dire_team_tag() {
  set_has_dire_team_tag();
  if (dire_team_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dire_team_tag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.dire_team_tag)
  return dire_team_tag_;
}
inline ::std::string* CMsgDOTAMatch::release_dire_team_tag() {
  clear_has_dire_team_tag();
  if (dire_team_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dire_team_tag_;
    dire_team_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAMatch::set_allocated_dire_team_tag(::std::string* dire_team_tag) {
  if (dire_team_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dire_team_tag_;
  }
  if (dire_team_tag) {
    set_has_dire_team_tag();
    dire_team_tag_ = dire_team_tag;
  } else {
    clear_has_dire_team_tag();
    dire_team_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.dire_team_tag)
}

// optional uint32 series_id = 39;
inline bool CMsgDOTAMatch::has_series_id() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CMsgDOTAMatch::set_has_series_id() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CMsgDOTAMatch::clear_has_series_id() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CMsgDOTAMatch::clear_series_id() {
  series_id_ = 0u;
  clear_has_series_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::series_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.series_id)
  return series_id_;
}
inline void CMsgDOTAMatch::set_series_id(::google::protobuf::uint32 value) {
  set_has_series_id();
  series_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.series_id)
}

// optional uint32 series_type = 40;
inline bool CMsgDOTAMatch::has_series_type() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CMsgDOTAMatch::set_has_series_type() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CMsgDOTAMatch::clear_has_series_type() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CMsgDOTAMatch::clear_series_type() {
  series_type_ = 0u;
  clear_has_series_type();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::series_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.series_type)
  return series_type_;
}
inline void CMsgDOTAMatch::set_series_type(::google::protobuf::uint32 value) {
  set_has_series_type();
  series_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.series_type)
}

// repeated .CMsgDOTAMatch.BroadcasterChannel broadcaster_channels = 43;
inline int CMsgDOTAMatch::broadcaster_channels_size() const {
  return broadcaster_channels_.size();
}
inline void CMsgDOTAMatch::clear_broadcaster_channels() {
  broadcaster_channels_.Clear();
}
inline const ::CMsgDOTAMatch_BroadcasterChannel& CMsgDOTAMatch::broadcaster_channels(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.broadcaster_channels)
  return broadcaster_channels_.Get(index);
}
inline ::CMsgDOTAMatch_BroadcasterChannel* CMsgDOTAMatch::mutable_broadcaster_channels(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.broadcaster_channels)
  return broadcaster_channels_.Mutable(index);
}
inline ::CMsgDOTAMatch_BroadcasterChannel* CMsgDOTAMatch::add_broadcaster_channels() {
  // @@protoc_insertion_point(field_add:CMsgDOTAMatch.broadcaster_channels)
  return broadcaster_channels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch_BroadcasterChannel >&
CMsgDOTAMatch::broadcaster_channels() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatch.broadcaster_channels)
  return broadcaster_channels_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch_BroadcasterChannel >*
CMsgDOTAMatch::mutable_broadcaster_channels() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatch.broadcaster_channels)
  return &broadcaster_channels_;
}

// optional uint32 engine = 44;
inline bool CMsgDOTAMatch::has_engine() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CMsgDOTAMatch::set_has_engine() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CMsgDOTAMatch::clear_has_engine() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CMsgDOTAMatch::clear_engine() {
  engine_ = 0u;
  clear_has_engine();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::engine() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.engine)
  return engine_;
}
inline void CMsgDOTAMatch::set_engine(::google::protobuf::uint32 value) {
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.engine)
}

// optional .CMsgDOTAMatch.CustomGameData custom_game_data = 45;
inline bool CMsgDOTAMatch::has_custom_game_data() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CMsgDOTAMatch::set_has_custom_game_data() {
  _has_bits_[1] |= 0x00000040u;
}
inline void CMsgDOTAMatch::clear_has_custom_game_data() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void CMsgDOTAMatch::clear_custom_game_data() {
  if (custom_game_data_ != NULL) custom_game_data_->::CMsgDOTAMatch_CustomGameData::Clear();
  clear_has_custom_game_data();
}
inline const ::CMsgDOTAMatch_CustomGameData& CMsgDOTAMatch::custom_game_data() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.custom_game_data)
  return custom_game_data_ != NULL ? *custom_game_data_ : *default_instance_->custom_game_data_;
}
inline ::CMsgDOTAMatch_CustomGameData* CMsgDOTAMatch::mutable_custom_game_data() {
  set_has_custom_game_data();
  if (custom_game_data_ == NULL) custom_game_data_ = new ::CMsgDOTAMatch_CustomGameData;
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.custom_game_data)
  return custom_game_data_;
}
inline ::CMsgDOTAMatch_CustomGameData* CMsgDOTAMatch::release_custom_game_data() {
  clear_has_custom_game_data();
  ::CMsgDOTAMatch_CustomGameData* temp = custom_game_data_;
  custom_game_data_ = NULL;
  return temp;
}
inline void CMsgDOTAMatch::set_allocated_custom_game_data(::CMsgDOTAMatch_CustomGameData* custom_game_data) {
  delete custom_game_data_;
  custom_game_data_ = custom_game_data;
  if (custom_game_data) {
    set_has_custom_game_data();
  } else {
    clear_has_custom_game_data();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.custom_game_data)
}

// optional uint32 match_flags = 46;
inline bool CMsgDOTAMatch::has_match_flags() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CMsgDOTAMatch::set_has_match_flags() {
  _has_bits_[1] |= 0x00000080u;
}
inline void CMsgDOTAMatch::clear_has_match_flags() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void CMsgDOTAMatch::clear_match_flags() {
  match_flags_ = 0u;
  clear_has_match_flags();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::match_flags() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.match_flags)
  return match_flags_;
}
inline void CMsgDOTAMatch::set_match_flags(::google::protobuf::uint32 value) {
  set_has_match_flags();
  match_flags_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.match_flags)
}

// optional fixed32 private_metadata_key = 47;
inline bool CMsgDOTAMatch::has_private_metadata_key() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CMsgDOTAMatch::set_has_private_metadata_key() {
  _has_bits_[1] |= 0x00000100u;
}
inline void CMsgDOTAMatch::clear_has_private_metadata_key() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void CMsgDOTAMatch::clear_private_metadata_key() {
  private_metadata_key_ = 0u;
  clear_has_private_metadata_key();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::private_metadata_key() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.private_metadata_key)
  return private_metadata_key_;
}
inline void CMsgDOTAMatch::set_private_metadata_key(::google::protobuf::uint32 value) {
  set_has_private_metadata_key();
  private_metadata_key_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.private_metadata_key)
}

// optional uint32 radiant_team_score = 48;
inline bool CMsgDOTAMatch::has_radiant_team_score() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CMsgDOTAMatch::set_has_radiant_team_score() {
  _has_bits_[1] |= 0x00000200u;
}
inline void CMsgDOTAMatch::clear_has_radiant_team_score() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void CMsgDOTAMatch::clear_radiant_team_score() {
  radiant_team_score_ = 0u;
  clear_has_radiant_team_score();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::radiant_team_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.radiant_team_score)
  return radiant_team_score_;
}
inline void CMsgDOTAMatch::set_radiant_team_score(::google::protobuf::uint32 value) {
  set_has_radiant_team_score();
  radiant_team_score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.radiant_team_score)
}

// optional uint32 dire_team_score = 49;
inline bool CMsgDOTAMatch::has_dire_team_score() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CMsgDOTAMatch::set_has_dire_team_score() {
  _has_bits_[1] |= 0x00000400u;
}
inline void CMsgDOTAMatch::clear_has_dire_team_score() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void CMsgDOTAMatch::clear_dire_team_score() {
  dire_team_score_ = 0u;
  clear_has_dire_team_score();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::dire_team_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.dire_team_score)
  return dire_team_score_;
}
inline void CMsgDOTAMatch::set_dire_team_score(::google::protobuf::uint32 value) {
  set_has_dire_team_score();
  dire_team_score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.dire_team_score)
}

// optional .EMatchOutcome match_outcome = 50 [default = k_EMatchOutcome_Unknown];
inline bool CMsgDOTAMatch::has_match_outcome() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void CMsgDOTAMatch::set_has_match_outcome() {
  _has_bits_[1] |= 0x00000800u;
}
inline void CMsgDOTAMatch::clear_has_match_outcome() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void CMsgDOTAMatch::clear_match_outcome() {
  match_outcome_ = 0;
  clear_has_match_outcome();
}
inline ::EMatchOutcome CMsgDOTAMatch::match_outcome() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.match_outcome)
  return static_cast< ::EMatchOutcome >(match_outcome_);
}
inline void CMsgDOTAMatch::set_match_outcome(::EMatchOutcome value) {
  assert(::EMatchOutcome_IsValid(value));
  set_has_match_outcome();
  match_outcome_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.match_outcome)
}

// optional uint32 tournament_id = 51;
inline bool CMsgDOTAMatch::has_tournament_id() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void CMsgDOTAMatch::set_has_tournament_id() {
  _has_bits_[1] |= 0x00001000u;
}
inline void CMsgDOTAMatch::clear_has_tournament_id() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void CMsgDOTAMatch::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::tournament_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.tournament_id)
  return tournament_id_;
}
inline void CMsgDOTAMatch::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.tournament_id)
}

// optional uint32 tournament_round = 52;
inline bool CMsgDOTAMatch::has_tournament_round() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void CMsgDOTAMatch::set_has_tournament_round() {
  _has_bits_[1] |= 0x00002000u;
}
inline void CMsgDOTAMatch::clear_has_tournament_round() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void CMsgDOTAMatch::clear_tournament_round() {
  tournament_round_ = 0u;
  clear_has_tournament_round();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::tournament_round() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.tournament_round)
  return tournament_round_;
}
inline void CMsgDOTAMatch::set_tournament_round(::google::protobuf::uint32 value) {
  set_has_tournament_round();
  tournament_round_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.tournament_round)
}

// optional uint32 pre_game_duration = 53;
inline bool CMsgDOTAMatch::has_pre_game_duration() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void CMsgDOTAMatch::set_has_pre_game_duration() {
  _has_bits_[1] |= 0x00004000u;
}
inline void CMsgDOTAMatch::clear_has_pre_game_duration() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void CMsgDOTAMatch::clear_pre_game_duration() {
  pre_game_duration_ = 0u;
  clear_has_pre_game_duration();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::pre_game_duration() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.pre_game_duration)
  return pre_game_duration_;
}
inline void CMsgDOTAMatch::set_pre_game_duration(::google::protobuf::uint32 value) {
  set_has_pre_game_duration();
  pre_game_duration_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.pre_game_duration)
}

// -------------------------------------------------------------------

// CMsgPlayerCard_StatModifier

// optional uint32 stat = 1;
inline bool CMsgPlayerCard_StatModifier::has_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPlayerCard_StatModifier::set_has_stat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPlayerCard_StatModifier::clear_has_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPlayerCard_StatModifier::clear_stat() {
  stat_ = 0u;
  clear_has_stat();
}
inline ::google::protobuf::uint32 CMsgPlayerCard_StatModifier::stat() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerCard.StatModifier.stat)
  return stat_;
}
inline void CMsgPlayerCard_StatModifier::set_stat(::google::protobuf::uint32 value) {
  set_has_stat();
  stat_ = value;
  // @@protoc_insertion_point(field_set:CMsgPlayerCard.StatModifier.stat)
}

// optional uint32 value = 2;
inline bool CMsgPlayerCard_StatModifier::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPlayerCard_StatModifier::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPlayerCard_StatModifier::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPlayerCard_StatModifier::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 CMsgPlayerCard_StatModifier::value() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerCard.StatModifier.value)
  return value_;
}
inline void CMsgPlayerCard_StatModifier::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:CMsgPlayerCard.StatModifier.value)
}

// -------------------------------------------------------------------

// CMsgPlayerCard

// optional uint32 account_id = 1;
inline bool CMsgPlayerCard::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPlayerCard::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPlayerCard::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPlayerCard::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgPlayerCard::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerCard.account_id)
  return account_id_;
}
inline void CMsgPlayerCard::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPlayerCard.account_id)
}

// repeated .CMsgPlayerCard.StatModifier stat_modifier = 2;
inline int CMsgPlayerCard::stat_modifier_size() const {
  return stat_modifier_.size();
}
inline void CMsgPlayerCard::clear_stat_modifier() {
  stat_modifier_.Clear();
}
inline const ::CMsgPlayerCard_StatModifier& CMsgPlayerCard::stat_modifier(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPlayerCard.stat_modifier)
  return stat_modifier_.Get(index);
}
inline ::CMsgPlayerCard_StatModifier* CMsgPlayerCard::mutable_stat_modifier(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPlayerCard.stat_modifier)
  return stat_modifier_.Mutable(index);
}
inline ::CMsgPlayerCard_StatModifier* CMsgPlayerCard::add_stat_modifier() {
  // @@protoc_insertion_point(field_add:CMsgPlayerCard.stat_modifier)
  return stat_modifier_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgPlayerCard_StatModifier >&
CMsgPlayerCard::stat_modifier() const {
  // @@protoc_insertion_point(field_list:CMsgPlayerCard.stat_modifier)
  return stat_modifier_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgPlayerCard_StatModifier >*
CMsgPlayerCard::mutable_stat_modifier() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPlayerCard.stat_modifier)
  return &stat_modifier_;
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyPlayerStats

// optional uint32 player_account_id = 1;
inline bool CMsgDOTAFantasyPlayerStats::has_player_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_player_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_player_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_player_account_id() {
  player_account_id_ = 0u;
  clear_has_player_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::player_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.player_account_id)
  return player_account_id_;
}
inline void CMsgDOTAFantasyPlayerStats::set_player_account_id(::google::protobuf::uint32 value) {
  set_has_player_account_id();
  player_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.player_account_id)
}

// optional uint64 match_id = 2;
inline bool CMsgDOTAFantasyPlayerStats::has_match_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_match_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
inline ::google::protobuf::uint64 CMsgDOTAFantasyPlayerStats::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.match_id)
  return match_id_;
}
inline void CMsgDOTAFantasyPlayerStats::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.match_id)
}

// optional bool match_completed = 3;
inline bool CMsgDOTAFantasyPlayerStats::has_match_completed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_match_completed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_match_completed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_match_completed() {
  match_completed_ = false;
  clear_has_match_completed();
}
inline bool CMsgDOTAFantasyPlayerStats::match_completed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.match_completed)
  return match_completed_;
}
inline void CMsgDOTAFantasyPlayerStats::set_match_completed(bool value) {
  set_has_match_completed();
  match_completed_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.match_completed)
}

// optional uint32 team_id = 4;
inline bool CMsgDOTAFantasyPlayerStats::has_team_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_team_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.team_id)
  return team_id_;
}
inline void CMsgDOTAFantasyPlayerStats::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.team_id)
}

// optional uint32 league_id = 5;
inline bool CMsgDOTAFantasyPlayerStats::has_league_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_league_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.league_id)
  return league_id_;
}
inline void CMsgDOTAFantasyPlayerStats::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.league_id)
}

// optional uint32 delay = 6;
inline bool CMsgDOTAFantasyPlayerStats::has_delay() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_delay() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_delay() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_delay() {
  delay_ = 0u;
  clear_has_delay();
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::delay() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.delay)
  return delay_;
}
inline void CMsgDOTAFantasyPlayerStats::set_delay(::google::protobuf::uint32 value) {
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.delay)
}

// optional uint32 series_id = 7;
inline bool CMsgDOTAFantasyPlayerStats::has_series_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_series_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_series_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_series_id() {
  series_id_ = 0u;
  clear_has_series_id();
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::series_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.series_id)
  return series_id_;
}
inline void CMsgDOTAFantasyPlayerStats::set_series_id(::google::protobuf::uint32 value) {
  set_has_series_id();
  series_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.series_id)
}

// optional uint32 series_type = 8;
inline bool CMsgDOTAFantasyPlayerStats::has_series_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_series_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_series_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_series_type() {
  series_type_ = 0u;
  clear_has_series_type();
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::series_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.series_type)
  return series_type_;
}
inline void CMsgDOTAFantasyPlayerStats::set_series_type(::google::protobuf::uint32 value) {
  set_has_series_type();
  series_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.series_type)
}

// optional uint32 kills = 10;
inline bool CMsgDOTAFantasyPlayerStats::has_kills() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_kills() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_kills() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.kills)
  return kills_;
}
inline void CMsgDOTAFantasyPlayerStats::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.kills)
}

// optional uint32 deaths = 11;
inline bool CMsgDOTAFantasyPlayerStats::has_deaths() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_deaths() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_deaths() {
  deaths_ = 0u;
  clear_has_deaths();
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.deaths)
  return deaths_;
}
inline void CMsgDOTAFantasyPlayerStats::set_deaths(::google::protobuf::uint32 value) {
  set_has_deaths();
  deaths_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.deaths)
}

// optional uint32 cs = 12;
inline bool CMsgDOTAFantasyPlayerStats::has_cs() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_cs() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_cs() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_cs() {
  cs_ = 0u;
  clear_has_cs();
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::cs() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.cs)
  return cs_;
}
inline void CMsgDOTAFantasyPlayerStats::set_cs(::google::protobuf::uint32 value) {
  set_has_cs();
  cs_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.cs)
}

// optional float gpm = 13;
inline bool CMsgDOTAFantasyPlayerStats::has_gpm() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_gpm() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_gpm() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_gpm() {
  gpm_ = 0;
  clear_has_gpm();
}
inline float CMsgDOTAFantasyPlayerStats::gpm() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.gpm)
  return gpm_;
}
inline void CMsgDOTAFantasyPlayerStats::set_gpm(float value) {
  set_has_gpm();
  gpm_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.gpm)
}

// optional uint32 tower_kills = 14;
inline bool CMsgDOTAFantasyPlayerStats::has_tower_kills() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_tower_kills() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_tower_kills() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_tower_kills() {
  tower_kills_ = 0u;
  clear_has_tower_kills();
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::tower_kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.tower_kills)
  return tower_kills_;
}
inline void CMsgDOTAFantasyPlayerStats::set_tower_kills(::google::protobuf::uint32 value) {
  set_has_tower_kills();
  tower_kills_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.tower_kills)
}

// optional uint32 roshan_kills = 15;
inline bool CMsgDOTAFantasyPlayerStats::has_roshan_kills() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_roshan_kills() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_roshan_kills() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_roshan_kills() {
  roshan_kills_ = 0u;
  clear_has_roshan_kills();
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::roshan_kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.roshan_kills)
  return roshan_kills_;
}
inline void CMsgDOTAFantasyPlayerStats::set_roshan_kills(::google::protobuf::uint32 value) {
  set_has_roshan_kills();
  roshan_kills_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.roshan_kills)
}

// optional float teamfight_participation = 16;
inline bool CMsgDOTAFantasyPlayerStats::has_teamfight_participation() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_teamfight_participation() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_teamfight_participation() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_teamfight_participation() {
  teamfight_participation_ = 0;
  clear_has_teamfight_participation();
}
inline float CMsgDOTAFantasyPlayerStats::teamfight_participation() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.teamfight_participation)
  return teamfight_participation_;
}
inline void CMsgDOTAFantasyPlayerStats::set_teamfight_participation(float value) {
  set_has_teamfight_participation();
  teamfight_participation_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.teamfight_participation)
}

// optional uint32 wards_placed = 17;
inline bool CMsgDOTAFantasyPlayerStats::has_wards_placed() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_wards_placed() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_wards_placed() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_wards_placed() {
  wards_placed_ = 0u;
  clear_has_wards_placed();
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::wards_placed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.wards_placed)
  return wards_placed_;
}
inline void CMsgDOTAFantasyPlayerStats::set_wards_placed(::google::protobuf::uint32 value) {
  set_has_wards_placed();
  wards_placed_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.wards_placed)
}

// optional uint32 camps_stacked = 18;
inline bool CMsgDOTAFantasyPlayerStats::has_camps_stacked() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_camps_stacked() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_camps_stacked() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_camps_stacked() {
  camps_stacked_ = 0u;
  clear_has_camps_stacked();
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::camps_stacked() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.camps_stacked)
  return camps_stacked_;
}
inline void CMsgDOTAFantasyPlayerStats::set_camps_stacked(::google::protobuf::uint32 value) {
  set_has_camps_stacked();
  camps_stacked_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.camps_stacked)
}

// optional uint32 runes_grabbed = 19;
inline bool CMsgDOTAFantasyPlayerStats::has_runes_grabbed() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_runes_grabbed() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_runes_grabbed() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_runes_grabbed() {
  runes_grabbed_ = 0u;
  clear_has_runes_grabbed();
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::runes_grabbed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.runes_grabbed)
  return runes_grabbed_;
}
inline void CMsgDOTAFantasyPlayerStats::set_runes_grabbed(::google::protobuf::uint32 value) {
  set_has_runes_grabbed();
  runes_grabbed_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.runes_grabbed)
}

// optional uint32 first_blood = 20;
inline bool CMsgDOTAFantasyPlayerStats::has_first_blood() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_first_blood() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_first_blood() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_first_blood() {
  first_blood_ = 0u;
  clear_has_first_blood();
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::first_blood() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.first_blood)
  return first_blood_;
}
inline void CMsgDOTAFantasyPlayerStats::set_first_blood(::google::protobuf::uint32 value) {
  set_has_first_blood();
  first_blood_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.first_blood)
}

// optional float stuns = 21;
inline bool CMsgDOTAFantasyPlayerStats::has_stuns() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_stuns() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_stuns() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_stuns() {
  stuns_ = 0;
  clear_has_stuns();
}
inline float CMsgDOTAFantasyPlayerStats::stuns() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.stuns)
  return stuns_;
}
inline void CMsgDOTAFantasyPlayerStats::set_stuns(float value) {
  set_has_stuns();
  stuns_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.stuns)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyPlayerMatchStats

// repeated .CMsgDOTAFantasyPlayerStats matches = 1;
inline int CMsgDOTAFantasyPlayerMatchStats::matches_size() const {
  return matches_.size();
}
inline void CMsgDOTAFantasyPlayerMatchStats::clear_matches() {
  matches_.Clear();
}
inline const ::CMsgDOTAFantasyPlayerStats& CMsgDOTAFantasyPlayerMatchStats::matches(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerMatchStats.matches)
  return matches_.Get(index);
}
inline ::CMsgDOTAFantasyPlayerStats* CMsgDOTAFantasyPlayerMatchStats::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyPlayerMatchStats.matches)
  return matches_.Mutable(index);
}
inline ::CMsgDOTAFantasyPlayerStats* CMsgDOTAFantasyPlayerMatchStats::add_matches() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyPlayerMatchStats.matches)
  return matches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats >&
CMsgDOTAFantasyPlayerMatchStats::matches() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyPlayerMatchStats.matches)
  return matches_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats >*
CMsgDOTAFantasyPlayerMatchStats::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyPlayerMatchStats.matches)
  return &matches_;
}

// -------------------------------------------------------------------

// CMsgDOTABotDebugInfo_Bot_Mode

// optional uint32 mode_id = 1;
inline bool CMsgDOTABotDebugInfo_Bot_Mode::has_mode_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::set_has_mode_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::clear_has_mode_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::clear_mode_id() {
  mode_id_ = 0u;
  clear_has_mode_id();
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot_Mode::mode_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.Mode.mode_id)
  return mode_id_;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::set_mode_id(::google::protobuf::uint32 value) {
  set_has_mode_id();
  mode_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.Mode.mode_id)
}

// optional float desire = 2;
inline bool CMsgDOTABotDebugInfo_Bot_Mode::has_desire() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::set_has_desire() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::clear_has_desire() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::clear_desire() {
  desire_ = 0;
  clear_has_desire();
}
inline float CMsgDOTABotDebugInfo_Bot_Mode::desire() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.Mode.desire)
  return desire_;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::set_desire(float value) {
  set_has_desire();
  desire_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.Mode.desire)
}

// optional uint32 target_entity = 3;
inline bool CMsgDOTABotDebugInfo_Bot_Mode::has_target_entity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::set_has_target_entity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::clear_has_target_entity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::clear_target_entity() {
  target_entity_ = 0u;
  clear_has_target_entity();
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot_Mode::target_entity() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.Mode.target_entity)
  return target_entity_;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::set_target_entity(::google::protobuf::uint32 value) {
  set_has_target_entity();
  target_entity_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.Mode.target_entity)
}

// optional uint32 target_x = 4;
inline bool CMsgDOTABotDebugInfo_Bot_Mode::has_target_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::set_has_target_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::clear_has_target_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::clear_target_x() {
  target_x_ = 0u;
  clear_has_target_x();
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot_Mode::target_x() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.Mode.target_x)
  return target_x_;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::set_target_x(::google::protobuf::uint32 value) {
  set_has_target_x();
  target_x_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.Mode.target_x)
}

// optional uint32 target_y = 5;
inline bool CMsgDOTABotDebugInfo_Bot_Mode::has_target_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::set_has_target_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::clear_has_target_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::clear_target_y() {
  target_y_ = 0u;
  clear_has_target_y();
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot_Mode::target_y() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.Mode.target_y)
  return target_y_;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::set_target_y(::google::protobuf::uint32 value) {
  set_has_target_y();
  target_y_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.Mode.target_y)
}

// optional uint32 target_z = 6;
inline bool CMsgDOTABotDebugInfo_Bot_Mode::has_target_z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::set_has_target_z() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::clear_has_target_z() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::clear_target_z() {
  target_z_ = 0u;
  clear_has_target_z();
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot_Mode::target_z() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.Mode.target_z)
  return target_z_;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::set_target_z(::google::protobuf::uint32 value) {
  set_has_target_z();
  target_z_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.Mode.target_z)
}

// -------------------------------------------------------------------

// CMsgDOTABotDebugInfo_Bot_Action

// optional uint32 action_id = 1;
inline bool CMsgDOTABotDebugInfo_Bot_Action::has_action_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot_Action::set_has_action_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTABotDebugInfo_Bot_Action::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTABotDebugInfo_Bot_Action::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot_Action::action_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.Action.action_id)
  return action_id_;
}
inline void CMsgDOTABotDebugInfo_Bot_Action::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.Action.action_id)
}

// optional string action_target = 2;
inline bool CMsgDOTABotDebugInfo_Bot_Action::has_action_target() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot_Action::set_has_action_target() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTABotDebugInfo_Bot_Action::clear_has_action_target() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTABotDebugInfo_Bot_Action::clear_action_target() {
  if (action_target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    action_target_->clear();
  }
  clear_has_action_target();
}
inline const ::std::string& CMsgDOTABotDebugInfo_Bot_Action::action_target() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.Action.action_target)
  return *action_target_;
}
inline void CMsgDOTABotDebugInfo_Bot_Action::set_action_target(const ::std::string& value) {
  set_has_action_target();
  if (action_target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    action_target_ = new ::std::string;
  }
  action_target_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.Action.action_target)
}
inline void CMsgDOTABotDebugInfo_Bot_Action::set_action_target(const char* value) {
  set_has_action_target();
  if (action_target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    action_target_ = new ::std::string;
  }
  action_target_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTABotDebugInfo.Bot.Action.action_target)
}
inline void CMsgDOTABotDebugInfo_Bot_Action::set_action_target(const char* value, size_t size) {
  set_has_action_target();
  if (action_target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    action_target_ = new ::std::string;
  }
  action_target_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTABotDebugInfo.Bot.Action.action_target)
}
inline ::std::string* CMsgDOTABotDebugInfo_Bot_Action::mutable_action_target() {
  set_has_action_target();
  if (action_target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    action_target_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTABotDebugInfo.Bot.Action.action_target)
  return action_target_;
}
inline ::std::string* CMsgDOTABotDebugInfo_Bot_Action::release_action_target() {
  clear_has_action_target();
  if (action_target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = action_target_;
    action_target_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTABotDebugInfo_Bot_Action::set_allocated_action_target(::std::string* action_target) {
  if (action_target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete action_target_;
  }
  if (action_target) {
    set_has_action_target();
    action_target_ = action_target;
  } else {
    clear_has_action_target();
    action_target_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTABotDebugInfo.Bot.Action.action_target)
}

// -------------------------------------------------------------------

// CMsgDOTABotDebugInfo_Bot

// optional uint32 player_owner_id = 1;
inline bool CMsgDOTABotDebugInfo_Bot::has_player_owner_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot::set_has_player_owner_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_has_player_owner_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_player_owner_id() {
  player_owner_id_ = 0u;
  clear_has_player_owner_id();
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot::player_owner_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.player_owner_id)
  return player_owner_id_;
}
inline void CMsgDOTABotDebugInfo_Bot::set_player_owner_id(::google::protobuf::uint32 value) {
  set_has_player_owner_id();
  player_owner_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.player_owner_id)
}

// optional uint32 hero_id = 2;
inline bool CMsgDOTABotDebugInfo_Bot::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.hero_id)
  return hero_id_;
}
inline void CMsgDOTABotDebugInfo_Bot::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.hero_id)
}

// optional uint32 difficulty = 3;
inline bool CMsgDOTABotDebugInfo_Bot::has_difficulty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot::set_has_difficulty() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_has_difficulty() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_difficulty() {
  difficulty_ = 0u;
  clear_has_difficulty();
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot::difficulty() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.difficulty)
  return difficulty_;
}
inline void CMsgDOTABotDebugInfo_Bot::set_difficulty(::google::protobuf::uint32 value) {
  set_has_difficulty();
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.difficulty)
}

// optional uint32 power_current = 4;
inline bool CMsgDOTABotDebugInfo_Bot::has_power_current() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot::set_has_power_current() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_has_power_current() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_power_current() {
  power_current_ = 0u;
  clear_has_power_current();
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot::power_current() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.power_current)
  return power_current_;
}
inline void CMsgDOTABotDebugInfo_Bot::set_power_current(::google::protobuf::uint32 value) {
  set_has_power_current();
  power_current_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.power_current)
}

// optional uint32 power_max = 5;
inline bool CMsgDOTABotDebugInfo_Bot::has_power_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot::set_has_power_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_has_power_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_power_max() {
  power_max_ = 0u;
  clear_has_power_max();
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot::power_max() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.power_max)
  return power_max_;
}
inline void CMsgDOTABotDebugInfo_Bot::set_power_max(::google::protobuf::uint32 value) {
  set_has_power_max();
  power_max_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.power_max)
}

// optional uint32 move_target_x = 6;
inline bool CMsgDOTABotDebugInfo_Bot::has_move_target_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot::set_has_move_target_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_has_move_target_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_move_target_x() {
  move_target_x_ = 0u;
  clear_has_move_target_x();
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot::move_target_x() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.move_target_x)
  return move_target_x_;
}
inline void CMsgDOTABotDebugInfo_Bot::set_move_target_x(::google::protobuf::uint32 value) {
  set_has_move_target_x();
  move_target_x_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.move_target_x)
}

// optional uint32 move_target_y = 7;
inline bool CMsgDOTABotDebugInfo_Bot::has_move_target_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot::set_has_move_target_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_has_move_target_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_move_target_y() {
  move_target_y_ = 0u;
  clear_has_move_target_y();
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot::move_target_y() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.move_target_y)
  return move_target_y_;
}
inline void CMsgDOTABotDebugInfo_Bot::set_move_target_y(::google::protobuf::uint32 value) {
  set_has_move_target_y();
  move_target_y_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.move_target_y)
}

// optional uint32 move_target_z = 8;
inline bool CMsgDOTABotDebugInfo_Bot::has_move_target_z() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot::set_has_move_target_z() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_has_move_target_z() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_move_target_z() {
  move_target_z_ = 0u;
  clear_has_move_target_z();
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot::move_target_z() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.move_target_z)
  return move_target_z_;
}
inline void CMsgDOTABotDebugInfo_Bot::set_move_target_z(::google::protobuf::uint32 value) {
  set_has_move_target_z();
  move_target_z_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.move_target_z)
}

// optional uint32 active_mode_id = 9;
inline bool CMsgDOTABotDebugInfo_Bot::has_active_mode_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot::set_has_active_mode_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_has_active_mode_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_active_mode_id() {
  active_mode_id_ = 0u;
  clear_has_active_mode_id();
}
inline ::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot::active_mode_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.active_mode_id)
  return active_mode_id_;
}
inline void CMsgDOTABotDebugInfo_Bot::set_active_mode_id(::google::protobuf::uint32 value) {
  set_has_active_mode_id();
  active_mode_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.active_mode_id)
}

// optional float execution_time = 10;
inline bool CMsgDOTABotDebugInfo_Bot::has_execution_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot::set_has_execution_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_has_execution_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_execution_time() {
  execution_time_ = 0;
  clear_has_execution_time();
}
inline float CMsgDOTABotDebugInfo_Bot::execution_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.execution_time)
  return execution_time_;
}
inline void CMsgDOTABotDebugInfo_Bot::set_execution_time(float value) {
  set_has_execution_time();
  execution_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.execution_time)
}

// repeated .CMsgDOTABotDebugInfo.Bot.Mode modes = 11;
inline int CMsgDOTABotDebugInfo_Bot::modes_size() const {
  return modes_.size();
}
inline void CMsgDOTABotDebugInfo_Bot::clear_modes() {
  modes_.Clear();
}
inline const ::CMsgDOTABotDebugInfo_Bot_Mode& CMsgDOTABotDebugInfo_Bot::modes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.modes)
  return modes_.Get(index);
}
inline ::CMsgDOTABotDebugInfo_Bot_Mode* CMsgDOTABotDebugInfo_Bot::mutable_modes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTABotDebugInfo.Bot.modes)
  return modes_.Mutable(index);
}
inline ::CMsgDOTABotDebugInfo_Bot_Mode* CMsgDOTABotDebugInfo_Bot::add_modes() {
  // @@protoc_insertion_point(field_add:CMsgDOTABotDebugInfo.Bot.modes)
  return modes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTABotDebugInfo_Bot_Mode >&
CMsgDOTABotDebugInfo_Bot::modes() const {
  // @@protoc_insertion_point(field_list:CMsgDOTABotDebugInfo.Bot.modes)
  return modes_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTABotDebugInfo_Bot_Mode >*
CMsgDOTABotDebugInfo_Bot::mutable_modes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTABotDebugInfo.Bot.modes)
  return &modes_;
}

// optional .CMsgDOTABotDebugInfo.Bot.Action action = 12;
inline bool CMsgDOTABotDebugInfo_Bot::has_action() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTABotDebugInfo_Bot::set_has_action() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_has_action() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgDOTABotDebugInfo_Bot::clear_action() {
  if (action_ != NULL) action_->::CMsgDOTABotDebugInfo_Bot_Action::Clear();
  clear_has_action();
}
inline const ::CMsgDOTABotDebugInfo_Bot_Action& CMsgDOTABotDebugInfo_Bot::action() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.action)
  return action_ != NULL ? *action_ : *default_instance_->action_;
}
inline ::CMsgDOTABotDebugInfo_Bot_Action* CMsgDOTABotDebugInfo_Bot::mutable_action() {
  set_has_action();
  if (action_ == NULL) action_ = new ::CMsgDOTABotDebugInfo_Bot_Action;
  // @@protoc_insertion_point(field_mutable:CMsgDOTABotDebugInfo.Bot.action)
  return action_;
}
inline ::CMsgDOTABotDebugInfo_Bot_Action* CMsgDOTABotDebugInfo_Bot::release_action() {
  clear_has_action();
  ::CMsgDOTABotDebugInfo_Bot_Action* temp = action_;
  action_ = NULL;
  return temp;
}
inline void CMsgDOTABotDebugInfo_Bot::set_allocated_action(::CMsgDOTABotDebugInfo_Bot_Action* action) {
  delete action_;
  action_ = action;
  if (action) {
    set_has_action();
  } else {
    clear_has_action();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTABotDebugInfo.Bot.action)
}

// -------------------------------------------------------------------

// CMsgDOTABotDebugInfo

// repeated .CMsgDOTABotDebugInfo.Bot bots = 1;
inline int CMsgDOTABotDebugInfo::bots_size() const {
  return bots_.size();
}
inline void CMsgDOTABotDebugInfo::clear_bots() {
  bots_.Clear();
}
inline const ::CMsgDOTABotDebugInfo_Bot& CMsgDOTABotDebugInfo::bots(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.bots)
  return bots_.Get(index);
}
inline ::CMsgDOTABotDebugInfo_Bot* CMsgDOTABotDebugInfo::mutable_bots(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTABotDebugInfo.bots)
  return bots_.Mutable(index);
}
inline ::CMsgDOTABotDebugInfo_Bot* CMsgDOTABotDebugInfo::add_bots() {
  // @@protoc_insertion_point(field_add:CMsgDOTABotDebugInfo.bots)
  return bots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTABotDebugInfo_Bot >&
CMsgDOTABotDebugInfo::bots() const {
  // @@protoc_insertion_point(field_list:CMsgDOTABotDebugInfo.bots)
  return bots_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTABotDebugInfo_Bot >*
CMsgDOTABotDebugInfo::mutable_bots() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTABotDebugInfo.bots)
  return &bots_;
}

// optional float desire_push_lane_top = 2;
inline bool CMsgDOTABotDebugInfo::has_desire_push_lane_top() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTABotDebugInfo::set_has_desire_push_lane_top() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTABotDebugInfo::clear_has_desire_push_lane_top() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTABotDebugInfo::clear_desire_push_lane_top() {
  desire_push_lane_top_ = 0;
  clear_has_desire_push_lane_top();
}
inline float CMsgDOTABotDebugInfo::desire_push_lane_top() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.desire_push_lane_top)
  return desire_push_lane_top_;
}
inline void CMsgDOTABotDebugInfo::set_desire_push_lane_top(float value) {
  set_has_desire_push_lane_top();
  desire_push_lane_top_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.desire_push_lane_top)
}

// optional float desire_push_lane_mid = 3;
inline bool CMsgDOTABotDebugInfo::has_desire_push_lane_mid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTABotDebugInfo::set_has_desire_push_lane_mid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTABotDebugInfo::clear_has_desire_push_lane_mid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTABotDebugInfo::clear_desire_push_lane_mid() {
  desire_push_lane_mid_ = 0;
  clear_has_desire_push_lane_mid();
}
inline float CMsgDOTABotDebugInfo::desire_push_lane_mid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.desire_push_lane_mid)
  return desire_push_lane_mid_;
}
inline void CMsgDOTABotDebugInfo::set_desire_push_lane_mid(float value) {
  set_has_desire_push_lane_mid();
  desire_push_lane_mid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.desire_push_lane_mid)
}

// optional float desire_push_lane_bot = 4;
inline bool CMsgDOTABotDebugInfo::has_desire_push_lane_bot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTABotDebugInfo::set_has_desire_push_lane_bot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTABotDebugInfo::clear_has_desire_push_lane_bot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTABotDebugInfo::clear_desire_push_lane_bot() {
  desire_push_lane_bot_ = 0;
  clear_has_desire_push_lane_bot();
}
inline float CMsgDOTABotDebugInfo::desire_push_lane_bot() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.desire_push_lane_bot)
  return desire_push_lane_bot_;
}
inline void CMsgDOTABotDebugInfo::set_desire_push_lane_bot(float value) {
  set_has_desire_push_lane_bot();
  desire_push_lane_bot_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.desire_push_lane_bot)
}

// optional float desire_defend_lane_top = 5;
inline bool CMsgDOTABotDebugInfo::has_desire_defend_lane_top() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTABotDebugInfo::set_has_desire_defend_lane_top() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTABotDebugInfo::clear_has_desire_defend_lane_top() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTABotDebugInfo::clear_desire_defend_lane_top() {
  desire_defend_lane_top_ = 0;
  clear_has_desire_defend_lane_top();
}
inline float CMsgDOTABotDebugInfo::desire_defend_lane_top() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.desire_defend_lane_top)
  return desire_defend_lane_top_;
}
inline void CMsgDOTABotDebugInfo::set_desire_defend_lane_top(float value) {
  set_has_desire_defend_lane_top();
  desire_defend_lane_top_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.desire_defend_lane_top)
}

// optional float desire_defend_lane_mid = 6;
inline bool CMsgDOTABotDebugInfo::has_desire_defend_lane_mid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTABotDebugInfo::set_has_desire_defend_lane_mid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTABotDebugInfo::clear_has_desire_defend_lane_mid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTABotDebugInfo::clear_desire_defend_lane_mid() {
  desire_defend_lane_mid_ = 0;
  clear_has_desire_defend_lane_mid();
}
inline float CMsgDOTABotDebugInfo::desire_defend_lane_mid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.desire_defend_lane_mid)
  return desire_defend_lane_mid_;
}
inline void CMsgDOTABotDebugInfo::set_desire_defend_lane_mid(float value) {
  set_has_desire_defend_lane_mid();
  desire_defend_lane_mid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.desire_defend_lane_mid)
}

// optional float desire_defend_lane_bot = 7;
inline bool CMsgDOTABotDebugInfo::has_desire_defend_lane_bot() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTABotDebugInfo::set_has_desire_defend_lane_bot() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTABotDebugInfo::clear_has_desire_defend_lane_bot() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTABotDebugInfo::clear_desire_defend_lane_bot() {
  desire_defend_lane_bot_ = 0;
  clear_has_desire_defend_lane_bot();
}
inline float CMsgDOTABotDebugInfo::desire_defend_lane_bot() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.desire_defend_lane_bot)
  return desire_defend_lane_bot_;
}
inline void CMsgDOTABotDebugInfo::set_desire_defend_lane_bot(float value) {
  set_has_desire_defend_lane_bot();
  desire_defend_lane_bot_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.desire_defend_lane_bot)
}

// optional float desire_farm_lane_top = 8;
inline bool CMsgDOTABotDebugInfo::has_desire_farm_lane_top() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTABotDebugInfo::set_has_desire_farm_lane_top() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTABotDebugInfo::clear_has_desire_farm_lane_top() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTABotDebugInfo::clear_desire_farm_lane_top() {
  desire_farm_lane_top_ = 0;
  clear_has_desire_farm_lane_top();
}
inline float CMsgDOTABotDebugInfo::desire_farm_lane_top() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.desire_farm_lane_top)
  return desire_farm_lane_top_;
}
inline void CMsgDOTABotDebugInfo::set_desire_farm_lane_top(float value) {
  set_has_desire_farm_lane_top();
  desire_farm_lane_top_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.desire_farm_lane_top)
}

// optional float desire_farm_lane_mid = 9;
inline bool CMsgDOTABotDebugInfo::has_desire_farm_lane_mid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTABotDebugInfo::set_has_desire_farm_lane_mid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTABotDebugInfo::clear_has_desire_farm_lane_mid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTABotDebugInfo::clear_desire_farm_lane_mid() {
  desire_farm_lane_mid_ = 0;
  clear_has_desire_farm_lane_mid();
}
inline float CMsgDOTABotDebugInfo::desire_farm_lane_mid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.desire_farm_lane_mid)
  return desire_farm_lane_mid_;
}
inline void CMsgDOTABotDebugInfo::set_desire_farm_lane_mid(float value) {
  set_has_desire_farm_lane_mid();
  desire_farm_lane_mid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.desire_farm_lane_mid)
}

// optional float desire_farm_lane_bot = 10;
inline bool CMsgDOTABotDebugInfo::has_desire_farm_lane_bot() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTABotDebugInfo::set_has_desire_farm_lane_bot() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTABotDebugInfo::clear_has_desire_farm_lane_bot() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTABotDebugInfo::clear_desire_farm_lane_bot() {
  desire_farm_lane_bot_ = 0;
  clear_has_desire_farm_lane_bot();
}
inline float CMsgDOTABotDebugInfo::desire_farm_lane_bot() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.desire_farm_lane_bot)
  return desire_farm_lane_bot_;
}
inline void CMsgDOTABotDebugInfo::set_desire_farm_lane_bot(float value) {
  set_has_desire_farm_lane_bot();
  desire_farm_lane_bot_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.desire_farm_lane_bot)
}

// optional float desire_farm_roshan = 11;
inline bool CMsgDOTABotDebugInfo::has_desire_farm_roshan() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTABotDebugInfo::set_has_desire_farm_roshan() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgDOTABotDebugInfo::clear_has_desire_farm_roshan() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgDOTABotDebugInfo::clear_desire_farm_roshan() {
  desire_farm_roshan_ = 0;
  clear_has_desire_farm_roshan();
}
inline float CMsgDOTABotDebugInfo::desire_farm_roshan() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.desire_farm_roshan)
  return desire_farm_roshan_;
}
inline void CMsgDOTABotDebugInfo::set_desire_farm_roshan(float value) {
  set_has_desire_farm_roshan();
  desire_farm_roshan_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.desire_farm_roshan)
}

// optional float execution_time = 12;
inline bool CMsgDOTABotDebugInfo::has_execution_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTABotDebugInfo::set_has_execution_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgDOTABotDebugInfo::clear_has_execution_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgDOTABotDebugInfo::clear_execution_time() {
  execution_time_ = 0;
  clear_has_execution_time();
}
inline float CMsgDOTABotDebugInfo::execution_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.execution_time)
  return execution_time_;
}
inline void CMsgDOTABotDebugInfo::set_execution_time(float value) {
  set_has_execution_time();
  execution_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.execution_time)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CMsgDOTAProfileCard_EStatID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAProfileCard_EStatID>() {
  return ::CMsgDOTAProfileCard_EStatID_descriptor();
}
template <> struct is_proto_enum< ::CSODOTAPlayerChallenge_EFlags> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSODOTAPlayerChallenge_EFlags>() {
  return ::CSODOTAPlayerChallenge_EFlags_descriptor();
}
template <> struct is_proto_enum< ::CMsgGCRerollPlayerChallengeResponse_EResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGCRerollPlayerChallengeResponse_EResult>() {
  return ::CMsgGCRerollPlayerChallengeResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTARealtimeGameStats_GraphData_eStat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTARealtimeGameStats_GraphData_eStat>() {
  return ::CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTARealtimeGameStats_GraphData_eLocation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTARealtimeGameStats_GraphData_eLocation>() {
  return ::CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTASeasonRewards_ERewardType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTASeasonRewards_ERewardType>() {
  return ::CMsgDOTASeasonRewards_ERewardType_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTASeasonPredictions_ePredictionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTASeasonPredictions_ePredictionType>() {
  return ::CMsgDOTASeasonPredictions_ePredictionType_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTASeasonPredictions_eAnswerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTASeasonPredictions_eAnswerType>() {
  return ::CMsgDOTASeasonPredictions_eAnswerType_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTASeasonPredictions_eResolutionType_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTASeasonPredictions_eResolutionType_t>() {
  return ::CMsgDOTASeasonPredictions_eResolutionType_t_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t>() {
  return ::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTASeasonPredictions_eRawValueType_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTASeasonPredictions_eRawValueType_t>() {
  return ::CMsgDOTASeasonPredictions_eRawValueType_t_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAMatch_ReplayState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAMatch_ReplayState>() {
  return ::CMsgDOTAMatch_ReplayState_descriptor();
}
template <> struct is_proto_enum< ::ESpecialPingValue> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ESpecialPingValue>() {
  return ::ESpecialPingValue_descriptor();
}
template <> struct is_proto_enum< ::EDOTAGCSessionNeed> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EDOTAGCSessionNeed>() {
  return ::EDOTAGCSessionNeed_descriptor();
}
template <> struct is_proto_enum< ::DOTA_TournamentEvents> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTA_TournamentEvents>() {
  return ::DOTA_TournamentEvents_descriptor();
}
template <> struct is_proto_enum< ::DOTA_COMBATLOG_TYPES> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTA_COMBATLOG_TYPES>() {
  return ::DOTA_COMBATLOG_TYPES_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dota_5fgcmessages_5fcommon_2eproto__INCLUDED
