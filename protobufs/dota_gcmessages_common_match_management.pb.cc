// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common_match_management.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_gcmessages_common_match_management.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CSODOTAPartyMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTAPartyMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSODOTAParty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTAParty_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSODOTAParty_State_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CSODOTAPartyInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTAPartyInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSODOTAPartyInvite_PartyMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTAPartyInvite_PartyMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSODOTALobbyInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTALobbyInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSODOTALobbyInvite_LobbyMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTALobbyInvite_LobbyMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLeaverState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLeaverState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTALobbyMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTALobbyMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTALobbyMember_CDOTALobbyMemberXPBonus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTALobbyMember_CDOTALobbyMemberXPBonus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLobbyTeamDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLobbyTeamDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLobbyTimedRewardDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLobbyTimedRewardDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLobbyBroadcastChannelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLobbyBroadcastChannelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSODOTALobby_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTALobby_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSODOTALobby_CExtraMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTALobby_CExtraMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSODOTALobby_State_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CSODOTALobby_LobbyType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgLobbyPlaytestDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLobbyPlaytestDetails_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LobbyDotaTVDelay_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LobbyDotaPauseSetting_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto() {
  protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dota_gcmessages_common_match_management.proto");
  GOOGLE_CHECK(file != NULL);
  CSODOTAPartyMember_descriptor_ = file->message_type(0);
  static const int CSODOTAPartyMember_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, partner_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, is_coach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, region_ping_codes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, region_ping_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, region_ping_failed_bitmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, tourney_skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, tourney_buyin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, tourney_prevent_until_),
  };
  CSODOTAPartyMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSODOTAPartyMember_descriptor_,
      CSODOTAPartyMember::default_instance_,
      CSODOTAPartyMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSODOTAPartyMember));
  CSODOTAParty_descriptor_ = file->message_type(1);
  static const int CSODOTAParty_offsets_[42] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, member_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, game_modes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, effective_started_matchmaking_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, raw_started_matchmaking_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, attempt_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, attempt_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, matchgroups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, low_priority_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, match_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, bot_difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, team_ui_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, team_base_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, match_disabled_until_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, match_disabled_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, matchmaking_max_range_minutes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, matchlanguages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, map_preference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, open_guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, common_guilds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, low_priority_games_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, active_ingame_events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, open_for_join_requests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, sent_invites_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, recv_invites_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, account_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, region_select_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, exclusive_tournament_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, tourney_division_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, tourney_schedule_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, tourney_skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, tourney_bracket_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, tourney_queue_deadline_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, tourney_queue_deadline_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, party_builder_slots_to_fill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, party_builder_match_groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, party_builder_start_time_),
  };
  CSODOTAParty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSODOTAParty_descriptor_,
      CSODOTAParty::default_instance_,
      CSODOTAParty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSODOTAParty));
  CSODOTAParty_State_descriptor_ = CSODOTAParty_descriptor_->enum_type(0);
  CSODOTAPartyInvite_descriptor_ = file->message_type(2);
  static const int CSODOTAPartyInvite_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, sender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, sender_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, low_priority_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, as_coach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, invite_gid_),
  };
  CSODOTAPartyInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSODOTAPartyInvite_descriptor_,
      CSODOTAPartyInvite::default_instance_,
      CSODOTAPartyInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSODOTAPartyInvite));
  CSODOTAPartyInvite_PartyMember_descriptor_ = CSODOTAPartyInvite_descriptor_->nested_type(0);
  static const int CSODOTAPartyInvite_PartyMember_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite_PartyMember, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite_PartyMember, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite_PartyMember, is_coach_),
  };
  CSODOTAPartyInvite_PartyMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSODOTAPartyInvite_PartyMember_descriptor_,
      CSODOTAPartyInvite_PartyMember::default_instance_,
      CSODOTAPartyInvite_PartyMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite_PartyMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite_PartyMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSODOTAPartyInvite_PartyMember));
  CSODOTALobbyInvite_descriptor_ = file->message_type(3);
  static const int CSODOTALobbyInvite_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, sender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, sender_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, custom_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, invite_gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, custom_game_crc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, custom_game_timestamp_),
  };
  CSODOTALobbyInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSODOTALobbyInvite_descriptor_,
      CSODOTALobbyInvite::default_instance_,
      CSODOTALobbyInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSODOTALobbyInvite));
  CSODOTALobbyInvite_LobbyMember_descriptor_ = CSODOTALobbyInvite_descriptor_->nested_type(0);
  static const int CSODOTALobbyInvite_LobbyMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite_LobbyMember, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite_LobbyMember, steam_id_),
  };
  CSODOTALobbyInvite_LobbyMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSODOTALobbyInvite_LobbyMember_descriptor_,
      CSODOTALobbyInvite_LobbyMember::default_instance_,
      CSODOTALobbyInvite_LobbyMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite_LobbyMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite_LobbyMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSODOTALobbyInvite_LobbyMember));
  CMsgLeaverState_descriptor_ = file->message_type(4);
  static const int CMsgLeaverState_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, lobby_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, game_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, leaver_detected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, first_blood_happened_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, discard_match_results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, mass_disconnect_),
  };
  CMsgLeaverState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLeaverState_descriptor_,
      CMsgLeaverState::default_instance_,
      CMsgLeaverState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLeaverState));
  CDOTALobbyMember_descriptor_ = file->message_type(5);
  static const int CDOTALobbyMember_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, meta_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, meta_xp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, meta_xp_awarded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, leaver_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, leaver_actions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, prize_def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, disabled_hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, partner_account_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, enabled_hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, coach_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, nexon_pc_bang_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, nexon_pc_bang_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, xp_bonuses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, rank_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, cameraman_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, custom_game_product_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, lobby_mvp_vote_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, search_match_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, favorite_team_and_quality_),
  };
  CDOTALobbyMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTALobbyMember_descriptor_,
      CDOTALobbyMember::default_instance_,
      CDOTALobbyMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTALobbyMember));
  CDOTALobbyMember_CDOTALobbyMemberXPBonus_descriptor_ = CDOTALobbyMember_descriptor_->nested_type(0);
  static const int CDOTALobbyMember_CDOTALobbyMemberXPBonus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember_CDOTALobbyMemberXPBonus, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember_CDOTALobbyMemberXPBonus, xp_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember_CDOTALobbyMemberXPBonus, source_key_),
  };
  CDOTALobbyMember_CDOTALobbyMemberXPBonus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTALobbyMember_CDOTALobbyMemberXPBonus_descriptor_,
      CDOTALobbyMember_CDOTALobbyMemberXPBonus::default_instance_,
      CDOTALobbyMember_CDOTALobbyMemberXPBonus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember_CDOTALobbyMemberXPBonus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember_CDOTALobbyMemberXPBonus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTALobbyMember_CDOTALobbyMemberXPBonus));
  CLobbyTeamDetails_descriptor_ = file->message_type(6);
  static const int CLobbyTeamDetails_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_base_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_banner_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_complete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, guild_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, guild_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, guild_base_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, guild_banner_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, rank_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, is_home_team_),
  };
  CLobbyTeamDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLobbyTeamDetails_descriptor_,
      CLobbyTeamDetails::default_instance_,
      CLobbyTeamDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLobbyTeamDetails));
  CLobbyTimedRewardDetails_descriptor_ = file->message_type(7);
  static const int CLobbyTimedRewardDetails_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, item_def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, is_supply_crate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, is_timed_drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, origin_),
  };
  CLobbyTimedRewardDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLobbyTimedRewardDetails_descriptor_,
      CLobbyTimedRewardDetails::default_instance_,
      CLobbyTimedRewardDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLobbyTimedRewardDetails));
  CLobbyBroadcastChannelInfo_descriptor_ = file->message_type(8);
  static const int CLobbyBroadcastChannelInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyBroadcastChannelInfo, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyBroadcastChannelInfo, country_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyBroadcastChannelInfo, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyBroadcastChannelInfo, language_code_),
  };
  CLobbyBroadcastChannelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLobbyBroadcastChannelInfo_descriptor_,
      CLobbyBroadcastChannelInfo::default_instance_,
      CLobbyBroadcastChannelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyBroadcastChannelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyBroadcastChannelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLobbyBroadcastChannelInfo));
  CSODOTALobby_descriptor_ = file->message_type(9);
  static const int CSODOTALobby_offsets_[80] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, left_members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, pending_invites_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, connect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, lobby_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, allow_cheats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, fill_with_bots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, intro_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, game_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, team_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, tutorial_lesson_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, tournament_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, tournament_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, server_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, game_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, num_spectators_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, matchgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, cm_pick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, allow_spectating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, bot_difficulty_radiant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, game_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, timed_reward_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, pass_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, leagueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, penalty_level_radiant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, penalty_level_dire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, load_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, series_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, radiant_series_wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, dire_series_wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, loot_generated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, loot_awarded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, allchat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, dota_tv_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_map_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, lan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, broadcast_channel_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, first_leaver_accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, series_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, low_priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, extra_messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, save_game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, first_blood_happened_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, match_outcome_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, mass_disconnect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, active_ingame_events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_min_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_max_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, partner_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, lan_host_ping_to_server_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, visibility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_game_crc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_game_auto_created_lobby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, league_series_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, league_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_game_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, previous_series_matches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, previous_match_override_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_game_uses_account_records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, league_selection_priority_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, league_selection_priority_choice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, league_non_selection_priority_choice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, game_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, pause_setting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, lobby_mvp_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, weekend_tourney_division_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, weekend_tourney_skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, weekend_tourney_bracket_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, bot_difficulty_dire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, bot_radiant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, bot_dire_),
  };
  CSODOTALobby_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSODOTALobby_descriptor_,
      CSODOTALobby::default_instance_,
      CSODOTALobby_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSODOTALobby));
  CSODOTALobby_CExtraMsg_descriptor_ = CSODOTALobby_descriptor_->nested_type(0);
  static const int CSODOTALobby_CExtraMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby_CExtraMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby_CExtraMsg, contents_),
  };
  CSODOTALobby_CExtraMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSODOTALobby_CExtraMsg_descriptor_,
      CSODOTALobby_CExtraMsg::default_instance_,
      CSODOTALobby_CExtraMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby_CExtraMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby_CExtraMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSODOTALobby_CExtraMsg));
  CSODOTALobby_State_descriptor_ = CSODOTALobby_descriptor_->enum_type(0);
  CSODOTALobby_LobbyType_descriptor_ = CSODOTALobby_descriptor_->enum_type(1);
  CMsgLobbyPlaytestDetails_descriptor_ = file->message_type(10);
  static const int CMsgLobbyPlaytestDetails_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyPlaytestDetails, json_),
  };
  CMsgLobbyPlaytestDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLobbyPlaytestDetails_descriptor_,
      CMsgLobbyPlaytestDetails::default_instance_,
      CMsgLobbyPlaytestDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyPlaytestDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyPlaytestDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLobbyPlaytestDetails));
  LobbyDotaTVDelay_descriptor_ = file->enum_type(0);
  LobbyDotaPauseSetting_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSODOTAPartyMember_descriptor_, &CSODOTAPartyMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSODOTAParty_descriptor_, &CSODOTAParty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSODOTAPartyInvite_descriptor_, &CSODOTAPartyInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSODOTAPartyInvite_PartyMember_descriptor_, &CSODOTAPartyInvite_PartyMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSODOTALobbyInvite_descriptor_, &CSODOTALobbyInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSODOTALobbyInvite_LobbyMember_descriptor_, &CSODOTALobbyInvite_LobbyMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLeaverState_descriptor_, &CMsgLeaverState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTALobbyMember_descriptor_, &CDOTALobbyMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTALobbyMember_CDOTALobbyMemberXPBonus_descriptor_, &CDOTALobbyMember_CDOTALobbyMemberXPBonus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLobbyTeamDetails_descriptor_, &CLobbyTeamDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLobbyTimedRewardDetails_descriptor_, &CLobbyTimedRewardDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLobbyBroadcastChannelInfo_descriptor_, &CLobbyBroadcastChannelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSODOTALobby_descriptor_, &CSODOTALobby::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSODOTALobby_CExtraMsg_descriptor_, &CSODOTALobby_CExtraMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLobbyPlaytestDetails_descriptor_, &CMsgLobbyPlaytestDetails::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto() {
  delete CSODOTAPartyMember::default_instance_;
  delete CSODOTAPartyMember_reflection_;
  delete CSODOTAParty::default_instance_;
  delete CSODOTAParty_reflection_;
  delete CSODOTAPartyInvite::default_instance_;
  delete CSODOTAPartyInvite_reflection_;
  delete CSODOTAPartyInvite_PartyMember::default_instance_;
  delete CSODOTAPartyInvite_PartyMember_reflection_;
  delete CSODOTALobbyInvite::default_instance_;
  delete CSODOTALobbyInvite_reflection_;
  delete CSODOTALobbyInvite_LobbyMember::default_instance_;
  delete CSODOTALobbyInvite_LobbyMember_reflection_;
  delete CMsgLeaverState::default_instance_;
  delete CMsgLeaverState_reflection_;
  delete CDOTALobbyMember::default_instance_;
  delete CDOTALobbyMember_reflection_;
  delete CDOTALobbyMember_CDOTALobbyMemberXPBonus::default_instance_;
  delete CDOTALobbyMember_CDOTALobbyMemberXPBonus_reflection_;
  delete CLobbyTeamDetails::default_instance_;
  delete CLobbyTeamDetails_reflection_;
  delete CLobbyTimedRewardDetails::default_instance_;
  delete CLobbyTimedRewardDetails_reflection_;
  delete CLobbyBroadcastChannelInfo::default_instance_;
  delete CLobbyBroadcastChannelInfo_reflection_;
  delete CSODOTALobby::default_instance_;
  delete CSODOTALobby_reflection_;
  delete CSODOTALobby_CExtraMsg::default_instance_;
  delete CSODOTALobby_CExtraMsg_reflection_;
  delete CMsgLobbyPlaytestDetails::default_instance_;
  delete CMsgLobbyPlaytestDetails_reflection_;
}

void protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_steammessages_2eproto();
  ::protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  ::protobuf_AddDesc_dota_5fshared_5fenums_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n-dota_gcmessages_common_match_managemen"
    "t.proto\032\023steammessages.proto\032\026gcsdk_gcme"
    "ssages.proto\032\027dota_shared_enums.proto\"\224\002"
    "\n\022CSODOTAPartyMember\0227\n\014partner_type\030\001 \001"
    "(\0162\023.PartnerAccountType:\014PARTNER_NONE\022\020\n"
    "\010is_coach\030\002 \001(\010\022\035\n\021region_ping_codes\030\004 \003"
    "(\rB\002\020\001\022\035\n\021region_ping_times\030\005 \003(\rB\002\020\001\022\"\n"
    "\032region_ping_failed_bitmask\030\006 \001(\r\022\033\n\023tou"
    "rney_skill_level\030\007 \001(\r\022\025\n\rtourney_buyin\030"
    "\010 \001(\r\022\035\n\025tourney_prevent_until\030\t \001(\r\"\266\013\n"
    "\014CSODOTAParty\022\026\n\010party_id\030\001 \001(\004B\004\200\246\035\001\022\021\n"
    "\tleader_id\030\002 \001(\006\022\022\n\nmember_ids\030\003 \003(\006\022\022\n\n"
    "game_modes\030\004 \001(\r\022&\n\005state\030\006 \001(\0162\023.CSODOT"
    "AParty.State:\002UI\022*\n\"effective_started_ma"
    "tchmaking_time\030\007 \001(\r\022$\n\034raw_started_matc"
    "hmaking_time\030  \001(\r\022\032\n\022attempt_start_time"
    "\030! \001(\r\022\023\n\013attempt_num\030\" \001(\r\022\023\n\013matchgrou"
    "ps\030\013 \001(\r\022\037\n\027low_priority_account_id\030\023 \001("
    "\r\0221\n\nmatch_type\030\025 \001(\0162\n.MatchType:\021MATCH"
    "_TYPE_CASUAL\022B\n\016bot_difficulty\030\026 \001(\0162\022.D"
    "OTABotDifficulty:\026BOT_DIFFICULTY_PASSIVE"
    "\022\017\n\007team_id\030\027 \001(\r\022\021\n\tteam_name\0303 \001(\t\022\024\n\014"
    "team_ui_logo\0304 \001(\004\022\026\n\016team_base_logo\0305 \001"
    "(\004\022!\n\031match_disabled_until_date\030\030 \001(\r\022!\n"
    "\031match_disabled_account_id\030\031 \001(\r\022%\n\035matc"
    "hmaking_max_range_minutes\030\032 \001(\r\022\026\n\016match"
    "languages\030\033 \001(\r\022\026\n\016map_preference\030& \001(\r\022"
    "$\n\007members\030\035 \003(\0132\023.CSODOTAPartyMember\022\025\n"
    "\ropen_guild_id\030\036 \001(\r\022\025\n\rcommon_guilds\030\037 "
    "\003(\r\022$\n\034low_priority_games_remaining\030# \001("
    "\r\022%\n\024active_ingame_events\030\' \003(\0162\007.EEvent"
    "\022\036\n\026open_for_join_requests\030( \001(\010\022)\n\014sent"
    "_invites\030) \003(\0132\023.CSODOTAPartyInvite\022)\n\014r"
    "ecv_invites\030* \003(\0132\023.CSODOTAPartyInvite\022\025"
    "\n\raccount_flags\030+ \001(\r\022\033\n\023region_select_f"
    "lags\030, \001(\r\022\037\n\027exclusive_tournament_id\030- "
    "\001(\r\022\033\n\023tourney_division_id\030/ \001(\r\022\035\n\025tour"
    "ney_schedule_time\0300 \001(\r\022\033\n\023tourney_skill"
    "_level\0301 \001(\r\022\035\n\025tourney_bracket_round\0302 "
    "\001(\r\022#\n\033tourney_queue_deadline_time\0306 \001(\r"
    "\022f\n\034tourney_queue_deadline_state\0307 \001(\0162\033"
    ".ETourneyQueueDeadlineState:#k_ETourneyQ"
    "ueueDeadlineState_Normal\022#\n\033party_builde"
    "r_slots_to_fill\0308 \001(\r\022\"\n\032party_builder_m"
    "atch_groups\0309 \001(\r\022 \n\030party_builder_start"
    "_time\030: \001(\r\"0\n\005State\022\006\n\002UI\020\000\022\021\n\rFINDING_"
    "MATCH\020\001\022\014\n\010IN_MATCH\020\002\"\233\002\n\022CSODOTAPartyIn"
    "vite\022\026\n\010group_id\030\001 \001(\004B\004\200\246\035\001\022\021\n\tsender_i"
    "d\030\002 \001(\006\022\023\n\013sender_name\030\003 \001(\t\0220\n\007members\030"
    "\004 \003(\0132\037.CSODOTAPartyInvite.PartyMember\022\017"
    "\n\007team_id\030\005 \001(\r\022\033\n\023low_priority_status\030\006"
    " \001(\010\022\020\n\010as_coach\030\007 \001(\010\022\022\n\ninvite_gid\030\010 \001"
    "(\006\032\?\n\013PartyMember\022\014\n\004name\030\001 \001(\t\022\020\n\010steam"
    "_id\030\002 \001(\006\022\020\n\010is_coach\030\004 \001(\010\"\231\002\n\022CSODOTAL"
    "obbyInvite\022\026\n\010group_id\030\001 \001(\004B\004\200\246\035\001\022\021\n\tse"
    "nder_id\030\002 \001(\006\022\023\n\013sender_name\030\003 \001(\t\0220\n\007me"
    "mbers\030\004 \003(\0132\037.CSODOTALobbyInvite.LobbyMe"
    "mber\022\026\n\016custom_game_id\030\005 \001(\004\022\022\n\ninvite_g"
    "id\030\006 \001(\006\022\027\n\017custom_game_crc\030\007 \001(\006\022\035\n\025cus"
    "tom_game_timestamp\030\010 \001(\007\032-\n\013LobbyMember\022"
    "\014\n\004name\030\001 \001(\t\022\020\n\010steam_id\030\002 \001(\006\"\325\001\n\017CMsg"
    "LeaverState\022\023\n\013lobby_state\030\001 \001(\r\022>\n\ngame"
    "_state\030\002 \001(\0162\017.DOTA_GameState:\031DOTA_GAME"
    "RULES_STATE_INIT\022\027\n\017leaver_detected\030\003 \001("
    "\010\022\034\n\024first_blood_happened\030\004 \001(\010\022\035\n\025disca"
    "rd_match_results\030\005 \001(\010\022\027\n\017mass_disconnec"
    "t\030\006 \001(\010\"\217\007\n\020CDOTALobbyMember\022\020\n\002id\030\001 \001(\006"
    "B\004\200\246\035\001\022\017\n\007hero_id\030\002 \001(\r\0223\n\004team\030\003 \001(\0162\r."
    "DOTA_GC_TEAM:\026DOTA_GC_TEAM_GOOD_GUYS\022\014\n\004"
    "name\030\006 \001(\t\022\014\n\004slot\030\007 \001(\r\022\020\n\010party_id\030\014 \001"
    "(\004\022\022\n\nmeta_level\030\r \001(\r\022\017\n\007meta_xp\030\016 \001(\r\022"
    "\027\n\017meta_xp_awarded\030\017 \001(\r\022<\n\rleaver_statu"
    "s\030\020 \001(\0162\023.DOTALeaverStatus_t:\020DOTA_LEAVE"
    "R_NONE\022\026\n\016leaver_actions\030\034 \001(\r\022\017\n\007channe"
    "l\030\021 \001(\r\022\027\n\017prize_def_index\030\022 \001(\r\022\030\n\020disa"
    "bled_hero_id\030\024 \003(\r\022\?\n\024partner_account_ty"
    "pe\030\025 \001(\0162\023.PartnerAccountType:\014PARTNER_N"
    "ONE\022\027\n\017enabled_hero_id\030\026 \003(\r\0226\n\ncoach_te"
    "am\030\027 \001(\0162\r.DOTA_GC_TEAM:\023DOTA_GC_TEAM_NO"
    "TEAM\022\030\n\020nexon_pc_bang_no\030\030 \001(\r\022\032\n\022nexon_"
    "pc_bang_name\030\031 \001(\t\022=\n\nxp_bonuses\030\033 \003(\0132)"
    ".CDOTALobbyMember.CDOTALobbyMemberXPBonu"
    "s\022\023\n\013rank_change\030\035 \001(\021\022\021\n\tcameraman\030\036 \001("
    "\010\022\037\n\027custom_game_product_ids\030\037 \003(\r\022!\n\031lo"
    "bby_mvp_vote_account_id\030  \001(\r\0228\n\021search_"
    "match_type\030! \001(\0162\n.MatchType:\021MATCH_TYPE"
    "_CASUAL\022!\n\031favorite_team_and_quality\030\" \001"
    "(\r\032M\n\027CDOTALobbyMemberXPBonus\022\014\n\004type\030\001 "
    "\001(\r\022\020\n\010xp_bonus\030\002 \001(\002\022\022\n\nsource_key\030\003 \001("
    "\004\"\337\002\n\021CLobbyTeamDetails\022\021\n\tteam_name\030\001 \001"
    "(\t\022\020\n\010team_tag\030\003 \001(\t\022\017\n\007team_id\030\004 \001(\r\022\021\n"
    "\tteam_logo\030\005 \001(\004\022\026\n\016team_base_logo\030\006 \001(\004"
    "\022\030\n\020team_banner_logo\030\007 \001(\004\022\025\n\rteam_compl"
    "ete\030\010 \001(\010\022\022\n\nguild_name\030\t \001(\t\022\021\n\tguild_t"
    "ag\030\n \001(\t\022\020\n\010guild_id\030\013 \001(\r\022\022\n\nguild_logo"
    "\030\014 \001(\004\022\027\n\017guild_base_logo\030\r \001(\004\022\031\n\021guild"
    "_banner_logo\030\016 \001(\004\022\014\n\004rank\030\017 \001(\r\022\023\n\013rank"
    "_change\030\020 \001(\021\022\024\n\014is_home_team\030\021 \001(\010\"\206\001\n\030"
    "CLobbyTimedRewardDetails\022\026\n\016item_def_ind"
    "ex\030\002 \001(\r\022\027\n\017is_supply_crate\030\003 \001(\010\022\025\n\ris_"
    "timed_drop\030\004 \001(\010\022\022\n\naccount_id\030\005 \001(\r\022\016\n\006"
    "origin\030\006 \001(\r\"r\n\032CLobbyBroadcastChannelIn"
    "fo\022\022\n\nchannel_id\030\001 \001(\r\022\024\n\014country_code\030\002"
    " \001(\t\022\023\n\013description\030\003 \001(\t\022\025\n\rlanguage_co"
    "de\030\004 \001(\t\"\367\030\n\014CSODOTALobby\022\026\n\010lobby_id\030\001 "
    "\001(\004B\004\200\246\035\001\022\"\n\007members\030\002 \003(\0132\021.CDOTALobbyM"
    "ember\022\'\n\014left_members\030\007 \003(\0132\021.CDOTALobby"
    "Member\022\021\n\tleader_id\030\013 \001(\006\022\024\n\tserver_id\030\006"
    " \001(\006:\0010\022\021\n\tgame_mode\030\003 \001(\r\022\027\n\017pending_in"
    "vites\030\n \003(\006\022&\n\005state\030\004 \001(\0162\023.CSODOTALobb"
    "y.State:\002UI\022\017\n\007connect\030\005 \001(\t\0224\n\nlobby_ty"
    "pe\030\014 \001(\0162\027.CSODOTALobby.LobbyType:\007INVAL"
    "ID\022\024\n\014allow_cheats\030\r \001(\010\022\026\n\016fill_with_bo"
    "ts\030\016 \001(\010\022\022\n\nintro_mode\030\017 \001(\010\022\021\n\tgame_nam"
    "e\030\020 \001(\t\022(\n\014team_details\030\021 \003(\0132\022.CLobbyTe"
    "amDetails\022\027\n\017tutorial_lesson\030\022 \001(\r\022\025\n\rto"
    "urnament_id\030\023 \001(\r\022\032\n\022tournament_game_id\030"
    "\024 \001(\r\022\030\n\rserver_region\030\025 \001(\r:\0010\022>\n\ngame_"
    "state\030\026 \001(\0162\017.DOTA_GameState:\031DOTA_GAMER"
    "ULES_STATE_INIT\022\026\n\016num_spectators\030\027 \001(\r\022"
    "\022\n\nmatchgroup\030\031 \001(\r\022.\n\007cm_pick\030\034 \001(\0162\r.D"
    "OTA_CM_PICK:\016DOTA_CM_RANDOM\022\020\n\010match_id\030"
    "\036 \001(\004\022\036\n\020allow_spectating\030\037 \001(\010:\004true\022G\n"
    "\026bot_difficulty_radiant\030$ \001(\0162\022.DOTABotD"
    "ifficulty:\023BOT_DIFFICULTY_HARD\022<\n\014game_v"
    "ersion\030% \001(\0162\020.DOTAGameVersion:\024GAME_VER"
    "SION_CURRENT\0227\n\024timed_reward_details\030& \003"
    "(\0132\031.CLobbyTimedRewardDetails\022\020\n\010pass_ke"
    "y\030\' \001(\t\022\020\n\010leagueid\030* \001(\r\022 \n\025penalty_lev"
    "el_radiant\030+ \001(\r:\0010\022\035\n\022penalty_level_dir"
    "e\030, \001(\r:\0010\022\024\n\014load_game_id\030- \001(\r\022\023\n\013seri"
    "es_type\030. \001(\r\022\033\n\023radiant_series_wins\030/ \001"
    "(\r\022\030\n\020dire_series_wins\0300 \001(\r\022\026\n\016loot_gen"
    "erated\0301 \001(\r\022\024\n\014loot_awarded\0302 \001(\r\022\026\n\007al"
    "lchat\0303 \001(\010:\005false\0228\n\rdota_tv_delay\0305 \001("
    "\0162\021.LobbyDotaTVDelay:\016LobbyDotaTV_10\022\030\n\020"
    "custom_game_mode\0306 \001(\t\022\027\n\017custom_map_nam"
    "e\0307 \001(\t\022\031\n\021custom_difficulty\0308 \001(\r\022\013\n\003la"
    "n\0309 \001(\010\022;\n\026broadcast_channel_info\030: \003(\0132"
    "\033.CLobbyBroadcastChannelInfo\022\036\n\026first_le"
    "aver_accountid\030; \001(\r\022\021\n\tseries_id\030< \001(\r\022"
    "\024\n\014low_priority\030= \001(\010\022/\n\016extra_messages\030"
    "> \003(\0132\027.CSODOTALobby.CExtraMsg\022!\n\tsave_g"
    "ame\030\? \001(\0132\016.CDOTASaveGame\022\034\n\024first_blood"
    "_happened\030A \001(\010\022>\n\rmatch_outcome\030F \001(\0162\016"
    ".EMatchOutcome:\027k_EMatchOutcome_Unknown\022"
    "\027\n\017mass_disconnect\030C \001(\010\022\026\n\016custom_game_"
    "id\030D \001(\004\022%\n\024active_ingame_events\030E \003(\0162\007"
    ".EEvent\022\032\n\022custom_min_players\030G \001(\r\022\032\n\022c"
    "ustom_max_players\030H \001(\r\0227\n\014partner_type\030"
    "I \001(\0162\023.PartnerAccountType:\014PARTNER_NONE"
    "\022&\n\036lan_host_ping_to_server_region\030J \001(\r"
    "\022D\n\nvisibility\030K \001(\0162\024.DOTALobbyVisibili"
    "ty:\032DOTALobbyVisibility_Public\022\027\n\017custom"
    "_game_crc\030L \001(\006\022&\n\036custom_game_auto_crea"
    "ted_lobby\030M \001(\010\022\030\n\020league_series_id\030N \001("
    "\r\022\026\n\016league_game_id\030O \001(\r\022\035\n\025custom_game"
    "_timestamp\030P \001(\007\022\037\n\027previous_series_matc"
    "hes\030Q \003(\004\022\037\n\027previous_match_override\030R \001"
    "(\004\022(\n custom_game_uses_account_records\030S"
    " \001(\010\022&\n\036league_selection_priority_team\030T"
    " \001(\r\022K\n league_selection_priority_choice"
    "\030U \001(\0162\026.SelectionPriorityType:\tUNDEFINE"
    "D\022O\n$league_non_selection_priority_choic"
    "e\030V \001(\0162\026.SelectionPriorityType:\tUNDEFIN"
    "ED\022\027\n\017game_start_time\030W \001(\r\022N\n\rpause_set"
    "ting\030X \001(\0162\026.LobbyDotaPauseSetting:\037Lobb"
    "yDotaPauseSetting_Unlimited\022\034\n\024lobby_mvp"
    "_account_id\030Y \001(\r\022#\n\033weekend_tourney_div"
    "ision_id\030Z \001(\r\022#\n\033weekend_tourney_skill_"
    "level\030[ \001(\r\022%\n\035weekend_tourney_bracket_r"
    "ound\030\\ \001(\r\022D\n\023bot_difficulty_dire\030] \001(\0162"
    "\022.DOTABotDifficulty:\023BOT_DIFFICULTY_HARD"
    "\022\023\n\013bot_radiant\030^ \001(\004\022\020\n\010bot_dire\030_ \001(\004\032"
    ")\n\tCExtraMsg\022\n\n\002id\030\001 \001(\r\022\020\n\010contents\030\002 \001"
    "(\014\"d\n\005State\022\006\n\002UI\020\000\022\013\n\007READYUP\020\004\022\017\n\013SERV"
    "ERSETUP\020\001\022\007\n\003RUN\020\002\022\014\n\010POSTGAME\020\003\022\014\n\010NOTR"
    "EADY\020\005\022\020\n\014SERVERASSIGN\020\006\"\377\001\n\tLobbyType\022\024"
    "\n\007INVALID\020\377\377\377\377\377\377\377\377\377\001\022\020\n\014CASUAL_MATCH\020\000\022\014"
    "\n\010PRACTICE\020\001\022\016\n\nTOURNAMENT\020\002\022\022\n\016COOP_BOT"
    "_MATCH\020\004\022\025\n\021LEGACY_TEAM_MATCH\020\005\022\033\n\027LEGAC"
    "Y_SOLO_QUEUE_MATCH\020\006\022\025\n\021COMPETITIVE_MATC"
    "H\020\007\022\024\n\020CASUAL_1V1_MATCH\020\010\022\023\n\017WEEKEND_TOU"
    "RNEY\020\t\022\023\n\017LOCAL_BOT_MATCH\020\n\022\r\n\tSPECTATOR"
    "\020\013\"(\n\030CMsgLobbyPlaytestDetails\022\014\n\004json\030\001"
    " \001(\t*P\n\020LobbyDotaTVDelay\022\022\n\016LobbyDotaTV_"
    "10\020\000\022\023\n\017LobbyDotaTV_120\020\001\022\023\n\017LobbyDotaTV"
    "_300\020\002*\203\001\n\025LobbyDotaPauseSetting\022#\n\037Lobb"
    "yDotaPauseSetting_Unlimited\020\000\022!\n\035LobbyDo"
    "taPauseSetting_Limited\020\001\022\"\n\036LobbyDotaPau"
    "seSetting_Disabled\020\002B\005H\001\200\001\000", 7627);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_gcmessages_common_match_management.proto", &protobuf_RegisterTypes);
  CSODOTAPartyMember::default_instance_ = new CSODOTAPartyMember();
  CSODOTAParty::default_instance_ = new CSODOTAParty();
  CSODOTAPartyInvite::default_instance_ = new CSODOTAPartyInvite();
  CSODOTAPartyInvite_PartyMember::default_instance_ = new CSODOTAPartyInvite_PartyMember();
  CSODOTALobbyInvite::default_instance_ = new CSODOTALobbyInvite();
  CSODOTALobbyInvite_LobbyMember::default_instance_ = new CSODOTALobbyInvite_LobbyMember();
  CMsgLeaverState::default_instance_ = new CMsgLeaverState();
  CDOTALobbyMember::default_instance_ = new CDOTALobbyMember();
  CDOTALobbyMember_CDOTALobbyMemberXPBonus::default_instance_ = new CDOTALobbyMember_CDOTALobbyMemberXPBonus();
  CLobbyTeamDetails::default_instance_ = new CLobbyTeamDetails();
  CLobbyTimedRewardDetails::default_instance_ = new CLobbyTimedRewardDetails();
  CLobbyBroadcastChannelInfo::default_instance_ = new CLobbyBroadcastChannelInfo();
  CSODOTALobby::default_instance_ = new CSODOTALobby();
  CSODOTALobby_CExtraMsg::default_instance_ = new CSODOTALobby_CExtraMsg();
  CMsgLobbyPlaytestDetails::default_instance_ = new CMsgLobbyPlaytestDetails();
  CSODOTAPartyMember::default_instance_->InitAsDefaultInstance();
  CSODOTAParty::default_instance_->InitAsDefaultInstance();
  CSODOTAPartyInvite::default_instance_->InitAsDefaultInstance();
  CSODOTAPartyInvite_PartyMember::default_instance_->InitAsDefaultInstance();
  CSODOTALobbyInvite::default_instance_->InitAsDefaultInstance();
  CSODOTALobbyInvite_LobbyMember::default_instance_->InitAsDefaultInstance();
  CMsgLeaverState::default_instance_->InitAsDefaultInstance();
  CDOTALobbyMember::default_instance_->InitAsDefaultInstance();
  CDOTALobbyMember_CDOTALobbyMemberXPBonus::default_instance_->InitAsDefaultInstance();
  CLobbyTeamDetails::default_instance_->InitAsDefaultInstance();
  CLobbyTimedRewardDetails::default_instance_->InitAsDefaultInstance();
  CLobbyBroadcastChannelInfo::default_instance_->InitAsDefaultInstance();
  CSODOTALobby::default_instance_->InitAsDefaultInstance();
  CSODOTALobby_CExtraMsg::default_instance_->InitAsDefaultInstance();
  CMsgLobbyPlaytestDetails::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto {
  StaticDescriptorInitializer_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto() {
    protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  }
} static_descriptor_initializer_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_;
const ::google::protobuf::EnumDescriptor* LobbyDotaTVDelay_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LobbyDotaTVDelay_descriptor_;
}
bool LobbyDotaTVDelay_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LobbyDotaPauseSetting_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LobbyDotaPauseSetting_descriptor_;
}
bool LobbyDotaPauseSetting_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CSODOTAPartyMember::kPartnerTypeFieldNumber;
const int CSODOTAPartyMember::kIsCoachFieldNumber;
const int CSODOTAPartyMember::kRegionPingCodesFieldNumber;
const int CSODOTAPartyMember::kRegionPingTimesFieldNumber;
const int CSODOTAPartyMember::kRegionPingFailedBitmaskFieldNumber;
const int CSODOTAPartyMember::kTourneySkillLevelFieldNumber;
const int CSODOTAPartyMember::kTourneyBuyinFieldNumber;
const int CSODOTAPartyMember::kTourneyPreventUntilFieldNumber;
#endif  // !_MSC_VER

CSODOTAPartyMember::CSODOTAPartyMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSODOTAPartyMember)
}

void CSODOTAPartyMember::InitAsDefaultInstance() {
}

CSODOTAPartyMember::CSODOTAPartyMember(const CSODOTAPartyMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSODOTAPartyMember)
}

void CSODOTAPartyMember::SharedCtor() {
  _cached_size_ = 0;
  partner_type_ = 0;
  is_coach_ = false;
  region_ping_failed_bitmask_ = 0u;
  tourney_skill_level_ = 0u;
  tourney_buyin_ = 0u;
  tourney_prevent_until_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTAPartyMember::~CSODOTAPartyMember() {
  // @@protoc_insertion_point(destructor:CSODOTAPartyMember)
  SharedDtor();
}

void CSODOTAPartyMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSODOTAPartyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTAPartyMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTAPartyMember_descriptor_;
}

const CSODOTAPartyMember& CSODOTAPartyMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CSODOTAPartyMember* CSODOTAPartyMember::default_instance_ = NULL;

CSODOTAPartyMember* CSODOTAPartyMember::New() const {
  return new CSODOTAPartyMember;
}

void CSODOTAPartyMember::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSODOTAPartyMember*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 243) {
    ZR_(partner_type_, is_coach_);
    ZR_(region_ping_failed_bitmask_, tourney_prevent_until_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  region_ping_codes_.Clear();
  region_ping_times_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSODOTAPartyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSODOTAPartyMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PartnerAccountType_IsValid(value)) {
            set_partner_type(static_cast< ::PartnerAccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_coach;
        break;
      }

      // optional bool is_coach = 2;
      case 2: {
        if (tag == 16) {
         parse_is_coach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_coach_)));
          set_has_is_coach();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_region_ping_codes;
        break;
      }

      // repeated uint32 region_ping_codes = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_region_ping_codes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_region_ping_codes())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34, input, this->mutable_region_ping_codes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_region_ping_times;
        break;
      }

      // repeated uint32 region_ping_times = 5 [packed = true];
      case 5: {
        if (tag == 42) {
         parse_region_ping_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_region_ping_times())));
        } else if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42, input, this->mutable_region_ping_times())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_region_ping_failed_bitmask;
        break;
      }

      // optional uint32 region_ping_failed_bitmask = 6;
      case 6: {
        if (tag == 48) {
         parse_region_ping_failed_bitmask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_ping_failed_bitmask_)));
          set_has_region_ping_failed_bitmask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_tourney_skill_level;
        break;
      }

      // optional uint32 tourney_skill_level = 7;
      case 7: {
        if (tag == 56) {
         parse_tourney_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_skill_level_)));
          set_has_tourney_skill_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_tourney_buyin;
        break;
      }

      // optional uint32 tourney_buyin = 8;
      case 8: {
        if (tag == 64) {
         parse_tourney_buyin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_buyin_)));
          set_has_tourney_buyin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_tourney_prevent_until;
        break;
      }

      // optional uint32 tourney_prevent_until = 9;
      case 9: {
        if (tag == 72) {
         parse_tourney_prevent_until:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_prevent_until_)));
          set_has_tourney_prevent_until();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSODOTAPartyMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSODOTAPartyMember)
  return false;
#undef DO_
}

void CSODOTAPartyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSODOTAPartyMember)
  // optional .PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
  if (has_partner_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->partner_type(), output);
  }

  // optional bool is_coach = 2;
  if (has_is_coach()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_coach(), output);
  }

  // repeated uint32 region_ping_codes = 4 [packed = true];
  if (this->region_ping_codes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_region_ping_codes_cached_byte_size_);
  }
  for (int i = 0; i < this->region_ping_codes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->region_ping_codes(i), output);
  }

  // repeated uint32 region_ping_times = 5 [packed = true];
  if (this->region_ping_times_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_region_ping_times_cached_byte_size_);
  }
  for (int i = 0; i < this->region_ping_times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->region_ping_times(i), output);
  }

  // optional uint32 region_ping_failed_bitmask = 6;
  if (has_region_ping_failed_bitmask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->region_ping_failed_bitmask(), output);
  }

  // optional uint32 tourney_skill_level = 7;
  if (has_tourney_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tourney_skill_level(), output);
  }

  // optional uint32 tourney_buyin = 8;
  if (has_tourney_buyin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->tourney_buyin(), output);
  }

  // optional uint32 tourney_prevent_until = 9;
  if (has_tourney_prevent_until()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->tourney_prevent_until(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSODOTAPartyMember)
}

::google::protobuf::uint8* CSODOTAPartyMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAPartyMember)
  // optional .PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
  if (has_partner_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->partner_type(), target);
  }

  // optional bool is_coach = 2;
  if (has_is_coach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_coach(), target);
  }

  // repeated uint32 region_ping_codes = 4 [packed = true];
  if (this->region_ping_codes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _region_ping_codes_cached_byte_size_, target);
  }
  for (int i = 0; i < this->region_ping_codes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->region_ping_codes(i), target);
  }

  // repeated uint32 region_ping_times = 5 [packed = true];
  if (this->region_ping_times_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _region_ping_times_cached_byte_size_, target);
  }
  for (int i = 0; i < this->region_ping_times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->region_ping_times(i), target);
  }

  // optional uint32 region_ping_failed_bitmask = 6;
  if (has_region_ping_failed_bitmask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->region_ping_failed_bitmask(), target);
  }

  // optional uint32 tourney_skill_level = 7;
  if (has_tourney_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tourney_skill_level(), target);
  }

  // optional uint32 tourney_buyin = 8;
  if (has_tourney_buyin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->tourney_buyin(), target);
  }

  // optional uint32 tourney_prevent_until = 9;
  if (has_tourney_prevent_until()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->tourney_prevent_until(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAPartyMember)
  return target;
}

int CSODOTAPartyMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
    if (has_partner_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->partner_type());
    }

    // optional bool is_coach = 2;
    if (has_is_coach()) {
      total_size += 1 + 1;
    }

    // optional uint32 region_ping_failed_bitmask = 6;
    if (has_region_ping_failed_bitmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_ping_failed_bitmask());
    }

    // optional uint32 tourney_skill_level = 7;
    if (has_tourney_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_skill_level());
    }

    // optional uint32 tourney_buyin = 8;
    if (has_tourney_buyin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_buyin());
    }

    // optional uint32 tourney_prevent_until = 9;
    if (has_tourney_prevent_until()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_prevent_until());
    }

  }
  // repeated uint32 region_ping_codes = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->region_ping_codes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->region_ping_codes(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _region_ping_codes_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 region_ping_times = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->region_ping_times_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->region_ping_times(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _region_ping_times_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTAPartyMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSODOTAPartyMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSODOTAPartyMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTAPartyMember::MergeFrom(const CSODOTAPartyMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  region_ping_codes_.MergeFrom(from.region_ping_codes_);
  region_ping_times_.MergeFrom(from.region_ping_times_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partner_type()) {
      set_partner_type(from.partner_type());
    }
    if (from.has_is_coach()) {
      set_is_coach(from.is_coach());
    }
    if (from.has_region_ping_failed_bitmask()) {
      set_region_ping_failed_bitmask(from.region_ping_failed_bitmask());
    }
    if (from.has_tourney_skill_level()) {
      set_tourney_skill_level(from.tourney_skill_level());
    }
    if (from.has_tourney_buyin()) {
      set_tourney_buyin(from.tourney_buyin());
    }
    if (from.has_tourney_prevent_until()) {
      set_tourney_prevent_until(from.tourney_prevent_until());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSODOTAPartyMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAPartyMember::CopyFrom(const CSODOTAPartyMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAPartyMember::IsInitialized() const {

  return true;
}

void CSODOTAPartyMember::Swap(CSODOTAPartyMember* other) {
  if (other != this) {
    std::swap(partner_type_, other->partner_type_);
    std::swap(is_coach_, other->is_coach_);
    region_ping_codes_.Swap(&other->region_ping_codes_);
    region_ping_times_.Swap(&other->region_ping_times_);
    std::swap(region_ping_failed_bitmask_, other->region_ping_failed_bitmask_);
    std::swap(tourney_skill_level_, other->tourney_skill_level_);
    std::swap(tourney_buyin_, other->tourney_buyin_);
    std::swap(tourney_prevent_until_, other->tourney_prevent_until_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSODOTAPartyMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTAPartyMember_descriptor_;
  metadata.reflection = CSODOTAPartyMember_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CSODOTAParty_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTAParty_State_descriptor_;
}
bool CSODOTAParty_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CSODOTAParty_State CSODOTAParty::UI;
const CSODOTAParty_State CSODOTAParty::FINDING_MATCH;
const CSODOTAParty_State CSODOTAParty::IN_MATCH;
const CSODOTAParty_State CSODOTAParty::State_MIN;
const CSODOTAParty_State CSODOTAParty::State_MAX;
const int CSODOTAParty::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CSODOTAParty::kPartyIdFieldNumber;
const int CSODOTAParty::kLeaderIdFieldNumber;
const int CSODOTAParty::kMemberIdsFieldNumber;
const int CSODOTAParty::kGameModesFieldNumber;
const int CSODOTAParty::kStateFieldNumber;
const int CSODOTAParty::kEffectiveStartedMatchmakingTimeFieldNumber;
const int CSODOTAParty::kRawStartedMatchmakingTimeFieldNumber;
const int CSODOTAParty::kAttemptStartTimeFieldNumber;
const int CSODOTAParty::kAttemptNumFieldNumber;
const int CSODOTAParty::kMatchgroupsFieldNumber;
const int CSODOTAParty::kLowPriorityAccountIdFieldNumber;
const int CSODOTAParty::kMatchTypeFieldNumber;
const int CSODOTAParty::kBotDifficultyFieldNumber;
const int CSODOTAParty::kTeamIdFieldNumber;
const int CSODOTAParty::kTeamNameFieldNumber;
const int CSODOTAParty::kTeamUiLogoFieldNumber;
const int CSODOTAParty::kTeamBaseLogoFieldNumber;
const int CSODOTAParty::kMatchDisabledUntilDateFieldNumber;
const int CSODOTAParty::kMatchDisabledAccountIdFieldNumber;
const int CSODOTAParty::kMatchmakingMaxRangeMinutesFieldNumber;
const int CSODOTAParty::kMatchlanguagesFieldNumber;
const int CSODOTAParty::kMapPreferenceFieldNumber;
const int CSODOTAParty::kMembersFieldNumber;
const int CSODOTAParty::kOpenGuildIdFieldNumber;
const int CSODOTAParty::kCommonGuildsFieldNumber;
const int CSODOTAParty::kLowPriorityGamesRemainingFieldNumber;
const int CSODOTAParty::kActiveIngameEventsFieldNumber;
const int CSODOTAParty::kOpenForJoinRequestsFieldNumber;
const int CSODOTAParty::kSentInvitesFieldNumber;
const int CSODOTAParty::kRecvInvitesFieldNumber;
const int CSODOTAParty::kAccountFlagsFieldNumber;
const int CSODOTAParty::kRegionSelectFlagsFieldNumber;
const int CSODOTAParty::kExclusiveTournamentIdFieldNumber;
const int CSODOTAParty::kTourneyDivisionIdFieldNumber;
const int CSODOTAParty::kTourneyScheduleTimeFieldNumber;
const int CSODOTAParty::kTourneySkillLevelFieldNumber;
const int CSODOTAParty::kTourneyBracketRoundFieldNumber;
const int CSODOTAParty::kTourneyQueueDeadlineTimeFieldNumber;
const int CSODOTAParty::kTourneyQueueDeadlineStateFieldNumber;
const int CSODOTAParty::kPartyBuilderSlotsToFillFieldNumber;
const int CSODOTAParty::kPartyBuilderMatchGroupsFieldNumber;
const int CSODOTAParty::kPartyBuilderStartTimeFieldNumber;
#endif  // !_MSC_VER

CSODOTAParty::CSODOTAParty()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSODOTAParty)
}

void CSODOTAParty::InitAsDefaultInstance() {
}

CSODOTAParty::CSODOTAParty(const CSODOTAParty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSODOTAParty)
}

void CSODOTAParty::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  party_id_ = GOOGLE_ULONGLONG(0);
  leader_id_ = GOOGLE_ULONGLONG(0);
  game_modes_ = 0u;
  state_ = 0;
  effective_started_matchmaking_time_ = 0u;
  raw_started_matchmaking_time_ = 0u;
  attempt_start_time_ = 0u;
  attempt_num_ = 0u;
  matchgroups_ = 0u;
  low_priority_account_id_ = 0u;
  match_type_ = 0;
  bot_difficulty_ = 0;
  team_id_ = 0u;
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_ui_logo_ = GOOGLE_ULONGLONG(0);
  team_base_logo_ = GOOGLE_ULONGLONG(0);
  match_disabled_until_date_ = 0u;
  match_disabled_account_id_ = 0u;
  matchmaking_max_range_minutes_ = 0u;
  matchlanguages_ = 0u;
  map_preference_ = 0u;
  open_guild_id_ = 0u;
  low_priority_games_remaining_ = 0u;
  open_for_join_requests_ = false;
  account_flags_ = 0u;
  region_select_flags_ = 0u;
  exclusive_tournament_id_ = 0u;
  tourney_division_id_ = 0u;
  tourney_schedule_time_ = 0u;
  tourney_skill_level_ = 0u;
  tourney_bracket_round_ = 0u;
  tourney_queue_deadline_time_ = 0u;
  tourney_queue_deadline_state_ = 0;
  party_builder_slots_to_fill_ = 0u;
  party_builder_match_groups_ = 0u;
  party_builder_start_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTAParty::~CSODOTAParty() {
  // @@protoc_insertion_point(destructor:CSODOTAParty)
  SharedDtor();
}

void CSODOTAParty::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_;
  }
  if (this != default_instance_) {
  }
}

void CSODOTAParty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTAParty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTAParty_descriptor_;
}

const CSODOTAParty& CSODOTAParty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CSODOTAParty* CSODOTAParty::default_instance_ = NULL;

CSODOTAParty* CSODOTAParty::New() const {
  return new CSODOTAParty;
}

void CSODOTAParty::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSODOTAParty*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 251) {
    ZR_(party_id_, leader_id_);
    ZR_(game_modes_, attempt_start_time_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(attempt_num_, bot_difficulty_);
    ZR_(team_ui_logo_, team_id_);
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        team_name_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 12517376) {
    ZR_(match_disabled_until_date_, map_preference_);
    open_guild_id_ = 0u;
  }
  if (_has_bits_[24 / 32] & 3388997632) {
    ZR_(open_for_join_requests_, account_flags_);
    low_priority_games_remaining_ = 0u;
    region_select_flags_ = 0u;
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(exclusive_tournament_id_, party_builder_slots_to_fill_);
  }
  ZR_(party_builder_match_groups_, party_builder_start_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_ids_.Clear();
  members_.Clear();
  common_guilds_.Clear();
  active_ingame_events_.Clear();
  sent_invites_.Clear();
  recv_invites_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSODOTAParty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSODOTAParty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 party_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
          set_has_party_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_leader_id;
        break;
      }

      // optional fixed64 leader_id = 2;
      case 2: {
        if (tag == 17) {
         parse_leader_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &leader_id_)));
          set_has_leader_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_member_ids;
        break;
      }

      // repeated fixed64 member_ids = 3;
      case 3: {
        if (tag == 25) {
         parse_member_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25, input, this->mutable_member_ids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_member_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_member_ids;
        if (input->ExpectTag(32)) goto parse_game_modes;
        break;
      }

      // optional uint32 game_modes = 4;
      case 4: {
        if (tag == 32) {
         parse_game_modes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_modes_)));
          set_has_game_modes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // optional .CSODOTAParty.State state = 6 [default = UI];
      case 6: {
        if (tag == 48) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSODOTAParty_State_IsValid(value)) {
            set_state(static_cast< ::CSODOTAParty_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_effective_started_matchmaking_time;
        break;
      }

      // optional uint32 effective_started_matchmaking_time = 7;
      case 7: {
        if (tag == 56) {
         parse_effective_started_matchmaking_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effective_started_matchmaking_time_)));
          set_has_effective_started_matchmaking_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_matchgroups;
        break;
      }

      // optional uint32 matchgroups = 11;
      case 11: {
        if (tag == 88) {
         parse_matchgroups:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchgroups_)));
          set_has_matchgroups();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_low_priority_account_id;
        break;
      }

      // optional uint32 low_priority_account_id = 19;
      case 19: {
        if (tag == 152) {
         parse_low_priority_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_priority_account_id_)));
          set_has_low_priority_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_match_type;
        break;
      }

      // optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
      case 21: {
        if (tag == 168) {
         parse_match_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MatchType_IsValid(value)) {
            set_match_type(static_cast< ::MatchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_bot_difficulty;
        break;
      }

      // optional .DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
      case 22: {
        if (tag == 176) {
         parse_bot_difficulty:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty(static_cast< ::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 23;
      case 23: {
        if (tag == 184) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_match_disabled_until_date;
        break;
      }

      // optional uint32 match_disabled_until_date = 24;
      case 24: {
        if (tag == 192) {
         parse_match_disabled_until_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_disabled_until_date_)));
          set_has_match_disabled_until_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_match_disabled_account_id;
        break;
      }

      // optional uint32 match_disabled_account_id = 25;
      case 25: {
        if (tag == 200) {
         parse_match_disabled_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_disabled_account_id_)));
          set_has_match_disabled_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_matchmaking_max_range_minutes;
        break;
      }

      // optional uint32 matchmaking_max_range_minutes = 26;
      case 26: {
        if (tag == 208) {
         parse_matchmaking_max_range_minutes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchmaking_max_range_minutes_)));
          set_has_matchmaking_max_range_minutes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_matchlanguages;
        break;
      }

      // optional uint32 matchlanguages = 27;
      case 27: {
        if (tag == 216) {
         parse_matchlanguages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchlanguages_)));
          set_has_matchlanguages();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_members;
        break;
      }

      // repeated .CSODOTAPartyMember members = 29;
      case 29: {
        if (tag == 234) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_members;
        if (input->ExpectTag(240)) goto parse_open_guild_id;
        break;
      }

      // optional uint32 open_guild_id = 30;
      case 30: {
        if (tag == 240) {
         parse_open_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_guild_id_)));
          set_has_open_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_common_guilds;
        break;
      }

      // repeated uint32 common_guilds = 31;
      case 31: {
        if (tag == 248) {
         parse_common_guilds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 248, input, this->mutable_common_guilds())));
        } else if (tag == 250) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_common_guilds())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_common_guilds;
        if (input->ExpectTag(256)) goto parse_raw_started_matchmaking_time;
        break;
      }

      // optional uint32 raw_started_matchmaking_time = 32;
      case 32: {
        if (tag == 256) {
         parse_raw_started_matchmaking_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_started_matchmaking_time_)));
          set_has_raw_started_matchmaking_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_attempt_start_time;
        break;
      }

      // optional uint32 attempt_start_time = 33;
      case 33: {
        if (tag == 264) {
         parse_attempt_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attempt_start_time_)));
          set_has_attempt_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_attempt_num;
        break;
      }

      // optional uint32 attempt_num = 34;
      case 34: {
        if (tag == 272) {
         parse_attempt_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attempt_num_)));
          set_has_attempt_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_low_priority_games_remaining;
        break;
      }

      // optional uint32 low_priority_games_remaining = 35;
      case 35: {
        if (tag == 280) {
         parse_low_priority_games_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_priority_games_remaining_)));
          set_has_low_priority_games_remaining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_map_preference;
        break;
      }

      // optional uint32 map_preference = 38;
      case 38: {
        if (tag == 304) {
         parse_map_preference:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_preference_)));
          set_has_map_preference();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_active_ingame_events;
        break;
      }

      // repeated .EEvent active_ingame_events = 39;
      case 39: {
        if (tag == 312) {
         parse_active_ingame_events:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EEvent_IsValid(value)) {
            add_active_ingame_events(static_cast< ::EEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(39, value);
          }
        } else if (tag == 314) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::EEvent_IsValid,
                 this->mutable_active_ingame_events())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_active_ingame_events;
        if (input->ExpectTag(320)) goto parse_open_for_join_requests;
        break;
      }

      // optional bool open_for_join_requests = 40;
      case 40: {
        if (tag == 320) {
         parse_open_for_join_requests:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_for_join_requests_)));
          set_has_open_for_join_requests();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(330)) goto parse_sent_invites;
        break;
      }

      // repeated .CSODOTAPartyInvite sent_invites = 41;
      case 41: {
        if (tag == 330) {
         parse_sent_invites:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sent_invites()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(330)) goto parse_sent_invites;
        if (input->ExpectTag(338)) goto parse_recv_invites;
        break;
      }

      // repeated .CSODOTAPartyInvite recv_invites = 42;
      case 42: {
        if (tag == 338) {
         parse_recv_invites:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recv_invites()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_recv_invites;
        if (input->ExpectTag(344)) goto parse_account_flags;
        break;
      }

      // optional uint32 account_flags = 43;
      case 43: {
        if (tag == 344) {
         parse_account_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_flags_)));
          set_has_account_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_region_select_flags;
        break;
      }

      // optional uint32 region_select_flags = 44;
      case 44: {
        if (tag == 352) {
         parse_region_select_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_select_flags_)));
          set_has_region_select_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_exclusive_tournament_id;
        break;
      }

      // optional uint32 exclusive_tournament_id = 45;
      case 45: {
        if (tag == 360) {
         parse_exclusive_tournament_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exclusive_tournament_id_)));
          set_has_exclusive_tournament_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_tourney_division_id;
        break;
      }

      // optional uint32 tourney_division_id = 47;
      case 47: {
        if (tag == 376) {
         parse_tourney_division_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_division_id_)));
          set_has_tourney_division_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_tourney_schedule_time;
        break;
      }

      // optional uint32 tourney_schedule_time = 48;
      case 48: {
        if (tag == 384) {
         parse_tourney_schedule_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_schedule_time_)));
          set_has_tourney_schedule_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_tourney_skill_level;
        break;
      }

      // optional uint32 tourney_skill_level = 49;
      case 49: {
        if (tag == 392) {
         parse_tourney_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_skill_level_)));
          set_has_tourney_skill_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_tourney_bracket_round;
        break;
      }

      // optional uint32 tourney_bracket_round = 50;
      case 50: {
        if (tag == 400) {
         parse_tourney_bracket_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_bracket_round_)));
          set_has_tourney_bracket_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_team_name;
        break;
      }

      // optional string team_name = 51;
      case 51: {
        if (tag == 410) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_team_ui_logo;
        break;
      }

      // optional uint64 team_ui_logo = 52;
      case 52: {
        if (tag == 416) {
         parse_team_ui_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_ui_logo_)));
          set_has_team_ui_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_team_base_logo;
        break;
      }

      // optional uint64 team_base_logo = 53;
      case 53: {
        if (tag == 424) {
         parse_team_base_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_base_logo_)));
          set_has_team_base_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_tourney_queue_deadline_time;
        break;
      }

      // optional uint32 tourney_queue_deadline_time = 54;
      case 54: {
        if (tag == 432) {
         parse_tourney_queue_deadline_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_queue_deadline_time_)));
          set_has_tourney_queue_deadline_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_tourney_queue_deadline_state;
        break;
      }

      // optional .ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
      case 55: {
        if (tag == 440) {
         parse_tourney_queue_deadline_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ETourneyQueueDeadlineState_IsValid(value)) {
            set_tourney_queue_deadline_state(static_cast< ::ETourneyQueueDeadlineState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(55, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_party_builder_slots_to_fill;
        break;
      }

      // optional uint32 party_builder_slots_to_fill = 56;
      case 56: {
        if (tag == 448) {
         parse_party_builder_slots_to_fill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &party_builder_slots_to_fill_)));
          set_has_party_builder_slots_to_fill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(456)) goto parse_party_builder_match_groups;
        break;
      }

      // optional uint32 party_builder_match_groups = 57;
      case 57: {
        if (tag == 456) {
         parse_party_builder_match_groups:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &party_builder_match_groups_)));
          set_has_party_builder_match_groups();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(464)) goto parse_party_builder_start_time;
        break;
      }

      // optional uint32 party_builder_start_time = 58;
      case 58: {
        if (tag == 464) {
         parse_party_builder_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &party_builder_start_time_)));
          set_has_party_builder_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSODOTAParty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSODOTAParty)
  return false;
#undef DO_
}

void CSODOTAParty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSODOTAParty)
  // optional uint64 party_id = 1;
  if (has_party_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->party_id(), output);
  }

  // optional fixed64 leader_id = 2;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->leader_id(), output);
  }

  // repeated fixed64 member_ids = 3;
  for (int i = 0; i < this->member_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->member_ids(i), output);
  }

  // optional uint32 game_modes = 4;
  if (has_game_modes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_modes(), output);
  }

  // optional .CSODOTAParty.State state = 6 [default = UI];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->state(), output);
  }

  // optional uint32 effective_started_matchmaking_time = 7;
  if (has_effective_started_matchmaking_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->effective_started_matchmaking_time(), output);
  }

  // optional uint32 matchgroups = 11;
  if (has_matchgroups()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->matchgroups(), output);
  }

  // optional uint32 low_priority_account_id = 19;
  if (has_low_priority_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->low_priority_account_id(), output);
  }

  // optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
  if (has_match_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->match_type(), output);
  }

  // optional .DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
  if (has_bot_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->bot_difficulty(), output);
  }

  // optional uint32 team_id = 23;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->team_id(), output);
  }

  // optional uint32 match_disabled_until_date = 24;
  if (has_match_disabled_until_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->match_disabled_until_date(), output);
  }

  // optional uint32 match_disabled_account_id = 25;
  if (has_match_disabled_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->match_disabled_account_id(), output);
  }

  // optional uint32 matchmaking_max_range_minutes = 26;
  if (has_matchmaking_max_range_minutes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->matchmaking_max_range_minutes(), output);
  }

  // optional uint32 matchlanguages = 27;
  if (has_matchlanguages()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->matchlanguages(), output);
  }

  // repeated .CSODOTAPartyMember members = 29;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->members(i), output);
  }

  // optional uint32 open_guild_id = 30;
  if (has_open_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->open_guild_id(), output);
  }

  // repeated uint32 common_guilds = 31;
  for (int i = 0; i < this->common_guilds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      31, this->common_guilds(i), output);
  }

  // optional uint32 raw_started_matchmaking_time = 32;
  if (has_raw_started_matchmaking_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->raw_started_matchmaking_time(), output);
  }

  // optional uint32 attempt_start_time = 33;
  if (has_attempt_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->attempt_start_time(), output);
  }

  // optional uint32 attempt_num = 34;
  if (has_attempt_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->attempt_num(), output);
  }

  // optional uint32 low_priority_games_remaining = 35;
  if (has_low_priority_games_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->low_priority_games_remaining(), output);
  }

  // optional uint32 map_preference = 38;
  if (has_map_preference()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->map_preference(), output);
  }

  // repeated .EEvent active_ingame_events = 39;
  for (int i = 0; i < this->active_ingame_events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      39, this->active_ingame_events(i), output);
  }

  // optional bool open_for_join_requests = 40;
  if (has_open_for_join_requests()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->open_for_join_requests(), output);
  }

  // repeated .CSODOTAPartyInvite sent_invites = 41;
  for (int i = 0; i < this->sent_invites_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->sent_invites(i), output);
  }

  // repeated .CSODOTAPartyInvite recv_invites = 42;
  for (int i = 0; i < this->recv_invites_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->recv_invites(i), output);
  }

  // optional uint32 account_flags = 43;
  if (has_account_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->account_flags(), output);
  }

  // optional uint32 region_select_flags = 44;
  if (has_region_select_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->region_select_flags(), output);
  }

  // optional uint32 exclusive_tournament_id = 45;
  if (has_exclusive_tournament_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->exclusive_tournament_id(), output);
  }

  // optional uint32 tourney_division_id = 47;
  if (has_tourney_division_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->tourney_division_id(), output);
  }

  // optional uint32 tourney_schedule_time = 48;
  if (has_tourney_schedule_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->tourney_schedule_time(), output);
  }

  // optional uint32 tourney_skill_level = 49;
  if (has_tourney_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->tourney_skill_level(), output);
  }

  // optional uint32 tourney_bracket_round = 50;
  if (has_tourney_bracket_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->tourney_bracket_round(), output);
  }

  // optional string team_name = 51;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      51, this->team_name(), output);
  }

  // optional uint64 team_ui_logo = 52;
  if (has_team_ui_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(52, this->team_ui_logo(), output);
  }

  // optional uint64 team_base_logo = 53;
  if (has_team_base_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(53, this->team_base_logo(), output);
  }

  // optional uint32 tourney_queue_deadline_time = 54;
  if (has_tourney_queue_deadline_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->tourney_queue_deadline_time(), output);
  }

  // optional .ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
  if (has_tourney_queue_deadline_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      55, this->tourney_queue_deadline_state(), output);
  }

  // optional uint32 party_builder_slots_to_fill = 56;
  if (has_party_builder_slots_to_fill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->party_builder_slots_to_fill(), output);
  }

  // optional uint32 party_builder_match_groups = 57;
  if (has_party_builder_match_groups()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(57, this->party_builder_match_groups(), output);
  }

  // optional uint32 party_builder_start_time = 58;
  if (has_party_builder_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->party_builder_start_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSODOTAParty)
}

::google::protobuf::uint8* CSODOTAParty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAParty)
  // optional uint64 party_id = 1;
  if (has_party_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->party_id(), target);
  }

  // optional fixed64 leader_id = 2;
  if (has_leader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->leader_id(), target);
  }

  // repeated fixed64 member_ids = 3;
  for (int i = 0; i < this->member_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(3, this->member_ids(i), target);
  }

  // optional uint32 game_modes = 4;
  if (has_game_modes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_modes(), target);
  }

  // optional .CSODOTAParty.State state = 6 [default = UI];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->state(), target);
  }

  // optional uint32 effective_started_matchmaking_time = 7;
  if (has_effective_started_matchmaking_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->effective_started_matchmaking_time(), target);
  }

  // optional uint32 matchgroups = 11;
  if (has_matchgroups()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->matchgroups(), target);
  }

  // optional uint32 low_priority_account_id = 19;
  if (has_low_priority_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->low_priority_account_id(), target);
  }

  // optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
  if (has_match_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->match_type(), target);
  }

  // optional .DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
  if (has_bot_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->bot_difficulty(), target);
  }

  // optional uint32 team_id = 23;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->team_id(), target);
  }

  // optional uint32 match_disabled_until_date = 24;
  if (has_match_disabled_until_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->match_disabled_until_date(), target);
  }

  // optional uint32 match_disabled_account_id = 25;
  if (has_match_disabled_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->match_disabled_account_id(), target);
  }

  // optional uint32 matchmaking_max_range_minutes = 26;
  if (has_matchmaking_max_range_minutes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->matchmaking_max_range_minutes(), target);
  }

  // optional uint32 matchlanguages = 27;
  if (has_matchlanguages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->matchlanguages(), target);
  }

  // repeated .CSODOTAPartyMember members = 29;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->members(i), target);
  }

  // optional uint32 open_guild_id = 30;
  if (has_open_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->open_guild_id(), target);
  }

  // repeated uint32 common_guilds = 31;
  for (int i = 0; i < this->common_guilds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(31, this->common_guilds(i), target);
  }

  // optional uint32 raw_started_matchmaking_time = 32;
  if (has_raw_started_matchmaking_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->raw_started_matchmaking_time(), target);
  }

  // optional uint32 attempt_start_time = 33;
  if (has_attempt_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->attempt_start_time(), target);
  }

  // optional uint32 attempt_num = 34;
  if (has_attempt_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->attempt_num(), target);
  }

  // optional uint32 low_priority_games_remaining = 35;
  if (has_low_priority_games_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->low_priority_games_remaining(), target);
  }

  // optional uint32 map_preference = 38;
  if (has_map_preference()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->map_preference(), target);
  }

  // repeated .EEvent active_ingame_events = 39;
  for (int i = 0; i < this->active_ingame_events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      39, this->active_ingame_events(i), target);
  }

  // optional bool open_for_join_requests = 40;
  if (has_open_for_join_requests()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->open_for_join_requests(), target);
  }

  // repeated .CSODOTAPartyInvite sent_invites = 41;
  for (int i = 0; i < this->sent_invites_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->sent_invites(i), target);
  }

  // repeated .CSODOTAPartyInvite recv_invites = 42;
  for (int i = 0; i < this->recv_invites_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->recv_invites(i), target);
  }

  // optional uint32 account_flags = 43;
  if (has_account_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->account_flags(), target);
  }

  // optional uint32 region_select_flags = 44;
  if (has_region_select_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->region_select_flags(), target);
  }

  // optional uint32 exclusive_tournament_id = 45;
  if (has_exclusive_tournament_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->exclusive_tournament_id(), target);
  }

  // optional uint32 tourney_division_id = 47;
  if (has_tourney_division_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->tourney_division_id(), target);
  }

  // optional uint32 tourney_schedule_time = 48;
  if (has_tourney_schedule_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->tourney_schedule_time(), target);
  }

  // optional uint32 tourney_skill_level = 49;
  if (has_tourney_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->tourney_skill_level(), target);
  }

  // optional uint32 tourney_bracket_round = 50;
  if (has_tourney_bracket_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->tourney_bracket_round(), target);
  }

  // optional string team_name = 51;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        51, this->team_name(), target);
  }

  // optional uint64 team_ui_logo = 52;
  if (has_team_ui_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(52, this->team_ui_logo(), target);
  }

  // optional uint64 team_base_logo = 53;
  if (has_team_base_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(53, this->team_base_logo(), target);
  }

  // optional uint32 tourney_queue_deadline_time = 54;
  if (has_tourney_queue_deadline_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->tourney_queue_deadline_time(), target);
  }

  // optional .ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
  if (has_tourney_queue_deadline_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      55, this->tourney_queue_deadline_state(), target);
  }

  // optional uint32 party_builder_slots_to_fill = 56;
  if (has_party_builder_slots_to_fill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->party_builder_slots_to_fill(), target);
  }

  // optional uint32 party_builder_match_groups = 57;
  if (has_party_builder_match_groups()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(57, this->party_builder_match_groups(), target);
  }

  // optional uint32 party_builder_start_time = 58;
  if (has_party_builder_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(58, this->party_builder_start_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAParty)
  return target;
}

int CSODOTAParty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 party_id = 1;
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }

    // optional fixed64 leader_id = 2;
    if (has_leader_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 game_modes = 4;
    if (has_game_modes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_modes());
    }

    // optional .CSODOTAParty.State state = 6 [default = UI];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 effective_started_matchmaking_time = 7;
    if (has_effective_started_matchmaking_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effective_started_matchmaking_time());
    }

    // optional uint32 raw_started_matchmaking_time = 32;
    if (has_raw_started_matchmaking_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_started_matchmaking_time());
    }

    // optional uint32 attempt_start_time = 33;
    if (has_attempt_start_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attempt_start_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 attempt_num = 34;
    if (has_attempt_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attempt_num());
    }

    // optional uint32 matchgroups = 11;
    if (has_matchgroups()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchgroups());
    }

    // optional uint32 low_priority_account_id = 19;
    if (has_low_priority_account_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_priority_account_id());
    }

    // optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
    if (has_match_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_type());
    }

    // optional .DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
    if (has_bot_difficulty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty());
    }

    // optional uint32 team_id = 23;
    if (has_team_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional string team_name = 51;
    if (has_team_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional uint64 team_ui_logo = 52;
    if (has_team_ui_logo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_ui_logo());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 team_base_logo = 53;
    if (has_team_base_logo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_base_logo());
    }

    // optional uint32 match_disabled_until_date = 24;
    if (has_match_disabled_until_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_disabled_until_date());
    }

    // optional uint32 match_disabled_account_id = 25;
    if (has_match_disabled_account_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_disabled_account_id());
    }

    // optional uint32 matchmaking_max_range_minutes = 26;
    if (has_matchmaking_max_range_minutes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchmaking_max_range_minutes());
    }

    // optional uint32 matchlanguages = 27;
    if (has_matchlanguages()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchlanguages());
    }

    // optional uint32 map_preference = 38;
    if (has_map_preference()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_preference());
    }

    // optional uint32 open_guild_id = 30;
    if (has_open_guild_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_guild_id());
    }

  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional uint32 low_priority_games_remaining = 35;
    if (has_low_priority_games_remaining()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_priority_games_remaining());
    }

    // optional bool open_for_join_requests = 40;
    if (has_open_for_join_requests()) {
      total_size += 2 + 1;
    }

    // optional uint32 account_flags = 43;
    if (has_account_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_flags());
    }

    // optional uint32 region_select_flags = 44;
    if (has_region_select_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_select_flags());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 exclusive_tournament_id = 45;
    if (has_exclusive_tournament_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exclusive_tournament_id());
    }

    // optional uint32 tourney_division_id = 47;
    if (has_tourney_division_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_division_id());
    }

    // optional uint32 tourney_schedule_time = 48;
    if (has_tourney_schedule_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_schedule_time());
    }

    // optional uint32 tourney_skill_level = 49;
    if (has_tourney_skill_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_skill_level());
    }

    // optional uint32 tourney_bracket_round = 50;
    if (has_tourney_bracket_round()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_bracket_round());
    }

    // optional uint32 tourney_queue_deadline_time = 54;
    if (has_tourney_queue_deadline_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_queue_deadline_time());
    }

    // optional .ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
    if (has_tourney_queue_deadline_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tourney_queue_deadline_state());
    }

    // optional uint32 party_builder_slots_to_fill = 56;
    if (has_party_builder_slots_to_fill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->party_builder_slots_to_fill());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 party_builder_match_groups = 57;
    if (has_party_builder_match_groups()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->party_builder_match_groups());
    }

    // optional uint32 party_builder_start_time = 58;
    if (has_party_builder_start_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->party_builder_start_time());
    }

  }
  // repeated fixed64 member_ids = 3;
  {
    int data_size = 0;
    data_size = 8 * this->member_ids_size();
    total_size += 1 * this->member_ids_size() + data_size;
  }

  // repeated .CSODOTAPartyMember members = 29;
  total_size += 2 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  // repeated uint32 common_guilds = 31;
  {
    int data_size = 0;
    for (int i = 0; i < this->common_guilds_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->common_guilds(i));
    }
    total_size += 2 * this->common_guilds_size() + data_size;
  }

  // repeated .EEvent active_ingame_events = 39;
  {
    int data_size = 0;
    for (int i = 0; i < this->active_ingame_events_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->active_ingame_events(i));
    }
    total_size += 2 * this->active_ingame_events_size() + data_size;
  }

  // repeated .CSODOTAPartyInvite sent_invites = 41;
  total_size += 2 * this->sent_invites_size();
  for (int i = 0; i < this->sent_invites_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sent_invites(i));
  }

  // repeated .CSODOTAPartyInvite recv_invites = 42;
  total_size += 2 * this->recv_invites_size();
  for (int i = 0; i < this->recv_invites_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recv_invites(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTAParty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSODOTAParty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSODOTAParty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTAParty::MergeFrom(const CSODOTAParty& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_ids_.MergeFrom(from.member_ids_);
  members_.MergeFrom(from.members_);
  common_guilds_.MergeFrom(from.common_guilds_);
  active_ingame_events_.MergeFrom(from.active_ingame_events_);
  sent_invites_.MergeFrom(from.sent_invites_);
  recv_invites_.MergeFrom(from.recv_invites_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_party_id()) {
      set_party_id(from.party_id());
    }
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_game_modes()) {
      set_game_modes(from.game_modes());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_effective_started_matchmaking_time()) {
      set_effective_started_matchmaking_time(from.effective_started_matchmaking_time());
    }
    if (from.has_raw_started_matchmaking_time()) {
      set_raw_started_matchmaking_time(from.raw_started_matchmaking_time());
    }
    if (from.has_attempt_start_time()) {
      set_attempt_start_time(from.attempt_start_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attempt_num()) {
      set_attempt_num(from.attempt_num());
    }
    if (from.has_matchgroups()) {
      set_matchgroups(from.matchgroups());
    }
    if (from.has_low_priority_account_id()) {
      set_low_priority_account_id(from.low_priority_account_id());
    }
    if (from.has_match_type()) {
      set_match_type(from.match_type());
    }
    if (from.has_bot_difficulty()) {
      set_bot_difficulty(from.bot_difficulty());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
    if (from.has_team_ui_logo()) {
      set_team_ui_logo(from.team_ui_logo());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_team_base_logo()) {
      set_team_base_logo(from.team_base_logo());
    }
    if (from.has_match_disabled_until_date()) {
      set_match_disabled_until_date(from.match_disabled_until_date());
    }
    if (from.has_match_disabled_account_id()) {
      set_match_disabled_account_id(from.match_disabled_account_id());
    }
    if (from.has_matchmaking_max_range_minutes()) {
      set_matchmaking_max_range_minutes(from.matchmaking_max_range_minutes());
    }
    if (from.has_matchlanguages()) {
      set_matchlanguages(from.matchlanguages());
    }
    if (from.has_map_preference()) {
      set_map_preference(from.map_preference());
    }
    if (from.has_open_guild_id()) {
      set_open_guild_id(from.open_guild_id());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_low_priority_games_remaining()) {
      set_low_priority_games_remaining(from.low_priority_games_remaining());
    }
    if (from.has_open_for_join_requests()) {
      set_open_for_join_requests(from.open_for_join_requests());
    }
    if (from.has_account_flags()) {
      set_account_flags(from.account_flags());
    }
    if (from.has_region_select_flags()) {
      set_region_select_flags(from.region_select_flags());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_exclusive_tournament_id()) {
      set_exclusive_tournament_id(from.exclusive_tournament_id());
    }
    if (from.has_tourney_division_id()) {
      set_tourney_division_id(from.tourney_division_id());
    }
    if (from.has_tourney_schedule_time()) {
      set_tourney_schedule_time(from.tourney_schedule_time());
    }
    if (from.has_tourney_skill_level()) {
      set_tourney_skill_level(from.tourney_skill_level());
    }
    if (from.has_tourney_bracket_round()) {
      set_tourney_bracket_round(from.tourney_bracket_round());
    }
    if (from.has_tourney_queue_deadline_time()) {
      set_tourney_queue_deadline_time(from.tourney_queue_deadline_time());
    }
    if (from.has_tourney_queue_deadline_state()) {
      set_tourney_queue_deadline_state(from.tourney_queue_deadline_state());
    }
    if (from.has_party_builder_slots_to_fill()) {
      set_party_builder_slots_to_fill(from.party_builder_slots_to_fill());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_party_builder_match_groups()) {
      set_party_builder_match_groups(from.party_builder_match_groups());
    }
    if (from.has_party_builder_start_time()) {
      set_party_builder_start_time(from.party_builder_start_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSODOTAParty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAParty::CopyFrom(const CSODOTAParty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAParty::IsInitialized() const {

  return true;
}

void CSODOTAParty::Swap(CSODOTAParty* other) {
  if (other != this) {
    std::swap(party_id_, other->party_id_);
    std::swap(leader_id_, other->leader_id_);
    member_ids_.Swap(&other->member_ids_);
    std::swap(game_modes_, other->game_modes_);
    std::swap(state_, other->state_);
    std::swap(effective_started_matchmaking_time_, other->effective_started_matchmaking_time_);
    std::swap(raw_started_matchmaking_time_, other->raw_started_matchmaking_time_);
    std::swap(attempt_start_time_, other->attempt_start_time_);
    std::swap(attempt_num_, other->attempt_num_);
    std::swap(matchgroups_, other->matchgroups_);
    std::swap(low_priority_account_id_, other->low_priority_account_id_);
    std::swap(match_type_, other->match_type_);
    std::swap(bot_difficulty_, other->bot_difficulty_);
    std::swap(team_id_, other->team_id_);
    std::swap(team_name_, other->team_name_);
    std::swap(team_ui_logo_, other->team_ui_logo_);
    std::swap(team_base_logo_, other->team_base_logo_);
    std::swap(match_disabled_until_date_, other->match_disabled_until_date_);
    std::swap(match_disabled_account_id_, other->match_disabled_account_id_);
    std::swap(matchmaking_max_range_minutes_, other->matchmaking_max_range_minutes_);
    std::swap(matchlanguages_, other->matchlanguages_);
    std::swap(map_preference_, other->map_preference_);
    members_.Swap(&other->members_);
    std::swap(open_guild_id_, other->open_guild_id_);
    common_guilds_.Swap(&other->common_guilds_);
    std::swap(low_priority_games_remaining_, other->low_priority_games_remaining_);
    active_ingame_events_.Swap(&other->active_ingame_events_);
    std::swap(open_for_join_requests_, other->open_for_join_requests_);
    sent_invites_.Swap(&other->sent_invites_);
    recv_invites_.Swap(&other->recv_invites_);
    std::swap(account_flags_, other->account_flags_);
    std::swap(region_select_flags_, other->region_select_flags_);
    std::swap(exclusive_tournament_id_, other->exclusive_tournament_id_);
    std::swap(tourney_division_id_, other->tourney_division_id_);
    std::swap(tourney_schedule_time_, other->tourney_schedule_time_);
    std::swap(tourney_skill_level_, other->tourney_skill_level_);
    std::swap(tourney_bracket_round_, other->tourney_bracket_round_);
    std::swap(tourney_queue_deadline_time_, other->tourney_queue_deadline_time_);
    std::swap(tourney_queue_deadline_state_, other->tourney_queue_deadline_state_);
    std::swap(party_builder_slots_to_fill_, other->party_builder_slots_to_fill_);
    std::swap(party_builder_match_groups_, other->party_builder_match_groups_);
    std::swap(party_builder_start_time_, other->party_builder_start_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSODOTAParty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTAParty_descriptor_;
  metadata.reflection = CSODOTAParty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSODOTAPartyInvite_PartyMember::kNameFieldNumber;
const int CSODOTAPartyInvite_PartyMember::kSteamIdFieldNumber;
const int CSODOTAPartyInvite_PartyMember::kIsCoachFieldNumber;
#endif  // !_MSC_VER

CSODOTAPartyInvite_PartyMember::CSODOTAPartyInvite_PartyMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSODOTAPartyInvite.PartyMember)
}

void CSODOTAPartyInvite_PartyMember::InitAsDefaultInstance() {
}

CSODOTAPartyInvite_PartyMember::CSODOTAPartyInvite_PartyMember(const CSODOTAPartyInvite_PartyMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSODOTAPartyInvite.PartyMember)
}

void CSODOTAPartyInvite_PartyMember::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_ = GOOGLE_ULONGLONG(0);
  is_coach_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTAPartyInvite_PartyMember::~CSODOTAPartyInvite_PartyMember() {
  // @@protoc_insertion_point(destructor:CSODOTAPartyInvite.PartyMember)
  SharedDtor();
}

void CSODOTAPartyInvite_PartyMember::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CSODOTAPartyInvite_PartyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTAPartyInvite_PartyMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTAPartyInvite_PartyMember_descriptor_;
}

const CSODOTAPartyInvite_PartyMember& CSODOTAPartyInvite_PartyMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CSODOTAPartyInvite_PartyMember* CSODOTAPartyInvite_PartyMember::default_instance_ = NULL;

CSODOTAPartyInvite_PartyMember* CSODOTAPartyInvite_PartyMember::New() const {
  return new CSODOTAPartyInvite_PartyMember;
}

void CSODOTAPartyInvite_PartyMember::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSODOTAPartyInvite_PartyMember*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(steam_id_, is_coach_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSODOTAPartyInvite_PartyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSODOTAPartyInvite.PartyMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_steam_id;
        break;
      }

      // optional fixed64 steam_id = 2;
      case 2: {
        if (tag == 17) {
         parse_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_coach;
        break;
      }

      // optional bool is_coach = 4;
      case 4: {
        if (tag == 32) {
         parse_is_coach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_coach_)));
          set_has_is_coach();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSODOTAPartyInvite.PartyMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSODOTAPartyInvite.PartyMember)
  return false;
#undef DO_
}

void CSODOTAPartyInvite_PartyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSODOTAPartyInvite.PartyMember)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional fixed64 steam_id = 2;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id(), output);
  }

  // optional bool is_coach = 4;
  if (has_is_coach()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_coach(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSODOTAPartyInvite.PartyMember)
}

::google::protobuf::uint8* CSODOTAPartyInvite_PartyMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAPartyInvite.PartyMember)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional fixed64 steam_id = 2;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id(), target);
  }

  // optional bool is_coach = 4;
  if (has_is_coach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_coach(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAPartyInvite.PartyMember)
  return target;
}

int CSODOTAPartyInvite_PartyMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional fixed64 steam_id = 2;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional bool is_coach = 4;
    if (has_is_coach()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTAPartyInvite_PartyMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSODOTAPartyInvite_PartyMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSODOTAPartyInvite_PartyMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTAPartyInvite_PartyMember::MergeFrom(const CSODOTAPartyInvite_PartyMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_is_coach()) {
      set_is_coach(from.is_coach());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSODOTAPartyInvite_PartyMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAPartyInvite_PartyMember::CopyFrom(const CSODOTAPartyInvite_PartyMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAPartyInvite_PartyMember::IsInitialized() const {

  return true;
}

void CSODOTAPartyInvite_PartyMember::Swap(CSODOTAPartyInvite_PartyMember* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(steam_id_, other->steam_id_);
    std::swap(is_coach_, other->is_coach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSODOTAPartyInvite_PartyMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTAPartyInvite_PartyMember_descriptor_;
  metadata.reflection = CSODOTAPartyInvite_PartyMember_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSODOTAPartyInvite::kGroupIdFieldNumber;
const int CSODOTAPartyInvite::kSenderIdFieldNumber;
const int CSODOTAPartyInvite::kSenderNameFieldNumber;
const int CSODOTAPartyInvite::kMembersFieldNumber;
const int CSODOTAPartyInvite::kTeamIdFieldNumber;
const int CSODOTAPartyInvite::kLowPriorityStatusFieldNumber;
const int CSODOTAPartyInvite::kAsCoachFieldNumber;
const int CSODOTAPartyInvite::kInviteGidFieldNumber;
#endif  // !_MSC_VER

CSODOTAPartyInvite::CSODOTAPartyInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSODOTAPartyInvite)
}

void CSODOTAPartyInvite::InitAsDefaultInstance() {
}

CSODOTAPartyInvite::CSODOTAPartyInvite(const CSODOTAPartyInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSODOTAPartyInvite)
}

void CSODOTAPartyInvite::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  sender_id_ = GOOGLE_ULONGLONG(0);
  sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_id_ = 0u;
  low_priority_status_ = false;
  as_coach_ = false;
  invite_gid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTAPartyInvite::~CSODOTAPartyInvite() {
  // @@protoc_insertion_point(destructor:CSODOTAPartyInvite)
  SharedDtor();
}

void CSODOTAPartyInvite::SharedDtor() {
  if (sender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_name_;
  }
  if (this != default_instance_) {
  }
}

void CSODOTAPartyInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTAPartyInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTAPartyInvite_descriptor_;
}

const CSODOTAPartyInvite& CSODOTAPartyInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CSODOTAPartyInvite* CSODOTAPartyInvite::default_instance_ = NULL;

CSODOTAPartyInvite* CSODOTAPartyInvite::New() const {
  return new CSODOTAPartyInvite;
}

void CSODOTAPartyInvite::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSODOTAPartyInvite*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(group_id_, sender_id_);
    ZR_(team_id_, invite_gid_);
    if (has_sender_name()) {
      if (sender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sender_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSODOTAPartyInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSODOTAPartyInvite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_sender_id;
        break;
      }

      // optional fixed64 sender_id = 2;
      case 2: {
        if (tag == 17) {
         parse_sender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sender_id_)));
          set_has_sender_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sender_name;
        break;
      }

      // optional string sender_name = 3;
      case 3: {
        if (tag == 26) {
         parse_sender_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender_name().data(), this->sender_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sender_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_members;
        break;
      }

      // repeated .CSODOTAPartyInvite.PartyMember members = 4;
      case 4: {
        if (tag == 34) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_members;
        if (input->ExpectTag(40)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 5;
      case 5: {
        if (tag == 40) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_low_priority_status;
        break;
      }

      // optional bool low_priority_status = 6;
      case 6: {
        if (tag == 48) {
         parse_low_priority_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_priority_status_)));
          set_has_low_priority_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_as_coach;
        break;
      }

      // optional bool as_coach = 7;
      case 7: {
        if (tag == 56) {
         parse_as_coach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &as_coach_)));
          set_has_as_coach();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_invite_gid;
        break;
      }

      // optional fixed64 invite_gid = 8;
      case 8: {
        if (tag == 65) {
         parse_invite_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &invite_gid_)));
          set_has_invite_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSODOTAPartyInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSODOTAPartyInvite)
  return false;
#undef DO_
}

void CSODOTAPartyInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSODOTAPartyInvite)
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }

  // optional fixed64 sender_id = 2;
  if (has_sender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->sender_id(), output);
  }

  // optional string sender_name = 3;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sender_name(), output);
  }

  // repeated .CSODOTAPartyInvite.PartyMember members = 4;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->members(i), output);
  }

  // optional uint32 team_id = 5;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_id(), output);
  }

  // optional bool low_priority_status = 6;
  if (has_low_priority_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->low_priority_status(), output);
  }

  // optional bool as_coach = 7;
  if (has_as_coach()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->as_coach(), output);
  }

  // optional fixed64 invite_gid = 8;
  if (has_invite_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->invite_gid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSODOTAPartyInvite)
}

::google::protobuf::uint8* CSODOTAPartyInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAPartyInvite)
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }

  // optional fixed64 sender_id = 2;
  if (has_sender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->sender_id(), target);
  }

  // optional string sender_name = 3;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sender_name(), target);
  }

  // repeated .CSODOTAPartyInvite.PartyMember members = 4;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->members(i), target);
  }

  // optional uint32 team_id = 5;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_id(), target);
  }

  // optional bool low_priority_status = 6;
  if (has_low_priority_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->low_priority_status(), target);
  }

  // optional bool as_coach = 7;
  if (has_as_coach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->as_coach(), target);
  }

  // optional fixed64 invite_gid = 8;
  if (has_invite_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->invite_gid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAPartyInvite)
  return target;
}

int CSODOTAPartyInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional fixed64 sender_id = 2;
    if (has_sender_id()) {
      total_size += 1 + 8;
    }

    // optional string sender_name = 3;
    if (has_sender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_name());
    }

    // optional uint32 team_id = 5;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional bool low_priority_status = 6;
    if (has_low_priority_status()) {
      total_size += 1 + 1;
    }

    // optional bool as_coach = 7;
    if (has_as_coach()) {
      total_size += 1 + 1;
    }

    // optional fixed64 invite_gid = 8;
    if (has_invite_gid()) {
      total_size += 1 + 8;
    }

  }
  // repeated .CSODOTAPartyInvite.PartyMember members = 4;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTAPartyInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSODOTAPartyInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSODOTAPartyInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTAPartyInvite::MergeFrom(const CSODOTAPartyInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_sender_id()) {
      set_sender_id(from.sender_id());
    }
    if (from.has_sender_name()) {
      set_sender_name(from.sender_name());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_low_priority_status()) {
      set_low_priority_status(from.low_priority_status());
    }
    if (from.has_as_coach()) {
      set_as_coach(from.as_coach());
    }
    if (from.has_invite_gid()) {
      set_invite_gid(from.invite_gid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSODOTAPartyInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAPartyInvite::CopyFrom(const CSODOTAPartyInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAPartyInvite::IsInitialized() const {

  return true;
}

void CSODOTAPartyInvite::Swap(CSODOTAPartyInvite* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(sender_id_, other->sender_id_);
    std::swap(sender_name_, other->sender_name_);
    members_.Swap(&other->members_);
    std::swap(team_id_, other->team_id_);
    std::swap(low_priority_status_, other->low_priority_status_);
    std::swap(as_coach_, other->as_coach_);
    std::swap(invite_gid_, other->invite_gid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSODOTAPartyInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTAPartyInvite_descriptor_;
  metadata.reflection = CSODOTAPartyInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSODOTALobbyInvite_LobbyMember::kNameFieldNumber;
const int CSODOTALobbyInvite_LobbyMember::kSteamIdFieldNumber;
#endif  // !_MSC_VER

CSODOTALobbyInvite_LobbyMember::CSODOTALobbyInvite_LobbyMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSODOTALobbyInvite.LobbyMember)
}

void CSODOTALobbyInvite_LobbyMember::InitAsDefaultInstance() {
}

CSODOTALobbyInvite_LobbyMember::CSODOTALobbyInvite_LobbyMember(const CSODOTALobbyInvite_LobbyMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSODOTALobbyInvite.LobbyMember)
}

void CSODOTALobbyInvite_LobbyMember::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTALobbyInvite_LobbyMember::~CSODOTALobbyInvite_LobbyMember() {
  // @@protoc_insertion_point(destructor:CSODOTALobbyInvite.LobbyMember)
  SharedDtor();
}

void CSODOTALobbyInvite_LobbyMember::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CSODOTALobbyInvite_LobbyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTALobbyInvite_LobbyMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTALobbyInvite_LobbyMember_descriptor_;
}

const CSODOTALobbyInvite_LobbyMember& CSODOTALobbyInvite_LobbyMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CSODOTALobbyInvite_LobbyMember* CSODOTALobbyInvite_LobbyMember::default_instance_ = NULL;

CSODOTALobbyInvite_LobbyMember* CSODOTALobbyInvite_LobbyMember::New() const {
  return new CSODOTALobbyInvite_LobbyMember;
}

void CSODOTALobbyInvite_LobbyMember::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    steam_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSODOTALobbyInvite_LobbyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSODOTALobbyInvite.LobbyMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_steam_id;
        break;
      }

      // optional fixed64 steam_id = 2;
      case 2: {
        if (tag == 17) {
         parse_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSODOTALobbyInvite.LobbyMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSODOTALobbyInvite.LobbyMember)
  return false;
#undef DO_
}

void CSODOTALobbyInvite_LobbyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSODOTALobbyInvite.LobbyMember)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional fixed64 steam_id = 2;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSODOTALobbyInvite.LobbyMember)
}

::google::protobuf::uint8* CSODOTALobbyInvite_LobbyMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTALobbyInvite.LobbyMember)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional fixed64 steam_id = 2;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTALobbyInvite.LobbyMember)
  return target;
}

int CSODOTALobbyInvite_LobbyMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional fixed64 steam_id = 2;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTALobbyInvite_LobbyMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSODOTALobbyInvite_LobbyMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSODOTALobbyInvite_LobbyMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTALobbyInvite_LobbyMember::MergeFrom(const CSODOTALobbyInvite_LobbyMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSODOTALobbyInvite_LobbyMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTALobbyInvite_LobbyMember::CopyFrom(const CSODOTALobbyInvite_LobbyMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobbyInvite_LobbyMember::IsInitialized() const {

  return true;
}

void CSODOTALobbyInvite_LobbyMember::Swap(CSODOTALobbyInvite_LobbyMember* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(steam_id_, other->steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSODOTALobbyInvite_LobbyMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTALobbyInvite_LobbyMember_descriptor_;
  metadata.reflection = CSODOTALobbyInvite_LobbyMember_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSODOTALobbyInvite::kGroupIdFieldNumber;
const int CSODOTALobbyInvite::kSenderIdFieldNumber;
const int CSODOTALobbyInvite::kSenderNameFieldNumber;
const int CSODOTALobbyInvite::kMembersFieldNumber;
const int CSODOTALobbyInvite::kCustomGameIdFieldNumber;
const int CSODOTALobbyInvite::kInviteGidFieldNumber;
const int CSODOTALobbyInvite::kCustomGameCrcFieldNumber;
const int CSODOTALobbyInvite::kCustomGameTimestampFieldNumber;
#endif  // !_MSC_VER

CSODOTALobbyInvite::CSODOTALobbyInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSODOTALobbyInvite)
}

void CSODOTALobbyInvite::InitAsDefaultInstance() {
}

CSODOTALobbyInvite::CSODOTALobbyInvite(const CSODOTALobbyInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSODOTALobbyInvite)
}

void CSODOTALobbyInvite::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  sender_id_ = GOOGLE_ULONGLONG(0);
  sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  invite_gid_ = GOOGLE_ULONGLONG(0);
  custom_game_crc_ = GOOGLE_ULONGLONG(0);
  custom_game_timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTALobbyInvite::~CSODOTALobbyInvite() {
  // @@protoc_insertion_point(destructor:CSODOTALobbyInvite)
  SharedDtor();
}

void CSODOTALobbyInvite::SharedDtor() {
  if (sender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_name_;
  }
  if (this != default_instance_) {
  }
}

void CSODOTALobbyInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTALobbyInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTALobbyInvite_descriptor_;
}

const CSODOTALobbyInvite& CSODOTALobbyInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CSODOTALobbyInvite* CSODOTALobbyInvite::default_instance_ = NULL;

CSODOTALobbyInvite* CSODOTALobbyInvite::New() const {
  return new CSODOTALobbyInvite;
}

void CSODOTALobbyInvite::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSODOTALobbyInvite*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(group_id_, sender_id_);
    ZR_(custom_game_id_, custom_game_timestamp_);
    if (has_sender_name()) {
      if (sender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sender_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSODOTALobbyInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSODOTALobbyInvite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_sender_id;
        break;
      }

      // optional fixed64 sender_id = 2;
      case 2: {
        if (tag == 17) {
         parse_sender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sender_id_)));
          set_has_sender_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sender_name;
        break;
      }

      // optional string sender_name = 3;
      case 3: {
        if (tag == 26) {
         parse_sender_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender_name().data(), this->sender_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sender_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_members;
        break;
      }

      // repeated .CSODOTALobbyInvite.LobbyMember members = 4;
      case 4: {
        if (tag == 34) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_members;
        if (input->ExpectTag(40)) goto parse_custom_game_id;
        break;
      }

      // optional uint64 custom_game_id = 5;
      case 5: {
        if (tag == 40) {
         parse_custom_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
          set_has_custom_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_invite_gid;
        break;
      }

      // optional fixed64 invite_gid = 6;
      case 6: {
        if (tag == 49) {
         parse_invite_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &invite_gid_)));
          set_has_invite_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_custom_game_crc;
        break;
      }

      // optional fixed64 custom_game_crc = 7;
      case 7: {
        if (tag == 57) {
         parse_custom_game_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &custom_game_crc_)));
          set_has_custom_game_crc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_custom_game_timestamp;
        break;
      }

      // optional fixed32 custom_game_timestamp = 8;
      case 8: {
        if (tag == 69) {
         parse_custom_game_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_game_timestamp_)));
          set_has_custom_game_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSODOTALobbyInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSODOTALobbyInvite)
  return false;
#undef DO_
}

void CSODOTALobbyInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSODOTALobbyInvite)
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }

  // optional fixed64 sender_id = 2;
  if (has_sender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->sender_id(), output);
  }

  // optional string sender_name = 3;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sender_name(), output);
  }

  // repeated .CSODOTALobbyInvite.LobbyMember members = 4;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->members(i), output);
  }

  // optional uint64 custom_game_id = 5;
  if (has_custom_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->custom_game_id(), output);
  }

  // optional fixed64 invite_gid = 6;
  if (has_invite_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->invite_gid(), output);
  }

  // optional fixed64 custom_game_crc = 7;
  if (has_custom_game_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->custom_game_crc(), output);
  }

  // optional fixed32 custom_game_timestamp = 8;
  if (has_custom_game_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->custom_game_timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSODOTALobbyInvite)
}

::google::protobuf::uint8* CSODOTALobbyInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTALobbyInvite)
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }

  // optional fixed64 sender_id = 2;
  if (has_sender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->sender_id(), target);
  }

  // optional string sender_name = 3;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sender_name(), target);
  }

  // repeated .CSODOTALobbyInvite.LobbyMember members = 4;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->members(i), target);
  }

  // optional uint64 custom_game_id = 5;
  if (has_custom_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->custom_game_id(), target);
  }

  // optional fixed64 invite_gid = 6;
  if (has_invite_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->invite_gid(), target);
  }

  // optional fixed64 custom_game_crc = 7;
  if (has_custom_game_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->custom_game_crc(), target);
  }

  // optional fixed32 custom_game_timestamp = 8;
  if (has_custom_game_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->custom_game_timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTALobbyInvite)
  return target;
}

int CSODOTALobbyInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional fixed64 sender_id = 2;
    if (has_sender_id()) {
      total_size += 1 + 8;
    }

    // optional string sender_name = 3;
    if (has_sender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_name());
    }

    // optional uint64 custom_game_id = 5;
    if (has_custom_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

    // optional fixed64 invite_gid = 6;
    if (has_invite_gid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 custom_game_crc = 7;
    if (has_custom_game_crc()) {
      total_size += 1 + 8;
    }

    // optional fixed32 custom_game_timestamp = 8;
    if (has_custom_game_timestamp()) {
      total_size += 1 + 4;
    }

  }
  // repeated .CSODOTALobbyInvite.LobbyMember members = 4;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTALobbyInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSODOTALobbyInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSODOTALobbyInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTALobbyInvite::MergeFrom(const CSODOTALobbyInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_sender_id()) {
      set_sender_id(from.sender_id());
    }
    if (from.has_sender_name()) {
      set_sender_name(from.sender_name());
    }
    if (from.has_custom_game_id()) {
      set_custom_game_id(from.custom_game_id());
    }
    if (from.has_invite_gid()) {
      set_invite_gid(from.invite_gid());
    }
    if (from.has_custom_game_crc()) {
      set_custom_game_crc(from.custom_game_crc());
    }
    if (from.has_custom_game_timestamp()) {
      set_custom_game_timestamp(from.custom_game_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSODOTALobbyInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTALobbyInvite::CopyFrom(const CSODOTALobbyInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobbyInvite::IsInitialized() const {

  return true;
}

void CSODOTALobbyInvite::Swap(CSODOTALobbyInvite* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(sender_id_, other->sender_id_);
    std::swap(sender_name_, other->sender_name_);
    members_.Swap(&other->members_);
    std::swap(custom_game_id_, other->custom_game_id_);
    std::swap(invite_gid_, other->invite_gid_);
    std::swap(custom_game_crc_, other->custom_game_crc_);
    std::swap(custom_game_timestamp_, other->custom_game_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSODOTALobbyInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTALobbyInvite_descriptor_;
  metadata.reflection = CSODOTALobbyInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgLeaverState::kLobbyStateFieldNumber;
const int CMsgLeaverState::kGameStateFieldNumber;
const int CMsgLeaverState::kLeaverDetectedFieldNumber;
const int CMsgLeaverState::kFirstBloodHappenedFieldNumber;
const int CMsgLeaverState::kDiscardMatchResultsFieldNumber;
const int CMsgLeaverState::kMassDisconnectFieldNumber;
#endif  // !_MSC_VER

CMsgLeaverState::CMsgLeaverState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgLeaverState)
}

void CMsgLeaverState::InitAsDefaultInstance() {
}

CMsgLeaverState::CMsgLeaverState(const CMsgLeaverState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgLeaverState)
}

void CMsgLeaverState::SharedCtor() {
  _cached_size_ = 0;
  lobby_state_ = 0u;
  game_state_ = 0;
  leaver_detected_ = false;
  first_blood_happened_ = false;
  discard_match_results_ = false;
  mass_disconnect_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLeaverState::~CMsgLeaverState() {
  // @@protoc_insertion_point(destructor:CMsgLeaverState)
  SharedDtor();
}

void CMsgLeaverState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLeaverState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLeaverState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLeaverState_descriptor_;
}

const CMsgLeaverState& CMsgLeaverState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgLeaverState* CMsgLeaverState::default_instance_ = NULL;

CMsgLeaverState* CMsgLeaverState::New() const {
  return new CMsgLeaverState;
}

void CMsgLeaverState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgLeaverState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(lobby_state_, mass_disconnect_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLeaverState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgLeaverState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lobby_state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_state_)));
          set_has_lobby_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_game_state;
        break;
      }

      // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
      case 2: {
        if (tag == 16) {
         parse_game_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_GameState_IsValid(value)) {
            set_game_state(static_cast< ::DOTA_GameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_leaver_detected;
        break;
      }

      // optional bool leaver_detected = 3;
      case 3: {
        if (tag == 24) {
         parse_leaver_detected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leaver_detected_)));
          set_has_leaver_detected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_first_blood_happened;
        break;
      }

      // optional bool first_blood_happened = 4;
      case 4: {
        if (tag == 32) {
         parse_first_blood_happened:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_blood_happened_)));
          set_has_first_blood_happened();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_discard_match_results;
        break;
      }

      // optional bool discard_match_results = 5;
      case 5: {
        if (tag == 40) {
         parse_discard_match_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &discard_match_results_)));
          set_has_discard_match_results();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mass_disconnect;
        break;
      }

      // optional bool mass_disconnect = 6;
      case 6: {
        if (tag == 48) {
         parse_mass_disconnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mass_disconnect_)));
          set_has_mass_disconnect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgLeaverState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgLeaverState)
  return false;
#undef DO_
}

void CMsgLeaverState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgLeaverState)
  // optional uint32 lobby_state = 1;
  if (has_lobby_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lobby_state(), output);
  }

  // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  if (has_game_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->game_state(), output);
  }

  // optional bool leaver_detected = 3;
  if (has_leaver_detected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->leaver_detected(), output);
  }

  // optional bool first_blood_happened = 4;
  if (has_first_blood_happened()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->first_blood_happened(), output);
  }

  // optional bool discard_match_results = 5;
  if (has_discard_match_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->discard_match_results(), output);
  }

  // optional bool mass_disconnect = 6;
  if (has_mass_disconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mass_disconnect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgLeaverState)
}

::google::protobuf::uint8* CMsgLeaverState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLeaverState)
  // optional uint32 lobby_state = 1;
  if (has_lobby_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lobby_state(), target);
  }

  // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  if (has_game_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->game_state(), target);
  }

  // optional bool leaver_detected = 3;
  if (has_leaver_detected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->leaver_detected(), target);
  }

  // optional bool first_blood_happened = 4;
  if (has_first_blood_happened()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->first_blood_happened(), target);
  }

  // optional bool discard_match_results = 5;
  if (has_discard_match_results()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->discard_match_results(), target);
  }

  // optional bool mass_disconnect = 6;
  if (has_mass_disconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mass_disconnect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLeaverState)
  return target;
}

int CMsgLeaverState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 lobby_state = 1;
    if (has_lobby_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_state());
    }

    // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
    if (has_game_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_state());
    }

    // optional bool leaver_detected = 3;
    if (has_leaver_detected()) {
      total_size += 1 + 1;
    }

    // optional bool first_blood_happened = 4;
    if (has_first_blood_happened()) {
      total_size += 1 + 1;
    }

    // optional bool discard_match_results = 5;
    if (has_discard_match_results()) {
      total_size += 1 + 1;
    }

    // optional bool mass_disconnect = 6;
    if (has_mass_disconnect()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLeaverState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLeaverState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLeaverState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLeaverState::MergeFrom(const CMsgLeaverState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lobby_state()) {
      set_lobby_state(from.lobby_state());
    }
    if (from.has_game_state()) {
      set_game_state(from.game_state());
    }
    if (from.has_leaver_detected()) {
      set_leaver_detected(from.leaver_detected());
    }
    if (from.has_first_blood_happened()) {
      set_first_blood_happened(from.first_blood_happened());
    }
    if (from.has_discard_match_results()) {
      set_discard_match_results(from.discard_match_results());
    }
    if (from.has_mass_disconnect()) {
      set_mass_disconnect(from.mass_disconnect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLeaverState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeaverState::CopyFrom(const CMsgLeaverState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaverState::IsInitialized() const {

  return true;
}

void CMsgLeaverState::Swap(CMsgLeaverState* other) {
  if (other != this) {
    std::swap(lobby_state_, other->lobby_state_);
    std::swap(game_state_, other->game_state_);
    std::swap(leaver_detected_, other->leaver_detected_);
    std::swap(first_blood_happened_, other->first_blood_happened_);
    std::swap(discard_match_results_, other->discard_match_results_);
    std::swap(mass_disconnect_, other->mass_disconnect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLeaverState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLeaverState_descriptor_;
  metadata.reflection = CMsgLeaverState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTALobbyMember_CDOTALobbyMemberXPBonus::kTypeFieldNumber;
const int CDOTALobbyMember_CDOTALobbyMemberXPBonus::kXpBonusFieldNumber;
const int CDOTALobbyMember_CDOTALobbyMemberXPBonus::kSourceKeyFieldNumber;
#endif  // !_MSC_VER

CDOTALobbyMember_CDOTALobbyMemberXPBonus::CDOTALobbyMember_CDOTALobbyMemberXPBonus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTALobbyMember.CDOTALobbyMemberXPBonus)
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::InitAsDefaultInstance() {
}

CDOTALobbyMember_CDOTALobbyMemberXPBonus::CDOTALobbyMember_CDOTALobbyMemberXPBonus(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTALobbyMember.CDOTALobbyMemberXPBonus)
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  xp_bonus_ = 0;
  source_key_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTALobbyMember_CDOTALobbyMemberXPBonus::~CDOTALobbyMember_CDOTALobbyMemberXPBonus() {
  // @@protoc_insertion_point(destructor:CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  SharedDtor();
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTALobbyMember_CDOTALobbyMemberXPBonus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTALobbyMember_CDOTALobbyMemberXPBonus_descriptor_;
}

const CDOTALobbyMember_CDOTALobbyMemberXPBonus& CDOTALobbyMember_CDOTALobbyMemberXPBonus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CDOTALobbyMember_CDOTALobbyMemberXPBonus* CDOTALobbyMember_CDOTALobbyMemberXPBonus::default_instance_ = NULL;

CDOTALobbyMember_CDOTALobbyMemberXPBonus* CDOTALobbyMember_CDOTALobbyMemberXPBonus::New() const {
  return new CDOTALobbyMember_CDOTALobbyMemberXPBonus;
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTALobbyMember_CDOTALobbyMemberXPBonus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, source_key_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTALobbyMember_CDOTALobbyMemberXPBonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_xp_bonus;
        break;
      }

      // optional float xp_bonus = 2;
      case 2: {
        if (tag == 21) {
         parse_xp_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xp_bonus_)));
          set_has_xp_bonus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_source_key;
        break;
      }

      // optional uint64 source_key = 3;
      case 3: {
        if (tag == 24) {
         parse_source_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &source_key_)));
          set_has_source_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  return false;
#undef DO_
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional float xp_bonus = 2;
  if (has_xp_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->xp_bonus(), output);
  }

  // optional uint64 source_key = 3;
  if (has_source_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->source_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTALobbyMember.CDOTALobbyMemberXPBonus)
}

::google::protobuf::uint8* CDOTALobbyMember_CDOTALobbyMemberXPBonus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional float xp_bonus = 2;
  if (has_xp_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->xp_bonus(), target);
  }

  // optional uint64 source_key = 3;
  if (has_source_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->source_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  return target;
}

int CDOTALobbyMember_CDOTALobbyMemberXPBonus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional float xp_bonus = 2;
    if (has_xp_bonus()) {
      total_size += 1 + 4;
    }

    // optional uint64 source_key = 3;
    if (has_source_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->source_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTALobbyMember_CDOTALobbyMemberXPBonus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTALobbyMember_CDOTALobbyMemberXPBonus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::MergeFrom(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_xp_bonus()) {
      set_xp_bonus(from.xp_bonus());
    }
    if (from.has_source_key()) {
      set_source_key(from.source_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::CopyFrom(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTALobbyMember_CDOTALobbyMemberXPBonus::IsInitialized() const {

  return true;
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::Swap(CDOTALobbyMember_CDOTALobbyMemberXPBonus* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(xp_bonus_, other->xp_bonus_);
    std::swap(source_key_, other->source_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTALobbyMember_CDOTALobbyMemberXPBonus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTALobbyMember_CDOTALobbyMemberXPBonus_descriptor_;
  metadata.reflection = CDOTALobbyMember_CDOTALobbyMemberXPBonus_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTALobbyMember::kIdFieldNumber;
const int CDOTALobbyMember::kHeroIdFieldNumber;
const int CDOTALobbyMember::kTeamFieldNumber;
const int CDOTALobbyMember::kNameFieldNumber;
const int CDOTALobbyMember::kSlotFieldNumber;
const int CDOTALobbyMember::kPartyIdFieldNumber;
const int CDOTALobbyMember::kMetaLevelFieldNumber;
const int CDOTALobbyMember::kMetaXpFieldNumber;
const int CDOTALobbyMember::kMetaXpAwardedFieldNumber;
const int CDOTALobbyMember::kLeaverStatusFieldNumber;
const int CDOTALobbyMember::kLeaverActionsFieldNumber;
const int CDOTALobbyMember::kChannelFieldNumber;
const int CDOTALobbyMember::kPrizeDefIndexFieldNumber;
const int CDOTALobbyMember::kDisabledHeroIdFieldNumber;
const int CDOTALobbyMember::kPartnerAccountTypeFieldNumber;
const int CDOTALobbyMember::kEnabledHeroIdFieldNumber;
const int CDOTALobbyMember::kCoachTeamFieldNumber;
const int CDOTALobbyMember::kNexonPcBangNoFieldNumber;
const int CDOTALobbyMember::kNexonPcBangNameFieldNumber;
const int CDOTALobbyMember::kXpBonusesFieldNumber;
const int CDOTALobbyMember::kRankChangeFieldNumber;
const int CDOTALobbyMember::kCameramanFieldNumber;
const int CDOTALobbyMember::kCustomGameProductIdsFieldNumber;
const int CDOTALobbyMember::kLobbyMvpVoteAccountIdFieldNumber;
const int CDOTALobbyMember::kSearchMatchTypeFieldNumber;
const int CDOTALobbyMember::kFavoriteTeamAndQualityFieldNumber;
#endif  // !_MSC_VER

CDOTALobbyMember::CDOTALobbyMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTALobbyMember)
}

void CDOTALobbyMember::InitAsDefaultInstance() {
}

CDOTALobbyMember::CDOTALobbyMember(const CDOTALobbyMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTALobbyMember)
}

void CDOTALobbyMember::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  hero_id_ = 0u;
  team_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slot_ = 0u;
  party_id_ = GOOGLE_ULONGLONG(0);
  meta_level_ = 0u;
  meta_xp_ = 0u;
  meta_xp_awarded_ = 0u;
  leaver_status_ = 0;
  leaver_actions_ = 0u;
  channel_ = 0u;
  prize_def_index_ = 0u;
  partner_account_type_ = 0;
  coach_team_ = 5;
  nexon_pc_bang_no_ = 0u;
  nexon_pc_bang_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rank_change_ = 0;
  cameraman_ = false;
  lobby_mvp_vote_account_id_ = 0u;
  search_match_type_ = 0;
  favorite_team_and_quality_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTALobbyMember::~CDOTALobbyMember() {
  // @@protoc_insertion_point(destructor:CDOTALobbyMember)
  SharedDtor();
}

void CDOTALobbyMember::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (nexon_pc_bang_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nexon_pc_bang_name_;
  }
  if (this != default_instance_) {
  }
}

void CDOTALobbyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTALobbyMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTALobbyMember_descriptor_;
}

const CDOTALobbyMember& CDOTALobbyMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CDOTALobbyMember* CDOTALobbyMember::default_instance_ = NULL;

CDOTALobbyMember* CDOTALobbyMember::New() const {
  return new CDOTALobbyMember;
}

void CDOTALobbyMember::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTALobbyMember*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, team_);
    ZR_(party_id_, meta_xp_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 24320) {
    ZR_(meta_xp_awarded_, prize_def_index_);
    partner_account_type_ = 0;
  }
  if (_has_bits_[16 / 32] & 11993088) {
    ZR_(nexon_pc_bang_no_, rank_change_);
    ZR_(cameraman_, lobby_mvp_vote_account_id_);
    coach_team_ = 5;
    if (has_nexon_pc_bang_name()) {
      if (nexon_pc_bang_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nexon_pc_bang_name_->clear();
      }
    }
  }
  ZR_(search_match_type_, favorite_team_and_quality_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  disabled_hero_id_.Clear();
  enabled_hero_id_.Clear();
  xp_bonuses_.Clear();
  custom_game_product_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTALobbyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTALobbyMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint32 hero_id = 2;
      case 2: {
        if (tag == 16) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_team;
        break;
      }

      // optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 3: {
        if (tag == 24) {
         parse_team:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_GC_TEAM_IsValid(value)) {
            set_team(static_cast< ::DOTA_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (tag == 50) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_slot;
        break;
      }

      // optional uint32 slot = 7;
      case 7: {
        if (tag == 56) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_party_id;
        break;
      }

      // optional uint64 party_id = 12;
      case 12: {
        if (tag == 96) {
         parse_party_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
          set_has_party_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_meta_level;
        break;
      }

      // optional uint32 meta_level = 13;
      case 13: {
        if (tag == 104) {
         parse_meta_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meta_level_)));
          set_has_meta_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_meta_xp;
        break;
      }

      // optional uint32 meta_xp = 14;
      case 14: {
        if (tag == 112) {
         parse_meta_xp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meta_xp_)));
          set_has_meta_xp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_meta_xp_awarded;
        break;
      }

      // optional uint32 meta_xp_awarded = 15;
      case 15: {
        if (tag == 120) {
         parse_meta_xp_awarded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meta_xp_awarded_)));
          set_has_meta_xp_awarded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_leaver_status;
        break;
      }

      // optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
      case 16: {
        if (tag == 128) {
         parse_leaver_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTALeaverStatus_t_IsValid(value)) {
            set_leaver_status(static_cast< ::DOTALeaverStatus_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_channel;
        break;
      }

      // optional uint32 channel = 17;
      case 17: {
        if (tag == 136) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_prize_def_index;
        break;
      }

      // optional uint32 prize_def_index = 18;
      case 18: {
        if (tag == 144) {
         parse_prize_def_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prize_def_index_)));
          set_has_prize_def_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_disabled_hero_id;
        break;
      }

      // repeated uint32 disabled_hero_id = 20;
      case 20: {
        if (tag == 160) {
         parse_disabled_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 160, input, this->mutable_disabled_hero_id())));
        } else if (tag == 162) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_disabled_hero_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_disabled_hero_id;
        if (input->ExpectTag(168)) goto parse_partner_account_type;
        break;
      }

      // optional .PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
      case 21: {
        if (tag == 168) {
         parse_partner_account_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PartnerAccountType_IsValid(value)) {
            set_partner_account_type(static_cast< ::PartnerAccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_enabled_hero_id;
        break;
      }

      // repeated uint32 enabled_hero_id = 22;
      case 22: {
        if (tag == 176) {
         parse_enabled_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 176, input, this->mutable_enabled_hero_id())));
        } else if (tag == 178) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_enabled_hero_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_enabled_hero_id;
        if (input->ExpectTag(184)) goto parse_coach_team;
        break;
      }

      // optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
      case 23: {
        if (tag == 184) {
         parse_coach_team:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_GC_TEAM_IsValid(value)) {
            set_coach_team(static_cast< ::DOTA_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(23, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_nexon_pc_bang_no;
        break;
      }

      // optional uint32 nexon_pc_bang_no = 24;
      case 24: {
        if (tag == 192) {
         parse_nexon_pc_bang_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nexon_pc_bang_no_)));
          set_has_nexon_pc_bang_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_nexon_pc_bang_name;
        break;
      }

      // optional string nexon_pc_bang_name = 25;
      case 25: {
        if (tag == 202) {
         parse_nexon_pc_bang_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nexon_pc_bang_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nexon_pc_bang_name().data(), this->nexon_pc_bang_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nexon_pc_bang_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_xp_bonuses;
        break;
      }

      // repeated .CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
      case 27: {
        if (tag == 218) {
         parse_xp_bonuses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xp_bonuses()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_xp_bonuses;
        if (input->ExpectTag(224)) goto parse_leaver_actions;
        break;
      }

      // optional uint32 leaver_actions = 28;
      case 28: {
        if (tag == 224) {
         parse_leaver_actions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaver_actions_)));
          set_has_leaver_actions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_rank_change;
        break;
      }

      // optional sint32 rank_change = 29;
      case 29: {
        if (tag == 232) {
         parse_rank_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rank_change_)));
          set_has_rank_change();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_cameraman;
        break;
      }

      // optional bool cameraman = 30;
      case 30: {
        if (tag == 240) {
         parse_cameraman:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cameraman_)));
          set_has_cameraman();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_custom_game_product_ids;
        break;
      }

      // repeated uint32 custom_game_product_ids = 31;
      case 31: {
        if (tag == 248) {
         parse_custom_game_product_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 248, input, this->mutable_custom_game_product_ids())));
        } else if (tag == 250) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_custom_game_product_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_custom_game_product_ids;
        if (input->ExpectTag(256)) goto parse_lobby_mvp_vote_account_id;
        break;
      }

      // optional uint32 lobby_mvp_vote_account_id = 32;
      case 32: {
        if (tag == 256) {
         parse_lobby_mvp_vote_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_mvp_vote_account_id_)));
          set_has_lobby_mvp_vote_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_search_match_type;
        break;
      }

      // optional .MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
      case 33: {
        if (tag == 264) {
         parse_search_match_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MatchType_IsValid(value)) {
            set_search_match_type(static_cast< ::MatchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(33, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_favorite_team_and_quality;
        break;
      }

      // optional uint32 favorite_team_and_quality = 34;
      case 34: {
        if (tag == 272) {
         parse_favorite_team_and_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favorite_team_and_quality_)));
          set_has_favorite_team_and_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTALobbyMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTALobbyMember)
  return false;
#undef DO_
}

void CDOTALobbyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTALobbyMember)
  // optional fixed64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->id(), output);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->team(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // optional uint32 slot = 7;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->slot(), output);
  }

  // optional uint64 party_id = 12;
  if (has_party_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->party_id(), output);
  }

  // optional uint32 meta_level = 13;
  if (has_meta_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->meta_level(), output);
  }

  // optional uint32 meta_xp = 14;
  if (has_meta_xp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->meta_xp(), output);
  }

  // optional uint32 meta_xp_awarded = 15;
  if (has_meta_xp_awarded()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->meta_xp_awarded(), output);
  }

  // optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
  if (has_leaver_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->leaver_status(), output);
  }

  // optional uint32 channel = 17;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->channel(), output);
  }

  // optional uint32 prize_def_index = 18;
  if (has_prize_def_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->prize_def_index(), output);
  }

  // repeated uint32 disabled_hero_id = 20;
  for (int i = 0; i < this->disabled_hero_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      20, this->disabled_hero_id(i), output);
  }

  // optional .PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
  if (has_partner_account_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->partner_account_type(), output);
  }

  // repeated uint32 enabled_hero_id = 22;
  for (int i = 0; i < this->enabled_hero_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      22, this->enabled_hero_id(i), output);
  }

  // optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
  if (has_coach_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->coach_team(), output);
  }

  // optional uint32 nexon_pc_bang_no = 24;
  if (has_nexon_pc_bang_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->nexon_pc_bang_no(), output);
  }

  // optional string nexon_pc_bang_name = 25;
  if (has_nexon_pc_bang_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nexon_pc_bang_name().data(), this->nexon_pc_bang_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nexon_pc_bang_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->nexon_pc_bang_name(), output);
  }

  // repeated .CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
  for (int i = 0; i < this->xp_bonuses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->xp_bonuses(i), output);
  }

  // optional uint32 leaver_actions = 28;
  if (has_leaver_actions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->leaver_actions(), output);
  }

  // optional sint32 rank_change = 29;
  if (has_rank_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(29, this->rank_change(), output);
  }

  // optional bool cameraman = 30;
  if (has_cameraman()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->cameraman(), output);
  }

  // repeated uint32 custom_game_product_ids = 31;
  for (int i = 0; i < this->custom_game_product_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      31, this->custom_game_product_ids(i), output);
  }

  // optional uint32 lobby_mvp_vote_account_id = 32;
  if (has_lobby_mvp_vote_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->lobby_mvp_vote_account_id(), output);
  }

  // optional .MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
  if (has_search_match_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      33, this->search_match_type(), output);
  }

  // optional uint32 favorite_team_and_quality = 34;
  if (has_favorite_team_and_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->favorite_team_and_quality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTALobbyMember)
}

::google::protobuf::uint8* CDOTALobbyMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTALobbyMember)
  // optional fixed64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->id(), target);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->team(), target);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional uint32 slot = 7;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->slot(), target);
  }

  // optional uint64 party_id = 12;
  if (has_party_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->party_id(), target);
  }

  // optional uint32 meta_level = 13;
  if (has_meta_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->meta_level(), target);
  }

  // optional uint32 meta_xp = 14;
  if (has_meta_xp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->meta_xp(), target);
  }

  // optional uint32 meta_xp_awarded = 15;
  if (has_meta_xp_awarded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->meta_xp_awarded(), target);
  }

  // optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
  if (has_leaver_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->leaver_status(), target);
  }

  // optional uint32 channel = 17;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->channel(), target);
  }

  // optional uint32 prize_def_index = 18;
  if (has_prize_def_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->prize_def_index(), target);
  }

  // repeated uint32 disabled_hero_id = 20;
  for (int i = 0; i < this->disabled_hero_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(20, this->disabled_hero_id(i), target);
  }

  // optional .PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
  if (has_partner_account_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->partner_account_type(), target);
  }

  // repeated uint32 enabled_hero_id = 22;
  for (int i = 0; i < this->enabled_hero_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(22, this->enabled_hero_id(i), target);
  }

  // optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
  if (has_coach_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->coach_team(), target);
  }

  // optional uint32 nexon_pc_bang_no = 24;
  if (has_nexon_pc_bang_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->nexon_pc_bang_no(), target);
  }

  // optional string nexon_pc_bang_name = 25;
  if (has_nexon_pc_bang_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nexon_pc_bang_name().data(), this->nexon_pc_bang_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nexon_pc_bang_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->nexon_pc_bang_name(), target);
  }

  // repeated .CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
  for (int i = 0; i < this->xp_bonuses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->xp_bonuses(i), target);
  }

  // optional uint32 leaver_actions = 28;
  if (has_leaver_actions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->leaver_actions(), target);
  }

  // optional sint32 rank_change = 29;
  if (has_rank_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(29, this->rank_change(), target);
  }

  // optional bool cameraman = 30;
  if (has_cameraman()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->cameraman(), target);
  }

  // repeated uint32 custom_game_product_ids = 31;
  for (int i = 0; i < this->custom_game_product_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(31, this->custom_game_product_ids(i), target);
  }

  // optional uint32 lobby_mvp_vote_account_id = 32;
  if (has_lobby_mvp_vote_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->lobby_mvp_vote_account_id(), target);
  }

  // optional .MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
  if (has_search_match_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      33, this->search_match_type(), target);
  }

  // optional uint32 favorite_team_and_quality = 34;
  if (has_favorite_team_and_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->favorite_team_and_quality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTALobbyMember)
  return target;
}

int CDOTALobbyMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 id = 1;
    if (has_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 slot = 7;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

    // optional uint64 party_id = 12;
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }

    // optional uint32 meta_level = 13;
    if (has_meta_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->meta_level());
    }

    // optional uint32 meta_xp = 14;
    if (has_meta_xp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->meta_xp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 meta_xp_awarded = 15;
    if (has_meta_xp_awarded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->meta_xp_awarded());
    }

    // optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
    if (has_leaver_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->leaver_status());
    }

    // optional uint32 leaver_actions = 28;
    if (has_leaver_actions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaver_actions());
    }

    // optional uint32 channel = 17;
    if (has_channel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional uint32 prize_def_index = 18;
    if (has_prize_def_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prize_def_index());
    }

    // optional .PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
    if (has_partner_account_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->partner_account_type());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
    if (has_coach_team()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->coach_team());
    }

    // optional uint32 nexon_pc_bang_no = 24;
    if (has_nexon_pc_bang_no()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nexon_pc_bang_no());
    }

    // optional string nexon_pc_bang_name = 25;
    if (has_nexon_pc_bang_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nexon_pc_bang_name());
    }

    // optional sint32 rank_change = 29;
    if (has_rank_change()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rank_change());
    }

    // optional bool cameraman = 30;
    if (has_cameraman()) {
      total_size += 2 + 1;
    }

    // optional uint32 lobby_mvp_vote_account_id = 32;
    if (has_lobby_mvp_vote_account_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_mvp_vote_account_id());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
    if (has_search_match_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->search_match_type());
    }

    // optional uint32 favorite_team_and_quality = 34;
    if (has_favorite_team_and_quality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->favorite_team_and_quality());
    }

  }
  // repeated uint32 disabled_hero_id = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->disabled_hero_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->disabled_hero_id(i));
    }
    total_size += 2 * this->disabled_hero_id_size() + data_size;
  }

  // repeated uint32 enabled_hero_id = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->enabled_hero_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->enabled_hero_id(i));
    }
    total_size += 2 * this->enabled_hero_id_size() + data_size;
  }

  // repeated .CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
  total_size += 2 * this->xp_bonuses_size();
  for (int i = 0; i < this->xp_bonuses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xp_bonuses(i));
  }

  // repeated uint32 custom_game_product_ids = 31;
  {
    int data_size = 0;
    for (int i = 0; i < this->custom_game_product_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->custom_game_product_ids(i));
    }
    total_size += 2 * this->custom_game_product_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTALobbyMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTALobbyMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTALobbyMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTALobbyMember::MergeFrom(const CDOTALobbyMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  disabled_hero_id_.MergeFrom(from.disabled_hero_id_);
  enabled_hero_id_.MergeFrom(from.enabled_hero_id_);
  xp_bonuses_.MergeFrom(from.xp_bonuses_);
  custom_game_product_ids_.MergeFrom(from.custom_game_product_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_party_id()) {
      set_party_id(from.party_id());
    }
    if (from.has_meta_level()) {
      set_meta_level(from.meta_level());
    }
    if (from.has_meta_xp()) {
      set_meta_xp(from.meta_xp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_meta_xp_awarded()) {
      set_meta_xp_awarded(from.meta_xp_awarded());
    }
    if (from.has_leaver_status()) {
      set_leaver_status(from.leaver_status());
    }
    if (from.has_leaver_actions()) {
      set_leaver_actions(from.leaver_actions());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_prize_def_index()) {
      set_prize_def_index(from.prize_def_index());
    }
    if (from.has_partner_account_type()) {
      set_partner_account_type(from.partner_account_type());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_coach_team()) {
      set_coach_team(from.coach_team());
    }
    if (from.has_nexon_pc_bang_no()) {
      set_nexon_pc_bang_no(from.nexon_pc_bang_no());
    }
    if (from.has_nexon_pc_bang_name()) {
      set_nexon_pc_bang_name(from.nexon_pc_bang_name());
    }
    if (from.has_rank_change()) {
      set_rank_change(from.rank_change());
    }
    if (from.has_cameraman()) {
      set_cameraman(from.cameraman());
    }
    if (from.has_lobby_mvp_vote_account_id()) {
      set_lobby_mvp_vote_account_id(from.lobby_mvp_vote_account_id());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_search_match_type()) {
      set_search_match_type(from.search_match_type());
    }
    if (from.has_favorite_team_and_quality()) {
      set_favorite_team_and_quality(from.favorite_team_and_quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTALobbyMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTALobbyMember::CopyFrom(const CDOTALobbyMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTALobbyMember::IsInitialized() const {

  return true;
}

void CDOTALobbyMember::Swap(CDOTALobbyMember* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(team_, other->team_);
    std::swap(name_, other->name_);
    std::swap(slot_, other->slot_);
    std::swap(party_id_, other->party_id_);
    std::swap(meta_level_, other->meta_level_);
    std::swap(meta_xp_, other->meta_xp_);
    std::swap(meta_xp_awarded_, other->meta_xp_awarded_);
    std::swap(leaver_status_, other->leaver_status_);
    std::swap(leaver_actions_, other->leaver_actions_);
    std::swap(channel_, other->channel_);
    std::swap(prize_def_index_, other->prize_def_index_);
    disabled_hero_id_.Swap(&other->disabled_hero_id_);
    std::swap(partner_account_type_, other->partner_account_type_);
    enabled_hero_id_.Swap(&other->enabled_hero_id_);
    std::swap(coach_team_, other->coach_team_);
    std::swap(nexon_pc_bang_no_, other->nexon_pc_bang_no_);
    std::swap(nexon_pc_bang_name_, other->nexon_pc_bang_name_);
    xp_bonuses_.Swap(&other->xp_bonuses_);
    std::swap(rank_change_, other->rank_change_);
    std::swap(cameraman_, other->cameraman_);
    custom_game_product_ids_.Swap(&other->custom_game_product_ids_);
    std::swap(lobby_mvp_vote_account_id_, other->lobby_mvp_vote_account_id_);
    std::swap(search_match_type_, other->search_match_type_);
    std::swap(favorite_team_and_quality_, other->favorite_team_and_quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTALobbyMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTALobbyMember_descriptor_;
  metadata.reflection = CDOTALobbyMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLobbyTeamDetails::kTeamNameFieldNumber;
const int CLobbyTeamDetails::kTeamTagFieldNumber;
const int CLobbyTeamDetails::kTeamIdFieldNumber;
const int CLobbyTeamDetails::kTeamLogoFieldNumber;
const int CLobbyTeamDetails::kTeamBaseLogoFieldNumber;
const int CLobbyTeamDetails::kTeamBannerLogoFieldNumber;
const int CLobbyTeamDetails::kTeamCompleteFieldNumber;
const int CLobbyTeamDetails::kGuildNameFieldNumber;
const int CLobbyTeamDetails::kGuildTagFieldNumber;
const int CLobbyTeamDetails::kGuildIdFieldNumber;
const int CLobbyTeamDetails::kGuildLogoFieldNumber;
const int CLobbyTeamDetails::kGuildBaseLogoFieldNumber;
const int CLobbyTeamDetails::kGuildBannerLogoFieldNumber;
const int CLobbyTeamDetails::kRankFieldNumber;
const int CLobbyTeamDetails::kRankChangeFieldNumber;
const int CLobbyTeamDetails::kIsHomeTeamFieldNumber;
#endif  // !_MSC_VER

CLobbyTeamDetails::CLobbyTeamDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CLobbyTeamDetails)
}

void CLobbyTeamDetails::InitAsDefaultInstance() {
}

CLobbyTeamDetails::CLobbyTeamDetails(const CLobbyTeamDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CLobbyTeamDetails)
}

void CLobbyTeamDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_id_ = 0u;
  team_logo_ = GOOGLE_ULONGLONG(0);
  team_base_logo_ = GOOGLE_ULONGLONG(0);
  team_banner_logo_ = GOOGLE_ULONGLONG(0);
  team_complete_ = false;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_id_ = 0u;
  guild_logo_ = GOOGLE_ULONGLONG(0);
  guild_base_logo_ = GOOGLE_ULONGLONG(0);
  guild_banner_logo_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  rank_change_ = 0;
  is_home_team_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLobbyTeamDetails::~CLobbyTeamDetails() {
  // @@protoc_insertion_point(destructor:CLobbyTeamDetails)
  SharedDtor();
}

void CLobbyTeamDetails::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_;
  }
  if (team_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_tag_;
  }
  if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_name_;
  }
  if (guild_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_tag_;
  }
  if (this != default_instance_) {
  }
}

void CLobbyTeamDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLobbyTeamDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLobbyTeamDetails_descriptor_;
}

const CLobbyTeamDetails& CLobbyTeamDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CLobbyTeamDetails* CLobbyTeamDetails::default_instance_ = NULL;

CLobbyTeamDetails* CLobbyTeamDetails::New() const {
  return new CLobbyTeamDetails;
}

void CLobbyTeamDetails::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CLobbyTeamDetails*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(team_logo_, team_id_);
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        team_name_->clear();
      }
    }
    if (has_team_tag()) {
      if (team_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        team_tag_->clear();
      }
    }
    team_complete_ = false;
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guild_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(guild_logo_, guild_base_logo_);
    ZR_(is_home_team_, rank_change_);
    if (has_guild_tag()) {
      if (guild_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guild_tag_->clear();
      }
    }
    guild_id_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLobbyTeamDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CLobbyTeamDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string team_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_team_tag;
        break;
      }

      // optional string team_tag = 3;
      case 3: {
        if (tag == 26) {
         parse_team_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_tag().data(), this->team_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "team_tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 4;
      case 4: {
        if (tag == 32) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_team_logo;
        break;
      }

      // optional uint64 team_logo = 5;
      case 5: {
        if (tag == 40) {
         parse_team_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_logo_)));
          set_has_team_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_team_base_logo;
        break;
      }

      // optional uint64 team_base_logo = 6;
      case 6: {
        if (tag == 48) {
         parse_team_base_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_base_logo_)));
          set_has_team_base_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_team_banner_logo;
        break;
      }

      // optional uint64 team_banner_logo = 7;
      case 7: {
        if (tag == 56) {
         parse_team_banner_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_banner_logo_)));
          set_has_team_banner_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_team_complete;
        break;
      }

      // optional bool team_complete = 8;
      case 8: {
        if (tag == 64) {
         parse_team_complete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &team_complete_)));
          set_has_team_complete();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_guild_name;
        break;
      }

      // optional string guild_name = 9;
      case 9: {
        if (tag == 74) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guild_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_guild_tag;
        break;
      }

      // optional string guild_tag = 10;
      case 10: {
        if (tag == 82) {
         parse_guild_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_tag().data(), this->guild_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guild_tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_guild_id;
        break;
      }

      // optional uint32 guild_id = 11;
      case 11: {
        if (tag == 88) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_guild_logo;
        break;
      }

      // optional uint64 guild_logo = 12;
      case 12: {
        if (tag == 96) {
         parse_guild_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_logo_)));
          set_has_guild_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_guild_base_logo;
        break;
      }

      // optional uint64 guild_base_logo = 13;
      case 13: {
        if (tag == 104) {
         parse_guild_base_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_base_logo_)));
          set_has_guild_base_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_guild_banner_logo;
        break;
      }

      // optional uint64 guild_banner_logo = 14;
      case 14: {
        if (tag == 112) {
         parse_guild_banner_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_banner_logo_)));
          set_has_guild_banner_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 15;
      case 15: {
        if (tag == 120) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_rank_change;
        break;
      }

      // optional sint32 rank_change = 16;
      case 16: {
        if (tag == 128) {
         parse_rank_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rank_change_)));
          set_has_rank_change();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_is_home_team;
        break;
      }

      // optional bool is_home_team = 17;
      case 17: {
        if (tag == 136) {
         parse_is_home_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_home_team_)));
          set_has_is_home_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CLobbyTeamDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CLobbyTeamDetails)
  return false;
#undef DO_
}

void CLobbyTeamDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CLobbyTeamDetails)
  // optional string team_name = 1;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->team_name(), output);
  }

  // optional string team_tag = 3;
  if (has_team_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), this->team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_tag(), output);
  }

  // optional uint32 team_id = 4;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team_id(), output);
  }

  // optional uint64 team_logo = 5;
  if (has_team_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->team_logo(), output);
  }

  // optional uint64 team_base_logo = 6;
  if (has_team_base_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->team_base_logo(), output);
  }

  // optional uint64 team_banner_logo = 7;
  if (has_team_banner_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->team_banner_logo(), output);
  }

  // optional bool team_complete = 8;
  if (has_team_complete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->team_complete(), output);
  }

  // optional string guild_name = 9;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->guild_name(), output);
  }

  // optional string guild_tag = 10;
  if (has_guild_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_tag().data(), this->guild_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->guild_tag(), output);
  }

  // optional uint32 guild_id = 11;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->guild_id(), output);
  }

  // optional uint64 guild_logo = 12;
  if (has_guild_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->guild_logo(), output);
  }

  // optional uint64 guild_base_logo = 13;
  if (has_guild_base_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->guild_base_logo(), output);
  }

  // optional uint64 guild_banner_logo = 14;
  if (has_guild_banner_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->guild_banner_logo(), output);
  }

  // optional uint32 rank = 15;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->rank(), output);
  }

  // optional sint32 rank_change = 16;
  if (has_rank_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(16, this->rank_change(), output);
  }

  // optional bool is_home_team = 17;
  if (has_is_home_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->is_home_team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CLobbyTeamDetails)
}

::google::protobuf::uint8* CLobbyTeamDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLobbyTeamDetails)
  // optional string team_name = 1;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->team_name(), target);
  }

  // optional string team_tag = 3;
  if (has_team_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), this->team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_tag(), target);
  }

  // optional uint32 team_id = 4;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team_id(), target);
  }

  // optional uint64 team_logo = 5;
  if (has_team_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->team_logo(), target);
  }

  // optional uint64 team_base_logo = 6;
  if (has_team_base_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->team_base_logo(), target);
  }

  // optional uint64 team_banner_logo = 7;
  if (has_team_banner_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->team_banner_logo(), target);
  }

  // optional bool team_complete = 8;
  if (has_team_complete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->team_complete(), target);
  }

  // optional string guild_name = 9;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->guild_name(), target);
  }

  // optional string guild_tag = 10;
  if (has_guild_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_tag().data(), this->guild_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->guild_tag(), target);
  }

  // optional uint32 guild_id = 11;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->guild_id(), target);
  }

  // optional uint64 guild_logo = 12;
  if (has_guild_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->guild_logo(), target);
  }

  // optional uint64 guild_base_logo = 13;
  if (has_guild_base_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->guild_base_logo(), target);
  }

  // optional uint64 guild_banner_logo = 14;
  if (has_guild_banner_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->guild_banner_logo(), target);
  }

  // optional uint32 rank = 15;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->rank(), target);
  }

  // optional sint32 rank_change = 16;
  if (has_rank_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(16, this->rank_change(), target);
  }

  // optional bool is_home_team = 17;
  if (has_is_home_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->is_home_team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLobbyTeamDetails)
  return target;
}

int CLobbyTeamDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string team_name = 1;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional string team_tag = 3;
    if (has_team_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_tag());
    }

    // optional uint32 team_id = 4;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint64 team_logo = 5;
    if (has_team_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_logo());
    }

    // optional uint64 team_base_logo = 6;
    if (has_team_base_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_base_logo());
    }

    // optional uint64 team_banner_logo = 7;
    if (has_team_banner_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_banner_logo());
    }

    // optional bool team_complete = 8;
    if (has_team_complete()) {
      total_size += 1 + 1;
    }

    // optional string guild_name = 9;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string guild_tag = 10;
    if (has_guild_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_tag());
    }

    // optional uint32 guild_id = 11;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional uint64 guild_logo = 12;
    if (has_guild_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_logo());
    }

    // optional uint64 guild_base_logo = 13;
    if (has_guild_base_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_base_logo());
    }

    // optional uint64 guild_banner_logo = 14;
    if (has_guild_banner_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_banner_logo());
    }

    // optional uint32 rank = 15;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional sint32 rank_change = 16;
    if (has_rank_change()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rank_change());
    }

    // optional bool is_home_team = 17;
    if (has_is_home_team()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLobbyTeamDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLobbyTeamDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLobbyTeamDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLobbyTeamDetails::MergeFrom(const CLobbyTeamDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
    if (from.has_team_tag()) {
      set_team_tag(from.team_tag());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_logo()) {
      set_team_logo(from.team_logo());
    }
    if (from.has_team_base_logo()) {
      set_team_base_logo(from.team_base_logo());
    }
    if (from.has_team_banner_logo()) {
      set_team_banner_logo(from.team_banner_logo());
    }
    if (from.has_team_complete()) {
      set_team_complete(from.team_complete());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_guild_tag()) {
      set_guild_tag(from.guild_tag());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_guild_logo()) {
      set_guild_logo(from.guild_logo());
    }
    if (from.has_guild_base_logo()) {
      set_guild_base_logo(from.guild_base_logo());
    }
    if (from.has_guild_banner_logo()) {
      set_guild_banner_logo(from.guild_banner_logo());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_rank_change()) {
      set_rank_change(from.rank_change());
    }
    if (from.has_is_home_team()) {
      set_is_home_team(from.is_home_team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLobbyTeamDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLobbyTeamDetails::CopyFrom(const CLobbyTeamDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyTeamDetails::IsInitialized() const {

  return true;
}

void CLobbyTeamDetails::Swap(CLobbyTeamDetails* other) {
  if (other != this) {
    std::swap(team_name_, other->team_name_);
    std::swap(team_tag_, other->team_tag_);
    std::swap(team_id_, other->team_id_);
    std::swap(team_logo_, other->team_logo_);
    std::swap(team_base_logo_, other->team_base_logo_);
    std::swap(team_banner_logo_, other->team_banner_logo_);
    std::swap(team_complete_, other->team_complete_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(guild_tag_, other->guild_tag_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(guild_logo_, other->guild_logo_);
    std::swap(guild_base_logo_, other->guild_base_logo_);
    std::swap(guild_banner_logo_, other->guild_banner_logo_);
    std::swap(rank_, other->rank_);
    std::swap(rank_change_, other->rank_change_);
    std::swap(is_home_team_, other->is_home_team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLobbyTeamDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLobbyTeamDetails_descriptor_;
  metadata.reflection = CLobbyTeamDetails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLobbyTimedRewardDetails::kItemDefIndexFieldNumber;
const int CLobbyTimedRewardDetails::kIsSupplyCrateFieldNumber;
const int CLobbyTimedRewardDetails::kIsTimedDropFieldNumber;
const int CLobbyTimedRewardDetails::kAccountIdFieldNumber;
const int CLobbyTimedRewardDetails::kOriginFieldNumber;
#endif  // !_MSC_VER

CLobbyTimedRewardDetails::CLobbyTimedRewardDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CLobbyTimedRewardDetails)
}

void CLobbyTimedRewardDetails::InitAsDefaultInstance() {
}

CLobbyTimedRewardDetails::CLobbyTimedRewardDetails(const CLobbyTimedRewardDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CLobbyTimedRewardDetails)
}

void CLobbyTimedRewardDetails::SharedCtor() {
  _cached_size_ = 0;
  item_def_index_ = 0u;
  is_supply_crate_ = false;
  is_timed_drop_ = false;
  account_id_ = 0u;
  origin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLobbyTimedRewardDetails::~CLobbyTimedRewardDetails() {
  // @@protoc_insertion_point(destructor:CLobbyTimedRewardDetails)
  SharedDtor();
}

void CLobbyTimedRewardDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLobbyTimedRewardDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLobbyTimedRewardDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLobbyTimedRewardDetails_descriptor_;
}

const CLobbyTimedRewardDetails& CLobbyTimedRewardDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CLobbyTimedRewardDetails* CLobbyTimedRewardDetails::default_instance_ = NULL;

CLobbyTimedRewardDetails* CLobbyTimedRewardDetails::New() const {
  return new CLobbyTimedRewardDetails;
}

void CLobbyTimedRewardDetails::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CLobbyTimedRewardDetails*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(item_def_index_, origin_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLobbyTimedRewardDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CLobbyTimedRewardDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_def_index = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_index_)));
          set_has_item_def_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_supply_crate;
        break;
      }

      // optional bool is_supply_crate = 3;
      case 3: {
        if (tag == 24) {
         parse_is_supply_crate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_supply_crate_)));
          set_has_is_supply_crate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_timed_drop;
        break;
      }

      // optional bool is_timed_drop = 4;
      case 4: {
        if (tag == 32) {
         parse_is_timed_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_timed_drop_)));
          set_has_is_timed_drop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_account_id;
        break;
      }

      // optional uint32 account_id = 5;
      case 5: {
        if (tag == 40) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_origin;
        break;
      }

      // optional uint32 origin = 6;
      case 6: {
        if (tag == 48) {
         parse_origin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &origin_)));
          set_has_origin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CLobbyTimedRewardDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CLobbyTimedRewardDetails)
  return false;
#undef DO_
}

void CLobbyTimedRewardDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CLobbyTimedRewardDetails)
  // optional uint32 item_def_index = 2;
  if (has_item_def_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_def_index(), output);
  }

  // optional bool is_supply_crate = 3;
  if (has_is_supply_crate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_supply_crate(), output);
  }

  // optional bool is_timed_drop = 4;
  if (has_is_timed_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_timed_drop(), output);
  }

  // optional uint32 account_id = 5;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->account_id(), output);
  }

  // optional uint32 origin = 6;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->origin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CLobbyTimedRewardDetails)
}

::google::protobuf::uint8* CLobbyTimedRewardDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLobbyTimedRewardDetails)
  // optional uint32 item_def_index = 2;
  if (has_item_def_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_def_index(), target);
  }

  // optional bool is_supply_crate = 3;
  if (has_is_supply_crate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_supply_crate(), target);
  }

  // optional bool is_timed_drop = 4;
  if (has_is_timed_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_timed_drop(), target);
  }

  // optional uint32 account_id = 5;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->account_id(), target);
  }

  // optional uint32 origin = 6;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->origin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLobbyTimedRewardDetails)
  return target;
}

int CLobbyTimedRewardDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_def_index = 2;
    if (has_item_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def_index());
    }

    // optional bool is_supply_crate = 3;
    if (has_is_supply_crate()) {
      total_size += 1 + 1;
    }

    // optional bool is_timed_drop = 4;
    if (has_is_timed_drop()) {
      total_size += 1 + 1;
    }

    // optional uint32 account_id = 5;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 origin = 6;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->origin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLobbyTimedRewardDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLobbyTimedRewardDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLobbyTimedRewardDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLobbyTimedRewardDetails::MergeFrom(const CLobbyTimedRewardDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_def_index()) {
      set_item_def_index(from.item_def_index());
    }
    if (from.has_is_supply_crate()) {
      set_is_supply_crate(from.is_supply_crate());
    }
    if (from.has_is_timed_drop()) {
      set_is_timed_drop(from.is_timed_drop());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_origin()) {
      set_origin(from.origin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLobbyTimedRewardDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLobbyTimedRewardDetails::CopyFrom(const CLobbyTimedRewardDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyTimedRewardDetails::IsInitialized() const {

  return true;
}

void CLobbyTimedRewardDetails::Swap(CLobbyTimedRewardDetails* other) {
  if (other != this) {
    std::swap(item_def_index_, other->item_def_index_);
    std::swap(is_supply_crate_, other->is_supply_crate_);
    std::swap(is_timed_drop_, other->is_timed_drop_);
    std::swap(account_id_, other->account_id_);
    std::swap(origin_, other->origin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLobbyTimedRewardDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLobbyTimedRewardDetails_descriptor_;
  metadata.reflection = CLobbyTimedRewardDetails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLobbyBroadcastChannelInfo::kChannelIdFieldNumber;
const int CLobbyBroadcastChannelInfo::kCountryCodeFieldNumber;
const int CLobbyBroadcastChannelInfo::kDescriptionFieldNumber;
const int CLobbyBroadcastChannelInfo::kLanguageCodeFieldNumber;
#endif  // !_MSC_VER

CLobbyBroadcastChannelInfo::CLobbyBroadcastChannelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CLobbyBroadcastChannelInfo)
}

void CLobbyBroadcastChannelInfo::InitAsDefaultInstance() {
}

CLobbyBroadcastChannelInfo::CLobbyBroadcastChannelInfo(const CLobbyBroadcastChannelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CLobbyBroadcastChannelInfo)
}

void CLobbyBroadcastChannelInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_id_ = 0u;
  country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLobbyBroadcastChannelInfo::~CLobbyBroadcastChannelInfo() {
  // @@protoc_insertion_point(destructor:CLobbyBroadcastChannelInfo)
  SharedDtor();
}

void CLobbyBroadcastChannelInfo::SharedDtor() {
  if (country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_code_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (language_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete language_code_;
  }
  if (this != default_instance_) {
  }
}

void CLobbyBroadcastChannelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLobbyBroadcastChannelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLobbyBroadcastChannelInfo_descriptor_;
}

const CLobbyBroadcastChannelInfo& CLobbyBroadcastChannelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CLobbyBroadcastChannelInfo* CLobbyBroadcastChannelInfo::default_instance_ = NULL;

CLobbyBroadcastChannelInfo* CLobbyBroadcastChannelInfo::New() const {
  return new CLobbyBroadcastChannelInfo;
}

void CLobbyBroadcastChannelInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    channel_id_ = 0u;
    if (has_country_code()) {
      if (country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        country_code_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_language_code()) {
      if (language_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        language_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLobbyBroadcastChannelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CLobbyBroadcastChannelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_country_code;
        break;
      }

      // optional string country_code = 2;
      case 2: {
        if (tag == 18) {
         parse_country_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "country_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (tag == 26) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_language_code;
        break;
      }

      // optional string language_code = 4;
      case 4: {
        if (tag == 34) {
         parse_language_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language_code().data(), this->language_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "language_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CLobbyBroadcastChannelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CLobbyBroadcastChannelInfo)
  return false;
#undef DO_
}

void CLobbyBroadcastChannelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CLobbyBroadcastChannelInfo)
  // optional uint32 channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_id(), output);
  }

  // optional string country_code = 2;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->country_code(), output);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // optional string language_code = 4;
  if (has_language_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language_code().data(), this->language_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->language_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CLobbyBroadcastChannelInfo)
}

::google::protobuf::uint8* CLobbyBroadcastChannelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLobbyBroadcastChannelInfo)
  // optional uint32 channel_id = 1;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel_id(), target);
  }

  // optional string country_code = 2;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->country_code(), target);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // optional string language_code = 4;
  if (has_language_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language_code().data(), this->language_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->language_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLobbyBroadcastChannelInfo)
  return target;
}

int CLobbyBroadcastChannelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional string country_code = 2;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string language_code = 4;
    if (has_language_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLobbyBroadcastChannelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLobbyBroadcastChannelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLobbyBroadcastChannelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLobbyBroadcastChannelInfo::MergeFrom(const CLobbyBroadcastChannelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_country_code()) {
      set_country_code(from.country_code());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_language_code()) {
      set_language_code(from.language_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLobbyBroadcastChannelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLobbyBroadcastChannelInfo::CopyFrom(const CLobbyBroadcastChannelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyBroadcastChannelInfo::IsInitialized() const {

  return true;
}

void CLobbyBroadcastChannelInfo::Swap(CLobbyBroadcastChannelInfo* other) {
  if (other != this) {
    std::swap(channel_id_, other->channel_id_);
    std::swap(country_code_, other->country_code_);
    std::swap(description_, other->description_);
    std::swap(language_code_, other->language_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLobbyBroadcastChannelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLobbyBroadcastChannelInfo_descriptor_;
  metadata.reflection = CLobbyBroadcastChannelInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CSODOTALobby_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTALobby_State_descriptor_;
}
bool CSODOTALobby_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CSODOTALobby_State CSODOTALobby::UI;
const CSODOTALobby_State CSODOTALobby::READYUP;
const CSODOTALobby_State CSODOTALobby::SERVERSETUP;
const CSODOTALobby_State CSODOTALobby::RUN;
const CSODOTALobby_State CSODOTALobby::POSTGAME;
const CSODOTALobby_State CSODOTALobby::NOTREADY;
const CSODOTALobby_State CSODOTALobby::SERVERASSIGN;
const CSODOTALobby_State CSODOTALobby::State_MIN;
const CSODOTALobby_State CSODOTALobby::State_MAX;
const int CSODOTALobby::State_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CSODOTALobby_LobbyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTALobby_LobbyType_descriptor_;
}
bool CSODOTALobby_LobbyType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CSODOTALobby_LobbyType CSODOTALobby::INVALID;
const CSODOTALobby_LobbyType CSODOTALobby::CASUAL_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::PRACTICE;
const CSODOTALobby_LobbyType CSODOTALobby::TOURNAMENT;
const CSODOTALobby_LobbyType CSODOTALobby::COOP_BOT_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::LEGACY_TEAM_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::LEGACY_SOLO_QUEUE_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::COMPETITIVE_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::CASUAL_1V1_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::WEEKEND_TOURNEY;
const CSODOTALobby_LobbyType CSODOTALobby::LOCAL_BOT_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::SPECTATOR;
const CSODOTALobby_LobbyType CSODOTALobby::LobbyType_MIN;
const CSODOTALobby_LobbyType CSODOTALobby::LobbyType_MAX;
const int CSODOTALobby::LobbyType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CSODOTALobby_CExtraMsg::kIdFieldNumber;
const int CSODOTALobby_CExtraMsg::kContentsFieldNumber;
#endif  // !_MSC_VER

CSODOTALobby_CExtraMsg::CSODOTALobby_CExtraMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSODOTALobby.CExtraMsg)
}

void CSODOTALobby_CExtraMsg::InitAsDefaultInstance() {
}

CSODOTALobby_CExtraMsg::CSODOTALobby_CExtraMsg(const CSODOTALobby_CExtraMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSODOTALobby.CExtraMsg)
}

void CSODOTALobby_CExtraMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTALobby_CExtraMsg::~CSODOTALobby_CExtraMsg() {
  // @@protoc_insertion_point(destructor:CSODOTALobby.CExtraMsg)
  SharedDtor();
}

void CSODOTALobby_CExtraMsg::SharedDtor() {
  if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contents_;
  }
  if (this != default_instance_) {
  }
}

void CSODOTALobby_CExtraMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTALobby_CExtraMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTALobby_CExtraMsg_descriptor_;
}

const CSODOTALobby_CExtraMsg& CSODOTALobby_CExtraMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CSODOTALobby_CExtraMsg* CSODOTALobby_CExtraMsg::default_instance_ = NULL;

CSODOTALobby_CExtraMsg* CSODOTALobby_CExtraMsg::New() const {
  return new CSODOTALobby_CExtraMsg;
}

void CSODOTALobby_CExtraMsg::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0u;
    if (has_contents()) {
      if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contents_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSODOTALobby_CExtraMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSODOTALobby.CExtraMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contents;
        break;
      }

      // optional bytes contents = 2;
      case 2: {
        if (tag == 18) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSODOTALobby.CExtraMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSODOTALobby.CExtraMsg)
  return false;
#undef DO_
}

void CSODOTALobby_CExtraMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSODOTALobby.CExtraMsg)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bytes contents = 2;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->contents(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSODOTALobby.CExtraMsg)
}

::google::protobuf::uint8* CSODOTALobby_CExtraMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTALobby.CExtraMsg)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bytes contents = 2;
  if (has_contents()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->contents(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTALobby.CExtraMsg)
  return target;
}

int CSODOTALobby_CExtraMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bytes contents = 2;
    if (has_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contents());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTALobby_CExtraMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSODOTALobby_CExtraMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSODOTALobby_CExtraMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTALobby_CExtraMsg::MergeFrom(const CSODOTALobby_CExtraMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_contents()) {
      set_contents(from.contents());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSODOTALobby_CExtraMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTALobby_CExtraMsg::CopyFrom(const CSODOTALobby_CExtraMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobby_CExtraMsg::IsInitialized() const {

  return true;
}

void CSODOTALobby_CExtraMsg::Swap(CSODOTALobby_CExtraMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(contents_, other->contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSODOTALobby_CExtraMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTALobby_CExtraMsg_descriptor_;
  metadata.reflection = CSODOTALobby_CExtraMsg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSODOTALobby::kLobbyIdFieldNumber;
const int CSODOTALobby::kMembersFieldNumber;
const int CSODOTALobby::kLeftMembersFieldNumber;
const int CSODOTALobby::kLeaderIdFieldNumber;
const int CSODOTALobby::kServerIdFieldNumber;
const int CSODOTALobby::kGameModeFieldNumber;
const int CSODOTALobby::kPendingInvitesFieldNumber;
const int CSODOTALobby::kStateFieldNumber;
const int CSODOTALobby::kConnectFieldNumber;
const int CSODOTALobby::kLobbyTypeFieldNumber;
const int CSODOTALobby::kAllowCheatsFieldNumber;
const int CSODOTALobby::kFillWithBotsFieldNumber;
const int CSODOTALobby::kIntroModeFieldNumber;
const int CSODOTALobby::kGameNameFieldNumber;
const int CSODOTALobby::kTeamDetailsFieldNumber;
const int CSODOTALobby::kTutorialLessonFieldNumber;
const int CSODOTALobby::kTournamentIdFieldNumber;
const int CSODOTALobby::kTournamentGameIdFieldNumber;
const int CSODOTALobby::kServerRegionFieldNumber;
const int CSODOTALobby::kGameStateFieldNumber;
const int CSODOTALobby::kNumSpectatorsFieldNumber;
const int CSODOTALobby::kMatchgroupFieldNumber;
const int CSODOTALobby::kCmPickFieldNumber;
const int CSODOTALobby::kMatchIdFieldNumber;
const int CSODOTALobby::kAllowSpectatingFieldNumber;
const int CSODOTALobby::kBotDifficultyRadiantFieldNumber;
const int CSODOTALobby::kGameVersionFieldNumber;
const int CSODOTALobby::kTimedRewardDetailsFieldNumber;
const int CSODOTALobby::kPassKeyFieldNumber;
const int CSODOTALobby::kLeagueidFieldNumber;
const int CSODOTALobby::kPenaltyLevelRadiantFieldNumber;
const int CSODOTALobby::kPenaltyLevelDireFieldNumber;
const int CSODOTALobby::kLoadGameIdFieldNumber;
const int CSODOTALobby::kSeriesTypeFieldNumber;
const int CSODOTALobby::kRadiantSeriesWinsFieldNumber;
const int CSODOTALobby::kDireSeriesWinsFieldNumber;
const int CSODOTALobby::kLootGeneratedFieldNumber;
const int CSODOTALobby::kLootAwardedFieldNumber;
const int CSODOTALobby::kAllchatFieldNumber;
const int CSODOTALobby::kDotaTvDelayFieldNumber;
const int CSODOTALobby::kCustomGameModeFieldNumber;
const int CSODOTALobby::kCustomMapNameFieldNumber;
const int CSODOTALobby::kCustomDifficultyFieldNumber;
const int CSODOTALobby::kLanFieldNumber;
const int CSODOTALobby::kBroadcastChannelInfoFieldNumber;
const int CSODOTALobby::kFirstLeaverAccountidFieldNumber;
const int CSODOTALobby::kSeriesIdFieldNumber;
const int CSODOTALobby::kLowPriorityFieldNumber;
const int CSODOTALobby::kExtraMessagesFieldNumber;
const int CSODOTALobby::kSaveGameFieldNumber;
const int CSODOTALobby::kFirstBloodHappenedFieldNumber;
const int CSODOTALobby::kMatchOutcomeFieldNumber;
const int CSODOTALobby::kMassDisconnectFieldNumber;
const int CSODOTALobby::kCustomGameIdFieldNumber;
const int CSODOTALobby::kActiveIngameEventsFieldNumber;
const int CSODOTALobby::kCustomMinPlayersFieldNumber;
const int CSODOTALobby::kCustomMaxPlayersFieldNumber;
const int CSODOTALobby::kPartnerTypeFieldNumber;
const int CSODOTALobby::kLanHostPingToServerRegionFieldNumber;
const int CSODOTALobby::kVisibilityFieldNumber;
const int CSODOTALobby::kCustomGameCrcFieldNumber;
const int CSODOTALobby::kCustomGameAutoCreatedLobbyFieldNumber;
const int CSODOTALobby::kLeagueSeriesIdFieldNumber;
const int CSODOTALobby::kLeagueGameIdFieldNumber;
const int CSODOTALobby::kCustomGameTimestampFieldNumber;
const int CSODOTALobby::kPreviousSeriesMatchesFieldNumber;
const int CSODOTALobby::kPreviousMatchOverrideFieldNumber;
const int CSODOTALobby::kCustomGameUsesAccountRecordsFieldNumber;
const int CSODOTALobby::kLeagueSelectionPriorityTeamFieldNumber;
const int CSODOTALobby::kLeagueSelectionPriorityChoiceFieldNumber;
const int CSODOTALobby::kLeagueNonSelectionPriorityChoiceFieldNumber;
const int CSODOTALobby::kGameStartTimeFieldNumber;
const int CSODOTALobby::kPauseSettingFieldNumber;
const int CSODOTALobby::kLobbyMvpAccountIdFieldNumber;
const int CSODOTALobby::kWeekendTourneyDivisionIdFieldNumber;
const int CSODOTALobby::kWeekendTourneySkillLevelFieldNumber;
const int CSODOTALobby::kWeekendTourneyBracketRoundFieldNumber;
const int CSODOTALobby::kBotDifficultyDireFieldNumber;
const int CSODOTALobby::kBotRadiantFieldNumber;
const int CSODOTALobby::kBotDireFieldNumber;
#endif  // !_MSC_VER

CSODOTALobby::CSODOTALobby()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSODOTALobby)
}

void CSODOTALobby::InitAsDefaultInstance() {
  save_game_ = const_cast< ::CDOTASaveGame*>(&::CDOTASaveGame::default_instance());
}

CSODOTALobby::CSODOTALobby(const CSODOTALobby& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSODOTALobby)
}

void CSODOTALobby::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lobby_id_ = GOOGLE_ULONGLONG(0);
  leader_id_ = GOOGLE_ULONGLONG(0);
  server_id_ = GOOGLE_ULONGLONG(0);
  game_mode_ = 0u;
  state_ = 0;
  connect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lobby_type_ = -1;
  allow_cheats_ = false;
  fill_with_bots_ = false;
  intro_mode_ = false;
  game_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tutorial_lesson_ = 0u;
  tournament_id_ = 0u;
  tournament_game_id_ = 0u;
  server_region_ = 0u;
  game_state_ = 0;
  num_spectators_ = 0u;
  matchgroup_ = 0u;
  cm_pick_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  allow_spectating_ = true;
  bot_difficulty_radiant_ = 3;
  game_version_ = 0;
  pass_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leagueid_ = 0u;
  penalty_level_radiant_ = 0u;
  penalty_level_dire_ = 0u;
  load_game_id_ = 0u;
  series_type_ = 0u;
  radiant_series_wins_ = 0u;
  dire_series_wins_ = 0u;
  loot_generated_ = 0u;
  loot_awarded_ = 0u;
  allchat_ = false;
  dota_tv_delay_ = 0;
  custom_game_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_map_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_difficulty_ = 0u;
  lan_ = false;
  first_leaver_accountid_ = 0u;
  series_id_ = 0u;
  low_priority_ = false;
  save_game_ = NULL;
  first_blood_happened_ = false;
  match_outcome_ = 0;
  mass_disconnect_ = false;
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  custom_min_players_ = 0u;
  custom_max_players_ = 0u;
  partner_type_ = 0;
  lan_host_ping_to_server_region_ = 0u;
  visibility_ = 0;
  custom_game_crc_ = GOOGLE_ULONGLONG(0);
  custom_game_auto_created_lobby_ = false;
  league_series_id_ = 0u;
  league_game_id_ = 0u;
  custom_game_timestamp_ = 0u;
  previous_match_override_ = GOOGLE_ULONGLONG(0);
  custom_game_uses_account_records_ = false;
  league_selection_priority_team_ = 0u;
  league_selection_priority_choice_ = 0;
  league_non_selection_priority_choice_ = 0;
  game_start_time_ = 0u;
  pause_setting_ = 0;
  lobby_mvp_account_id_ = 0u;
  weekend_tourney_division_id_ = 0u;
  weekend_tourney_skill_level_ = 0u;
  weekend_tourney_bracket_round_ = 0u;
  bot_difficulty_dire_ = 3;
  bot_radiant_ = GOOGLE_ULONGLONG(0);
  bot_dire_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTALobby::~CSODOTALobby() {
  // @@protoc_insertion_point(destructor:CSODOTALobby)
  SharedDtor();
}

void CSODOTALobby::SharedDtor() {
  if (connect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete connect_;
  }
  if (game_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_name_;
  }
  if (pass_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pass_key_;
  }
  if (custom_game_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete custom_game_mode_;
  }
  if (custom_map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete custom_map_name_;
  }
  if (this != default_instance_) {
    delete save_game_;
  }
}

void CSODOTALobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTALobby::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTALobby_descriptor_;
}

const CSODOTALobby& CSODOTALobby::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CSODOTALobby* CSODOTALobby::default_instance_ = NULL;

CSODOTALobby* CSODOTALobby::New() const {
  return new CSODOTALobby;
}

void CSODOTALobby::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSODOTALobby*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 185) {
    ZR_(leader_id_, server_id_);
    ZR_(game_mode_, state_);
    lobby_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 48896) {
    ZR_(allow_cheats_, intro_mode_);
    if (has_connect()) {
      if (connect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        connect_->clear();
      }
    }
    lobby_type_ = -1;
    if (has_game_name()) {
      if (game_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        game_name_->clear();
      }
    }
    tutorial_lesson_ = 0u;
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(tournament_id_, match_id_);
  }
  if (_has_bits_[24 / 32] & 4143972352) {
    ZR_(leagueid_, penalty_level_dire_);
    allow_spectating_ = true;
    bot_difficulty_radiant_ = 3;
    game_version_ = 0;
    if (has_pass_key()) {
      if (pass_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pass_key_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(load_game_id_, dota_tv_delay_);
    allchat_ = false;
  }
  if (_has_bits_[40 / 32] & 61184) {
    ZR_(lan_, low_priority_);
    ZR_(first_leaver_accountid_, series_id_);
    if (has_custom_game_mode()) {
      if (custom_game_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        custom_game_mode_->clear();
      }
    }
    if (has_custom_map_name()) {
      if (custom_map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        custom_map_name_->clear();
      }
    }
    custom_difficulty_ = 0u;
  }
  if (_has_bits_[48 / 32] & 12451840) {
    ZR_(custom_game_id_, custom_min_players_);
    if (has_save_game()) {
      if (save_game_ != NULL) save_game_->::CDOTASaveGame::Clear();
    }
    first_blood_happened_ = false;
    mass_disconnect_ = false;
  }
  if (_has_bits_[56 / 32] & 4278190080) {
    ZR_(custom_max_players_, custom_game_crc_);
    ZR_(league_series_id_, league_game_id_);
    custom_game_auto_created_lobby_ = false;
  }
  if (_has_bits_[64 / 32] & 253) {
    ZR_(previous_match_override_, game_start_time_);
    custom_game_timestamp_ = 0u;
    custom_game_uses_account_records_ = false;
  }
  if (_has_bits_[72 / 32] & 65280) {
    ZR_(pause_setting_, weekend_tourney_bracket_round_);
    ZR_(bot_radiant_, bot_dire_);
    bot_difficulty_dire_ = 3;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  members_.Clear();
  left_members_.Clear();
  pending_invites_.Clear();
  team_details_.Clear();
  timed_reward_details_.Clear();
  broadcast_channel_info_.Clear();
  extra_messages_.Clear();
  active_ingame_events_.Clear();
  previous_series_matches_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSODOTALobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSODOTALobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 lobby_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
          set_has_lobby_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_members;
        break;
      }

      // repeated .CDOTALobbyMember members = 2;
      case 2: {
        if (tag == 18) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_members;
        if (input->ExpectTag(24)) goto parse_game_mode;
        break;
      }

      // optional uint32 game_mode = 3;
      case 3: {
        if (tag == 24) {
         parse_game_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
          set_has_game_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional .CSODOTALobby.State state = 4 [default = UI];
      case 4: {
        if (tag == 32) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSODOTALobby_State_IsValid(value)) {
            set_state(static_cast< ::CSODOTALobby_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_connect;
        break;
      }

      // optional string connect = 5;
      case 5: {
        if (tag == 42) {
         parse_connect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->connect().data(), this->connect().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "connect");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_server_id;
        break;
      }

      // optional fixed64 server_id = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_left_members;
        break;
      }

      // repeated .CDOTALobbyMember left_members = 7;
      case 7: {
        if (tag == 58) {
         parse_left_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_left_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_left_members;
        if (input->ExpectTag(81)) goto parse_pending_invites;
        break;
      }

      // repeated fixed64 pending_invites = 10;
      case 10: {
        if (tag == 81) {
         parse_pending_invites:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 81, input, this->mutable_pending_invites())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_pending_invites())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_pending_invites;
        if (input->ExpectTag(89)) goto parse_leader_id;
        break;
      }

      // optional fixed64 leader_id = 11;
      case 11: {
        if (tag == 89) {
         parse_leader_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &leader_id_)));
          set_has_leader_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_lobby_type;
        break;
      }

      // optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
      case 12: {
        if (tag == 96) {
         parse_lobby_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSODOTALobby_LobbyType_IsValid(value)) {
            set_lobby_type(static_cast< ::CSODOTALobby_LobbyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_allow_cheats;
        break;
      }

      // optional bool allow_cheats = 13;
      case 13: {
        if (tag == 104) {
         parse_allow_cheats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_cheats_)));
          set_has_allow_cheats();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_fill_with_bots;
        break;
      }

      // optional bool fill_with_bots = 14;
      case 14: {
        if (tag == 112) {
         parse_fill_with_bots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fill_with_bots_)));
          set_has_fill_with_bots();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_intro_mode;
        break;
      }

      // optional bool intro_mode = 15;
      case 15: {
        if (tag == 120) {
         parse_intro_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &intro_mode_)));
          set_has_intro_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_game_name;
        break;
      }

      // optional string game_name = 16;
      case 16: {
        if (tag == 130) {
         parse_game_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_name().data(), this->game_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "game_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_team_details;
        break;
      }

      // repeated .CLobbyTeamDetails team_details = 17;
      case 17: {
        if (tag == 138) {
         parse_team_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_team_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_team_details;
        if (input->ExpectTag(144)) goto parse_tutorial_lesson;
        break;
      }

      // optional uint32 tutorial_lesson = 18;
      case 18: {
        if (tag == 144) {
         parse_tutorial_lesson:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tutorial_lesson_)));
          set_has_tutorial_lesson();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_tournament_id;
        break;
      }

      // optional uint32 tournament_id = 19;
      case 19: {
        if (tag == 152) {
         parse_tournament_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
          set_has_tournament_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_tournament_game_id;
        break;
      }

      // optional uint32 tournament_game_id = 20;
      case 20: {
        if (tag == 160) {
         parse_tournament_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_game_id_)));
          set_has_tournament_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_server_region;
        break;
      }

      // optional uint32 server_region = 21 [default = 0];
      case 21: {
        if (tag == 168) {
         parse_server_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
          set_has_server_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_game_state;
        break;
      }

      // optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
      case 22: {
        if (tag == 176) {
         parse_game_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_GameState_IsValid(value)) {
            set_game_state(static_cast< ::DOTA_GameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_num_spectators;
        break;
      }

      // optional uint32 num_spectators = 23;
      case 23: {
        if (tag == 184) {
         parse_num_spectators:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_spectators_)));
          set_has_num_spectators();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_matchgroup;
        break;
      }

      // optional uint32 matchgroup = 25;
      case 25: {
        if (tag == 200) {
         parse_matchgroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchgroup_)));
          set_has_matchgroup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_cm_pick;
        break;
      }

      // optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
      case 28: {
        if (tag == 224) {
         parse_cm_pick:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_CM_PICK_IsValid(value)) {
            set_cm_pick(static_cast< ::DOTA_CM_PICK >(value));
          } else {
            mutable_unknown_fields()->AddVarint(28, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 30;
      case 30: {
        if (tag == 240) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_allow_spectating;
        break;
      }

      // optional bool allow_spectating = 31 [default = true];
      case 31: {
        if (tag == 248) {
         parse_allow_spectating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_spectating_)));
          set_has_allow_spectating();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_bot_difficulty_radiant;
        break;
      }

      // optional .DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
      case 36: {
        if (tag == 288) {
         parse_bot_difficulty_radiant:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty_radiant(static_cast< ::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(36, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_game_version;
        break;
      }

      // optional .DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
      case 37: {
        if (tag == 296) {
         parse_game_version:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTAGameVersion_IsValid(value)) {
            set_game_version(static_cast< ::DOTAGameVersion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(37, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_timed_reward_details;
        break;
      }

      // repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
      case 38: {
        if (tag == 306) {
         parse_timed_reward_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timed_reward_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_timed_reward_details;
        if (input->ExpectTag(314)) goto parse_pass_key;
        break;
      }

      // optional string pass_key = 39;
      case 39: {
        if (tag == 314) {
         parse_pass_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass_key().data(), this->pass_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pass_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_leagueid;
        break;
      }

      // optional uint32 leagueid = 42;
      case 42: {
        if (tag == 336) {
         parse_leagueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leagueid_)));
          set_has_leagueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_penalty_level_radiant;
        break;
      }

      // optional uint32 penalty_level_radiant = 43 [default = 0];
      case 43: {
        if (tag == 344) {
         parse_penalty_level_radiant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penalty_level_radiant_)));
          set_has_penalty_level_radiant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_penalty_level_dire;
        break;
      }

      // optional uint32 penalty_level_dire = 44 [default = 0];
      case 44: {
        if (tag == 352) {
         parse_penalty_level_dire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penalty_level_dire_)));
          set_has_penalty_level_dire();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_load_game_id;
        break;
      }

      // optional uint32 load_game_id = 45;
      case 45: {
        if (tag == 360) {
         parse_load_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &load_game_id_)));
          set_has_load_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_series_type;
        break;
      }

      // optional uint32 series_type = 46;
      case 46: {
        if (tag == 368) {
         parse_series_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
          set_has_series_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_radiant_series_wins;
        break;
      }

      // optional uint32 radiant_series_wins = 47;
      case 47: {
        if (tag == 376) {
         parse_radiant_series_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_series_wins_)));
          set_has_radiant_series_wins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_dire_series_wins;
        break;
      }

      // optional uint32 dire_series_wins = 48;
      case 48: {
        if (tag == 384) {
         parse_dire_series_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_series_wins_)));
          set_has_dire_series_wins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_loot_generated;
        break;
      }

      // optional uint32 loot_generated = 49;
      case 49: {
        if (tag == 392) {
         parse_loot_generated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loot_generated_)));
          set_has_loot_generated();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_loot_awarded;
        break;
      }

      // optional uint32 loot_awarded = 50;
      case 50: {
        if (tag == 400) {
         parse_loot_awarded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loot_awarded_)));
          set_has_loot_awarded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_allchat;
        break;
      }

      // optional bool allchat = 51 [default = false];
      case 51: {
        if (tag == 408) {
         parse_allchat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allchat_)));
          set_has_allchat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_dota_tv_delay;
        break;
      }

      // optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
      case 53: {
        if (tag == 424) {
         parse_dota_tv_delay:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LobbyDotaTVDelay_IsValid(value)) {
            set_dota_tv_delay(static_cast< ::LobbyDotaTVDelay >(value));
          } else {
            mutable_unknown_fields()->AddVarint(53, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(434)) goto parse_custom_game_mode;
        break;
      }

      // optional string custom_game_mode = 54;
      case 54: {
        if (tag == 434) {
         parse_custom_game_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_game_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->custom_game_mode().data(), this->custom_game_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "custom_game_mode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(442)) goto parse_custom_map_name;
        break;
      }

      // optional string custom_map_name = 55;
      case 55: {
        if (tag == 442) {
         parse_custom_map_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->custom_map_name().data(), this->custom_map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "custom_map_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_custom_difficulty;
        break;
      }

      // optional uint32 custom_difficulty = 56;
      case 56: {
        if (tag == 448) {
         parse_custom_difficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_difficulty_)));
          set_has_custom_difficulty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(456)) goto parse_lan;
        break;
      }

      // optional bool lan = 57;
      case 57: {
        if (tag == 456) {
         parse_lan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lan_)));
          set_has_lan();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(466)) goto parse_broadcast_channel_info;
        break;
      }

      // repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
      case 58: {
        if (tag == 466) {
         parse_broadcast_channel_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_broadcast_channel_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(466)) goto parse_broadcast_channel_info;
        if (input->ExpectTag(472)) goto parse_first_leaver_accountid;
        break;
      }

      // optional uint32 first_leaver_accountid = 59;
      case 59: {
        if (tag == 472) {
         parse_first_leaver_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_leaver_accountid_)));
          set_has_first_leaver_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_series_id;
        break;
      }

      // optional uint32 series_id = 60;
      case 60: {
        if (tag == 480) {
         parse_series_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_id_)));
          set_has_series_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_low_priority;
        break;
      }

      // optional bool low_priority = 61;
      case 61: {
        if (tag == 488) {
         parse_low_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_priority_)));
          set_has_low_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(498)) goto parse_extra_messages;
        break;
      }

      // repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
      case 62: {
        if (tag == 498) {
         parse_extra_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extra_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(498)) goto parse_extra_messages;
        if (input->ExpectTag(506)) goto parse_save_game;
        break;
      }

      // optional .CDOTASaveGame save_game = 63;
      case 63: {
        if (tag == 506) {
         parse_save_game:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_save_game()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(520)) goto parse_first_blood_happened;
        break;
      }

      // optional bool first_blood_happened = 65;
      case 65: {
        if (tag == 520) {
         parse_first_blood_happened:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_blood_happened_)));
          set_has_first_blood_happened();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(536)) goto parse_mass_disconnect;
        break;
      }

      // optional bool mass_disconnect = 67;
      case 67: {
        if (tag == 536) {
         parse_mass_disconnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mass_disconnect_)));
          set_has_mass_disconnect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(544)) goto parse_custom_game_id;
        break;
      }

      // optional uint64 custom_game_id = 68;
      case 68: {
        if (tag == 544) {
         parse_custom_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
          set_has_custom_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(552)) goto parse_active_ingame_events;
        break;
      }

      // repeated .EEvent active_ingame_events = 69;
      case 69: {
        if (tag == 552) {
         parse_active_ingame_events:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EEvent_IsValid(value)) {
            add_active_ingame_events(static_cast< ::EEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(69, value);
          }
        } else if (tag == 554) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::EEvent_IsValid,
                 this->mutable_active_ingame_events())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(552)) goto parse_active_ingame_events;
        if (input->ExpectTag(560)) goto parse_match_outcome;
        break;
      }

      // optional .EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
      case 70: {
        if (tag == 560) {
         parse_match_outcome:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EMatchOutcome_IsValid(value)) {
            set_match_outcome(static_cast< ::EMatchOutcome >(value));
          } else {
            mutable_unknown_fields()->AddVarint(70, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(568)) goto parse_custom_min_players;
        break;
      }

      // optional uint32 custom_min_players = 71;
      case 71: {
        if (tag == 568) {
         parse_custom_min_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_min_players_)));
          set_has_custom_min_players();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(576)) goto parse_custom_max_players;
        break;
      }

      // optional uint32 custom_max_players = 72;
      case 72: {
        if (tag == 576) {
         parse_custom_max_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_max_players_)));
          set_has_custom_max_players();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(584)) goto parse_partner_type;
        break;
      }

      // optional .PartnerAccountType partner_type = 73 [default = PARTNER_NONE];
      case 73: {
        if (tag == 584) {
         parse_partner_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PartnerAccountType_IsValid(value)) {
            set_partner_type(static_cast< ::PartnerAccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(73, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(592)) goto parse_lan_host_ping_to_server_region;
        break;
      }

      // optional uint32 lan_host_ping_to_server_region = 74;
      case 74: {
        if (tag == 592) {
         parse_lan_host_ping_to_server_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lan_host_ping_to_server_region_)));
          set_has_lan_host_ping_to_server_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(600)) goto parse_visibility;
        break;
      }

      // optional .DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
      case 75: {
        if (tag == 600) {
         parse_visibility:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTALobbyVisibility_IsValid(value)) {
            set_visibility(static_cast< ::DOTALobbyVisibility >(value));
          } else {
            mutable_unknown_fields()->AddVarint(75, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(609)) goto parse_custom_game_crc;
        break;
      }

      // optional fixed64 custom_game_crc = 76;
      case 76: {
        if (tag == 609) {
         parse_custom_game_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &custom_game_crc_)));
          set_has_custom_game_crc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(616)) goto parse_custom_game_auto_created_lobby;
        break;
      }

      // optional bool custom_game_auto_created_lobby = 77;
      case 77: {
        if (tag == 616) {
         parse_custom_game_auto_created_lobby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &custom_game_auto_created_lobby_)));
          set_has_custom_game_auto_created_lobby();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(624)) goto parse_league_series_id;
        break;
      }

      // optional uint32 league_series_id = 78;
      case 78: {
        if (tag == 624) {
         parse_league_series_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_series_id_)));
          set_has_league_series_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(632)) goto parse_league_game_id;
        break;
      }

      // optional uint32 league_game_id = 79;
      case 79: {
        if (tag == 632) {
         parse_league_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_game_id_)));
          set_has_league_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(645)) goto parse_custom_game_timestamp;
        break;
      }

      // optional fixed32 custom_game_timestamp = 80;
      case 80: {
        if (tag == 645) {
         parse_custom_game_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_game_timestamp_)));
          set_has_custom_game_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(648)) goto parse_previous_series_matches;
        break;
      }

      // repeated uint64 previous_series_matches = 81;
      case 81: {
        if (tag == 648) {
         parse_previous_series_matches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 648, input, this->mutable_previous_series_matches())));
        } else if (tag == 650) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_previous_series_matches())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(648)) goto parse_previous_series_matches;
        if (input->ExpectTag(656)) goto parse_previous_match_override;
        break;
      }

      // optional uint64 previous_match_override = 82;
      case 82: {
        if (tag == 656) {
         parse_previous_match_override:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &previous_match_override_)));
          set_has_previous_match_override();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(664)) goto parse_custom_game_uses_account_records;
        break;
      }

      // optional bool custom_game_uses_account_records = 83;
      case 83: {
        if (tag == 664) {
         parse_custom_game_uses_account_records:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &custom_game_uses_account_records_)));
          set_has_custom_game_uses_account_records();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(672)) goto parse_league_selection_priority_team;
        break;
      }

      // optional uint32 league_selection_priority_team = 84;
      case 84: {
        if (tag == 672) {
         parse_league_selection_priority_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_selection_priority_team_)));
          set_has_league_selection_priority_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(680)) goto parse_league_selection_priority_choice;
        break;
      }

      // optional .SelectionPriorityType league_selection_priority_choice = 85 [default = UNDEFINED];
      case 85: {
        if (tag == 680) {
         parse_league_selection_priority_choice:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SelectionPriorityType_IsValid(value)) {
            set_league_selection_priority_choice(static_cast< ::SelectionPriorityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(85, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(688)) goto parse_league_non_selection_priority_choice;
        break;
      }

      // optional .SelectionPriorityType league_non_selection_priority_choice = 86 [default = UNDEFINED];
      case 86: {
        if (tag == 688) {
         parse_league_non_selection_priority_choice:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SelectionPriorityType_IsValid(value)) {
            set_league_non_selection_priority_choice(static_cast< ::SelectionPriorityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(86, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(696)) goto parse_game_start_time;
        break;
      }

      // optional uint32 game_start_time = 87;
      case 87: {
        if (tag == 696) {
         parse_game_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_start_time_)));
          set_has_game_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(704)) goto parse_pause_setting;
        break;
      }

      // optional .LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
      case 88: {
        if (tag == 704) {
         parse_pause_setting:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LobbyDotaPauseSetting_IsValid(value)) {
            set_pause_setting(static_cast< ::LobbyDotaPauseSetting >(value));
          } else {
            mutable_unknown_fields()->AddVarint(88, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(712)) goto parse_lobby_mvp_account_id;
        break;
      }

      // optional uint32 lobby_mvp_account_id = 89;
      case 89: {
        if (tag == 712) {
         parse_lobby_mvp_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_mvp_account_id_)));
          set_has_lobby_mvp_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(720)) goto parse_weekend_tourney_division_id;
        break;
      }

      // optional uint32 weekend_tourney_division_id = 90;
      case 90: {
        if (tag == 720) {
         parse_weekend_tourney_division_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_division_id_)));
          set_has_weekend_tourney_division_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(728)) goto parse_weekend_tourney_skill_level;
        break;
      }

      // optional uint32 weekend_tourney_skill_level = 91;
      case 91: {
        if (tag == 728) {
         parse_weekend_tourney_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_skill_level_)));
          set_has_weekend_tourney_skill_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(736)) goto parse_weekend_tourney_bracket_round;
        break;
      }

      // optional uint32 weekend_tourney_bracket_round = 92;
      case 92: {
        if (tag == 736) {
         parse_weekend_tourney_bracket_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_bracket_round_)));
          set_has_weekend_tourney_bracket_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(744)) goto parse_bot_difficulty_dire;
        break;
      }

      // optional .DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
      case 93: {
        if (tag == 744) {
         parse_bot_difficulty_dire:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty_dire(static_cast< ::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(93, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(752)) goto parse_bot_radiant;
        break;
      }

      // optional uint64 bot_radiant = 94;
      case 94: {
        if (tag == 752) {
         parse_bot_radiant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bot_radiant_)));
          set_has_bot_radiant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(760)) goto parse_bot_dire;
        break;
      }

      // optional uint64 bot_dire = 95;
      case 95: {
        if (tag == 760) {
         parse_bot_dire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bot_dire_)));
          set_has_bot_dire();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSODOTALobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSODOTALobby)
  return false;
#undef DO_
}

void CSODOTALobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSODOTALobby)
  // optional uint64 lobby_id = 1;
  if (has_lobby_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lobby_id(), output);
  }

  // repeated .CDOTALobbyMember members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }

  // optional uint32 game_mode = 3;
  if (has_game_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_mode(), output);
  }

  // optional .CSODOTALobby.State state = 4 [default = UI];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  // optional string connect = 5;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connect().data(), this->connect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "connect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->connect(), output);
  }

  // optional fixed64 server_id = 6 [default = 0];
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->server_id(), output);
  }

  // repeated .CDOTALobbyMember left_members = 7;
  for (int i = 0; i < this->left_members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->left_members(i), output);
  }

  // repeated fixed64 pending_invites = 10;
  for (int i = 0; i < this->pending_invites_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      10, this->pending_invites(i), output);
  }

  // optional fixed64 leader_id = 11;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->leader_id(), output);
  }

  // optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
  if (has_lobby_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->lobby_type(), output);
  }

  // optional bool allow_cheats = 13;
  if (has_allow_cheats()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->allow_cheats(), output);
  }

  // optional bool fill_with_bots = 14;
  if (has_fill_with_bots()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->fill_with_bots(), output);
  }

  // optional bool intro_mode = 15;
  if (has_intro_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->intro_mode(), output);
  }

  // optional string game_name = 16;
  if (has_game_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->game_name(), output);
  }

  // repeated .CLobbyTeamDetails team_details = 17;
  for (int i = 0; i < this->team_details_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->team_details(i), output);
  }

  // optional uint32 tutorial_lesson = 18;
  if (has_tutorial_lesson()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->tutorial_lesson(), output);
  }

  // optional uint32 tournament_id = 19;
  if (has_tournament_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->tournament_id(), output);
  }

  // optional uint32 tournament_game_id = 20;
  if (has_tournament_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->tournament_game_id(), output);
  }

  // optional uint32 server_region = 21 [default = 0];
  if (has_server_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->server_region(), output);
  }

  // optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
  if (has_game_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->game_state(), output);
  }

  // optional uint32 num_spectators = 23;
  if (has_num_spectators()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->num_spectators(), output);
  }

  // optional uint32 matchgroup = 25;
  if (has_matchgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->matchgroup(), output);
  }

  // optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
  if (has_cm_pick()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      28, this->cm_pick(), output);
  }

  // optional uint64 match_id = 30;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->match_id(), output);
  }

  // optional bool allow_spectating = 31 [default = true];
  if (has_allow_spectating()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->allow_spectating(), output);
  }

  // optional .DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
  if (has_bot_difficulty_radiant()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      36, this->bot_difficulty_radiant(), output);
  }

  // optional .DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
  if (has_game_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      37, this->game_version(), output);
  }

  // repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
  for (int i = 0; i < this->timed_reward_details_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->timed_reward_details(i), output);
  }

  // optional string pass_key = 39;
  if (has_pass_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pass_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      39, this->pass_key(), output);
  }

  // optional uint32 leagueid = 42;
  if (has_leagueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->leagueid(), output);
  }

  // optional uint32 penalty_level_radiant = 43 [default = 0];
  if (has_penalty_level_radiant()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->penalty_level_radiant(), output);
  }

  // optional uint32 penalty_level_dire = 44 [default = 0];
  if (has_penalty_level_dire()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->penalty_level_dire(), output);
  }

  // optional uint32 load_game_id = 45;
  if (has_load_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->load_game_id(), output);
  }

  // optional uint32 series_type = 46;
  if (has_series_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->series_type(), output);
  }

  // optional uint32 radiant_series_wins = 47;
  if (has_radiant_series_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->radiant_series_wins(), output);
  }

  // optional uint32 dire_series_wins = 48;
  if (has_dire_series_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->dire_series_wins(), output);
  }

  // optional uint32 loot_generated = 49;
  if (has_loot_generated()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->loot_generated(), output);
  }

  // optional uint32 loot_awarded = 50;
  if (has_loot_awarded()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->loot_awarded(), output);
  }

  // optional bool allchat = 51 [default = false];
  if (has_allchat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(51, this->allchat(), output);
  }

  // optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
  if (has_dota_tv_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      53, this->dota_tv_delay(), output);
  }

  // optional string custom_game_mode = 54;
  if (has_custom_game_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_game_mode().data(), this->custom_game_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "custom_game_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      54, this->custom_game_mode(), output);
  }

  // optional string custom_map_name = 55;
  if (has_custom_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_map_name().data(), this->custom_map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "custom_map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      55, this->custom_map_name(), output);
  }

  // optional uint32 custom_difficulty = 56;
  if (has_custom_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->custom_difficulty(), output);
  }

  // optional bool lan = 57;
  if (has_lan()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(57, this->lan(), output);
  }

  // repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
  for (int i = 0; i < this->broadcast_channel_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, this->broadcast_channel_info(i), output);
  }

  // optional uint32 first_leaver_accountid = 59;
  if (has_first_leaver_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(59, this->first_leaver_accountid(), output);
  }

  // optional uint32 series_id = 60;
  if (has_series_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->series_id(), output);
  }

  // optional bool low_priority = 61;
  if (has_low_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(61, this->low_priority(), output);
  }

  // repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
  for (int i = 0; i < this->extra_messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->extra_messages(i), output);
  }

  // optional .CDOTASaveGame save_game = 63;
  if (has_save_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, this->save_game(), output);
  }

  // optional bool first_blood_happened = 65;
  if (has_first_blood_happened()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(65, this->first_blood_happened(), output);
  }

  // optional bool mass_disconnect = 67;
  if (has_mass_disconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(67, this->mass_disconnect(), output);
  }

  // optional uint64 custom_game_id = 68;
  if (has_custom_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(68, this->custom_game_id(), output);
  }

  // repeated .EEvent active_ingame_events = 69;
  for (int i = 0; i < this->active_ingame_events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      69, this->active_ingame_events(i), output);
  }

  // optional .EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
  if (has_match_outcome()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      70, this->match_outcome(), output);
  }

  // optional uint32 custom_min_players = 71;
  if (has_custom_min_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(71, this->custom_min_players(), output);
  }

  // optional uint32 custom_max_players = 72;
  if (has_custom_max_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(72, this->custom_max_players(), output);
  }

  // optional .PartnerAccountType partner_type = 73 [default = PARTNER_NONE];
  if (has_partner_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      73, this->partner_type(), output);
  }

  // optional uint32 lan_host_ping_to_server_region = 74;
  if (has_lan_host_ping_to_server_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(74, this->lan_host_ping_to_server_region(), output);
  }

  // optional .DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
  if (has_visibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      75, this->visibility(), output);
  }

  // optional fixed64 custom_game_crc = 76;
  if (has_custom_game_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(76, this->custom_game_crc(), output);
  }

  // optional bool custom_game_auto_created_lobby = 77;
  if (has_custom_game_auto_created_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(77, this->custom_game_auto_created_lobby(), output);
  }

  // optional uint32 league_series_id = 78;
  if (has_league_series_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(78, this->league_series_id(), output);
  }

  // optional uint32 league_game_id = 79;
  if (has_league_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(79, this->league_game_id(), output);
  }

  // optional fixed32 custom_game_timestamp = 80;
  if (has_custom_game_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(80, this->custom_game_timestamp(), output);
  }

  // repeated uint64 previous_series_matches = 81;
  for (int i = 0; i < this->previous_series_matches_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      81, this->previous_series_matches(i), output);
  }

  // optional uint64 previous_match_override = 82;
  if (has_previous_match_override()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(82, this->previous_match_override(), output);
  }

  // optional bool custom_game_uses_account_records = 83;
  if (has_custom_game_uses_account_records()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(83, this->custom_game_uses_account_records(), output);
  }

  // optional uint32 league_selection_priority_team = 84;
  if (has_league_selection_priority_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(84, this->league_selection_priority_team(), output);
  }

  // optional .SelectionPriorityType league_selection_priority_choice = 85 [default = UNDEFINED];
  if (has_league_selection_priority_choice()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      85, this->league_selection_priority_choice(), output);
  }

  // optional .SelectionPriorityType league_non_selection_priority_choice = 86 [default = UNDEFINED];
  if (has_league_non_selection_priority_choice()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      86, this->league_non_selection_priority_choice(), output);
  }

  // optional uint32 game_start_time = 87;
  if (has_game_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(87, this->game_start_time(), output);
  }

  // optional .LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
  if (has_pause_setting()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      88, this->pause_setting(), output);
  }

  // optional uint32 lobby_mvp_account_id = 89;
  if (has_lobby_mvp_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(89, this->lobby_mvp_account_id(), output);
  }

  // optional uint32 weekend_tourney_division_id = 90;
  if (has_weekend_tourney_division_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(90, this->weekend_tourney_division_id(), output);
  }

  // optional uint32 weekend_tourney_skill_level = 91;
  if (has_weekend_tourney_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(91, this->weekend_tourney_skill_level(), output);
  }

  // optional uint32 weekend_tourney_bracket_round = 92;
  if (has_weekend_tourney_bracket_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(92, this->weekend_tourney_bracket_round(), output);
  }

  // optional .DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
  if (has_bot_difficulty_dire()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      93, this->bot_difficulty_dire(), output);
  }

  // optional uint64 bot_radiant = 94;
  if (has_bot_radiant()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(94, this->bot_radiant(), output);
  }

  // optional uint64 bot_dire = 95;
  if (has_bot_dire()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(95, this->bot_dire(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSODOTALobby)
}

::google::protobuf::uint8* CSODOTALobby::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTALobby)
  // optional uint64 lobby_id = 1;
  if (has_lobby_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lobby_id(), target);
  }

  // repeated .CDOTALobbyMember members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->members(i), target);
  }

  // optional uint32 game_mode = 3;
  if (has_game_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_mode(), target);
  }

  // optional .CSODOTALobby.State state = 4 [default = UI];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  // optional string connect = 5;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connect().data(), this->connect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "connect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->connect(), target);
  }

  // optional fixed64 server_id = 6 [default = 0];
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->server_id(), target);
  }

  // repeated .CDOTALobbyMember left_members = 7;
  for (int i = 0; i < this->left_members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->left_members(i), target);
  }

  // repeated fixed64 pending_invites = 10;
  for (int i = 0; i < this->pending_invites_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(10, this->pending_invites(i), target);
  }

  // optional fixed64 leader_id = 11;
  if (has_leader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->leader_id(), target);
  }

  // optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
  if (has_lobby_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->lobby_type(), target);
  }

  // optional bool allow_cheats = 13;
  if (has_allow_cheats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->allow_cheats(), target);
  }

  // optional bool fill_with_bots = 14;
  if (has_fill_with_bots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->fill_with_bots(), target);
  }

  // optional bool intro_mode = 15;
  if (has_intro_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->intro_mode(), target);
  }

  // optional string game_name = 16;
  if (has_game_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->game_name(), target);
  }

  // repeated .CLobbyTeamDetails team_details = 17;
  for (int i = 0; i < this->team_details_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->team_details(i), target);
  }

  // optional uint32 tutorial_lesson = 18;
  if (has_tutorial_lesson()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->tutorial_lesson(), target);
  }

  // optional uint32 tournament_id = 19;
  if (has_tournament_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->tournament_id(), target);
  }

  // optional uint32 tournament_game_id = 20;
  if (has_tournament_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->tournament_game_id(), target);
  }

  // optional uint32 server_region = 21 [default = 0];
  if (has_server_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->server_region(), target);
  }

  // optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
  if (has_game_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->game_state(), target);
  }

  // optional uint32 num_spectators = 23;
  if (has_num_spectators()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->num_spectators(), target);
  }

  // optional uint32 matchgroup = 25;
  if (has_matchgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->matchgroup(), target);
  }

  // optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
  if (has_cm_pick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      28, this->cm_pick(), target);
  }

  // optional uint64 match_id = 30;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->match_id(), target);
  }

  // optional bool allow_spectating = 31 [default = true];
  if (has_allow_spectating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->allow_spectating(), target);
  }

  // optional .DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
  if (has_bot_difficulty_radiant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      36, this->bot_difficulty_radiant(), target);
  }

  // optional .DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
  if (has_game_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      37, this->game_version(), target);
  }

  // repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
  for (int i = 0; i < this->timed_reward_details_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->timed_reward_details(i), target);
  }

  // optional string pass_key = 39;
  if (has_pass_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pass_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->pass_key(), target);
  }

  // optional uint32 leagueid = 42;
  if (has_leagueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->leagueid(), target);
  }

  // optional uint32 penalty_level_radiant = 43 [default = 0];
  if (has_penalty_level_radiant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->penalty_level_radiant(), target);
  }

  // optional uint32 penalty_level_dire = 44 [default = 0];
  if (has_penalty_level_dire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->penalty_level_dire(), target);
  }

  // optional uint32 load_game_id = 45;
  if (has_load_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->load_game_id(), target);
  }

  // optional uint32 series_type = 46;
  if (has_series_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->series_type(), target);
  }

  // optional uint32 radiant_series_wins = 47;
  if (has_radiant_series_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->radiant_series_wins(), target);
  }

  // optional uint32 dire_series_wins = 48;
  if (has_dire_series_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->dire_series_wins(), target);
  }

  // optional uint32 loot_generated = 49;
  if (has_loot_generated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->loot_generated(), target);
  }

  // optional uint32 loot_awarded = 50;
  if (has_loot_awarded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->loot_awarded(), target);
  }

  // optional bool allchat = 51 [default = false];
  if (has_allchat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(51, this->allchat(), target);
  }

  // optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
  if (has_dota_tv_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      53, this->dota_tv_delay(), target);
  }

  // optional string custom_game_mode = 54;
  if (has_custom_game_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_game_mode().data(), this->custom_game_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "custom_game_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        54, this->custom_game_mode(), target);
  }

  // optional string custom_map_name = 55;
  if (has_custom_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_map_name().data(), this->custom_map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "custom_map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        55, this->custom_map_name(), target);
  }

  // optional uint32 custom_difficulty = 56;
  if (has_custom_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->custom_difficulty(), target);
  }

  // optional bool lan = 57;
  if (has_lan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(57, this->lan(), target);
  }

  // repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
  for (int i = 0; i < this->broadcast_channel_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        58, this->broadcast_channel_info(i), target);
  }

  // optional uint32 first_leaver_accountid = 59;
  if (has_first_leaver_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(59, this->first_leaver_accountid(), target);
  }

  // optional uint32 series_id = 60;
  if (has_series_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->series_id(), target);
  }

  // optional bool low_priority = 61;
  if (has_low_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(61, this->low_priority(), target);
  }

  // repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
  for (int i = 0; i < this->extra_messages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, this->extra_messages(i), target);
  }

  // optional .CDOTASaveGame save_game = 63;
  if (has_save_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        63, this->save_game(), target);
  }

  // optional bool first_blood_happened = 65;
  if (has_first_blood_happened()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(65, this->first_blood_happened(), target);
  }

  // optional bool mass_disconnect = 67;
  if (has_mass_disconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(67, this->mass_disconnect(), target);
  }

  // optional uint64 custom_game_id = 68;
  if (has_custom_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(68, this->custom_game_id(), target);
  }

  // repeated .EEvent active_ingame_events = 69;
  for (int i = 0; i < this->active_ingame_events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      69, this->active_ingame_events(i), target);
  }

  // optional .EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
  if (has_match_outcome()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      70, this->match_outcome(), target);
  }

  // optional uint32 custom_min_players = 71;
  if (has_custom_min_players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(71, this->custom_min_players(), target);
  }

  // optional uint32 custom_max_players = 72;
  if (has_custom_max_players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(72, this->custom_max_players(), target);
  }

  // optional .PartnerAccountType partner_type = 73 [default = PARTNER_NONE];
  if (has_partner_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      73, this->partner_type(), target);
  }

  // optional uint32 lan_host_ping_to_server_region = 74;
  if (has_lan_host_ping_to_server_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(74, this->lan_host_ping_to_server_region(), target);
  }

  // optional .DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
  if (has_visibility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      75, this->visibility(), target);
  }

  // optional fixed64 custom_game_crc = 76;
  if (has_custom_game_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(76, this->custom_game_crc(), target);
  }

  // optional bool custom_game_auto_created_lobby = 77;
  if (has_custom_game_auto_created_lobby()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(77, this->custom_game_auto_created_lobby(), target);
  }

  // optional uint32 league_series_id = 78;
  if (has_league_series_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(78, this->league_series_id(), target);
  }

  // optional uint32 league_game_id = 79;
  if (has_league_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(79, this->league_game_id(), target);
  }

  // optional fixed32 custom_game_timestamp = 80;
  if (has_custom_game_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(80, this->custom_game_timestamp(), target);
  }

  // repeated uint64 previous_series_matches = 81;
  for (int i = 0; i < this->previous_series_matches_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(81, this->previous_series_matches(i), target);
  }

  // optional uint64 previous_match_override = 82;
  if (has_previous_match_override()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(82, this->previous_match_override(), target);
  }

  // optional bool custom_game_uses_account_records = 83;
  if (has_custom_game_uses_account_records()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(83, this->custom_game_uses_account_records(), target);
  }

  // optional uint32 league_selection_priority_team = 84;
  if (has_league_selection_priority_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(84, this->league_selection_priority_team(), target);
  }

  // optional .SelectionPriorityType league_selection_priority_choice = 85 [default = UNDEFINED];
  if (has_league_selection_priority_choice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      85, this->league_selection_priority_choice(), target);
  }

  // optional .SelectionPriorityType league_non_selection_priority_choice = 86 [default = UNDEFINED];
  if (has_league_non_selection_priority_choice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      86, this->league_non_selection_priority_choice(), target);
  }

  // optional uint32 game_start_time = 87;
  if (has_game_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(87, this->game_start_time(), target);
  }

  // optional .LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
  if (has_pause_setting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      88, this->pause_setting(), target);
  }

  // optional uint32 lobby_mvp_account_id = 89;
  if (has_lobby_mvp_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(89, this->lobby_mvp_account_id(), target);
  }

  // optional uint32 weekend_tourney_division_id = 90;
  if (has_weekend_tourney_division_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(90, this->weekend_tourney_division_id(), target);
  }

  // optional uint32 weekend_tourney_skill_level = 91;
  if (has_weekend_tourney_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(91, this->weekend_tourney_skill_level(), target);
  }

  // optional uint32 weekend_tourney_bracket_round = 92;
  if (has_weekend_tourney_bracket_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(92, this->weekend_tourney_bracket_round(), target);
  }

  // optional .DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
  if (has_bot_difficulty_dire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      93, this->bot_difficulty_dire(), target);
  }

  // optional uint64 bot_radiant = 94;
  if (has_bot_radiant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(94, this->bot_radiant(), target);
  }

  // optional uint64 bot_dire = 95;
  if (has_bot_dire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(95, this->bot_dire(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTALobby)
  return target;
}

int CSODOTALobby::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 lobby_id = 1;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

    // optional fixed64 leader_id = 11;
    if (has_leader_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 server_id = 6 [default = 0];
    if (has_server_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 game_mode = 3;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

    // optional .CSODOTALobby.State state = 4 [default = UI];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string connect = 5;
    if (has_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connect());
    }

    // optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
    if (has_lobby_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lobby_type());
    }

    // optional bool allow_cheats = 13;
    if (has_allow_cheats()) {
      total_size += 1 + 1;
    }

    // optional bool fill_with_bots = 14;
    if (has_fill_with_bots()) {
      total_size += 1 + 1;
    }

    // optional bool intro_mode = 15;
    if (has_intro_mode()) {
      total_size += 1 + 1;
    }

    // optional string game_name = 16;
    if (has_game_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_name());
    }

    // optional uint32 tutorial_lesson = 18;
    if (has_tutorial_lesson()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tutorial_lesson());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 tournament_id = 19;
    if (has_tournament_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 tournament_game_id = 20;
    if (has_tournament_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_game_id());
    }

    // optional uint32 server_region = 21 [default = 0];
    if (has_server_region()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

    // optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
    if (has_game_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_state());
    }

    // optional uint32 num_spectators = 23;
    if (has_num_spectators()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_spectators());
    }

    // optional uint32 matchgroup = 25;
    if (has_matchgroup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchgroup());
    }

    // optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
    if (has_cm_pick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cm_pick());
    }

    // optional uint64 match_id = 30;
    if (has_match_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool allow_spectating = 31 [default = true];
    if (has_allow_spectating()) {
      total_size += 2 + 1;
    }

    // optional .DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
    if (has_bot_difficulty_radiant()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty_radiant());
    }

    // optional .DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
    if (has_game_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_version());
    }

    // optional string pass_key = 39;
    if (has_pass_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass_key());
    }

    // optional uint32 leagueid = 42;
    if (has_leagueid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leagueid());
    }

    // optional uint32 penalty_level_radiant = 43 [default = 0];
    if (has_penalty_level_radiant()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penalty_level_radiant());
    }

    // optional uint32 penalty_level_dire = 44 [default = 0];
    if (has_penalty_level_dire()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penalty_level_dire());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 load_game_id = 45;
    if (has_load_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->load_game_id());
    }

    // optional uint32 series_type = 46;
    if (has_series_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

    // optional uint32 radiant_series_wins = 47;
    if (has_radiant_series_wins()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_series_wins());
    }

    // optional uint32 dire_series_wins = 48;
    if (has_dire_series_wins()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_series_wins());
    }

    // optional uint32 loot_generated = 49;
    if (has_loot_generated()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loot_generated());
    }

    // optional uint32 loot_awarded = 50;
    if (has_loot_awarded()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loot_awarded());
    }

    // optional bool allchat = 51 [default = false];
    if (has_allchat()) {
      total_size += 2 + 1;
    }

    // optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
    if (has_dota_tv_delay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dota_tv_delay());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional string custom_game_mode = 54;
    if (has_custom_game_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_game_mode());
    }

    // optional string custom_map_name = 55;
    if (has_custom_map_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_map_name());
    }

    // optional uint32 custom_difficulty = 56;
    if (has_custom_difficulty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_difficulty());
    }

    // optional bool lan = 57;
    if (has_lan()) {
      total_size += 2 + 1;
    }

    // optional uint32 first_leaver_accountid = 59;
    if (has_first_leaver_accountid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_leaver_accountid());
    }

    // optional uint32 series_id = 60;
    if (has_series_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_id());
    }

    // optional bool low_priority = 61;
    if (has_low_priority()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[49 / 32] & (0xffu << (49 % 32))) {
    // optional .CDOTASaveGame save_game = 63;
    if (has_save_game()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->save_game());
    }

    // optional bool first_blood_happened = 65;
    if (has_first_blood_happened()) {
      total_size += 2 + 1;
    }

    // optional .EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
    if (has_match_outcome()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_outcome());
    }

    // optional bool mass_disconnect = 67;
    if (has_mass_disconnect()) {
      total_size += 2 + 1;
    }

    // optional uint64 custom_game_id = 68;
    if (has_custom_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

    // optional uint32 custom_min_players = 71;
    if (has_custom_min_players()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_min_players());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional uint32 custom_max_players = 72;
    if (has_custom_max_players()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_max_players());
    }

    // optional .PartnerAccountType partner_type = 73 [default = PARTNER_NONE];
    if (has_partner_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->partner_type());
    }

    // optional uint32 lan_host_ping_to_server_region = 74;
    if (has_lan_host_ping_to_server_region()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lan_host_ping_to_server_region());
    }

    // optional .DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
    if (has_visibility()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->visibility());
    }

    // optional fixed64 custom_game_crc = 76;
    if (has_custom_game_crc()) {
      total_size += 2 + 8;
    }

    // optional bool custom_game_auto_created_lobby = 77;
    if (has_custom_game_auto_created_lobby()) {
      total_size += 2 + 1;
    }

    // optional uint32 league_series_id = 78;
    if (has_league_series_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_series_id());
    }

    // optional uint32 league_game_id = 79;
    if (has_league_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_game_id());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional fixed32 custom_game_timestamp = 80;
    if (has_custom_game_timestamp()) {
      total_size += 2 + 4;
    }

    // optional uint64 previous_match_override = 82;
    if (has_previous_match_override()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->previous_match_override());
    }

    // optional bool custom_game_uses_account_records = 83;
    if (has_custom_game_uses_account_records()) {
      total_size += 2 + 1;
    }

    // optional uint32 league_selection_priority_team = 84;
    if (has_league_selection_priority_team()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_selection_priority_team());
    }

    // optional .SelectionPriorityType league_selection_priority_choice = 85 [default = UNDEFINED];
    if (has_league_selection_priority_choice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->league_selection_priority_choice());
    }

    // optional .SelectionPriorityType league_non_selection_priority_choice = 86 [default = UNDEFINED];
    if (has_league_non_selection_priority_choice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->league_non_selection_priority_choice());
    }

    // optional uint32 game_start_time = 87;
    if (has_game_start_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_start_time());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional .LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
    if (has_pause_setting()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pause_setting());
    }

    // optional uint32 lobby_mvp_account_id = 89;
    if (has_lobby_mvp_account_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_mvp_account_id());
    }

    // optional uint32 weekend_tourney_division_id = 90;
    if (has_weekend_tourney_division_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_division_id());
    }

    // optional uint32 weekend_tourney_skill_level = 91;
    if (has_weekend_tourney_skill_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_skill_level());
    }

    // optional uint32 weekend_tourney_bracket_round = 92;
    if (has_weekend_tourney_bracket_round()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_bracket_round());
    }

    // optional .DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
    if (has_bot_difficulty_dire()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty_dire());
    }

    // optional uint64 bot_radiant = 94;
    if (has_bot_radiant()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bot_radiant());
    }

    // optional uint64 bot_dire = 95;
    if (has_bot_dire()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bot_dire());
    }

  }
  // repeated .CDOTALobbyMember members = 2;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  // repeated .CDOTALobbyMember left_members = 7;
  total_size += 1 * this->left_members_size();
  for (int i = 0; i < this->left_members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->left_members(i));
  }

  // repeated fixed64 pending_invites = 10;
  {
    int data_size = 0;
    data_size = 8 * this->pending_invites_size();
    total_size += 1 * this->pending_invites_size() + data_size;
  }

  // repeated .CLobbyTeamDetails team_details = 17;
  total_size += 2 * this->team_details_size();
  for (int i = 0; i < this->team_details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->team_details(i));
  }

  // repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
  total_size += 2 * this->timed_reward_details_size();
  for (int i = 0; i < this->timed_reward_details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timed_reward_details(i));
  }

  // repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
  total_size += 2 * this->broadcast_channel_info_size();
  for (int i = 0; i < this->broadcast_channel_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->broadcast_channel_info(i));
  }

  // repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
  total_size += 2 * this->extra_messages_size();
  for (int i = 0; i < this->extra_messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extra_messages(i));
  }

  // repeated .EEvent active_ingame_events = 69;
  {
    int data_size = 0;
    for (int i = 0; i < this->active_ingame_events_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->active_ingame_events(i));
    }
    total_size += 2 * this->active_ingame_events_size() + data_size;
  }

  // repeated uint64 previous_series_matches = 81;
  {
    int data_size = 0;
    for (int i = 0; i < this->previous_series_matches_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->previous_series_matches(i));
    }
    total_size += 2 * this->previous_series_matches_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTALobby::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSODOTALobby* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSODOTALobby*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTALobby::MergeFrom(const CSODOTALobby& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  left_members_.MergeFrom(from.left_members_);
  pending_invites_.MergeFrom(from.pending_invites_);
  team_details_.MergeFrom(from.team_details_);
  timed_reward_details_.MergeFrom(from.timed_reward_details_);
  broadcast_channel_info_.MergeFrom(from.broadcast_channel_info_);
  extra_messages_.MergeFrom(from.extra_messages_);
  active_ingame_events_.MergeFrom(from.active_ingame_events_);
  previous_series_matches_.MergeFrom(from.previous_series_matches_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lobby_id()) {
      set_lobby_id(from.lobby_id());
    }
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_game_mode()) {
      set_game_mode(from.game_mode());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_connect()) {
      set_connect(from.connect());
    }
    if (from.has_lobby_type()) {
      set_lobby_type(from.lobby_type());
    }
    if (from.has_allow_cheats()) {
      set_allow_cheats(from.allow_cheats());
    }
    if (from.has_fill_with_bots()) {
      set_fill_with_bots(from.fill_with_bots());
    }
    if (from.has_intro_mode()) {
      set_intro_mode(from.intro_mode());
    }
    if (from.has_game_name()) {
      set_game_name(from.game_name());
    }
    if (from.has_tutorial_lesson()) {
      set_tutorial_lesson(from.tutorial_lesson());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tournament_id()) {
      set_tournament_id(from.tournament_id());
    }
    if (from.has_tournament_game_id()) {
      set_tournament_game_id(from.tournament_game_id());
    }
    if (from.has_server_region()) {
      set_server_region(from.server_region());
    }
    if (from.has_game_state()) {
      set_game_state(from.game_state());
    }
    if (from.has_num_spectators()) {
      set_num_spectators(from.num_spectators());
    }
    if (from.has_matchgroup()) {
      set_matchgroup(from.matchgroup());
    }
    if (from.has_cm_pick()) {
      set_cm_pick(from.cm_pick());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_allow_spectating()) {
      set_allow_spectating(from.allow_spectating());
    }
    if (from.has_bot_difficulty_radiant()) {
      set_bot_difficulty_radiant(from.bot_difficulty_radiant());
    }
    if (from.has_game_version()) {
      set_game_version(from.game_version());
    }
    if (from.has_pass_key()) {
      set_pass_key(from.pass_key());
    }
    if (from.has_leagueid()) {
      set_leagueid(from.leagueid());
    }
    if (from.has_penalty_level_radiant()) {
      set_penalty_level_radiant(from.penalty_level_radiant());
    }
    if (from.has_penalty_level_dire()) {
      set_penalty_level_dire(from.penalty_level_dire());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_load_game_id()) {
      set_load_game_id(from.load_game_id());
    }
    if (from.has_series_type()) {
      set_series_type(from.series_type());
    }
    if (from.has_radiant_series_wins()) {
      set_radiant_series_wins(from.radiant_series_wins());
    }
    if (from.has_dire_series_wins()) {
      set_dire_series_wins(from.dire_series_wins());
    }
    if (from.has_loot_generated()) {
      set_loot_generated(from.loot_generated());
    }
    if (from.has_loot_awarded()) {
      set_loot_awarded(from.loot_awarded());
    }
    if (from.has_allchat()) {
      set_allchat(from.allchat());
    }
    if (from.has_dota_tv_delay()) {
      set_dota_tv_delay(from.dota_tv_delay());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_custom_game_mode()) {
      set_custom_game_mode(from.custom_game_mode());
    }
    if (from.has_custom_map_name()) {
      set_custom_map_name(from.custom_map_name());
    }
    if (from.has_custom_difficulty()) {
      set_custom_difficulty(from.custom_difficulty());
    }
    if (from.has_lan()) {
      set_lan(from.lan());
    }
    if (from.has_first_leaver_accountid()) {
      set_first_leaver_accountid(from.first_leaver_accountid());
    }
    if (from.has_series_id()) {
      set_series_id(from.series_id());
    }
    if (from.has_low_priority()) {
      set_low_priority(from.low_priority());
    }
  }
  if (from._has_bits_[49 / 32] & (0xffu << (49 % 32))) {
    if (from.has_save_game()) {
      mutable_save_game()->::CDOTASaveGame::MergeFrom(from.save_game());
    }
    if (from.has_first_blood_happened()) {
      set_first_blood_happened(from.first_blood_happened());
    }
    if (from.has_match_outcome()) {
      set_match_outcome(from.match_outcome());
    }
    if (from.has_mass_disconnect()) {
      set_mass_disconnect(from.mass_disconnect());
    }
    if (from.has_custom_game_id()) {
      set_custom_game_id(from.custom_game_id());
    }
    if (from.has_custom_min_players()) {
      set_custom_min_players(from.custom_min_players());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_custom_max_players()) {
      set_custom_max_players(from.custom_max_players());
    }
    if (from.has_partner_type()) {
      set_partner_type(from.partner_type());
    }
    if (from.has_lan_host_ping_to_server_region()) {
      set_lan_host_ping_to_server_region(from.lan_host_ping_to_server_region());
    }
    if (from.has_visibility()) {
      set_visibility(from.visibility());
    }
    if (from.has_custom_game_crc()) {
      set_custom_game_crc(from.custom_game_crc());
    }
    if (from.has_custom_game_auto_created_lobby()) {
      set_custom_game_auto_created_lobby(from.custom_game_auto_created_lobby());
    }
    if (from.has_league_series_id()) {
      set_league_series_id(from.league_series_id());
    }
    if (from.has_league_game_id()) {
      set_league_game_id(from.league_game_id());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_custom_game_timestamp()) {
      set_custom_game_timestamp(from.custom_game_timestamp());
    }
    if (from.has_previous_match_override()) {
      set_previous_match_override(from.previous_match_override());
    }
    if (from.has_custom_game_uses_account_records()) {
      set_custom_game_uses_account_records(from.custom_game_uses_account_records());
    }
    if (from.has_league_selection_priority_team()) {
      set_league_selection_priority_team(from.league_selection_priority_team());
    }
    if (from.has_league_selection_priority_choice()) {
      set_league_selection_priority_choice(from.league_selection_priority_choice());
    }
    if (from.has_league_non_selection_priority_choice()) {
      set_league_non_selection_priority_choice(from.league_non_selection_priority_choice());
    }
    if (from.has_game_start_time()) {
      set_game_start_time(from.game_start_time());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_pause_setting()) {
      set_pause_setting(from.pause_setting());
    }
    if (from.has_lobby_mvp_account_id()) {
      set_lobby_mvp_account_id(from.lobby_mvp_account_id());
    }
    if (from.has_weekend_tourney_division_id()) {
      set_weekend_tourney_division_id(from.weekend_tourney_division_id());
    }
    if (from.has_weekend_tourney_skill_level()) {
      set_weekend_tourney_skill_level(from.weekend_tourney_skill_level());
    }
    if (from.has_weekend_tourney_bracket_round()) {
      set_weekend_tourney_bracket_round(from.weekend_tourney_bracket_round());
    }
    if (from.has_bot_difficulty_dire()) {
      set_bot_difficulty_dire(from.bot_difficulty_dire());
    }
    if (from.has_bot_radiant()) {
      set_bot_radiant(from.bot_radiant());
    }
    if (from.has_bot_dire()) {
      set_bot_dire(from.bot_dire());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSODOTALobby::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTALobby::CopyFrom(const CSODOTALobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobby::IsInitialized() const {

  return true;
}

void CSODOTALobby::Swap(CSODOTALobby* other) {
  if (other != this) {
    std::swap(lobby_id_, other->lobby_id_);
    members_.Swap(&other->members_);
    left_members_.Swap(&other->left_members_);
    std::swap(leader_id_, other->leader_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(game_mode_, other->game_mode_);
    pending_invites_.Swap(&other->pending_invites_);
    std::swap(state_, other->state_);
    std::swap(connect_, other->connect_);
    std::swap(lobby_type_, other->lobby_type_);
    std::swap(allow_cheats_, other->allow_cheats_);
    std::swap(fill_with_bots_, other->fill_with_bots_);
    std::swap(intro_mode_, other->intro_mode_);
    std::swap(game_name_, other->game_name_);
    team_details_.Swap(&other->team_details_);
    std::swap(tutorial_lesson_, other->tutorial_lesson_);
    std::swap(tournament_id_, other->tournament_id_);
    std::swap(tournament_game_id_, other->tournament_game_id_);
    std::swap(server_region_, other->server_region_);
    std::swap(game_state_, other->game_state_);
    std::swap(num_spectators_, other->num_spectators_);
    std::swap(matchgroup_, other->matchgroup_);
    std::swap(cm_pick_, other->cm_pick_);
    std::swap(match_id_, other->match_id_);
    std::swap(allow_spectating_, other->allow_spectating_);
    std::swap(bot_difficulty_radiant_, other->bot_difficulty_radiant_);
    std::swap(game_version_, other->game_version_);
    timed_reward_details_.Swap(&other->timed_reward_details_);
    std::swap(pass_key_, other->pass_key_);
    std::swap(leagueid_, other->leagueid_);
    std::swap(penalty_level_radiant_, other->penalty_level_radiant_);
    std::swap(penalty_level_dire_, other->penalty_level_dire_);
    std::swap(load_game_id_, other->load_game_id_);
    std::swap(series_type_, other->series_type_);
    std::swap(radiant_series_wins_, other->radiant_series_wins_);
    std::swap(dire_series_wins_, other->dire_series_wins_);
    std::swap(loot_generated_, other->loot_generated_);
    std::swap(loot_awarded_, other->loot_awarded_);
    std::swap(allchat_, other->allchat_);
    std::swap(dota_tv_delay_, other->dota_tv_delay_);
    std::swap(custom_game_mode_, other->custom_game_mode_);
    std::swap(custom_map_name_, other->custom_map_name_);
    std::swap(custom_difficulty_, other->custom_difficulty_);
    std::swap(lan_, other->lan_);
    broadcast_channel_info_.Swap(&other->broadcast_channel_info_);
    std::swap(first_leaver_accountid_, other->first_leaver_accountid_);
    std::swap(series_id_, other->series_id_);
    std::swap(low_priority_, other->low_priority_);
    extra_messages_.Swap(&other->extra_messages_);
    std::swap(save_game_, other->save_game_);
    std::swap(first_blood_happened_, other->first_blood_happened_);
    std::swap(match_outcome_, other->match_outcome_);
    std::swap(mass_disconnect_, other->mass_disconnect_);
    std::swap(custom_game_id_, other->custom_game_id_);
    active_ingame_events_.Swap(&other->active_ingame_events_);
    std::swap(custom_min_players_, other->custom_min_players_);
    std::swap(custom_max_players_, other->custom_max_players_);
    std::swap(partner_type_, other->partner_type_);
    std::swap(lan_host_ping_to_server_region_, other->lan_host_ping_to_server_region_);
    std::swap(visibility_, other->visibility_);
    std::swap(custom_game_crc_, other->custom_game_crc_);
    std::swap(custom_game_auto_created_lobby_, other->custom_game_auto_created_lobby_);
    std::swap(league_series_id_, other->league_series_id_);
    std::swap(league_game_id_, other->league_game_id_);
    std::swap(custom_game_timestamp_, other->custom_game_timestamp_);
    previous_series_matches_.Swap(&other->previous_series_matches_);
    std::swap(previous_match_override_, other->previous_match_override_);
    std::swap(custom_game_uses_account_records_, other->custom_game_uses_account_records_);
    std::swap(league_selection_priority_team_, other->league_selection_priority_team_);
    std::swap(league_selection_priority_choice_, other->league_selection_priority_choice_);
    std::swap(league_non_selection_priority_choice_, other->league_non_selection_priority_choice_);
    std::swap(game_start_time_, other->game_start_time_);
    std::swap(pause_setting_, other->pause_setting_);
    std::swap(lobby_mvp_account_id_, other->lobby_mvp_account_id_);
    std::swap(weekend_tourney_division_id_, other->weekend_tourney_division_id_);
    std::swap(weekend_tourney_skill_level_, other->weekend_tourney_skill_level_);
    std::swap(weekend_tourney_bracket_round_, other->weekend_tourney_bracket_round_);
    std::swap(bot_difficulty_dire_, other->bot_difficulty_dire_);
    std::swap(bot_radiant_, other->bot_radiant_);
    std::swap(bot_dire_, other->bot_dire_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSODOTALobby::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTALobby_descriptor_;
  metadata.reflection = CSODOTALobby_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgLobbyPlaytestDetails::kJsonFieldNumber;
#endif  // !_MSC_VER

CMsgLobbyPlaytestDetails::CMsgLobbyPlaytestDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgLobbyPlaytestDetails)
}

void CMsgLobbyPlaytestDetails::InitAsDefaultInstance() {
}

CMsgLobbyPlaytestDetails::CMsgLobbyPlaytestDetails(const CMsgLobbyPlaytestDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyPlaytestDetails)
}

void CMsgLobbyPlaytestDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLobbyPlaytestDetails::~CMsgLobbyPlaytestDetails() {
  // @@protoc_insertion_point(destructor:CMsgLobbyPlaytestDetails)
  SharedDtor();
}

void CMsgLobbyPlaytestDetails::SharedDtor() {
  if (json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_;
  }
  if (this != default_instance_) {
  }
}

void CMsgLobbyPlaytestDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLobbyPlaytestDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLobbyPlaytestDetails_descriptor_;
}

const CMsgLobbyPlaytestDetails& CMsgLobbyPlaytestDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgLobbyPlaytestDetails* CMsgLobbyPlaytestDetails::default_instance_ = NULL;

CMsgLobbyPlaytestDetails* CMsgLobbyPlaytestDetails::New() const {
  return new CMsgLobbyPlaytestDetails;
}

void CMsgLobbyPlaytestDetails::Clear() {
  if (has_json()) {
    if (json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      json_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLobbyPlaytestDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgLobbyPlaytestDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string json = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->json().data(), this->json().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "json");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgLobbyPlaytestDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgLobbyPlaytestDetails)
  return false;
#undef DO_
}

void CMsgLobbyPlaytestDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgLobbyPlaytestDetails)
  // optional string json = 1;
  if (has_json()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json().data(), this->json().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->json(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgLobbyPlaytestDetails)
}

::google::protobuf::uint8* CMsgLobbyPlaytestDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyPlaytestDetails)
  // optional string json = 1;
  if (has_json()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json().data(), this->json().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->json(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyPlaytestDetails)
  return target;
}

int CMsgLobbyPlaytestDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string json = 1;
    if (has_json()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->json());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLobbyPlaytestDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLobbyPlaytestDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLobbyPlaytestDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLobbyPlaytestDetails::MergeFrom(const CMsgLobbyPlaytestDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_json()) {
      set_json(from.json());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLobbyPlaytestDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyPlaytestDetails::CopyFrom(const CMsgLobbyPlaytestDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyPlaytestDetails::IsInitialized() const {

  return true;
}

void CMsgLobbyPlaytestDetails::Swap(CMsgLobbyPlaytestDetails* other) {
  if (other != this) {
    std::swap(json_, other->json_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLobbyPlaytestDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLobbyPlaytestDetails_descriptor_;
  metadata.reflection = CMsgLobbyPlaytestDetails_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
