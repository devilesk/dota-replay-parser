// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common_match_management.proto

#ifndef PROTOBUF_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto__INCLUDED
#define PROTOBUF_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages.pb.h"
#include "gcsdk_gcmessages.pb.h"
#include "dota_shared_enums.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();

class CSODOTAPartyMember;
class CSODOTAParty;
class CSODOTAPartyInvite;
class CSODOTAPartyInvite_PartyMember;
class CSODOTALobbyInvite;
class CSODOTALobbyInvite_LobbyMember;
class CMsgLeaverState;
class CDOTALobbyMember;
class CDOTALobbyMember_CDOTALobbyMemberXPBonus;
class CLobbyTeamDetails;
class CLobbyTimedRewardDetails;
class CLobbyBroadcastChannelInfo;
class CSODOTALobby;
class CSODOTALobby_CExtraMsg;
class CMsgLobbyPlaytestDetails;

enum CSODOTAParty_State {
  CSODOTAParty_State_UI = 0,
  CSODOTAParty_State_FINDING_MATCH = 1,
  CSODOTAParty_State_IN_MATCH = 2
};
bool CSODOTAParty_State_IsValid(int value);
const CSODOTAParty_State CSODOTAParty_State_State_MIN = CSODOTAParty_State_UI;
const CSODOTAParty_State CSODOTAParty_State_State_MAX = CSODOTAParty_State_IN_MATCH;
const int CSODOTAParty_State_State_ARRAYSIZE = CSODOTAParty_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSODOTAParty_State_descriptor();
inline const ::std::string& CSODOTAParty_State_Name(CSODOTAParty_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSODOTAParty_State_descriptor(), value);
}
inline bool CSODOTAParty_State_Parse(
    const ::std::string& name, CSODOTAParty_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSODOTAParty_State>(
    CSODOTAParty_State_descriptor(), name, value);
}
enum CSODOTALobby_State {
  CSODOTALobby_State_UI = 0,
  CSODOTALobby_State_READYUP = 4,
  CSODOTALobby_State_SERVERSETUP = 1,
  CSODOTALobby_State_RUN = 2,
  CSODOTALobby_State_POSTGAME = 3,
  CSODOTALobby_State_NOTREADY = 5,
  CSODOTALobby_State_SERVERASSIGN = 6
};
bool CSODOTALobby_State_IsValid(int value);
const CSODOTALobby_State CSODOTALobby_State_State_MIN = CSODOTALobby_State_UI;
const CSODOTALobby_State CSODOTALobby_State_State_MAX = CSODOTALobby_State_SERVERASSIGN;
const int CSODOTALobby_State_State_ARRAYSIZE = CSODOTALobby_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSODOTALobby_State_descriptor();
inline const ::std::string& CSODOTALobby_State_Name(CSODOTALobby_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSODOTALobby_State_descriptor(), value);
}
inline bool CSODOTALobby_State_Parse(
    const ::std::string& name, CSODOTALobby_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSODOTALobby_State>(
    CSODOTALobby_State_descriptor(), name, value);
}
enum CSODOTALobby_LobbyType {
  CSODOTALobby_LobbyType_INVALID = -1,
  CSODOTALobby_LobbyType_CASUAL_MATCH = 0,
  CSODOTALobby_LobbyType_PRACTICE = 1,
  CSODOTALobby_LobbyType_TOURNAMENT = 2,
  CSODOTALobby_LobbyType_COOP_BOT_MATCH = 4,
  CSODOTALobby_LobbyType_LEGACY_TEAM_MATCH = 5,
  CSODOTALobby_LobbyType_LEGACY_SOLO_QUEUE_MATCH = 6,
  CSODOTALobby_LobbyType_COMPETITIVE_MATCH = 7,
  CSODOTALobby_LobbyType_CASUAL_1V1_MATCH = 8,
  CSODOTALobby_LobbyType_WEEKEND_TOURNEY = 9,
  CSODOTALobby_LobbyType_LOCAL_BOT_MATCH = 10,
  CSODOTALobby_LobbyType_SPECTATOR = 11
};
bool CSODOTALobby_LobbyType_IsValid(int value);
const CSODOTALobby_LobbyType CSODOTALobby_LobbyType_LobbyType_MIN = CSODOTALobby_LobbyType_INVALID;
const CSODOTALobby_LobbyType CSODOTALobby_LobbyType_LobbyType_MAX = CSODOTALobby_LobbyType_SPECTATOR;
const int CSODOTALobby_LobbyType_LobbyType_ARRAYSIZE = CSODOTALobby_LobbyType_LobbyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSODOTALobby_LobbyType_descriptor();
inline const ::std::string& CSODOTALobby_LobbyType_Name(CSODOTALobby_LobbyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSODOTALobby_LobbyType_descriptor(), value);
}
inline bool CSODOTALobby_LobbyType_Parse(
    const ::std::string& name, CSODOTALobby_LobbyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSODOTALobby_LobbyType>(
    CSODOTALobby_LobbyType_descriptor(), name, value);
}
enum LobbyDotaTVDelay {
  LobbyDotaTV_10 = 0,
  LobbyDotaTV_120 = 1,
  LobbyDotaTV_300 = 2
};
bool LobbyDotaTVDelay_IsValid(int value);
const LobbyDotaTVDelay LobbyDotaTVDelay_MIN = LobbyDotaTV_10;
const LobbyDotaTVDelay LobbyDotaTVDelay_MAX = LobbyDotaTV_300;
const int LobbyDotaTVDelay_ARRAYSIZE = LobbyDotaTVDelay_MAX + 1;

const ::google::protobuf::EnumDescriptor* LobbyDotaTVDelay_descriptor();
inline const ::std::string& LobbyDotaTVDelay_Name(LobbyDotaTVDelay value) {
  return ::google::protobuf::internal::NameOfEnum(
    LobbyDotaTVDelay_descriptor(), value);
}
inline bool LobbyDotaTVDelay_Parse(
    const ::std::string& name, LobbyDotaTVDelay* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LobbyDotaTVDelay>(
    LobbyDotaTVDelay_descriptor(), name, value);
}
enum LobbyDotaPauseSetting {
  LobbyDotaPauseSetting_Unlimited = 0,
  LobbyDotaPauseSetting_Limited = 1,
  LobbyDotaPauseSetting_Disabled = 2
};
bool LobbyDotaPauseSetting_IsValid(int value);
const LobbyDotaPauseSetting LobbyDotaPauseSetting_MIN = LobbyDotaPauseSetting_Unlimited;
const LobbyDotaPauseSetting LobbyDotaPauseSetting_MAX = LobbyDotaPauseSetting_Disabled;
const int LobbyDotaPauseSetting_ARRAYSIZE = LobbyDotaPauseSetting_MAX + 1;

const ::google::protobuf::EnumDescriptor* LobbyDotaPauseSetting_descriptor();
inline const ::std::string& LobbyDotaPauseSetting_Name(LobbyDotaPauseSetting value) {
  return ::google::protobuf::internal::NameOfEnum(
    LobbyDotaPauseSetting_descriptor(), value);
}
inline bool LobbyDotaPauseSetting_Parse(
    const ::std::string& name, LobbyDotaPauseSetting* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LobbyDotaPauseSetting>(
    LobbyDotaPauseSetting_descriptor(), name, value);
}
// ===================================================================

class CSODOTAPartyMember : public ::google::protobuf::Message {
 public:
  CSODOTAPartyMember();
  virtual ~CSODOTAPartyMember();

  CSODOTAPartyMember(const CSODOTAPartyMember& from);

  inline CSODOTAPartyMember& operator=(const CSODOTAPartyMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAPartyMember& default_instance();

  void Swap(CSODOTAPartyMember* other);

  // implements Message ----------------------------------------------

  CSODOTAPartyMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTAPartyMember& from);
  void MergeFrom(const CSODOTAPartyMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
  inline bool has_partner_type() const;
  inline void clear_partner_type();
  static const int kPartnerTypeFieldNumber = 1;
  inline ::PartnerAccountType partner_type() const;
  inline void set_partner_type(::PartnerAccountType value);

  // optional bool is_coach = 2;
  inline bool has_is_coach() const;
  inline void clear_is_coach();
  static const int kIsCoachFieldNumber = 2;
  inline bool is_coach() const;
  inline void set_is_coach(bool value);

  // repeated uint32 region_ping_codes = 4 [packed = true];
  inline int region_ping_codes_size() const;
  inline void clear_region_ping_codes();
  static const int kRegionPingCodesFieldNumber = 4;
  inline ::google::protobuf::uint32 region_ping_codes(int index) const;
  inline void set_region_ping_codes(int index, ::google::protobuf::uint32 value);
  inline void add_region_ping_codes(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      region_ping_codes() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_region_ping_codes();

  // repeated uint32 region_ping_times = 5 [packed = true];
  inline int region_ping_times_size() const;
  inline void clear_region_ping_times();
  static const int kRegionPingTimesFieldNumber = 5;
  inline ::google::protobuf::uint32 region_ping_times(int index) const;
  inline void set_region_ping_times(int index, ::google::protobuf::uint32 value);
  inline void add_region_ping_times(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      region_ping_times() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_region_ping_times();

  // optional uint32 region_ping_failed_bitmask = 6;
  inline bool has_region_ping_failed_bitmask() const;
  inline void clear_region_ping_failed_bitmask();
  static const int kRegionPingFailedBitmaskFieldNumber = 6;
  inline ::google::protobuf::uint32 region_ping_failed_bitmask() const;
  inline void set_region_ping_failed_bitmask(::google::protobuf::uint32 value);

  // optional uint32 tourney_skill_level = 7;
  inline bool has_tourney_skill_level() const;
  inline void clear_tourney_skill_level();
  static const int kTourneySkillLevelFieldNumber = 7;
  inline ::google::protobuf::uint32 tourney_skill_level() const;
  inline void set_tourney_skill_level(::google::protobuf::uint32 value);

  // optional uint32 tourney_buyin = 8;
  inline bool has_tourney_buyin() const;
  inline void clear_tourney_buyin();
  static const int kTourneyBuyinFieldNumber = 8;
  inline ::google::protobuf::uint32 tourney_buyin() const;
  inline void set_tourney_buyin(::google::protobuf::uint32 value);

  // optional uint32 tourney_prevent_until = 9;
  inline bool has_tourney_prevent_until() const;
  inline void clear_tourney_prevent_until();
  static const int kTourneyPreventUntilFieldNumber = 9;
  inline ::google::protobuf::uint32 tourney_prevent_until() const;
  inline void set_tourney_prevent_until(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSODOTAPartyMember)
 private:
  inline void set_has_partner_type();
  inline void clear_has_partner_type();
  inline void set_has_is_coach();
  inline void clear_has_is_coach();
  inline void set_has_region_ping_failed_bitmask();
  inline void clear_has_region_ping_failed_bitmask();
  inline void set_has_tourney_skill_level();
  inline void clear_has_tourney_skill_level();
  inline void set_has_tourney_buyin();
  inline void clear_has_tourney_buyin();
  inline void set_has_tourney_prevent_until();
  inline void clear_has_tourney_prevent_until();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int partner_type_;
  bool is_coach_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > region_ping_codes_;
  mutable int _region_ping_codes_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > region_ping_times_;
  mutable int _region_ping_times_cached_byte_size_;
  ::google::protobuf::uint32 region_ping_failed_bitmask_;
  ::google::protobuf::uint32 tourney_skill_level_;
  ::google::protobuf::uint32 tourney_buyin_;
  ::google::protobuf::uint32 tourney_prevent_until_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CSODOTAPartyMember* default_instance_;
};
// -------------------------------------------------------------------

class CSODOTAParty : public ::google::protobuf::Message {
 public:
  CSODOTAParty();
  virtual ~CSODOTAParty();

  CSODOTAParty(const CSODOTAParty& from);

  inline CSODOTAParty& operator=(const CSODOTAParty& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAParty& default_instance();

  void Swap(CSODOTAParty* other);

  // implements Message ----------------------------------------------

  CSODOTAParty* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTAParty& from);
  void MergeFrom(const CSODOTAParty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CSODOTAParty_State State;
  static const State UI = CSODOTAParty_State_UI;
  static const State FINDING_MATCH = CSODOTAParty_State_FINDING_MATCH;
  static const State IN_MATCH = CSODOTAParty_State_IN_MATCH;
  static inline bool State_IsValid(int value) {
    return CSODOTAParty_State_IsValid(value);
  }
  static const State State_MIN =
    CSODOTAParty_State_State_MIN;
  static const State State_MAX =
    CSODOTAParty_State_State_MAX;
  static const int State_ARRAYSIZE =
    CSODOTAParty_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return CSODOTAParty_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return CSODOTAParty_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return CSODOTAParty_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 party_id = 1;
  inline bool has_party_id() const;
  inline void clear_party_id();
  static const int kPartyIdFieldNumber = 1;
  inline ::google::protobuf::uint64 party_id() const;
  inline void set_party_id(::google::protobuf::uint64 value);

  // optional fixed64 leader_id = 2;
  inline bool has_leader_id() const;
  inline void clear_leader_id();
  static const int kLeaderIdFieldNumber = 2;
  inline ::google::protobuf::uint64 leader_id() const;
  inline void set_leader_id(::google::protobuf::uint64 value);

  // repeated fixed64 member_ids = 3;
  inline int member_ids_size() const;
  inline void clear_member_ids();
  static const int kMemberIdsFieldNumber = 3;
  inline ::google::protobuf::uint64 member_ids(int index) const;
  inline void set_member_ids(int index, ::google::protobuf::uint64 value);
  inline void add_member_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      member_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_member_ids();

  // optional uint32 game_modes = 4;
  inline bool has_game_modes() const;
  inline void clear_game_modes();
  static const int kGameModesFieldNumber = 4;
  inline ::google::protobuf::uint32 game_modes() const;
  inline void set_game_modes(::google::protobuf::uint32 value);

  // optional .CSODOTAParty.State state = 6 [default = UI];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 6;
  inline ::CSODOTAParty_State state() const;
  inline void set_state(::CSODOTAParty_State value);

  // optional uint32 effective_started_matchmaking_time = 7;
  inline bool has_effective_started_matchmaking_time() const;
  inline void clear_effective_started_matchmaking_time();
  static const int kEffectiveStartedMatchmakingTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 effective_started_matchmaking_time() const;
  inline void set_effective_started_matchmaking_time(::google::protobuf::uint32 value);

  // optional uint32 raw_started_matchmaking_time = 32;
  inline bool has_raw_started_matchmaking_time() const;
  inline void clear_raw_started_matchmaking_time();
  static const int kRawStartedMatchmakingTimeFieldNumber = 32;
  inline ::google::protobuf::uint32 raw_started_matchmaking_time() const;
  inline void set_raw_started_matchmaking_time(::google::protobuf::uint32 value);

  // optional uint32 attempt_start_time = 33;
  inline bool has_attempt_start_time() const;
  inline void clear_attempt_start_time();
  static const int kAttemptStartTimeFieldNumber = 33;
  inline ::google::protobuf::uint32 attempt_start_time() const;
  inline void set_attempt_start_time(::google::protobuf::uint32 value);

  // optional uint32 attempt_num = 34;
  inline bool has_attempt_num() const;
  inline void clear_attempt_num();
  static const int kAttemptNumFieldNumber = 34;
  inline ::google::protobuf::uint32 attempt_num() const;
  inline void set_attempt_num(::google::protobuf::uint32 value);

  // optional uint32 matchgroups = 11;
  inline bool has_matchgroups() const;
  inline void clear_matchgroups();
  static const int kMatchgroupsFieldNumber = 11;
  inline ::google::protobuf::uint32 matchgroups() const;
  inline void set_matchgroups(::google::protobuf::uint32 value);

  // optional uint32 low_priority_account_id = 19;
  inline bool has_low_priority_account_id() const;
  inline void clear_low_priority_account_id();
  static const int kLowPriorityAccountIdFieldNumber = 19;
  inline ::google::protobuf::uint32 low_priority_account_id() const;
  inline void set_low_priority_account_id(::google::protobuf::uint32 value);

  // optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
  inline bool has_match_type() const;
  inline void clear_match_type();
  static const int kMatchTypeFieldNumber = 21;
  inline ::MatchType match_type() const;
  inline void set_match_type(::MatchType value);

  // optional .DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
  inline bool has_bot_difficulty() const;
  inline void clear_bot_difficulty();
  static const int kBotDifficultyFieldNumber = 22;
  inline ::DOTABotDifficulty bot_difficulty() const;
  inline void set_bot_difficulty(::DOTABotDifficulty value);

  // optional uint32 team_id = 23;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 23;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // optional string team_name = 51;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 51;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const char* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  inline void set_allocated_team_name(::std::string* team_name);

  // optional uint64 team_ui_logo = 52;
  inline bool has_team_ui_logo() const;
  inline void clear_team_ui_logo();
  static const int kTeamUiLogoFieldNumber = 52;
  inline ::google::protobuf::uint64 team_ui_logo() const;
  inline void set_team_ui_logo(::google::protobuf::uint64 value);

  // optional uint64 team_base_logo = 53;
  inline bool has_team_base_logo() const;
  inline void clear_team_base_logo();
  static const int kTeamBaseLogoFieldNumber = 53;
  inline ::google::protobuf::uint64 team_base_logo() const;
  inline void set_team_base_logo(::google::protobuf::uint64 value);

  // optional uint32 match_disabled_until_date = 24;
  inline bool has_match_disabled_until_date() const;
  inline void clear_match_disabled_until_date();
  static const int kMatchDisabledUntilDateFieldNumber = 24;
  inline ::google::protobuf::uint32 match_disabled_until_date() const;
  inline void set_match_disabled_until_date(::google::protobuf::uint32 value);

  // optional uint32 match_disabled_account_id = 25;
  inline bool has_match_disabled_account_id() const;
  inline void clear_match_disabled_account_id();
  static const int kMatchDisabledAccountIdFieldNumber = 25;
  inline ::google::protobuf::uint32 match_disabled_account_id() const;
  inline void set_match_disabled_account_id(::google::protobuf::uint32 value);

  // optional uint32 matchmaking_max_range_minutes = 26;
  inline bool has_matchmaking_max_range_minutes() const;
  inline void clear_matchmaking_max_range_minutes();
  static const int kMatchmakingMaxRangeMinutesFieldNumber = 26;
  inline ::google::protobuf::uint32 matchmaking_max_range_minutes() const;
  inline void set_matchmaking_max_range_minutes(::google::protobuf::uint32 value);

  // optional uint32 matchlanguages = 27;
  inline bool has_matchlanguages() const;
  inline void clear_matchlanguages();
  static const int kMatchlanguagesFieldNumber = 27;
  inline ::google::protobuf::uint32 matchlanguages() const;
  inline void set_matchlanguages(::google::protobuf::uint32 value);

  // optional uint32 map_preference = 38;
  inline bool has_map_preference() const;
  inline void clear_map_preference();
  static const int kMapPreferenceFieldNumber = 38;
  inline ::google::protobuf::uint32 map_preference() const;
  inline void set_map_preference(::google::protobuf::uint32 value);

  // repeated .CSODOTAPartyMember members = 29;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 29;
  inline const ::CSODOTAPartyMember& members(int index) const;
  inline ::CSODOTAPartyMember* mutable_members(int index);
  inline ::CSODOTAPartyMember* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyMember >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyMember >*
      mutable_members();

  // optional uint32 open_guild_id = 30;
  inline bool has_open_guild_id() const;
  inline void clear_open_guild_id();
  static const int kOpenGuildIdFieldNumber = 30;
  inline ::google::protobuf::uint32 open_guild_id() const;
  inline void set_open_guild_id(::google::protobuf::uint32 value);

  // repeated uint32 common_guilds = 31;
  inline int common_guilds_size() const;
  inline void clear_common_guilds();
  static const int kCommonGuildsFieldNumber = 31;
  inline ::google::protobuf::uint32 common_guilds(int index) const;
  inline void set_common_guilds(int index, ::google::protobuf::uint32 value);
  inline void add_common_guilds(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      common_guilds() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_common_guilds();

  // optional uint32 low_priority_games_remaining = 35;
  inline bool has_low_priority_games_remaining() const;
  inline void clear_low_priority_games_remaining();
  static const int kLowPriorityGamesRemainingFieldNumber = 35;
  inline ::google::protobuf::uint32 low_priority_games_remaining() const;
  inline void set_low_priority_games_remaining(::google::protobuf::uint32 value);

  // repeated .EEvent active_ingame_events = 39;
  inline int active_ingame_events_size() const;
  inline void clear_active_ingame_events();
  static const int kActiveIngameEventsFieldNumber = 39;
  inline ::EEvent active_ingame_events(int index) const;
  inline void set_active_ingame_events(int index, ::EEvent value);
  inline void add_active_ingame_events(::EEvent value);
  inline const ::google::protobuf::RepeatedField<int>& active_ingame_events() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_active_ingame_events();

  // optional bool open_for_join_requests = 40;
  inline bool has_open_for_join_requests() const;
  inline void clear_open_for_join_requests();
  static const int kOpenForJoinRequestsFieldNumber = 40;
  inline bool open_for_join_requests() const;
  inline void set_open_for_join_requests(bool value);

  // repeated .CSODOTAPartyInvite sent_invites = 41;
  inline int sent_invites_size() const;
  inline void clear_sent_invites();
  static const int kSentInvitesFieldNumber = 41;
  inline const ::CSODOTAPartyInvite& sent_invites(int index) const;
  inline ::CSODOTAPartyInvite* mutable_sent_invites(int index);
  inline ::CSODOTAPartyInvite* add_sent_invites();
  inline const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite >&
      sent_invites() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite >*
      mutable_sent_invites();

  // repeated .CSODOTAPartyInvite recv_invites = 42;
  inline int recv_invites_size() const;
  inline void clear_recv_invites();
  static const int kRecvInvitesFieldNumber = 42;
  inline const ::CSODOTAPartyInvite& recv_invites(int index) const;
  inline ::CSODOTAPartyInvite* mutable_recv_invites(int index);
  inline ::CSODOTAPartyInvite* add_recv_invites();
  inline const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite >&
      recv_invites() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite >*
      mutable_recv_invites();

  // optional uint32 account_flags = 43;
  inline bool has_account_flags() const;
  inline void clear_account_flags();
  static const int kAccountFlagsFieldNumber = 43;
  inline ::google::protobuf::uint32 account_flags() const;
  inline void set_account_flags(::google::protobuf::uint32 value);

  // optional uint32 region_select_flags = 44;
  inline bool has_region_select_flags() const;
  inline void clear_region_select_flags();
  static const int kRegionSelectFlagsFieldNumber = 44;
  inline ::google::protobuf::uint32 region_select_flags() const;
  inline void set_region_select_flags(::google::protobuf::uint32 value);

  // optional uint32 exclusive_tournament_id = 45;
  inline bool has_exclusive_tournament_id() const;
  inline void clear_exclusive_tournament_id();
  static const int kExclusiveTournamentIdFieldNumber = 45;
  inline ::google::protobuf::uint32 exclusive_tournament_id() const;
  inline void set_exclusive_tournament_id(::google::protobuf::uint32 value);

  // optional uint32 tourney_division_id = 47;
  inline bool has_tourney_division_id() const;
  inline void clear_tourney_division_id();
  static const int kTourneyDivisionIdFieldNumber = 47;
  inline ::google::protobuf::uint32 tourney_division_id() const;
  inline void set_tourney_division_id(::google::protobuf::uint32 value);

  // optional uint32 tourney_schedule_time = 48;
  inline bool has_tourney_schedule_time() const;
  inline void clear_tourney_schedule_time();
  static const int kTourneyScheduleTimeFieldNumber = 48;
  inline ::google::protobuf::uint32 tourney_schedule_time() const;
  inline void set_tourney_schedule_time(::google::protobuf::uint32 value);

  // optional uint32 tourney_skill_level = 49;
  inline bool has_tourney_skill_level() const;
  inline void clear_tourney_skill_level();
  static const int kTourneySkillLevelFieldNumber = 49;
  inline ::google::protobuf::uint32 tourney_skill_level() const;
  inline void set_tourney_skill_level(::google::protobuf::uint32 value);

  // optional uint32 tourney_bracket_round = 50;
  inline bool has_tourney_bracket_round() const;
  inline void clear_tourney_bracket_round();
  static const int kTourneyBracketRoundFieldNumber = 50;
  inline ::google::protobuf::uint32 tourney_bracket_round() const;
  inline void set_tourney_bracket_round(::google::protobuf::uint32 value);

  // optional uint32 tourney_queue_deadline_time = 54;
  inline bool has_tourney_queue_deadline_time() const;
  inline void clear_tourney_queue_deadline_time();
  static const int kTourneyQueueDeadlineTimeFieldNumber = 54;
  inline ::google::protobuf::uint32 tourney_queue_deadline_time() const;
  inline void set_tourney_queue_deadline_time(::google::protobuf::uint32 value);

  // optional .ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
  inline bool has_tourney_queue_deadline_state() const;
  inline void clear_tourney_queue_deadline_state();
  static const int kTourneyQueueDeadlineStateFieldNumber = 55;
  inline ::ETourneyQueueDeadlineState tourney_queue_deadline_state() const;
  inline void set_tourney_queue_deadline_state(::ETourneyQueueDeadlineState value);

  // optional uint32 party_builder_slots_to_fill = 56;
  inline bool has_party_builder_slots_to_fill() const;
  inline void clear_party_builder_slots_to_fill();
  static const int kPartyBuilderSlotsToFillFieldNumber = 56;
  inline ::google::protobuf::uint32 party_builder_slots_to_fill() const;
  inline void set_party_builder_slots_to_fill(::google::protobuf::uint32 value);

  // optional uint32 party_builder_match_groups = 57;
  inline bool has_party_builder_match_groups() const;
  inline void clear_party_builder_match_groups();
  static const int kPartyBuilderMatchGroupsFieldNumber = 57;
  inline ::google::protobuf::uint32 party_builder_match_groups() const;
  inline void set_party_builder_match_groups(::google::protobuf::uint32 value);

  // optional uint32 party_builder_start_time = 58;
  inline bool has_party_builder_start_time() const;
  inline void clear_party_builder_start_time();
  static const int kPartyBuilderStartTimeFieldNumber = 58;
  inline ::google::protobuf::uint32 party_builder_start_time() const;
  inline void set_party_builder_start_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSODOTAParty)
 private:
  inline void set_has_party_id();
  inline void clear_has_party_id();
  inline void set_has_leader_id();
  inline void clear_has_leader_id();
  inline void set_has_game_modes();
  inline void clear_has_game_modes();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_effective_started_matchmaking_time();
  inline void clear_has_effective_started_matchmaking_time();
  inline void set_has_raw_started_matchmaking_time();
  inline void clear_has_raw_started_matchmaking_time();
  inline void set_has_attempt_start_time();
  inline void clear_has_attempt_start_time();
  inline void set_has_attempt_num();
  inline void clear_has_attempt_num();
  inline void set_has_matchgroups();
  inline void clear_has_matchgroups();
  inline void set_has_low_priority_account_id();
  inline void clear_has_low_priority_account_id();
  inline void set_has_match_type();
  inline void clear_has_match_type();
  inline void set_has_bot_difficulty();
  inline void clear_has_bot_difficulty();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_team_name();
  inline void clear_has_team_name();
  inline void set_has_team_ui_logo();
  inline void clear_has_team_ui_logo();
  inline void set_has_team_base_logo();
  inline void clear_has_team_base_logo();
  inline void set_has_match_disabled_until_date();
  inline void clear_has_match_disabled_until_date();
  inline void set_has_match_disabled_account_id();
  inline void clear_has_match_disabled_account_id();
  inline void set_has_matchmaking_max_range_minutes();
  inline void clear_has_matchmaking_max_range_minutes();
  inline void set_has_matchlanguages();
  inline void clear_has_matchlanguages();
  inline void set_has_map_preference();
  inline void clear_has_map_preference();
  inline void set_has_open_guild_id();
  inline void clear_has_open_guild_id();
  inline void set_has_low_priority_games_remaining();
  inline void clear_has_low_priority_games_remaining();
  inline void set_has_open_for_join_requests();
  inline void clear_has_open_for_join_requests();
  inline void set_has_account_flags();
  inline void clear_has_account_flags();
  inline void set_has_region_select_flags();
  inline void clear_has_region_select_flags();
  inline void set_has_exclusive_tournament_id();
  inline void clear_has_exclusive_tournament_id();
  inline void set_has_tourney_division_id();
  inline void clear_has_tourney_division_id();
  inline void set_has_tourney_schedule_time();
  inline void clear_has_tourney_schedule_time();
  inline void set_has_tourney_skill_level();
  inline void clear_has_tourney_skill_level();
  inline void set_has_tourney_bracket_round();
  inline void clear_has_tourney_bracket_round();
  inline void set_has_tourney_queue_deadline_time();
  inline void clear_has_tourney_queue_deadline_time();
  inline void set_has_tourney_queue_deadline_state();
  inline void clear_has_tourney_queue_deadline_state();
  inline void set_has_party_builder_slots_to_fill();
  inline void clear_has_party_builder_slots_to_fill();
  inline void set_has_party_builder_match_groups();
  inline void clear_has_party_builder_match_groups();
  inline void set_has_party_builder_start_time();
  inline void clear_has_party_builder_start_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::uint64 party_id_;
  ::google::protobuf::uint64 leader_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > member_ids_;
  ::google::protobuf::uint32 game_modes_;
  int state_;
  ::google::protobuf::uint32 effective_started_matchmaking_time_;
  ::google::protobuf::uint32 raw_started_matchmaking_time_;
  ::google::protobuf::uint32 attempt_start_time_;
  ::google::protobuf::uint32 attempt_num_;
  ::google::protobuf::uint32 matchgroups_;
  ::google::protobuf::uint32 low_priority_account_id_;
  int match_type_;
  int bot_difficulty_;
  ::std::string* team_name_;
  ::google::protobuf::uint64 team_ui_logo_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 match_disabled_until_date_;
  ::google::protobuf::uint64 team_base_logo_;
  ::google::protobuf::uint32 match_disabled_account_id_;
  ::google::protobuf::uint32 matchmaking_max_range_minutes_;
  ::google::protobuf::uint32 matchlanguages_;
  ::google::protobuf::uint32 map_preference_;
  ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyMember > members_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > common_guilds_;
  ::google::protobuf::uint32 open_guild_id_;
  ::google::protobuf::uint32 low_priority_games_remaining_;
  ::google::protobuf::RepeatedField<int> active_ingame_events_;
  ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite > sent_invites_;
  bool open_for_join_requests_;
  ::google::protobuf::uint32 account_flags_;
  ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite > recv_invites_;
  ::google::protobuf::uint32 region_select_flags_;
  ::google::protobuf::uint32 exclusive_tournament_id_;
  ::google::protobuf::uint32 tourney_division_id_;
  ::google::protobuf::uint32 tourney_schedule_time_;
  ::google::protobuf::uint32 tourney_skill_level_;
  ::google::protobuf::uint32 tourney_bracket_round_;
  ::google::protobuf::uint32 tourney_queue_deadline_time_;
  int tourney_queue_deadline_state_;
  ::google::protobuf::uint32 party_builder_slots_to_fill_;
  ::google::protobuf::uint32 party_builder_match_groups_;
  ::google::protobuf::uint32 party_builder_start_time_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CSODOTAParty* default_instance_;
};
// -------------------------------------------------------------------

class CSODOTAPartyInvite_PartyMember : public ::google::protobuf::Message {
 public:
  CSODOTAPartyInvite_PartyMember();
  virtual ~CSODOTAPartyInvite_PartyMember();

  CSODOTAPartyInvite_PartyMember(const CSODOTAPartyInvite_PartyMember& from);

  inline CSODOTAPartyInvite_PartyMember& operator=(const CSODOTAPartyInvite_PartyMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAPartyInvite_PartyMember& default_instance();

  void Swap(CSODOTAPartyInvite_PartyMember* other);

  // implements Message ----------------------------------------------

  CSODOTAPartyInvite_PartyMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTAPartyInvite_PartyMember& from);
  void MergeFrom(const CSODOTAPartyInvite_PartyMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional fixed64 steam_id = 2;
  inline bool has_steam_id() const;
  inline void clear_steam_id();
  static const int kSteamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 steam_id() const;
  inline void set_steam_id(::google::protobuf::uint64 value);

  // optional bool is_coach = 4;
  inline bool has_is_coach() const;
  inline void clear_is_coach();
  static const int kIsCoachFieldNumber = 4;
  inline bool is_coach() const;
  inline void set_is_coach(bool value);

  // @@protoc_insertion_point(class_scope:CSODOTAPartyInvite.PartyMember)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_steam_id();
  inline void clear_has_steam_id();
  inline void set_has_is_coach();
  inline void clear_has_is_coach();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint64 steam_id_;
  bool is_coach_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CSODOTAPartyInvite_PartyMember* default_instance_;
};
// -------------------------------------------------------------------

class CSODOTAPartyInvite : public ::google::protobuf::Message {
 public:
  CSODOTAPartyInvite();
  virtual ~CSODOTAPartyInvite();

  CSODOTAPartyInvite(const CSODOTAPartyInvite& from);

  inline CSODOTAPartyInvite& operator=(const CSODOTAPartyInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAPartyInvite& default_instance();

  void Swap(CSODOTAPartyInvite* other);

  // implements Message ----------------------------------------------

  CSODOTAPartyInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTAPartyInvite& from);
  void MergeFrom(const CSODOTAPartyInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CSODOTAPartyInvite_PartyMember PartyMember;

  // accessors -------------------------------------------------------

  // optional uint64 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint64 group_id() const;
  inline void set_group_id(::google::protobuf::uint64 value);

  // optional fixed64 sender_id = 2;
  inline bool has_sender_id() const;
  inline void clear_sender_id();
  static const int kSenderIdFieldNumber = 2;
  inline ::google::protobuf::uint64 sender_id() const;
  inline void set_sender_id(::google::protobuf::uint64 value);

  // optional string sender_name = 3;
  inline bool has_sender_name() const;
  inline void clear_sender_name();
  static const int kSenderNameFieldNumber = 3;
  inline const ::std::string& sender_name() const;
  inline void set_sender_name(const ::std::string& value);
  inline void set_sender_name(const char* value);
  inline void set_sender_name(const char* value, size_t size);
  inline ::std::string* mutable_sender_name();
  inline ::std::string* release_sender_name();
  inline void set_allocated_sender_name(::std::string* sender_name);

  // repeated .CSODOTAPartyInvite.PartyMember members = 4;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 4;
  inline const ::CSODOTAPartyInvite_PartyMember& members(int index) const;
  inline ::CSODOTAPartyInvite_PartyMember* mutable_members(int index);
  inline ::CSODOTAPartyInvite_PartyMember* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember >*
      mutable_members();

  // optional uint32 team_id = 5;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 5;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // optional bool low_priority_status = 6;
  inline bool has_low_priority_status() const;
  inline void clear_low_priority_status();
  static const int kLowPriorityStatusFieldNumber = 6;
  inline bool low_priority_status() const;
  inline void set_low_priority_status(bool value);

  // optional bool as_coach = 7;
  inline bool has_as_coach() const;
  inline void clear_as_coach();
  static const int kAsCoachFieldNumber = 7;
  inline bool as_coach() const;
  inline void set_as_coach(bool value);

  // optional fixed64 invite_gid = 8;
  inline bool has_invite_gid() const;
  inline void clear_invite_gid();
  static const int kInviteGidFieldNumber = 8;
  inline ::google::protobuf::uint64 invite_gid() const;
  inline void set_invite_gid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CSODOTAPartyInvite)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_sender_id();
  inline void clear_has_sender_id();
  inline void set_has_sender_name();
  inline void clear_has_sender_name();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_low_priority_status();
  inline void clear_has_low_priority_status();
  inline void set_has_as_coach();
  inline void clear_has_as_coach();
  inline void set_has_invite_gid();
  inline void clear_has_invite_gid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 group_id_;
  ::google::protobuf::uint64 sender_id_;
  ::std::string* sender_name_;
  ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember > members_;
  ::google::protobuf::uint32 team_id_;
  bool low_priority_status_;
  bool as_coach_;
  ::google::protobuf::uint64 invite_gid_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CSODOTAPartyInvite* default_instance_;
};
// -------------------------------------------------------------------

class CSODOTALobbyInvite_LobbyMember : public ::google::protobuf::Message {
 public:
  CSODOTALobbyInvite_LobbyMember();
  virtual ~CSODOTALobbyInvite_LobbyMember();

  CSODOTALobbyInvite_LobbyMember(const CSODOTALobbyInvite_LobbyMember& from);

  inline CSODOTALobbyInvite_LobbyMember& operator=(const CSODOTALobbyInvite_LobbyMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTALobbyInvite_LobbyMember& default_instance();

  void Swap(CSODOTALobbyInvite_LobbyMember* other);

  // implements Message ----------------------------------------------

  CSODOTALobbyInvite_LobbyMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTALobbyInvite_LobbyMember& from);
  void MergeFrom(const CSODOTALobbyInvite_LobbyMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional fixed64 steam_id = 2;
  inline bool has_steam_id() const;
  inline void clear_steam_id();
  static const int kSteamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 steam_id() const;
  inline void set_steam_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CSODOTALobbyInvite.LobbyMember)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_steam_id();
  inline void clear_has_steam_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint64 steam_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CSODOTALobbyInvite_LobbyMember* default_instance_;
};
// -------------------------------------------------------------------

class CSODOTALobbyInvite : public ::google::protobuf::Message {
 public:
  CSODOTALobbyInvite();
  virtual ~CSODOTALobbyInvite();

  CSODOTALobbyInvite(const CSODOTALobbyInvite& from);

  inline CSODOTALobbyInvite& operator=(const CSODOTALobbyInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTALobbyInvite& default_instance();

  void Swap(CSODOTALobbyInvite* other);

  // implements Message ----------------------------------------------

  CSODOTALobbyInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTALobbyInvite& from);
  void MergeFrom(const CSODOTALobbyInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CSODOTALobbyInvite_LobbyMember LobbyMember;

  // accessors -------------------------------------------------------

  // optional uint64 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint64 group_id() const;
  inline void set_group_id(::google::protobuf::uint64 value);

  // optional fixed64 sender_id = 2;
  inline bool has_sender_id() const;
  inline void clear_sender_id();
  static const int kSenderIdFieldNumber = 2;
  inline ::google::protobuf::uint64 sender_id() const;
  inline void set_sender_id(::google::protobuf::uint64 value);

  // optional string sender_name = 3;
  inline bool has_sender_name() const;
  inline void clear_sender_name();
  static const int kSenderNameFieldNumber = 3;
  inline const ::std::string& sender_name() const;
  inline void set_sender_name(const ::std::string& value);
  inline void set_sender_name(const char* value);
  inline void set_sender_name(const char* value, size_t size);
  inline ::std::string* mutable_sender_name();
  inline ::std::string* release_sender_name();
  inline void set_allocated_sender_name(::std::string* sender_name);

  // repeated .CSODOTALobbyInvite.LobbyMember members = 4;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 4;
  inline const ::CSODOTALobbyInvite_LobbyMember& members(int index) const;
  inline ::CSODOTALobbyInvite_LobbyMember* mutable_members(int index);
  inline ::CSODOTALobbyInvite_LobbyMember* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::CSODOTALobbyInvite_LobbyMember >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSODOTALobbyInvite_LobbyMember >*
      mutable_members();

  // optional uint64 custom_game_id = 5;
  inline bool has_custom_game_id() const;
  inline void clear_custom_game_id();
  static const int kCustomGameIdFieldNumber = 5;
  inline ::google::protobuf::uint64 custom_game_id() const;
  inline void set_custom_game_id(::google::protobuf::uint64 value);

  // optional fixed64 invite_gid = 6;
  inline bool has_invite_gid() const;
  inline void clear_invite_gid();
  static const int kInviteGidFieldNumber = 6;
  inline ::google::protobuf::uint64 invite_gid() const;
  inline void set_invite_gid(::google::protobuf::uint64 value);

  // optional fixed64 custom_game_crc = 7;
  inline bool has_custom_game_crc() const;
  inline void clear_custom_game_crc();
  static const int kCustomGameCrcFieldNumber = 7;
  inline ::google::protobuf::uint64 custom_game_crc() const;
  inline void set_custom_game_crc(::google::protobuf::uint64 value);

  // optional fixed32 custom_game_timestamp = 8;
  inline bool has_custom_game_timestamp() const;
  inline void clear_custom_game_timestamp();
  static const int kCustomGameTimestampFieldNumber = 8;
  inline ::google::protobuf::uint32 custom_game_timestamp() const;
  inline void set_custom_game_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSODOTALobbyInvite)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_sender_id();
  inline void clear_has_sender_id();
  inline void set_has_sender_name();
  inline void clear_has_sender_name();
  inline void set_has_custom_game_id();
  inline void clear_has_custom_game_id();
  inline void set_has_invite_gid();
  inline void clear_has_invite_gid();
  inline void set_has_custom_game_crc();
  inline void clear_has_custom_game_crc();
  inline void set_has_custom_game_timestamp();
  inline void clear_has_custom_game_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 group_id_;
  ::google::protobuf::uint64 sender_id_;
  ::std::string* sender_name_;
  ::google::protobuf::RepeatedPtrField< ::CSODOTALobbyInvite_LobbyMember > members_;
  ::google::protobuf::uint64 custom_game_id_;
  ::google::protobuf::uint64 invite_gid_;
  ::google::protobuf::uint64 custom_game_crc_;
  ::google::protobuf::uint32 custom_game_timestamp_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CSODOTALobbyInvite* default_instance_;
};
// -------------------------------------------------------------------

class CMsgLeaverState : public ::google::protobuf::Message {
 public:
  CMsgLeaverState();
  virtual ~CMsgLeaverState();

  CMsgLeaverState(const CMsgLeaverState& from);

  inline CMsgLeaverState& operator=(const CMsgLeaverState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgLeaverState& default_instance();

  void Swap(CMsgLeaverState* other);

  // implements Message ----------------------------------------------

  CMsgLeaverState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgLeaverState& from);
  void MergeFrom(const CMsgLeaverState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 lobby_state = 1;
  inline bool has_lobby_state() const;
  inline void clear_lobby_state();
  static const int kLobbyStateFieldNumber = 1;
  inline ::google::protobuf::uint32 lobby_state() const;
  inline void set_lobby_state(::google::protobuf::uint32 value);

  // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  inline bool has_game_state() const;
  inline void clear_game_state();
  static const int kGameStateFieldNumber = 2;
  inline ::DOTA_GameState game_state() const;
  inline void set_game_state(::DOTA_GameState value);

  // optional bool leaver_detected = 3;
  inline bool has_leaver_detected() const;
  inline void clear_leaver_detected();
  static const int kLeaverDetectedFieldNumber = 3;
  inline bool leaver_detected() const;
  inline void set_leaver_detected(bool value);

  // optional bool first_blood_happened = 4;
  inline bool has_first_blood_happened() const;
  inline void clear_first_blood_happened();
  static const int kFirstBloodHappenedFieldNumber = 4;
  inline bool first_blood_happened() const;
  inline void set_first_blood_happened(bool value);

  // optional bool discard_match_results = 5;
  inline bool has_discard_match_results() const;
  inline void clear_discard_match_results();
  static const int kDiscardMatchResultsFieldNumber = 5;
  inline bool discard_match_results() const;
  inline void set_discard_match_results(bool value);

  // optional bool mass_disconnect = 6;
  inline bool has_mass_disconnect() const;
  inline void clear_mass_disconnect();
  static const int kMassDisconnectFieldNumber = 6;
  inline bool mass_disconnect() const;
  inline void set_mass_disconnect(bool value);

  // @@protoc_insertion_point(class_scope:CMsgLeaverState)
 private:
  inline void set_has_lobby_state();
  inline void clear_has_lobby_state();
  inline void set_has_game_state();
  inline void clear_has_game_state();
  inline void set_has_leaver_detected();
  inline void clear_has_leaver_detected();
  inline void set_has_first_blood_happened();
  inline void clear_has_first_blood_happened();
  inline void set_has_discard_match_results();
  inline void clear_has_discard_match_results();
  inline void set_has_mass_disconnect();
  inline void clear_has_mass_disconnect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 lobby_state_;
  int game_state_;
  bool leaver_detected_;
  bool first_blood_happened_;
  bool discard_match_results_;
  bool mass_disconnect_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgLeaverState* default_instance_;
};
// -------------------------------------------------------------------

class CDOTALobbyMember_CDOTALobbyMemberXPBonus : public ::google::protobuf::Message {
 public:
  CDOTALobbyMember_CDOTALobbyMemberXPBonus();
  virtual ~CDOTALobbyMember_CDOTALobbyMemberXPBonus();

  CDOTALobbyMember_CDOTALobbyMemberXPBonus(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from);

  inline CDOTALobbyMember_CDOTALobbyMemberXPBonus& operator=(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTALobbyMember_CDOTALobbyMemberXPBonus& default_instance();

  void Swap(CDOTALobbyMember_CDOTALobbyMemberXPBonus* other);

  // implements Message ----------------------------------------------

  CDOTALobbyMember_CDOTALobbyMemberXPBonus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from);
  void MergeFrom(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional float xp_bonus = 2;
  inline bool has_xp_bonus() const;
  inline void clear_xp_bonus();
  static const int kXpBonusFieldNumber = 2;
  inline float xp_bonus() const;
  inline void set_xp_bonus(float value);

  // optional uint64 source_key = 3;
  inline bool has_source_key() const;
  inline void clear_source_key();
  static const int kSourceKeyFieldNumber = 3;
  inline ::google::protobuf::uint64 source_key() const;
  inline void set_source_key(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CDOTALobbyMember.CDOTALobbyMemberXPBonus)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_xp_bonus();
  inline void clear_has_xp_bonus();
  inline void set_has_source_key();
  inline void clear_has_source_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 type_;
  float xp_bonus_;
  ::google::protobuf::uint64 source_key_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CDOTALobbyMember_CDOTALobbyMemberXPBonus* default_instance_;
};
// -------------------------------------------------------------------

class CDOTALobbyMember : public ::google::protobuf::Message {
 public:
  CDOTALobbyMember();
  virtual ~CDOTALobbyMember();

  CDOTALobbyMember(const CDOTALobbyMember& from);

  inline CDOTALobbyMember& operator=(const CDOTALobbyMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTALobbyMember& default_instance();

  void Swap(CDOTALobbyMember* other);

  // implements Message ----------------------------------------------

  CDOTALobbyMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTALobbyMember& from);
  void MergeFrom(const CDOTALobbyMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CDOTALobbyMember_CDOTALobbyMemberXPBonus CDOTALobbyMemberXPBonus;

  // accessors -------------------------------------------------------

  // optional fixed64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint32 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 3;
  inline ::DOTA_GC_TEAM team() const;
  inline void set_team(::DOTA_GC_TEAM value);

  // optional string name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 slot = 7;
  inline bool has_slot() const;
  inline void clear_slot();
  static const int kSlotFieldNumber = 7;
  inline ::google::protobuf::uint32 slot() const;
  inline void set_slot(::google::protobuf::uint32 value);

  // optional uint64 party_id = 12;
  inline bool has_party_id() const;
  inline void clear_party_id();
  static const int kPartyIdFieldNumber = 12;
  inline ::google::protobuf::uint64 party_id() const;
  inline void set_party_id(::google::protobuf::uint64 value);

  // optional uint32 meta_level = 13;
  inline bool has_meta_level() const;
  inline void clear_meta_level();
  static const int kMetaLevelFieldNumber = 13;
  inline ::google::protobuf::uint32 meta_level() const;
  inline void set_meta_level(::google::protobuf::uint32 value);

  // optional uint32 meta_xp = 14;
  inline bool has_meta_xp() const;
  inline void clear_meta_xp();
  static const int kMetaXpFieldNumber = 14;
  inline ::google::protobuf::uint32 meta_xp() const;
  inline void set_meta_xp(::google::protobuf::uint32 value);

  // optional uint32 meta_xp_awarded = 15;
  inline bool has_meta_xp_awarded() const;
  inline void clear_meta_xp_awarded();
  static const int kMetaXpAwardedFieldNumber = 15;
  inline ::google::protobuf::uint32 meta_xp_awarded() const;
  inline void set_meta_xp_awarded(::google::protobuf::uint32 value);

  // optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
  inline bool has_leaver_status() const;
  inline void clear_leaver_status();
  static const int kLeaverStatusFieldNumber = 16;
  inline ::DOTALeaverStatus_t leaver_status() const;
  inline void set_leaver_status(::DOTALeaverStatus_t value);

  // optional uint32 leaver_actions = 28;
  inline bool has_leaver_actions() const;
  inline void clear_leaver_actions();
  static const int kLeaverActionsFieldNumber = 28;
  inline ::google::protobuf::uint32 leaver_actions() const;
  inline void set_leaver_actions(::google::protobuf::uint32 value);

  // optional uint32 channel = 17;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 17;
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);

  // optional uint32 prize_def_index = 18;
  inline bool has_prize_def_index() const;
  inline void clear_prize_def_index();
  static const int kPrizeDefIndexFieldNumber = 18;
  inline ::google::protobuf::uint32 prize_def_index() const;
  inline void set_prize_def_index(::google::protobuf::uint32 value);

  // repeated uint32 disabled_hero_id = 20;
  inline int disabled_hero_id_size() const;
  inline void clear_disabled_hero_id();
  static const int kDisabledHeroIdFieldNumber = 20;
  inline ::google::protobuf::uint32 disabled_hero_id(int index) const;
  inline void set_disabled_hero_id(int index, ::google::protobuf::uint32 value);
  inline void add_disabled_hero_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      disabled_hero_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_disabled_hero_id();

  // optional .PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
  inline bool has_partner_account_type() const;
  inline void clear_partner_account_type();
  static const int kPartnerAccountTypeFieldNumber = 21;
  inline ::PartnerAccountType partner_account_type() const;
  inline void set_partner_account_type(::PartnerAccountType value);

  // repeated uint32 enabled_hero_id = 22;
  inline int enabled_hero_id_size() const;
  inline void clear_enabled_hero_id();
  static const int kEnabledHeroIdFieldNumber = 22;
  inline ::google::protobuf::uint32 enabled_hero_id(int index) const;
  inline void set_enabled_hero_id(int index, ::google::protobuf::uint32 value);
  inline void add_enabled_hero_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      enabled_hero_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_enabled_hero_id();

  // optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
  inline bool has_coach_team() const;
  inline void clear_coach_team();
  static const int kCoachTeamFieldNumber = 23;
  inline ::DOTA_GC_TEAM coach_team() const;
  inline void set_coach_team(::DOTA_GC_TEAM value);

  // optional uint32 nexon_pc_bang_no = 24;
  inline bool has_nexon_pc_bang_no() const;
  inline void clear_nexon_pc_bang_no();
  static const int kNexonPcBangNoFieldNumber = 24;
  inline ::google::protobuf::uint32 nexon_pc_bang_no() const;
  inline void set_nexon_pc_bang_no(::google::protobuf::uint32 value);

  // optional string nexon_pc_bang_name = 25;
  inline bool has_nexon_pc_bang_name() const;
  inline void clear_nexon_pc_bang_name();
  static const int kNexonPcBangNameFieldNumber = 25;
  inline const ::std::string& nexon_pc_bang_name() const;
  inline void set_nexon_pc_bang_name(const ::std::string& value);
  inline void set_nexon_pc_bang_name(const char* value);
  inline void set_nexon_pc_bang_name(const char* value, size_t size);
  inline ::std::string* mutable_nexon_pc_bang_name();
  inline ::std::string* release_nexon_pc_bang_name();
  inline void set_allocated_nexon_pc_bang_name(::std::string* nexon_pc_bang_name);

  // repeated .CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
  inline int xp_bonuses_size() const;
  inline void clear_xp_bonuses();
  static const int kXpBonusesFieldNumber = 27;
  inline const ::CDOTALobbyMember_CDOTALobbyMemberXPBonus& xp_bonuses(int index) const;
  inline ::CDOTALobbyMember_CDOTALobbyMemberXPBonus* mutable_xp_bonuses(int index);
  inline ::CDOTALobbyMember_CDOTALobbyMemberXPBonus* add_xp_bonuses();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember_CDOTALobbyMemberXPBonus >&
      xp_bonuses() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember_CDOTALobbyMemberXPBonus >*
      mutable_xp_bonuses();

  // optional sint32 rank_change = 29;
  inline bool has_rank_change() const;
  inline void clear_rank_change();
  static const int kRankChangeFieldNumber = 29;
  inline ::google::protobuf::int32 rank_change() const;
  inline void set_rank_change(::google::protobuf::int32 value);

  // optional bool cameraman = 30;
  inline bool has_cameraman() const;
  inline void clear_cameraman();
  static const int kCameramanFieldNumber = 30;
  inline bool cameraman() const;
  inline void set_cameraman(bool value);

  // repeated uint32 custom_game_product_ids = 31;
  inline int custom_game_product_ids_size() const;
  inline void clear_custom_game_product_ids();
  static const int kCustomGameProductIdsFieldNumber = 31;
  inline ::google::protobuf::uint32 custom_game_product_ids(int index) const;
  inline void set_custom_game_product_ids(int index, ::google::protobuf::uint32 value);
  inline void add_custom_game_product_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      custom_game_product_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_custom_game_product_ids();

  // optional uint32 lobby_mvp_vote_account_id = 32;
  inline bool has_lobby_mvp_vote_account_id() const;
  inline void clear_lobby_mvp_vote_account_id();
  static const int kLobbyMvpVoteAccountIdFieldNumber = 32;
  inline ::google::protobuf::uint32 lobby_mvp_vote_account_id() const;
  inline void set_lobby_mvp_vote_account_id(::google::protobuf::uint32 value);

  // optional .MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
  inline bool has_search_match_type() const;
  inline void clear_search_match_type();
  static const int kSearchMatchTypeFieldNumber = 33;
  inline ::MatchType search_match_type() const;
  inline void set_search_match_type(::MatchType value);

  // optional uint32 favorite_team_and_quality = 34;
  inline bool has_favorite_team_and_quality() const;
  inline void clear_favorite_team_and_quality();
  static const int kFavoriteTeamAndQualityFieldNumber = 34;
  inline ::google::protobuf::uint32 favorite_team_and_quality() const;
  inline void set_favorite_team_and_quality(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CDOTALobbyMember)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_slot();
  inline void clear_has_slot();
  inline void set_has_party_id();
  inline void clear_has_party_id();
  inline void set_has_meta_level();
  inline void clear_has_meta_level();
  inline void set_has_meta_xp();
  inline void clear_has_meta_xp();
  inline void set_has_meta_xp_awarded();
  inline void clear_has_meta_xp_awarded();
  inline void set_has_leaver_status();
  inline void clear_has_leaver_status();
  inline void set_has_leaver_actions();
  inline void clear_has_leaver_actions();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_prize_def_index();
  inline void clear_has_prize_def_index();
  inline void set_has_partner_account_type();
  inline void clear_has_partner_account_type();
  inline void set_has_coach_team();
  inline void clear_has_coach_team();
  inline void set_has_nexon_pc_bang_no();
  inline void clear_has_nexon_pc_bang_no();
  inline void set_has_nexon_pc_bang_name();
  inline void clear_has_nexon_pc_bang_name();
  inline void set_has_rank_change();
  inline void clear_has_rank_change();
  inline void set_has_cameraman();
  inline void clear_has_cameraman();
  inline void set_has_lobby_mvp_vote_account_id();
  inline void clear_has_lobby_mvp_vote_account_id();
  inline void set_has_search_match_type();
  inline void clear_has_search_match_type();
  inline void set_has_favorite_team_and_quality();
  inline void clear_has_favorite_team_and_quality();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 hero_id_;
  int team_;
  ::std::string* name_;
  ::google::protobuf::uint64 party_id_;
  ::google::protobuf::uint32 slot_;
  ::google::protobuf::uint32 meta_level_;
  ::google::protobuf::uint32 meta_xp_;
  ::google::protobuf::uint32 meta_xp_awarded_;
  int leaver_status_;
  ::google::protobuf::uint32 leaver_actions_;
  ::google::protobuf::uint32 channel_;
  ::google::protobuf::uint32 prize_def_index_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > disabled_hero_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > enabled_hero_id_;
  int partner_account_type_;
  int coach_team_;
  ::std::string* nexon_pc_bang_name_;
  ::google::protobuf::uint32 nexon_pc_bang_no_;
  ::google::protobuf::int32 rank_change_;
  ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember_CDOTALobbyMemberXPBonus > xp_bonuses_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > custom_game_product_ids_;
  bool cameraman_;
  ::google::protobuf::uint32 lobby_mvp_vote_account_id_;
  int search_match_type_;
  ::google::protobuf::uint32 favorite_team_and_quality_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CDOTALobbyMember* default_instance_;
};
// -------------------------------------------------------------------

class CLobbyTeamDetails : public ::google::protobuf::Message {
 public:
  CLobbyTeamDetails();
  virtual ~CLobbyTeamDetails();

  CLobbyTeamDetails(const CLobbyTeamDetails& from);

  inline CLobbyTeamDetails& operator=(const CLobbyTeamDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CLobbyTeamDetails& default_instance();

  void Swap(CLobbyTeamDetails* other);

  // implements Message ----------------------------------------------

  CLobbyTeamDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CLobbyTeamDetails& from);
  void MergeFrom(const CLobbyTeamDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string team_name = 1;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 1;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const char* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  inline void set_allocated_team_name(::std::string* team_name);

  // optional string team_tag = 3;
  inline bool has_team_tag() const;
  inline void clear_team_tag();
  static const int kTeamTagFieldNumber = 3;
  inline const ::std::string& team_tag() const;
  inline void set_team_tag(const ::std::string& value);
  inline void set_team_tag(const char* value);
  inline void set_team_tag(const char* value, size_t size);
  inline ::std::string* mutable_team_tag();
  inline ::std::string* release_team_tag();
  inline void set_allocated_team_tag(::std::string* team_tag);

  // optional uint32 team_id = 4;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 4;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // optional uint64 team_logo = 5;
  inline bool has_team_logo() const;
  inline void clear_team_logo();
  static const int kTeamLogoFieldNumber = 5;
  inline ::google::protobuf::uint64 team_logo() const;
  inline void set_team_logo(::google::protobuf::uint64 value);

  // optional uint64 team_base_logo = 6;
  inline bool has_team_base_logo() const;
  inline void clear_team_base_logo();
  static const int kTeamBaseLogoFieldNumber = 6;
  inline ::google::protobuf::uint64 team_base_logo() const;
  inline void set_team_base_logo(::google::protobuf::uint64 value);

  // optional uint64 team_banner_logo = 7;
  inline bool has_team_banner_logo() const;
  inline void clear_team_banner_logo();
  static const int kTeamBannerLogoFieldNumber = 7;
  inline ::google::protobuf::uint64 team_banner_logo() const;
  inline void set_team_banner_logo(::google::protobuf::uint64 value);

  // optional bool team_complete = 8;
  inline bool has_team_complete() const;
  inline void clear_team_complete();
  static const int kTeamCompleteFieldNumber = 8;
  inline bool team_complete() const;
  inline void set_team_complete(bool value);

  // optional string guild_name = 9;
  inline bool has_guild_name() const;
  inline void clear_guild_name();
  static const int kGuildNameFieldNumber = 9;
  inline const ::std::string& guild_name() const;
  inline void set_guild_name(const ::std::string& value);
  inline void set_guild_name(const char* value);
  inline void set_guild_name(const char* value, size_t size);
  inline ::std::string* mutable_guild_name();
  inline ::std::string* release_guild_name();
  inline void set_allocated_guild_name(::std::string* guild_name);

  // optional string guild_tag = 10;
  inline bool has_guild_tag() const;
  inline void clear_guild_tag();
  static const int kGuildTagFieldNumber = 10;
  inline const ::std::string& guild_tag() const;
  inline void set_guild_tag(const ::std::string& value);
  inline void set_guild_tag(const char* value);
  inline void set_guild_tag(const char* value, size_t size);
  inline ::std::string* mutable_guild_tag();
  inline ::std::string* release_guild_tag();
  inline void set_allocated_guild_tag(::std::string* guild_tag);

  // optional uint32 guild_id = 11;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 11;
  inline ::google::protobuf::uint32 guild_id() const;
  inline void set_guild_id(::google::protobuf::uint32 value);

  // optional uint64 guild_logo = 12;
  inline bool has_guild_logo() const;
  inline void clear_guild_logo();
  static const int kGuildLogoFieldNumber = 12;
  inline ::google::protobuf::uint64 guild_logo() const;
  inline void set_guild_logo(::google::protobuf::uint64 value);

  // optional uint64 guild_base_logo = 13;
  inline bool has_guild_base_logo() const;
  inline void clear_guild_base_logo();
  static const int kGuildBaseLogoFieldNumber = 13;
  inline ::google::protobuf::uint64 guild_base_logo() const;
  inline void set_guild_base_logo(::google::protobuf::uint64 value);

  // optional uint64 guild_banner_logo = 14;
  inline bool has_guild_banner_logo() const;
  inline void clear_guild_banner_logo();
  static const int kGuildBannerLogoFieldNumber = 14;
  inline ::google::protobuf::uint64 guild_banner_logo() const;
  inline void set_guild_banner_logo(::google::protobuf::uint64 value);

  // optional uint32 rank = 15;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 15;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional sint32 rank_change = 16;
  inline bool has_rank_change() const;
  inline void clear_rank_change();
  static const int kRankChangeFieldNumber = 16;
  inline ::google::protobuf::int32 rank_change() const;
  inline void set_rank_change(::google::protobuf::int32 value);

  // optional bool is_home_team = 17;
  inline bool has_is_home_team() const;
  inline void clear_is_home_team();
  static const int kIsHomeTeamFieldNumber = 17;
  inline bool is_home_team() const;
  inline void set_is_home_team(bool value);

  // @@protoc_insertion_point(class_scope:CLobbyTeamDetails)
 private:
  inline void set_has_team_name();
  inline void clear_has_team_name();
  inline void set_has_team_tag();
  inline void clear_has_team_tag();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_team_logo();
  inline void clear_has_team_logo();
  inline void set_has_team_base_logo();
  inline void clear_has_team_base_logo();
  inline void set_has_team_banner_logo();
  inline void clear_has_team_banner_logo();
  inline void set_has_team_complete();
  inline void clear_has_team_complete();
  inline void set_has_guild_name();
  inline void clear_has_guild_name();
  inline void set_has_guild_tag();
  inline void clear_has_guild_tag();
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_guild_logo();
  inline void clear_has_guild_logo();
  inline void set_has_guild_base_logo();
  inline void clear_has_guild_base_logo();
  inline void set_has_guild_banner_logo();
  inline void clear_has_guild_banner_logo();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_rank_change();
  inline void clear_has_rank_change();
  inline void set_has_is_home_team();
  inline void clear_has_is_home_team();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* team_name_;
  ::std::string* team_tag_;
  ::google::protobuf::uint64 team_logo_;
  ::google::protobuf::uint64 team_base_logo_;
  ::google::protobuf::uint64 team_banner_logo_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 guild_id_;
  ::std::string* guild_name_;
  ::std::string* guild_tag_;
  ::google::protobuf::uint64 guild_logo_;
  ::google::protobuf::uint64 guild_base_logo_;
  bool team_complete_;
  bool is_home_team_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint64 guild_banner_logo_;
  ::google::protobuf::int32 rank_change_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CLobbyTeamDetails* default_instance_;
};
// -------------------------------------------------------------------

class CLobbyTimedRewardDetails : public ::google::protobuf::Message {
 public:
  CLobbyTimedRewardDetails();
  virtual ~CLobbyTimedRewardDetails();

  CLobbyTimedRewardDetails(const CLobbyTimedRewardDetails& from);

  inline CLobbyTimedRewardDetails& operator=(const CLobbyTimedRewardDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CLobbyTimedRewardDetails& default_instance();

  void Swap(CLobbyTimedRewardDetails* other);

  // implements Message ----------------------------------------------

  CLobbyTimedRewardDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CLobbyTimedRewardDetails& from);
  void MergeFrom(const CLobbyTimedRewardDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 item_def_index = 2;
  inline bool has_item_def_index() const;
  inline void clear_item_def_index();
  static const int kItemDefIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 item_def_index() const;
  inline void set_item_def_index(::google::protobuf::uint32 value);

  // optional bool is_supply_crate = 3;
  inline bool has_is_supply_crate() const;
  inline void clear_is_supply_crate();
  static const int kIsSupplyCrateFieldNumber = 3;
  inline bool is_supply_crate() const;
  inline void set_is_supply_crate(bool value);

  // optional bool is_timed_drop = 4;
  inline bool has_is_timed_drop() const;
  inline void clear_is_timed_drop();
  static const int kIsTimedDropFieldNumber = 4;
  inline bool is_timed_drop() const;
  inline void set_is_timed_drop(bool value);

  // optional uint32 account_id = 5;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 5;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 origin = 6;
  inline bool has_origin() const;
  inline void clear_origin();
  static const int kOriginFieldNumber = 6;
  inline ::google::protobuf::uint32 origin() const;
  inline void set_origin(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CLobbyTimedRewardDetails)
 private:
  inline void set_has_item_def_index();
  inline void clear_has_item_def_index();
  inline void set_has_is_supply_crate();
  inline void clear_has_is_supply_crate();
  inline void set_has_is_timed_drop();
  inline void clear_has_is_timed_drop();
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_origin();
  inline void clear_has_origin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 item_def_index_;
  bool is_supply_crate_;
  bool is_timed_drop_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 origin_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CLobbyTimedRewardDetails* default_instance_;
};
// -------------------------------------------------------------------

class CLobbyBroadcastChannelInfo : public ::google::protobuf::Message {
 public:
  CLobbyBroadcastChannelInfo();
  virtual ~CLobbyBroadcastChannelInfo();

  CLobbyBroadcastChannelInfo(const CLobbyBroadcastChannelInfo& from);

  inline CLobbyBroadcastChannelInfo& operator=(const CLobbyBroadcastChannelInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CLobbyBroadcastChannelInfo& default_instance();

  void Swap(CLobbyBroadcastChannelInfo* other);

  // implements Message ----------------------------------------------

  CLobbyBroadcastChannelInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CLobbyBroadcastChannelInfo& from);
  void MergeFrom(const CLobbyBroadcastChannelInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 channel_id = 1;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);

  // optional string country_code = 2;
  inline bool has_country_code() const;
  inline void clear_country_code();
  static const int kCountryCodeFieldNumber = 2;
  inline const ::std::string& country_code() const;
  inline void set_country_code(const ::std::string& value);
  inline void set_country_code(const char* value);
  inline void set_country_code(const char* value, size_t size);
  inline ::std::string* mutable_country_code();
  inline ::std::string* release_country_code();
  inline void set_allocated_country_code(::std::string* country_code);

  // optional string description = 3;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 3;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional string language_code = 4;
  inline bool has_language_code() const;
  inline void clear_language_code();
  static const int kLanguageCodeFieldNumber = 4;
  inline const ::std::string& language_code() const;
  inline void set_language_code(const ::std::string& value);
  inline void set_language_code(const char* value);
  inline void set_language_code(const char* value, size_t size);
  inline ::std::string* mutable_language_code();
  inline ::std::string* release_language_code();
  inline void set_allocated_language_code(::std::string* language_code);

  // @@protoc_insertion_point(class_scope:CLobbyBroadcastChannelInfo)
 private:
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_country_code();
  inline void clear_has_country_code();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_language_code();
  inline void clear_has_language_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* country_code_;
  ::std::string* description_;
  ::std::string* language_code_;
  ::google::protobuf::uint32 channel_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CLobbyBroadcastChannelInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSODOTALobby_CExtraMsg : public ::google::protobuf::Message {
 public:
  CSODOTALobby_CExtraMsg();
  virtual ~CSODOTALobby_CExtraMsg();

  CSODOTALobby_CExtraMsg(const CSODOTALobby_CExtraMsg& from);

  inline CSODOTALobby_CExtraMsg& operator=(const CSODOTALobby_CExtraMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTALobby_CExtraMsg& default_instance();

  void Swap(CSODOTALobby_CExtraMsg* other);

  // implements Message ----------------------------------------------

  CSODOTALobby_CExtraMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTALobby_CExtraMsg& from);
  void MergeFrom(const CSODOTALobby_CExtraMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional bytes contents = 2;
  inline bool has_contents() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 2;
  inline const ::std::string& contents() const;
  inline void set_contents(const ::std::string& value);
  inline void set_contents(const char* value);
  inline void set_contents(const void* value, size_t size);
  inline ::std::string* mutable_contents();
  inline ::std::string* release_contents();
  inline void set_allocated_contents(::std::string* contents);

  // @@protoc_insertion_point(class_scope:CSODOTALobby.CExtraMsg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_contents();
  inline void clear_has_contents();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* contents_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CSODOTALobby_CExtraMsg* default_instance_;
};
// -------------------------------------------------------------------

class CSODOTALobby : public ::google::protobuf::Message {
 public:
  CSODOTALobby();
  virtual ~CSODOTALobby();

  CSODOTALobby(const CSODOTALobby& from);

  inline CSODOTALobby& operator=(const CSODOTALobby& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTALobby& default_instance();

  void Swap(CSODOTALobby* other);

  // implements Message ----------------------------------------------

  CSODOTALobby* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTALobby& from);
  void MergeFrom(const CSODOTALobby& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CSODOTALobby_CExtraMsg CExtraMsg;

  typedef CSODOTALobby_State State;
  static const State UI = CSODOTALobby_State_UI;
  static const State READYUP = CSODOTALobby_State_READYUP;
  static const State SERVERSETUP = CSODOTALobby_State_SERVERSETUP;
  static const State RUN = CSODOTALobby_State_RUN;
  static const State POSTGAME = CSODOTALobby_State_POSTGAME;
  static const State NOTREADY = CSODOTALobby_State_NOTREADY;
  static const State SERVERASSIGN = CSODOTALobby_State_SERVERASSIGN;
  static inline bool State_IsValid(int value) {
    return CSODOTALobby_State_IsValid(value);
  }
  static const State State_MIN =
    CSODOTALobby_State_State_MIN;
  static const State State_MAX =
    CSODOTALobby_State_State_MAX;
  static const int State_ARRAYSIZE =
    CSODOTALobby_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return CSODOTALobby_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return CSODOTALobby_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return CSODOTALobby_State_Parse(name, value);
  }

  typedef CSODOTALobby_LobbyType LobbyType;
  static const LobbyType INVALID = CSODOTALobby_LobbyType_INVALID;
  static const LobbyType CASUAL_MATCH = CSODOTALobby_LobbyType_CASUAL_MATCH;
  static const LobbyType PRACTICE = CSODOTALobby_LobbyType_PRACTICE;
  static const LobbyType TOURNAMENT = CSODOTALobby_LobbyType_TOURNAMENT;
  static const LobbyType COOP_BOT_MATCH = CSODOTALobby_LobbyType_COOP_BOT_MATCH;
  static const LobbyType LEGACY_TEAM_MATCH = CSODOTALobby_LobbyType_LEGACY_TEAM_MATCH;
  static const LobbyType LEGACY_SOLO_QUEUE_MATCH = CSODOTALobby_LobbyType_LEGACY_SOLO_QUEUE_MATCH;
  static const LobbyType COMPETITIVE_MATCH = CSODOTALobby_LobbyType_COMPETITIVE_MATCH;
  static const LobbyType CASUAL_1V1_MATCH = CSODOTALobby_LobbyType_CASUAL_1V1_MATCH;
  static const LobbyType WEEKEND_TOURNEY = CSODOTALobby_LobbyType_WEEKEND_TOURNEY;
  static const LobbyType LOCAL_BOT_MATCH = CSODOTALobby_LobbyType_LOCAL_BOT_MATCH;
  static const LobbyType SPECTATOR = CSODOTALobby_LobbyType_SPECTATOR;
  static inline bool LobbyType_IsValid(int value) {
    return CSODOTALobby_LobbyType_IsValid(value);
  }
  static const LobbyType LobbyType_MIN =
    CSODOTALobby_LobbyType_LobbyType_MIN;
  static const LobbyType LobbyType_MAX =
    CSODOTALobby_LobbyType_LobbyType_MAX;
  static const int LobbyType_ARRAYSIZE =
    CSODOTALobby_LobbyType_LobbyType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LobbyType_descriptor() {
    return CSODOTALobby_LobbyType_descriptor();
  }
  static inline const ::std::string& LobbyType_Name(LobbyType value) {
    return CSODOTALobby_LobbyType_Name(value);
  }
  static inline bool LobbyType_Parse(const ::std::string& name,
      LobbyType* value) {
    return CSODOTALobby_LobbyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 lobby_id = 1;
  inline bool has_lobby_id() const;
  inline void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 1;
  inline ::google::protobuf::uint64 lobby_id() const;
  inline void set_lobby_id(::google::protobuf::uint64 value);

  // repeated .CDOTALobbyMember members = 2;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 2;
  inline const ::CDOTALobbyMember& members(int index) const;
  inline ::CDOTALobbyMember* mutable_members(int index);
  inline ::CDOTALobbyMember* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >*
      mutable_members();

  // repeated .CDOTALobbyMember left_members = 7;
  inline int left_members_size() const;
  inline void clear_left_members();
  static const int kLeftMembersFieldNumber = 7;
  inline const ::CDOTALobbyMember& left_members(int index) const;
  inline ::CDOTALobbyMember* mutable_left_members(int index);
  inline ::CDOTALobbyMember* add_left_members();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >&
      left_members() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >*
      mutable_left_members();

  // optional fixed64 leader_id = 11;
  inline bool has_leader_id() const;
  inline void clear_leader_id();
  static const int kLeaderIdFieldNumber = 11;
  inline ::google::protobuf::uint64 leader_id() const;
  inline void set_leader_id(::google::protobuf::uint64 value);

  // optional fixed64 server_id = 6 [default = 0];
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 6;
  inline ::google::protobuf::uint64 server_id() const;
  inline void set_server_id(::google::protobuf::uint64 value);

  // optional uint32 game_mode = 3;
  inline bool has_game_mode() const;
  inline void clear_game_mode();
  static const int kGameModeFieldNumber = 3;
  inline ::google::protobuf::uint32 game_mode() const;
  inline void set_game_mode(::google::protobuf::uint32 value);

  // repeated fixed64 pending_invites = 10;
  inline int pending_invites_size() const;
  inline void clear_pending_invites();
  static const int kPendingInvitesFieldNumber = 10;
  inline ::google::protobuf::uint64 pending_invites(int index) const;
  inline void set_pending_invites(int index, ::google::protobuf::uint64 value);
  inline void add_pending_invites(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      pending_invites() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_pending_invites();

  // optional .CSODOTALobby.State state = 4 [default = UI];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ::CSODOTALobby_State state() const;
  inline void set_state(::CSODOTALobby_State value);

  // optional string connect = 5;
  inline bool has_connect() const;
  inline void clear_connect();
  static const int kConnectFieldNumber = 5;
  inline const ::std::string& connect() const;
  inline void set_connect(const ::std::string& value);
  inline void set_connect(const char* value);
  inline void set_connect(const char* value, size_t size);
  inline ::std::string* mutable_connect();
  inline ::std::string* release_connect();
  inline void set_allocated_connect(::std::string* connect);

  // optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
  inline bool has_lobby_type() const;
  inline void clear_lobby_type();
  static const int kLobbyTypeFieldNumber = 12;
  inline ::CSODOTALobby_LobbyType lobby_type() const;
  inline void set_lobby_type(::CSODOTALobby_LobbyType value);

  // optional bool allow_cheats = 13;
  inline bool has_allow_cheats() const;
  inline void clear_allow_cheats();
  static const int kAllowCheatsFieldNumber = 13;
  inline bool allow_cheats() const;
  inline void set_allow_cheats(bool value);

  // optional bool fill_with_bots = 14;
  inline bool has_fill_with_bots() const;
  inline void clear_fill_with_bots();
  static const int kFillWithBotsFieldNumber = 14;
  inline bool fill_with_bots() const;
  inline void set_fill_with_bots(bool value);

  // optional bool intro_mode = 15;
  inline bool has_intro_mode() const;
  inline void clear_intro_mode();
  static const int kIntroModeFieldNumber = 15;
  inline bool intro_mode() const;
  inline void set_intro_mode(bool value);

  // optional string game_name = 16;
  inline bool has_game_name() const;
  inline void clear_game_name();
  static const int kGameNameFieldNumber = 16;
  inline const ::std::string& game_name() const;
  inline void set_game_name(const ::std::string& value);
  inline void set_game_name(const char* value);
  inline void set_game_name(const char* value, size_t size);
  inline ::std::string* mutable_game_name();
  inline ::std::string* release_game_name();
  inline void set_allocated_game_name(::std::string* game_name);

  // repeated .CLobbyTeamDetails team_details = 17;
  inline int team_details_size() const;
  inline void clear_team_details();
  static const int kTeamDetailsFieldNumber = 17;
  inline const ::CLobbyTeamDetails& team_details(int index) const;
  inline ::CLobbyTeamDetails* mutable_team_details(int index);
  inline ::CLobbyTeamDetails* add_team_details();
  inline const ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >&
      team_details() const;
  inline ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >*
      mutable_team_details();

  // optional uint32 tutorial_lesson = 18;
  inline bool has_tutorial_lesson() const;
  inline void clear_tutorial_lesson();
  static const int kTutorialLessonFieldNumber = 18;
  inline ::google::protobuf::uint32 tutorial_lesson() const;
  inline void set_tutorial_lesson(::google::protobuf::uint32 value);

  // optional uint32 tournament_id = 19;
  inline bool has_tournament_id() const;
  inline void clear_tournament_id();
  static const int kTournamentIdFieldNumber = 19;
  inline ::google::protobuf::uint32 tournament_id() const;
  inline void set_tournament_id(::google::protobuf::uint32 value);

  // optional uint32 tournament_game_id = 20;
  inline bool has_tournament_game_id() const;
  inline void clear_tournament_game_id();
  static const int kTournamentGameIdFieldNumber = 20;
  inline ::google::protobuf::uint32 tournament_game_id() const;
  inline void set_tournament_game_id(::google::protobuf::uint32 value);

  // optional uint32 server_region = 21 [default = 0];
  inline bool has_server_region() const;
  inline void clear_server_region();
  static const int kServerRegionFieldNumber = 21;
  inline ::google::protobuf::uint32 server_region() const;
  inline void set_server_region(::google::protobuf::uint32 value);

  // optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
  inline bool has_game_state() const;
  inline void clear_game_state();
  static const int kGameStateFieldNumber = 22;
  inline ::DOTA_GameState game_state() const;
  inline void set_game_state(::DOTA_GameState value);

  // optional uint32 num_spectators = 23;
  inline bool has_num_spectators() const;
  inline void clear_num_spectators();
  static const int kNumSpectatorsFieldNumber = 23;
  inline ::google::protobuf::uint32 num_spectators() const;
  inline void set_num_spectators(::google::protobuf::uint32 value);

  // optional uint32 matchgroup = 25;
  inline bool has_matchgroup() const;
  inline void clear_matchgroup();
  static const int kMatchgroupFieldNumber = 25;
  inline ::google::protobuf::uint32 matchgroup() const;
  inline void set_matchgroup(::google::protobuf::uint32 value);

  // optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
  inline bool has_cm_pick() const;
  inline void clear_cm_pick();
  static const int kCmPickFieldNumber = 28;
  inline ::DOTA_CM_PICK cm_pick() const;
  inline void set_cm_pick(::DOTA_CM_PICK value);

  // optional uint64 match_id = 30;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 30;
  inline ::google::protobuf::uint64 match_id() const;
  inline void set_match_id(::google::protobuf::uint64 value);

  // optional bool allow_spectating = 31 [default = true];
  inline bool has_allow_spectating() const;
  inline void clear_allow_spectating();
  static const int kAllowSpectatingFieldNumber = 31;
  inline bool allow_spectating() const;
  inline void set_allow_spectating(bool value);

  // optional .DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
  inline bool has_bot_difficulty_radiant() const;
  inline void clear_bot_difficulty_radiant();
  static const int kBotDifficultyRadiantFieldNumber = 36;
  inline ::DOTABotDifficulty bot_difficulty_radiant() const;
  inline void set_bot_difficulty_radiant(::DOTABotDifficulty value);

  // optional .DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
  inline bool has_game_version() const;
  inline void clear_game_version();
  static const int kGameVersionFieldNumber = 37;
  inline ::DOTAGameVersion game_version() const;
  inline void set_game_version(::DOTAGameVersion value);

  // repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
  inline int timed_reward_details_size() const;
  inline void clear_timed_reward_details();
  static const int kTimedRewardDetailsFieldNumber = 38;
  inline const ::CLobbyTimedRewardDetails& timed_reward_details(int index) const;
  inline ::CLobbyTimedRewardDetails* mutable_timed_reward_details(int index);
  inline ::CLobbyTimedRewardDetails* add_timed_reward_details();
  inline const ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >&
      timed_reward_details() const;
  inline ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >*
      mutable_timed_reward_details();

  // optional string pass_key = 39;
  inline bool has_pass_key() const;
  inline void clear_pass_key();
  static const int kPassKeyFieldNumber = 39;
  inline const ::std::string& pass_key() const;
  inline void set_pass_key(const ::std::string& value);
  inline void set_pass_key(const char* value);
  inline void set_pass_key(const char* value, size_t size);
  inline ::std::string* mutable_pass_key();
  inline ::std::string* release_pass_key();
  inline void set_allocated_pass_key(::std::string* pass_key);

  // optional uint32 leagueid = 42;
  inline bool has_leagueid() const;
  inline void clear_leagueid();
  static const int kLeagueidFieldNumber = 42;
  inline ::google::protobuf::uint32 leagueid() const;
  inline void set_leagueid(::google::protobuf::uint32 value);

  // optional uint32 penalty_level_radiant = 43 [default = 0];
  inline bool has_penalty_level_radiant() const;
  inline void clear_penalty_level_radiant();
  static const int kPenaltyLevelRadiantFieldNumber = 43;
  inline ::google::protobuf::uint32 penalty_level_radiant() const;
  inline void set_penalty_level_radiant(::google::protobuf::uint32 value);

  // optional uint32 penalty_level_dire = 44 [default = 0];
  inline bool has_penalty_level_dire() const;
  inline void clear_penalty_level_dire();
  static const int kPenaltyLevelDireFieldNumber = 44;
  inline ::google::protobuf::uint32 penalty_level_dire() const;
  inline void set_penalty_level_dire(::google::protobuf::uint32 value);

  // optional uint32 load_game_id = 45;
  inline bool has_load_game_id() const;
  inline void clear_load_game_id();
  static const int kLoadGameIdFieldNumber = 45;
  inline ::google::protobuf::uint32 load_game_id() const;
  inline void set_load_game_id(::google::protobuf::uint32 value);

  // optional uint32 series_type = 46;
  inline bool has_series_type() const;
  inline void clear_series_type();
  static const int kSeriesTypeFieldNumber = 46;
  inline ::google::protobuf::uint32 series_type() const;
  inline void set_series_type(::google::protobuf::uint32 value);

  // optional uint32 radiant_series_wins = 47;
  inline bool has_radiant_series_wins() const;
  inline void clear_radiant_series_wins();
  static const int kRadiantSeriesWinsFieldNumber = 47;
  inline ::google::protobuf::uint32 radiant_series_wins() const;
  inline void set_radiant_series_wins(::google::protobuf::uint32 value);

  // optional uint32 dire_series_wins = 48;
  inline bool has_dire_series_wins() const;
  inline void clear_dire_series_wins();
  static const int kDireSeriesWinsFieldNumber = 48;
  inline ::google::protobuf::uint32 dire_series_wins() const;
  inline void set_dire_series_wins(::google::protobuf::uint32 value);

  // optional uint32 loot_generated = 49;
  inline bool has_loot_generated() const;
  inline void clear_loot_generated();
  static const int kLootGeneratedFieldNumber = 49;
  inline ::google::protobuf::uint32 loot_generated() const;
  inline void set_loot_generated(::google::protobuf::uint32 value);

  // optional uint32 loot_awarded = 50;
  inline bool has_loot_awarded() const;
  inline void clear_loot_awarded();
  static const int kLootAwardedFieldNumber = 50;
  inline ::google::protobuf::uint32 loot_awarded() const;
  inline void set_loot_awarded(::google::protobuf::uint32 value);

  // optional bool allchat = 51 [default = false];
  inline bool has_allchat() const;
  inline void clear_allchat();
  static const int kAllchatFieldNumber = 51;
  inline bool allchat() const;
  inline void set_allchat(bool value);

  // optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
  inline bool has_dota_tv_delay() const;
  inline void clear_dota_tv_delay();
  static const int kDotaTvDelayFieldNumber = 53;
  inline ::LobbyDotaTVDelay dota_tv_delay() const;
  inline void set_dota_tv_delay(::LobbyDotaTVDelay value);

  // optional string custom_game_mode = 54;
  inline bool has_custom_game_mode() const;
  inline void clear_custom_game_mode();
  static const int kCustomGameModeFieldNumber = 54;
  inline const ::std::string& custom_game_mode() const;
  inline void set_custom_game_mode(const ::std::string& value);
  inline void set_custom_game_mode(const char* value);
  inline void set_custom_game_mode(const char* value, size_t size);
  inline ::std::string* mutable_custom_game_mode();
  inline ::std::string* release_custom_game_mode();
  inline void set_allocated_custom_game_mode(::std::string* custom_game_mode);

  // optional string custom_map_name = 55;
  inline bool has_custom_map_name() const;
  inline void clear_custom_map_name();
  static const int kCustomMapNameFieldNumber = 55;
  inline const ::std::string& custom_map_name() const;
  inline void set_custom_map_name(const ::std::string& value);
  inline void set_custom_map_name(const char* value);
  inline void set_custom_map_name(const char* value, size_t size);
  inline ::std::string* mutable_custom_map_name();
  inline ::std::string* release_custom_map_name();
  inline void set_allocated_custom_map_name(::std::string* custom_map_name);

  // optional uint32 custom_difficulty = 56;
  inline bool has_custom_difficulty() const;
  inline void clear_custom_difficulty();
  static const int kCustomDifficultyFieldNumber = 56;
  inline ::google::protobuf::uint32 custom_difficulty() const;
  inline void set_custom_difficulty(::google::protobuf::uint32 value);

  // optional bool lan = 57;
  inline bool has_lan() const;
  inline void clear_lan();
  static const int kLanFieldNumber = 57;
  inline bool lan() const;
  inline void set_lan(bool value);

  // repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
  inline int broadcast_channel_info_size() const;
  inline void clear_broadcast_channel_info();
  static const int kBroadcastChannelInfoFieldNumber = 58;
  inline const ::CLobbyBroadcastChannelInfo& broadcast_channel_info(int index) const;
  inline ::CLobbyBroadcastChannelInfo* mutable_broadcast_channel_info(int index);
  inline ::CLobbyBroadcastChannelInfo* add_broadcast_channel_info();
  inline const ::google::protobuf::RepeatedPtrField< ::CLobbyBroadcastChannelInfo >&
      broadcast_channel_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::CLobbyBroadcastChannelInfo >*
      mutable_broadcast_channel_info();

  // optional uint32 first_leaver_accountid = 59;
  inline bool has_first_leaver_accountid() const;
  inline void clear_first_leaver_accountid();
  static const int kFirstLeaverAccountidFieldNumber = 59;
  inline ::google::protobuf::uint32 first_leaver_accountid() const;
  inline void set_first_leaver_accountid(::google::protobuf::uint32 value);

  // optional uint32 series_id = 60;
  inline bool has_series_id() const;
  inline void clear_series_id();
  static const int kSeriesIdFieldNumber = 60;
  inline ::google::protobuf::uint32 series_id() const;
  inline void set_series_id(::google::protobuf::uint32 value);

  // optional bool low_priority = 61;
  inline bool has_low_priority() const;
  inline void clear_low_priority();
  static const int kLowPriorityFieldNumber = 61;
  inline bool low_priority() const;
  inline void set_low_priority(bool value);

  // repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
  inline int extra_messages_size() const;
  inline void clear_extra_messages();
  static const int kExtraMessagesFieldNumber = 62;
  inline const ::CSODOTALobby_CExtraMsg& extra_messages(int index) const;
  inline ::CSODOTALobby_CExtraMsg* mutable_extra_messages(int index);
  inline ::CSODOTALobby_CExtraMsg* add_extra_messages();
  inline const ::google::protobuf::RepeatedPtrField< ::CSODOTALobby_CExtraMsg >&
      extra_messages() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSODOTALobby_CExtraMsg >*
      mutable_extra_messages();

  // optional .CDOTASaveGame save_game = 63;
  inline bool has_save_game() const;
  inline void clear_save_game();
  static const int kSaveGameFieldNumber = 63;
  inline const ::CDOTASaveGame& save_game() const;
  inline ::CDOTASaveGame* mutable_save_game();
  inline ::CDOTASaveGame* release_save_game();
  inline void set_allocated_save_game(::CDOTASaveGame* save_game);

  // optional bool first_blood_happened = 65;
  inline bool has_first_blood_happened() const;
  inline void clear_first_blood_happened();
  static const int kFirstBloodHappenedFieldNumber = 65;
  inline bool first_blood_happened() const;
  inline void set_first_blood_happened(bool value);

  // optional .EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
  inline bool has_match_outcome() const;
  inline void clear_match_outcome();
  static const int kMatchOutcomeFieldNumber = 70;
  inline ::EMatchOutcome match_outcome() const;
  inline void set_match_outcome(::EMatchOutcome value);

  // optional bool mass_disconnect = 67;
  inline bool has_mass_disconnect() const;
  inline void clear_mass_disconnect();
  static const int kMassDisconnectFieldNumber = 67;
  inline bool mass_disconnect() const;
  inline void set_mass_disconnect(bool value);

  // optional uint64 custom_game_id = 68;
  inline bool has_custom_game_id() const;
  inline void clear_custom_game_id();
  static const int kCustomGameIdFieldNumber = 68;
  inline ::google::protobuf::uint64 custom_game_id() const;
  inline void set_custom_game_id(::google::protobuf::uint64 value);

  // repeated .EEvent active_ingame_events = 69;
  inline int active_ingame_events_size() const;
  inline void clear_active_ingame_events();
  static const int kActiveIngameEventsFieldNumber = 69;
  inline ::EEvent active_ingame_events(int index) const;
  inline void set_active_ingame_events(int index, ::EEvent value);
  inline void add_active_ingame_events(::EEvent value);
  inline const ::google::protobuf::RepeatedField<int>& active_ingame_events() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_active_ingame_events();

  // optional uint32 custom_min_players = 71;
  inline bool has_custom_min_players() const;
  inline void clear_custom_min_players();
  static const int kCustomMinPlayersFieldNumber = 71;
  inline ::google::protobuf::uint32 custom_min_players() const;
  inline void set_custom_min_players(::google::protobuf::uint32 value);

  // optional uint32 custom_max_players = 72;
  inline bool has_custom_max_players() const;
  inline void clear_custom_max_players();
  static const int kCustomMaxPlayersFieldNumber = 72;
  inline ::google::protobuf::uint32 custom_max_players() const;
  inline void set_custom_max_players(::google::protobuf::uint32 value);

  // optional .PartnerAccountType partner_type = 73 [default = PARTNER_NONE];
  inline bool has_partner_type() const;
  inline void clear_partner_type();
  static const int kPartnerTypeFieldNumber = 73;
  inline ::PartnerAccountType partner_type() const;
  inline void set_partner_type(::PartnerAccountType value);

  // optional uint32 lan_host_ping_to_server_region = 74;
  inline bool has_lan_host_ping_to_server_region() const;
  inline void clear_lan_host_ping_to_server_region();
  static const int kLanHostPingToServerRegionFieldNumber = 74;
  inline ::google::protobuf::uint32 lan_host_ping_to_server_region() const;
  inline void set_lan_host_ping_to_server_region(::google::protobuf::uint32 value);

  // optional .DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
  inline bool has_visibility() const;
  inline void clear_visibility();
  static const int kVisibilityFieldNumber = 75;
  inline ::DOTALobbyVisibility visibility() const;
  inline void set_visibility(::DOTALobbyVisibility value);

  // optional fixed64 custom_game_crc = 76;
  inline bool has_custom_game_crc() const;
  inline void clear_custom_game_crc();
  static const int kCustomGameCrcFieldNumber = 76;
  inline ::google::protobuf::uint64 custom_game_crc() const;
  inline void set_custom_game_crc(::google::protobuf::uint64 value);

  // optional bool custom_game_auto_created_lobby = 77;
  inline bool has_custom_game_auto_created_lobby() const;
  inline void clear_custom_game_auto_created_lobby();
  static const int kCustomGameAutoCreatedLobbyFieldNumber = 77;
  inline bool custom_game_auto_created_lobby() const;
  inline void set_custom_game_auto_created_lobby(bool value);

  // optional uint32 league_series_id = 78;
  inline bool has_league_series_id() const;
  inline void clear_league_series_id();
  static const int kLeagueSeriesIdFieldNumber = 78;
  inline ::google::protobuf::uint32 league_series_id() const;
  inline void set_league_series_id(::google::protobuf::uint32 value);

  // optional uint32 league_game_id = 79;
  inline bool has_league_game_id() const;
  inline void clear_league_game_id();
  static const int kLeagueGameIdFieldNumber = 79;
  inline ::google::protobuf::uint32 league_game_id() const;
  inline void set_league_game_id(::google::protobuf::uint32 value);

  // optional fixed32 custom_game_timestamp = 80;
  inline bool has_custom_game_timestamp() const;
  inline void clear_custom_game_timestamp();
  static const int kCustomGameTimestampFieldNumber = 80;
  inline ::google::protobuf::uint32 custom_game_timestamp() const;
  inline void set_custom_game_timestamp(::google::protobuf::uint32 value);

  // repeated uint64 previous_series_matches = 81;
  inline int previous_series_matches_size() const;
  inline void clear_previous_series_matches();
  static const int kPreviousSeriesMatchesFieldNumber = 81;
  inline ::google::protobuf::uint64 previous_series_matches(int index) const;
  inline void set_previous_series_matches(int index, ::google::protobuf::uint64 value);
  inline void add_previous_series_matches(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      previous_series_matches() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_previous_series_matches();

  // optional uint64 previous_match_override = 82;
  inline bool has_previous_match_override() const;
  inline void clear_previous_match_override();
  static const int kPreviousMatchOverrideFieldNumber = 82;
  inline ::google::protobuf::uint64 previous_match_override() const;
  inline void set_previous_match_override(::google::protobuf::uint64 value);

  // optional bool custom_game_uses_account_records = 83;
  inline bool has_custom_game_uses_account_records() const;
  inline void clear_custom_game_uses_account_records();
  static const int kCustomGameUsesAccountRecordsFieldNumber = 83;
  inline bool custom_game_uses_account_records() const;
  inline void set_custom_game_uses_account_records(bool value);

  // optional uint32 league_selection_priority_team = 84;
  inline bool has_league_selection_priority_team() const;
  inline void clear_league_selection_priority_team();
  static const int kLeagueSelectionPriorityTeamFieldNumber = 84;
  inline ::google::protobuf::uint32 league_selection_priority_team() const;
  inline void set_league_selection_priority_team(::google::protobuf::uint32 value);

  // optional .SelectionPriorityType league_selection_priority_choice = 85 [default = UNDEFINED];
  inline bool has_league_selection_priority_choice() const;
  inline void clear_league_selection_priority_choice();
  static const int kLeagueSelectionPriorityChoiceFieldNumber = 85;
  inline ::SelectionPriorityType league_selection_priority_choice() const;
  inline void set_league_selection_priority_choice(::SelectionPriorityType value);

  // optional .SelectionPriorityType league_non_selection_priority_choice = 86 [default = UNDEFINED];
  inline bool has_league_non_selection_priority_choice() const;
  inline void clear_league_non_selection_priority_choice();
  static const int kLeagueNonSelectionPriorityChoiceFieldNumber = 86;
  inline ::SelectionPriorityType league_non_selection_priority_choice() const;
  inline void set_league_non_selection_priority_choice(::SelectionPriorityType value);

  // optional uint32 game_start_time = 87;
  inline bool has_game_start_time() const;
  inline void clear_game_start_time();
  static const int kGameStartTimeFieldNumber = 87;
  inline ::google::protobuf::uint32 game_start_time() const;
  inline void set_game_start_time(::google::protobuf::uint32 value);

  // optional .LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
  inline bool has_pause_setting() const;
  inline void clear_pause_setting();
  static const int kPauseSettingFieldNumber = 88;
  inline ::LobbyDotaPauseSetting pause_setting() const;
  inline void set_pause_setting(::LobbyDotaPauseSetting value);

  // optional uint32 lobby_mvp_account_id = 89;
  inline bool has_lobby_mvp_account_id() const;
  inline void clear_lobby_mvp_account_id();
  static const int kLobbyMvpAccountIdFieldNumber = 89;
  inline ::google::protobuf::uint32 lobby_mvp_account_id() const;
  inline void set_lobby_mvp_account_id(::google::protobuf::uint32 value);

  // optional uint32 weekend_tourney_division_id = 90;
  inline bool has_weekend_tourney_division_id() const;
  inline void clear_weekend_tourney_division_id();
  static const int kWeekendTourneyDivisionIdFieldNumber = 90;
  inline ::google::protobuf::uint32 weekend_tourney_division_id() const;
  inline void set_weekend_tourney_division_id(::google::protobuf::uint32 value);

  // optional uint32 weekend_tourney_skill_level = 91;
  inline bool has_weekend_tourney_skill_level() const;
  inline void clear_weekend_tourney_skill_level();
  static const int kWeekendTourneySkillLevelFieldNumber = 91;
  inline ::google::protobuf::uint32 weekend_tourney_skill_level() const;
  inline void set_weekend_tourney_skill_level(::google::protobuf::uint32 value);

  // optional uint32 weekend_tourney_bracket_round = 92;
  inline bool has_weekend_tourney_bracket_round() const;
  inline void clear_weekend_tourney_bracket_round();
  static const int kWeekendTourneyBracketRoundFieldNumber = 92;
  inline ::google::protobuf::uint32 weekend_tourney_bracket_round() const;
  inline void set_weekend_tourney_bracket_round(::google::protobuf::uint32 value);

  // optional .DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
  inline bool has_bot_difficulty_dire() const;
  inline void clear_bot_difficulty_dire();
  static const int kBotDifficultyDireFieldNumber = 93;
  inline ::DOTABotDifficulty bot_difficulty_dire() const;
  inline void set_bot_difficulty_dire(::DOTABotDifficulty value);

  // optional uint64 bot_radiant = 94;
  inline bool has_bot_radiant() const;
  inline void clear_bot_radiant();
  static const int kBotRadiantFieldNumber = 94;
  inline ::google::protobuf::uint64 bot_radiant() const;
  inline void set_bot_radiant(::google::protobuf::uint64 value);

  // optional uint64 bot_dire = 95;
  inline bool has_bot_dire() const;
  inline void clear_bot_dire();
  static const int kBotDireFieldNumber = 95;
  inline ::google::protobuf::uint64 bot_dire() const;
  inline void set_bot_dire(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CSODOTALobby)
 private:
  inline void set_has_lobby_id();
  inline void clear_has_lobby_id();
  inline void set_has_leader_id();
  inline void clear_has_leader_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_game_mode();
  inline void clear_has_game_mode();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_connect();
  inline void clear_has_connect();
  inline void set_has_lobby_type();
  inline void clear_has_lobby_type();
  inline void set_has_allow_cheats();
  inline void clear_has_allow_cheats();
  inline void set_has_fill_with_bots();
  inline void clear_has_fill_with_bots();
  inline void set_has_intro_mode();
  inline void clear_has_intro_mode();
  inline void set_has_game_name();
  inline void clear_has_game_name();
  inline void set_has_tutorial_lesson();
  inline void clear_has_tutorial_lesson();
  inline void set_has_tournament_id();
  inline void clear_has_tournament_id();
  inline void set_has_tournament_game_id();
  inline void clear_has_tournament_game_id();
  inline void set_has_server_region();
  inline void clear_has_server_region();
  inline void set_has_game_state();
  inline void clear_has_game_state();
  inline void set_has_num_spectators();
  inline void clear_has_num_spectators();
  inline void set_has_matchgroup();
  inline void clear_has_matchgroup();
  inline void set_has_cm_pick();
  inline void clear_has_cm_pick();
  inline void set_has_match_id();
  inline void clear_has_match_id();
  inline void set_has_allow_spectating();
  inline void clear_has_allow_spectating();
  inline void set_has_bot_difficulty_radiant();
  inline void clear_has_bot_difficulty_radiant();
  inline void set_has_game_version();
  inline void clear_has_game_version();
  inline void set_has_pass_key();
  inline void clear_has_pass_key();
  inline void set_has_leagueid();
  inline void clear_has_leagueid();
  inline void set_has_penalty_level_radiant();
  inline void clear_has_penalty_level_radiant();
  inline void set_has_penalty_level_dire();
  inline void clear_has_penalty_level_dire();
  inline void set_has_load_game_id();
  inline void clear_has_load_game_id();
  inline void set_has_series_type();
  inline void clear_has_series_type();
  inline void set_has_radiant_series_wins();
  inline void clear_has_radiant_series_wins();
  inline void set_has_dire_series_wins();
  inline void clear_has_dire_series_wins();
  inline void set_has_loot_generated();
  inline void clear_has_loot_generated();
  inline void set_has_loot_awarded();
  inline void clear_has_loot_awarded();
  inline void set_has_allchat();
  inline void clear_has_allchat();
  inline void set_has_dota_tv_delay();
  inline void clear_has_dota_tv_delay();
  inline void set_has_custom_game_mode();
  inline void clear_has_custom_game_mode();
  inline void set_has_custom_map_name();
  inline void clear_has_custom_map_name();
  inline void set_has_custom_difficulty();
  inline void clear_has_custom_difficulty();
  inline void set_has_lan();
  inline void clear_has_lan();
  inline void set_has_first_leaver_accountid();
  inline void clear_has_first_leaver_accountid();
  inline void set_has_series_id();
  inline void clear_has_series_id();
  inline void set_has_low_priority();
  inline void clear_has_low_priority();
  inline void set_has_save_game();
  inline void clear_has_save_game();
  inline void set_has_first_blood_happened();
  inline void clear_has_first_blood_happened();
  inline void set_has_match_outcome();
  inline void clear_has_match_outcome();
  inline void set_has_mass_disconnect();
  inline void clear_has_mass_disconnect();
  inline void set_has_custom_game_id();
  inline void clear_has_custom_game_id();
  inline void set_has_custom_min_players();
  inline void clear_has_custom_min_players();
  inline void set_has_custom_max_players();
  inline void clear_has_custom_max_players();
  inline void set_has_partner_type();
  inline void clear_has_partner_type();
  inline void set_has_lan_host_ping_to_server_region();
  inline void clear_has_lan_host_ping_to_server_region();
  inline void set_has_visibility();
  inline void clear_has_visibility();
  inline void set_has_custom_game_crc();
  inline void clear_has_custom_game_crc();
  inline void set_has_custom_game_auto_created_lobby();
  inline void clear_has_custom_game_auto_created_lobby();
  inline void set_has_league_series_id();
  inline void clear_has_league_series_id();
  inline void set_has_league_game_id();
  inline void clear_has_league_game_id();
  inline void set_has_custom_game_timestamp();
  inline void clear_has_custom_game_timestamp();
  inline void set_has_previous_match_override();
  inline void clear_has_previous_match_override();
  inline void set_has_custom_game_uses_account_records();
  inline void clear_has_custom_game_uses_account_records();
  inline void set_has_league_selection_priority_team();
  inline void clear_has_league_selection_priority_team();
  inline void set_has_league_selection_priority_choice();
  inline void clear_has_league_selection_priority_choice();
  inline void set_has_league_non_selection_priority_choice();
  inline void clear_has_league_non_selection_priority_choice();
  inline void set_has_game_start_time();
  inline void clear_has_game_start_time();
  inline void set_has_pause_setting();
  inline void clear_has_pause_setting();
  inline void set_has_lobby_mvp_account_id();
  inline void clear_has_lobby_mvp_account_id();
  inline void set_has_weekend_tourney_division_id();
  inline void clear_has_weekend_tourney_division_id();
  inline void set_has_weekend_tourney_skill_level();
  inline void clear_has_weekend_tourney_skill_level();
  inline void set_has_weekend_tourney_bracket_round();
  inline void clear_has_weekend_tourney_bracket_round();
  inline void set_has_bot_difficulty_dire();
  inline void clear_has_bot_difficulty_dire();
  inline void set_has_bot_radiant();
  inline void clear_has_bot_radiant();
  inline void set_has_bot_dire();
  inline void clear_has_bot_dire();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[3];
  mutable int _cached_size_;
  ::google::protobuf::uint64 lobby_id_;
  ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember > members_;
  ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember > left_members_;
  ::google::protobuf::uint64 leader_id_;
  ::google::protobuf::uint64 server_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > pending_invites_;
  ::google::protobuf::uint32 game_mode_;
  int state_;
  ::std::string* connect_;
  ::std::string* game_name_;
  int lobby_type_;
  bool allow_cheats_;
  bool fill_with_bots_;
  bool intro_mode_;
  bool allow_spectating_;
  ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails > team_details_;
  ::google::protobuf::uint32 tutorial_lesson_;
  ::google::protobuf::uint32 tournament_id_;
  ::google::protobuf::uint32 tournament_game_id_;
  ::google::protobuf::uint32 server_region_;
  int game_state_;
  ::google::protobuf::uint32 num_spectators_;
  ::google::protobuf::uint32 matchgroup_;
  int cm_pick_;
  ::google::protobuf::uint64 match_id_;
  int bot_difficulty_radiant_;
  int game_version_;
  ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails > timed_reward_details_;
  ::std::string* pass_key_;
  ::google::protobuf::uint32 leagueid_;
  ::google::protobuf::uint32 penalty_level_radiant_;
  ::google::protobuf::uint32 penalty_level_dire_;
  ::google::protobuf::uint32 load_game_id_;
  ::google::protobuf::uint32 series_type_;
  ::google::protobuf::uint32 radiant_series_wins_;
  ::google::protobuf::uint32 dire_series_wins_;
  ::google::protobuf::uint32 loot_generated_;
  ::google::protobuf::uint32 loot_awarded_;
  int dota_tv_delay_;
  ::std::string* custom_game_mode_;
  ::std::string* custom_map_name_;
  ::google::protobuf::RepeatedPtrField< ::CLobbyBroadcastChannelInfo > broadcast_channel_info_;
  ::google::protobuf::uint32 custom_difficulty_;
  bool allchat_;
  bool lan_;
  bool low_priority_;
  bool first_blood_happened_;
  ::google::protobuf::uint32 first_leaver_accountid_;
  ::google::protobuf::uint32 series_id_;
  ::google::protobuf::RepeatedPtrField< ::CSODOTALobby_CExtraMsg > extra_messages_;
  ::CDOTASaveGame* save_game_;
  ::google::protobuf::uint64 custom_game_id_;
  int match_outcome_;
  ::google::protobuf::uint32 custom_min_players_;
  ::google::protobuf::RepeatedField<int> active_ingame_events_;
  ::google::protobuf::uint32 custom_max_players_;
  int partner_type_;
  ::google::protobuf::uint32 lan_host_ping_to_server_region_;
  int visibility_;
  ::google::protobuf::uint64 custom_game_crc_;
  bool mass_disconnect_;
  bool custom_game_auto_created_lobby_;
  bool custom_game_uses_account_records_;
  ::google::protobuf::uint32 league_series_id_;
  ::google::protobuf::uint32 league_game_id_;
  ::google::protobuf::uint32 custom_game_timestamp_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > previous_series_matches_;
  ::google::protobuf::uint64 previous_match_override_;
  ::google::protobuf::uint32 league_selection_priority_team_;
  int league_selection_priority_choice_;
  int league_non_selection_priority_choice_;
  ::google::protobuf::uint32 game_start_time_;
  int pause_setting_;
  ::google::protobuf::uint32 lobby_mvp_account_id_;
  ::google::protobuf::uint32 weekend_tourney_division_id_;
  ::google::protobuf::uint32 weekend_tourney_skill_level_;
  ::google::protobuf::uint32 weekend_tourney_bracket_round_;
  int bot_difficulty_dire_;
  ::google::protobuf::uint64 bot_radiant_;
  ::google::protobuf::uint64 bot_dire_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CSODOTALobby* default_instance_;
};
// -------------------------------------------------------------------

class CMsgLobbyPlaytestDetails : public ::google::protobuf::Message {
 public:
  CMsgLobbyPlaytestDetails();
  virtual ~CMsgLobbyPlaytestDetails();

  CMsgLobbyPlaytestDetails(const CMsgLobbyPlaytestDetails& from);

  inline CMsgLobbyPlaytestDetails& operator=(const CMsgLobbyPlaytestDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgLobbyPlaytestDetails& default_instance();

  void Swap(CMsgLobbyPlaytestDetails* other);

  // implements Message ----------------------------------------------

  CMsgLobbyPlaytestDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgLobbyPlaytestDetails& from);
  void MergeFrom(const CMsgLobbyPlaytestDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string json = 1;
  inline bool has_json() const;
  inline void clear_json();
  static const int kJsonFieldNumber = 1;
  inline const ::std::string& json() const;
  inline void set_json(const ::std::string& value);
  inline void set_json(const char* value);
  inline void set_json(const char* value, size_t size);
  inline ::std::string* mutable_json();
  inline ::std::string* release_json();
  inline void set_allocated_json(::std::string* json);

  // @@protoc_insertion_point(class_scope:CMsgLobbyPlaytestDetails)
 private:
  inline void set_has_json();
  inline void clear_has_json();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* json_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgLobbyPlaytestDetails* default_instance_;
};
// ===================================================================


// ===================================================================

// CSODOTAPartyMember

// optional .PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
inline bool CSODOTAPartyMember::has_partner_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAPartyMember::set_has_partner_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAPartyMember::clear_has_partner_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAPartyMember::clear_partner_type() {
  partner_type_ = 0;
  clear_has_partner_type();
}
inline ::PartnerAccountType CSODOTAPartyMember::partner_type() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.partner_type)
  return static_cast< ::PartnerAccountType >(partner_type_);
}
inline void CSODOTAPartyMember::set_partner_type(::PartnerAccountType value) {
  assert(::PartnerAccountType_IsValid(value));
  set_has_partner_type();
  partner_type_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.partner_type)
}

// optional bool is_coach = 2;
inline bool CSODOTAPartyMember::has_is_coach() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAPartyMember::set_has_is_coach() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAPartyMember::clear_has_is_coach() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAPartyMember::clear_is_coach() {
  is_coach_ = false;
  clear_has_is_coach();
}
inline bool CSODOTAPartyMember::is_coach() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.is_coach)
  return is_coach_;
}
inline void CSODOTAPartyMember::set_is_coach(bool value) {
  set_has_is_coach();
  is_coach_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.is_coach)
}

// repeated uint32 region_ping_codes = 4 [packed = true];
inline int CSODOTAPartyMember::region_ping_codes_size() const {
  return region_ping_codes_.size();
}
inline void CSODOTAPartyMember::clear_region_ping_codes() {
  region_ping_codes_.Clear();
}
inline ::google::protobuf::uint32 CSODOTAPartyMember::region_ping_codes(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.region_ping_codes)
  return region_ping_codes_.Get(index);
}
inline void CSODOTAPartyMember::set_region_ping_codes(int index, ::google::protobuf::uint32 value) {
  region_ping_codes_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.region_ping_codes)
}
inline void CSODOTAPartyMember::add_region_ping_codes(::google::protobuf::uint32 value) {
  region_ping_codes_.Add(value);
  // @@protoc_insertion_point(field_add:CSODOTAPartyMember.region_ping_codes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CSODOTAPartyMember::region_ping_codes() const {
  // @@protoc_insertion_point(field_list:CSODOTAPartyMember.region_ping_codes)
  return region_ping_codes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CSODOTAPartyMember::mutable_region_ping_codes() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAPartyMember.region_ping_codes)
  return &region_ping_codes_;
}

// repeated uint32 region_ping_times = 5 [packed = true];
inline int CSODOTAPartyMember::region_ping_times_size() const {
  return region_ping_times_.size();
}
inline void CSODOTAPartyMember::clear_region_ping_times() {
  region_ping_times_.Clear();
}
inline ::google::protobuf::uint32 CSODOTAPartyMember::region_ping_times(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.region_ping_times)
  return region_ping_times_.Get(index);
}
inline void CSODOTAPartyMember::set_region_ping_times(int index, ::google::protobuf::uint32 value) {
  region_ping_times_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.region_ping_times)
}
inline void CSODOTAPartyMember::add_region_ping_times(::google::protobuf::uint32 value) {
  region_ping_times_.Add(value);
  // @@protoc_insertion_point(field_add:CSODOTAPartyMember.region_ping_times)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CSODOTAPartyMember::region_ping_times() const {
  // @@protoc_insertion_point(field_list:CSODOTAPartyMember.region_ping_times)
  return region_ping_times_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CSODOTAPartyMember::mutable_region_ping_times() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAPartyMember.region_ping_times)
  return &region_ping_times_;
}

// optional uint32 region_ping_failed_bitmask = 6;
inline bool CSODOTAPartyMember::has_region_ping_failed_bitmask() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTAPartyMember::set_has_region_ping_failed_bitmask() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSODOTAPartyMember::clear_has_region_ping_failed_bitmask() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSODOTAPartyMember::clear_region_ping_failed_bitmask() {
  region_ping_failed_bitmask_ = 0u;
  clear_has_region_ping_failed_bitmask();
}
inline ::google::protobuf::uint32 CSODOTAPartyMember::region_ping_failed_bitmask() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.region_ping_failed_bitmask)
  return region_ping_failed_bitmask_;
}
inline void CSODOTAPartyMember::set_region_ping_failed_bitmask(::google::protobuf::uint32 value) {
  set_has_region_ping_failed_bitmask();
  region_ping_failed_bitmask_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.region_ping_failed_bitmask)
}

// optional uint32 tourney_skill_level = 7;
inline bool CSODOTAPartyMember::has_tourney_skill_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTAPartyMember::set_has_tourney_skill_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSODOTAPartyMember::clear_has_tourney_skill_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSODOTAPartyMember::clear_tourney_skill_level() {
  tourney_skill_level_ = 0u;
  clear_has_tourney_skill_level();
}
inline ::google::protobuf::uint32 CSODOTAPartyMember::tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.tourney_skill_level)
  return tourney_skill_level_;
}
inline void CSODOTAPartyMember::set_tourney_skill_level(::google::protobuf::uint32 value) {
  set_has_tourney_skill_level();
  tourney_skill_level_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.tourney_skill_level)
}

// optional uint32 tourney_buyin = 8;
inline bool CSODOTAPartyMember::has_tourney_buyin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSODOTAPartyMember::set_has_tourney_buyin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSODOTAPartyMember::clear_has_tourney_buyin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSODOTAPartyMember::clear_tourney_buyin() {
  tourney_buyin_ = 0u;
  clear_has_tourney_buyin();
}
inline ::google::protobuf::uint32 CSODOTAPartyMember::tourney_buyin() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.tourney_buyin)
  return tourney_buyin_;
}
inline void CSODOTAPartyMember::set_tourney_buyin(::google::protobuf::uint32 value) {
  set_has_tourney_buyin();
  tourney_buyin_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.tourney_buyin)
}

// optional uint32 tourney_prevent_until = 9;
inline bool CSODOTAPartyMember::has_tourney_prevent_until() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSODOTAPartyMember::set_has_tourney_prevent_until() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSODOTAPartyMember::clear_has_tourney_prevent_until() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSODOTAPartyMember::clear_tourney_prevent_until() {
  tourney_prevent_until_ = 0u;
  clear_has_tourney_prevent_until();
}
inline ::google::protobuf::uint32 CSODOTAPartyMember::tourney_prevent_until() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.tourney_prevent_until)
  return tourney_prevent_until_;
}
inline void CSODOTAPartyMember::set_tourney_prevent_until(::google::protobuf::uint32 value) {
  set_has_tourney_prevent_until();
  tourney_prevent_until_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.tourney_prevent_until)
}

// -------------------------------------------------------------------

// CSODOTAParty

// optional uint64 party_id = 1;
inline bool CSODOTAParty::has_party_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAParty::set_has_party_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAParty::clear_has_party_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAParty::clear_party_id() {
  party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_party_id();
}
inline ::google::protobuf::uint64 CSODOTAParty::party_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.party_id)
  return party_id_;
}
inline void CSODOTAParty::set_party_id(::google::protobuf::uint64 value) {
  set_has_party_id();
  party_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.party_id)
}

// optional fixed64 leader_id = 2;
inline bool CSODOTAParty::has_leader_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAParty::set_has_leader_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAParty::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAParty::clear_leader_id() {
  leader_id_ = GOOGLE_ULONGLONG(0);
  clear_has_leader_id();
}
inline ::google::protobuf::uint64 CSODOTAParty::leader_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.leader_id)
  return leader_id_;
}
inline void CSODOTAParty::set_leader_id(::google::protobuf::uint64 value) {
  set_has_leader_id();
  leader_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.leader_id)
}

// repeated fixed64 member_ids = 3;
inline int CSODOTAParty::member_ids_size() const {
  return member_ids_.size();
}
inline void CSODOTAParty::clear_member_ids() {
  member_ids_.Clear();
}
inline ::google::protobuf::uint64 CSODOTAParty::member_ids(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.member_ids)
  return member_ids_.Get(index);
}
inline void CSODOTAParty::set_member_ids(int index, ::google::protobuf::uint64 value) {
  member_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.member_ids)
}
inline void CSODOTAParty::add_member_ids(::google::protobuf::uint64 value) {
  member_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CSODOTAParty.member_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CSODOTAParty::member_ids() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.member_ids)
  return member_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CSODOTAParty::mutable_member_ids() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.member_ids)
  return &member_ids_;
}

// optional uint32 game_modes = 4;
inline bool CSODOTAParty::has_game_modes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSODOTAParty::set_has_game_modes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSODOTAParty::clear_has_game_modes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSODOTAParty::clear_game_modes() {
  game_modes_ = 0u;
  clear_has_game_modes();
}
inline ::google::protobuf::uint32 CSODOTAParty::game_modes() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.game_modes)
  return game_modes_;
}
inline void CSODOTAParty::set_game_modes(::google::protobuf::uint32 value) {
  set_has_game_modes();
  game_modes_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.game_modes)
}

// optional .CSODOTAParty.State state = 6 [default = UI];
inline bool CSODOTAParty::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTAParty::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSODOTAParty::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSODOTAParty::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::CSODOTAParty_State CSODOTAParty::state() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.state)
  return static_cast< ::CSODOTAParty_State >(state_);
}
inline void CSODOTAParty::set_state(::CSODOTAParty_State value) {
  assert(::CSODOTAParty_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.state)
}

// optional uint32 effective_started_matchmaking_time = 7;
inline bool CSODOTAParty::has_effective_started_matchmaking_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTAParty::set_has_effective_started_matchmaking_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSODOTAParty::clear_has_effective_started_matchmaking_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSODOTAParty::clear_effective_started_matchmaking_time() {
  effective_started_matchmaking_time_ = 0u;
  clear_has_effective_started_matchmaking_time();
}
inline ::google::protobuf::uint32 CSODOTAParty::effective_started_matchmaking_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.effective_started_matchmaking_time)
  return effective_started_matchmaking_time_;
}
inline void CSODOTAParty::set_effective_started_matchmaking_time(::google::protobuf::uint32 value) {
  set_has_effective_started_matchmaking_time();
  effective_started_matchmaking_time_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.effective_started_matchmaking_time)
}

// optional uint32 raw_started_matchmaking_time = 32;
inline bool CSODOTAParty::has_raw_started_matchmaking_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSODOTAParty::set_has_raw_started_matchmaking_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSODOTAParty::clear_has_raw_started_matchmaking_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSODOTAParty::clear_raw_started_matchmaking_time() {
  raw_started_matchmaking_time_ = 0u;
  clear_has_raw_started_matchmaking_time();
}
inline ::google::protobuf::uint32 CSODOTAParty::raw_started_matchmaking_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.raw_started_matchmaking_time)
  return raw_started_matchmaking_time_;
}
inline void CSODOTAParty::set_raw_started_matchmaking_time(::google::protobuf::uint32 value) {
  set_has_raw_started_matchmaking_time();
  raw_started_matchmaking_time_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.raw_started_matchmaking_time)
}

// optional uint32 attempt_start_time = 33;
inline bool CSODOTAParty::has_attempt_start_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSODOTAParty::set_has_attempt_start_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSODOTAParty::clear_has_attempt_start_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSODOTAParty::clear_attempt_start_time() {
  attempt_start_time_ = 0u;
  clear_has_attempt_start_time();
}
inline ::google::protobuf::uint32 CSODOTAParty::attempt_start_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.attempt_start_time)
  return attempt_start_time_;
}
inline void CSODOTAParty::set_attempt_start_time(::google::protobuf::uint32 value) {
  set_has_attempt_start_time();
  attempt_start_time_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.attempt_start_time)
}

// optional uint32 attempt_num = 34;
inline bool CSODOTAParty::has_attempt_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSODOTAParty::set_has_attempt_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSODOTAParty::clear_has_attempt_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSODOTAParty::clear_attempt_num() {
  attempt_num_ = 0u;
  clear_has_attempt_num();
}
inline ::google::protobuf::uint32 CSODOTAParty::attempt_num() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.attempt_num)
  return attempt_num_;
}
inline void CSODOTAParty::set_attempt_num(::google::protobuf::uint32 value) {
  set_has_attempt_num();
  attempt_num_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.attempt_num)
}

// optional uint32 matchgroups = 11;
inline bool CSODOTAParty::has_matchgroups() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSODOTAParty::set_has_matchgroups() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSODOTAParty::clear_has_matchgroups() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSODOTAParty::clear_matchgroups() {
  matchgroups_ = 0u;
  clear_has_matchgroups();
}
inline ::google::protobuf::uint32 CSODOTAParty::matchgroups() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.matchgroups)
  return matchgroups_;
}
inline void CSODOTAParty::set_matchgroups(::google::protobuf::uint32 value) {
  set_has_matchgroups();
  matchgroups_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.matchgroups)
}

// optional uint32 low_priority_account_id = 19;
inline bool CSODOTAParty::has_low_priority_account_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSODOTAParty::set_has_low_priority_account_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSODOTAParty::clear_has_low_priority_account_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSODOTAParty::clear_low_priority_account_id() {
  low_priority_account_id_ = 0u;
  clear_has_low_priority_account_id();
}
inline ::google::protobuf::uint32 CSODOTAParty::low_priority_account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.low_priority_account_id)
  return low_priority_account_id_;
}
inline void CSODOTAParty::set_low_priority_account_id(::google::protobuf::uint32 value) {
  set_has_low_priority_account_id();
  low_priority_account_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.low_priority_account_id)
}

// optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
inline bool CSODOTAParty::has_match_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSODOTAParty::set_has_match_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CSODOTAParty::clear_has_match_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CSODOTAParty::clear_match_type() {
  match_type_ = 0;
  clear_has_match_type();
}
inline ::MatchType CSODOTAParty::match_type() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.match_type)
  return static_cast< ::MatchType >(match_type_);
}
inline void CSODOTAParty::set_match_type(::MatchType value) {
  assert(::MatchType_IsValid(value));
  set_has_match_type();
  match_type_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.match_type)
}

// optional .DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
inline bool CSODOTAParty::has_bot_difficulty() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSODOTAParty::set_has_bot_difficulty() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CSODOTAParty::clear_has_bot_difficulty() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CSODOTAParty::clear_bot_difficulty() {
  bot_difficulty_ = 0;
  clear_has_bot_difficulty();
}
inline ::DOTABotDifficulty CSODOTAParty::bot_difficulty() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.bot_difficulty)
  return static_cast< ::DOTABotDifficulty >(bot_difficulty_);
}
inline void CSODOTAParty::set_bot_difficulty(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty();
  bot_difficulty_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.bot_difficulty)
}

// optional uint32 team_id = 23;
inline bool CSODOTAParty::has_team_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CSODOTAParty::set_has_team_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CSODOTAParty::clear_has_team_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CSODOTAParty::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CSODOTAParty::team_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.team_id)
  return team_id_;
}
inline void CSODOTAParty::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.team_id)
}

// optional string team_name = 51;
inline bool CSODOTAParty::has_team_name() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CSODOTAParty::set_has_team_name() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CSODOTAParty::clear_has_team_name() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CSODOTAParty::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& CSODOTAParty::team_name() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.team_name)
  return *team_name_;
}
inline void CSODOTAParty::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.team_name)
}
inline void CSODOTAParty::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSODOTAParty.team_name)
}
inline void CSODOTAParty::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSODOTAParty.team_name)
}
inline ::std::string* CSODOTAParty::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSODOTAParty.team_name)
  return team_name_;
}
inline ::std::string* CSODOTAParty::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSODOTAParty::set_allocated_team_name(::std::string* team_name) {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_;
  }
  if (team_name) {
    set_has_team_name();
    team_name_ = team_name;
  } else {
    clear_has_team_name();
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSODOTAParty.team_name)
}

// optional uint64 team_ui_logo = 52;
inline bool CSODOTAParty::has_team_ui_logo() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CSODOTAParty::set_has_team_ui_logo() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CSODOTAParty::clear_has_team_ui_logo() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CSODOTAParty::clear_team_ui_logo() {
  team_ui_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_ui_logo();
}
inline ::google::protobuf::uint64 CSODOTAParty::team_ui_logo() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.team_ui_logo)
  return team_ui_logo_;
}
inline void CSODOTAParty::set_team_ui_logo(::google::protobuf::uint64 value) {
  set_has_team_ui_logo();
  team_ui_logo_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.team_ui_logo)
}

// optional uint64 team_base_logo = 53;
inline bool CSODOTAParty::has_team_base_logo() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CSODOTAParty::set_has_team_base_logo() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CSODOTAParty::clear_has_team_base_logo() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CSODOTAParty::clear_team_base_logo() {
  team_base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_base_logo();
}
inline ::google::protobuf::uint64 CSODOTAParty::team_base_logo() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.team_base_logo)
  return team_base_logo_;
}
inline void CSODOTAParty::set_team_base_logo(::google::protobuf::uint64 value) {
  set_has_team_base_logo();
  team_base_logo_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.team_base_logo)
}

// optional uint32 match_disabled_until_date = 24;
inline bool CSODOTAParty::has_match_disabled_until_date() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CSODOTAParty::set_has_match_disabled_until_date() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CSODOTAParty::clear_has_match_disabled_until_date() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CSODOTAParty::clear_match_disabled_until_date() {
  match_disabled_until_date_ = 0u;
  clear_has_match_disabled_until_date();
}
inline ::google::protobuf::uint32 CSODOTAParty::match_disabled_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.match_disabled_until_date)
  return match_disabled_until_date_;
}
inline void CSODOTAParty::set_match_disabled_until_date(::google::protobuf::uint32 value) {
  set_has_match_disabled_until_date();
  match_disabled_until_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.match_disabled_until_date)
}

// optional uint32 match_disabled_account_id = 25;
inline bool CSODOTAParty::has_match_disabled_account_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CSODOTAParty::set_has_match_disabled_account_id() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CSODOTAParty::clear_has_match_disabled_account_id() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CSODOTAParty::clear_match_disabled_account_id() {
  match_disabled_account_id_ = 0u;
  clear_has_match_disabled_account_id();
}
inline ::google::protobuf::uint32 CSODOTAParty::match_disabled_account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.match_disabled_account_id)
  return match_disabled_account_id_;
}
inline void CSODOTAParty::set_match_disabled_account_id(::google::protobuf::uint32 value) {
  set_has_match_disabled_account_id();
  match_disabled_account_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.match_disabled_account_id)
}

// optional uint32 matchmaking_max_range_minutes = 26;
inline bool CSODOTAParty::has_matchmaking_max_range_minutes() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CSODOTAParty::set_has_matchmaking_max_range_minutes() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CSODOTAParty::clear_has_matchmaking_max_range_minutes() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CSODOTAParty::clear_matchmaking_max_range_minutes() {
  matchmaking_max_range_minutes_ = 0u;
  clear_has_matchmaking_max_range_minutes();
}
inline ::google::protobuf::uint32 CSODOTAParty::matchmaking_max_range_minutes() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.matchmaking_max_range_minutes)
  return matchmaking_max_range_minutes_;
}
inline void CSODOTAParty::set_matchmaking_max_range_minutes(::google::protobuf::uint32 value) {
  set_has_matchmaking_max_range_minutes();
  matchmaking_max_range_minutes_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.matchmaking_max_range_minutes)
}

// optional uint32 matchlanguages = 27;
inline bool CSODOTAParty::has_matchlanguages() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CSODOTAParty::set_has_matchlanguages() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CSODOTAParty::clear_has_matchlanguages() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CSODOTAParty::clear_matchlanguages() {
  matchlanguages_ = 0u;
  clear_has_matchlanguages();
}
inline ::google::protobuf::uint32 CSODOTAParty::matchlanguages() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.matchlanguages)
  return matchlanguages_;
}
inline void CSODOTAParty::set_matchlanguages(::google::protobuf::uint32 value) {
  set_has_matchlanguages();
  matchlanguages_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.matchlanguages)
}

// optional uint32 map_preference = 38;
inline bool CSODOTAParty::has_map_preference() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CSODOTAParty::set_has_map_preference() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CSODOTAParty::clear_has_map_preference() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CSODOTAParty::clear_map_preference() {
  map_preference_ = 0u;
  clear_has_map_preference();
}
inline ::google::protobuf::uint32 CSODOTAParty::map_preference() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.map_preference)
  return map_preference_;
}
inline void CSODOTAParty::set_map_preference(::google::protobuf::uint32 value) {
  set_has_map_preference();
  map_preference_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.map_preference)
}

// repeated .CSODOTAPartyMember members = 29;
inline int CSODOTAParty::members_size() const {
  return members_.size();
}
inline void CSODOTAParty::clear_members() {
  members_.Clear();
}
inline const ::CSODOTAPartyMember& CSODOTAParty::members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.members)
  return members_.Get(index);
}
inline ::CSODOTAPartyMember* CSODOTAParty::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTAParty.members)
  return members_.Mutable(index);
}
inline ::CSODOTAPartyMember* CSODOTAParty::add_members() {
  // @@protoc_insertion_point(field_add:CSODOTAParty.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyMember >&
CSODOTAParty::members() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyMember >*
CSODOTAParty::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.members)
  return &members_;
}

// optional uint32 open_guild_id = 30;
inline bool CSODOTAParty::has_open_guild_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CSODOTAParty::set_has_open_guild_id() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CSODOTAParty::clear_has_open_guild_id() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CSODOTAParty::clear_open_guild_id() {
  open_guild_id_ = 0u;
  clear_has_open_guild_id();
}
inline ::google::protobuf::uint32 CSODOTAParty::open_guild_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.open_guild_id)
  return open_guild_id_;
}
inline void CSODOTAParty::set_open_guild_id(::google::protobuf::uint32 value) {
  set_has_open_guild_id();
  open_guild_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.open_guild_id)
}

// repeated uint32 common_guilds = 31;
inline int CSODOTAParty::common_guilds_size() const {
  return common_guilds_.size();
}
inline void CSODOTAParty::clear_common_guilds() {
  common_guilds_.Clear();
}
inline ::google::protobuf::uint32 CSODOTAParty::common_guilds(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.common_guilds)
  return common_guilds_.Get(index);
}
inline void CSODOTAParty::set_common_guilds(int index, ::google::protobuf::uint32 value) {
  common_guilds_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.common_guilds)
}
inline void CSODOTAParty::add_common_guilds(::google::protobuf::uint32 value) {
  common_guilds_.Add(value);
  // @@protoc_insertion_point(field_add:CSODOTAParty.common_guilds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CSODOTAParty::common_guilds() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.common_guilds)
  return common_guilds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CSODOTAParty::mutable_common_guilds() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.common_guilds)
  return &common_guilds_;
}

// optional uint32 low_priority_games_remaining = 35;
inline bool CSODOTAParty::has_low_priority_games_remaining() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CSODOTAParty::set_has_low_priority_games_remaining() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CSODOTAParty::clear_has_low_priority_games_remaining() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CSODOTAParty::clear_low_priority_games_remaining() {
  low_priority_games_remaining_ = 0u;
  clear_has_low_priority_games_remaining();
}
inline ::google::protobuf::uint32 CSODOTAParty::low_priority_games_remaining() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.low_priority_games_remaining)
  return low_priority_games_remaining_;
}
inline void CSODOTAParty::set_low_priority_games_remaining(::google::protobuf::uint32 value) {
  set_has_low_priority_games_remaining();
  low_priority_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.low_priority_games_remaining)
}

// repeated .EEvent active_ingame_events = 39;
inline int CSODOTAParty::active_ingame_events_size() const {
  return active_ingame_events_.size();
}
inline void CSODOTAParty::clear_active_ingame_events() {
  active_ingame_events_.Clear();
}
inline ::EEvent CSODOTAParty::active_ingame_events(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.active_ingame_events)
  return static_cast< ::EEvent >(active_ingame_events_.Get(index));
}
inline void CSODOTAParty::set_active_ingame_events(int index, ::EEvent value) {
  assert(::EEvent_IsValid(value));
  active_ingame_events_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.active_ingame_events)
}
inline void CSODOTAParty::add_active_ingame_events(::EEvent value) {
  assert(::EEvent_IsValid(value));
  active_ingame_events_.Add(value);
  // @@protoc_insertion_point(field_add:CSODOTAParty.active_ingame_events)
}
inline const ::google::protobuf::RepeatedField<int>&
CSODOTAParty::active_ingame_events() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.active_ingame_events)
  return active_ingame_events_;
}
inline ::google::protobuf::RepeatedField<int>*
CSODOTAParty::mutable_active_ingame_events() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.active_ingame_events)
  return &active_ingame_events_;
}

// optional bool open_for_join_requests = 40;
inline bool CSODOTAParty::has_open_for_join_requests() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CSODOTAParty::set_has_open_for_join_requests() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CSODOTAParty::clear_has_open_for_join_requests() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CSODOTAParty::clear_open_for_join_requests() {
  open_for_join_requests_ = false;
  clear_has_open_for_join_requests();
}
inline bool CSODOTAParty::open_for_join_requests() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.open_for_join_requests)
  return open_for_join_requests_;
}
inline void CSODOTAParty::set_open_for_join_requests(bool value) {
  set_has_open_for_join_requests();
  open_for_join_requests_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.open_for_join_requests)
}

// repeated .CSODOTAPartyInvite sent_invites = 41;
inline int CSODOTAParty::sent_invites_size() const {
  return sent_invites_.size();
}
inline void CSODOTAParty::clear_sent_invites() {
  sent_invites_.Clear();
}
inline const ::CSODOTAPartyInvite& CSODOTAParty::sent_invites(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.sent_invites)
  return sent_invites_.Get(index);
}
inline ::CSODOTAPartyInvite* CSODOTAParty::mutable_sent_invites(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTAParty.sent_invites)
  return sent_invites_.Mutable(index);
}
inline ::CSODOTAPartyInvite* CSODOTAParty::add_sent_invites() {
  // @@protoc_insertion_point(field_add:CSODOTAParty.sent_invites)
  return sent_invites_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite >&
CSODOTAParty::sent_invites() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.sent_invites)
  return sent_invites_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite >*
CSODOTAParty::mutable_sent_invites() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.sent_invites)
  return &sent_invites_;
}

// repeated .CSODOTAPartyInvite recv_invites = 42;
inline int CSODOTAParty::recv_invites_size() const {
  return recv_invites_.size();
}
inline void CSODOTAParty::clear_recv_invites() {
  recv_invites_.Clear();
}
inline const ::CSODOTAPartyInvite& CSODOTAParty::recv_invites(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.recv_invites)
  return recv_invites_.Get(index);
}
inline ::CSODOTAPartyInvite* CSODOTAParty::mutable_recv_invites(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTAParty.recv_invites)
  return recv_invites_.Mutable(index);
}
inline ::CSODOTAPartyInvite* CSODOTAParty::add_recv_invites() {
  // @@protoc_insertion_point(field_add:CSODOTAParty.recv_invites)
  return recv_invites_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite >&
CSODOTAParty::recv_invites() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.recv_invites)
  return recv_invites_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite >*
CSODOTAParty::mutable_recv_invites() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.recv_invites)
  return &recv_invites_;
}

// optional uint32 account_flags = 43;
inline bool CSODOTAParty::has_account_flags() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CSODOTAParty::set_has_account_flags() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CSODOTAParty::clear_has_account_flags() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CSODOTAParty::clear_account_flags() {
  account_flags_ = 0u;
  clear_has_account_flags();
}
inline ::google::protobuf::uint32 CSODOTAParty::account_flags() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.account_flags)
  return account_flags_;
}
inline void CSODOTAParty::set_account_flags(::google::protobuf::uint32 value) {
  set_has_account_flags();
  account_flags_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.account_flags)
}

// optional uint32 region_select_flags = 44;
inline bool CSODOTAParty::has_region_select_flags() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CSODOTAParty::set_has_region_select_flags() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CSODOTAParty::clear_has_region_select_flags() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CSODOTAParty::clear_region_select_flags() {
  region_select_flags_ = 0u;
  clear_has_region_select_flags();
}
inline ::google::protobuf::uint32 CSODOTAParty::region_select_flags() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.region_select_flags)
  return region_select_flags_;
}
inline void CSODOTAParty::set_region_select_flags(::google::protobuf::uint32 value) {
  set_has_region_select_flags();
  region_select_flags_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.region_select_flags)
}

// optional uint32 exclusive_tournament_id = 45;
inline bool CSODOTAParty::has_exclusive_tournament_id() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CSODOTAParty::set_has_exclusive_tournament_id() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CSODOTAParty::clear_has_exclusive_tournament_id() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CSODOTAParty::clear_exclusive_tournament_id() {
  exclusive_tournament_id_ = 0u;
  clear_has_exclusive_tournament_id();
}
inline ::google::protobuf::uint32 CSODOTAParty::exclusive_tournament_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.exclusive_tournament_id)
  return exclusive_tournament_id_;
}
inline void CSODOTAParty::set_exclusive_tournament_id(::google::protobuf::uint32 value) {
  set_has_exclusive_tournament_id();
  exclusive_tournament_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.exclusive_tournament_id)
}

// optional uint32 tourney_division_id = 47;
inline bool CSODOTAParty::has_tourney_division_id() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CSODOTAParty::set_has_tourney_division_id() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CSODOTAParty::clear_has_tourney_division_id() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CSODOTAParty::clear_tourney_division_id() {
  tourney_division_id_ = 0u;
  clear_has_tourney_division_id();
}
inline ::google::protobuf::uint32 CSODOTAParty::tourney_division_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.tourney_division_id)
  return tourney_division_id_;
}
inline void CSODOTAParty::set_tourney_division_id(::google::protobuf::uint32 value) {
  set_has_tourney_division_id();
  tourney_division_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.tourney_division_id)
}

// optional uint32 tourney_schedule_time = 48;
inline bool CSODOTAParty::has_tourney_schedule_time() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CSODOTAParty::set_has_tourney_schedule_time() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CSODOTAParty::clear_has_tourney_schedule_time() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CSODOTAParty::clear_tourney_schedule_time() {
  tourney_schedule_time_ = 0u;
  clear_has_tourney_schedule_time();
}
inline ::google::protobuf::uint32 CSODOTAParty::tourney_schedule_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.tourney_schedule_time)
  return tourney_schedule_time_;
}
inline void CSODOTAParty::set_tourney_schedule_time(::google::protobuf::uint32 value) {
  set_has_tourney_schedule_time();
  tourney_schedule_time_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.tourney_schedule_time)
}

// optional uint32 tourney_skill_level = 49;
inline bool CSODOTAParty::has_tourney_skill_level() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CSODOTAParty::set_has_tourney_skill_level() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CSODOTAParty::clear_has_tourney_skill_level() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CSODOTAParty::clear_tourney_skill_level() {
  tourney_skill_level_ = 0u;
  clear_has_tourney_skill_level();
}
inline ::google::protobuf::uint32 CSODOTAParty::tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.tourney_skill_level)
  return tourney_skill_level_;
}
inline void CSODOTAParty::set_tourney_skill_level(::google::protobuf::uint32 value) {
  set_has_tourney_skill_level();
  tourney_skill_level_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.tourney_skill_level)
}

// optional uint32 tourney_bracket_round = 50;
inline bool CSODOTAParty::has_tourney_bracket_round() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CSODOTAParty::set_has_tourney_bracket_round() {
  _has_bits_[1] |= 0x00000010u;
}
inline void CSODOTAParty::clear_has_tourney_bracket_round() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void CSODOTAParty::clear_tourney_bracket_round() {
  tourney_bracket_round_ = 0u;
  clear_has_tourney_bracket_round();
}
inline ::google::protobuf::uint32 CSODOTAParty::tourney_bracket_round() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.tourney_bracket_round)
  return tourney_bracket_round_;
}
inline void CSODOTAParty::set_tourney_bracket_round(::google::protobuf::uint32 value) {
  set_has_tourney_bracket_round();
  tourney_bracket_round_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.tourney_bracket_round)
}

// optional uint32 tourney_queue_deadline_time = 54;
inline bool CSODOTAParty::has_tourney_queue_deadline_time() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CSODOTAParty::set_has_tourney_queue_deadline_time() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CSODOTAParty::clear_has_tourney_queue_deadline_time() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CSODOTAParty::clear_tourney_queue_deadline_time() {
  tourney_queue_deadline_time_ = 0u;
  clear_has_tourney_queue_deadline_time();
}
inline ::google::protobuf::uint32 CSODOTAParty::tourney_queue_deadline_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.tourney_queue_deadline_time)
  return tourney_queue_deadline_time_;
}
inline void CSODOTAParty::set_tourney_queue_deadline_time(::google::protobuf::uint32 value) {
  set_has_tourney_queue_deadline_time();
  tourney_queue_deadline_time_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.tourney_queue_deadline_time)
}

// optional .ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
inline bool CSODOTAParty::has_tourney_queue_deadline_state() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CSODOTAParty::set_has_tourney_queue_deadline_state() {
  _has_bits_[1] |= 0x00000040u;
}
inline void CSODOTAParty::clear_has_tourney_queue_deadline_state() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void CSODOTAParty::clear_tourney_queue_deadline_state() {
  tourney_queue_deadline_state_ = 0;
  clear_has_tourney_queue_deadline_state();
}
inline ::ETourneyQueueDeadlineState CSODOTAParty::tourney_queue_deadline_state() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.tourney_queue_deadline_state)
  return static_cast< ::ETourneyQueueDeadlineState >(tourney_queue_deadline_state_);
}
inline void CSODOTAParty::set_tourney_queue_deadline_state(::ETourneyQueueDeadlineState value) {
  assert(::ETourneyQueueDeadlineState_IsValid(value));
  set_has_tourney_queue_deadline_state();
  tourney_queue_deadline_state_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.tourney_queue_deadline_state)
}

// optional uint32 party_builder_slots_to_fill = 56;
inline bool CSODOTAParty::has_party_builder_slots_to_fill() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CSODOTAParty::set_has_party_builder_slots_to_fill() {
  _has_bits_[1] |= 0x00000080u;
}
inline void CSODOTAParty::clear_has_party_builder_slots_to_fill() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void CSODOTAParty::clear_party_builder_slots_to_fill() {
  party_builder_slots_to_fill_ = 0u;
  clear_has_party_builder_slots_to_fill();
}
inline ::google::protobuf::uint32 CSODOTAParty::party_builder_slots_to_fill() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.party_builder_slots_to_fill)
  return party_builder_slots_to_fill_;
}
inline void CSODOTAParty::set_party_builder_slots_to_fill(::google::protobuf::uint32 value) {
  set_has_party_builder_slots_to_fill();
  party_builder_slots_to_fill_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.party_builder_slots_to_fill)
}

// optional uint32 party_builder_match_groups = 57;
inline bool CSODOTAParty::has_party_builder_match_groups() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CSODOTAParty::set_has_party_builder_match_groups() {
  _has_bits_[1] |= 0x00000100u;
}
inline void CSODOTAParty::clear_has_party_builder_match_groups() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void CSODOTAParty::clear_party_builder_match_groups() {
  party_builder_match_groups_ = 0u;
  clear_has_party_builder_match_groups();
}
inline ::google::protobuf::uint32 CSODOTAParty::party_builder_match_groups() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.party_builder_match_groups)
  return party_builder_match_groups_;
}
inline void CSODOTAParty::set_party_builder_match_groups(::google::protobuf::uint32 value) {
  set_has_party_builder_match_groups();
  party_builder_match_groups_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.party_builder_match_groups)
}

// optional uint32 party_builder_start_time = 58;
inline bool CSODOTAParty::has_party_builder_start_time() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CSODOTAParty::set_has_party_builder_start_time() {
  _has_bits_[1] |= 0x00000200u;
}
inline void CSODOTAParty::clear_has_party_builder_start_time() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void CSODOTAParty::clear_party_builder_start_time() {
  party_builder_start_time_ = 0u;
  clear_has_party_builder_start_time();
}
inline ::google::protobuf::uint32 CSODOTAParty::party_builder_start_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.party_builder_start_time)
  return party_builder_start_time_;
}
inline void CSODOTAParty::set_party_builder_start_time(::google::protobuf::uint32 value) {
  set_has_party_builder_start_time();
  party_builder_start_time_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.party_builder_start_time)
}

// -------------------------------------------------------------------

// CSODOTAPartyInvite_PartyMember

// optional string name = 1;
inline bool CSODOTAPartyInvite_PartyMember::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAPartyInvite_PartyMember::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAPartyInvite_PartyMember::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAPartyInvite_PartyMember::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CSODOTAPartyInvite_PartyMember::name() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.PartyMember.name)
  return *name_;
}
inline void CSODOTAPartyInvite_PartyMember::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.PartyMember.name)
}
inline void CSODOTAPartyInvite_PartyMember::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSODOTAPartyInvite.PartyMember.name)
}
inline void CSODOTAPartyInvite_PartyMember::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSODOTAPartyInvite.PartyMember.name)
}
inline ::std::string* CSODOTAPartyInvite_PartyMember::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSODOTAPartyInvite.PartyMember.name)
  return name_;
}
inline ::std::string* CSODOTAPartyInvite_PartyMember::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSODOTAPartyInvite_PartyMember::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSODOTAPartyInvite.PartyMember.name)
}

// optional fixed64 steam_id = 2;
inline bool CSODOTAPartyInvite_PartyMember::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAPartyInvite_PartyMember::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAPartyInvite_PartyMember::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAPartyInvite_PartyMember::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CSODOTAPartyInvite_PartyMember::steam_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.PartyMember.steam_id)
  return steam_id_;
}
inline void CSODOTAPartyInvite_PartyMember::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.PartyMember.steam_id)
}

// optional bool is_coach = 4;
inline bool CSODOTAPartyInvite_PartyMember::has_is_coach() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTAPartyInvite_PartyMember::set_has_is_coach() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSODOTAPartyInvite_PartyMember::clear_has_is_coach() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSODOTAPartyInvite_PartyMember::clear_is_coach() {
  is_coach_ = false;
  clear_has_is_coach();
}
inline bool CSODOTAPartyInvite_PartyMember::is_coach() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.PartyMember.is_coach)
  return is_coach_;
}
inline void CSODOTAPartyInvite_PartyMember::set_is_coach(bool value) {
  set_has_is_coach();
  is_coach_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.PartyMember.is_coach)
}

// -------------------------------------------------------------------

// CSODOTAPartyInvite

// optional uint64 group_id = 1;
inline bool CSODOTAPartyInvite::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAPartyInvite::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAPartyInvite::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAPartyInvite::clear_group_id() {
  group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_group_id();
}
inline ::google::protobuf::uint64 CSODOTAPartyInvite::group_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.group_id)
  return group_id_;
}
inline void CSODOTAPartyInvite::set_group_id(::google::protobuf::uint64 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.group_id)
}

// optional fixed64 sender_id = 2;
inline bool CSODOTAPartyInvite::has_sender_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAPartyInvite::set_has_sender_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAPartyInvite::clear_has_sender_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAPartyInvite::clear_sender_id() {
  sender_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sender_id();
}
inline ::google::protobuf::uint64 CSODOTAPartyInvite::sender_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.sender_id)
  return sender_id_;
}
inline void CSODOTAPartyInvite::set_sender_id(::google::protobuf::uint64 value) {
  set_has_sender_id();
  sender_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.sender_id)
}

// optional string sender_name = 3;
inline bool CSODOTAPartyInvite::has_sender_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTAPartyInvite::set_has_sender_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSODOTAPartyInvite::clear_has_sender_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSODOTAPartyInvite::clear_sender_name() {
  if (sender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_name_->clear();
  }
  clear_has_sender_name();
}
inline const ::std::string& CSODOTAPartyInvite::sender_name() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.sender_name)
  return *sender_name_;
}
inline void CSODOTAPartyInvite::set_sender_name(const ::std::string& value) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.sender_name)
}
inline void CSODOTAPartyInvite::set_sender_name(const char* value) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSODOTAPartyInvite.sender_name)
}
inline void CSODOTAPartyInvite::set_sender_name(const char* value, size_t size) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSODOTAPartyInvite.sender_name)
}
inline ::std::string* CSODOTAPartyInvite::mutable_sender_name() {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSODOTAPartyInvite.sender_name)
  return sender_name_;
}
inline ::std::string* CSODOTAPartyInvite::release_sender_name() {
  clear_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sender_name_;
    sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSODOTAPartyInvite::set_allocated_sender_name(::std::string* sender_name) {
  if (sender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_name_;
  }
  if (sender_name) {
    set_has_sender_name();
    sender_name_ = sender_name;
  } else {
    clear_has_sender_name();
    sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSODOTAPartyInvite.sender_name)
}

// repeated .CSODOTAPartyInvite.PartyMember members = 4;
inline int CSODOTAPartyInvite::members_size() const {
  return members_.size();
}
inline void CSODOTAPartyInvite::clear_members() {
  members_.Clear();
}
inline const ::CSODOTAPartyInvite_PartyMember& CSODOTAPartyInvite::members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.members)
  return members_.Get(index);
}
inline ::CSODOTAPartyInvite_PartyMember* CSODOTAPartyInvite::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTAPartyInvite.members)
  return members_.Mutable(index);
}
inline ::CSODOTAPartyInvite_PartyMember* CSODOTAPartyInvite::add_members() {
  // @@protoc_insertion_point(field_add:CSODOTAPartyInvite.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember >&
CSODOTAPartyInvite::members() const {
  // @@protoc_insertion_point(field_list:CSODOTAPartyInvite.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember >*
CSODOTAPartyInvite::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAPartyInvite.members)
  return &members_;
}

// optional uint32 team_id = 5;
inline bool CSODOTAPartyInvite::has_team_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTAPartyInvite::set_has_team_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSODOTAPartyInvite::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSODOTAPartyInvite::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CSODOTAPartyInvite::team_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.team_id)
  return team_id_;
}
inline void CSODOTAPartyInvite::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.team_id)
}

// optional bool low_priority_status = 6;
inline bool CSODOTAPartyInvite::has_low_priority_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTAPartyInvite::set_has_low_priority_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSODOTAPartyInvite::clear_has_low_priority_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSODOTAPartyInvite::clear_low_priority_status() {
  low_priority_status_ = false;
  clear_has_low_priority_status();
}
inline bool CSODOTAPartyInvite::low_priority_status() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.low_priority_status)
  return low_priority_status_;
}
inline void CSODOTAPartyInvite::set_low_priority_status(bool value) {
  set_has_low_priority_status();
  low_priority_status_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.low_priority_status)
}

// optional bool as_coach = 7;
inline bool CSODOTAPartyInvite::has_as_coach() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSODOTAPartyInvite::set_has_as_coach() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSODOTAPartyInvite::clear_has_as_coach() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSODOTAPartyInvite::clear_as_coach() {
  as_coach_ = false;
  clear_has_as_coach();
}
inline bool CSODOTAPartyInvite::as_coach() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.as_coach)
  return as_coach_;
}
inline void CSODOTAPartyInvite::set_as_coach(bool value) {
  set_has_as_coach();
  as_coach_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.as_coach)
}

// optional fixed64 invite_gid = 8;
inline bool CSODOTAPartyInvite::has_invite_gid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSODOTAPartyInvite::set_has_invite_gid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSODOTAPartyInvite::clear_has_invite_gid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSODOTAPartyInvite::clear_invite_gid() {
  invite_gid_ = GOOGLE_ULONGLONG(0);
  clear_has_invite_gid();
}
inline ::google::protobuf::uint64 CSODOTAPartyInvite::invite_gid() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.invite_gid)
  return invite_gid_;
}
inline void CSODOTAPartyInvite::set_invite_gid(::google::protobuf::uint64 value) {
  set_has_invite_gid();
  invite_gid_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.invite_gid)
}

// -------------------------------------------------------------------

// CSODOTALobbyInvite_LobbyMember

// optional string name = 1;
inline bool CSODOTALobbyInvite_LobbyMember::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTALobbyInvite_LobbyMember::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTALobbyInvite_LobbyMember::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTALobbyInvite_LobbyMember::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CSODOTALobbyInvite_LobbyMember::name() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.LobbyMember.name)
  return *name_;
}
inline void CSODOTALobbyInvite_LobbyMember::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.LobbyMember.name)
}
inline void CSODOTALobbyInvite_LobbyMember::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSODOTALobbyInvite.LobbyMember.name)
}
inline void CSODOTALobbyInvite_LobbyMember::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobbyInvite.LobbyMember.name)
}
inline ::std::string* CSODOTALobbyInvite_LobbyMember::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSODOTALobbyInvite.LobbyMember.name)
  return name_;
}
inline ::std::string* CSODOTALobbyInvite_LobbyMember::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSODOTALobbyInvite_LobbyMember::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobbyInvite.LobbyMember.name)
}

// optional fixed64 steam_id = 2;
inline bool CSODOTALobbyInvite_LobbyMember::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTALobbyInvite_LobbyMember::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTALobbyInvite_LobbyMember::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTALobbyInvite_LobbyMember::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CSODOTALobbyInvite_LobbyMember::steam_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.LobbyMember.steam_id)
  return steam_id_;
}
inline void CSODOTALobbyInvite_LobbyMember::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.LobbyMember.steam_id)
}

// -------------------------------------------------------------------

// CSODOTALobbyInvite

// optional uint64 group_id = 1;
inline bool CSODOTALobbyInvite::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTALobbyInvite::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTALobbyInvite::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTALobbyInvite::clear_group_id() {
  group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_group_id();
}
inline ::google::protobuf::uint64 CSODOTALobbyInvite::group_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.group_id)
  return group_id_;
}
inline void CSODOTALobbyInvite::set_group_id(::google::protobuf::uint64 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.group_id)
}

// optional fixed64 sender_id = 2;
inline bool CSODOTALobbyInvite::has_sender_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTALobbyInvite::set_has_sender_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTALobbyInvite::clear_has_sender_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTALobbyInvite::clear_sender_id() {
  sender_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sender_id();
}
inline ::google::protobuf::uint64 CSODOTALobbyInvite::sender_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.sender_id)
  return sender_id_;
}
inline void CSODOTALobbyInvite::set_sender_id(::google::protobuf::uint64 value) {
  set_has_sender_id();
  sender_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.sender_id)
}

// optional string sender_name = 3;
inline bool CSODOTALobbyInvite::has_sender_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTALobbyInvite::set_has_sender_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSODOTALobbyInvite::clear_has_sender_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSODOTALobbyInvite::clear_sender_name() {
  if (sender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_name_->clear();
  }
  clear_has_sender_name();
}
inline const ::std::string& CSODOTALobbyInvite::sender_name() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.sender_name)
  return *sender_name_;
}
inline void CSODOTALobbyInvite::set_sender_name(const ::std::string& value) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.sender_name)
}
inline void CSODOTALobbyInvite::set_sender_name(const char* value) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSODOTALobbyInvite.sender_name)
}
inline void CSODOTALobbyInvite::set_sender_name(const char* value, size_t size) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobbyInvite.sender_name)
}
inline ::std::string* CSODOTALobbyInvite::mutable_sender_name() {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSODOTALobbyInvite.sender_name)
  return sender_name_;
}
inline ::std::string* CSODOTALobbyInvite::release_sender_name() {
  clear_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sender_name_;
    sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSODOTALobbyInvite::set_allocated_sender_name(::std::string* sender_name) {
  if (sender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_name_;
  }
  if (sender_name) {
    set_has_sender_name();
    sender_name_ = sender_name;
  } else {
    clear_has_sender_name();
    sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobbyInvite.sender_name)
}

// repeated .CSODOTALobbyInvite.LobbyMember members = 4;
inline int CSODOTALobbyInvite::members_size() const {
  return members_.size();
}
inline void CSODOTALobbyInvite::clear_members() {
  members_.Clear();
}
inline const ::CSODOTALobbyInvite_LobbyMember& CSODOTALobbyInvite::members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.members)
  return members_.Get(index);
}
inline ::CSODOTALobbyInvite_LobbyMember* CSODOTALobbyInvite::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobbyInvite.members)
  return members_.Mutable(index);
}
inline ::CSODOTALobbyInvite_LobbyMember* CSODOTALobbyInvite::add_members() {
  // @@protoc_insertion_point(field_add:CSODOTALobbyInvite.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSODOTALobbyInvite_LobbyMember >&
CSODOTALobbyInvite::members() const {
  // @@protoc_insertion_point(field_list:CSODOTALobbyInvite.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSODOTALobbyInvite_LobbyMember >*
CSODOTALobbyInvite::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobbyInvite.members)
  return &members_;
}

// optional uint64 custom_game_id = 5;
inline bool CSODOTALobbyInvite::has_custom_game_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTALobbyInvite::set_has_custom_game_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSODOTALobbyInvite::clear_has_custom_game_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSODOTALobbyInvite::clear_custom_game_id() {
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_id();
}
inline ::google::protobuf::uint64 CSODOTALobbyInvite::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.custom_game_id)
  return custom_game_id_;
}
inline void CSODOTALobbyInvite::set_custom_game_id(::google::protobuf::uint64 value) {
  set_has_custom_game_id();
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.custom_game_id)
}

// optional fixed64 invite_gid = 6;
inline bool CSODOTALobbyInvite::has_invite_gid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTALobbyInvite::set_has_invite_gid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSODOTALobbyInvite::clear_has_invite_gid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSODOTALobbyInvite::clear_invite_gid() {
  invite_gid_ = GOOGLE_ULONGLONG(0);
  clear_has_invite_gid();
}
inline ::google::protobuf::uint64 CSODOTALobbyInvite::invite_gid() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.invite_gid)
  return invite_gid_;
}
inline void CSODOTALobbyInvite::set_invite_gid(::google::protobuf::uint64 value) {
  set_has_invite_gid();
  invite_gid_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.invite_gid)
}

// optional fixed64 custom_game_crc = 7;
inline bool CSODOTALobbyInvite::has_custom_game_crc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSODOTALobbyInvite::set_has_custom_game_crc() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSODOTALobbyInvite::clear_has_custom_game_crc() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSODOTALobbyInvite::clear_custom_game_crc() {
  custom_game_crc_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_crc();
}
inline ::google::protobuf::uint64 CSODOTALobbyInvite::custom_game_crc() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.custom_game_crc)
  return custom_game_crc_;
}
inline void CSODOTALobbyInvite::set_custom_game_crc(::google::protobuf::uint64 value) {
  set_has_custom_game_crc();
  custom_game_crc_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.custom_game_crc)
}

// optional fixed32 custom_game_timestamp = 8;
inline bool CSODOTALobbyInvite::has_custom_game_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSODOTALobbyInvite::set_has_custom_game_timestamp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSODOTALobbyInvite::clear_has_custom_game_timestamp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSODOTALobbyInvite::clear_custom_game_timestamp() {
  custom_game_timestamp_ = 0u;
  clear_has_custom_game_timestamp();
}
inline ::google::protobuf::uint32 CSODOTALobbyInvite::custom_game_timestamp() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.custom_game_timestamp)
  return custom_game_timestamp_;
}
inline void CSODOTALobbyInvite::set_custom_game_timestamp(::google::protobuf::uint32 value) {
  set_has_custom_game_timestamp();
  custom_game_timestamp_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.custom_game_timestamp)
}

// -------------------------------------------------------------------

// CMsgLeaverState

// optional uint32 lobby_state = 1;
inline bool CMsgLeaverState::has_lobby_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgLeaverState::set_has_lobby_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgLeaverState::clear_has_lobby_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgLeaverState::clear_lobby_state() {
  lobby_state_ = 0u;
  clear_has_lobby_state();
}
inline ::google::protobuf::uint32 CMsgLeaverState::lobby_state() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.lobby_state)
  return lobby_state_;
}
inline void CMsgLeaverState::set_lobby_state(::google::protobuf::uint32 value) {
  set_has_lobby_state();
  lobby_state_ = value;
  // @@protoc_insertion_point(field_set:CMsgLeaverState.lobby_state)
}

// optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
inline bool CMsgLeaverState::has_game_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgLeaverState::set_has_game_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgLeaverState::clear_has_game_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgLeaverState::clear_game_state() {
  game_state_ = 0;
  clear_has_game_state();
}
inline ::DOTA_GameState CMsgLeaverState::game_state() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.game_state)
  return static_cast< ::DOTA_GameState >(game_state_);
}
inline void CMsgLeaverState::set_game_state(::DOTA_GameState value) {
  assert(::DOTA_GameState_IsValid(value));
  set_has_game_state();
  game_state_ = value;
  // @@protoc_insertion_point(field_set:CMsgLeaverState.game_state)
}

// optional bool leaver_detected = 3;
inline bool CMsgLeaverState::has_leaver_detected() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgLeaverState::set_has_leaver_detected() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgLeaverState::clear_has_leaver_detected() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgLeaverState::clear_leaver_detected() {
  leaver_detected_ = false;
  clear_has_leaver_detected();
}
inline bool CMsgLeaverState::leaver_detected() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.leaver_detected)
  return leaver_detected_;
}
inline void CMsgLeaverState::set_leaver_detected(bool value) {
  set_has_leaver_detected();
  leaver_detected_ = value;
  // @@protoc_insertion_point(field_set:CMsgLeaverState.leaver_detected)
}

// optional bool first_blood_happened = 4;
inline bool CMsgLeaverState::has_first_blood_happened() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgLeaverState::set_has_first_blood_happened() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgLeaverState::clear_has_first_blood_happened() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgLeaverState::clear_first_blood_happened() {
  first_blood_happened_ = false;
  clear_has_first_blood_happened();
}
inline bool CMsgLeaverState::first_blood_happened() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.first_blood_happened)
  return first_blood_happened_;
}
inline void CMsgLeaverState::set_first_blood_happened(bool value) {
  set_has_first_blood_happened();
  first_blood_happened_ = value;
  // @@protoc_insertion_point(field_set:CMsgLeaverState.first_blood_happened)
}

// optional bool discard_match_results = 5;
inline bool CMsgLeaverState::has_discard_match_results() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgLeaverState::set_has_discard_match_results() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgLeaverState::clear_has_discard_match_results() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgLeaverState::clear_discard_match_results() {
  discard_match_results_ = false;
  clear_has_discard_match_results();
}
inline bool CMsgLeaverState::discard_match_results() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.discard_match_results)
  return discard_match_results_;
}
inline void CMsgLeaverState::set_discard_match_results(bool value) {
  set_has_discard_match_results();
  discard_match_results_ = value;
  // @@protoc_insertion_point(field_set:CMsgLeaverState.discard_match_results)
}

// optional bool mass_disconnect = 6;
inline bool CMsgLeaverState::has_mass_disconnect() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgLeaverState::set_has_mass_disconnect() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgLeaverState::clear_has_mass_disconnect() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgLeaverState::clear_mass_disconnect() {
  mass_disconnect_ = false;
  clear_has_mass_disconnect();
}
inline bool CMsgLeaverState::mass_disconnect() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.mass_disconnect)
  return mass_disconnect_;
}
inline void CMsgLeaverState::set_mass_disconnect(bool value) {
  set_has_mass_disconnect();
  mass_disconnect_ = value;
  // @@protoc_insertion_point(field_set:CMsgLeaverState.mass_disconnect)
}

// -------------------------------------------------------------------

// CDOTALobbyMember_CDOTALobbyMemberXPBonus

// optional uint32 type = 1;
inline bool CDOTALobbyMember_CDOTALobbyMemberXPBonus::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CDOTALobbyMember_CDOTALobbyMemberXPBonus::type() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.CDOTALobbyMemberXPBonus.type)
  return type_;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.CDOTALobbyMemberXPBonus.type)
}

// optional float xp_bonus = 2;
inline bool CDOTALobbyMember_CDOTALobbyMemberXPBonus::has_xp_bonus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_has_xp_bonus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_has_xp_bonus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_xp_bonus() {
  xp_bonus_ = 0;
  clear_has_xp_bonus();
}
inline float CDOTALobbyMember_CDOTALobbyMemberXPBonus::xp_bonus() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.CDOTALobbyMemberXPBonus.xp_bonus)
  return xp_bonus_;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_xp_bonus(float value) {
  set_has_xp_bonus();
  xp_bonus_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.CDOTALobbyMemberXPBonus.xp_bonus)
}

// optional uint64 source_key = 3;
inline bool CDOTALobbyMember_CDOTALobbyMemberXPBonus::has_source_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_has_source_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_has_source_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_source_key() {
  source_key_ = GOOGLE_ULONGLONG(0);
  clear_has_source_key();
}
inline ::google::protobuf::uint64 CDOTALobbyMember_CDOTALobbyMemberXPBonus::source_key() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.CDOTALobbyMemberXPBonus.source_key)
  return source_key_;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_source_key(::google::protobuf::uint64 value) {
  set_has_source_key();
  source_key_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.CDOTALobbyMemberXPBonus.source_key)
}

// -------------------------------------------------------------------

// CDOTALobbyMember

// optional fixed64 id = 1;
inline bool CDOTALobbyMember::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTALobbyMember::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTALobbyMember::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTALobbyMember::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 CDOTALobbyMember::id() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.id)
  return id_;
}
inline void CDOTALobbyMember::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.id)
}

// optional uint32 hero_id = 2;
inline bool CDOTALobbyMember::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTALobbyMember::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTALobbyMember::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTALobbyMember::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::hero_id() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.hero_id)
  return hero_id_;
}
inline void CDOTALobbyMember::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.hero_id)
}

// optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CDOTALobbyMember::has_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTALobbyMember::set_has_team() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTALobbyMember::clear_has_team() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTALobbyMember::clear_team() {
  team_ = 0;
  clear_has_team();
}
inline ::DOTA_GC_TEAM CDOTALobbyMember::team() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.team)
  return static_cast< ::DOTA_GC_TEAM >(team_);
}
inline void CDOTALobbyMember::set_team(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.team)
}

// optional string name = 6;
inline bool CDOTALobbyMember::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTALobbyMember::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTALobbyMember::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTALobbyMember::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CDOTALobbyMember::name() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.name)
  return *name_;
}
inline void CDOTALobbyMember::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.name)
}
inline void CDOTALobbyMember::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CDOTALobbyMember.name)
}
inline void CDOTALobbyMember::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CDOTALobbyMember.name)
}
inline ::std::string* CDOTALobbyMember::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CDOTALobbyMember.name)
  return name_;
}
inline ::std::string* CDOTALobbyMember::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CDOTALobbyMember::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTALobbyMember.name)
}

// optional uint32 slot = 7;
inline bool CDOTALobbyMember::has_slot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTALobbyMember::set_has_slot() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTALobbyMember::clear_has_slot() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTALobbyMember::clear_slot() {
  slot_ = 0u;
  clear_has_slot();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::slot() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.slot)
  return slot_;
}
inline void CDOTALobbyMember::set_slot(::google::protobuf::uint32 value) {
  set_has_slot();
  slot_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.slot)
}

// optional uint64 party_id = 12;
inline bool CDOTALobbyMember::has_party_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTALobbyMember::set_has_party_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDOTALobbyMember::clear_has_party_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDOTALobbyMember::clear_party_id() {
  party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_party_id();
}
inline ::google::protobuf::uint64 CDOTALobbyMember::party_id() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.party_id)
  return party_id_;
}
inline void CDOTALobbyMember::set_party_id(::google::protobuf::uint64 value) {
  set_has_party_id();
  party_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.party_id)
}

// optional uint32 meta_level = 13;
inline bool CDOTALobbyMember::has_meta_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDOTALobbyMember::set_has_meta_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CDOTALobbyMember::clear_has_meta_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CDOTALobbyMember::clear_meta_level() {
  meta_level_ = 0u;
  clear_has_meta_level();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::meta_level() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.meta_level)
  return meta_level_;
}
inline void CDOTALobbyMember::set_meta_level(::google::protobuf::uint32 value) {
  set_has_meta_level();
  meta_level_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.meta_level)
}

// optional uint32 meta_xp = 14;
inline bool CDOTALobbyMember::has_meta_xp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDOTALobbyMember::set_has_meta_xp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CDOTALobbyMember::clear_has_meta_xp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CDOTALobbyMember::clear_meta_xp() {
  meta_xp_ = 0u;
  clear_has_meta_xp();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::meta_xp() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.meta_xp)
  return meta_xp_;
}
inline void CDOTALobbyMember::set_meta_xp(::google::protobuf::uint32 value) {
  set_has_meta_xp();
  meta_xp_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.meta_xp)
}

// optional uint32 meta_xp_awarded = 15;
inline bool CDOTALobbyMember::has_meta_xp_awarded() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CDOTALobbyMember::set_has_meta_xp_awarded() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CDOTALobbyMember::clear_has_meta_xp_awarded() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CDOTALobbyMember::clear_meta_xp_awarded() {
  meta_xp_awarded_ = 0u;
  clear_has_meta_xp_awarded();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::meta_xp_awarded() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.meta_xp_awarded)
  return meta_xp_awarded_;
}
inline void CDOTALobbyMember::set_meta_xp_awarded(::google::protobuf::uint32 value) {
  set_has_meta_xp_awarded();
  meta_xp_awarded_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.meta_xp_awarded)
}

// optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
inline bool CDOTALobbyMember::has_leaver_status() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CDOTALobbyMember::set_has_leaver_status() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CDOTALobbyMember::clear_has_leaver_status() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CDOTALobbyMember::clear_leaver_status() {
  leaver_status_ = 0;
  clear_has_leaver_status();
}
inline ::DOTALeaverStatus_t CDOTALobbyMember::leaver_status() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.leaver_status)
  return static_cast< ::DOTALeaverStatus_t >(leaver_status_);
}
inline void CDOTALobbyMember::set_leaver_status(::DOTALeaverStatus_t value) {
  assert(::DOTALeaverStatus_t_IsValid(value));
  set_has_leaver_status();
  leaver_status_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.leaver_status)
}

// optional uint32 leaver_actions = 28;
inline bool CDOTALobbyMember::has_leaver_actions() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CDOTALobbyMember::set_has_leaver_actions() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CDOTALobbyMember::clear_has_leaver_actions() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CDOTALobbyMember::clear_leaver_actions() {
  leaver_actions_ = 0u;
  clear_has_leaver_actions();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::leaver_actions() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.leaver_actions)
  return leaver_actions_;
}
inline void CDOTALobbyMember::set_leaver_actions(::google::protobuf::uint32 value) {
  set_has_leaver_actions();
  leaver_actions_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.leaver_actions)
}

// optional uint32 channel = 17;
inline bool CDOTALobbyMember::has_channel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CDOTALobbyMember::set_has_channel() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CDOTALobbyMember::clear_has_channel() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CDOTALobbyMember::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::channel() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.channel)
  return channel_;
}
inline void CDOTALobbyMember::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.channel)
}

// optional uint32 prize_def_index = 18;
inline bool CDOTALobbyMember::has_prize_def_index() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CDOTALobbyMember::set_has_prize_def_index() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CDOTALobbyMember::clear_has_prize_def_index() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CDOTALobbyMember::clear_prize_def_index() {
  prize_def_index_ = 0u;
  clear_has_prize_def_index();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::prize_def_index() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.prize_def_index)
  return prize_def_index_;
}
inline void CDOTALobbyMember::set_prize_def_index(::google::protobuf::uint32 value) {
  set_has_prize_def_index();
  prize_def_index_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.prize_def_index)
}

// repeated uint32 disabled_hero_id = 20;
inline int CDOTALobbyMember::disabled_hero_id_size() const {
  return disabled_hero_id_.size();
}
inline void CDOTALobbyMember::clear_disabled_hero_id() {
  disabled_hero_id_.Clear();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::disabled_hero_id(int index) const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.disabled_hero_id)
  return disabled_hero_id_.Get(index);
}
inline void CDOTALobbyMember::set_disabled_hero_id(int index, ::google::protobuf::uint32 value) {
  disabled_hero_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.disabled_hero_id)
}
inline void CDOTALobbyMember::add_disabled_hero_id(::google::protobuf::uint32 value) {
  disabled_hero_id_.Add(value);
  // @@protoc_insertion_point(field_add:CDOTALobbyMember.disabled_hero_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTALobbyMember::disabled_hero_id() const {
  // @@protoc_insertion_point(field_list:CDOTALobbyMember.disabled_hero_id)
  return disabled_hero_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTALobbyMember::mutable_disabled_hero_id() {
  // @@protoc_insertion_point(field_mutable_list:CDOTALobbyMember.disabled_hero_id)
  return &disabled_hero_id_;
}

// optional .PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
inline bool CDOTALobbyMember::has_partner_account_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CDOTALobbyMember::set_has_partner_account_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CDOTALobbyMember::clear_has_partner_account_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CDOTALobbyMember::clear_partner_account_type() {
  partner_account_type_ = 0;
  clear_has_partner_account_type();
}
inline ::PartnerAccountType CDOTALobbyMember::partner_account_type() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.partner_account_type)
  return static_cast< ::PartnerAccountType >(partner_account_type_);
}
inline void CDOTALobbyMember::set_partner_account_type(::PartnerAccountType value) {
  assert(::PartnerAccountType_IsValid(value));
  set_has_partner_account_type();
  partner_account_type_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.partner_account_type)
}

// repeated uint32 enabled_hero_id = 22;
inline int CDOTALobbyMember::enabled_hero_id_size() const {
  return enabled_hero_id_.size();
}
inline void CDOTALobbyMember::clear_enabled_hero_id() {
  enabled_hero_id_.Clear();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::enabled_hero_id(int index) const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.enabled_hero_id)
  return enabled_hero_id_.Get(index);
}
inline void CDOTALobbyMember::set_enabled_hero_id(int index, ::google::protobuf::uint32 value) {
  enabled_hero_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.enabled_hero_id)
}
inline void CDOTALobbyMember::add_enabled_hero_id(::google::protobuf::uint32 value) {
  enabled_hero_id_.Add(value);
  // @@protoc_insertion_point(field_add:CDOTALobbyMember.enabled_hero_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTALobbyMember::enabled_hero_id() const {
  // @@protoc_insertion_point(field_list:CDOTALobbyMember.enabled_hero_id)
  return enabled_hero_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTALobbyMember::mutable_enabled_hero_id() {
  // @@protoc_insertion_point(field_mutable_list:CDOTALobbyMember.enabled_hero_id)
  return &enabled_hero_id_;
}

// optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
inline bool CDOTALobbyMember::has_coach_team() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CDOTALobbyMember::set_has_coach_team() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CDOTALobbyMember::clear_has_coach_team() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CDOTALobbyMember::clear_coach_team() {
  coach_team_ = 5;
  clear_has_coach_team();
}
inline ::DOTA_GC_TEAM CDOTALobbyMember::coach_team() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.coach_team)
  return static_cast< ::DOTA_GC_TEAM >(coach_team_);
}
inline void CDOTALobbyMember::set_coach_team(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  set_has_coach_team();
  coach_team_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.coach_team)
}

// optional uint32 nexon_pc_bang_no = 24;
inline bool CDOTALobbyMember::has_nexon_pc_bang_no() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CDOTALobbyMember::set_has_nexon_pc_bang_no() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CDOTALobbyMember::clear_has_nexon_pc_bang_no() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CDOTALobbyMember::clear_nexon_pc_bang_no() {
  nexon_pc_bang_no_ = 0u;
  clear_has_nexon_pc_bang_no();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::nexon_pc_bang_no() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.nexon_pc_bang_no)
  return nexon_pc_bang_no_;
}
inline void CDOTALobbyMember::set_nexon_pc_bang_no(::google::protobuf::uint32 value) {
  set_has_nexon_pc_bang_no();
  nexon_pc_bang_no_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.nexon_pc_bang_no)
}

// optional string nexon_pc_bang_name = 25;
inline bool CDOTALobbyMember::has_nexon_pc_bang_name() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CDOTALobbyMember::set_has_nexon_pc_bang_name() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CDOTALobbyMember::clear_has_nexon_pc_bang_name() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CDOTALobbyMember::clear_nexon_pc_bang_name() {
  if (nexon_pc_bang_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nexon_pc_bang_name_->clear();
  }
  clear_has_nexon_pc_bang_name();
}
inline const ::std::string& CDOTALobbyMember::nexon_pc_bang_name() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.nexon_pc_bang_name)
  return *nexon_pc_bang_name_;
}
inline void CDOTALobbyMember::set_nexon_pc_bang_name(const ::std::string& value) {
  set_has_nexon_pc_bang_name();
  if (nexon_pc_bang_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nexon_pc_bang_name_ = new ::std::string;
  }
  nexon_pc_bang_name_->assign(value);
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.nexon_pc_bang_name)
}
inline void CDOTALobbyMember::set_nexon_pc_bang_name(const char* value) {
  set_has_nexon_pc_bang_name();
  if (nexon_pc_bang_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nexon_pc_bang_name_ = new ::std::string;
  }
  nexon_pc_bang_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CDOTALobbyMember.nexon_pc_bang_name)
}
inline void CDOTALobbyMember::set_nexon_pc_bang_name(const char* value, size_t size) {
  set_has_nexon_pc_bang_name();
  if (nexon_pc_bang_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nexon_pc_bang_name_ = new ::std::string;
  }
  nexon_pc_bang_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CDOTALobbyMember.nexon_pc_bang_name)
}
inline ::std::string* CDOTALobbyMember::mutable_nexon_pc_bang_name() {
  set_has_nexon_pc_bang_name();
  if (nexon_pc_bang_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nexon_pc_bang_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CDOTALobbyMember.nexon_pc_bang_name)
  return nexon_pc_bang_name_;
}
inline ::std::string* CDOTALobbyMember::release_nexon_pc_bang_name() {
  clear_has_nexon_pc_bang_name();
  if (nexon_pc_bang_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nexon_pc_bang_name_;
    nexon_pc_bang_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CDOTALobbyMember::set_allocated_nexon_pc_bang_name(::std::string* nexon_pc_bang_name) {
  if (nexon_pc_bang_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nexon_pc_bang_name_;
  }
  if (nexon_pc_bang_name) {
    set_has_nexon_pc_bang_name();
    nexon_pc_bang_name_ = nexon_pc_bang_name;
  } else {
    clear_has_nexon_pc_bang_name();
    nexon_pc_bang_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTALobbyMember.nexon_pc_bang_name)
}

// repeated .CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
inline int CDOTALobbyMember::xp_bonuses_size() const {
  return xp_bonuses_.size();
}
inline void CDOTALobbyMember::clear_xp_bonuses() {
  xp_bonuses_.Clear();
}
inline const ::CDOTALobbyMember_CDOTALobbyMemberXPBonus& CDOTALobbyMember::xp_bonuses(int index) const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.xp_bonuses)
  return xp_bonuses_.Get(index);
}
inline ::CDOTALobbyMember_CDOTALobbyMemberXPBonus* CDOTALobbyMember::mutable_xp_bonuses(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTALobbyMember.xp_bonuses)
  return xp_bonuses_.Mutable(index);
}
inline ::CDOTALobbyMember_CDOTALobbyMemberXPBonus* CDOTALobbyMember::add_xp_bonuses() {
  // @@protoc_insertion_point(field_add:CDOTALobbyMember.xp_bonuses)
  return xp_bonuses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember_CDOTALobbyMemberXPBonus >&
CDOTALobbyMember::xp_bonuses() const {
  // @@protoc_insertion_point(field_list:CDOTALobbyMember.xp_bonuses)
  return xp_bonuses_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember_CDOTALobbyMemberXPBonus >*
CDOTALobbyMember::mutable_xp_bonuses() {
  // @@protoc_insertion_point(field_mutable_list:CDOTALobbyMember.xp_bonuses)
  return &xp_bonuses_;
}

// optional sint32 rank_change = 29;
inline bool CDOTALobbyMember::has_rank_change() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CDOTALobbyMember::set_has_rank_change() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CDOTALobbyMember::clear_has_rank_change() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CDOTALobbyMember::clear_rank_change() {
  rank_change_ = 0;
  clear_has_rank_change();
}
inline ::google::protobuf::int32 CDOTALobbyMember::rank_change() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.rank_change)
  return rank_change_;
}
inline void CDOTALobbyMember::set_rank_change(::google::protobuf::int32 value) {
  set_has_rank_change();
  rank_change_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.rank_change)
}

// optional bool cameraman = 30;
inline bool CDOTALobbyMember::has_cameraman() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CDOTALobbyMember::set_has_cameraman() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CDOTALobbyMember::clear_has_cameraman() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CDOTALobbyMember::clear_cameraman() {
  cameraman_ = false;
  clear_has_cameraman();
}
inline bool CDOTALobbyMember::cameraman() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.cameraman)
  return cameraman_;
}
inline void CDOTALobbyMember::set_cameraman(bool value) {
  set_has_cameraman();
  cameraman_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.cameraman)
}

// repeated uint32 custom_game_product_ids = 31;
inline int CDOTALobbyMember::custom_game_product_ids_size() const {
  return custom_game_product_ids_.size();
}
inline void CDOTALobbyMember::clear_custom_game_product_ids() {
  custom_game_product_ids_.Clear();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::custom_game_product_ids(int index) const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.custom_game_product_ids)
  return custom_game_product_ids_.Get(index);
}
inline void CDOTALobbyMember::set_custom_game_product_ids(int index, ::google::protobuf::uint32 value) {
  custom_game_product_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.custom_game_product_ids)
}
inline void CDOTALobbyMember::add_custom_game_product_ids(::google::protobuf::uint32 value) {
  custom_game_product_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CDOTALobbyMember.custom_game_product_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTALobbyMember::custom_game_product_ids() const {
  // @@protoc_insertion_point(field_list:CDOTALobbyMember.custom_game_product_ids)
  return custom_game_product_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTALobbyMember::mutable_custom_game_product_ids() {
  // @@protoc_insertion_point(field_mutable_list:CDOTALobbyMember.custom_game_product_ids)
  return &custom_game_product_ids_;
}

// optional uint32 lobby_mvp_vote_account_id = 32;
inline bool CDOTALobbyMember::has_lobby_mvp_vote_account_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CDOTALobbyMember::set_has_lobby_mvp_vote_account_id() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CDOTALobbyMember::clear_has_lobby_mvp_vote_account_id() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CDOTALobbyMember::clear_lobby_mvp_vote_account_id() {
  lobby_mvp_vote_account_id_ = 0u;
  clear_has_lobby_mvp_vote_account_id();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::lobby_mvp_vote_account_id() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.lobby_mvp_vote_account_id)
  return lobby_mvp_vote_account_id_;
}
inline void CDOTALobbyMember::set_lobby_mvp_vote_account_id(::google::protobuf::uint32 value) {
  set_has_lobby_mvp_vote_account_id();
  lobby_mvp_vote_account_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.lobby_mvp_vote_account_id)
}

// optional .MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
inline bool CDOTALobbyMember::has_search_match_type() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CDOTALobbyMember::set_has_search_match_type() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CDOTALobbyMember::clear_has_search_match_type() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CDOTALobbyMember::clear_search_match_type() {
  search_match_type_ = 0;
  clear_has_search_match_type();
}
inline ::MatchType CDOTALobbyMember::search_match_type() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.search_match_type)
  return static_cast< ::MatchType >(search_match_type_);
}
inline void CDOTALobbyMember::set_search_match_type(::MatchType value) {
  assert(::MatchType_IsValid(value));
  set_has_search_match_type();
  search_match_type_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.search_match_type)
}

// optional uint32 favorite_team_and_quality = 34;
inline bool CDOTALobbyMember::has_favorite_team_and_quality() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CDOTALobbyMember::set_has_favorite_team_and_quality() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CDOTALobbyMember::clear_has_favorite_team_and_quality() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CDOTALobbyMember::clear_favorite_team_and_quality() {
  favorite_team_and_quality_ = 0u;
  clear_has_favorite_team_and_quality();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::favorite_team_and_quality() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.favorite_team_and_quality)
  return favorite_team_and_quality_;
}
inline void CDOTALobbyMember::set_favorite_team_and_quality(::google::protobuf::uint32 value) {
  set_has_favorite_team_and_quality();
  favorite_team_and_quality_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.favorite_team_and_quality)
}

// -------------------------------------------------------------------

// CLobbyTeamDetails

// optional string team_name = 1;
inline bool CLobbyTeamDetails::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CLobbyTeamDetails::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CLobbyTeamDetails::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& CLobbyTeamDetails::team_name() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_name)
  return *team_name_;
}
inline void CLobbyTeamDetails::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_name)
}
inline void CLobbyTeamDetails::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CLobbyTeamDetails.team_name)
}
inline void CLobbyTeamDetails::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CLobbyTeamDetails.team_name)
}
inline ::std::string* CLobbyTeamDetails::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CLobbyTeamDetails.team_name)
  return team_name_;
}
inline ::std::string* CLobbyTeamDetails::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLobbyTeamDetails::set_allocated_team_name(::std::string* team_name) {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_;
  }
  if (team_name) {
    set_has_team_name();
    team_name_ = team_name;
  } else {
    clear_has_team_name();
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CLobbyTeamDetails.team_name)
}

// optional string team_tag = 3;
inline bool CLobbyTeamDetails::has_team_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CLobbyTeamDetails::clear_has_team_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CLobbyTeamDetails::clear_team_tag() {
  if (team_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_tag_->clear();
  }
  clear_has_team_tag();
}
inline const ::std::string& CLobbyTeamDetails::team_tag() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_tag)
  return *team_tag_;
}
inline void CLobbyTeamDetails::set_team_tag(const ::std::string& value) {
  set_has_team_tag();
  if (team_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_tag_ = new ::std::string;
  }
  team_tag_->assign(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_tag)
}
inline void CLobbyTeamDetails::set_team_tag(const char* value) {
  set_has_team_tag();
  if (team_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_tag_ = new ::std::string;
  }
  team_tag_->assign(value);
  // @@protoc_insertion_point(field_set_char:CLobbyTeamDetails.team_tag)
}
inline void CLobbyTeamDetails::set_team_tag(const char* value, size_t size) {
  set_has_team_tag();
  if (team_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_tag_ = new ::std::string;
  }
  team_tag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CLobbyTeamDetails.team_tag)
}
inline ::std::string* CLobbyTeamDetails::mutable_team_tag() {
  set_has_team_tag();
  if (team_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_tag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CLobbyTeamDetails.team_tag)
  return team_tag_;
}
inline ::std::string* CLobbyTeamDetails::release_team_tag() {
  clear_has_team_tag();
  if (team_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = team_tag_;
    team_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLobbyTeamDetails::set_allocated_team_tag(::std::string* team_tag) {
  if (team_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_tag_;
  }
  if (team_tag) {
    set_has_team_tag();
    team_tag_ = team_tag;
  } else {
    clear_has_team_tag();
    team_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CLobbyTeamDetails.team_tag)
}

// optional uint32 team_id = 4;
inline bool CLobbyTeamDetails::has_team_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CLobbyTeamDetails::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CLobbyTeamDetails::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CLobbyTeamDetails::team_id() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_id)
  return team_id_;
}
inline void CLobbyTeamDetails::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_id)
}

// optional uint64 team_logo = 5;
inline bool CLobbyTeamDetails::has_team_logo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_logo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CLobbyTeamDetails::clear_has_team_logo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CLobbyTeamDetails::clear_team_logo() {
  team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo();
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::team_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_logo)
  return team_logo_;
}
inline void CLobbyTeamDetails::set_team_logo(::google::protobuf::uint64 value) {
  set_has_team_logo();
  team_logo_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_logo)
}

// optional uint64 team_base_logo = 6;
inline bool CLobbyTeamDetails::has_team_base_logo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_base_logo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CLobbyTeamDetails::clear_has_team_base_logo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CLobbyTeamDetails::clear_team_base_logo() {
  team_base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_base_logo();
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::team_base_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_base_logo)
  return team_base_logo_;
}
inline void CLobbyTeamDetails::set_team_base_logo(::google::protobuf::uint64 value) {
  set_has_team_base_logo();
  team_base_logo_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_base_logo)
}

// optional uint64 team_banner_logo = 7;
inline bool CLobbyTeamDetails::has_team_banner_logo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_banner_logo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CLobbyTeamDetails::clear_has_team_banner_logo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CLobbyTeamDetails::clear_team_banner_logo() {
  team_banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_banner_logo();
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::team_banner_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_banner_logo)
  return team_banner_logo_;
}
inline void CLobbyTeamDetails::set_team_banner_logo(::google::protobuf::uint64 value) {
  set_has_team_banner_logo();
  team_banner_logo_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_banner_logo)
}

// optional bool team_complete = 8;
inline bool CLobbyTeamDetails::has_team_complete() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_complete() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CLobbyTeamDetails::clear_has_team_complete() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CLobbyTeamDetails::clear_team_complete() {
  team_complete_ = false;
  clear_has_team_complete();
}
inline bool CLobbyTeamDetails::team_complete() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_complete)
  return team_complete_;
}
inline void CLobbyTeamDetails::set_team_complete(bool value) {
  set_has_team_complete();
  team_complete_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_complete)
}

// optional string guild_name = 9;
inline bool CLobbyTeamDetails::has_guild_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CLobbyTeamDetails::set_has_guild_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CLobbyTeamDetails::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CLobbyTeamDetails::clear_guild_name() {
  if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_name_->clear();
  }
  clear_has_guild_name();
}
inline const ::std::string& CLobbyTeamDetails::guild_name() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.guild_name)
  return *guild_name_;
}
inline void CLobbyTeamDetails::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.guild_name)
}
inline void CLobbyTeamDetails::set_guild_name(const char* value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CLobbyTeamDetails.guild_name)
}
inline void CLobbyTeamDetails::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CLobbyTeamDetails.guild_name)
}
inline ::std::string* CLobbyTeamDetails::mutable_guild_name() {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CLobbyTeamDetails.guild_name)
  return guild_name_;
}
inline ::std::string* CLobbyTeamDetails::release_guild_name() {
  clear_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guild_name_;
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLobbyTeamDetails::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_name_;
  }
  if (guild_name) {
    set_has_guild_name();
    guild_name_ = guild_name;
  } else {
    clear_has_guild_name();
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CLobbyTeamDetails.guild_name)
}

// optional string guild_tag = 10;
inline bool CLobbyTeamDetails::has_guild_tag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CLobbyTeamDetails::set_has_guild_tag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CLobbyTeamDetails::clear_has_guild_tag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CLobbyTeamDetails::clear_guild_tag() {
  if (guild_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_tag_->clear();
  }
  clear_has_guild_tag();
}
inline const ::std::string& CLobbyTeamDetails::guild_tag() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.guild_tag)
  return *guild_tag_;
}
inline void CLobbyTeamDetails::set_guild_tag(const ::std::string& value) {
  set_has_guild_tag();
  if (guild_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_tag_ = new ::std::string;
  }
  guild_tag_->assign(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.guild_tag)
}
inline void CLobbyTeamDetails::set_guild_tag(const char* value) {
  set_has_guild_tag();
  if (guild_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_tag_ = new ::std::string;
  }
  guild_tag_->assign(value);
  // @@protoc_insertion_point(field_set_char:CLobbyTeamDetails.guild_tag)
}
inline void CLobbyTeamDetails::set_guild_tag(const char* value, size_t size) {
  set_has_guild_tag();
  if (guild_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_tag_ = new ::std::string;
  }
  guild_tag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CLobbyTeamDetails.guild_tag)
}
inline ::std::string* CLobbyTeamDetails::mutable_guild_tag() {
  set_has_guild_tag();
  if (guild_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_tag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CLobbyTeamDetails.guild_tag)
  return guild_tag_;
}
inline ::std::string* CLobbyTeamDetails::release_guild_tag() {
  clear_has_guild_tag();
  if (guild_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guild_tag_;
    guild_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLobbyTeamDetails::set_allocated_guild_tag(::std::string* guild_tag) {
  if (guild_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_tag_;
  }
  if (guild_tag) {
    set_has_guild_tag();
    guild_tag_ = guild_tag;
  } else {
    clear_has_guild_tag();
    guild_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CLobbyTeamDetails.guild_tag)
}

// optional uint32 guild_id = 11;
inline bool CLobbyTeamDetails::has_guild_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CLobbyTeamDetails::set_has_guild_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CLobbyTeamDetails::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CLobbyTeamDetails::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 CLobbyTeamDetails::guild_id() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.guild_id)
  return guild_id_;
}
inline void CLobbyTeamDetails::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.guild_id)
}

// optional uint64 guild_logo = 12;
inline bool CLobbyTeamDetails::has_guild_logo() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CLobbyTeamDetails::set_has_guild_logo() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CLobbyTeamDetails::clear_has_guild_logo() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CLobbyTeamDetails::clear_guild_logo() {
  guild_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_logo();
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::guild_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.guild_logo)
  return guild_logo_;
}
inline void CLobbyTeamDetails::set_guild_logo(::google::protobuf::uint64 value) {
  set_has_guild_logo();
  guild_logo_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.guild_logo)
}

// optional uint64 guild_base_logo = 13;
inline bool CLobbyTeamDetails::has_guild_base_logo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CLobbyTeamDetails::set_has_guild_base_logo() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CLobbyTeamDetails::clear_has_guild_base_logo() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CLobbyTeamDetails::clear_guild_base_logo() {
  guild_base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_base_logo();
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::guild_base_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.guild_base_logo)
  return guild_base_logo_;
}
inline void CLobbyTeamDetails::set_guild_base_logo(::google::protobuf::uint64 value) {
  set_has_guild_base_logo();
  guild_base_logo_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.guild_base_logo)
}

// optional uint64 guild_banner_logo = 14;
inline bool CLobbyTeamDetails::has_guild_banner_logo() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CLobbyTeamDetails::set_has_guild_banner_logo() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CLobbyTeamDetails::clear_has_guild_banner_logo() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CLobbyTeamDetails::clear_guild_banner_logo() {
  guild_banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_banner_logo();
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::guild_banner_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.guild_banner_logo)
  return guild_banner_logo_;
}
inline void CLobbyTeamDetails::set_guild_banner_logo(::google::protobuf::uint64 value) {
  set_has_guild_banner_logo();
  guild_banner_logo_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.guild_banner_logo)
}

// optional uint32 rank = 15;
inline bool CLobbyTeamDetails::has_rank() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CLobbyTeamDetails::set_has_rank() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CLobbyTeamDetails::clear_has_rank() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CLobbyTeamDetails::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 CLobbyTeamDetails::rank() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.rank)
  return rank_;
}
inline void CLobbyTeamDetails::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.rank)
}

// optional sint32 rank_change = 16;
inline bool CLobbyTeamDetails::has_rank_change() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CLobbyTeamDetails::set_has_rank_change() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CLobbyTeamDetails::clear_has_rank_change() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CLobbyTeamDetails::clear_rank_change() {
  rank_change_ = 0;
  clear_has_rank_change();
}
inline ::google::protobuf::int32 CLobbyTeamDetails::rank_change() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.rank_change)
  return rank_change_;
}
inline void CLobbyTeamDetails::set_rank_change(::google::protobuf::int32 value) {
  set_has_rank_change();
  rank_change_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.rank_change)
}

// optional bool is_home_team = 17;
inline bool CLobbyTeamDetails::has_is_home_team() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CLobbyTeamDetails::set_has_is_home_team() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CLobbyTeamDetails::clear_has_is_home_team() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CLobbyTeamDetails::clear_is_home_team() {
  is_home_team_ = false;
  clear_has_is_home_team();
}
inline bool CLobbyTeamDetails::is_home_team() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.is_home_team)
  return is_home_team_;
}
inline void CLobbyTeamDetails::set_is_home_team(bool value) {
  set_has_is_home_team();
  is_home_team_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.is_home_team)
}

// -------------------------------------------------------------------

// CLobbyTimedRewardDetails

// optional uint32 item_def_index = 2;
inline bool CLobbyTimedRewardDetails::has_item_def_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CLobbyTimedRewardDetails::set_has_item_def_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CLobbyTimedRewardDetails::clear_has_item_def_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CLobbyTimedRewardDetails::clear_item_def_index() {
  item_def_index_ = 0u;
  clear_has_item_def_index();
}
inline ::google::protobuf::uint32 CLobbyTimedRewardDetails::item_def_index() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.item_def_index)
  return item_def_index_;
}
inline void CLobbyTimedRewardDetails::set_item_def_index(::google::protobuf::uint32 value) {
  set_has_item_def_index();
  item_def_index_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.item_def_index)
}

// optional bool is_supply_crate = 3;
inline bool CLobbyTimedRewardDetails::has_is_supply_crate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CLobbyTimedRewardDetails::set_has_is_supply_crate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CLobbyTimedRewardDetails::clear_has_is_supply_crate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CLobbyTimedRewardDetails::clear_is_supply_crate() {
  is_supply_crate_ = false;
  clear_has_is_supply_crate();
}
inline bool CLobbyTimedRewardDetails::is_supply_crate() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.is_supply_crate)
  return is_supply_crate_;
}
inline void CLobbyTimedRewardDetails::set_is_supply_crate(bool value) {
  set_has_is_supply_crate();
  is_supply_crate_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.is_supply_crate)
}

// optional bool is_timed_drop = 4;
inline bool CLobbyTimedRewardDetails::has_is_timed_drop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CLobbyTimedRewardDetails::set_has_is_timed_drop() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CLobbyTimedRewardDetails::clear_has_is_timed_drop() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CLobbyTimedRewardDetails::clear_is_timed_drop() {
  is_timed_drop_ = false;
  clear_has_is_timed_drop();
}
inline bool CLobbyTimedRewardDetails::is_timed_drop() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.is_timed_drop)
  return is_timed_drop_;
}
inline void CLobbyTimedRewardDetails::set_is_timed_drop(bool value) {
  set_has_is_timed_drop();
  is_timed_drop_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.is_timed_drop)
}

// optional uint32 account_id = 5;
inline bool CLobbyTimedRewardDetails::has_account_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CLobbyTimedRewardDetails::set_has_account_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CLobbyTimedRewardDetails::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CLobbyTimedRewardDetails::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CLobbyTimedRewardDetails::account_id() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.account_id)
  return account_id_;
}
inline void CLobbyTimedRewardDetails::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.account_id)
}

// optional uint32 origin = 6;
inline bool CLobbyTimedRewardDetails::has_origin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CLobbyTimedRewardDetails::set_has_origin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CLobbyTimedRewardDetails::clear_has_origin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CLobbyTimedRewardDetails::clear_origin() {
  origin_ = 0u;
  clear_has_origin();
}
inline ::google::protobuf::uint32 CLobbyTimedRewardDetails::origin() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.origin)
  return origin_;
}
inline void CLobbyTimedRewardDetails::set_origin(::google::protobuf::uint32 value) {
  set_has_origin();
  origin_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.origin)
}

// -------------------------------------------------------------------

// CLobbyBroadcastChannelInfo

// optional uint32 channel_id = 1;
inline bool CLobbyBroadcastChannelInfo::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CLobbyBroadcastChannelInfo::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CLobbyBroadcastChannelInfo::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CLobbyBroadcastChannelInfo::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 CLobbyBroadcastChannelInfo::channel_id() const {
  // @@protoc_insertion_point(field_get:CLobbyBroadcastChannelInfo.channel_id)
  return channel_id_;
}
inline void CLobbyBroadcastChannelInfo::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:CLobbyBroadcastChannelInfo.channel_id)
}

// optional string country_code = 2;
inline bool CLobbyBroadcastChannelInfo::has_country_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CLobbyBroadcastChannelInfo::set_has_country_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CLobbyBroadcastChannelInfo::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CLobbyBroadcastChannelInfo::clear_country_code() {
  if (country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_code_->clear();
  }
  clear_has_country_code();
}
inline const ::std::string& CLobbyBroadcastChannelInfo::country_code() const {
  // @@protoc_insertion_point(field_get:CLobbyBroadcastChannelInfo.country_code)
  return *country_code_;
}
inline void CLobbyBroadcastChannelInfo::set_country_code(const ::std::string& value) {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_code_ = new ::std::string;
  }
  country_code_->assign(value);
  // @@protoc_insertion_point(field_set:CLobbyBroadcastChannelInfo.country_code)
}
inline void CLobbyBroadcastChannelInfo::set_country_code(const char* value) {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_code_ = new ::std::string;
  }
  country_code_->assign(value);
  // @@protoc_insertion_point(field_set_char:CLobbyBroadcastChannelInfo.country_code)
}
inline void CLobbyBroadcastChannelInfo::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_code_ = new ::std::string;
  }
  country_code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CLobbyBroadcastChannelInfo.country_code)
}
inline ::std::string* CLobbyBroadcastChannelInfo::mutable_country_code() {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CLobbyBroadcastChannelInfo.country_code)
  return country_code_;
}
inline ::std::string* CLobbyBroadcastChannelInfo::release_country_code() {
  clear_has_country_code();
  if (country_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = country_code_;
    country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLobbyBroadcastChannelInfo::set_allocated_country_code(::std::string* country_code) {
  if (country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_code_;
  }
  if (country_code) {
    set_has_country_code();
    country_code_ = country_code;
  } else {
    clear_has_country_code();
    country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CLobbyBroadcastChannelInfo.country_code)
}

// optional string description = 3;
inline bool CLobbyBroadcastChannelInfo::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CLobbyBroadcastChannelInfo::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CLobbyBroadcastChannelInfo::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CLobbyBroadcastChannelInfo::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& CLobbyBroadcastChannelInfo::description() const {
  // @@protoc_insertion_point(field_get:CLobbyBroadcastChannelInfo.description)
  return *description_;
}
inline void CLobbyBroadcastChannelInfo::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:CLobbyBroadcastChannelInfo.description)
}
inline void CLobbyBroadcastChannelInfo::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:CLobbyBroadcastChannelInfo.description)
}
inline void CLobbyBroadcastChannelInfo::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CLobbyBroadcastChannelInfo.description)
}
inline ::std::string* CLobbyBroadcastChannelInfo::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CLobbyBroadcastChannelInfo.description)
  return description_;
}
inline ::std::string* CLobbyBroadcastChannelInfo::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLobbyBroadcastChannelInfo::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CLobbyBroadcastChannelInfo.description)
}

// optional string language_code = 4;
inline bool CLobbyBroadcastChannelInfo::has_language_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CLobbyBroadcastChannelInfo::set_has_language_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CLobbyBroadcastChannelInfo::clear_has_language_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CLobbyBroadcastChannelInfo::clear_language_code() {
  if (language_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_code_->clear();
  }
  clear_has_language_code();
}
inline const ::std::string& CLobbyBroadcastChannelInfo::language_code() const {
  // @@protoc_insertion_point(field_get:CLobbyBroadcastChannelInfo.language_code)
  return *language_code_;
}
inline void CLobbyBroadcastChannelInfo::set_language_code(const ::std::string& value) {
  set_has_language_code();
  if (language_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_code_ = new ::std::string;
  }
  language_code_->assign(value);
  // @@protoc_insertion_point(field_set:CLobbyBroadcastChannelInfo.language_code)
}
inline void CLobbyBroadcastChannelInfo::set_language_code(const char* value) {
  set_has_language_code();
  if (language_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_code_ = new ::std::string;
  }
  language_code_->assign(value);
  // @@protoc_insertion_point(field_set_char:CLobbyBroadcastChannelInfo.language_code)
}
inline void CLobbyBroadcastChannelInfo::set_language_code(const char* value, size_t size) {
  set_has_language_code();
  if (language_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_code_ = new ::std::string;
  }
  language_code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CLobbyBroadcastChannelInfo.language_code)
}
inline ::std::string* CLobbyBroadcastChannelInfo::mutable_language_code() {
  set_has_language_code();
  if (language_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CLobbyBroadcastChannelInfo.language_code)
  return language_code_;
}
inline ::std::string* CLobbyBroadcastChannelInfo::release_language_code() {
  clear_has_language_code();
  if (language_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = language_code_;
    language_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLobbyBroadcastChannelInfo::set_allocated_language_code(::std::string* language_code) {
  if (language_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete language_code_;
  }
  if (language_code) {
    set_has_language_code();
    language_code_ = language_code;
  } else {
    clear_has_language_code();
    language_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CLobbyBroadcastChannelInfo.language_code)
}

// -------------------------------------------------------------------

// CSODOTALobby_CExtraMsg

// optional uint32 id = 1;
inline bool CSODOTALobby_CExtraMsg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTALobby_CExtraMsg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTALobby_CExtraMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTALobby_CExtraMsg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CSODOTALobby_CExtraMsg::id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.CExtraMsg.id)
  return id_;
}
inline void CSODOTALobby_CExtraMsg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.CExtraMsg.id)
}

// optional bytes contents = 2;
inline bool CSODOTALobby_CExtraMsg::has_contents() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTALobby_CExtraMsg::set_has_contents() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTALobby_CExtraMsg::clear_has_contents() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTALobby_CExtraMsg::clear_contents() {
  if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_->clear();
  }
  clear_has_contents();
}
inline const ::std::string& CSODOTALobby_CExtraMsg::contents() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.CExtraMsg.contents)
  return *contents_;
}
inline void CSODOTALobby_CExtraMsg::set_contents(const ::std::string& value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.CExtraMsg.contents)
}
inline void CSODOTALobby_CExtraMsg::set_contents(const char* value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.CExtraMsg.contents)
}
inline void CSODOTALobby_CExtraMsg::set_contents(const void* value, size_t size) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_ = new ::std::string;
  }
  contents_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.CExtraMsg.contents)
}
inline ::std::string* CSODOTALobby_CExtraMsg::mutable_contents() {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.CExtraMsg.contents)
  return contents_;
}
inline ::std::string* CSODOTALobby_CExtraMsg::release_contents() {
  clear_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contents_;
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSODOTALobby_CExtraMsg::set_allocated_contents(::std::string* contents) {
  if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contents_;
  }
  if (contents) {
    set_has_contents();
    contents_ = contents;
  } else {
    clear_has_contents();
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.CExtraMsg.contents)
}

// -------------------------------------------------------------------

// CSODOTALobby

// optional uint64 lobby_id = 1;
inline bool CSODOTALobby::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTALobby::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTALobby::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTALobby::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
inline ::google::protobuf::uint64 CSODOTALobby::lobby_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.lobby_id)
  return lobby_id_;
}
inline void CSODOTALobby::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.lobby_id)
}

// repeated .CDOTALobbyMember members = 2;
inline int CSODOTALobby::members_size() const {
  return members_.size();
}
inline void CSODOTALobby::clear_members() {
  members_.Clear();
}
inline const ::CDOTALobbyMember& CSODOTALobby::members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.members)
  return members_.Get(index);
}
inline ::CDOTALobbyMember* CSODOTALobby::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.members)
  return members_.Mutable(index);
}
inline ::CDOTALobbyMember* CSODOTALobby::add_members() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >&
CSODOTALobby::members() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >*
CSODOTALobby::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.members)
  return &members_;
}

// repeated .CDOTALobbyMember left_members = 7;
inline int CSODOTALobby::left_members_size() const {
  return left_members_.size();
}
inline void CSODOTALobby::clear_left_members() {
  left_members_.Clear();
}
inline const ::CDOTALobbyMember& CSODOTALobby::left_members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.left_members)
  return left_members_.Get(index);
}
inline ::CDOTALobbyMember* CSODOTALobby::mutable_left_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.left_members)
  return left_members_.Mutable(index);
}
inline ::CDOTALobbyMember* CSODOTALobby::add_left_members() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.left_members)
  return left_members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >&
CSODOTALobby::left_members() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.left_members)
  return left_members_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >*
CSODOTALobby::mutable_left_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.left_members)
  return &left_members_;
}

// optional fixed64 leader_id = 11;
inline bool CSODOTALobby::has_leader_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSODOTALobby::set_has_leader_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSODOTALobby::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSODOTALobby::clear_leader_id() {
  leader_id_ = GOOGLE_ULONGLONG(0);
  clear_has_leader_id();
}
inline ::google::protobuf::uint64 CSODOTALobby::leader_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.leader_id)
  return leader_id_;
}
inline void CSODOTALobby::set_leader_id(::google::protobuf::uint64 value) {
  set_has_leader_id();
  leader_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.leader_id)
}

// optional fixed64 server_id = 6 [default = 0];
inline bool CSODOTALobby::has_server_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTALobby::set_has_server_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSODOTALobby::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSODOTALobby::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
inline ::google::protobuf::uint64 CSODOTALobby::server_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.server_id)
  return server_id_;
}
inline void CSODOTALobby::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.server_id)
}

// optional uint32 game_mode = 3;
inline bool CSODOTALobby::has_game_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTALobby::set_has_game_mode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSODOTALobby::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSODOTALobby::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
inline ::google::protobuf::uint32 CSODOTALobby::game_mode() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.game_mode)
  return game_mode_;
}
inline void CSODOTALobby::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.game_mode)
}

// repeated fixed64 pending_invites = 10;
inline int CSODOTALobby::pending_invites_size() const {
  return pending_invites_.size();
}
inline void CSODOTALobby::clear_pending_invites() {
  pending_invites_.Clear();
}
inline ::google::protobuf::uint64 CSODOTALobby::pending_invites(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.pending_invites)
  return pending_invites_.Get(index);
}
inline void CSODOTALobby::set_pending_invites(int index, ::google::protobuf::uint64 value) {
  pending_invites_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.pending_invites)
}
inline void CSODOTALobby::add_pending_invites(::google::protobuf::uint64 value) {
  pending_invites_.Add(value);
  // @@protoc_insertion_point(field_add:CSODOTALobby.pending_invites)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CSODOTALobby::pending_invites() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.pending_invites)
  return pending_invites_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CSODOTALobby::mutable_pending_invites() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.pending_invites)
  return &pending_invites_;
}

// optional .CSODOTALobby.State state = 4 [default = UI];
inline bool CSODOTALobby::has_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSODOTALobby::set_has_state() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSODOTALobby::clear_has_state() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSODOTALobby::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::CSODOTALobby_State CSODOTALobby::state() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.state)
  return static_cast< ::CSODOTALobby_State >(state_);
}
inline void CSODOTALobby::set_state(::CSODOTALobby_State value) {
  assert(::CSODOTALobby_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.state)
}

// optional string connect = 5;
inline bool CSODOTALobby::has_connect() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSODOTALobby::set_has_connect() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSODOTALobby::clear_has_connect() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSODOTALobby::clear_connect() {
  if (connect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    connect_->clear();
  }
  clear_has_connect();
}
inline const ::std::string& CSODOTALobby::connect() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.connect)
  return *connect_;
}
inline void CSODOTALobby::set_connect(const ::std::string& value) {
  set_has_connect();
  if (connect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    connect_ = new ::std::string;
  }
  connect_->assign(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.connect)
}
inline void CSODOTALobby::set_connect(const char* value) {
  set_has_connect();
  if (connect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    connect_ = new ::std::string;
  }
  connect_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.connect)
}
inline void CSODOTALobby::set_connect(const char* value, size_t size) {
  set_has_connect();
  if (connect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    connect_ = new ::std::string;
  }
  connect_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.connect)
}
inline ::std::string* CSODOTALobby::mutable_connect() {
  set_has_connect();
  if (connect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    connect_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.connect)
  return connect_;
}
inline ::std::string* CSODOTALobby::release_connect() {
  clear_has_connect();
  if (connect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = connect_;
    connect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSODOTALobby::set_allocated_connect(::std::string* connect) {
  if (connect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete connect_;
  }
  if (connect) {
    set_has_connect();
    connect_ = connect;
  } else {
    clear_has_connect();
    connect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.connect)
}

// optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
inline bool CSODOTALobby::has_lobby_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSODOTALobby::set_has_lobby_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSODOTALobby::clear_has_lobby_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSODOTALobby::clear_lobby_type() {
  lobby_type_ = -1;
  clear_has_lobby_type();
}
inline ::CSODOTALobby_LobbyType CSODOTALobby::lobby_type() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.lobby_type)
  return static_cast< ::CSODOTALobby_LobbyType >(lobby_type_);
}
inline void CSODOTALobby::set_lobby_type(::CSODOTALobby_LobbyType value) {
  assert(::CSODOTALobby_LobbyType_IsValid(value));
  set_has_lobby_type();
  lobby_type_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.lobby_type)
}

// optional bool allow_cheats = 13;
inline bool CSODOTALobby::has_allow_cheats() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSODOTALobby::set_has_allow_cheats() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSODOTALobby::clear_has_allow_cheats() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSODOTALobby::clear_allow_cheats() {
  allow_cheats_ = false;
  clear_has_allow_cheats();
}
inline bool CSODOTALobby::allow_cheats() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.allow_cheats)
  return allow_cheats_;
}
inline void CSODOTALobby::set_allow_cheats(bool value) {
  set_has_allow_cheats();
  allow_cheats_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.allow_cheats)
}

// optional bool fill_with_bots = 14;
inline bool CSODOTALobby::has_fill_with_bots() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSODOTALobby::set_has_fill_with_bots() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CSODOTALobby::clear_has_fill_with_bots() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CSODOTALobby::clear_fill_with_bots() {
  fill_with_bots_ = false;
  clear_has_fill_with_bots();
}
inline bool CSODOTALobby::fill_with_bots() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.fill_with_bots)
  return fill_with_bots_;
}
inline void CSODOTALobby::set_fill_with_bots(bool value) {
  set_has_fill_with_bots();
  fill_with_bots_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.fill_with_bots)
}

// optional bool intro_mode = 15;
inline bool CSODOTALobby::has_intro_mode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSODOTALobby::set_has_intro_mode() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CSODOTALobby::clear_has_intro_mode() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CSODOTALobby::clear_intro_mode() {
  intro_mode_ = false;
  clear_has_intro_mode();
}
inline bool CSODOTALobby::intro_mode() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.intro_mode)
  return intro_mode_;
}
inline void CSODOTALobby::set_intro_mode(bool value) {
  set_has_intro_mode();
  intro_mode_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.intro_mode)
}

// optional string game_name = 16;
inline bool CSODOTALobby::has_game_name() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CSODOTALobby::set_has_game_name() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CSODOTALobby::clear_has_game_name() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CSODOTALobby::clear_game_name() {
  if (game_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_name_->clear();
  }
  clear_has_game_name();
}
inline const ::std::string& CSODOTALobby::game_name() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.game_name)
  return *game_name_;
}
inline void CSODOTALobby::set_game_name(const ::std::string& value) {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_name_ = new ::std::string;
  }
  game_name_->assign(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.game_name)
}
inline void CSODOTALobby::set_game_name(const char* value) {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_name_ = new ::std::string;
  }
  game_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.game_name)
}
inline void CSODOTALobby::set_game_name(const char* value, size_t size) {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_name_ = new ::std::string;
  }
  game_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.game_name)
}
inline ::std::string* CSODOTALobby::mutable_game_name() {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.game_name)
  return game_name_;
}
inline ::std::string* CSODOTALobby::release_game_name() {
  clear_has_game_name();
  if (game_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = game_name_;
    game_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSODOTALobby::set_allocated_game_name(::std::string* game_name) {
  if (game_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_name_;
  }
  if (game_name) {
    set_has_game_name();
    game_name_ = game_name;
  } else {
    clear_has_game_name();
    game_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.game_name)
}

// repeated .CLobbyTeamDetails team_details = 17;
inline int CSODOTALobby::team_details_size() const {
  return team_details_.size();
}
inline void CSODOTALobby::clear_team_details() {
  team_details_.Clear();
}
inline const ::CLobbyTeamDetails& CSODOTALobby::team_details(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.team_details)
  return team_details_.Get(index);
}
inline ::CLobbyTeamDetails* CSODOTALobby::mutable_team_details(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.team_details)
  return team_details_.Mutable(index);
}
inline ::CLobbyTeamDetails* CSODOTALobby::add_team_details() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.team_details)
  return team_details_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >&
CSODOTALobby::team_details() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.team_details)
  return team_details_;
}
inline ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >*
CSODOTALobby::mutable_team_details() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.team_details)
  return &team_details_;
}

// optional uint32 tutorial_lesson = 18;
inline bool CSODOTALobby::has_tutorial_lesson() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CSODOTALobby::set_has_tutorial_lesson() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CSODOTALobby::clear_has_tutorial_lesson() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CSODOTALobby::clear_tutorial_lesson() {
  tutorial_lesson_ = 0u;
  clear_has_tutorial_lesson();
}
inline ::google::protobuf::uint32 CSODOTALobby::tutorial_lesson() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.tutorial_lesson)
  return tutorial_lesson_;
}
inline void CSODOTALobby::set_tutorial_lesson(::google::protobuf::uint32 value) {
  set_has_tutorial_lesson();
  tutorial_lesson_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.tutorial_lesson)
}

// optional uint32 tournament_id = 19;
inline bool CSODOTALobby::has_tournament_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CSODOTALobby::set_has_tournament_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CSODOTALobby::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CSODOTALobby::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
inline ::google::protobuf::uint32 CSODOTALobby::tournament_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.tournament_id)
  return tournament_id_;
}
inline void CSODOTALobby::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.tournament_id)
}

// optional uint32 tournament_game_id = 20;
inline bool CSODOTALobby::has_tournament_game_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CSODOTALobby::set_has_tournament_game_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CSODOTALobby::clear_has_tournament_game_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CSODOTALobby::clear_tournament_game_id() {
  tournament_game_id_ = 0u;
  clear_has_tournament_game_id();
}
inline ::google::protobuf::uint32 CSODOTALobby::tournament_game_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.tournament_game_id)
  return tournament_game_id_;
}
inline void CSODOTALobby::set_tournament_game_id(::google::protobuf::uint32 value) {
  set_has_tournament_game_id();
  tournament_game_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.tournament_game_id)
}

// optional uint32 server_region = 21 [default = 0];
inline bool CSODOTALobby::has_server_region() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CSODOTALobby::set_has_server_region() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CSODOTALobby::clear_has_server_region() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CSODOTALobby::clear_server_region() {
  server_region_ = 0u;
  clear_has_server_region();
}
inline ::google::protobuf::uint32 CSODOTALobby::server_region() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.server_region)
  return server_region_;
}
inline void CSODOTALobby::set_server_region(::google::protobuf::uint32 value) {
  set_has_server_region();
  server_region_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.server_region)
}

// optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
inline bool CSODOTALobby::has_game_state() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CSODOTALobby::set_has_game_state() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CSODOTALobby::clear_has_game_state() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CSODOTALobby::clear_game_state() {
  game_state_ = 0;
  clear_has_game_state();
}
inline ::DOTA_GameState CSODOTALobby::game_state() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.game_state)
  return static_cast< ::DOTA_GameState >(game_state_);
}
inline void CSODOTALobby::set_game_state(::DOTA_GameState value) {
  assert(::DOTA_GameState_IsValid(value));
  set_has_game_state();
  game_state_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.game_state)
}

// optional uint32 num_spectators = 23;
inline bool CSODOTALobby::has_num_spectators() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CSODOTALobby::set_has_num_spectators() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CSODOTALobby::clear_has_num_spectators() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CSODOTALobby::clear_num_spectators() {
  num_spectators_ = 0u;
  clear_has_num_spectators();
}
inline ::google::protobuf::uint32 CSODOTALobby::num_spectators() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.num_spectators)
  return num_spectators_;
}
inline void CSODOTALobby::set_num_spectators(::google::protobuf::uint32 value) {
  set_has_num_spectators();
  num_spectators_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.num_spectators)
}

// optional uint32 matchgroup = 25;
inline bool CSODOTALobby::has_matchgroup() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CSODOTALobby::set_has_matchgroup() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CSODOTALobby::clear_has_matchgroup() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CSODOTALobby::clear_matchgroup() {
  matchgroup_ = 0u;
  clear_has_matchgroup();
}
inline ::google::protobuf::uint32 CSODOTALobby::matchgroup() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.matchgroup)
  return matchgroup_;
}
inline void CSODOTALobby::set_matchgroup(::google::protobuf::uint32 value) {
  set_has_matchgroup();
  matchgroup_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.matchgroup)
}

// optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
inline bool CSODOTALobby::has_cm_pick() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CSODOTALobby::set_has_cm_pick() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CSODOTALobby::clear_has_cm_pick() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CSODOTALobby::clear_cm_pick() {
  cm_pick_ = 0;
  clear_has_cm_pick();
}
inline ::DOTA_CM_PICK CSODOTALobby::cm_pick() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.cm_pick)
  return static_cast< ::DOTA_CM_PICK >(cm_pick_);
}
inline void CSODOTALobby::set_cm_pick(::DOTA_CM_PICK value) {
  assert(::DOTA_CM_PICK_IsValid(value));
  set_has_cm_pick();
  cm_pick_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.cm_pick)
}

// optional uint64 match_id = 30;
inline bool CSODOTALobby::has_match_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CSODOTALobby::set_has_match_id() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CSODOTALobby::clear_has_match_id() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CSODOTALobby::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
inline ::google::protobuf::uint64 CSODOTALobby::match_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.match_id)
  return match_id_;
}
inline void CSODOTALobby::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.match_id)
}

// optional bool allow_spectating = 31 [default = true];
inline bool CSODOTALobby::has_allow_spectating() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CSODOTALobby::set_has_allow_spectating() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CSODOTALobby::clear_has_allow_spectating() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CSODOTALobby::clear_allow_spectating() {
  allow_spectating_ = true;
  clear_has_allow_spectating();
}
inline bool CSODOTALobby::allow_spectating() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.allow_spectating)
  return allow_spectating_;
}
inline void CSODOTALobby::set_allow_spectating(bool value) {
  set_has_allow_spectating();
  allow_spectating_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.allow_spectating)
}

// optional .DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
inline bool CSODOTALobby::has_bot_difficulty_radiant() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CSODOTALobby::set_has_bot_difficulty_radiant() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CSODOTALobby::clear_has_bot_difficulty_radiant() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CSODOTALobby::clear_bot_difficulty_radiant() {
  bot_difficulty_radiant_ = 3;
  clear_has_bot_difficulty_radiant();
}
inline ::DOTABotDifficulty CSODOTALobby::bot_difficulty_radiant() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.bot_difficulty_radiant)
  return static_cast< ::DOTABotDifficulty >(bot_difficulty_radiant_);
}
inline void CSODOTALobby::set_bot_difficulty_radiant(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty_radiant();
  bot_difficulty_radiant_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.bot_difficulty_radiant)
}

// optional .DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
inline bool CSODOTALobby::has_game_version() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CSODOTALobby::set_has_game_version() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CSODOTALobby::clear_has_game_version() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CSODOTALobby::clear_game_version() {
  game_version_ = 0;
  clear_has_game_version();
}
inline ::DOTAGameVersion CSODOTALobby::game_version() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.game_version)
  return static_cast< ::DOTAGameVersion >(game_version_);
}
inline void CSODOTALobby::set_game_version(::DOTAGameVersion value) {
  assert(::DOTAGameVersion_IsValid(value));
  set_has_game_version();
  game_version_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.game_version)
}

// repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
inline int CSODOTALobby::timed_reward_details_size() const {
  return timed_reward_details_.size();
}
inline void CSODOTALobby::clear_timed_reward_details() {
  timed_reward_details_.Clear();
}
inline const ::CLobbyTimedRewardDetails& CSODOTALobby::timed_reward_details(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.timed_reward_details)
  return timed_reward_details_.Get(index);
}
inline ::CLobbyTimedRewardDetails* CSODOTALobby::mutable_timed_reward_details(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.timed_reward_details)
  return timed_reward_details_.Mutable(index);
}
inline ::CLobbyTimedRewardDetails* CSODOTALobby::add_timed_reward_details() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.timed_reward_details)
  return timed_reward_details_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >&
CSODOTALobby::timed_reward_details() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.timed_reward_details)
  return timed_reward_details_;
}
inline ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >*
CSODOTALobby::mutable_timed_reward_details() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.timed_reward_details)
  return &timed_reward_details_;
}

// optional string pass_key = 39;
inline bool CSODOTALobby::has_pass_key() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CSODOTALobby::set_has_pass_key() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CSODOTALobby::clear_has_pass_key() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CSODOTALobby::clear_pass_key() {
  if (pass_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_->clear();
  }
  clear_has_pass_key();
}
inline const ::std::string& CSODOTALobby::pass_key() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.pass_key)
  return *pass_key_;
}
inline void CSODOTALobby::set_pass_key(const ::std::string& value) {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  pass_key_->assign(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.pass_key)
}
inline void CSODOTALobby::set_pass_key(const char* value) {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  pass_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.pass_key)
}
inline void CSODOTALobby::set_pass_key(const char* value, size_t size) {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  pass_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.pass_key)
}
inline ::std::string* CSODOTALobby::mutable_pass_key() {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.pass_key)
  return pass_key_;
}
inline ::std::string* CSODOTALobby::release_pass_key() {
  clear_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pass_key_;
    pass_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSODOTALobby::set_allocated_pass_key(::std::string* pass_key) {
  if (pass_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pass_key_;
  }
  if (pass_key) {
    set_has_pass_key();
    pass_key_ = pass_key;
  } else {
    clear_has_pass_key();
    pass_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.pass_key)
}

// optional uint32 leagueid = 42;
inline bool CSODOTALobby::has_leagueid() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CSODOTALobby::set_has_leagueid() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CSODOTALobby::clear_has_leagueid() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CSODOTALobby::clear_leagueid() {
  leagueid_ = 0u;
  clear_has_leagueid();
}
inline ::google::protobuf::uint32 CSODOTALobby::leagueid() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.leagueid)
  return leagueid_;
}
inline void CSODOTALobby::set_leagueid(::google::protobuf::uint32 value) {
  set_has_leagueid();
  leagueid_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.leagueid)
}

// optional uint32 penalty_level_radiant = 43 [default = 0];
inline bool CSODOTALobby::has_penalty_level_radiant() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CSODOTALobby::set_has_penalty_level_radiant() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CSODOTALobby::clear_has_penalty_level_radiant() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CSODOTALobby::clear_penalty_level_radiant() {
  penalty_level_radiant_ = 0u;
  clear_has_penalty_level_radiant();
}
inline ::google::protobuf::uint32 CSODOTALobby::penalty_level_radiant() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.penalty_level_radiant)
  return penalty_level_radiant_;
}
inline void CSODOTALobby::set_penalty_level_radiant(::google::protobuf::uint32 value) {
  set_has_penalty_level_radiant();
  penalty_level_radiant_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.penalty_level_radiant)
}

// optional uint32 penalty_level_dire = 44 [default = 0];
inline bool CSODOTALobby::has_penalty_level_dire() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CSODOTALobby::set_has_penalty_level_dire() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CSODOTALobby::clear_has_penalty_level_dire() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CSODOTALobby::clear_penalty_level_dire() {
  penalty_level_dire_ = 0u;
  clear_has_penalty_level_dire();
}
inline ::google::protobuf::uint32 CSODOTALobby::penalty_level_dire() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.penalty_level_dire)
  return penalty_level_dire_;
}
inline void CSODOTALobby::set_penalty_level_dire(::google::protobuf::uint32 value) {
  set_has_penalty_level_dire();
  penalty_level_dire_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.penalty_level_dire)
}

// optional uint32 load_game_id = 45;
inline bool CSODOTALobby::has_load_game_id() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CSODOTALobby::set_has_load_game_id() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CSODOTALobby::clear_has_load_game_id() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CSODOTALobby::clear_load_game_id() {
  load_game_id_ = 0u;
  clear_has_load_game_id();
}
inline ::google::protobuf::uint32 CSODOTALobby::load_game_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.load_game_id)
  return load_game_id_;
}
inline void CSODOTALobby::set_load_game_id(::google::protobuf::uint32 value) {
  set_has_load_game_id();
  load_game_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.load_game_id)
}

// optional uint32 series_type = 46;
inline bool CSODOTALobby::has_series_type() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CSODOTALobby::set_has_series_type() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CSODOTALobby::clear_has_series_type() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CSODOTALobby::clear_series_type() {
  series_type_ = 0u;
  clear_has_series_type();
}
inline ::google::protobuf::uint32 CSODOTALobby::series_type() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.series_type)
  return series_type_;
}
inline void CSODOTALobby::set_series_type(::google::protobuf::uint32 value) {
  set_has_series_type();
  series_type_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.series_type)
}

// optional uint32 radiant_series_wins = 47;
inline bool CSODOTALobby::has_radiant_series_wins() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CSODOTALobby::set_has_radiant_series_wins() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CSODOTALobby::clear_has_radiant_series_wins() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CSODOTALobby::clear_radiant_series_wins() {
  radiant_series_wins_ = 0u;
  clear_has_radiant_series_wins();
}
inline ::google::protobuf::uint32 CSODOTALobby::radiant_series_wins() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.radiant_series_wins)
  return radiant_series_wins_;
}
inline void CSODOTALobby::set_radiant_series_wins(::google::protobuf::uint32 value) {
  set_has_radiant_series_wins();
  radiant_series_wins_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.radiant_series_wins)
}

// optional uint32 dire_series_wins = 48;
inline bool CSODOTALobby::has_dire_series_wins() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CSODOTALobby::set_has_dire_series_wins() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CSODOTALobby::clear_has_dire_series_wins() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CSODOTALobby::clear_dire_series_wins() {
  dire_series_wins_ = 0u;
  clear_has_dire_series_wins();
}
inline ::google::protobuf::uint32 CSODOTALobby::dire_series_wins() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.dire_series_wins)
  return dire_series_wins_;
}
inline void CSODOTALobby::set_dire_series_wins(::google::protobuf::uint32 value) {
  set_has_dire_series_wins();
  dire_series_wins_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.dire_series_wins)
}

// optional uint32 loot_generated = 49;
inline bool CSODOTALobby::has_loot_generated() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CSODOTALobby::set_has_loot_generated() {
  _has_bits_[1] |= 0x00000010u;
}
inline void CSODOTALobby::clear_has_loot_generated() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void CSODOTALobby::clear_loot_generated() {
  loot_generated_ = 0u;
  clear_has_loot_generated();
}
inline ::google::protobuf::uint32 CSODOTALobby::loot_generated() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.loot_generated)
  return loot_generated_;
}
inline void CSODOTALobby::set_loot_generated(::google::protobuf::uint32 value) {
  set_has_loot_generated();
  loot_generated_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.loot_generated)
}

// optional uint32 loot_awarded = 50;
inline bool CSODOTALobby::has_loot_awarded() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CSODOTALobby::set_has_loot_awarded() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CSODOTALobby::clear_has_loot_awarded() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CSODOTALobby::clear_loot_awarded() {
  loot_awarded_ = 0u;
  clear_has_loot_awarded();
}
inline ::google::protobuf::uint32 CSODOTALobby::loot_awarded() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.loot_awarded)
  return loot_awarded_;
}
inline void CSODOTALobby::set_loot_awarded(::google::protobuf::uint32 value) {
  set_has_loot_awarded();
  loot_awarded_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.loot_awarded)
}

// optional bool allchat = 51 [default = false];
inline bool CSODOTALobby::has_allchat() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CSODOTALobby::set_has_allchat() {
  _has_bits_[1] |= 0x00000040u;
}
inline void CSODOTALobby::clear_has_allchat() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void CSODOTALobby::clear_allchat() {
  allchat_ = false;
  clear_has_allchat();
}
inline bool CSODOTALobby::allchat() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.allchat)
  return allchat_;
}
inline void CSODOTALobby::set_allchat(bool value) {
  set_has_allchat();
  allchat_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.allchat)
}

// optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
inline bool CSODOTALobby::has_dota_tv_delay() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CSODOTALobby::set_has_dota_tv_delay() {
  _has_bits_[1] |= 0x00000080u;
}
inline void CSODOTALobby::clear_has_dota_tv_delay() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void CSODOTALobby::clear_dota_tv_delay() {
  dota_tv_delay_ = 0;
  clear_has_dota_tv_delay();
}
inline ::LobbyDotaTVDelay CSODOTALobby::dota_tv_delay() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.dota_tv_delay)
  return static_cast< ::LobbyDotaTVDelay >(dota_tv_delay_);
}
inline void CSODOTALobby::set_dota_tv_delay(::LobbyDotaTVDelay value) {
  assert(::LobbyDotaTVDelay_IsValid(value));
  set_has_dota_tv_delay();
  dota_tv_delay_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.dota_tv_delay)
}

// optional string custom_game_mode = 54;
inline bool CSODOTALobby::has_custom_game_mode() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CSODOTALobby::set_has_custom_game_mode() {
  _has_bits_[1] |= 0x00000100u;
}
inline void CSODOTALobby::clear_has_custom_game_mode() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void CSODOTALobby::clear_custom_game_mode() {
  if (custom_game_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_game_mode_->clear();
  }
  clear_has_custom_game_mode();
}
inline const ::std::string& CSODOTALobby::custom_game_mode() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_mode)
  return *custom_game_mode_;
}
inline void CSODOTALobby::set_custom_game_mode(const ::std::string& value) {
  set_has_custom_game_mode();
  if (custom_game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_game_mode_ = new ::std::string;
  }
  custom_game_mode_->assign(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_mode)
}
inline void CSODOTALobby::set_custom_game_mode(const char* value) {
  set_has_custom_game_mode();
  if (custom_game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_game_mode_ = new ::std::string;
  }
  custom_game_mode_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.custom_game_mode)
}
inline void CSODOTALobby::set_custom_game_mode(const char* value, size_t size) {
  set_has_custom_game_mode();
  if (custom_game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_game_mode_ = new ::std::string;
  }
  custom_game_mode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.custom_game_mode)
}
inline ::std::string* CSODOTALobby::mutable_custom_game_mode() {
  set_has_custom_game_mode();
  if (custom_game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_game_mode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.custom_game_mode)
  return custom_game_mode_;
}
inline ::std::string* CSODOTALobby::release_custom_game_mode() {
  clear_has_custom_game_mode();
  if (custom_game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = custom_game_mode_;
    custom_game_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSODOTALobby::set_allocated_custom_game_mode(::std::string* custom_game_mode) {
  if (custom_game_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete custom_game_mode_;
  }
  if (custom_game_mode) {
    set_has_custom_game_mode();
    custom_game_mode_ = custom_game_mode;
  } else {
    clear_has_custom_game_mode();
    custom_game_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.custom_game_mode)
}

// optional string custom_map_name = 55;
inline bool CSODOTALobby::has_custom_map_name() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CSODOTALobby::set_has_custom_map_name() {
  _has_bits_[1] |= 0x00000200u;
}
inline void CSODOTALobby::clear_has_custom_map_name() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void CSODOTALobby::clear_custom_map_name() {
  if (custom_map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_map_name_->clear();
  }
  clear_has_custom_map_name();
}
inline const ::std::string& CSODOTALobby::custom_map_name() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_map_name)
  return *custom_map_name_;
}
inline void CSODOTALobby::set_custom_map_name(const ::std::string& value) {
  set_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_map_name_ = new ::std::string;
  }
  custom_map_name_->assign(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_map_name)
}
inline void CSODOTALobby::set_custom_map_name(const char* value) {
  set_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_map_name_ = new ::std::string;
  }
  custom_map_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.custom_map_name)
}
inline void CSODOTALobby::set_custom_map_name(const char* value, size_t size) {
  set_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_map_name_ = new ::std::string;
  }
  custom_map_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.custom_map_name)
}
inline ::std::string* CSODOTALobby::mutable_custom_map_name() {
  set_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_map_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.custom_map_name)
  return custom_map_name_;
}
inline ::std::string* CSODOTALobby::release_custom_map_name() {
  clear_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = custom_map_name_;
    custom_map_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSODOTALobby::set_allocated_custom_map_name(::std::string* custom_map_name) {
  if (custom_map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete custom_map_name_;
  }
  if (custom_map_name) {
    set_has_custom_map_name();
    custom_map_name_ = custom_map_name;
  } else {
    clear_has_custom_map_name();
    custom_map_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.custom_map_name)
}

// optional uint32 custom_difficulty = 56;
inline bool CSODOTALobby::has_custom_difficulty() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CSODOTALobby::set_has_custom_difficulty() {
  _has_bits_[1] |= 0x00000400u;
}
inline void CSODOTALobby::clear_has_custom_difficulty() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void CSODOTALobby::clear_custom_difficulty() {
  custom_difficulty_ = 0u;
  clear_has_custom_difficulty();
}
inline ::google::protobuf::uint32 CSODOTALobby::custom_difficulty() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_difficulty)
  return custom_difficulty_;
}
inline void CSODOTALobby::set_custom_difficulty(::google::protobuf::uint32 value) {
  set_has_custom_difficulty();
  custom_difficulty_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_difficulty)
}

// optional bool lan = 57;
inline bool CSODOTALobby::has_lan() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void CSODOTALobby::set_has_lan() {
  _has_bits_[1] |= 0x00000800u;
}
inline void CSODOTALobby::clear_has_lan() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void CSODOTALobby::clear_lan() {
  lan_ = false;
  clear_has_lan();
}
inline bool CSODOTALobby::lan() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.lan)
  return lan_;
}
inline void CSODOTALobby::set_lan(bool value) {
  set_has_lan();
  lan_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.lan)
}

// repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
inline int CSODOTALobby::broadcast_channel_info_size() const {
  return broadcast_channel_info_.size();
}
inline void CSODOTALobby::clear_broadcast_channel_info() {
  broadcast_channel_info_.Clear();
}
inline const ::CLobbyBroadcastChannelInfo& CSODOTALobby::broadcast_channel_info(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.broadcast_channel_info)
  return broadcast_channel_info_.Get(index);
}
inline ::CLobbyBroadcastChannelInfo* CSODOTALobby::mutable_broadcast_channel_info(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.broadcast_channel_info)
  return broadcast_channel_info_.Mutable(index);
}
inline ::CLobbyBroadcastChannelInfo* CSODOTALobby::add_broadcast_channel_info() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.broadcast_channel_info)
  return broadcast_channel_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CLobbyBroadcastChannelInfo >&
CSODOTALobby::broadcast_channel_info() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.broadcast_channel_info)
  return broadcast_channel_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::CLobbyBroadcastChannelInfo >*
CSODOTALobby::mutable_broadcast_channel_info() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.broadcast_channel_info)
  return &broadcast_channel_info_;
}

// optional uint32 first_leaver_accountid = 59;
inline bool CSODOTALobby::has_first_leaver_accountid() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void CSODOTALobby::set_has_first_leaver_accountid() {
  _has_bits_[1] |= 0x00002000u;
}
inline void CSODOTALobby::clear_has_first_leaver_accountid() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void CSODOTALobby::clear_first_leaver_accountid() {
  first_leaver_accountid_ = 0u;
  clear_has_first_leaver_accountid();
}
inline ::google::protobuf::uint32 CSODOTALobby::first_leaver_accountid() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.first_leaver_accountid)
  return first_leaver_accountid_;
}
inline void CSODOTALobby::set_first_leaver_accountid(::google::protobuf::uint32 value) {
  set_has_first_leaver_accountid();
  first_leaver_accountid_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.first_leaver_accountid)
}

// optional uint32 series_id = 60;
inline bool CSODOTALobby::has_series_id() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void CSODOTALobby::set_has_series_id() {
  _has_bits_[1] |= 0x00004000u;
}
inline void CSODOTALobby::clear_has_series_id() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void CSODOTALobby::clear_series_id() {
  series_id_ = 0u;
  clear_has_series_id();
}
inline ::google::protobuf::uint32 CSODOTALobby::series_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.series_id)
  return series_id_;
}
inline void CSODOTALobby::set_series_id(::google::protobuf::uint32 value) {
  set_has_series_id();
  series_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.series_id)
}

// optional bool low_priority = 61;
inline bool CSODOTALobby::has_low_priority() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void CSODOTALobby::set_has_low_priority() {
  _has_bits_[1] |= 0x00008000u;
}
inline void CSODOTALobby::clear_has_low_priority() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void CSODOTALobby::clear_low_priority() {
  low_priority_ = false;
  clear_has_low_priority();
}
inline bool CSODOTALobby::low_priority() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.low_priority)
  return low_priority_;
}
inline void CSODOTALobby::set_low_priority(bool value) {
  set_has_low_priority();
  low_priority_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.low_priority)
}

// repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
inline int CSODOTALobby::extra_messages_size() const {
  return extra_messages_.size();
}
inline void CSODOTALobby::clear_extra_messages() {
  extra_messages_.Clear();
}
inline const ::CSODOTALobby_CExtraMsg& CSODOTALobby::extra_messages(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.extra_messages)
  return extra_messages_.Get(index);
}
inline ::CSODOTALobby_CExtraMsg* CSODOTALobby::mutable_extra_messages(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.extra_messages)
  return extra_messages_.Mutable(index);
}
inline ::CSODOTALobby_CExtraMsg* CSODOTALobby::add_extra_messages() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.extra_messages)
  return extra_messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSODOTALobby_CExtraMsg >&
CSODOTALobby::extra_messages() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.extra_messages)
  return extra_messages_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSODOTALobby_CExtraMsg >*
CSODOTALobby::mutable_extra_messages() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.extra_messages)
  return &extra_messages_;
}

// optional .CDOTASaveGame save_game = 63;
inline bool CSODOTALobby::has_save_game() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void CSODOTALobby::set_has_save_game() {
  _has_bits_[1] |= 0x00020000u;
}
inline void CSODOTALobby::clear_has_save_game() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void CSODOTALobby::clear_save_game() {
  if (save_game_ != NULL) save_game_->::CDOTASaveGame::Clear();
  clear_has_save_game();
}
inline const ::CDOTASaveGame& CSODOTALobby::save_game() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.save_game)
  return save_game_ != NULL ? *save_game_ : *default_instance_->save_game_;
}
inline ::CDOTASaveGame* CSODOTALobby::mutable_save_game() {
  set_has_save_game();
  if (save_game_ == NULL) save_game_ = new ::CDOTASaveGame;
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.save_game)
  return save_game_;
}
inline ::CDOTASaveGame* CSODOTALobby::release_save_game() {
  clear_has_save_game();
  ::CDOTASaveGame* temp = save_game_;
  save_game_ = NULL;
  return temp;
}
inline void CSODOTALobby::set_allocated_save_game(::CDOTASaveGame* save_game) {
  delete save_game_;
  save_game_ = save_game;
  if (save_game) {
    set_has_save_game();
  } else {
    clear_has_save_game();
  }
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.save_game)
}

// optional bool first_blood_happened = 65;
inline bool CSODOTALobby::has_first_blood_happened() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void CSODOTALobby::set_has_first_blood_happened() {
  _has_bits_[1] |= 0x00040000u;
}
inline void CSODOTALobby::clear_has_first_blood_happened() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void CSODOTALobby::clear_first_blood_happened() {
  first_blood_happened_ = false;
  clear_has_first_blood_happened();
}
inline bool CSODOTALobby::first_blood_happened() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.first_blood_happened)
  return first_blood_happened_;
}
inline void CSODOTALobby::set_first_blood_happened(bool value) {
  set_has_first_blood_happened();
  first_blood_happened_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.first_blood_happened)
}

// optional .EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
inline bool CSODOTALobby::has_match_outcome() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void CSODOTALobby::set_has_match_outcome() {
  _has_bits_[1] |= 0x00080000u;
}
inline void CSODOTALobby::clear_has_match_outcome() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void CSODOTALobby::clear_match_outcome() {
  match_outcome_ = 0;
  clear_has_match_outcome();
}
inline ::EMatchOutcome CSODOTALobby::match_outcome() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.match_outcome)
  return static_cast< ::EMatchOutcome >(match_outcome_);
}
inline void CSODOTALobby::set_match_outcome(::EMatchOutcome value) {
  assert(::EMatchOutcome_IsValid(value));
  set_has_match_outcome();
  match_outcome_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.match_outcome)
}

// optional bool mass_disconnect = 67;
inline bool CSODOTALobby::has_mass_disconnect() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void CSODOTALobby::set_has_mass_disconnect() {
  _has_bits_[1] |= 0x00100000u;
}
inline void CSODOTALobby::clear_has_mass_disconnect() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void CSODOTALobby::clear_mass_disconnect() {
  mass_disconnect_ = false;
  clear_has_mass_disconnect();
}
inline bool CSODOTALobby::mass_disconnect() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.mass_disconnect)
  return mass_disconnect_;
}
inline void CSODOTALobby::set_mass_disconnect(bool value) {
  set_has_mass_disconnect();
  mass_disconnect_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.mass_disconnect)
}

// optional uint64 custom_game_id = 68;
inline bool CSODOTALobby::has_custom_game_id() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void CSODOTALobby::set_has_custom_game_id() {
  _has_bits_[1] |= 0x00200000u;
}
inline void CSODOTALobby::clear_has_custom_game_id() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void CSODOTALobby::clear_custom_game_id() {
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_id();
}
inline ::google::protobuf::uint64 CSODOTALobby::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_id)
  return custom_game_id_;
}
inline void CSODOTALobby::set_custom_game_id(::google::protobuf::uint64 value) {
  set_has_custom_game_id();
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_id)
}

// repeated .EEvent active_ingame_events = 69;
inline int CSODOTALobby::active_ingame_events_size() const {
  return active_ingame_events_.size();
}
inline void CSODOTALobby::clear_active_ingame_events() {
  active_ingame_events_.Clear();
}
inline ::EEvent CSODOTALobby::active_ingame_events(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.active_ingame_events)
  return static_cast< ::EEvent >(active_ingame_events_.Get(index));
}
inline void CSODOTALobby::set_active_ingame_events(int index, ::EEvent value) {
  assert(::EEvent_IsValid(value));
  active_ingame_events_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.active_ingame_events)
}
inline void CSODOTALobby::add_active_ingame_events(::EEvent value) {
  assert(::EEvent_IsValid(value));
  active_ingame_events_.Add(value);
  // @@protoc_insertion_point(field_add:CSODOTALobby.active_ingame_events)
}
inline const ::google::protobuf::RepeatedField<int>&
CSODOTALobby::active_ingame_events() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.active_ingame_events)
  return active_ingame_events_;
}
inline ::google::protobuf::RepeatedField<int>*
CSODOTALobby::mutable_active_ingame_events() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.active_ingame_events)
  return &active_ingame_events_;
}

// optional uint32 custom_min_players = 71;
inline bool CSODOTALobby::has_custom_min_players() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void CSODOTALobby::set_has_custom_min_players() {
  _has_bits_[1] |= 0x00800000u;
}
inline void CSODOTALobby::clear_has_custom_min_players() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void CSODOTALobby::clear_custom_min_players() {
  custom_min_players_ = 0u;
  clear_has_custom_min_players();
}
inline ::google::protobuf::uint32 CSODOTALobby::custom_min_players() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_min_players)
  return custom_min_players_;
}
inline void CSODOTALobby::set_custom_min_players(::google::protobuf::uint32 value) {
  set_has_custom_min_players();
  custom_min_players_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_min_players)
}

// optional uint32 custom_max_players = 72;
inline bool CSODOTALobby::has_custom_max_players() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void CSODOTALobby::set_has_custom_max_players() {
  _has_bits_[1] |= 0x01000000u;
}
inline void CSODOTALobby::clear_has_custom_max_players() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void CSODOTALobby::clear_custom_max_players() {
  custom_max_players_ = 0u;
  clear_has_custom_max_players();
}
inline ::google::protobuf::uint32 CSODOTALobby::custom_max_players() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_max_players)
  return custom_max_players_;
}
inline void CSODOTALobby::set_custom_max_players(::google::protobuf::uint32 value) {
  set_has_custom_max_players();
  custom_max_players_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_max_players)
}

// optional .PartnerAccountType partner_type = 73 [default = PARTNER_NONE];
inline bool CSODOTALobby::has_partner_type() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void CSODOTALobby::set_has_partner_type() {
  _has_bits_[1] |= 0x02000000u;
}
inline void CSODOTALobby::clear_has_partner_type() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void CSODOTALobby::clear_partner_type() {
  partner_type_ = 0;
  clear_has_partner_type();
}
inline ::PartnerAccountType CSODOTALobby::partner_type() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.partner_type)
  return static_cast< ::PartnerAccountType >(partner_type_);
}
inline void CSODOTALobby::set_partner_type(::PartnerAccountType value) {
  assert(::PartnerAccountType_IsValid(value));
  set_has_partner_type();
  partner_type_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.partner_type)
}

// optional uint32 lan_host_ping_to_server_region = 74;
inline bool CSODOTALobby::has_lan_host_ping_to_server_region() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void CSODOTALobby::set_has_lan_host_ping_to_server_region() {
  _has_bits_[1] |= 0x04000000u;
}
inline void CSODOTALobby::clear_has_lan_host_ping_to_server_region() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void CSODOTALobby::clear_lan_host_ping_to_server_region() {
  lan_host_ping_to_server_region_ = 0u;
  clear_has_lan_host_ping_to_server_region();
}
inline ::google::protobuf::uint32 CSODOTALobby::lan_host_ping_to_server_region() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.lan_host_ping_to_server_region)
  return lan_host_ping_to_server_region_;
}
inline void CSODOTALobby::set_lan_host_ping_to_server_region(::google::protobuf::uint32 value) {
  set_has_lan_host_ping_to_server_region();
  lan_host_ping_to_server_region_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.lan_host_ping_to_server_region)
}

// optional .DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
inline bool CSODOTALobby::has_visibility() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void CSODOTALobby::set_has_visibility() {
  _has_bits_[1] |= 0x08000000u;
}
inline void CSODOTALobby::clear_has_visibility() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void CSODOTALobby::clear_visibility() {
  visibility_ = 0;
  clear_has_visibility();
}
inline ::DOTALobbyVisibility CSODOTALobby::visibility() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.visibility)
  return static_cast< ::DOTALobbyVisibility >(visibility_);
}
inline void CSODOTALobby::set_visibility(::DOTALobbyVisibility value) {
  assert(::DOTALobbyVisibility_IsValid(value));
  set_has_visibility();
  visibility_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.visibility)
}

// optional fixed64 custom_game_crc = 76;
inline bool CSODOTALobby::has_custom_game_crc() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void CSODOTALobby::set_has_custom_game_crc() {
  _has_bits_[1] |= 0x10000000u;
}
inline void CSODOTALobby::clear_has_custom_game_crc() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void CSODOTALobby::clear_custom_game_crc() {
  custom_game_crc_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_crc();
}
inline ::google::protobuf::uint64 CSODOTALobby::custom_game_crc() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_crc)
  return custom_game_crc_;
}
inline void CSODOTALobby::set_custom_game_crc(::google::protobuf::uint64 value) {
  set_has_custom_game_crc();
  custom_game_crc_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_crc)
}

// optional bool custom_game_auto_created_lobby = 77;
inline bool CSODOTALobby::has_custom_game_auto_created_lobby() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void CSODOTALobby::set_has_custom_game_auto_created_lobby() {
  _has_bits_[1] |= 0x20000000u;
}
inline void CSODOTALobby::clear_has_custom_game_auto_created_lobby() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void CSODOTALobby::clear_custom_game_auto_created_lobby() {
  custom_game_auto_created_lobby_ = false;
  clear_has_custom_game_auto_created_lobby();
}
inline bool CSODOTALobby::custom_game_auto_created_lobby() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_auto_created_lobby)
  return custom_game_auto_created_lobby_;
}
inline void CSODOTALobby::set_custom_game_auto_created_lobby(bool value) {
  set_has_custom_game_auto_created_lobby();
  custom_game_auto_created_lobby_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_auto_created_lobby)
}

// optional uint32 league_series_id = 78;
inline bool CSODOTALobby::has_league_series_id() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void CSODOTALobby::set_has_league_series_id() {
  _has_bits_[1] |= 0x40000000u;
}
inline void CSODOTALobby::clear_has_league_series_id() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void CSODOTALobby::clear_league_series_id() {
  league_series_id_ = 0u;
  clear_has_league_series_id();
}
inline ::google::protobuf::uint32 CSODOTALobby::league_series_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.league_series_id)
  return league_series_id_;
}
inline void CSODOTALobby::set_league_series_id(::google::protobuf::uint32 value) {
  set_has_league_series_id();
  league_series_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.league_series_id)
}

// optional uint32 league_game_id = 79;
inline bool CSODOTALobby::has_league_game_id() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void CSODOTALobby::set_has_league_game_id() {
  _has_bits_[1] |= 0x80000000u;
}
inline void CSODOTALobby::clear_has_league_game_id() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void CSODOTALobby::clear_league_game_id() {
  league_game_id_ = 0u;
  clear_has_league_game_id();
}
inline ::google::protobuf::uint32 CSODOTALobby::league_game_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.league_game_id)
  return league_game_id_;
}
inline void CSODOTALobby::set_league_game_id(::google::protobuf::uint32 value) {
  set_has_league_game_id();
  league_game_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.league_game_id)
}

// optional fixed32 custom_game_timestamp = 80;
inline bool CSODOTALobby::has_custom_game_timestamp() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void CSODOTALobby::set_has_custom_game_timestamp() {
  _has_bits_[2] |= 0x00000001u;
}
inline void CSODOTALobby::clear_has_custom_game_timestamp() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void CSODOTALobby::clear_custom_game_timestamp() {
  custom_game_timestamp_ = 0u;
  clear_has_custom_game_timestamp();
}
inline ::google::protobuf::uint32 CSODOTALobby::custom_game_timestamp() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_timestamp)
  return custom_game_timestamp_;
}
inline void CSODOTALobby::set_custom_game_timestamp(::google::protobuf::uint32 value) {
  set_has_custom_game_timestamp();
  custom_game_timestamp_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_timestamp)
}

// repeated uint64 previous_series_matches = 81;
inline int CSODOTALobby::previous_series_matches_size() const {
  return previous_series_matches_.size();
}
inline void CSODOTALobby::clear_previous_series_matches() {
  previous_series_matches_.Clear();
}
inline ::google::protobuf::uint64 CSODOTALobby::previous_series_matches(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.previous_series_matches)
  return previous_series_matches_.Get(index);
}
inline void CSODOTALobby::set_previous_series_matches(int index, ::google::protobuf::uint64 value) {
  previous_series_matches_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.previous_series_matches)
}
inline void CSODOTALobby::add_previous_series_matches(::google::protobuf::uint64 value) {
  previous_series_matches_.Add(value);
  // @@protoc_insertion_point(field_add:CSODOTALobby.previous_series_matches)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CSODOTALobby::previous_series_matches() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.previous_series_matches)
  return previous_series_matches_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CSODOTALobby::mutable_previous_series_matches() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.previous_series_matches)
  return &previous_series_matches_;
}

// optional uint64 previous_match_override = 82;
inline bool CSODOTALobby::has_previous_match_override() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void CSODOTALobby::set_has_previous_match_override() {
  _has_bits_[2] |= 0x00000004u;
}
inline void CSODOTALobby::clear_has_previous_match_override() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void CSODOTALobby::clear_previous_match_override() {
  previous_match_override_ = GOOGLE_ULONGLONG(0);
  clear_has_previous_match_override();
}
inline ::google::protobuf::uint64 CSODOTALobby::previous_match_override() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.previous_match_override)
  return previous_match_override_;
}
inline void CSODOTALobby::set_previous_match_override(::google::protobuf::uint64 value) {
  set_has_previous_match_override();
  previous_match_override_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.previous_match_override)
}

// optional bool custom_game_uses_account_records = 83;
inline bool CSODOTALobby::has_custom_game_uses_account_records() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void CSODOTALobby::set_has_custom_game_uses_account_records() {
  _has_bits_[2] |= 0x00000008u;
}
inline void CSODOTALobby::clear_has_custom_game_uses_account_records() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void CSODOTALobby::clear_custom_game_uses_account_records() {
  custom_game_uses_account_records_ = false;
  clear_has_custom_game_uses_account_records();
}
inline bool CSODOTALobby::custom_game_uses_account_records() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_uses_account_records)
  return custom_game_uses_account_records_;
}
inline void CSODOTALobby::set_custom_game_uses_account_records(bool value) {
  set_has_custom_game_uses_account_records();
  custom_game_uses_account_records_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_uses_account_records)
}

// optional uint32 league_selection_priority_team = 84;
inline bool CSODOTALobby::has_league_selection_priority_team() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void CSODOTALobby::set_has_league_selection_priority_team() {
  _has_bits_[2] |= 0x00000010u;
}
inline void CSODOTALobby::clear_has_league_selection_priority_team() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void CSODOTALobby::clear_league_selection_priority_team() {
  league_selection_priority_team_ = 0u;
  clear_has_league_selection_priority_team();
}
inline ::google::protobuf::uint32 CSODOTALobby::league_selection_priority_team() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.league_selection_priority_team)
  return league_selection_priority_team_;
}
inline void CSODOTALobby::set_league_selection_priority_team(::google::protobuf::uint32 value) {
  set_has_league_selection_priority_team();
  league_selection_priority_team_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.league_selection_priority_team)
}

// optional .SelectionPriorityType league_selection_priority_choice = 85 [default = UNDEFINED];
inline bool CSODOTALobby::has_league_selection_priority_choice() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void CSODOTALobby::set_has_league_selection_priority_choice() {
  _has_bits_[2] |= 0x00000020u;
}
inline void CSODOTALobby::clear_has_league_selection_priority_choice() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void CSODOTALobby::clear_league_selection_priority_choice() {
  league_selection_priority_choice_ = 0;
  clear_has_league_selection_priority_choice();
}
inline ::SelectionPriorityType CSODOTALobby::league_selection_priority_choice() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.league_selection_priority_choice)
  return static_cast< ::SelectionPriorityType >(league_selection_priority_choice_);
}
inline void CSODOTALobby::set_league_selection_priority_choice(::SelectionPriorityType value) {
  assert(::SelectionPriorityType_IsValid(value));
  set_has_league_selection_priority_choice();
  league_selection_priority_choice_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.league_selection_priority_choice)
}

// optional .SelectionPriorityType league_non_selection_priority_choice = 86 [default = UNDEFINED];
inline bool CSODOTALobby::has_league_non_selection_priority_choice() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void CSODOTALobby::set_has_league_non_selection_priority_choice() {
  _has_bits_[2] |= 0x00000040u;
}
inline void CSODOTALobby::clear_has_league_non_selection_priority_choice() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void CSODOTALobby::clear_league_non_selection_priority_choice() {
  league_non_selection_priority_choice_ = 0;
  clear_has_league_non_selection_priority_choice();
}
inline ::SelectionPriorityType CSODOTALobby::league_non_selection_priority_choice() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.league_non_selection_priority_choice)
  return static_cast< ::SelectionPriorityType >(league_non_selection_priority_choice_);
}
inline void CSODOTALobby::set_league_non_selection_priority_choice(::SelectionPriorityType value) {
  assert(::SelectionPriorityType_IsValid(value));
  set_has_league_non_selection_priority_choice();
  league_non_selection_priority_choice_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.league_non_selection_priority_choice)
}

// optional uint32 game_start_time = 87;
inline bool CSODOTALobby::has_game_start_time() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void CSODOTALobby::set_has_game_start_time() {
  _has_bits_[2] |= 0x00000080u;
}
inline void CSODOTALobby::clear_has_game_start_time() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void CSODOTALobby::clear_game_start_time() {
  game_start_time_ = 0u;
  clear_has_game_start_time();
}
inline ::google::protobuf::uint32 CSODOTALobby::game_start_time() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.game_start_time)
  return game_start_time_;
}
inline void CSODOTALobby::set_game_start_time(::google::protobuf::uint32 value) {
  set_has_game_start_time();
  game_start_time_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.game_start_time)
}

// optional .LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
inline bool CSODOTALobby::has_pause_setting() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void CSODOTALobby::set_has_pause_setting() {
  _has_bits_[2] |= 0x00000100u;
}
inline void CSODOTALobby::clear_has_pause_setting() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void CSODOTALobby::clear_pause_setting() {
  pause_setting_ = 0;
  clear_has_pause_setting();
}
inline ::LobbyDotaPauseSetting CSODOTALobby::pause_setting() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.pause_setting)
  return static_cast< ::LobbyDotaPauseSetting >(pause_setting_);
}
inline void CSODOTALobby::set_pause_setting(::LobbyDotaPauseSetting value) {
  assert(::LobbyDotaPauseSetting_IsValid(value));
  set_has_pause_setting();
  pause_setting_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.pause_setting)
}

// optional uint32 lobby_mvp_account_id = 89;
inline bool CSODOTALobby::has_lobby_mvp_account_id() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void CSODOTALobby::set_has_lobby_mvp_account_id() {
  _has_bits_[2] |= 0x00000200u;
}
inline void CSODOTALobby::clear_has_lobby_mvp_account_id() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void CSODOTALobby::clear_lobby_mvp_account_id() {
  lobby_mvp_account_id_ = 0u;
  clear_has_lobby_mvp_account_id();
}
inline ::google::protobuf::uint32 CSODOTALobby::lobby_mvp_account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.lobby_mvp_account_id)
  return lobby_mvp_account_id_;
}
inline void CSODOTALobby::set_lobby_mvp_account_id(::google::protobuf::uint32 value) {
  set_has_lobby_mvp_account_id();
  lobby_mvp_account_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.lobby_mvp_account_id)
}

// optional uint32 weekend_tourney_division_id = 90;
inline bool CSODOTALobby::has_weekend_tourney_division_id() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void CSODOTALobby::set_has_weekend_tourney_division_id() {
  _has_bits_[2] |= 0x00000400u;
}
inline void CSODOTALobby::clear_has_weekend_tourney_division_id() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void CSODOTALobby::clear_weekend_tourney_division_id() {
  weekend_tourney_division_id_ = 0u;
  clear_has_weekend_tourney_division_id();
}
inline ::google::protobuf::uint32 CSODOTALobby::weekend_tourney_division_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.weekend_tourney_division_id)
  return weekend_tourney_division_id_;
}
inline void CSODOTALobby::set_weekend_tourney_division_id(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_division_id();
  weekend_tourney_division_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.weekend_tourney_division_id)
}

// optional uint32 weekend_tourney_skill_level = 91;
inline bool CSODOTALobby::has_weekend_tourney_skill_level() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void CSODOTALobby::set_has_weekend_tourney_skill_level() {
  _has_bits_[2] |= 0x00000800u;
}
inline void CSODOTALobby::clear_has_weekend_tourney_skill_level() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void CSODOTALobby::clear_weekend_tourney_skill_level() {
  weekend_tourney_skill_level_ = 0u;
  clear_has_weekend_tourney_skill_level();
}
inline ::google::protobuf::uint32 CSODOTALobby::weekend_tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.weekend_tourney_skill_level)
  return weekend_tourney_skill_level_;
}
inline void CSODOTALobby::set_weekend_tourney_skill_level(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_skill_level();
  weekend_tourney_skill_level_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.weekend_tourney_skill_level)
}

// optional uint32 weekend_tourney_bracket_round = 92;
inline bool CSODOTALobby::has_weekend_tourney_bracket_round() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void CSODOTALobby::set_has_weekend_tourney_bracket_round() {
  _has_bits_[2] |= 0x00001000u;
}
inline void CSODOTALobby::clear_has_weekend_tourney_bracket_round() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void CSODOTALobby::clear_weekend_tourney_bracket_round() {
  weekend_tourney_bracket_round_ = 0u;
  clear_has_weekend_tourney_bracket_round();
}
inline ::google::protobuf::uint32 CSODOTALobby::weekend_tourney_bracket_round() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.weekend_tourney_bracket_round)
  return weekend_tourney_bracket_round_;
}
inline void CSODOTALobby::set_weekend_tourney_bracket_round(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_bracket_round();
  weekend_tourney_bracket_round_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.weekend_tourney_bracket_round)
}

// optional .DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
inline bool CSODOTALobby::has_bot_difficulty_dire() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void CSODOTALobby::set_has_bot_difficulty_dire() {
  _has_bits_[2] |= 0x00002000u;
}
inline void CSODOTALobby::clear_has_bot_difficulty_dire() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void CSODOTALobby::clear_bot_difficulty_dire() {
  bot_difficulty_dire_ = 3;
  clear_has_bot_difficulty_dire();
}
inline ::DOTABotDifficulty CSODOTALobby::bot_difficulty_dire() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.bot_difficulty_dire)
  return static_cast< ::DOTABotDifficulty >(bot_difficulty_dire_);
}
inline void CSODOTALobby::set_bot_difficulty_dire(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty_dire();
  bot_difficulty_dire_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.bot_difficulty_dire)
}

// optional uint64 bot_radiant = 94;
inline bool CSODOTALobby::has_bot_radiant() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void CSODOTALobby::set_has_bot_radiant() {
  _has_bits_[2] |= 0x00004000u;
}
inline void CSODOTALobby::clear_has_bot_radiant() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void CSODOTALobby::clear_bot_radiant() {
  bot_radiant_ = GOOGLE_ULONGLONG(0);
  clear_has_bot_radiant();
}
inline ::google::protobuf::uint64 CSODOTALobby::bot_radiant() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.bot_radiant)
  return bot_radiant_;
}
inline void CSODOTALobby::set_bot_radiant(::google::protobuf::uint64 value) {
  set_has_bot_radiant();
  bot_radiant_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.bot_radiant)
}

// optional uint64 bot_dire = 95;
inline bool CSODOTALobby::has_bot_dire() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void CSODOTALobby::set_has_bot_dire() {
  _has_bits_[2] |= 0x00008000u;
}
inline void CSODOTALobby::clear_has_bot_dire() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void CSODOTALobby::clear_bot_dire() {
  bot_dire_ = GOOGLE_ULONGLONG(0);
  clear_has_bot_dire();
}
inline ::google::protobuf::uint64 CSODOTALobby::bot_dire() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.bot_dire)
  return bot_dire_;
}
inline void CSODOTALobby::set_bot_dire(::google::protobuf::uint64 value) {
  set_has_bot_dire();
  bot_dire_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.bot_dire)
}

// -------------------------------------------------------------------

// CMsgLobbyPlaytestDetails

// optional string json = 1;
inline bool CMsgLobbyPlaytestDetails::has_json() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgLobbyPlaytestDetails::set_has_json() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgLobbyPlaytestDetails::clear_has_json() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgLobbyPlaytestDetails::clear_json() {
  if (json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_->clear();
  }
  clear_has_json();
}
inline const ::std::string& CMsgLobbyPlaytestDetails::json() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyPlaytestDetails.json)
  return *json_;
}
inline void CMsgLobbyPlaytestDetails::set_json(const ::std::string& value) {
  set_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ = new ::std::string;
  }
  json_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyPlaytestDetails.json)
}
inline void CMsgLobbyPlaytestDetails::set_json(const char* value) {
  set_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ = new ::std::string;
  }
  json_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgLobbyPlaytestDetails.json)
}
inline void CMsgLobbyPlaytestDetails::set_json(const char* value, size_t size) {
  set_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ = new ::std::string;
  }
  json_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgLobbyPlaytestDetails.json)
}
inline ::std::string* CMsgLobbyPlaytestDetails::mutable_json() {
  set_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgLobbyPlaytestDetails.json)
  return json_;
}
inline ::std::string* CMsgLobbyPlaytestDetails::release_json() {
  clear_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = json_;
    json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgLobbyPlaytestDetails::set_allocated_json(::std::string* json) {
  if (json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_;
  }
  if (json) {
    set_has_json();
    json_ = json;
  } else {
    clear_has_json();
    json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgLobbyPlaytestDetails.json)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CSODOTAParty_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSODOTAParty_State>() {
  return ::CSODOTAParty_State_descriptor();
}
template <> struct is_proto_enum< ::CSODOTALobby_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSODOTALobby_State>() {
  return ::CSODOTALobby_State_descriptor();
}
template <> struct is_proto_enum< ::CSODOTALobby_LobbyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSODOTALobby_LobbyType>() {
  return ::CSODOTALobby_LobbyType_descriptor();
}
template <> struct is_proto_enum< ::LobbyDotaTVDelay> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LobbyDotaTVDelay>() {
  return ::LobbyDotaTVDelay_descriptor();
}
template <> struct is_proto_enum< ::LobbyDotaPauseSetting> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LobbyDotaPauseSetting>() {
  return ::LobbyDotaPauseSetting_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto__INCLUDED
