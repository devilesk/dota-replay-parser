// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_gcmessages_server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgSpawnLootGreevil_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSpawnLootGreevil_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDismissLootGreevil_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDismissLootGreevil_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDismissLootGreevilResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDismissLootGreevilResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPoorNetworkConditions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPoorNetworkConditions_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPoorNetworkConditions_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPoorNetworkConditions_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameserverCrash_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameserverCrash_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgConnectedPlayers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgConnectedPlayers_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgConnectedPlayers_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgConnectedPlayers_Player_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgConnectedPlayers_SendReason_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameServerInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgGameServerInfo_ServerType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgLeaverDetected_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLeaverDetected_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLeaverDetectedResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLeaverDetectedResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyPlayerStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerToGCRealtimeStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerToGCRealtimeStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToServerRealtimeStatsStartStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToServerRealtimeStatsStartStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameMatchSignOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut_CTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameMatchSignOut_CTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut_CTeam_CPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameMatchSignOut_CTeam_CPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut_CAdditionalSignoutMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameMatchSignOut_CAdditionalSignoutMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut_CSocialFeedMatchEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameMatchSignOut_CSocialFeedMatchEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut_CCustomGameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameMatchSignOut_CCustomGameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSignOutDraftInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSignOutDraftInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSignOutBotInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSignOutBotInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSignOutBotInfo_CMsgBotSlotDifficulty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSignOutBotInfo_CMsgBotSlotDifficulty_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSignOutPlayerStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSignOutPlayerStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSignOutCommunicationSummary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSignOutCommunicationSummary_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSignOutCommunicationSummary_PlayerCommunication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSignOutCommunicationSummary_PlayerCommunication_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameMatchSignoutResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameMatchSignoutResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameMatchSignOutPermissionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameMatchSignOutPermissionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameMatchSignOutPermissionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameMatchSignOutPermissionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameChatLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameChatLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameChatLog_CChatLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameChatLog_CChatLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTALiveScoreboardUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTALiveScoreboardUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTALiveScoreboardUpdate_Team_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTALiveScoreboardUpdate_Team_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTALiveScoreboardUpdate_Team_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTALiveScoreboardUpdate_Team_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARequestPlayerResources_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARequestPlayerResources_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARequestPlayerResourcesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARequestPlayerResourcesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARequestBatchPlayerResources_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARequestBatchPlayerResources_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARequestBatchPlayerResourcesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARequestBatchPlayerResourcesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARequestBatchPlayerResourcesResponse_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARequestBatchPlayerResourcesResponse_Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAPlayerFailedToConnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAPlayerFailedToConnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToRelayConnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToRelayConnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCGCToLANServerRelayConnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCGCToLANServerRelayConnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToRelayConnectResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToRelayConnectResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCBanStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCBanStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCBanStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCBanStatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTournamentItemEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTournamentItemEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTournamentItemEventResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTournamentItemEventResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTeamFanfare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTeamFanfare_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgResponseTeamFanfare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgResponseTeamFanfare_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameServerUploadSaveGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameServerUploadSaveGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameServerSaveGameResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameServerSaveGameResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgGameServerSaveGameResult_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameServerGetLoadGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameServerGetLoadGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameServerGetLoadGameResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameServerGetLoadGameResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGenerateDiretidePrizeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGenerateDiretidePrizeList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGenerateDiretidePrizeListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGenerateDiretidePrizeListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARewardDiretidePrizes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARewardDiretidePrizes_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTADiretidePrizesRewardedResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTADiretidePrizesRewardedResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAAwardEventPoints_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAAwardEventPoints_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAAwardEventPoints_AwardPoints_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAAwardEventPoints_AwardPoints_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerToGCSignoutAwardAdditionalDrops_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerToGCSignoutAwardAdditionalDrops_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAUpdateTI4HeroQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAUpdateTI4HeroQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAUpdateTI4HeroQuest_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAUpdateTI4HeroQuest_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFrostivusTimeElapsed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFrostivusTimeElapsed_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFrostivusTimeElapsed_User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFrostivusTimeElapsed_User_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToServerPingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToServerPingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToServerPingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToServerPingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToServerConsoleCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToServerConsoleCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerGetEventPoints_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerGetEventPoints_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerGetEventPointsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerGetEventPointsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerGetEventPointsResponse_Points_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerGetEventPointsResponse_Points_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerGrantSurveyPermission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerGrantSurveyPermission_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerGrantSurveyPermission_Survey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerGrantSurveyPermission_Survey_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerGrantSurveyPermissionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerGrantSurveyPermissionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerToGCMatchConnectionStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerToGCMatchConnectionStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerToGCMatchConnectionStats_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerToGCMatchConnectionStats_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerGCUpdateSpectatorCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerGCUpdateSpectatorCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSerializedCombatLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSerializedCombatLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSerializedCombatLog_Dictionary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSerializedCombatLog_Dictionary_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSerializedCombatLog_Dictionary_DictString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSerializedCombatLog_Dictionary_DictString_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerToGCGetAdditionalEquips_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerToGCGetAdditionalEquips_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerToGCGetAdditionalEquipsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerToGCGetAdditionalEquipsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerToGCGetProfileCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerToGCGetProfileCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerToGCGetProfileCardResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerToGCGetProfileCardResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerToGCVictoryPredictions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerToGCVictoryPredictions_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerToGCVictoryPredictions_Record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerToGCVictoryPredictions_Record_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSuspiciousActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSuspiciousActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerToGCRequestStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerToGCRequestStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerToGCRequestStatus_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerToGCRequestStatus_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSignOutAssassinMiniGameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSignOutAssassinMiniGameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerToGCGetIngameEventData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerToGCGetIngameEventData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToServerIngameEventDataOraclePA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToServerIngameEventDataOraclePA_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerToGCKillSummaries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerToGCKillSummaries_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerToGCKillSummaries_KillSummary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerToGCKillSummaries_KillSummary_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToServerPredictionResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToServerPredictionResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToServerPredictionResult_Prediction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToServerPredictionResult_Prediction_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgGCToServerPredictionResult_Prediction_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerToGCLockCharmTrading_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerToGCLockCharmTrading_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTACNY2015EventPointUsage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTACNY2015EventPointUsage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTACNY2015EventPointUsage_PointUsage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTACNY2015EventPointUsage_PointUsage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSignOutUpdatePlayerChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSignOutUpdatePlayerChallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSignOutUpdatePlayerChallenge_Challenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSignOutUpdatePlayerChallenge_Challenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerToGCRerollPlayerChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerToGCRerollPlayerChallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerToGCHoldEventPoints_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerToGCHoldEventPoints_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerToGCHoldEventPoints_HoldRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerToGCHoldEventPoints_HoldRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSignOutReleaseEventPointHolds_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSignOutReleaseEventPointHolds_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToServerUpdateBroadcastCheers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToServerUpdateBroadcastCheers_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSignOutWagerStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSignOutWagerStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSignOutWagerStats_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSignOutWagerStats_Player_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EPoorNetworkConditionsType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAbilityAbuseType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EIntentionalFeedingType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESuspiciousActivity_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESuspiciousBuildType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto() {
  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dota_gcmessages_server.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgSpawnLootGreevil_descriptor_ = file->message_type(0);
  static const int CMsgSpawnLootGreevil_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpawnLootGreevil, rare_),
  };
  CMsgSpawnLootGreevil_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSpawnLootGreevil_descriptor_,
      CMsgSpawnLootGreevil::default_instance_,
      CMsgSpawnLootGreevil_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpawnLootGreevil, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpawnLootGreevil, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSpawnLootGreevil));
  CMsgDismissLootGreevil_descriptor_ = file->message_type(1);
  static const int CMsgDismissLootGreevil_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDismissLootGreevil, killed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDismissLootGreevil, rare_),
  };
  CMsgDismissLootGreevil_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDismissLootGreevil_descriptor_,
      CMsgDismissLootGreevil::default_instance_,
      CMsgDismissLootGreevil_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDismissLootGreevil, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDismissLootGreevil, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDismissLootGreevil));
  CMsgDismissLootGreevilResponse_descriptor_ = file->message_type(2);
  static const int CMsgDismissLootGreevilResponse_offsets_[1] = {
  };
  CMsgDismissLootGreevilResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDismissLootGreevilResponse_descriptor_,
      CMsgDismissLootGreevilResponse::default_instance_,
      CMsgDismissLootGreevilResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDismissLootGreevilResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDismissLootGreevilResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDismissLootGreevilResponse));
  CMsgPoorNetworkConditions_descriptor_ = file->message_type(3);
  static const int CMsgPoorNetworkConditions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPoorNetworkConditions, detection_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPoorNetworkConditions, players_),
  };
  CMsgPoorNetworkConditions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPoorNetworkConditions_descriptor_,
      CMsgPoorNetworkConditions::default_instance_,
      CMsgPoorNetworkConditions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPoorNetworkConditions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPoorNetworkConditions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPoorNetworkConditions));
  CMsgPoorNetworkConditions_Player_descriptor_ = CMsgPoorNetworkConditions_descriptor_->nested_type(0);
  static const int CMsgPoorNetworkConditions_Player_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPoorNetworkConditions_Player, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPoorNetworkConditions_Player, disconnect_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPoorNetworkConditions_Player, num_bad_intervals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPoorNetworkConditions_Player, peak_loss_pct_),
  };
  CMsgPoorNetworkConditions_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPoorNetworkConditions_Player_descriptor_,
      CMsgPoorNetworkConditions_Player::default_instance_,
      CMsgPoorNetworkConditions_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPoorNetworkConditions_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPoorNetworkConditions_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPoorNetworkConditions_Player));
  CMsgGameserverCrash_descriptor_ = file->message_type(4);
  static const int CMsgGameserverCrash_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameserverCrash, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameserverCrash, lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameserverCrash, game_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameserverCrash, sentinel_save_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameserverCrash, custom_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameserverCrash, server_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameserverCrash, server_public_ip_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameserverCrash, server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameserverCrash, server_cluster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameserverCrash, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameserverCrash, engine_),
  };
  CMsgGameserverCrash_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameserverCrash_descriptor_,
      CMsgGameserverCrash::default_instance_,
      CMsgGameserverCrash_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameserverCrash, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameserverCrash, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameserverCrash));
  CMsgConnectedPlayers_descriptor_ = file->message_type(5);
  static const int CMsgConnectedPlayers_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, connected_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, disconnected_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, game_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, tower_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, first_blood_happened_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, legacy_mass_disconnect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, poor_network_conditions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, send_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, radiant_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, dire_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, barracks_state_),
  };
  CMsgConnectedPlayers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgConnectedPlayers_descriptor_,
      CMsgConnectedPlayers::default_instance_,
      CMsgConnectedPlayers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgConnectedPlayers));
  CMsgConnectedPlayers_Player_descriptor_ = CMsgConnectedPlayers_descriptor_->nested_type(0);
  static const int CMsgConnectedPlayers_Player_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers_Player, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers_Player, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers_Player, leaver_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers_Player, disconnect_reason_),
  };
  CMsgConnectedPlayers_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgConnectedPlayers_Player_descriptor_,
      CMsgConnectedPlayers_Player::default_instance_,
      CMsgConnectedPlayers_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgConnectedPlayers_Player));
  CMsgConnectedPlayers_SendReason_descriptor_ = CMsgConnectedPlayers_descriptor_->enum_type(0);
  CMsgGameServerInfo_descriptor_ = file->message_type(6);
  static const int CMsgGameServerInfo_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_public_ip_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_private_ip_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_tv_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, assigned_server_tv_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_steamdatagram_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_hibernation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_loadavg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_tv_broadcast_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_game_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_relay_connected_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, relay_slots_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, relays_connected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, relay_clients_connected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, relayed_game_server_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, parent_relay_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, tv_secret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_cluster_),
  };
  CMsgGameServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameServerInfo_descriptor_,
      CMsgGameServerInfo::default_instance_,
      CMsgGameServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameServerInfo));
  CMsgGameServerInfo_ServerType_descriptor_ = CMsgGameServerInfo_descriptor_->enum_type(0);
  CMsgLeaverDetected_descriptor_ = file->message_type(7);
  static const int CMsgLeaverDetected_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetected, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetected, leaver_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetected, leaver_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetected, server_cluster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetected, disconnect_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetected, poor_network_conditions_),
  };
  CMsgLeaverDetected_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLeaverDetected_descriptor_,
      CMsgLeaverDetected::default_instance_,
      CMsgLeaverDetected_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetected, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetected, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLeaverDetected));
  CMsgLeaverDetectedResponse_descriptor_ = file->message_type(8);
  static const int CMsgLeaverDetectedResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetectedResponse, result_),
  };
  CMsgLeaverDetectedResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLeaverDetectedResponse_descriptor_,
      CMsgLeaverDetectedResponse::default_instance_,
      CMsgLeaverDetectedResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetectedResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetectedResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLeaverDetectedResponse));
  CMsgDOTAFantasyPlayerStats_descriptor_ = file->message_type(9);
  static const int CMsgDOTAFantasyPlayerStats_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, player_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, match_completed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, assists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, last_hits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, denies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, gpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, xppm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, stuns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, healing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, tower_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, roshan_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, delay_),
  };
  CMsgDOTAFantasyPlayerStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAFantasyPlayerStats_descriptor_,
      CMsgDOTAFantasyPlayerStats::default_instance_,
      CMsgDOTAFantasyPlayerStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAFantasyPlayerStats));
  CMsgDOTAFantasyMatch_descriptor_ = file->message_type(10);
  static const int CMsgDOTAFantasyMatch_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMatch, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMatch, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMatch, series_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMatch, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMatch, series_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMatch, team_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMatch, team_2_),
  };
  CMsgDOTAFantasyMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAFantasyMatch_descriptor_,
      CMsgDOTAFantasyMatch::default_instance_,
      CMsgDOTAFantasyMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAFantasyMatch));
  CMsgServerToGCRealtimeStats_descriptor_ = file->message_type(11);
  static const int CMsgServerToGCRealtimeStats_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCRealtimeStats, delayed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCRealtimeStats, current_),
  };
  CMsgServerToGCRealtimeStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerToGCRealtimeStats_descriptor_,
      CMsgServerToGCRealtimeStats::default_instance_,
      CMsgServerToGCRealtimeStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCRealtimeStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCRealtimeStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerToGCRealtimeStats));
  CMsgGCToServerRealtimeStatsStartStop_descriptor_ = file->message_type(12);
  static const int CMsgGCToServerRealtimeStatsStartStop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerRealtimeStatsStartStop, delayed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerRealtimeStatsStartStop, current_),
  };
  CMsgGCToServerRealtimeStatsStartStop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToServerRealtimeStatsStartStop_descriptor_,
      CMsgGCToServerRealtimeStatsStartStop::default_instance_,
      CMsgGCToServerRealtimeStatsStartStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerRealtimeStatsStartStop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerRealtimeStatsStartStop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToServerRealtimeStatsStartStop));
  CMsgGameMatchSignOut_descriptor_ = file->message_type(13);
  static const int CMsgGameMatchSignOut_offsets_[36] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, good_guys_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, num_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, teams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, tower_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, barracks_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, cluster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, server_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, first_blood_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, game_balance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, event_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, picks_bans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, fantasy_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, player_strange_count_adjustments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, automatic_surrender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, server_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, legacy_mass_disconnect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, poor_network_conditions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, additional_msgs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, social_feed_events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, average_networth_delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, networth_delta_min10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, networth_delta_min20_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, maximum_losing_networth_lead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, average_experience_delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, experience_delta_min10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, experience_delta_min20_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, bonus_gold_winner_min10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, bonus_gold_winner_min20_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, bonus_gold_winner_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, bonus_gold_loser_min10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, bonus_gold_loser_min20_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, bonus_gold_loser_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, custom_game_data_),
  };
  CMsgGameMatchSignOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameMatchSignOut_descriptor_,
      CMsgGameMatchSignOut::default_instance_,
      CMsgGameMatchSignOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameMatchSignOut));
  CMsgGameMatchSignOut_CTeam_descriptor_ = CMsgGameMatchSignOut_descriptor_->nested_type(0);
  static const int CMsgGameMatchSignOut_CTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam, players_),
  };
  CMsgGameMatchSignOut_CTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameMatchSignOut_CTeam_descriptor_,
      CMsgGameMatchSignOut_CTeam::default_instance_,
      CMsgGameMatchSignOut_CTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameMatchSignOut_CTeam));
  CMsgGameMatchSignOut_CTeam_CPlayer_descriptor_ = CMsgGameMatchSignOut_CTeam_descriptor_->nested_type(0);
  static const int CMsgGameMatchSignOut_CTeam_CPlayer_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, assists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, leaver_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, last_hits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, denies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, gold_per_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, xp_per_minute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, gold_spent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, hero_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, tower_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, hero_healing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, time_last_seen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, support_ability_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, scaled_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, scaled_deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, scaled_assists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, claimed_farm_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, support_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, claimed_denies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, claimed_misses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, misses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, ability_upgrades_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, additional_units_inventory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, net_worth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, custom_game_data_),
  };
  CMsgGameMatchSignOut_CTeam_CPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameMatchSignOut_CTeam_CPlayer_descriptor_,
      CMsgGameMatchSignOut_CTeam_CPlayer::default_instance_,
      CMsgGameMatchSignOut_CTeam_CPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameMatchSignOut_CTeam_CPlayer));
  CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_descriptor_ = CMsgGameMatchSignOut_CTeam_CPlayer_descriptor_->nested_type(0);
  static const int CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData, dota_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData, winner_),
  };
  CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_descriptor_,
      CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::default_instance_,
      CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData));
  CMsgGameMatchSignOut_CAdditionalSignoutMsg_descriptor_ = CMsgGameMatchSignOut_descriptor_->nested_type(1);
  static const int CMsgGameMatchSignOut_CAdditionalSignoutMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CAdditionalSignoutMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CAdditionalSignoutMsg, contents_),
  };
  CMsgGameMatchSignOut_CAdditionalSignoutMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameMatchSignOut_CAdditionalSignoutMsg_descriptor_,
      CMsgGameMatchSignOut_CAdditionalSignoutMsg::default_instance_,
      CMsgGameMatchSignOut_CAdditionalSignoutMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CAdditionalSignoutMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CAdditionalSignoutMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameMatchSignOut_CAdditionalSignoutMsg));
  CMsgGameMatchSignOut_CSocialFeedMatchEvent_descriptor_ = CMsgGameMatchSignOut_descriptor_->nested_type(2);
  static const int CMsgGameMatchSignOut_CSocialFeedMatchEvent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CSocialFeedMatchEvent, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CSocialFeedMatchEvent, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CSocialFeedMatchEvent, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CSocialFeedMatchEvent, game_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CSocialFeedMatchEvent, replay_time_),
  };
  CMsgGameMatchSignOut_CSocialFeedMatchEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameMatchSignOut_CSocialFeedMatchEvent_descriptor_,
      CMsgGameMatchSignOut_CSocialFeedMatchEvent::default_instance_,
      CMsgGameMatchSignOut_CSocialFeedMatchEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CSocialFeedMatchEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CSocialFeedMatchEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameMatchSignOut_CSocialFeedMatchEvent));
  CMsgGameMatchSignOut_CCustomGameData_descriptor_ = CMsgGameMatchSignOut_descriptor_->nested_type(3);
  static const int CMsgGameMatchSignOut_CCustomGameData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CCustomGameData, publish_timestamp_),
  };
  CMsgGameMatchSignOut_CCustomGameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameMatchSignOut_CCustomGameData_descriptor_,
      CMsgGameMatchSignOut_CCustomGameData::default_instance_,
      CMsgGameMatchSignOut_CCustomGameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CCustomGameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CCustomGameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameMatchSignOut_CCustomGameData));
  CMsgSignOutDraftInfo_descriptor_ = file->message_type(14);
  static const int CMsgSignOutDraftInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutDraftInfo, radiant_captain_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutDraftInfo, dire_captain_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutDraftInfo, picks_bans_),
  };
  CMsgSignOutDraftInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSignOutDraftInfo_descriptor_,
      CMsgSignOutDraftInfo::default_instance_,
      CMsgSignOutDraftInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutDraftInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutDraftInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSignOutDraftInfo));
  CMsgSignOutBotInfo_descriptor_ = file->message_type(15);
  static const int CMsgSignOutBotInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutBotInfo, allow_cheats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutBotInfo, bot_difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutBotInfo, created_lobby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutBotInfo, bot_slot_difficulties_),
  };
  CMsgSignOutBotInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSignOutBotInfo_descriptor_,
      CMsgSignOutBotInfo::default_instance_,
      CMsgSignOutBotInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutBotInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutBotInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSignOutBotInfo));
  CMsgSignOutBotInfo_CMsgBotSlotDifficulty_descriptor_ = CMsgSignOutBotInfo_descriptor_->nested_type(0);
  static const int CMsgSignOutBotInfo_CMsgBotSlotDifficulty_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutBotInfo_CMsgBotSlotDifficulty, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutBotInfo_CMsgBotSlotDifficulty, bot_difficulty_),
  };
  CMsgSignOutBotInfo_CMsgBotSlotDifficulty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSignOutBotInfo_CMsgBotSlotDifficulty_descriptor_,
      CMsgSignOutBotInfo_CMsgBotSlotDifficulty::default_instance_,
      CMsgSignOutBotInfo_CMsgBotSlotDifficulty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutBotInfo_CMsgBotSlotDifficulty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutBotInfo_CMsgBotSlotDifficulty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSignOutBotInfo_CMsgBotSlotDifficulty));
  CMsgSignOutPlayerStats_descriptor_ = file->message_type(16);
  static const int CMsgSignOutPlayerStats_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, rampages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, triple_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, first_blood_claimed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, first_blood_given_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, couriers_killed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, aegises_snatched_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, cheeses_eaten_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, creeps_stacked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, fight_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, farm_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, support_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, push_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, assists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, last_hits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, denies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, gpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, xppm_),
  };
  CMsgSignOutPlayerStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSignOutPlayerStats_descriptor_,
      CMsgSignOutPlayerStats::default_instance_,
      CMsgSignOutPlayerStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSignOutPlayerStats));
  CMsgSignOutCommunicationSummary_descriptor_ = file->message_type(17);
  static const int CMsgSignOutCommunicationSummary_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary, players_),
  };
  CMsgSignOutCommunicationSummary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSignOutCommunicationSummary_descriptor_,
      CMsgSignOutCommunicationSummary::default_instance_,
      CMsgSignOutCommunicationSummary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSignOutCommunicationSummary));
  CMsgSignOutCommunicationSummary_PlayerCommunication_descriptor_ = CMsgSignOutCommunicationSummary_descriptor_->nested_type(0);
  static const int CMsgSignOutCommunicationSummary_PlayerCommunication_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, pings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, max_pings_per_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, teammate_pings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, max_teammate_pings_per_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, team_chat_messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, all_chat_messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, chat_wheel_messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, pauses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, unpauses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, lines_drawn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, voice_chat_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, chat_mutes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, voice_mutes_),
  };
  CMsgSignOutCommunicationSummary_PlayerCommunication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSignOutCommunicationSummary_PlayerCommunication_descriptor_,
      CMsgSignOutCommunicationSummary_PlayerCommunication::default_instance_,
      CMsgSignOutCommunicationSummary_PlayerCommunication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSignOutCommunicationSummary_PlayerCommunication));
  CMsgGameMatchSignoutResponse_descriptor_ = file->message_type(18);
  static const int CMsgGameMatchSignoutResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse, replay_salt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse, timed_reward_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse, xp_reward_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse, leagueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse, additional_msgs_),
  };
  CMsgGameMatchSignoutResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameMatchSignoutResponse_descriptor_,
      CMsgGameMatchSignoutResponse::default_instance_,
      CMsgGameMatchSignoutResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameMatchSignoutResponse));
  CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg_descriptor_ = CMsgGameMatchSignoutResponse_descriptor_->nested_type(0);
  static const int CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg, contents_),
  };
  CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg_descriptor_,
      CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::default_instance_,
      CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg));
  CMsgGameMatchSignOutPermissionRequest_descriptor_ = file->message_type(19);
  static const int CMsgGameMatchSignOutPermissionRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionRequest, server_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionRequest, local_attempt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionRequest, total_attempt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionRequest, seconds_waited_),
  };
  CMsgGameMatchSignOutPermissionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameMatchSignOutPermissionRequest_descriptor_,
      CMsgGameMatchSignOutPermissionRequest::default_instance_,
      CMsgGameMatchSignOutPermissionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameMatchSignOutPermissionRequest));
  CMsgGameMatchSignOutPermissionResponse_descriptor_ = file->message_type(20);
  static const int CMsgGameMatchSignOutPermissionResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionResponse, permission_granted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionResponse, abandon_signout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionResponse, retry_delay_seconds_),
  };
  CMsgGameMatchSignOutPermissionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameMatchSignOutPermissionResponse_descriptor_,
      CMsgGameMatchSignOutPermissionResponse::default_instance_,
      CMsgGameMatchSignOutPermissionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameMatchSignOutPermissionResponse));
  CMsgGameChatLog_descriptor_ = file->message_type(21);
  static const int CMsgGameChatLog_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameChatLog, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameChatLog, lines_),
  };
  CMsgGameChatLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameChatLog_descriptor_,
      CMsgGameChatLog::default_instance_,
      CMsgGameChatLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameChatLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameChatLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameChatLog));
  CMsgGameChatLog_CChatLine_descriptor_ = CMsgGameChatLog_descriptor_->nested_type(0);
  static const int CMsgGameChatLog_CChatLine_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameChatLog_CChatLine, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameChatLog_CChatLine, team_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameChatLog_CChatLine, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameChatLog_CChatLine, game_time_),
  };
  CMsgGameChatLog_CChatLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameChatLog_CChatLine_descriptor_,
      CMsgGameChatLog_CChatLine::default_instance_,
      CMsgGameChatLog_CChatLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameChatLog_CChatLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameChatLog_CChatLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameChatLog_CChatLine));
  CMsgDOTALiveScoreboardUpdate_descriptor_ = file->message_type(22);
  static const int CMsgDOTALiveScoreboardUpdate_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, tournament_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, tournament_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, hltv_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, team_good_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, team_bad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, roshan_respawn_timer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, match_id_),
  };
  CMsgDOTALiveScoreboardUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTALiveScoreboardUpdate_descriptor_,
      CMsgDOTALiveScoreboardUpdate::default_instance_,
      CMsgDOTALiveScoreboardUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTALiveScoreboardUpdate));
  CMsgDOTALiveScoreboardUpdate_Team_descriptor_ = CMsgDOTALiveScoreboardUpdate_descriptor_->nested_type(0);
  static const int CMsgDOTALiveScoreboardUpdate_Team_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team, tower_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team, barracks_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team, hero_picks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team, hero_bans_),
  };
  CMsgDOTALiveScoreboardUpdate_Team_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTALiveScoreboardUpdate_Team_descriptor_,
      CMsgDOTALiveScoreboardUpdate_Team::default_instance_,
      CMsgDOTALiveScoreboardUpdate_Team_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTALiveScoreboardUpdate_Team));
  CMsgDOTALiveScoreboardUpdate_Team_Player_descriptor_ = CMsgDOTALiveScoreboardUpdate_Team_descriptor_->nested_type(0);
  static const int CMsgDOTALiveScoreboardUpdate_Team_Player_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, player_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, hero_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, assists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, last_hits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, denies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, gold_per_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, xp_per_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, ultimate_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, ultimate_cooldown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, item0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, item1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, item2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, item3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, item4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, item5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, respawn_timer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, position_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, position_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, net_worth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, abilities_),
  };
  CMsgDOTALiveScoreboardUpdate_Team_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTALiveScoreboardUpdate_Team_Player_descriptor_,
      CMsgDOTALiveScoreboardUpdate_Team_Player::default_instance_,
      CMsgDOTALiveScoreboardUpdate_Team_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTALiveScoreboardUpdate_Team_Player));
  CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_descriptor_ = CMsgDOTALiveScoreboardUpdate_Team_Player_descriptor_->nested_type(0);
  static const int CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility, ability_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility, ability_level_),
  };
  CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_descriptor_,
      CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::default_instance_,
      CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility));
  CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_descriptor_ = CMsgDOTALiveScoreboardUpdate_Team_Player_descriptor_->enum_type(0);
  CMsgDOTARequestPlayerResources_descriptor_ = file->message_type(23);
  static const int CMsgDOTARequestPlayerResources_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResources, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResources, player_id_),
  };
  CMsgDOTARequestPlayerResources_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARequestPlayerResources_descriptor_,
      CMsgDOTARequestPlayerResources::default_instance_,
      CMsgDOTARequestPlayerResources_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResources, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResources, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARequestPlayerResources));
  CMsgDOTARequestPlayerResourcesResponse_descriptor_ = file->message_type(24);
  static const int CMsgDOTARequestPlayerResourcesResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResourcesResponse, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResourcesResponse, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResourcesResponse, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResourcesResponse, prevent_text_chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResourcesResponse, prevent_voice_chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResourcesResponse, low_priority_),
  };
  CMsgDOTARequestPlayerResourcesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARequestPlayerResourcesResponse_descriptor_,
      CMsgDOTARequestPlayerResourcesResponse::default_instance_,
      CMsgDOTARequestPlayerResourcesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResourcesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResourcesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARequestPlayerResourcesResponse));
  CMsgDOTARequestBatchPlayerResources_descriptor_ = file->message_type(25);
  static const int CMsgDOTARequestBatchPlayerResources_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResources, account_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResources, rank_types_),
  };
  CMsgDOTARequestBatchPlayerResources_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARequestBatchPlayerResources_descriptor_,
      CMsgDOTARequestBatchPlayerResources::default_instance_,
      CMsgDOTARequestBatchPlayerResources_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResources, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResources, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARequestBatchPlayerResources));
  CMsgDOTARequestBatchPlayerResourcesResponse_descriptor_ = file->message_type(26);
  static const int CMsgDOTARequestBatchPlayerResourcesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse, results_),
  };
  CMsgDOTARequestBatchPlayerResourcesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARequestBatchPlayerResourcesResponse_descriptor_,
      CMsgDOTARequestBatchPlayerResourcesResponse::default_instance_,
      CMsgDOTARequestBatchPlayerResourcesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARequestBatchPlayerResourcesResponse));
  CMsgDOTARequestBatchPlayerResourcesResponse_Result_descriptor_ = CMsgDOTARequestBatchPlayerResourcesResponse_descriptor_->nested_type(0);
  static const int CMsgDOTARequestBatchPlayerResourcesResponse_Result_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse_Result, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse_Result, prevent_text_chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse_Result, prevent_voice_chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse_Result, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse_Result, rank_calibrated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse_Result, low_priority_),
  };
  CMsgDOTARequestBatchPlayerResourcesResponse_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARequestBatchPlayerResourcesResponse_Result_descriptor_,
      CMsgDOTARequestBatchPlayerResourcesResponse_Result::default_instance_,
      CMsgDOTARequestBatchPlayerResourcesResponse_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARequestBatchPlayerResourcesResponse_Result));
  CMsgDOTAPlayerFailedToConnect_descriptor_ = file->message_type(27);
  static const int CMsgDOTAPlayerFailedToConnect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPlayerFailedToConnect, failed_loaders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPlayerFailedToConnect, abandoned_loaders_),
  };
  CMsgDOTAPlayerFailedToConnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAPlayerFailedToConnect_descriptor_,
      CMsgDOTAPlayerFailedToConnect::default_instance_,
      CMsgDOTAPlayerFailedToConnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPlayerFailedToConnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPlayerFailedToConnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAPlayerFailedToConnect));
  CMsgGCToRelayConnect_descriptor_ = file->message_type(28);
  static const int CMsgGCToRelayConnect_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnect, source_tv_public_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnect, source_tv_private_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnect, source_tv_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnect, game_server_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnect, parent_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnect, tv_unique_secret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnect, source_tv_steamid_),
  };
  CMsgGCToRelayConnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToRelayConnect_descriptor_,
      CMsgGCToRelayConnect::default_instance_,
      CMsgGCToRelayConnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToRelayConnect));
  CMsgGCGCToLANServerRelayConnect_descriptor_ = file->message_type(29);
  static const int CMsgGCGCToLANServerRelayConnect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGCToLANServerRelayConnect, relay_steamid_),
  };
  CMsgGCGCToLANServerRelayConnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCGCToLANServerRelayConnect_descriptor_,
      CMsgGCGCToLANServerRelayConnect::default_instance_,
      CMsgGCGCToLANServerRelayConnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGCToLANServerRelayConnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGCToLANServerRelayConnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCGCToLANServerRelayConnect));
  CMsgGCToRelayConnectResponse_descriptor_ = file->message_type(30);
  static const int CMsgGCToRelayConnectResponse_offsets_[1] = {
  };
  CMsgGCToRelayConnectResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToRelayConnectResponse_descriptor_,
      CMsgGCToRelayConnectResponse::default_instance_,
      CMsgGCToRelayConnectResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnectResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnectResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToRelayConnectResponse));
  CMsgGCBanStatusRequest_descriptor_ = file->message_type(31);
  static const int CMsgGCBanStatusRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBanStatusRequest, account_id_),
  };
  CMsgGCBanStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCBanStatusRequest_descriptor_,
      CMsgGCBanStatusRequest::default_instance_,
      CMsgGCBanStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBanStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBanStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCBanStatusRequest));
  CMsgGCBanStatusResponse_descriptor_ = file->message_type(32);
  static const int CMsgGCBanStatusResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBanStatusResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBanStatusResponse, low_priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBanStatusResponse, text_chat_banned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBanStatusResponse, voice_chat_banned_),
  };
  CMsgGCBanStatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCBanStatusResponse_descriptor_,
      CMsgGCBanStatusResponse::default_instance_,
      CMsgGCBanStatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBanStatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBanStatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCBanStatusResponse));
  CMsgTournamentItemEvent_descriptor_ = file->message_type(33);
  static const int CMsgTournamentItemEvent_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, killer_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, victim_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, tv_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, dota_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, replay_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, loot_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, event_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, multi_kill_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, winner_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, loser_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, hero_statues_),
  };
  CMsgTournamentItemEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTournamentItemEvent_descriptor_,
      CMsgTournamentItemEvent::default_instance_,
      CMsgTournamentItemEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTournamentItemEvent));
  CMsgTournamentItemEventResponse_descriptor_ = file->message_type(34);
  static const int CMsgTournamentItemEventResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEventResponse, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEventResponse, viewers_granted_),
  };
  CMsgTournamentItemEventResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTournamentItemEventResponse_descriptor_,
      CMsgTournamentItemEventResponse::default_instance_,
      CMsgTournamentItemEventResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEventResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEventResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTournamentItemEventResponse));
  CMsgTeamFanfare_descriptor_ = file->message_type(35);
  static const int CMsgTeamFanfare_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTeamFanfare, match_id_),
  };
  CMsgTeamFanfare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTeamFanfare_descriptor_,
      CMsgTeamFanfare::default_instance_,
      CMsgTeamFanfare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTeamFanfare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTeamFanfare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTeamFanfare));
  CMsgResponseTeamFanfare_descriptor_ = file->message_type(36);
  static const int CMsgResponseTeamFanfare_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgResponseTeamFanfare, fanfare_goodguys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgResponseTeamFanfare, fanfare_badguys_),
  };
  CMsgResponseTeamFanfare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgResponseTeamFanfare_descriptor_,
      CMsgResponseTeamFanfare::default_instance_,
      CMsgResponseTeamFanfare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgResponseTeamFanfare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgResponseTeamFanfare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgResponseTeamFanfare));
  CMsgGameServerUploadSaveGame_descriptor_ = file->message_type(37);
  static const int CMsgGameServerUploadSaveGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerUploadSaveGame, game_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerUploadSaveGame, save_game_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerUploadSaveGame, lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerUploadSaveGame, player_steam_ids_),
  };
  CMsgGameServerUploadSaveGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameServerUploadSaveGame_descriptor_,
      CMsgGameServerUploadSaveGame::default_instance_,
      CMsgGameServerUploadSaveGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerUploadSaveGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerUploadSaveGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameServerUploadSaveGame));
  CMsgGameServerSaveGameResult_descriptor_ = file->message_type(38);
  static const int CMsgGameServerSaveGameResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerSaveGameResult, result_),
  };
  CMsgGameServerSaveGameResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameServerSaveGameResult_descriptor_,
      CMsgGameServerSaveGameResult::default_instance_,
      CMsgGameServerSaveGameResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerSaveGameResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerSaveGameResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameServerSaveGameResult));
  CMsgGameServerSaveGameResult_Result_descriptor_ = CMsgGameServerSaveGameResult_descriptor_->enum_type(0);
  CMsgGameServerGetLoadGame_descriptor_ = file->message_type(39);
  static const int CMsgGameServerGetLoadGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerGetLoadGame, save_id_),
  };
  CMsgGameServerGetLoadGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameServerGetLoadGame_descriptor_,
      CMsgGameServerGetLoadGame::default_instance_,
      CMsgGameServerGetLoadGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerGetLoadGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerGetLoadGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameServerGetLoadGame));
  CMsgGameServerGetLoadGameResult_descriptor_ = file->message_type(40);
  static const int CMsgGameServerGetLoadGameResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerGetLoadGameResult, save_game_data_),
  };
  CMsgGameServerGetLoadGameResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameServerGetLoadGameResult_descriptor_,
      CMsgGameServerGetLoadGameResult::default_instance_,
      CMsgGameServerGetLoadGameResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerGetLoadGameResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerGetLoadGameResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameServerGetLoadGameResult));
  CMsgDOTAGenerateDiretidePrizeList_descriptor_ = file->message_type(41);
  static const int CMsgDOTAGenerateDiretidePrizeList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeList, prize_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeList, highest_roshan_level_),
  };
  CMsgDOTAGenerateDiretidePrizeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGenerateDiretidePrizeList_descriptor_,
      CMsgDOTAGenerateDiretidePrizeList::default_instance_,
      CMsgDOTAGenerateDiretidePrizeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGenerateDiretidePrizeList));
  CMsgDOTAGenerateDiretidePrizeListResponse_descriptor_ = file->message_type(42);
  static const int CMsgDOTAGenerateDiretidePrizeListResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeListResponse, item_defs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeListResponse, steam_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeListResponse, prize_list_),
  };
  CMsgDOTAGenerateDiretidePrizeListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGenerateDiretidePrizeListResponse_descriptor_,
      CMsgDOTAGenerateDiretidePrizeListResponse::default_instance_,
      CMsgDOTAGenerateDiretidePrizeListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGenerateDiretidePrizeListResponse));
  CMsgDOTARewardDiretidePrizes_descriptor_ = file->message_type(43);
  static const int CMsgDOTARewardDiretidePrizes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARewardDiretidePrizes, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARewardDiretidePrizes, prize_list_),
  };
  CMsgDOTARewardDiretidePrizes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARewardDiretidePrizes_descriptor_,
      CMsgDOTARewardDiretidePrizes::default_instance_,
      CMsgDOTARewardDiretidePrizes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARewardDiretidePrizes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARewardDiretidePrizes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARewardDiretidePrizes));
  CMsgDOTADiretidePrizesRewardedResponse_descriptor_ = file->message_type(44);
  static const int CMsgDOTADiretidePrizesRewardedResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTADiretidePrizesRewardedResponse, prize_list_),
  };
  CMsgDOTADiretidePrizesRewardedResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTADiretidePrizesRewardedResponse_descriptor_,
      CMsgDOTADiretidePrizesRewardedResponse::default_instance_,
      CMsgDOTADiretidePrizesRewardedResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTADiretidePrizesRewardedResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTADiretidePrizesRewardedResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTADiretidePrizesRewardedResponse));
  CMsgDOTAAwardEventPoints_descriptor_ = file->message_type(45);
  static const int CMsgDOTAAwardEventPoints_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints, award_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints, event_id_),
  };
  CMsgDOTAAwardEventPoints_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAAwardEventPoints_descriptor_,
      CMsgDOTAAwardEventPoints::default_instance_,
      CMsgDOTAAwardEventPoints_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAAwardEventPoints));
  CMsgDOTAAwardEventPoints_AwardPoints_descriptor_ = CMsgDOTAAwardEventPoints_descriptor_->nested_type(0);
  static const int CMsgDOTAAwardEventPoints_AwardPoints_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints_AwardPoints, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints_AwardPoints, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints_AwardPoints, premium_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints_AwardPoints, trade_ban_time_),
  };
  CMsgDOTAAwardEventPoints_AwardPoints_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAAwardEventPoints_AwardPoints_descriptor_,
      CMsgDOTAAwardEventPoints_AwardPoints::default_instance_,
      CMsgDOTAAwardEventPoints_AwardPoints_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints_AwardPoints, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints_AwardPoints, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAAwardEventPoints_AwardPoints));
  CMsgServerToGCSignoutAwardAdditionalDrops_descriptor_ = file->message_type(46);
  static const int CMsgServerToGCSignoutAwardAdditionalDrops_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCSignoutAwardAdditionalDrops, drops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCSignoutAwardAdditionalDrops, match_id_),
  };
  CMsgServerToGCSignoutAwardAdditionalDrops_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerToGCSignoutAwardAdditionalDrops_descriptor_,
      CMsgServerToGCSignoutAwardAdditionalDrops::default_instance_,
      CMsgServerToGCSignoutAwardAdditionalDrops_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCSignoutAwardAdditionalDrops, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCSignoutAwardAdditionalDrops, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerToGCSignoutAwardAdditionalDrops));
  CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_descriptor_ = CMsgServerToGCSignoutAwardAdditionalDrops_descriptor_->nested_type(0);
  static const int CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops, loot_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops, player_account_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops, no_trade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops, randomize_reward_),
  };
  CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_descriptor_,
      CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::default_instance_,
      CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops));
  CMsgDOTAUpdateTI4HeroQuest_descriptor_ = file->message_type(47);
  static const int CMsgDOTAUpdateTI4HeroQuest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAUpdateTI4HeroQuest, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAUpdateTI4HeroQuest, match_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAUpdateTI4HeroQuest, match_id_),
  };
  CMsgDOTAUpdateTI4HeroQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAUpdateTI4HeroQuest_descriptor_,
      CMsgDOTAUpdateTI4HeroQuest::default_instance_,
      CMsgDOTAUpdateTI4HeroQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAUpdateTI4HeroQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAUpdateTI4HeroQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAUpdateTI4HeroQuest));
  CMsgDOTAUpdateTI4HeroQuest_Player_descriptor_ = CMsgDOTAUpdateTI4HeroQuest_descriptor_->nested_type(0);
  static const int CMsgDOTAUpdateTI4HeroQuest_Player_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAUpdateTI4HeroQuest_Player, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAUpdateTI4HeroQuest_Player, hero_id_),
  };
  CMsgDOTAUpdateTI4HeroQuest_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAUpdateTI4HeroQuest_Player_descriptor_,
      CMsgDOTAUpdateTI4HeroQuest_Player::default_instance_,
      CMsgDOTAUpdateTI4HeroQuest_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAUpdateTI4HeroQuest_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAUpdateTI4HeroQuest_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAUpdateTI4HeroQuest_Player));
  CMsgDOTAFrostivusTimeElapsed_descriptor_ = file->message_type(48);
  static const int CMsgDOTAFrostivusTimeElapsed_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed, seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed, users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed, match_id_),
  };
  CMsgDOTAFrostivusTimeElapsed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAFrostivusTimeElapsed_descriptor_,
      CMsgDOTAFrostivusTimeElapsed::default_instance_,
      CMsgDOTAFrostivusTimeElapsed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAFrostivusTimeElapsed));
  CMsgDOTAFrostivusTimeElapsed_User_descriptor_ = CMsgDOTAFrostivusTimeElapsed_descriptor_->nested_type(0);
  static const int CMsgDOTAFrostivusTimeElapsed_User_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed_User, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed_User, time_elapsed_s_),
  };
  CMsgDOTAFrostivusTimeElapsed_User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAFrostivusTimeElapsed_User_descriptor_,
      CMsgDOTAFrostivusTimeElapsed_User::default_instance_,
      CMsgDOTAFrostivusTimeElapsed_User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed_User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed_User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAFrostivusTimeElapsed_User));
  CMsgGCToServerPingRequest_descriptor_ = file->message_type(49);
  static const int CMsgGCToServerPingRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPingRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPingRequest, request_time_),
  };
  CMsgGCToServerPingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToServerPingRequest_descriptor_,
      CMsgGCToServerPingRequest::default_instance_,
      CMsgGCToServerPingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToServerPingRequest));
  CMsgGCToServerPingResponse_descriptor_ = file->message_type(50);
  static const int CMsgGCToServerPingResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPingResponse, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPingResponse, request_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPingResponse, cluster_),
  };
  CMsgGCToServerPingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToServerPingResponse_descriptor_,
      CMsgGCToServerPingResponse::default_instance_,
      CMsgGCToServerPingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToServerPingResponse));
  CMsgGCToServerConsoleCommand_descriptor_ = file->message_type(51);
  static const int CMsgGCToServerConsoleCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerConsoleCommand, console_command_),
  };
  CMsgGCToServerConsoleCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToServerConsoleCommand_descriptor_,
      CMsgGCToServerConsoleCommand::default_instance_,
      CMsgGCToServerConsoleCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerConsoleCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerConsoleCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToServerConsoleCommand));
  CMsgServerGetEventPoints_descriptor_ = file->message_type(52);
  static const int CMsgServerGetEventPoints_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGetEventPoints, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGetEventPoints, account_id_),
  };
  CMsgServerGetEventPoints_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerGetEventPoints_descriptor_,
      CMsgServerGetEventPoints::default_instance_,
      CMsgServerGetEventPoints_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGetEventPoints, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGetEventPoints, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerGetEventPoints));
  CMsgServerGetEventPointsResponse_descriptor_ = file->message_type(53);
  static const int CMsgServerGetEventPointsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGetEventPointsResponse, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGetEventPointsResponse, points_),
  };
  CMsgServerGetEventPointsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerGetEventPointsResponse_descriptor_,
      CMsgServerGetEventPointsResponse::default_instance_,
      CMsgServerGetEventPointsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGetEventPointsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGetEventPointsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerGetEventPointsResponse));
  CMsgServerGetEventPointsResponse_Points_descriptor_ = CMsgServerGetEventPointsResponse_descriptor_->nested_type(0);
  static const int CMsgServerGetEventPointsResponse_Points_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGetEventPointsResponse_Points, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGetEventPointsResponse_Points, points_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGetEventPointsResponse_Points, owned_),
  };
  CMsgServerGetEventPointsResponse_Points_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerGetEventPointsResponse_Points_descriptor_,
      CMsgServerGetEventPointsResponse_Points::default_instance_,
      CMsgServerGetEventPointsResponse_Points_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGetEventPointsResponse_Points, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGetEventPointsResponse_Points, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerGetEventPointsResponse_Points));
  CMsgServerGrantSurveyPermission_descriptor_ = file->message_type(54);
  static const int CMsgServerGrantSurveyPermission_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermission, surveys_),
  };
  CMsgServerGrantSurveyPermission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerGrantSurveyPermission_descriptor_,
      CMsgServerGrantSurveyPermission::default_instance_,
      CMsgServerGrantSurveyPermission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerGrantSurveyPermission));
  CMsgServerGrantSurveyPermission_Survey_descriptor_ = CMsgServerGrantSurveyPermission_descriptor_->nested_type(0);
  static const int CMsgServerGrantSurveyPermission_Survey_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermission_Survey, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermission_Survey, question_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermission_Survey, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermission_Survey, survey_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermission_Survey, extra_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermission_Survey, extra_data_32_),
  };
  CMsgServerGrantSurveyPermission_Survey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerGrantSurveyPermission_Survey_descriptor_,
      CMsgServerGrantSurveyPermission_Survey::default_instance_,
      CMsgServerGrantSurveyPermission_Survey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermission_Survey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermission_Survey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerGrantSurveyPermission_Survey));
  CMsgServerGrantSurveyPermissionResponse_descriptor_ = file->message_type(55);
  static const int CMsgServerGrantSurveyPermissionResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermissionResponse, result_),
  };
  CMsgServerGrantSurveyPermissionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerGrantSurveyPermissionResponse_descriptor_,
      CMsgServerGrantSurveyPermissionResponse::default_instance_,
      CMsgServerGrantSurveyPermissionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermissionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermissionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerGrantSurveyPermissionResponse));
  CMsgServerToGCMatchConnectionStats_descriptor_ = file->message_type(56);
  static const int CMsgServerToGCMatchConnectionStats_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats, cluster_id_),
  };
  CMsgServerToGCMatchConnectionStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerToGCMatchConnectionStats_descriptor_,
      CMsgServerToGCMatchConnectionStats::default_instance_,
      CMsgServerToGCMatchConnectionStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerToGCMatchConnectionStats));
  CMsgServerToGCMatchConnectionStats_Player_descriptor_ = CMsgServerToGCMatchConnectionStats_descriptor_->nested_type(0);
  static const int CMsgServerToGCMatchConnectionStats_Player_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats_Player, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats_Player, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats_Player, avg_ping_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats_Player, packet_loss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats_Player, ping_deviation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats_Player, full_resends_),
  };
  CMsgServerToGCMatchConnectionStats_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerToGCMatchConnectionStats_Player_descriptor_,
      CMsgServerToGCMatchConnectionStats_Player::default_instance_,
      CMsgServerToGCMatchConnectionStats_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerToGCMatchConnectionStats_Player));
  CMsgServerGCUpdateSpectatorCount_descriptor_ = file->message_type(57);
  static const int CMsgServerGCUpdateSpectatorCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGCUpdateSpectatorCount, spectator_count_),
  };
  CMsgServerGCUpdateSpectatorCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerGCUpdateSpectatorCount_descriptor_,
      CMsgServerGCUpdateSpectatorCount::default_instance_,
      CMsgServerGCUpdateSpectatorCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGCUpdateSpectatorCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGCUpdateSpectatorCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerGCUpdateSpectatorCount));
  CSerializedCombatLog_descriptor_ = file->message_type(58);
  static const int CSerializedCombatLog_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSerializedCombatLog, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSerializedCombatLog, dictionary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSerializedCombatLog, entries_),
  };
  CSerializedCombatLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSerializedCombatLog_descriptor_,
      CSerializedCombatLog::default_instance_,
      CSerializedCombatLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSerializedCombatLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSerializedCombatLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSerializedCombatLog));
  CSerializedCombatLog_Dictionary_descriptor_ = CSerializedCombatLog_descriptor_->nested_type(0);
  static const int CSerializedCombatLog_Dictionary_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSerializedCombatLog_Dictionary, strings_),
  };
  CSerializedCombatLog_Dictionary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSerializedCombatLog_Dictionary_descriptor_,
      CSerializedCombatLog_Dictionary::default_instance_,
      CSerializedCombatLog_Dictionary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSerializedCombatLog_Dictionary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSerializedCombatLog_Dictionary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSerializedCombatLog_Dictionary));
  CSerializedCombatLog_Dictionary_DictString_descriptor_ = CSerializedCombatLog_Dictionary_descriptor_->nested_type(0);
  static const int CSerializedCombatLog_Dictionary_DictString_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSerializedCombatLog_Dictionary_DictString, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSerializedCombatLog_Dictionary_DictString, value_),
  };
  CSerializedCombatLog_Dictionary_DictString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSerializedCombatLog_Dictionary_DictString_descriptor_,
      CSerializedCombatLog_Dictionary_DictString::default_instance_,
      CSerializedCombatLog_Dictionary_DictString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSerializedCombatLog_Dictionary_DictString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSerializedCombatLog_Dictionary_DictString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSerializedCombatLog_Dictionary_DictString));
  CMsgServerToGCGetAdditionalEquips_descriptor_ = file->message_type(59);
  static const int CMsgServerToGCGetAdditionalEquips_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetAdditionalEquips, account_ids_),
  };
  CMsgServerToGCGetAdditionalEquips_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerToGCGetAdditionalEquips_descriptor_,
      CMsgServerToGCGetAdditionalEquips::default_instance_,
      CMsgServerToGCGetAdditionalEquips_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetAdditionalEquips, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetAdditionalEquips, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerToGCGetAdditionalEquips));
  CMsgServerToGCGetAdditionalEquipsResponse_descriptor_ = file->message_type(60);
  static const int CMsgServerToGCGetAdditionalEquipsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetAdditionalEquipsResponse, equips_),
  };
  CMsgServerToGCGetAdditionalEquipsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerToGCGetAdditionalEquipsResponse_descriptor_,
      CMsgServerToGCGetAdditionalEquipsResponse::default_instance_,
      CMsgServerToGCGetAdditionalEquipsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetAdditionalEquipsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetAdditionalEquipsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerToGCGetAdditionalEquipsResponse));
  CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_descriptor_ = CMsgServerToGCGetAdditionalEquipsResponse_descriptor_->nested_type(0);
  static const int CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips, equips_),
  };
  CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_descriptor_,
      CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::default_instance_,
      CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips));
  CMsgServerToGCGetProfileCard_descriptor_ = file->message_type(61);
  static const int CMsgServerToGCGetProfileCard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetProfileCard, account_ids_),
  };
  CMsgServerToGCGetProfileCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerToGCGetProfileCard_descriptor_,
      CMsgServerToGCGetProfileCard::default_instance_,
      CMsgServerToGCGetProfileCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetProfileCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetProfileCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerToGCGetProfileCard));
  CMsgServerToGCGetProfileCardResponse_descriptor_ = file->message_type(62);
  static const int CMsgServerToGCGetProfileCardResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetProfileCardResponse, cards_),
  };
  CMsgServerToGCGetProfileCardResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerToGCGetProfileCardResponse_descriptor_,
      CMsgServerToGCGetProfileCardResponse::default_instance_,
      CMsgServerToGCGetProfileCardResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetProfileCardResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetProfileCardResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerToGCGetProfileCardResponse));
  CMsgServerToGCVictoryPredictions_descriptor_ = file->message_type(63);
  static const int CMsgServerToGCVictoryPredictions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCVictoryPredictions, records_),
  };
  CMsgServerToGCVictoryPredictions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerToGCVictoryPredictions_descriptor_,
      CMsgServerToGCVictoryPredictions::default_instance_,
      CMsgServerToGCVictoryPredictions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCVictoryPredictions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCVictoryPredictions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerToGCVictoryPredictions));
  CMsgServerToGCVictoryPredictions_Record_descriptor_ = CMsgServerToGCVictoryPredictions_descriptor_->nested_type(0);
  static const int CMsgServerToGCVictoryPredictions_Record_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCVictoryPredictions_Record, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCVictoryPredictions_Record, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCVictoryPredictions_Record, item_ids_),
  };
  CMsgServerToGCVictoryPredictions_Record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerToGCVictoryPredictions_Record_descriptor_,
      CMsgServerToGCVictoryPredictions_Record::default_instance_,
      CMsgServerToGCVictoryPredictions_Record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCVictoryPredictions_Record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCVictoryPredictions_Record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerToGCVictoryPredictions_Record));
  CMsgSuspiciousActivity_descriptor_ = file->message_type(64);
  static const int CMsgSuspiciousActivity_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSuspiciousActivity, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSuspiciousActivity, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSuspiciousActivity, intdata1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSuspiciousActivity, intdata2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSuspiciousActivity, time_),
  };
  CMsgSuspiciousActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSuspiciousActivity_descriptor_,
      CMsgSuspiciousActivity::default_instance_,
      CMsgSuspiciousActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSuspiciousActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSuspiciousActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSuspiciousActivity));
  CMsgServerToGCRequestStatus_descriptor_ = file->message_type(65);
  static const int CMsgServerToGCRequestStatus_offsets_[1] = {
  };
  CMsgServerToGCRequestStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerToGCRequestStatus_descriptor_,
      CMsgServerToGCRequestStatus::default_instance_,
      CMsgServerToGCRequestStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCRequestStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCRequestStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerToGCRequestStatus));
  CMsgServerToGCRequestStatus_Response_descriptor_ = file->message_type(66);
  static const int CMsgServerToGCRequestStatus_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCRequestStatus_Response, response_),
  };
  CMsgServerToGCRequestStatus_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerToGCRequestStatus_Response_descriptor_,
      CMsgServerToGCRequestStatus_Response::default_instance_,
      CMsgServerToGCRequestStatus_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCRequestStatus_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCRequestStatus_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerToGCRequestStatus_Response));
  CMsgSignOutAssassinMiniGameInfo_descriptor_ = file->message_type(67);
  static const int CMsgSignOutAssassinMiniGameInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutAssassinMiniGameInfo, winning_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutAssassinMiniGameInfo, losing_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutAssassinMiniGameInfo, arcana_owners_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutAssassinMiniGameInfo, assassin_won_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutAssassinMiniGameInfo, target_hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutAssassinMiniGameInfo, contract_completed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutAssassinMiniGameInfo, contract_complete_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutAssassinMiniGameInfo, pa_is_radiant_),
  };
  CMsgSignOutAssassinMiniGameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSignOutAssassinMiniGameInfo_descriptor_,
      CMsgSignOutAssassinMiniGameInfo::default_instance_,
      CMsgSignOutAssassinMiniGameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutAssassinMiniGameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutAssassinMiniGameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSignOutAssassinMiniGameInfo));
  CMsgServerToGCGetIngameEventData_descriptor_ = file->message_type(68);
  static const int CMsgServerToGCGetIngameEventData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetIngameEventData, event_),
  };
  CMsgServerToGCGetIngameEventData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerToGCGetIngameEventData_descriptor_,
      CMsgServerToGCGetIngameEventData::default_instance_,
      CMsgServerToGCGetIngameEventData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetIngameEventData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetIngameEventData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerToGCGetIngameEventData));
  CMsgGCToServerIngameEventDataOraclePA_descriptor_ = file->message_type(69);
  static const int CMsgGCToServerIngameEventDataOraclePA_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerIngameEventDataOraclePA, target_hero_ids_),
  };
  CMsgGCToServerIngameEventDataOraclePA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToServerIngameEventDataOraclePA_descriptor_,
      CMsgGCToServerIngameEventDataOraclePA::default_instance_,
      CMsgGCToServerIngameEventDataOraclePA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerIngameEventDataOraclePA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerIngameEventDataOraclePA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToServerIngameEventDataOraclePA));
  CMsgServerToGCKillSummaries_descriptor_ = file->message_type(70);
  static const int CMsgServerToGCKillSummaries_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCKillSummaries, ingameevent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCKillSummaries, summaries_),
  };
  CMsgServerToGCKillSummaries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerToGCKillSummaries_descriptor_,
      CMsgServerToGCKillSummaries::default_instance_,
      CMsgServerToGCKillSummaries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCKillSummaries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCKillSummaries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerToGCKillSummaries));
  CMsgServerToGCKillSummaries_KillSummary_descriptor_ = CMsgServerToGCKillSummaries_descriptor_->nested_type(0);
  static const int CMsgServerToGCKillSummaries_KillSummary_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCKillSummaries_KillSummary, killer_hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCKillSummaries_KillSummary, victim_hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCKillSummaries_KillSummary, kill_count_),
  };
  CMsgServerToGCKillSummaries_KillSummary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerToGCKillSummaries_KillSummary_descriptor_,
      CMsgServerToGCKillSummaries_KillSummary::default_instance_,
      CMsgServerToGCKillSummaries_KillSummary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCKillSummaries_KillSummary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCKillSummaries_KillSummary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerToGCKillSummaries_KillSummary));
  CMsgGCToServerPredictionResult_descriptor_ = file->message_type(71);
  static const int CMsgGCToServerPredictionResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPredictionResult, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPredictionResult, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPredictionResult, correct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPredictionResult, predictions_),
  };
  CMsgGCToServerPredictionResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToServerPredictionResult_descriptor_,
      CMsgGCToServerPredictionResult::default_instance_,
      CMsgGCToServerPredictionResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPredictionResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPredictionResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToServerPredictionResult));
  CMsgGCToServerPredictionResult_Prediction_descriptor_ = CMsgGCToServerPredictionResult_descriptor_->nested_type(0);
  static const int CMsgGCToServerPredictionResult_Prediction_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPredictionResult_Prediction, item_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPredictionResult_Prediction, num_correct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPredictionResult_Prediction, num_fails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPredictionResult_Prediction, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPredictionResult_Prediction, granted_item_defs_),
  };
  CMsgGCToServerPredictionResult_Prediction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToServerPredictionResult_Prediction_descriptor_,
      CMsgGCToServerPredictionResult_Prediction::default_instance_,
      CMsgGCToServerPredictionResult_Prediction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPredictionResult_Prediction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPredictionResult_Prediction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToServerPredictionResult_Prediction));
  CMsgGCToServerPredictionResult_Prediction_EResult_descriptor_ = CMsgGCToServerPredictionResult_Prediction_descriptor_->enum_type(0);
  CMsgServerToGCLockCharmTrading_descriptor_ = file->message_type(72);
  static const int CMsgServerToGCLockCharmTrading_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCLockCharmTrading, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCLockCharmTrading, item_id_),
  };
  CMsgServerToGCLockCharmTrading_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerToGCLockCharmTrading_descriptor_,
      CMsgServerToGCLockCharmTrading::default_instance_,
      CMsgServerToGCLockCharmTrading_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCLockCharmTrading, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCLockCharmTrading, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerToGCLockCharmTrading));
  CMsgDOTACNY2015EventPointUsage_descriptor_ = file->message_type(73);
  static const int CMsgDOTACNY2015EventPointUsage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACNY2015EventPointUsage, winning_team_usage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACNY2015EventPointUsage, losing_team_usage_),
  };
  CMsgDOTACNY2015EventPointUsage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTACNY2015EventPointUsage_descriptor_,
      CMsgDOTACNY2015EventPointUsage::default_instance_,
      CMsgDOTACNY2015EventPointUsage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACNY2015EventPointUsage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACNY2015EventPointUsage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTACNY2015EventPointUsage));
  CMsgDOTACNY2015EventPointUsage_PointUsage_descriptor_ = CMsgDOTACNY2015EventPointUsage_descriptor_->nested_type(0);
  static const int CMsgDOTACNY2015EventPointUsage_PointUsage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACNY2015EventPointUsage_PointUsage, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACNY2015EventPointUsage_PointUsage, path_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACNY2015EventPointUsage_PointUsage, ability_points_spent_),
  };
  CMsgDOTACNY2015EventPointUsage_PointUsage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTACNY2015EventPointUsage_PointUsage_descriptor_,
      CMsgDOTACNY2015EventPointUsage_PointUsage::default_instance_,
      CMsgDOTACNY2015EventPointUsage_PointUsage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACNY2015EventPointUsage_PointUsage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACNY2015EventPointUsage_PointUsage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTACNY2015EventPointUsage_PointUsage));
  CMsgSignOutUpdatePlayerChallenge_descriptor_ = file->message_type(74);
  static const int CMsgSignOutUpdatePlayerChallenge_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge, completed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge, rerolled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge, match_id_),
  };
  CMsgSignOutUpdatePlayerChallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSignOutUpdatePlayerChallenge_descriptor_,
      CMsgSignOutUpdatePlayerChallenge::default_instance_,
      CMsgSignOutUpdatePlayerChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSignOutUpdatePlayerChallenge));
  CMsgSignOutUpdatePlayerChallenge_Challenge_descriptor_ = CMsgSignOutUpdatePlayerChallenge_descriptor_->nested_type(0);
  static const int CMsgSignOutUpdatePlayerChallenge_Challenge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge_Challenge, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge_Challenge, sequence_id_),
  };
  CMsgSignOutUpdatePlayerChallenge_Challenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSignOutUpdatePlayerChallenge_Challenge_descriptor_,
      CMsgSignOutUpdatePlayerChallenge_Challenge::default_instance_,
      CMsgSignOutUpdatePlayerChallenge_Challenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge_Challenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge_Challenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSignOutUpdatePlayerChallenge_Challenge));
  CMsgServerToGCRerollPlayerChallenge_descriptor_ = file->message_type(75);
  static const int CMsgServerToGCRerollPlayerChallenge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCRerollPlayerChallenge, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCRerollPlayerChallenge, reroll_msg_),
  };
  CMsgServerToGCRerollPlayerChallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerToGCRerollPlayerChallenge_descriptor_,
      CMsgServerToGCRerollPlayerChallenge::default_instance_,
      CMsgServerToGCRerollPlayerChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCRerollPlayerChallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCRerollPlayerChallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerToGCRerollPlayerChallenge));
  CMsgServerToGCHoldEventPoints_descriptor_ = file->message_type(76);
  static const int CMsgServerToGCHoldEventPoints_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCHoldEventPoints, holds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCHoldEventPoints, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCHoldEventPoints, hold_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCHoldEventPoints, hold_until_),
  };
  CMsgServerToGCHoldEventPoints_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerToGCHoldEventPoints_descriptor_,
      CMsgServerToGCHoldEventPoints::default_instance_,
      CMsgServerToGCHoldEventPoints_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCHoldEventPoints, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCHoldEventPoints, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerToGCHoldEventPoints));
  CMsgServerToGCHoldEventPoints_HoldRequest_descriptor_ = CMsgServerToGCHoldEventPoints_descriptor_->nested_type(0);
  static const int CMsgServerToGCHoldEventPoints_HoldRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCHoldEventPoints_HoldRequest, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCHoldEventPoints_HoldRequest, points_held_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCHoldEventPoints_HoldRequest, premium_held_),
  };
  CMsgServerToGCHoldEventPoints_HoldRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerToGCHoldEventPoints_HoldRequest_descriptor_,
      CMsgServerToGCHoldEventPoints_HoldRequest::default_instance_,
      CMsgServerToGCHoldEventPoints_HoldRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCHoldEventPoints_HoldRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCHoldEventPoints_HoldRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerToGCHoldEventPoints_HoldRequest));
  CMsgSignOutReleaseEventPointHolds_descriptor_ = file->message_type(77);
  static const int CMsgSignOutReleaseEventPointHolds_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutReleaseEventPointHolds, account_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutReleaseEventPointHolds, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutReleaseEventPointHolds, hold_key_),
  };
  CMsgSignOutReleaseEventPointHolds_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSignOutReleaseEventPointHolds_descriptor_,
      CMsgSignOutReleaseEventPointHolds::default_instance_,
      CMsgSignOutReleaseEventPointHolds_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutReleaseEventPointHolds, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutReleaseEventPointHolds, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSignOutReleaseEventPointHolds));
  CMsgGCToServerUpdateBroadcastCheers_descriptor_ = file->message_type(78);
  static const int CMsgGCToServerUpdateBroadcastCheers_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerUpdateBroadcastCheers, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerUpdateBroadcastCheers, team_1_cheers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerUpdateBroadcastCheers, team_2_cheers_),
  };
  CMsgGCToServerUpdateBroadcastCheers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToServerUpdateBroadcastCheers_descriptor_,
      CMsgGCToServerUpdateBroadcastCheers::default_instance_,
      CMsgGCToServerUpdateBroadcastCheers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerUpdateBroadcastCheers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerUpdateBroadcastCheers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToServerUpdateBroadcastCheers));
  CMsgSignOutWagerStats_descriptor_ = file->message_type(79);
  static const int CMsgSignOutWagerStats_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutWagerStats, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutWagerStats, event_id_),
  };
  CMsgSignOutWagerStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSignOutWagerStats_descriptor_,
      CMsgSignOutWagerStats::default_instance_,
      CMsgSignOutWagerStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutWagerStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutWagerStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSignOutWagerStats));
  CMsgSignOutWagerStats_Player_descriptor_ = CMsgSignOutWagerStats_descriptor_->nested_type(0);
  static const int CMsgSignOutWagerStats_Player_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutWagerStats_Player, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutWagerStats_Player, winnings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutWagerStats_Player, max_wager_),
  };
  CMsgSignOutWagerStats_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSignOutWagerStats_Player_descriptor_,
      CMsgSignOutWagerStats_Player::default_instance_,
      CMsgSignOutWagerStats_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutWagerStats_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutWagerStats_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSignOutWagerStats_Player));
  EPoorNetworkConditionsType_descriptor_ = file->enum_type(0);
  EAbilityAbuseType_descriptor_ = file->enum_type(1);
  EIntentionalFeedingType_descriptor_ = file->enum_type(2);
  ESuspiciousActivity_descriptor_ = file->enum_type(3);
  ESuspiciousBuildType_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSpawnLootGreevil_descriptor_, &CMsgSpawnLootGreevil::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDismissLootGreevil_descriptor_, &CMsgDismissLootGreevil::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDismissLootGreevilResponse_descriptor_, &CMsgDismissLootGreevilResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPoorNetworkConditions_descriptor_, &CMsgPoorNetworkConditions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPoorNetworkConditions_Player_descriptor_, &CMsgPoorNetworkConditions_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameserverCrash_descriptor_, &CMsgGameserverCrash::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgConnectedPlayers_descriptor_, &CMsgConnectedPlayers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgConnectedPlayers_Player_descriptor_, &CMsgConnectedPlayers_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameServerInfo_descriptor_, &CMsgGameServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLeaverDetected_descriptor_, &CMsgLeaverDetected::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLeaverDetectedResponse_descriptor_, &CMsgLeaverDetectedResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAFantasyPlayerStats_descriptor_, &CMsgDOTAFantasyPlayerStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAFantasyMatch_descriptor_, &CMsgDOTAFantasyMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerToGCRealtimeStats_descriptor_, &CMsgServerToGCRealtimeStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToServerRealtimeStatsStartStop_descriptor_, &CMsgGCToServerRealtimeStatsStartStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameMatchSignOut_descriptor_, &CMsgGameMatchSignOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameMatchSignOut_CTeam_descriptor_, &CMsgGameMatchSignOut_CTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameMatchSignOut_CTeam_CPlayer_descriptor_, &CMsgGameMatchSignOut_CTeam_CPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_descriptor_, &CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameMatchSignOut_CAdditionalSignoutMsg_descriptor_, &CMsgGameMatchSignOut_CAdditionalSignoutMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameMatchSignOut_CSocialFeedMatchEvent_descriptor_, &CMsgGameMatchSignOut_CSocialFeedMatchEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameMatchSignOut_CCustomGameData_descriptor_, &CMsgGameMatchSignOut_CCustomGameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSignOutDraftInfo_descriptor_, &CMsgSignOutDraftInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSignOutBotInfo_descriptor_, &CMsgSignOutBotInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSignOutBotInfo_CMsgBotSlotDifficulty_descriptor_, &CMsgSignOutBotInfo_CMsgBotSlotDifficulty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSignOutPlayerStats_descriptor_, &CMsgSignOutPlayerStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSignOutCommunicationSummary_descriptor_, &CMsgSignOutCommunicationSummary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSignOutCommunicationSummary_PlayerCommunication_descriptor_, &CMsgSignOutCommunicationSummary_PlayerCommunication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameMatchSignoutResponse_descriptor_, &CMsgGameMatchSignoutResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg_descriptor_, &CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameMatchSignOutPermissionRequest_descriptor_, &CMsgGameMatchSignOutPermissionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameMatchSignOutPermissionResponse_descriptor_, &CMsgGameMatchSignOutPermissionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameChatLog_descriptor_, &CMsgGameChatLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameChatLog_CChatLine_descriptor_, &CMsgGameChatLog_CChatLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTALiveScoreboardUpdate_descriptor_, &CMsgDOTALiveScoreboardUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTALiveScoreboardUpdate_Team_descriptor_, &CMsgDOTALiveScoreboardUpdate_Team::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTALiveScoreboardUpdate_Team_Player_descriptor_, &CMsgDOTALiveScoreboardUpdate_Team_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_descriptor_, &CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARequestPlayerResources_descriptor_, &CMsgDOTARequestPlayerResources::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARequestPlayerResourcesResponse_descriptor_, &CMsgDOTARequestPlayerResourcesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARequestBatchPlayerResources_descriptor_, &CMsgDOTARequestBatchPlayerResources::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARequestBatchPlayerResourcesResponse_descriptor_, &CMsgDOTARequestBatchPlayerResourcesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARequestBatchPlayerResourcesResponse_Result_descriptor_, &CMsgDOTARequestBatchPlayerResourcesResponse_Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAPlayerFailedToConnect_descriptor_, &CMsgDOTAPlayerFailedToConnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToRelayConnect_descriptor_, &CMsgGCToRelayConnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCGCToLANServerRelayConnect_descriptor_, &CMsgGCGCToLANServerRelayConnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToRelayConnectResponse_descriptor_, &CMsgGCToRelayConnectResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCBanStatusRequest_descriptor_, &CMsgGCBanStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCBanStatusResponse_descriptor_, &CMsgGCBanStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTournamentItemEvent_descriptor_, &CMsgTournamentItemEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTournamentItemEventResponse_descriptor_, &CMsgTournamentItemEventResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTeamFanfare_descriptor_, &CMsgTeamFanfare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgResponseTeamFanfare_descriptor_, &CMsgResponseTeamFanfare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameServerUploadSaveGame_descriptor_, &CMsgGameServerUploadSaveGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameServerSaveGameResult_descriptor_, &CMsgGameServerSaveGameResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameServerGetLoadGame_descriptor_, &CMsgGameServerGetLoadGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameServerGetLoadGameResult_descriptor_, &CMsgGameServerGetLoadGameResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGenerateDiretidePrizeList_descriptor_, &CMsgDOTAGenerateDiretidePrizeList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGenerateDiretidePrizeListResponse_descriptor_, &CMsgDOTAGenerateDiretidePrizeListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARewardDiretidePrizes_descriptor_, &CMsgDOTARewardDiretidePrizes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTADiretidePrizesRewardedResponse_descriptor_, &CMsgDOTADiretidePrizesRewardedResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAAwardEventPoints_descriptor_, &CMsgDOTAAwardEventPoints::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAAwardEventPoints_AwardPoints_descriptor_, &CMsgDOTAAwardEventPoints_AwardPoints::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerToGCSignoutAwardAdditionalDrops_descriptor_, &CMsgServerToGCSignoutAwardAdditionalDrops::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_descriptor_, &CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAUpdateTI4HeroQuest_descriptor_, &CMsgDOTAUpdateTI4HeroQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAUpdateTI4HeroQuest_Player_descriptor_, &CMsgDOTAUpdateTI4HeroQuest_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAFrostivusTimeElapsed_descriptor_, &CMsgDOTAFrostivusTimeElapsed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAFrostivusTimeElapsed_User_descriptor_, &CMsgDOTAFrostivusTimeElapsed_User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToServerPingRequest_descriptor_, &CMsgGCToServerPingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToServerPingResponse_descriptor_, &CMsgGCToServerPingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToServerConsoleCommand_descriptor_, &CMsgGCToServerConsoleCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerGetEventPoints_descriptor_, &CMsgServerGetEventPoints::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerGetEventPointsResponse_descriptor_, &CMsgServerGetEventPointsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerGetEventPointsResponse_Points_descriptor_, &CMsgServerGetEventPointsResponse_Points::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerGrantSurveyPermission_descriptor_, &CMsgServerGrantSurveyPermission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerGrantSurveyPermission_Survey_descriptor_, &CMsgServerGrantSurveyPermission_Survey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerGrantSurveyPermissionResponse_descriptor_, &CMsgServerGrantSurveyPermissionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerToGCMatchConnectionStats_descriptor_, &CMsgServerToGCMatchConnectionStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerToGCMatchConnectionStats_Player_descriptor_, &CMsgServerToGCMatchConnectionStats_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerGCUpdateSpectatorCount_descriptor_, &CMsgServerGCUpdateSpectatorCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSerializedCombatLog_descriptor_, &CSerializedCombatLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSerializedCombatLog_Dictionary_descriptor_, &CSerializedCombatLog_Dictionary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSerializedCombatLog_Dictionary_DictString_descriptor_, &CSerializedCombatLog_Dictionary_DictString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerToGCGetAdditionalEquips_descriptor_, &CMsgServerToGCGetAdditionalEquips::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerToGCGetAdditionalEquipsResponse_descriptor_, &CMsgServerToGCGetAdditionalEquipsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_descriptor_, &CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerToGCGetProfileCard_descriptor_, &CMsgServerToGCGetProfileCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerToGCGetProfileCardResponse_descriptor_, &CMsgServerToGCGetProfileCardResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerToGCVictoryPredictions_descriptor_, &CMsgServerToGCVictoryPredictions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerToGCVictoryPredictions_Record_descriptor_, &CMsgServerToGCVictoryPredictions_Record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSuspiciousActivity_descriptor_, &CMsgSuspiciousActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerToGCRequestStatus_descriptor_, &CMsgServerToGCRequestStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerToGCRequestStatus_Response_descriptor_, &CMsgServerToGCRequestStatus_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSignOutAssassinMiniGameInfo_descriptor_, &CMsgSignOutAssassinMiniGameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerToGCGetIngameEventData_descriptor_, &CMsgServerToGCGetIngameEventData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToServerIngameEventDataOraclePA_descriptor_, &CMsgGCToServerIngameEventDataOraclePA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerToGCKillSummaries_descriptor_, &CMsgServerToGCKillSummaries::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerToGCKillSummaries_KillSummary_descriptor_, &CMsgServerToGCKillSummaries_KillSummary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToServerPredictionResult_descriptor_, &CMsgGCToServerPredictionResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToServerPredictionResult_Prediction_descriptor_, &CMsgGCToServerPredictionResult_Prediction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerToGCLockCharmTrading_descriptor_, &CMsgServerToGCLockCharmTrading::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTACNY2015EventPointUsage_descriptor_, &CMsgDOTACNY2015EventPointUsage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTACNY2015EventPointUsage_PointUsage_descriptor_, &CMsgDOTACNY2015EventPointUsage_PointUsage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSignOutUpdatePlayerChallenge_descriptor_, &CMsgSignOutUpdatePlayerChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSignOutUpdatePlayerChallenge_Challenge_descriptor_, &CMsgSignOutUpdatePlayerChallenge_Challenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerToGCRerollPlayerChallenge_descriptor_, &CMsgServerToGCRerollPlayerChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerToGCHoldEventPoints_descriptor_, &CMsgServerToGCHoldEventPoints::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerToGCHoldEventPoints_HoldRequest_descriptor_, &CMsgServerToGCHoldEventPoints_HoldRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSignOutReleaseEventPointHolds_descriptor_, &CMsgSignOutReleaseEventPointHolds::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToServerUpdateBroadcastCheers_descriptor_, &CMsgGCToServerUpdateBroadcastCheers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSignOutWagerStats_descriptor_, &CMsgSignOutWagerStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSignOutWagerStats_Player_descriptor_, &CMsgSignOutWagerStats_Player::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto() {
  delete CMsgSpawnLootGreevil::default_instance_;
  delete CMsgSpawnLootGreevil_reflection_;
  delete CMsgDismissLootGreevil::default_instance_;
  delete CMsgDismissLootGreevil_reflection_;
  delete CMsgDismissLootGreevilResponse::default_instance_;
  delete CMsgDismissLootGreevilResponse_reflection_;
  delete CMsgPoorNetworkConditions::default_instance_;
  delete CMsgPoorNetworkConditions_reflection_;
  delete CMsgPoorNetworkConditions_Player::default_instance_;
  delete CMsgPoorNetworkConditions_Player_reflection_;
  delete CMsgGameserverCrash::default_instance_;
  delete CMsgGameserverCrash_reflection_;
  delete CMsgConnectedPlayers::default_instance_;
  delete CMsgConnectedPlayers_reflection_;
  delete CMsgConnectedPlayers_Player::default_instance_;
  delete CMsgConnectedPlayers_Player_reflection_;
  delete CMsgGameServerInfo::default_instance_;
  delete CMsgGameServerInfo_reflection_;
  delete CMsgLeaverDetected::default_instance_;
  delete CMsgLeaverDetected_reflection_;
  delete CMsgLeaverDetectedResponse::default_instance_;
  delete CMsgLeaverDetectedResponse_reflection_;
  delete CMsgDOTAFantasyPlayerStats::default_instance_;
  delete CMsgDOTAFantasyPlayerStats_reflection_;
  delete CMsgDOTAFantasyMatch::default_instance_;
  delete CMsgDOTAFantasyMatch_reflection_;
  delete CMsgServerToGCRealtimeStats::default_instance_;
  delete CMsgServerToGCRealtimeStats_reflection_;
  delete CMsgGCToServerRealtimeStatsStartStop::default_instance_;
  delete CMsgGCToServerRealtimeStatsStartStop_reflection_;
  delete CMsgGameMatchSignOut::default_instance_;
  delete CMsgGameMatchSignOut_reflection_;
  delete CMsgGameMatchSignOut_CTeam::default_instance_;
  delete CMsgGameMatchSignOut_CTeam_reflection_;
  delete CMsgGameMatchSignOut_CTeam_CPlayer::default_instance_;
  delete CMsgGameMatchSignOut_CTeam_CPlayer_reflection_;
  delete CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::default_instance_;
  delete CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_reflection_;
  delete CMsgGameMatchSignOut_CAdditionalSignoutMsg::default_instance_;
  delete CMsgGameMatchSignOut_CAdditionalSignoutMsg_reflection_;
  delete CMsgGameMatchSignOut_CSocialFeedMatchEvent::default_instance_;
  delete CMsgGameMatchSignOut_CSocialFeedMatchEvent_reflection_;
  delete CMsgGameMatchSignOut_CCustomGameData::default_instance_;
  delete CMsgGameMatchSignOut_CCustomGameData_reflection_;
  delete CMsgSignOutDraftInfo::default_instance_;
  delete CMsgSignOutDraftInfo_reflection_;
  delete CMsgSignOutBotInfo::default_instance_;
  delete CMsgSignOutBotInfo_reflection_;
  delete CMsgSignOutBotInfo_CMsgBotSlotDifficulty::default_instance_;
  delete CMsgSignOutBotInfo_CMsgBotSlotDifficulty_reflection_;
  delete CMsgSignOutPlayerStats::default_instance_;
  delete CMsgSignOutPlayerStats_reflection_;
  delete CMsgSignOutCommunicationSummary::default_instance_;
  delete CMsgSignOutCommunicationSummary_reflection_;
  delete CMsgSignOutCommunicationSummary_PlayerCommunication::default_instance_;
  delete CMsgSignOutCommunicationSummary_PlayerCommunication_reflection_;
  delete CMsgGameMatchSignoutResponse::default_instance_;
  delete CMsgGameMatchSignoutResponse_reflection_;
  delete CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::default_instance_;
  delete CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg_reflection_;
  delete CMsgGameMatchSignOutPermissionRequest::default_instance_;
  delete CMsgGameMatchSignOutPermissionRequest_reflection_;
  delete CMsgGameMatchSignOutPermissionResponse::default_instance_;
  delete CMsgGameMatchSignOutPermissionResponse_reflection_;
  delete CMsgGameChatLog::default_instance_;
  delete CMsgGameChatLog_reflection_;
  delete CMsgGameChatLog_CChatLine::default_instance_;
  delete CMsgGameChatLog_CChatLine_reflection_;
  delete CMsgDOTALiveScoreboardUpdate::default_instance_;
  delete CMsgDOTALiveScoreboardUpdate_reflection_;
  delete CMsgDOTALiveScoreboardUpdate_Team::default_instance_;
  delete CMsgDOTALiveScoreboardUpdate_Team_reflection_;
  delete CMsgDOTALiveScoreboardUpdate_Team_Player::default_instance_;
  delete CMsgDOTALiveScoreboardUpdate_Team_Player_reflection_;
  delete CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::default_instance_;
  delete CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_reflection_;
  delete CMsgDOTARequestPlayerResources::default_instance_;
  delete CMsgDOTARequestPlayerResources_reflection_;
  delete CMsgDOTARequestPlayerResourcesResponse::default_instance_;
  delete CMsgDOTARequestPlayerResourcesResponse_reflection_;
  delete CMsgDOTARequestBatchPlayerResources::default_instance_;
  delete CMsgDOTARequestBatchPlayerResources_reflection_;
  delete CMsgDOTARequestBatchPlayerResourcesResponse::default_instance_;
  delete CMsgDOTARequestBatchPlayerResourcesResponse_reflection_;
  delete CMsgDOTARequestBatchPlayerResourcesResponse_Result::default_instance_;
  delete CMsgDOTARequestBatchPlayerResourcesResponse_Result_reflection_;
  delete CMsgDOTAPlayerFailedToConnect::default_instance_;
  delete CMsgDOTAPlayerFailedToConnect_reflection_;
  delete CMsgGCToRelayConnect::default_instance_;
  delete CMsgGCToRelayConnect_reflection_;
  delete CMsgGCGCToLANServerRelayConnect::default_instance_;
  delete CMsgGCGCToLANServerRelayConnect_reflection_;
  delete CMsgGCToRelayConnectResponse::default_instance_;
  delete CMsgGCToRelayConnectResponse_reflection_;
  delete CMsgGCBanStatusRequest::default_instance_;
  delete CMsgGCBanStatusRequest_reflection_;
  delete CMsgGCBanStatusResponse::default_instance_;
  delete CMsgGCBanStatusResponse_reflection_;
  delete CMsgTournamentItemEvent::default_instance_;
  delete CMsgTournamentItemEvent_reflection_;
  delete CMsgTournamentItemEventResponse::default_instance_;
  delete CMsgTournamentItemEventResponse_reflection_;
  delete CMsgTeamFanfare::default_instance_;
  delete CMsgTeamFanfare_reflection_;
  delete CMsgResponseTeamFanfare::default_instance_;
  delete CMsgResponseTeamFanfare_reflection_;
  delete CMsgGameServerUploadSaveGame::default_instance_;
  delete CMsgGameServerUploadSaveGame_reflection_;
  delete CMsgGameServerSaveGameResult::default_instance_;
  delete CMsgGameServerSaveGameResult_reflection_;
  delete CMsgGameServerGetLoadGame::default_instance_;
  delete CMsgGameServerGetLoadGame_reflection_;
  delete CMsgGameServerGetLoadGameResult::default_instance_;
  delete CMsgGameServerGetLoadGameResult_reflection_;
  delete CMsgDOTAGenerateDiretidePrizeList::default_instance_;
  delete CMsgDOTAGenerateDiretidePrizeList_reflection_;
  delete CMsgDOTAGenerateDiretidePrizeListResponse::default_instance_;
  delete CMsgDOTAGenerateDiretidePrizeListResponse_reflection_;
  delete CMsgDOTARewardDiretidePrizes::default_instance_;
  delete CMsgDOTARewardDiretidePrizes_reflection_;
  delete CMsgDOTADiretidePrizesRewardedResponse::default_instance_;
  delete CMsgDOTADiretidePrizesRewardedResponse_reflection_;
  delete CMsgDOTAAwardEventPoints::default_instance_;
  delete CMsgDOTAAwardEventPoints_reflection_;
  delete CMsgDOTAAwardEventPoints_AwardPoints::default_instance_;
  delete CMsgDOTAAwardEventPoints_AwardPoints_reflection_;
  delete CMsgServerToGCSignoutAwardAdditionalDrops::default_instance_;
  delete CMsgServerToGCSignoutAwardAdditionalDrops_reflection_;
  delete CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::default_instance_;
  delete CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_reflection_;
  delete CMsgDOTAUpdateTI4HeroQuest::default_instance_;
  delete CMsgDOTAUpdateTI4HeroQuest_reflection_;
  delete CMsgDOTAUpdateTI4HeroQuest_Player::default_instance_;
  delete CMsgDOTAUpdateTI4HeroQuest_Player_reflection_;
  delete CMsgDOTAFrostivusTimeElapsed::default_instance_;
  delete CMsgDOTAFrostivusTimeElapsed_reflection_;
  delete CMsgDOTAFrostivusTimeElapsed_User::default_instance_;
  delete CMsgDOTAFrostivusTimeElapsed_User_reflection_;
  delete CMsgGCToServerPingRequest::default_instance_;
  delete CMsgGCToServerPingRequest_reflection_;
  delete CMsgGCToServerPingResponse::default_instance_;
  delete CMsgGCToServerPingResponse_reflection_;
  delete CMsgGCToServerConsoleCommand::default_instance_;
  delete CMsgGCToServerConsoleCommand_reflection_;
  delete CMsgServerGetEventPoints::default_instance_;
  delete CMsgServerGetEventPoints_reflection_;
  delete CMsgServerGetEventPointsResponse::default_instance_;
  delete CMsgServerGetEventPointsResponse_reflection_;
  delete CMsgServerGetEventPointsResponse_Points::default_instance_;
  delete CMsgServerGetEventPointsResponse_Points_reflection_;
  delete CMsgServerGrantSurveyPermission::default_instance_;
  delete CMsgServerGrantSurveyPermission_reflection_;
  delete CMsgServerGrantSurveyPermission_Survey::default_instance_;
  delete CMsgServerGrantSurveyPermission_Survey_reflection_;
  delete CMsgServerGrantSurveyPermissionResponse::default_instance_;
  delete CMsgServerGrantSurveyPermissionResponse_reflection_;
  delete CMsgServerToGCMatchConnectionStats::default_instance_;
  delete CMsgServerToGCMatchConnectionStats_reflection_;
  delete CMsgServerToGCMatchConnectionStats_Player::default_instance_;
  delete CMsgServerToGCMatchConnectionStats_Player_reflection_;
  delete CMsgServerGCUpdateSpectatorCount::default_instance_;
  delete CMsgServerGCUpdateSpectatorCount_reflection_;
  delete CSerializedCombatLog::default_instance_;
  delete CSerializedCombatLog_reflection_;
  delete CSerializedCombatLog_Dictionary::default_instance_;
  delete CSerializedCombatLog_Dictionary_reflection_;
  delete CSerializedCombatLog_Dictionary_DictString::default_instance_;
  delete CSerializedCombatLog_Dictionary_DictString_reflection_;
  delete CMsgServerToGCGetAdditionalEquips::default_instance_;
  delete CMsgServerToGCGetAdditionalEquips_reflection_;
  delete CMsgServerToGCGetAdditionalEquipsResponse::default_instance_;
  delete CMsgServerToGCGetAdditionalEquipsResponse_reflection_;
  delete CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::default_instance_;
  delete CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_reflection_;
  delete CMsgServerToGCGetProfileCard::default_instance_;
  delete CMsgServerToGCGetProfileCard_reflection_;
  delete CMsgServerToGCGetProfileCardResponse::default_instance_;
  delete CMsgServerToGCGetProfileCardResponse_reflection_;
  delete CMsgServerToGCVictoryPredictions::default_instance_;
  delete CMsgServerToGCVictoryPredictions_reflection_;
  delete CMsgServerToGCVictoryPredictions_Record::default_instance_;
  delete CMsgServerToGCVictoryPredictions_Record_reflection_;
  delete CMsgSuspiciousActivity::default_instance_;
  delete CMsgSuspiciousActivity_reflection_;
  delete CMsgServerToGCRequestStatus::default_instance_;
  delete CMsgServerToGCRequestStatus_reflection_;
  delete CMsgServerToGCRequestStatus_Response::default_instance_;
  delete CMsgServerToGCRequestStatus_Response_reflection_;
  delete CMsgSignOutAssassinMiniGameInfo::default_instance_;
  delete CMsgSignOutAssassinMiniGameInfo_reflection_;
  delete CMsgServerToGCGetIngameEventData::default_instance_;
  delete CMsgServerToGCGetIngameEventData_reflection_;
  delete CMsgGCToServerIngameEventDataOraclePA::default_instance_;
  delete CMsgGCToServerIngameEventDataOraclePA_reflection_;
  delete CMsgServerToGCKillSummaries::default_instance_;
  delete CMsgServerToGCKillSummaries_reflection_;
  delete CMsgServerToGCKillSummaries_KillSummary::default_instance_;
  delete CMsgServerToGCKillSummaries_KillSummary_reflection_;
  delete CMsgGCToServerPredictionResult::default_instance_;
  delete CMsgGCToServerPredictionResult_reflection_;
  delete CMsgGCToServerPredictionResult_Prediction::default_instance_;
  delete CMsgGCToServerPredictionResult_Prediction_reflection_;
  delete CMsgServerToGCLockCharmTrading::default_instance_;
  delete CMsgServerToGCLockCharmTrading_reflection_;
  delete CMsgDOTACNY2015EventPointUsage::default_instance_;
  delete CMsgDOTACNY2015EventPointUsage_reflection_;
  delete CMsgDOTACNY2015EventPointUsage_PointUsage::default_instance_;
  delete CMsgDOTACNY2015EventPointUsage_PointUsage_reflection_;
  delete CMsgSignOutUpdatePlayerChallenge::default_instance_;
  delete CMsgSignOutUpdatePlayerChallenge_reflection_;
  delete CMsgSignOutUpdatePlayerChallenge_Challenge::default_instance_;
  delete CMsgSignOutUpdatePlayerChallenge_Challenge_reflection_;
  delete CMsgServerToGCRerollPlayerChallenge::default_instance_;
  delete CMsgServerToGCRerollPlayerChallenge_reflection_;
  delete CMsgServerToGCHoldEventPoints::default_instance_;
  delete CMsgServerToGCHoldEventPoints_reflection_;
  delete CMsgServerToGCHoldEventPoints_HoldRequest::default_instance_;
  delete CMsgServerToGCHoldEventPoints_HoldRequest_reflection_;
  delete CMsgSignOutReleaseEventPointHolds::default_instance_;
  delete CMsgSignOutReleaseEventPointHolds_reflection_;
  delete CMsgGCToServerUpdateBroadcastCheers::default_instance_;
  delete CMsgGCToServerUpdateBroadcastCheers_reflection_;
  delete CMsgSignOutWagerStats::default_instance_;
  delete CMsgSignOutWagerStats_reflection_;
  delete CMsgSignOutWagerStats_Player::default_instance_;
  delete CMsgSignOutWagerStats_Player_reflection_;
}

void protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_steammessages_2eproto();
  ::protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  ::protobuf_AddDesc_econ_5fgcmessages_2eproto();
  ::protobuf_AddDesc_network_5fconnection_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034dota_gcmessages_server.proto\032\023steammes"
    "sages.proto\032\034dota_gcmessages_common.prot"
    "o\032\025econ_gcmessages.proto\032\030network_connec"
    "tion.proto\"$\n\024CMsgSpawnLootGreevil\022\014\n\004ra"
    "re\030\001 \001(\010\"6\n\026CMsgDismissLootGreevil\022\016\n\006ki"
    "lled\030\002 \001(\010\022\014\n\004rare\030\003 \001(\010\" \n\036CMsgDismissL"
    "ootGreevilResponse\"\311\002\n\031CMsgPoorNetworkCo"
    "nditions\022R\n\016detection_type\030\001 \001(\0162\033.EPoor"
    "NetworkConditionsType:\035k_EPoorNetworkCon"
    "ditions_None\0222\n\007players\030\002 \003(\0132!.CMsgPoor"
    "NetworkConditions.Player\032\243\001\n\006Player\022\022\n\na"
    "ccount_id\030\001 \001(\r\022S\n\021disconnect_reason\030\002 \001"
    "(\0162\034.ENetworkDisconnectionReason:\032NETWOR"
    "K_DISCONNECT_INVALID\022\031\n\021num_bad_interval"
    "s\030\003 \001(\r\022\025\n\rpeak_loss_pct\030\004 \001(\r\"\257\002\n\023CMsgG"
    "ameserverCrash\022\020\n\010match_id\030\001 \001(\004\022\020\n\010lobb"
    "y_id\030\002 \001(\006\022>\n\ngame_state\030\003 \001(\0162\017.DOTA_Ga"
    "meState:\031DOTA_GAMERULES_STATE_INIT\022\032\n\022se"
    "ntinel_save_time\030\004 \001(\007\022\026\n\016custom_game_id"
    "\030\013 \001(\006\022\027\n\017server_steam_id\030\005 \001(\006\022\035\n\025serve"
    "r_public_ip_addr\030\006 \001(\007\022\023\n\013server_port\030\007 "
    "\001(\r\022\026\n\016server_cluster\030\010 \001(\r\022\013\n\003pid\030\t \001(\r"
    "\022\016\n\006engine\030\n \001(\r\"\246\007\n\024CMsgConnectedPlayer"
    "s\0227\n\021connected_players\030\001 \003(\0132\034.CMsgConne"
    "ctedPlayers.Player\022:\n\024disconnected_playe"
    "rs\030\007 \003(\0132\034.CMsgConnectedPlayers.Player\022>"
    "\n\ngame_state\030\002 \001(\0162\017.DOTA_GameState:\031DOT"
    "A_GAMERULES_STATE_INIT\022\023\n\013tower_state\030\004 "
    "\001(\r\022\034\n\024first_blood_happened\030\006 \001(\010\022\036\n\026leg"
    "acy_mass_disconnect\030\t \001(\010\022;\n\027poor_networ"
    "k_conditions\030\n \001(\0132\032.CMsgPoorNetworkCond"
    "itions\022>\n\013send_reason\030\010 \001(\0162 .CMsgConnec"
    "tedPlayers.SendReason:\007INVALID\022\025\n\rradian"
    "t_kills\030\013 \001(\r\022\022\n\ndire_kills\030\014 \001(\r\022\026\n\016bar"
    "racks_state\030\r \001(\r\032\250\001\n\006Player\022\020\n\010steam_id"
    "\030\001 \001(\006\022\017\n\007hero_id\030\002 \001(\r\022&\n\014leaver_state\030"
    "\003 \001(\0132\020.CMsgLeaverState\022S\n\021disconnect_re"
    "ason\030\004 \001(\0162\034.ENetworkDisconnectionReason"
    ":\032NETWORK_DISCONNECT_INVALID\"\232\002\n\nSendRea"
    "son\022\013\n\007INVALID\020\000\022\r\n\tHEARTBEAT\020\001\022\016\n\nGAME_"
    "STATE\020\002\022\017\n\013FIRST_BLOOD\020\003\022\024\n\020PLAYER_CONNE"
    "CTED\020\004\022\017\n\013PLAYER_HERO\020\005\022$\n PLAYER_DISCON"
    "NECTED_CONSEQUENCES\020\006\022&\n\"PLAYER_DISCONNE"
    "CTED_NOCONSEQUENCES\020\007\022\017\n\013TOWER_STATE\020\t\022\025"
    "\n\021GAMESTATE_TIMEOUT\020\n\022\023\n\017MASS_DISCONNECT"
    "\020\013\022\022\n\016BARRACKS_STATE\020\014\022\t\n\005KILLS\020\r\"\334\005\n\022CM"
    "sgGameServerInfo\022\035\n\025server_public_ip_add"
    "r\030\001 \001(\007\022\036\n\026server_private_ip_addr\030\002 \001(\007\022"
    "\023\n\013server_port\030\003 \001(\r\022\026\n\016server_tv_port\030\004"
    " \001(\r\022\037\n\027assigned_server_tv_port\030\026 \001(\r\022!\n"
    "\031server_steamdatagram_port\030\025 \001(\r\022\022\n\nserv"
    "er_key\030\005 \001(\t\022\032\n\022server_hibernation\030\006 \001(\010"
    "\022@\n\013server_type\030\007 \001(\0162\036.CMsgGameServerIn"
    "fo.ServerType:\013UNSPECIFIED\022\025\n\rserver_reg"
    "ion\030\010 \001(\r\022\026\n\016server_loadavg\030\t \001(\002\022 \n\030ser"
    "ver_tv_broadcast_time\030\n \001(\002\022\030\n\020server_ga"
    "me_time\030\013 \001(\002\022\'\n\037server_relay_connected_"
    "steam_id\030\014 \001(\006\022\027\n\017relay_slots_max\030\r \001(\r\022"
    "\030\n\020relays_connected\030\016 \001(\005\022\037\n\027relay_clien"
    "ts_connected\030\017 \001(\005\022$\n\034relayed_game_serve"
    "r_steam_id\030\020 \001(\006\022\032\n\022parent_relay_count\030\021"
    " \001(\r\022\026\n\016tv_secret_code\030\022 \001(\006\022\026\n\016server_v"
    "ersion\030\023 \001(\r\022\026\n\016server_cluster\030\024 \001(\r\"2\n\n"
    "ServerType\022\017\n\013UNSPECIFIED\020\000\022\010\n\004GAME\020\001\022\t\n"
    "\005PROXY\020\002\"\266\002\n\022CMsgLeaverDetected\022\020\n\010steam"
    "_id\030\001 \001(\006\022<\n\rleaver_status\030\002 \001(\0162\023.DOTAL"
    "eaverStatus_t:\020DOTA_LEAVER_NONE\022&\n\014leave"
    "r_state\030\004 \001(\0132\020.CMsgLeaverState\022\026\n\016serve"
    "r_cluster\030\005 \001(\r\022S\n\021disconnect_reason\030\006 \001"
    "(\0162\034.ENetworkDisconnectionReason:\032NETWOR"
    "K_DISCONNECT_INVALID\022;\n\027poor_network_con"
    "ditions\030\007 \001(\0132\032.CMsgPoorNetworkCondition"
    "s\",\n\032CMsgLeaverDetectedResponse\022\016\n\006resul"
    "t\030\001 \001(\r\"\335\002\n\032CMsgDOTAFantasyPlayerStats\022\031"
    "\n\021player_account_id\030\001 \001(\r\022\020\n\010match_id\030\002 "
    "\001(\004\022\027\n\017match_completed\030\003 \001(\010\022\r\n\005level\030\004 "
    "\001(\r\022\r\n\005kills\030\005 \001(\r\022\016\n\006deaths\030\006 \001(\r\022\017\n\007as"
    "sists\030\007 \001(\r\022\021\n\tlast_hits\030\010 \001(\r\022\016\n\006denies"
    "\030\t \001(\r\022\013\n\003gpm\030\n \001(\002\022\014\n\004xppm\030\013 \001(\002\022\r\n\005stu"
    "ns\030\014 \001(\002\022\017\n\007healing\030\r \001(\002\022\023\n\013tower_kills"
    "\030\016 \001(\r\022\024\n\014roshan_kills\030\017 \001(\r\022\017\n\007team_id\030"
    "\020 \001(\r\022\021\n\tleague_id\030\021 \001(\r\022\r\n\005delay\030\022 \001(\r\""
    "\227\001\n\024CMsgDOTAFantasyMatch\022\020\n\010match_id\030\001 \001"
    "(\004\022\021\n\tleague_id\030\002 \001(\r\022\021\n\tseries_id\030\003 \001(\r"
    "\022\022\n\nstart_time\030\004 \001(\r\022\023\n\013series_type\030\005 \001("
    "\r\022\016\n\006team_1\030\006 \001(\r\022\016\n\006team_2\030\007 \001(\r\"|\n\033CMs"
    "gServerToGCRealtimeStats\0220\n\007delayed\030\001 \001("
    "\0132\037.CMsgDOTARealtimeGameStatsTerse\022+\n\007cu"
    "rrent\030\002 \001(\0132\032.CMsgDOTARealtimeGameStats\""
    "H\n$CMsgGCToServerRealtimeStatsStartStop\022"
    "\017\n\007delayed\030\001 \001(\010\022\017\n\007current\030\002 \001(\010\"\364\022\n\024CM"
    "sgGameMatchSignOut\022\026\n\010match_id\030\001 \001(\004B\004\200\246"
    "\035\001\022\020\n\010duration\030\002 \001(\r\022\025\n\rgood_guys_win\030\003 "
    "\001(\010\022\014\n\004date\030\004 \001(\007\022\023\n\013num_players\030\005 \003(\r\022*"
    "\n\005teams\030\006 \003(\0132\033.CMsgGameMatchSignOut.CTe"
    "am\022\024\n\014tower_status\030\010 \003(\r\022\027\n\017barracks_sta"
    "tus\030\t \003(\r\022\017\n\007cluster\030\n \001(\r\022\023\n\013server_add"
    "r\030\013 \001(\t\022\030\n\020first_blood_time\030\014 \001(\r\022\024\n\014gam"
    "e_balance\030\r \001(\002\022\023\n\013event_score\030\016 \001(\r\022*\n\n"
    "picks_bans\030\017 \003(\0132\026.CMatchHeroSelectEvent"
    "\0222\n\rfantasy_stats\030\020 \003(\0132\033.CMsgDOTAFantas"
    "yPlayerStats\022O\n player_strange_count_adj"
    "ustments\030\021 \003(\0132%.CMsgEconPlayerStrangeCo"
    "untAdjustment\022\033\n\023automatic_surrender\030\022 \001"
    "(\010\022\026\n\016server_version\030\023 \001(\r\022\036\n\026legacy_mas"
    "s_disconnect\030\025 \001(\010\022;\n\027poor_network_condi"
    "tions\030# \001(\0132\032.CMsgPoorNetworkConditions\022"
    "D\n\017additional_msgs\030\024 \003(\0132+.CMsgGameMatch"
    "SignOut.CAdditionalSignoutMsg\022G\n\022social_"
    "feed_events\030$ \003(\0132+.CMsgGameMatchSignOut"
    ".CSocialFeedMatchEvent\022\036\n\026average_networ"
    "th_delta\030\026 \001(\021\022\034\n\024networth_delta_min10\030\027"
    " \001(\021\022\034\n\024networth_delta_min20\030\030 \001(\021\022$\n\034ma"
    "ximum_losing_networth_lead\030\031 \001(\021\022 \n\030aver"
    "age_experience_delta\030\032 \001(\021\022\036\n\026experience"
    "_delta_min10\030\033 \001(\021\022\036\n\026experience_delta_m"
    "in20\030\034 \001(\021\022\037\n\027bonus_gold_winner_min10\030\035 "
    "\001(\021\022\037\n\027bonus_gold_winner_min20\030\036 \001(\021\022\037\n\027"
    "bonus_gold_winner_total\030\037 \001(\r\022\036\n\026bonus_g"
    "old_loser_min10\030  \001(\021\022\036\n\026bonus_gold_lose"
    "r_min20\030! \001(\021\022\036\n\026bonus_gold_loser_total\030"
    "\" \001(\r\022\?\n\020custom_game_data\030% \001(\0132%.CMsgGa"
    "meMatchSignOut.CCustomGameData\032\226\007\n\005CTeam"
    "\0224\n\007players\030\001 \003(\0132#.CMsgGameMatchSignOut"
    ".CTeam.CPlayer\032\326\006\n\007CPlayer\022\020\n\010steam_id\030\001"
    " \001(\006\022\017\n\007hero_id\030\003 \001(\r\022\r\n\005items\030\004 \003(\r\022\014\n\004"
    "gold\030\005 \001(\r\022\r\n\005kills\030\006 \001(\r\022\016\n\006deaths\030\007 \001("
    "\r\022\017\n\007assists\030\010 \001(\r\022\025\n\rleaver_status\030\t \001("
    "\r\022\021\n\tlast_hits\030\n \001(\r\022\016\n\006denies\030\013 \001(\r\022\024\n\014"
    "gold_per_min\030\014 \001(\r\022\025\n\rxp_per_minute\030\r \001("
    "\r\022\022\n\ngold_spent\030\016 \001(\r\022\r\n\005level\030\017 \001(\r\022\023\n\013"
    "hero_damage\030\020 \001(\r\022\024\n\014tower_damage\030\021 \001(\r\022"
    "\024\n\014hero_healing\030\022 \001(\r\022\026\n\016time_last_seen\030"
    "\023 \001(\r\022\035\n\025support_ability_value\030\024 \001(\r\022\020\n\010"
    "party_id\030\025 \001(\004\022\024\n\014scaled_kills\030\030 \001(\002\022\025\n\r"
    "scaled_deaths\030\031 \001(\002\022\026\n\016scaled_assists\030\032 "
    "\001(\002\022\031\n\021claimed_farm_gold\030\033 \001(\r\022\024\n\014suppor"
    "t_gold\030\034 \001(\r\022\026\n\016claimed_denies\030\035 \001(\r\022\026\n\016"
    "claimed_misses\030\036 \001(\r\022\016\n\006misses\030\037 \001(\r\0225\n\020"
    "ability_upgrades\030  \003(\0132\033.CMatchPlayerAbi"
    "lityUpgrade\022B\n\032additional_units_inventor"
    "y\030! \003(\0132\036.CMatchAdditionalUnitInventory\022"
    "\021\n\tnet_worth\030\" \001(\r\022M\n\020custom_game_data\030#"
    " \001(\01323.CMsgGameMatchSignOut.CTeam.CPlaye"
    "r.CCustomGameData\0324\n\017CCustomGameData\022\021\n\t"
    "dota_team\030\001 \001(\r\022\016\n\006winner\030\002 \001(\010\0325\n\025CAddi"
    "tionalSignoutMsg\022\n\n\002id\030\001 \001(\r\022\020\n\010contents"
    "\030\002 \001(\014\032z\n\025CSocialFeedMatchEvent\022\022\n\naccou"
    "nt_id\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\r\022\022\n\nevent_"
    "type\030\003 \001(\r\022\021\n\tgame_time\030\004 \001(\005\022\023\n\013replay_"
    "time\030\005 \001(\r\032,\n\017CCustomGameData\022\031\n\021publish"
    "_timestamp\030\001 \001(\r\"\207\001\n\024CMsgSignOutDraftInf"
    "o\022\"\n\032radiant_captain_account_id\030\001 \001(\r\022\037\n"
    "\027dire_captain_account_id\030\002 \001(\r\022*\n\npicks_"
    "bans\030\003 \003(\0132\026.CMatchHeroSelectEvent\"\272\002\n\022C"
    "MsgSignOutBotInfo\022\024\n\014allow_cheats\030\001 \001(\010\022"
    "B\n\016bot_difficulty\030\002 \001(\0162\022.DOTABotDifficu"
    "lty:\026BOT_DIFFICULTY_PASSIVE\022\025\n\rcreated_l"
    "obby\030\003 \001(\010\022H\n\025bot_slot_difficulties\030\004 \003("
    "\0132).CMsgSignOutBotInfo.CMsgBotSlotDiffic"
    "ulty\032i\n\025CMsgBotSlotDifficulty\022\014\n\004slot\030\001 "
    "\001(\r\022B\n\016bot_difficulty\030\002 \001(\0162\022.DOTABotDif"
    "ficulty:\026BOT_DIFFICULTY_PASSIVE\"\341\003\n\026CMsg"
    "SignOutPlayerStats\022\022\n\naccount_id\030\001 \001(\005\022\020"
    "\n\010match_id\030\002 \001(\004\022\014\n\004rank\030\003 \001(\r\022\017\n\007hero_i"
    "d\030\004 \001(\r\022\020\n\010rampages\030\005 \001(\r\022\024\n\014triple_kill"
    "s\030\006 \001(\r\022\033\n\023first_blood_claimed\030\007 \001(\r\022\031\n\021"
    "first_blood_given\030\010 \001(\r\022\027\n\017couriers_kill"
    "ed\030\t \001(\r\022\030\n\020aegises_snatched\030\n \001(\r\022\025\n\rch"
    "eeses_eaten\030\013 \001(\r\022\026\n\016creeps_stacked\030\014 \001("
    "\r\022\023\n\013fight_score\030\r \001(\002\022\022\n\nfarm_score\030\016 \001"
    "(\002\022\025\n\rsupport_score\030\017 \001(\002\022\022\n\npush_score\030"
    "\020 \001(\002\022\r\n\005kills\030\021 \001(\r\022\016\n\006deaths\030\022 \001(\r\022\017\n\007"
    "assists\030\023 \001(\r\022\021\n\tlast_hits\030\024 \001(\r\022\016\n\006deni"
    "es\030\025 \001(\r\022\013\n\003gpm\030\026 \001(\002\022\014\n\004xppm\030\027 \001(\002\"\324\003\n\037"
    "CMsgSignOutCommunicationSummary\022E\n\007playe"
    "rs\030\001 \003(\01324.CMsgSignOutCommunicationSumma"
    "ry.PlayerCommunication\032\351\002\n\023PlayerCommuni"
    "cation\022\022\n\naccount_id\030\001 \001(\r\022\r\n\005pings\030\002 \001("
    "\r\022\036\n\026max_pings_per_interval\030\003 \001(\r\022\026\n\016tea"
    "mmate_pings\030\004 \001(\r\022\'\n\037max_teammate_pings_"
    "per_interval\030\005 \001(\r\022\032\n\022team_chat_messages"
    "\030\006 \001(\r\022\031\n\021all_chat_messages\030\007 \001(\r\022\033\n\023cha"
    "t_wheel_messages\030\010 \001(\r\022\016\n\006pauses\030\t \001(\r\022\020"
    "\n\010unpauses\030\n \001(\r\022\023\n\013lines_drawn\030\013 \001(\r\022\032\n"
    "\022voice_chat_seconds\030\014 \001(\r\022\022\n\nchat_mutes\030"
    "\r \001(\r\022\023\n\013voice_mutes\030\016 \001(\r\"\303\002\n\034CMsgGameM"
    "atchSignoutResponse\022\020\n\010match_id\030\001 \001(\004\022\023\n"
    "\013replay_salt\030\002 \001(\007\0227\n\024timed_reward_detai"
    "ls\030\003 \003(\0132\031.CLobbyTimedRewardDetails\022,\n\021x"
    "p_reward_details\030\004 \003(\0132\021.CDOTALobbyMembe"
    "r\022\020\n\010leagueid\030\005 \001(\r\022L\n\017additional_msgs\030\006"
    " \003(\01323.CMsgGameMatchSignoutResponse.CAdd"
    "itionalSignoutMsg\0325\n\025CAdditionalSignoutM"
    "sg\022\n\n\002id\030\001 \001(\r\022\020\n\010contents\030\002 \001(\014\"\205\001\n%CMs"
    "gGameMatchSignOutPermissionRequest\022\026\n\016se"
    "rver_version\030\001 \001(\r\022\025\n\rlocal_attempt\030\002 \001("
    "\r\022\025\n\rtotal_attempt\030\003 \001(\r\022\026\n\016seconds_wait"
    "ed\030\004 \001(\r\"\213\001\n&CMsgGameMatchSignOutPermiss"
    "ionResponse\022!\n\022permission_granted\030\001 \001(\010:"
    "\005false\022\036\n\017abandon_signout\030\002 \001(\010:\005false\022\036"
    "\n\023retry_delay_seconds\030\003 \001(\r:\0010\"\243\001\n\017CMsgG"
    "ameChatLog\022\020\n\010match_id\030\001 \001(\004\022)\n\005lines\030\002 "
    "\003(\0132\032.CMsgGameChatLog.CChatLine\032S\n\tCChat"
    "Line\022\022\n\naccount_id\030\001 \001(\r\022\021\n\tteam_only\030\002 "
    "\001(\r\022\014\n\004text\030\003 \001(\t\022\021\n\tgame_time\030\004 \001(\r\"\264\n\n"
    "\034CMsgDOTALiveScoreboardUpdate\022\025\n\rtournam"
    "ent_id\030\001 \001(\r\022\032\n\022tournament_game_id\030\002 \001(\r"
    "\022\020\n\010duration\030\003 \001(\002\022\022\n\nhltv_delay\030\004 \001(\005\0225"
    "\n\tteam_good\030\005 \001(\0132\".CMsgDOTALiveScoreboa"
    "rdUpdate.Team\0224\n\010team_bad\030\006 \001(\0132\".CMsgDO"
    "TALiveScoreboardUpdate.Team\022\034\n\024roshan_re"
    "spawn_timer\030\007 \001(\r\022\021\n\tleague_id\030\010 \001(\r\022\020\n\010"
    "match_id\030\t \001(\004\032\212\010\n\004Team\022:\n\007players\030\001 \003(\013"
    "2).CMsgDOTALiveScoreboardUpdate.Team.Pla"
    "yer\022\r\n\005score\030\002 \001(\r\022\023\n\013tower_state\030\003 \001(\r\022"
    "\026\n\016barracks_state\030\004 \001(\r\022\022\n\nhero_picks\030\005 "
    "\003(\r\022\021\n\thero_bans\030\006 \003(\r\032\342\006\n\006Player\022\023\n\013pla"
    "yer_slot\030\001 \001(\r\022\023\n\013player_name\030\002 \001(\t\022\021\n\th"
    "ero_name\030\003 \001(\t\022\017\n\007hero_id\030\004 \001(\r\022\r\n\005kills"
    "\030\005 \001(\r\022\016\n\006deaths\030\006 \001(\r\022\017\n\007assists\030\007 \001(\r\022"
    "\021\n\tlast_hits\030\010 \001(\r\022\016\n\006denies\030\t \001(\r\022\014\n\004go"
    "ld\030\n \001(\r\022\r\n\005level\030\013 \001(\r\022\024\n\014gold_per_min\030"
    "\014 \001(\002\022\022\n\nxp_per_min\030\r \001(\002\022s\n\016ultimate_st"
    "ate\030\016 \001(\0162;.CMsgDOTALiveScoreboardUpdate"
    ".Team.Player.DOTAUltimateState:\036k_EDOTAU"
    "ltimateStateNotLearned\022\031\n\021ultimate_coold"
    "own\030\017 \001(\002\022\r\n\005item0\030\020 \001(\r\022\r\n\005item1\030\021 \001(\r\022"
    "\r\n\005item2\030\022 \001(\r\022\r\n\005item3\030\023 \001(\r\022\r\n\005item4\030\024"
    " \001(\r\022\r\n\005item5\030\025 \001(\r\022\025\n\rrespawn_timer\030\026 \001"
    "(\r\022\022\n\naccount_id\030\027 \001(\r\022\022\n\nposition_x\030\030 \001"
    "(\002\022\022\n\nposition_y\030\031 \001(\002\022\021\n\tnet_worth\030\032 \001("
    "\r\022H\n\tabilities\030\033 \003(\01325.CMsgDOTALiveScore"
    "boardUpdate.Team.Player.HeroAbility\0328\n\013H"
    "eroAbility\022\022\n\nability_id\030\001 \001(\r\022\025\n\rabilit"
    "y_level\030\002 \001(\r\"\233\001\n\021DOTAUltimateState\022\"\n\036k"
    "_EDOTAUltimateStateNotLearned\020\000\022 \n\034k_EDO"
    "TAUltimateStateCooldown\020\001\022!\n\035k_EDOTAUlti"
    "mateStateNeedsMana\020\002\022\035\n\031k_EDOTAUltimateS"
    "tateReady\020\003\"E\n\036CMsgDOTARequestPlayerReso"
    "urces\022\020\n\010steam_id\030\001 \001(\006\022\021\n\tplayer_id\030\002 \001"
    "(\r\"\250\001\n&CMsgDOTARequestPlayerResourcesRes"
    "ponse\022\020\n\010steam_id\030\001 \001(\006\022\014\n\004rank\030\002 \001(\r\022\021\n"
    "\tplayer_id\030\003 \001(\r\022\031\n\021prevent_text_chat\030\004 "
    "\001(\010\022\032\n\022prevent_voice_chat\030\005 \001(\010\022\024\n\014low_p"
    "riority\030\006 \001(\010\"V\n#CMsgDOTARequestBatchPla"
    "yerResources\022\027\n\013account_ids\030\001 \003(\rB\002\020\001\022\026\n"
    "\nrank_types\030\004 \003(\rB\002\020\001\"\206\002\n+CMsgDOTAReques"
    "tBatchPlayerResourcesResponse\022D\n\007results"
    "\030\006 \003(\01323.CMsgDOTARequestBatchPlayerResou"
    "rcesResponse.Result\032\220\001\n\006Result\022\022\n\naccoun"
    "t_id\030\001 \001(\r\022\031\n\021prevent_text_chat\030\002 \001(\010\022\032\n"
    "\022prevent_voice_chat\030\003 \001(\010\022\014\n\004rank\030\004 \001(\r\022"
    "\027\n\017rank_calibrated\030\005 \001(\010\022\024\n\014low_priority"
    "\030\006 \001(\010\"R\n\035CMsgDOTAPlayerFailedToConnect\022"
    "\026\n\016failed_loaders\030\001 \003(\006\022\031\n\021abandoned_loa"
    "ders\030\002 \003(\006\"\333\001\n\024CMsgGCToRelayConnect\022\035\n\025s"
    "ource_tv_public_addr\030\001 \001(\r\022\036\n\026source_tv_"
    "private_addr\030\002 \001(\r\022\026\n\016source_tv_port\030\003 \001"
    "(\r\022\034\n\024game_server_steam_id\030\004 \001(\004\022\024\n\014pare"
    "nt_count\030\005 \001(\r\022\035\n\025tv_unique_secret_code\030"
    "\006 \001(\006\022\031\n\021source_tv_steamid\030\007 \001(\006\"8\n\037CMsg"
    "GCGCToLANServerRelayConnect\022\025\n\rrelay_ste"
    "amid\030\001 \001(\006\"\036\n\034CMsgGCToRelayConnectRespon"
    "se\",\n\026CMsgGCBanStatusRequest\022\022\n\naccount_"
    "id\030\001 \001(\r\"t\n\027CMsgGCBanStatusResponse\022\016\n\006r"
    "esult\030\001 \001(\r\022\024\n\014low_priority\030\002 \001(\010\022\030\n\020tex"
    "t_chat_banned\030\003 \001(\010\022\031\n\021voice_chat_banned"
    "\030\004 \001(\010\"\336\002\n\027CMsgTournamentItemEvent\022\031\n\021ki"
    "ller_account_id\030\001 \001(\007\022\031\n\021victim_account_"
    "id\030\002 \001(\007\022:\n\nevent_type\030\003 \001(\0162\026.DOTA_Tour"
    "namentEvents:\016TE_FIRST_BLOOD\022\020\n\010tv_delay"
    "\030\004 \001(\005\022\021\n\tdota_time\030\005 \001(\005\022\023\n\013replay_time"
    "\030\006 \001(\002\022\021\n\tloot_list\030\007 \001(\t\022\022\n\nevent_team\030"
    "\010 \001(\r\022\030\n\020multi_kill_count\030\t \001(\r\022\024\n\014winne"
    "r_score\030\n \001(\r\022\023\n\013loser_score\030\013 \001(\r\022+\n\014he"
    "ro_statues\030\014 \003(\0132\025.CProtoItemHeroStatue\""
    "v\n\037CMsgTournamentItemEventResponse\022:\n\nev"
    "ent_type\030\001 \001(\0162\026.DOTA_TournamentEvents:\016"
    "TE_FIRST_BLOOD\022\027\n\017viewers_granted\030\006 \001(\r\""
    "#\n\017CMsgTeamFanfare\022\020\n\010match_id\030\001 \001(\004\"L\n\027"
    "CMsgResponseTeamFanfare\022\030\n\020fanfare_goodg"
    "uys\030\001 \001(\r\022\027\n\017fanfare_badguys\030\002 \001(\r\"u\n\034CM"
    "sgGameServerUploadSaveGame\022\021\n\tgame_time\030"
    "\001 \001(\r\022\026\n\016save_game_data\030\002 \001(\014\022\020\n\010lobby_i"
    "d\030\003 \001(\004\022\030\n\020player_steam_ids\030\004 \003(\004\"\266\001\n\034CM"
    "sgGameServerSaveGameResult\022D\n\006result\030\001 \001"
    "(\0162$.CMsgGameServerSaveGameResult.Result"
    ":\016SaveSuccessful\"P\n\006Result\022\022\n\016SaveSucces"
    "sful\020\000\022\023\n\017SessionNotFound\020\001\022\021\n\rDatabaseE"
    "rror\020\002\022\n\n\006TooBig\020\003\",\n\031CMsgGameServerGetL"
    "oadGame\022\017\n\007save_id\030\001 \001(\r\"9\n\037CMsgGameServ"
    "erGetLoadGameResult\022\026\n\016save_game_data\030\001 "
    "\001(\014\"U\n!CMsgDOTAGenerateDiretidePrizeList"
    "\022\022\n\nprize_list\030\001 \001(\r\022\034\n\024highest_roshan_l"
    "evel\030\002 \001(\r\"e\n)CMsgDOTAGenerateDiretidePr"
    "izeListResponse\022\021\n\titem_defs\030\001 \003(\r\022\021\n\tst"
    "eam_ids\030\002 \003(\006\022\022\n\nprize_list\030\003 \001(\r\"@\n\034CMs"
    "gDOTARewardDiretidePrizes\022\014\n\004team\030\001 \001(\r\022"
    "\022\n\nprize_list\030\002 \001(\r\"<\n&CMsgDOTADiretideP"
    "rizesRewardedResponse\022\022\n\nprize_list\030\001 \001("
    "\r\"\336\001\n\030CMsgDOTAAwardEventPoints\022;\n\014award_"
    "points\030\001 \003(\0132%.CMsgDOTAAwardEventPoints."
    "AwardPoints\022\020\n\010match_id\030\002 \001(\004\022\020\n\010event_i"
    "d\030\004 \001(\r\032a\n\013AwardPoints\022\022\n\naccount_id\030\001 \001"
    "(\r\022\016\n\006points\030\002 \001(\005\022\026\n\016premium_points\030\003 \001"
    "(\005\022\026\n\016trade_ban_time\030\005 \001(\r\"\366\001\n)CMsgServe"
    "rToGCSignoutAwardAdditionalDrops\022I\n\005drop"
    "s\030\001 \003(\0132:.CMsgServerToGCSignoutAwardAddi"
    "tionalDrops.AdditionalDrops\022\020\n\010match_id\030"
    "\002 \001(\004\032l\n\017AdditionalDrops\022\021\n\tloot_list\030\001 "
    "\001(\t\022\032\n\022player_account_ids\030\002 \003(\r\022\020\n\010no_tr"
    "ade\030\003 \001(\010\022\030\n\020randomize_reward\030\004 \001(\010\"\254\001\n\032"
    "CMsgDOTAUpdateTI4HeroQuest\0223\n\007players\030\001 "
    "\003(\0132\".CMsgDOTAUpdateTI4HeroQuest.Player\022"
    "\030\n\020match_start_time\030\002 \001(\007\022\020\n\010match_id\030\003 "
    "\001(\004\032-\n\006Player\022\022\n\naccount_id\030\001 \001(\r\022\017\n\007her"
    "o_id\030\002 \001(\r\"\250\001\n\034CMsgDOTAFrostivusTimeElap"
    "sed\022\017\n\007seconds\030\001 \001(\r\0221\n\005users\030\002 \003(\0132\".CM"
    "sgDOTAFrostivusTimeElapsed.User\022\020\n\010match"
    "_id\030\003 \001(\004\0322\n\004User\022\022\n\naccount_id\030\001 \001(\r\022\026\n"
    "\016time_elapsed_s\030\002 \001(\r\"E\n\031CMsgGCToServerP"
    "ingRequest\022\022\n\nrequest_id\030\001 \001(\006\022\024\n\014reques"
    "t_time\030\002 \001(\004\"W\n\032CMsgGCToServerPingRespon"
    "se\022\022\n\nrequest_id\030\001 \001(\006\022\024\n\014request_time\030\002"
    " \001(\004\022\017\n\007cluster\030\003 \001(\r\"7\n\034CMsgGCToServerC"
    "onsoleCommand\022\027\n\017console_command\030\001 \001(\t\"@"
    "\n\030CMsgServerGetEventPoints\022\020\n\010event_id\030\001"
    " \001(\r\022\022\n\naccount_id\030\002 \003(\r\"\261\001\n CMsgServerG"
    "etEventPointsResponse\022\020\n\010event_id\030\001 \001(\r\022"
    "8\n\006points\030\002 \003(\0132(.CMsgServerGetEventPoin"
    "tsResponse.Points\032A\n\006Points\022\022\n\naccount_i"
    "d\030\001 \001(\r\022\024\n\014points_total\030\002 \001(\r\022\r\n\005owned\030\004"
    " \001(\010\"\343\001\n\037CMsgServerGrantSurveyPermission"
    "\0228\n\007surveys\030\001 \003(\0132\'.CMsgServerGrantSurve"
    "yPermission.Survey\032\205\001\n\006Survey\022\022\n\naccount"
    "_id\030\001 \001(\r\022\023\n\013question_id\030\002 \001(\r\022\023\n\013expire"
    "_time\030\003 \001(\r\022\022\n\nsurvey_key\030\004 \001(\004\022\022\n\nextra"
    "_data\030\005 \001(\004\022\025\n\rextra_data_32\030\006 \001(\004\"9\n\'CM"
    "sgServerGrantSurveyPermissionResponse\022\016\n"
    "\006result\030\001 \001(\r\"\260\002\n\"CMsgServerToGCMatchCon"
    "nectionStats\022\020\n\010match_id\030\001 \001(\004\022\021\n\tregion"
    "_id\030\002 \001(\r\022\021\n\tleague_id\030\003 \001(\r\022;\n\007players\030"
    "\004 \003(\0132*.CMsgServerToGCMatchConnectionSta"
    "ts.Player\022\022\n\ncluster_id\030\005 \001(\r\032\200\001\n\006Player"
    "\022\022\n\naccount_id\030\001 \001(\r\022\n\n\002ip\030\002 \001(\007\022\023\n\013avg_"
    "ping_ms\030\003 \001(\r\022\023\n\013packet_loss\030\005 \001(\002\022\026\n\016pi"
    "ng_deviation\030\006 \001(\002\022\024\n\014full_resends\030\007 \001(\r"
    "\";\n CMsgServerGCUpdateSpectatorCount\022\027\n\017"
    "spectator_count\030\001 \001(\r\"\374\001\n\024CSerializedCom"
    "batLog\022\017\n\007version\030\001 \001(\r\0224\n\ndictionary\030\002 "
    "\001(\0132 .CSerializedCombatLog.Dictionary\022(\n"
    "\007entries\030\003 \003(\0132\027.CMsgDOTACombatLogEntry\032"
    "s\n\nDictionary\022<\n\007strings\030\001 \003(\0132+.CSerial"
    "izedCombatLog.Dictionary.DictString\032\'\n\nD"
    "ictString\022\n\n\002id\030\001 \002(\r\022\r\n\005value\030\002 \002(\t\"8\n!"
    "CMsgServerToGCGetAdditionalEquips\022\023\n\013acc"
    "ount_ids\030\001 \003(\r\"\275\001\n)CMsgServerToGCGetAddi"
    "tionalEquipsResponse\022F\n\006equips\030\001 \003(\01326.C"
    "MsgServerToGCGetAdditionalEquipsResponse"
    ".CUserEquips\032H\n\013CUserEquips\022\022\n\naccount_i"
    "d\030\001 \001(\r\022%\n\006equips\030\002 \003(\0132\025.CAdditionalEqu"
    "ipSlot\"3\n\034CMsgServerToGCGetProfileCard\022\023"
    "\n\013account_ids\030\001 \003(\r\"K\n$CMsgServerToGCGet"
    "ProfileCardResponse\022#\n\005cards\030\001 \003(\0132\024.CMs"
    "gDOTAProfileCard\"\236\001\n CMsgServerToGCVicto"
    "ryPredictions\0229\n\007records\030\001 \003(\0132(.CMsgSer"
    "verToGCVictoryPredictions.Record\032\?\n\006Reco"
    "rd\022\022\n\naccount_id\030\001 \001(\r\022\017\n\007item_id\030\002 \001(\004\022"
    "\020\n\010item_ids\030\005 \003(\004\"\263\001\n\026CMsgSuspiciousActi"
    "vity\022\022\n\naccount_id\030\001 \001(\r\022S\n\010activity\030\002 \001"
    "(\0162\024.ESuspiciousActivity:+k_ESuspiciousA"
    "ctivity_VAC_MultipleInstances\022\020\n\010intdata"
    "1\030\003 \001(\021\022\020\n\010intdata2\030\004 \001(\021\022\014\n\004time\030\005 \001(\r\""
    "\035\n\033CMsgServerToGCRequestStatus\"8\n$CMsgSe"
    "rverToGCRequestStatus_Response\022\020\n\010respon"
    "se\030\001 \001(\r\"\352\001\n\037CMsgSignOutAssassinMiniGame"
    "Info\022\027\n\017winning_players\030\001 \003(\006\022\026\n\016losing_"
    "players\030\002 \003(\006\022\025\n\rarcana_owners\030\003 \003(\006\022\024\n\014"
    "assassin_won\030\004 \001(\010\022\026\n\016target_hero_id\030\005 \001"
    "(\r\022\032\n\022contract_completed\030\006 \001(\010\022\036\n\026contra"
    "ct_complete_time\030\007 \001(\002\022\025\n\rpa_is_radiant\030"
    "\010 \001(\010\"I\n CMsgServerToGCGetIngameEventDat"
    "a\022%\n\005event\030\001 \001(\0162\007.EEvent:\rEVENT_ID_NONE"
    "\"@\n%CMsgGCToServerIngameEventDataOracleP"
    "A\022\027\n\017target_hero_ids\030\001 \003(\r\"\305\001\n\033CMsgServe"
    "rToGCKillSummaries\022\026\n\016ingameevent_id\030\001 \001"
    "(\r\022;\n\tsummaries\030\002 \003(\0132(.CMsgServerToGCKi"
    "llSummaries.KillSummary\032Q\n\013KillSummary\022\026"
    "\n\016killer_hero_id\030\001 \001(\r\022\026\n\016victim_hero_id"
    "\030\002 \001(\r\022\022\n\nkill_count\030\003 \001(\r\"\226\003\n\036CMsgGCToS"
    "erverPredictionResult\022\022\n\naccount_id\030\001 \001("
    "\r\022\020\n\010match_id\030\002 \001(\004\022\017\n\007correct\030\003 \001(\010\022\?\n\013"
    "predictions\030\004 \003(\0132*.CMsgGCToServerPredic"
    "tionResult.Prediction\032\373\001\n\nPrediction\022\020\n\010"
    "item_def\030\001 \001(\r\022\023\n\013num_correct\030\002 \001(\r\022\021\n\tn"
    "um_fails\030\003 \001(\r\022Y\n\006result\030\004 \001(\01622.CMsgGCT"
    "oServerPredictionResult.Prediction.EResu"
    "lt:\025k_eResult_ItemGranted\022\031\n\021granted_ite"
    "m_defs\030\006 \003(\r\"=\n\007EResult\022\031\n\025k_eResult_Ite"
    "mGranted\020\001\022\027\n\023k_eResult_Destroyed\020\002\"E\n\036C"
    "MsgServerToGCLockCharmTrading\022\022\n\naccount"
    "_id\030\001 \001(\r\022\017\n\007item_id\030\002 \001(\004\"\375\001\n\036CMsgDOTAC"
    "NY2015EventPointUsage\022F\n\022winning_team_us"
    "age\030\001 \001(\0132*.CMsgDOTACNY2015EventPointUsa"
    "ge.PointUsage\022E\n\021losing_team_usage\030\002 \001(\013"
    "2*.CMsgDOTACNY2015EventPointUsage.PointU"
    "sage\032L\n\nPointUsage\022\014\n\004path\030\001 \003(\r\022\022\n\npath"
    "_level\030\002 \003(\r\022\034\n\024ability_points_spent\030\003 \003"
    "(\r\"\373\001\n CMsgSignOutUpdatePlayerChallenge\022"
    "\022\n\naccount_id\030\001 \001(\r\022>\n\tcompleted\030\002 \003(\0132+"
    ".CMsgSignOutUpdatePlayerChallenge.Challe"
    "nge\022=\n\010rerolled\030\003 \003(\0132+.CMsgSignOutUpdat"
    "ePlayerChallenge.Challenge\022\020\n\010match_id\030\004"
    " \001(\004\0322\n\tChallenge\022\020\n\010event_id\030\001 \001(\r\022\023\n\013s"
    "equence_id\030\003 \001(\r\"s\n#CMsgServerToGCReroll"
    "PlayerChallenge\022\022\n\naccount_id\030\001 \001(\r\0228\n\nr"
    "eroll_msg\030\002 \001(\0132$.CMsgClientToGCRerollPl"
    "ayerChallenge\"\340\001\n\035CMsgServerToGCHoldEven"
    "tPoints\0229\n\005holds\030\001 \003(\0132*.CMsgServerToGCH"
    "oldEventPoints.HoldRequest\022\020\n\010event_id\030\002"
    " \001(\r\022\020\n\010hold_key\030\003 \001(\004\022\022\n\nhold_until\030\004 \001"
    "(\r\032L\n\013HoldRequest\022\022\n\naccount_id\030\001 \001(\r\022\023\n"
    "\013points_held\030\002 \001(\r\022\024\n\014premium_held\030\003 \001(\r"
    "\"\\\n!CMsgSignOutReleaseEventPointHolds\022\023\n"
    "\013account_ids\030\001 \003(\r\022\020\n\010event_id\030\002 \001(\r\022\020\n\010"
    "hold_key\030\003 \001(\004\"g\n#CMsgGCToServerUpdateBr"
    "oadcastCheers\022\022\n\ntime_stamp\030\001 \001(\r\022\025\n\rtea"
    "m_1_cheers\030\002 \001(\r\022\025\n\rteam_2_cheers\030\003 \001(\r\""
    "\234\001\n\025CMsgSignOutWagerStats\022.\n\007players\030\001 \003"
    "(\0132\035.CMsgSignOutWagerStats.Player\022\020\n\010eve"
    "nt_id\030\002 \001(\r\032A\n\006Player\022\022\n\naccount_id\030\001 \001("
    "\r\022\020\n\010winnings\030\002 \001(\021\022\021\n\tmax_wager\030\003 \001(\r*\306"
    "\001\n\032EPoorNetworkConditionsType\022!\n\035k_EPoor"
    "NetworkConditions_None\020\000\022$\n k_EPoorNetwo"
    "rkConditions_Unknown\020\001\022+\n\'k_EPoorNetwork"
    "Conditions_MassDisconnect\020\002\0222\n.k_EPoorNe"
    "tworkConditions_ExcessBadQosIntervals\020\003*"
    "\300\002\n\021EAbilityAbuseType\022\034\n\030k_EAbilityAbuse"
    "Type_None\020\000\022#\n\037k_EAbilityAbuseType_Io_Re"
    "locate\020\001\022*\n&k_EAbilityAbuseType_Chen_Tes"
    "t_Of_Faith\020\002\022&\n\"k_EAbilityAbuseType_Bane"
    "_Nightmare\020\003\022-\n)k_EAbilityAbuseType_Bloo"
    "dseeker_Bloodrage\020\004\0224\n0k_EAbilityAbuseTy"
    "pe_Outworld_Astral_Imprisonment\020\005\022/\n+k_E"
    "AbilityAbuseType_Shadow_Demon_Disruption"
    "\020\006*\371\003\n\027EIntentionalFeedingType\022\"\n\036k_EInt"
    "entionalFeedingType_None\020\000\022-\n)k_EIntenti"
    "onalFeedingType_ExcessiveDeaths\020\001\0226\n2k_E"
    "IntentionalFeedingType_MultipleCourierPu"
    "rchases\020\002\0223\n/k_EIntentionalFeedingType_M"
    "ultipleCourierDeaths\020\004\022)\n%k_EIntentional"
    "FeedingType_LowActivity\020\010\022\'\n#k_EIntentio"
    "nalFeedingType_LowDamage\020\020\022-\n)k_EIntenti"
    "onalFeedingType_HighUnspentGold\020 \0222\n.k_E"
    "IntentionalFeedingType_SoldTooMuchItemVa"
    "lue\020@\0222\n-k_EIntentionalFeedingType_TooMa"
    "nyDroppedItems\020\200\001\0223\n.k_EIntentionalFeedi"
    "ngType_ExcessiveTowerDamage\020\200\002*\243\001\n\023ESusp"
    "iciousActivity\022/\n+k_ESuspiciousActivity_"
    "VAC_MultipleInstances\020\001\022,\n(k_ESuspicious"
    "Activity_IntentionalFeeding\020d\022-\n)k_ESusp"
    "iciousActivity_SuspectedBotFarming\020e*\200\003\n"
    "\024ESuspiciousBuildType\022\037\n\033k_ESuspiciousBu"
    "ildType_None\020\000\022&\n\"k_ESuspiciousBuildType"
    "_NoGoldSpent\020\001\022\"\n\036k_ESuspiciousBuildType"
    "_NoItems\020\002\022-\n)k_ESuspiciousBuildType_NoS"
    "ignificantItems\020\003\022\'\n#k_ESuspiciousBuildT"
    "ype_TooManyBoots\020\004\022\037\n\033k_ESuspiciousBuild"
    "Type_Bot1\020e\022\037\n\033k_ESuspiciousBuildType_Bo"
    "t2\020f\022\037\n\033k_ESuspiciousBuildType_Bot3\020g\022\037\n"
    "\033k_ESuspiciousBuildType_Bot4\020h\022\037\n\033k_ESus"
    "piciousBuildType_Bot5\020iB\005H\001\200\001\000", 18910);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_gcmessages_server.proto", &protobuf_RegisterTypes);
  CMsgSpawnLootGreevil::default_instance_ = new CMsgSpawnLootGreevil();
  CMsgDismissLootGreevil::default_instance_ = new CMsgDismissLootGreevil();
  CMsgDismissLootGreevilResponse::default_instance_ = new CMsgDismissLootGreevilResponse();
  CMsgPoorNetworkConditions::default_instance_ = new CMsgPoorNetworkConditions();
  CMsgPoorNetworkConditions_Player::default_instance_ = new CMsgPoorNetworkConditions_Player();
  CMsgGameserverCrash::default_instance_ = new CMsgGameserverCrash();
  CMsgConnectedPlayers::default_instance_ = new CMsgConnectedPlayers();
  CMsgConnectedPlayers_Player::default_instance_ = new CMsgConnectedPlayers_Player();
  CMsgGameServerInfo::default_instance_ = new CMsgGameServerInfo();
  CMsgLeaverDetected::default_instance_ = new CMsgLeaverDetected();
  CMsgLeaverDetectedResponse::default_instance_ = new CMsgLeaverDetectedResponse();
  CMsgDOTAFantasyPlayerStats::default_instance_ = new CMsgDOTAFantasyPlayerStats();
  CMsgDOTAFantasyMatch::default_instance_ = new CMsgDOTAFantasyMatch();
  CMsgServerToGCRealtimeStats::default_instance_ = new CMsgServerToGCRealtimeStats();
  CMsgGCToServerRealtimeStatsStartStop::default_instance_ = new CMsgGCToServerRealtimeStatsStartStop();
  CMsgGameMatchSignOut::default_instance_ = new CMsgGameMatchSignOut();
  CMsgGameMatchSignOut_CTeam::default_instance_ = new CMsgGameMatchSignOut_CTeam();
  CMsgGameMatchSignOut_CTeam_CPlayer::default_instance_ = new CMsgGameMatchSignOut_CTeam_CPlayer();
  CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::default_instance_ = new CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData();
  CMsgGameMatchSignOut_CAdditionalSignoutMsg::default_instance_ = new CMsgGameMatchSignOut_CAdditionalSignoutMsg();
  CMsgGameMatchSignOut_CSocialFeedMatchEvent::default_instance_ = new CMsgGameMatchSignOut_CSocialFeedMatchEvent();
  CMsgGameMatchSignOut_CCustomGameData::default_instance_ = new CMsgGameMatchSignOut_CCustomGameData();
  CMsgSignOutDraftInfo::default_instance_ = new CMsgSignOutDraftInfo();
  CMsgSignOutBotInfo::default_instance_ = new CMsgSignOutBotInfo();
  CMsgSignOutBotInfo_CMsgBotSlotDifficulty::default_instance_ = new CMsgSignOutBotInfo_CMsgBotSlotDifficulty();
  CMsgSignOutPlayerStats::default_instance_ = new CMsgSignOutPlayerStats();
  CMsgSignOutCommunicationSummary::default_instance_ = new CMsgSignOutCommunicationSummary();
  CMsgSignOutCommunicationSummary_PlayerCommunication::default_instance_ = new CMsgSignOutCommunicationSummary_PlayerCommunication();
  CMsgGameMatchSignoutResponse::default_instance_ = new CMsgGameMatchSignoutResponse();
  CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::default_instance_ = new CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg();
  CMsgGameMatchSignOutPermissionRequest::default_instance_ = new CMsgGameMatchSignOutPermissionRequest();
  CMsgGameMatchSignOutPermissionResponse::default_instance_ = new CMsgGameMatchSignOutPermissionResponse();
  CMsgGameChatLog::default_instance_ = new CMsgGameChatLog();
  CMsgGameChatLog_CChatLine::default_instance_ = new CMsgGameChatLog_CChatLine();
  CMsgDOTALiveScoreboardUpdate::default_instance_ = new CMsgDOTALiveScoreboardUpdate();
  CMsgDOTALiveScoreboardUpdate_Team::default_instance_ = new CMsgDOTALiveScoreboardUpdate_Team();
  CMsgDOTALiveScoreboardUpdate_Team_Player::default_instance_ = new CMsgDOTALiveScoreboardUpdate_Team_Player();
  CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::default_instance_ = new CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility();
  CMsgDOTARequestPlayerResources::default_instance_ = new CMsgDOTARequestPlayerResources();
  CMsgDOTARequestPlayerResourcesResponse::default_instance_ = new CMsgDOTARequestPlayerResourcesResponse();
  CMsgDOTARequestBatchPlayerResources::default_instance_ = new CMsgDOTARequestBatchPlayerResources();
  CMsgDOTARequestBatchPlayerResourcesResponse::default_instance_ = new CMsgDOTARequestBatchPlayerResourcesResponse();
  CMsgDOTARequestBatchPlayerResourcesResponse_Result::default_instance_ = new CMsgDOTARequestBatchPlayerResourcesResponse_Result();
  CMsgDOTAPlayerFailedToConnect::default_instance_ = new CMsgDOTAPlayerFailedToConnect();
  CMsgGCToRelayConnect::default_instance_ = new CMsgGCToRelayConnect();
  CMsgGCGCToLANServerRelayConnect::default_instance_ = new CMsgGCGCToLANServerRelayConnect();
  CMsgGCToRelayConnectResponse::default_instance_ = new CMsgGCToRelayConnectResponse();
  CMsgGCBanStatusRequest::default_instance_ = new CMsgGCBanStatusRequest();
  CMsgGCBanStatusResponse::default_instance_ = new CMsgGCBanStatusResponse();
  CMsgTournamentItemEvent::default_instance_ = new CMsgTournamentItemEvent();
  CMsgTournamentItemEventResponse::default_instance_ = new CMsgTournamentItemEventResponse();
  CMsgTeamFanfare::default_instance_ = new CMsgTeamFanfare();
  CMsgResponseTeamFanfare::default_instance_ = new CMsgResponseTeamFanfare();
  CMsgGameServerUploadSaveGame::default_instance_ = new CMsgGameServerUploadSaveGame();
  CMsgGameServerSaveGameResult::default_instance_ = new CMsgGameServerSaveGameResult();
  CMsgGameServerGetLoadGame::default_instance_ = new CMsgGameServerGetLoadGame();
  CMsgGameServerGetLoadGameResult::default_instance_ = new CMsgGameServerGetLoadGameResult();
  CMsgDOTAGenerateDiretidePrizeList::default_instance_ = new CMsgDOTAGenerateDiretidePrizeList();
  CMsgDOTAGenerateDiretidePrizeListResponse::default_instance_ = new CMsgDOTAGenerateDiretidePrizeListResponse();
  CMsgDOTARewardDiretidePrizes::default_instance_ = new CMsgDOTARewardDiretidePrizes();
  CMsgDOTADiretidePrizesRewardedResponse::default_instance_ = new CMsgDOTADiretidePrizesRewardedResponse();
  CMsgDOTAAwardEventPoints::default_instance_ = new CMsgDOTAAwardEventPoints();
  CMsgDOTAAwardEventPoints_AwardPoints::default_instance_ = new CMsgDOTAAwardEventPoints_AwardPoints();
  CMsgServerToGCSignoutAwardAdditionalDrops::default_instance_ = new CMsgServerToGCSignoutAwardAdditionalDrops();
  CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::default_instance_ = new CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops();
  CMsgDOTAUpdateTI4HeroQuest::default_instance_ = new CMsgDOTAUpdateTI4HeroQuest();
  CMsgDOTAUpdateTI4HeroQuest_Player::default_instance_ = new CMsgDOTAUpdateTI4HeroQuest_Player();
  CMsgDOTAFrostivusTimeElapsed::default_instance_ = new CMsgDOTAFrostivusTimeElapsed();
  CMsgDOTAFrostivusTimeElapsed_User::default_instance_ = new CMsgDOTAFrostivusTimeElapsed_User();
  CMsgGCToServerPingRequest::default_instance_ = new CMsgGCToServerPingRequest();
  CMsgGCToServerPingResponse::default_instance_ = new CMsgGCToServerPingResponse();
  CMsgGCToServerConsoleCommand::default_instance_ = new CMsgGCToServerConsoleCommand();
  CMsgServerGetEventPoints::default_instance_ = new CMsgServerGetEventPoints();
  CMsgServerGetEventPointsResponse::default_instance_ = new CMsgServerGetEventPointsResponse();
  CMsgServerGetEventPointsResponse_Points::default_instance_ = new CMsgServerGetEventPointsResponse_Points();
  CMsgServerGrantSurveyPermission::default_instance_ = new CMsgServerGrantSurveyPermission();
  CMsgServerGrantSurveyPermission_Survey::default_instance_ = new CMsgServerGrantSurveyPermission_Survey();
  CMsgServerGrantSurveyPermissionResponse::default_instance_ = new CMsgServerGrantSurveyPermissionResponse();
  CMsgServerToGCMatchConnectionStats::default_instance_ = new CMsgServerToGCMatchConnectionStats();
  CMsgServerToGCMatchConnectionStats_Player::default_instance_ = new CMsgServerToGCMatchConnectionStats_Player();
  CMsgServerGCUpdateSpectatorCount::default_instance_ = new CMsgServerGCUpdateSpectatorCount();
  CSerializedCombatLog::default_instance_ = new CSerializedCombatLog();
  CSerializedCombatLog_Dictionary::default_instance_ = new CSerializedCombatLog_Dictionary();
  CSerializedCombatLog_Dictionary_DictString::default_instance_ = new CSerializedCombatLog_Dictionary_DictString();
  CMsgServerToGCGetAdditionalEquips::default_instance_ = new CMsgServerToGCGetAdditionalEquips();
  CMsgServerToGCGetAdditionalEquipsResponse::default_instance_ = new CMsgServerToGCGetAdditionalEquipsResponse();
  CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::default_instance_ = new CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips();
  CMsgServerToGCGetProfileCard::default_instance_ = new CMsgServerToGCGetProfileCard();
  CMsgServerToGCGetProfileCardResponse::default_instance_ = new CMsgServerToGCGetProfileCardResponse();
  CMsgServerToGCVictoryPredictions::default_instance_ = new CMsgServerToGCVictoryPredictions();
  CMsgServerToGCVictoryPredictions_Record::default_instance_ = new CMsgServerToGCVictoryPredictions_Record();
  CMsgSuspiciousActivity::default_instance_ = new CMsgSuspiciousActivity();
  CMsgServerToGCRequestStatus::default_instance_ = new CMsgServerToGCRequestStatus();
  CMsgServerToGCRequestStatus_Response::default_instance_ = new CMsgServerToGCRequestStatus_Response();
  CMsgSignOutAssassinMiniGameInfo::default_instance_ = new CMsgSignOutAssassinMiniGameInfo();
  CMsgServerToGCGetIngameEventData::default_instance_ = new CMsgServerToGCGetIngameEventData();
  CMsgGCToServerIngameEventDataOraclePA::default_instance_ = new CMsgGCToServerIngameEventDataOraclePA();
  CMsgServerToGCKillSummaries::default_instance_ = new CMsgServerToGCKillSummaries();
  CMsgServerToGCKillSummaries_KillSummary::default_instance_ = new CMsgServerToGCKillSummaries_KillSummary();
  CMsgGCToServerPredictionResult::default_instance_ = new CMsgGCToServerPredictionResult();
  CMsgGCToServerPredictionResult_Prediction::default_instance_ = new CMsgGCToServerPredictionResult_Prediction();
  CMsgServerToGCLockCharmTrading::default_instance_ = new CMsgServerToGCLockCharmTrading();
  CMsgDOTACNY2015EventPointUsage::default_instance_ = new CMsgDOTACNY2015EventPointUsage();
  CMsgDOTACNY2015EventPointUsage_PointUsage::default_instance_ = new CMsgDOTACNY2015EventPointUsage_PointUsage();
  CMsgSignOutUpdatePlayerChallenge::default_instance_ = new CMsgSignOutUpdatePlayerChallenge();
  CMsgSignOutUpdatePlayerChallenge_Challenge::default_instance_ = new CMsgSignOutUpdatePlayerChallenge_Challenge();
  CMsgServerToGCRerollPlayerChallenge::default_instance_ = new CMsgServerToGCRerollPlayerChallenge();
  CMsgServerToGCHoldEventPoints::default_instance_ = new CMsgServerToGCHoldEventPoints();
  CMsgServerToGCHoldEventPoints_HoldRequest::default_instance_ = new CMsgServerToGCHoldEventPoints_HoldRequest();
  CMsgSignOutReleaseEventPointHolds::default_instance_ = new CMsgSignOutReleaseEventPointHolds();
  CMsgGCToServerUpdateBroadcastCheers::default_instance_ = new CMsgGCToServerUpdateBroadcastCheers();
  CMsgSignOutWagerStats::default_instance_ = new CMsgSignOutWagerStats();
  CMsgSignOutWagerStats_Player::default_instance_ = new CMsgSignOutWagerStats_Player();
  CMsgSpawnLootGreevil::default_instance_->InitAsDefaultInstance();
  CMsgDismissLootGreevil::default_instance_->InitAsDefaultInstance();
  CMsgDismissLootGreevilResponse::default_instance_->InitAsDefaultInstance();
  CMsgPoorNetworkConditions::default_instance_->InitAsDefaultInstance();
  CMsgPoorNetworkConditions_Player::default_instance_->InitAsDefaultInstance();
  CMsgGameserverCrash::default_instance_->InitAsDefaultInstance();
  CMsgConnectedPlayers::default_instance_->InitAsDefaultInstance();
  CMsgConnectedPlayers_Player::default_instance_->InitAsDefaultInstance();
  CMsgGameServerInfo::default_instance_->InitAsDefaultInstance();
  CMsgLeaverDetected::default_instance_->InitAsDefaultInstance();
  CMsgLeaverDetectedResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyPlayerStats::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyMatch::default_instance_->InitAsDefaultInstance();
  CMsgServerToGCRealtimeStats::default_instance_->InitAsDefaultInstance();
  CMsgGCToServerRealtimeStatsStartStop::default_instance_->InitAsDefaultInstance();
  CMsgGameMatchSignOut::default_instance_->InitAsDefaultInstance();
  CMsgGameMatchSignOut_CTeam::default_instance_->InitAsDefaultInstance();
  CMsgGameMatchSignOut_CTeam_CPlayer::default_instance_->InitAsDefaultInstance();
  CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::default_instance_->InitAsDefaultInstance();
  CMsgGameMatchSignOut_CAdditionalSignoutMsg::default_instance_->InitAsDefaultInstance();
  CMsgGameMatchSignOut_CSocialFeedMatchEvent::default_instance_->InitAsDefaultInstance();
  CMsgGameMatchSignOut_CCustomGameData::default_instance_->InitAsDefaultInstance();
  CMsgSignOutDraftInfo::default_instance_->InitAsDefaultInstance();
  CMsgSignOutBotInfo::default_instance_->InitAsDefaultInstance();
  CMsgSignOutBotInfo_CMsgBotSlotDifficulty::default_instance_->InitAsDefaultInstance();
  CMsgSignOutPlayerStats::default_instance_->InitAsDefaultInstance();
  CMsgSignOutCommunicationSummary::default_instance_->InitAsDefaultInstance();
  CMsgSignOutCommunicationSummary_PlayerCommunication::default_instance_->InitAsDefaultInstance();
  CMsgGameMatchSignoutResponse::default_instance_->InitAsDefaultInstance();
  CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::default_instance_->InitAsDefaultInstance();
  CMsgGameMatchSignOutPermissionRequest::default_instance_->InitAsDefaultInstance();
  CMsgGameMatchSignOutPermissionResponse::default_instance_->InitAsDefaultInstance();
  CMsgGameChatLog::default_instance_->InitAsDefaultInstance();
  CMsgGameChatLog_CChatLine::default_instance_->InitAsDefaultInstance();
  CMsgDOTALiveScoreboardUpdate::default_instance_->InitAsDefaultInstance();
  CMsgDOTALiveScoreboardUpdate_Team::default_instance_->InitAsDefaultInstance();
  CMsgDOTALiveScoreboardUpdate_Team_Player::default_instance_->InitAsDefaultInstance();
  CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::default_instance_->InitAsDefaultInstance();
  CMsgDOTARequestPlayerResources::default_instance_->InitAsDefaultInstance();
  CMsgDOTARequestPlayerResourcesResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTARequestBatchPlayerResources::default_instance_->InitAsDefaultInstance();
  CMsgDOTARequestBatchPlayerResourcesResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTARequestBatchPlayerResourcesResponse_Result::default_instance_->InitAsDefaultInstance();
  CMsgDOTAPlayerFailedToConnect::default_instance_->InitAsDefaultInstance();
  CMsgGCToRelayConnect::default_instance_->InitAsDefaultInstance();
  CMsgGCGCToLANServerRelayConnect::default_instance_->InitAsDefaultInstance();
  CMsgGCToRelayConnectResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCBanStatusRequest::default_instance_->InitAsDefaultInstance();
  CMsgGCBanStatusResponse::default_instance_->InitAsDefaultInstance();
  CMsgTournamentItemEvent::default_instance_->InitAsDefaultInstance();
  CMsgTournamentItemEventResponse::default_instance_->InitAsDefaultInstance();
  CMsgTeamFanfare::default_instance_->InitAsDefaultInstance();
  CMsgResponseTeamFanfare::default_instance_->InitAsDefaultInstance();
  CMsgGameServerUploadSaveGame::default_instance_->InitAsDefaultInstance();
  CMsgGameServerSaveGameResult::default_instance_->InitAsDefaultInstance();
  CMsgGameServerGetLoadGame::default_instance_->InitAsDefaultInstance();
  CMsgGameServerGetLoadGameResult::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGenerateDiretidePrizeList::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGenerateDiretidePrizeListResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTARewardDiretidePrizes::default_instance_->InitAsDefaultInstance();
  CMsgDOTADiretidePrizesRewardedResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAAwardEventPoints::default_instance_->InitAsDefaultInstance();
  CMsgDOTAAwardEventPoints_AwardPoints::default_instance_->InitAsDefaultInstance();
  CMsgServerToGCSignoutAwardAdditionalDrops::default_instance_->InitAsDefaultInstance();
  CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::default_instance_->InitAsDefaultInstance();
  CMsgDOTAUpdateTI4HeroQuest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAUpdateTI4HeroQuest_Player::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFrostivusTimeElapsed::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFrostivusTimeElapsed_User::default_instance_->InitAsDefaultInstance();
  CMsgGCToServerPingRequest::default_instance_->InitAsDefaultInstance();
  CMsgGCToServerPingResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCToServerConsoleCommand::default_instance_->InitAsDefaultInstance();
  CMsgServerGetEventPoints::default_instance_->InitAsDefaultInstance();
  CMsgServerGetEventPointsResponse::default_instance_->InitAsDefaultInstance();
  CMsgServerGetEventPointsResponse_Points::default_instance_->InitAsDefaultInstance();
  CMsgServerGrantSurveyPermission::default_instance_->InitAsDefaultInstance();
  CMsgServerGrantSurveyPermission_Survey::default_instance_->InitAsDefaultInstance();
  CMsgServerGrantSurveyPermissionResponse::default_instance_->InitAsDefaultInstance();
  CMsgServerToGCMatchConnectionStats::default_instance_->InitAsDefaultInstance();
  CMsgServerToGCMatchConnectionStats_Player::default_instance_->InitAsDefaultInstance();
  CMsgServerGCUpdateSpectatorCount::default_instance_->InitAsDefaultInstance();
  CSerializedCombatLog::default_instance_->InitAsDefaultInstance();
  CSerializedCombatLog_Dictionary::default_instance_->InitAsDefaultInstance();
  CSerializedCombatLog_Dictionary_DictString::default_instance_->InitAsDefaultInstance();
  CMsgServerToGCGetAdditionalEquips::default_instance_->InitAsDefaultInstance();
  CMsgServerToGCGetAdditionalEquipsResponse::default_instance_->InitAsDefaultInstance();
  CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::default_instance_->InitAsDefaultInstance();
  CMsgServerToGCGetProfileCard::default_instance_->InitAsDefaultInstance();
  CMsgServerToGCGetProfileCardResponse::default_instance_->InitAsDefaultInstance();
  CMsgServerToGCVictoryPredictions::default_instance_->InitAsDefaultInstance();
  CMsgServerToGCVictoryPredictions_Record::default_instance_->InitAsDefaultInstance();
  CMsgSuspiciousActivity::default_instance_->InitAsDefaultInstance();
  CMsgServerToGCRequestStatus::default_instance_->InitAsDefaultInstance();
  CMsgServerToGCRequestStatus_Response::default_instance_->InitAsDefaultInstance();
  CMsgSignOutAssassinMiniGameInfo::default_instance_->InitAsDefaultInstance();
  CMsgServerToGCGetIngameEventData::default_instance_->InitAsDefaultInstance();
  CMsgGCToServerIngameEventDataOraclePA::default_instance_->InitAsDefaultInstance();
  CMsgServerToGCKillSummaries::default_instance_->InitAsDefaultInstance();
  CMsgServerToGCKillSummaries_KillSummary::default_instance_->InitAsDefaultInstance();
  CMsgGCToServerPredictionResult::default_instance_->InitAsDefaultInstance();
  CMsgGCToServerPredictionResult_Prediction::default_instance_->InitAsDefaultInstance();
  CMsgServerToGCLockCharmTrading::default_instance_->InitAsDefaultInstance();
  CMsgDOTACNY2015EventPointUsage::default_instance_->InitAsDefaultInstance();
  CMsgDOTACNY2015EventPointUsage_PointUsage::default_instance_->InitAsDefaultInstance();
  CMsgSignOutUpdatePlayerChallenge::default_instance_->InitAsDefaultInstance();
  CMsgSignOutUpdatePlayerChallenge_Challenge::default_instance_->InitAsDefaultInstance();
  CMsgServerToGCRerollPlayerChallenge::default_instance_->InitAsDefaultInstance();
  CMsgServerToGCHoldEventPoints::default_instance_->InitAsDefaultInstance();
  CMsgServerToGCHoldEventPoints_HoldRequest::default_instance_->InitAsDefaultInstance();
  CMsgSignOutReleaseEventPointHolds::default_instance_->InitAsDefaultInstance();
  CMsgGCToServerUpdateBroadcastCheers::default_instance_->InitAsDefaultInstance();
  CMsgSignOutWagerStats::default_instance_->InitAsDefaultInstance();
  CMsgSignOutWagerStats_Player::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dota_5fgcmessages_5fserver_2eproto {
  StaticDescriptorInitializer_dota_5fgcmessages_5fserver_2eproto() {
    protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  }
} static_descriptor_initializer_dota_5fgcmessages_5fserver_2eproto_;
const ::google::protobuf::EnumDescriptor* EPoorNetworkConditionsType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPoorNetworkConditionsType_descriptor_;
}
bool EPoorNetworkConditionsType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAbilityAbuseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAbilityAbuseType_descriptor_;
}
bool EAbilityAbuseType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EIntentionalFeedingType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EIntentionalFeedingType_descriptor_;
}
bool EIntentionalFeedingType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESuspiciousActivity_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESuspiciousActivity_descriptor_;
}
bool ESuspiciousActivity_IsValid(int value) {
  switch(value) {
    case 1:
    case 100:
    case 101:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESuspiciousBuildType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESuspiciousBuildType_descriptor_;
}
bool ESuspiciousBuildType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSpawnLootGreevil::kRareFieldNumber;
#endif  // !_MSC_VER

CMsgSpawnLootGreevil::CMsgSpawnLootGreevil()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSpawnLootGreevil)
}

void CMsgSpawnLootGreevil::InitAsDefaultInstance() {
}

CMsgSpawnLootGreevil::CMsgSpawnLootGreevil(const CMsgSpawnLootGreevil& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSpawnLootGreevil)
}

void CMsgSpawnLootGreevil::SharedCtor() {
  _cached_size_ = 0;
  rare_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSpawnLootGreevil::~CMsgSpawnLootGreevil() {
  // @@protoc_insertion_point(destructor:CMsgSpawnLootGreevil)
  SharedDtor();
}

void CMsgSpawnLootGreevil::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSpawnLootGreevil::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSpawnLootGreevil::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSpawnLootGreevil_descriptor_;
}

const CMsgSpawnLootGreevil& CMsgSpawnLootGreevil::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgSpawnLootGreevil* CMsgSpawnLootGreevil::default_instance_ = NULL;

CMsgSpawnLootGreevil* CMsgSpawnLootGreevil::New() const {
  return new CMsgSpawnLootGreevil;
}

void CMsgSpawnLootGreevil::Clear() {
  rare_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSpawnLootGreevil::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSpawnLootGreevil)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool rare = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rare_)));
          set_has_rare();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSpawnLootGreevil)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSpawnLootGreevil)
  return false;
#undef DO_
}

void CMsgSpawnLootGreevil::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSpawnLootGreevil)
  // optional bool rare = 1;
  if (has_rare()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->rare(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSpawnLootGreevil)
}

::google::protobuf::uint8* CMsgSpawnLootGreevil::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSpawnLootGreevil)
  // optional bool rare = 1;
  if (has_rare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->rare(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSpawnLootGreevil)
  return target;
}

int CMsgSpawnLootGreevil::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool rare = 1;
    if (has_rare()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSpawnLootGreevil::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSpawnLootGreevil* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSpawnLootGreevil*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSpawnLootGreevil::MergeFrom(const CMsgSpawnLootGreevil& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rare()) {
      set_rare(from.rare());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSpawnLootGreevil::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpawnLootGreevil::CopyFrom(const CMsgSpawnLootGreevil& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpawnLootGreevil::IsInitialized() const {

  return true;
}

void CMsgSpawnLootGreevil::Swap(CMsgSpawnLootGreevil* other) {
  if (other != this) {
    std::swap(rare_, other->rare_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSpawnLootGreevil::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSpawnLootGreevil_descriptor_;
  metadata.reflection = CMsgSpawnLootGreevil_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDismissLootGreevil::kKilledFieldNumber;
const int CMsgDismissLootGreevil::kRareFieldNumber;
#endif  // !_MSC_VER

CMsgDismissLootGreevil::CMsgDismissLootGreevil()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDismissLootGreevil)
}

void CMsgDismissLootGreevil::InitAsDefaultInstance() {
}

CMsgDismissLootGreevil::CMsgDismissLootGreevil(const CMsgDismissLootGreevil& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDismissLootGreevil)
}

void CMsgDismissLootGreevil::SharedCtor() {
  _cached_size_ = 0;
  killed_ = false;
  rare_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDismissLootGreevil::~CMsgDismissLootGreevil() {
  // @@protoc_insertion_point(destructor:CMsgDismissLootGreevil)
  SharedDtor();
}

void CMsgDismissLootGreevil::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDismissLootGreevil::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDismissLootGreevil::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDismissLootGreevil_descriptor_;
}

const CMsgDismissLootGreevil& CMsgDismissLootGreevil::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgDismissLootGreevil* CMsgDismissLootGreevil::default_instance_ = NULL;

CMsgDismissLootGreevil* CMsgDismissLootGreevil::New() const {
  return new CMsgDismissLootGreevil;
}

void CMsgDismissLootGreevil::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDismissLootGreevil*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(killed_, rare_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDismissLootGreevil::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDismissLootGreevil)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool killed = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &killed_)));
          set_has_killed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rare;
        break;
      }

      // optional bool rare = 3;
      case 3: {
        if (tag == 24) {
         parse_rare:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rare_)));
          set_has_rare();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDismissLootGreevil)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDismissLootGreevil)
  return false;
#undef DO_
}

void CMsgDismissLootGreevil::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDismissLootGreevil)
  // optional bool killed = 2;
  if (has_killed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->killed(), output);
  }

  // optional bool rare = 3;
  if (has_rare()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->rare(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDismissLootGreevil)
}

::google::protobuf::uint8* CMsgDismissLootGreevil::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDismissLootGreevil)
  // optional bool killed = 2;
  if (has_killed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->killed(), target);
  }

  // optional bool rare = 3;
  if (has_rare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->rare(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDismissLootGreevil)
  return target;
}

int CMsgDismissLootGreevil::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool killed = 2;
    if (has_killed()) {
      total_size += 1 + 1;
    }

    // optional bool rare = 3;
    if (has_rare()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDismissLootGreevil::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDismissLootGreevil* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDismissLootGreevil*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDismissLootGreevil::MergeFrom(const CMsgDismissLootGreevil& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_killed()) {
      set_killed(from.killed());
    }
    if (from.has_rare()) {
      set_rare(from.rare());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDismissLootGreevil::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDismissLootGreevil::CopyFrom(const CMsgDismissLootGreevil& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDismissLootGreevil::IsInitialized() const {

  return true;
}

void CMsgDismissLootGreevil::Swap(CMsgDismissLootGreevil* other) {
  if (other != this) {
    std::swap(killed_, other->killed_);
    std::swap(rare_, other->rare_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDismissLootGreevil::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDismissLootGreevil_descriptor_;
  metadata.reflection = CMsgDismissLootGreevil_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgDismissLootGreevilResponse::CMsgDismissLootGreevilResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDismissLootGreevilResponse)
}

void CMsgDismissLootGreevilResponse::InitAsDefaultInstance() {
}

CMsgDismissLootGreevilResponse::CMsgDismissLootGreevilResponse(const CMsgDismissLootGreevilResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDismissLootGreevilResponse)
}

void CMsgDismissLootGreevilResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDismissLootGreevilResponse::~CMsgDismissLootGreevilResponse() {
  // @@protoc_insertion_point(destructor:CMsgDismissLootGreevilResponse)
  SharedDtor();
}

void CMsgDismissLootGreevilResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDismissLootGreevilResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDismissLootGreevilResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDismissLootGreevilResponse_descriptor_;
}

const CMsgDismissLootGreevilResponse& CMsgDismissLootGreevilResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgDismissLootGreevilResponse* CMsgDismissLootGreevilResponse::default_instance_ = NULL;

CMsgDismissLootGreevilResponse* CMsgDismissLootGreevilResponse::New() const {
  return new CMsgDismissLootGreevilResponse;
}

void CMsgDismissLootGreevilResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDismissLootGreevilResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDismissLootGreevilResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDismissLootGreevilResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDismissLootGreevilResponse)
  return false;
#undef DO_
}

void CMsgDismissLootGreevilResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDismissLootGreevilResponse)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDismissLootGreevilResponse)
}

::google::protobuf::uint8* CMsgDismissLootGreevilResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDismissLootGreevilResponse)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDismissLootGreevilResponse)
  return target;
}

int CMsgDismissLootGreevilResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDismissLootGreevilResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDismissLootGreevilResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDismissLootGreevilResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDismissLootGreevilResponse::MergeFrom(const CMsgDismissLootGreevilResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDismissLootGreevilResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDismissLootGreevilResponse::CopyFrom(const CMsgDismissLootGreevilResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDismissLootGreevilResponse::IsInitialized() const {

  return true;
}

void CMsgDismissLootGreevilResponse::Swap(CMsgDismissLootGreevilResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDismissLootGreevilResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDismissLootGreevilResponse_descriptor_;
  metadata.reflection = CMsgDismissLootGreevilResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPoorNetworkConditions_Player::kAccountIdFieldNumber;
const int CMsgPoorNetworkConditions_Player::kDisconnectReasonFieldNumber;
const int CMsgPoorNetworkConditions_Player::kNumBadIntervalsFieldNumber;
const int CMsgPoorNetworkConditions_Player::kPeakLossPctFieldNumber;
#endif  // !_MSC_VER

CMsgPoorNetworkConditions_Player::CMsgPoorNetworkConditions_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPoorNetworkConditions.Player)
}

void CMsgPoorNetworkConditions_Player::InitAsDefaultInstance() {
}

CMsgPoorNetworkConditions_Player::CMsgPoorNetworkConditions_Player(const CMsgPoorNetworkConditions_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPoorNetworkConditions.Player)
}

void CMsgPoorNetworkConditions_Player::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  disconnect_reason_ = 0;
  num_bad_intervals_ = 0u;
  peak_loss_pct_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPoorNetworkConditions_Player::~CMsgPoorNetworkConditions_Player() {
  // @@protoc_insertion_point(destructor:CMsgPoorNetworkConditions.Player)
  SharedDtor();
}

void CMsgPoorNetworkConditions_Player::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPoorNetworkConditions_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPoorNetworkConditions_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPoorNetworkConditions_Player_descriptor_;
}

const CMsgPoorNetworkConditions_Player& CMsgPoorNetworkConditions_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgPoorNetworkConditions_Player* CMsgPoorNetworkConditions_Player::default_instance_ = NULL;

CMsgPoorNetworkConditions_Player* CMsgPoorNetworkConditions_Player::New() const {
  return new CMsgPoorNetworkConditions_Player;
}

void CMsgPoorNetworkConditions_Player::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgPoorNetworkConditions_Player*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(account_id_, peak_loss_pct_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPoorNetworkConditions_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPoorNetworkConditions.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_disconnect_reason;
        break;
      }

      // optional .ENetworkDisconnectionReason disconnect_reason = 2 [default = NETWORK_DISCONNECT_INVALID];
      case 2: {
        if (tag == 16) {
         parse_disconnect_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ENetworkDisconnectionReason_IsValid(value)) {
            set_disconnect_reason(static_cast< ::ENetworkDisconnectionReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_bad_intervals;
        break;
      }

      // optional uint32 num_bad_intervals = 3;
      case 3: {
        if (tag == 24) {
         parse_num_bad_intervals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_bad_intervals_)));
          set_has_num_bad_intervals();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_peak_loss_pct;
        break;
      }

      // optional uint32 peak_loss_pct = 4;
      case 4: {
        if (tag == 32) {
         parse_peak_loss_pct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peak_loss_pct_)));
          set_has_peak_loss_pct();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPoorNetworkConditions.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPoorNetworkConditions.Player)
  return false;
#undef DO_
}

void CMsgPoorNetworkConditions_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPoorNetworkConditions.Player)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional .ENetworkDisconnectionReason disconnect_reason = 2 [default = NETWORK_DISCONNECT_INVALID];
  if (has_disconnect_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->disconnect_reason(), output);
  }

  // optional uint32 num_bad_intervals = 3;
  if (has_num_bad_intervals()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_bad_intervals(), output);
  }

  // optional uint32 peak_loss_pct = 4;
  if (has_peak_loss_pct()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->peak_loss_pct(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPoorNetworkConditions.Player)
}

::google::protobuf::uint8* CMsgPoorNetworkConditions_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPoorNetworkConditions.Player)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional .ENetworkDisconnectionReason disconnect_reason = 2 [default = NETWORK_DISCONNECT_INVALID];
  if (has_disconnect_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->disconnect_reason(), target);
  }

  // optional uint32 num_bad_intervals = 3;
  if (has_num_bad_intervals()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_bad_intervals(), target);
  }

  // optional uint32 peak_loss_pct = 4;
  if (has_peak_loss_pct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->peak_loss_pct(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPoorNetworkConditions.Player)
  return target;
}

int CMsgPoorNetworkConditions_Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional .ENetworkDisconnectionReason disconnect_reason = 2 [default = NETWORK_DISCONNECT_INVALID];
    if (has_disconnect_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->disconnect_reason());
    }

    // optional uint32 num_bad_intervals = 3;
    if (has_num_bad_intervals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_bad_intervals());
    }

    // optional uint32 peak_loss_pct = 4;
    if (has_peak_loss_pct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->peak_loss_pct());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPoorNetworkConditions_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPoorNetworkConditions_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPoorNetworkConditions_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPoorNetworkConditions_Player::MergeFrom(const CMsgPoorNetworkConditions_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_disconnect_reason()) {
      set_disconnect_reason(from.disconnect_reason());
    }
    if (from.has_num_bad_intervals()) {
      set_num_bad_intervals(from.num_bad_intervals());
    }
    if (from.has_peak_loss_pct()) {
      set_peak_loss_pct(from.peak_loss_pct());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPoorNetworkConditions_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPoorNetworkConditions_Player::CopyFrom(const CMsgPoorNetworkConditions_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPoorNetworkConditions_Player::IsInitialized() const {

  return true;
}

void CMsgPoorNetworkConditions_Player::Swap(CMsgPoorNetworkConditions_Player* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(disconnect_reason_, other->disconnect_reason_);
    std::swap(num_bad_intervals_, other->num_bad_intervals_);
    std::swap(peak_loss_pct_, other->peak_loss_pct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPoorNetworkConditions_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPoorNetworkConditions_Player_descriptor_;
  metadata.reflection = CMsgPoorNetworkConditions_Player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgPoorNetworkConditions::kDetectionTypeFieldNumber;
const int CMsgPoorNetworkConditions::kPlayersFieldNumber;
#endif  // !_MSC_VER

CMsgPoorNetworkConditions::CMsgPoorNetworkConditions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPoorNetworkConditions)
}

void CMsgPoorNetworkConditions::InitAsDefaultInstance() {
}

CMsgPoorNetworkConditions::CMsgPoorNetworkConditions(const CMsgPoorNetworkConditions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPoorNetworkConditions)
}

void CMsgPoorNetworkConditions::SharedCtor() {
  _cached_size_ = 0;
  detection_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPoorNetworkConditions::~CMsgPoorNetworkConditions() {
  // @@protoc_insertion_point(destructor:CMsgPoorNetworkConditions)
  SharedDtor();
}

void CMsgPoorNetworkConditions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPoorNetworkConditions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPoorNetworkConditions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPoorNetworkConditions_descriptor_;
}

const CMsgPoorNetworkConditions& CMsgPoorNetworkConditions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgPoorNetworkConditions* CMsgPoorNetworkConditions::default_instance_ = NULL;

CMsgPoorNetworkConditions* CMsgPoorNetworkConditions::New() const {
  return new CMsgPoorNetworkConditions;
}

void CMsgPoorNetworkConditions::Clear() {
  detection_type_ = 0;
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPoorNetworkConditions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPoorNetworkConditions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EPoorNetworkConditionsType detection_type = 1 [default = k_EPoorNetworkConditions_None];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EPoorNetworkConditionsType_IsValid(value)) {
            set_detection_type(static_cast< ::EPoorNetworkConditionsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_players;
        break;
      }

      // repeated .CMsgPoorNetworkConditions.Player players = 2;
      case 2: {
        if (tag == 18) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_players;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPoorNetworkConditions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPoorNetworkConditions)
  return false;
#undef DO_
}

void CMsgPoorNetworkConditions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPoorNetworkConditions)
  // optional .EPoorNetworkConditionsType detection_type = 1 [default = k_EPoorNetworkConditions_None];
  if (has_detection_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->detection_type(), output);
  }

  // repeated .CMsgPoorNetworkConditions.Player players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPoorNetworkConditions)
}

::google::protobuf::uint8* CMsgPoorNetworkConditions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPoorNetworkConditions)
  // optional .EPoorNetworkConditionsType detection_type = 1 [default = k_EPoorNetworkConditions_None];
  if (has_detection_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->detection_type(), target);
  }

  // repeated .CMsgPoorNetworkConditions.Player players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPoorNetworkConditions)
  return target;
}

int CMsgPoorNetworkConditions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .EPoorNetworkConditionsType detection_type = 1 [default = k_EPoorNetworkConditions_None];
    if (has_detection_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->detection_type());
    }

  }
  // repeated .CMsgPoorNetworkConditions.Player players = 2;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPoorNetworkConditions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPoorNetworkConditions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPoorNetworkConditions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPoorNetworkConditions::MergeFrom(const CMsgPoorNetworkConditions& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_detection_type()) {
      set_detection_type(from.detection_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPoorNetworkConditions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPoorNetworkConditions::CopyFrom(const CMsgPoorNetworkConditions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPoorNetworkConditions::IsInitialized() const {

  return true;
}

void CMsgPoorNetworkConditions::Swap(CMsgPoorNetworkConditions* other) {
  if (other != this) {
    std::swap(detection_type_, other->detection_type_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPoorNetworkConditions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPoorNetworkConditions_descriptor_;
  metadata.reflection = CMsgPoorNetworkConditions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGameserverCrash::kMatchIdFieldNumber;
const int CMsgGameserverCrash::kLobbyIdFieldNumber;
const int CMsgGameserverCrash::kGameStateFieldNumber;
const int CMsgGameserverCrash::kSentinelSaveTimeFieldNumber;
const int CMsgGameserverCrash::kCustomGameIdFieldNumber;
const int CMsgGameserverCrash::kServerSteamIdFieldNumber;
const int CMsgGameserverCrash::kServerPublicIpAddrFieldNumber;
const int CMsgGameserverCrash::kServerPortFieldNumber;
const int CMsgGameserverCrash::kServerClusterFieldNumber;
const int CMsgGameserverCrash::kPidFieldNumber;
const int CMsgGameserverCrash::kEngineFieldNumber;
#endif  // !_MSC_VER

CMsgGameserverCrash::CMsgGameserverCrash()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGameserverCrash)
}

void CMsgGameserverCrash::InitAsDefaultInstance() {
}

CMsgGameserverCrash::CMsgGameserverCrash(const CMsgGameserverCrash& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGameserverCrash)
}

void CMsgGameserverCrash::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  lobby_id_ = GOOGLE_ULONGLONG(0);
  game_state_ = 0;
  sentinel_save_time_ = 0u;
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  server_public_ip_addr_ = 0u;
  server_port_ = 0u;
  server_cluster_ = 0u;
  pid_ = 0u;
  engine_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameserverCrash::~CMsgGameserverCrash() {
  // @@protoc_insertion_point(destructor:CMsgGameserverCrash)
  SharedDtor();
}

void CMsgGameserverCrash::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGameserverCrash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameserverCrash::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameserverCrash_descriptor_;
}

const CMsgGameserverCrash& CMsgGameserverCrash::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGameserverCrash* CMsgGameserverCrash::default_instance_ = NULL;

CMsgGameserverCrash* CMsgGameserverCrash::New() const {
  return new CMsgGameserverCrash;
}

void CMsgGameserverCrash::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGameserverCrash*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(match_id_, server_port_);
  }
  ZR_(server_cluster_, engine_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameserverCrash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGameserverCrash)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_lobby_id;
        break;
      }

      // optional fixed64 lobby_id = 2;
      case 2: {
        if (tag == 17) {
         parse_lobby_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lobby_id_)));
          set_has_lobby_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_game_state;
        break;
      }

      // optional .DOTA_GameState game_state = 3 [default = DOTA_GAMERULES_STATE_INIT];
      case 3: {
        if (tag == 24) {
         parse_game_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_GameState_IsValid(value)) {
            set_game_state(static_cast< ::DOTA_GameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_sentinel_save_time;
        break;
      }

      // optional fixed32 sentinel_save_time = 4;
      case 4: {
        if (tag == 37) {
         parse_sentinel_save_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &sentinel_save_time_)));
          set_has_sentinel_save_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_server_steam_id;
        break;
      }

      // optional fixed64 server_steam_id = 5;
      case 5: {
        if (tag == 41) {
         parse_server_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steam_id_)));
          set_has_server_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_server_public_ip_addr;
        break;
      }

      // optional fixed32 server_public_ip_addr = 6;
      case 6: {
        if (tag == 53) {
         parse_server_public_ip_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_public_ip_addr_)));
          set_has_server_public_ip_addr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_server_port;
        break;
      }

      // optional uint32 server_port = 7;
      case 7: {
        if (tag == 56) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
          set_has_server_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_server_cluster;
        break;
      }

      // optional uint32 server_cluster = 8;
      case 8: {
        if (tag == 64) {
         parse_server_cluster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_cluster_)));
          set_has_server_cluster();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_pid;
        break;
      }

      // optional uint32 pid = 9;
      case 9: {
        if (tag == 72) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_engine;
        break;
      }

      // optional uint32 engine = 10;
      case 10: {
        if (tag == 80) {
         parse_engine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &engine_)));
          set_has_engine();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_custom_game_id;
        break;
      }

      // optional fixed64 custom_game_id = 11;
      case 11: {
        if (tag == 89) {
         parse_custom_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &custom_game_id_)));
          set_has_custom_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGameserverCrash)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGameserverCrash)
  return false;
#undef DO_
}

void CMsgGameserverCrash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGameserverCrash)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional fixed64 lobby_id = 2;
  if (has_lobby_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->lobby_id(), output);
  }

  // optional .DOTA_GameState game_state = 3 [default = DOTA_GAMERULES_STATE_INIT];
  if (has_game_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->game_state(), output);
  }

  // optional fixed32 sentinel_save_time = 4;
  if (has_sentinel_save_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->sentinel_save_time(), output);
  }

  // optional fixed64 server_steam_id = 5;
  if (has_server_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->server_steam_id(), output);
  }

  // optional fixed32 server_public_ip_addr = 6;
  if (has_server_public_ip_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->server_public_ip_addr(), output);
  }

  // optional uint32 server_port = 7;
  if (has_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->server_port(), output);
  }

  // optional uint32 server_cluster = 8;
  if (has_server_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->server_cluster(), output);
  }

  // optional uint32 pid = 9;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pid(), output);
  }

  // optional uint32 engine = 10;
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->engine(), output);
  }

  // optional fixed64 custom_game_id = 11;
  if (has_custom_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->custom_game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGameserverCrash)
}

::google::protobuf::uint8* CMsgGameserverCrash::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameserverCrash)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional fixed64 lobby_id = 2;
  if (has_lobby_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->lobby_id(), target);
  }

  // optional .DOTA_GameState game_state = 3 [default = DOTA_GAMERULES_STATE_INIT];
  if (has_game_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->game_state(), target);
  }

  // optional fixed32 sentinel_save_time = 4;
  if (has_sentinel_save_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->sentinel_save_time(), target);
  }

  // optional fixed64 server_steam_id = 5;
  if (has_server_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->server_steam_id(), target);
  }

  // optional fixed32 server_public_ip_addr = 6;
  if (has_server_public_ip_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->server_public_ip_addr(), target);
  }

  // optional uint32 server_port = 7;
  if (has_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->server_port(), target);
  }

  // optional uint32 server_cluster = 8;
  if (has_server_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->server_cluster(), target);
  }

  // optional uint32 pid = 9;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pid(), target);
  }

  // optional uint32 engine = 10;
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->engine(), target);
  }

  // optional fixed64 custom_game_id = 11;
  if (has_custom_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->custom_game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameserverCrash)
  return target;
}

int CMsgGameserverCrash::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional fixed64 lobby_id = 2;
    if (has_lobby_id()) {
      total_size += 1 + 8;
    }

    // optional .DOTA_GameState game_state = 3 [default = DOTA_GAMERULES_STATE_INIT];
    if (has_game_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_state());
    }

    // optional fixed32 sentinel_save_time = 4;
    if (has_sentinel_save_time()) {
      total_size += 1 + 4;
    }

    // optional fixed64 custom_game_id = 11;
    if (has_custom_game_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 server_steam_id = 5;
    if (has_server_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed32 server_public_ip_addr = 6;
    if (has_server_public_ip_addr()) {
      total_size += 1 + 4;
    }

    // optional uint32 server_port = 7;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 server_cluster = 8;
    if (has_server_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_cluster());
    }

    // optional uint32 pid = 9;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid());
    }

    // optional uint32 engine = 10;
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->engine());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameserverCrash::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameserverCrash* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameserverCrash*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameserverCrash::MergeFrom(const CMsgGameserverCrash& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_lobby_id()) {
      set_lobby_id(from.lobby_id());
    }
    if (from.has_game_state()) {
      set_game_state(from.game_state());
    }
    if (from.has_sentinel_save_time()) {
      set_sentinel_save_time(from.sentinel_save_time());
    }
    if (from.has_custom_game_id()) {
      set_custom_game_id(from.custom_game_id());
    }
    if (from.has_server_steam_id()) {
      set_server_steam_id(from.server_steam_id());
    }
    if (from.has_server_public_ip_addr()) {
      set_server_public_ip_addr(from.server_public_ip_addr());
    }
    if (from.has_server_port()) {
      set_server_port(from.server_port());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_server_cluster()) {
      set_server_cluster(from.server_cluster());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameserverCrash::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameserverCrash::CopyFrom(const CMsgGameserverCrash& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameserverCrash::IsInitialized() const {

  return true;
}

void CMsgGameserverCrash::Swap(CMsgGameserverCrash* other) {
  if (other != this) {
    std::swap(match_id_, other->match_id_);
    std::swap(lobby_id_, other->lobby_id_);
    std::swap(game_state_, other->game_state_);
    std::swap(sentinel_save_time_, other->sentinel_save_time_);
    std::swap(custom_game_id_, other->custom_game_id_);
    std::swap(server_steam_id_, other->server_steam_id_);
    std::swap(server_public_ip_addr_, other->server_public_ip_addr_);
    std::swap(server_port_, other->server_port_);
    std::swap(server_cluster_, other->server_cluster_);
    std::swap(pid_, other->pid_);
    std::swap(engine_, other->engine_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameserverCrash::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameserverCrash_descriptor_;
  metadata.reflection = CMsgGameserverCrash_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgConnectedPlayers_SendReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgConnectedPlayers_SendReason_descriptor_;
}
bool CMsgConnectedPlayers_SendReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::INVALID;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::HEARTBEAT;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::GAME_STATE;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::FIRST_BLOOD;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::PLAYER_CONNECTED;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::PLAYER_HERO;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::PLAYER_DISCONNECTED_CONSEQUENCES;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::PLAYER_DISCONNECTED_NOCONSEQUENCES;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::TOWER_STATE;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::GAMESTATE_TIMEOUT;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::MASS_DISCONNECT;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::BARRACKS_STATE;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::KILLS;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::SendReason_MIN;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::SendReason_MAX;
const int CMsgConnectedPlayers::SendReason_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgConnectedPlayers_Player::kSteamIdFieldNumber;
const int CMsgConnectedPlayers_Player::kHeroIdFieldNumber;
const int CMsgConnectedPlayers_Player::kLeaverStateFieldNumber;
const int CMsgConnectedPlayers_Player::kDisconnectReasonFieldNumber;
#endif  // !_MSC_VER

CMsgConnectedPlayers_Player::CMsgConnectedPlayers_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgConnectedPlayers.Player)
}

void CMsgConnectedPlayers_Player::InitAsDefaultInstance() {
  leaver_state_ = const_cast< ::CMsgLeaverState*>(&::CMsgLeaverState::default_instance());
}

CMsgConnectedPlayers_Player::CMsgConnectedPlayers_Player(const CMsgConnectedPlayers_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgConnectedPlayers.Player)
}

void CMsgConnectedPlayers_Player::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  hero_id_ = 0u;
  leaver_state_ = NULL;
  disconnect_reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgConnectedPlayers_Player::~CMsgConnectedPlayers_Player() {
  // @@protoc_insertion_point(destructor:CMsgConnectedPlayers.Player)
  SharedDtor();
}

void CMsgConnectedPlayers_Player::SharedDtor() {
  if (this != default_instance_) {
    delete leaver_state_;
  }
}

void CMsgConnectedPlayers_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgConnectedPlayers_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgConnectedPlayers_Player_descriptor_;
}

const CMsgConnectedPlayers_Player& CMsgConnectedPlayers_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgConnectedPlayers_Player* CMsgConnectedPlayers_Player::default_instance_ = NULL;

CMsgConnectedPlayers_Player* CMsgConnectedPlayers_Player::New() const {
  return new CMsgConnectedPlayers_Player;
}

void CMsgConnectedPlayers_Player::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgConnectedPlayers_Player*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(hero_id_, disconnect_reason_);
    steam_id_ = GOOGLE_ULONGLONG(0);
    if (has_leaver_state()) {
      if (leaver_state_ != NULL) leaver_state_->::CMsgLeaverState::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgConnectedPlayers_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgConnectedPlayers.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint32 hero_id = 2;
      case 2: {
        if (tag == 16) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_leaver_state;
        break;
      }

      // optional .CMsgLeaverState leaver_state = 3;
      case 3: {
        if (tag == 26) {
         parse_leaver_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaver_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_disconnect_reason;
        break;
      }

      // optional .ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
      case 4: {
        if (tag == 32) {
         parse_disconnect_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ENetworkDisconnectionReason_IsValid(value)) {
            set_disconnect_reason(static_cast< ::ENetworkDisconnectionReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgConnectedPlayers.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgConnectedPlayers.Player)
  return false;
#undef DO_
}

void CMsgConnectedPlayers_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgConnectedPlayers.Player)
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // optional .CMsgLeaverState leaver_state = 3;
  if (has_leaver_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->leaver_state(), output);
  }

  // optional .ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
  if (has_disconnect_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->disconnect_reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgConnectedPlayers.Player)
}

::google::protobuf::uint8* CMsgConnectedPlayers_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgConnectedPlayers.Player)
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // optional .CMsgLeaverState leaver_state = 3;
  if (has_leaver_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->leaver_state(), target);
  }

  // optional .ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
  if (has_disconnect_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->disconnect_reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgConnectedPlayers.Player)
  return target;
}

int CMsgConnectedPlayers_Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional .CMsgLeaverState leaver_state = 3;
    if (has_leaver_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leaver_state());
    }

    // optional .ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
    if (has_disconnect_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->disconnect_reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgConnectedPlayers_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgConnectedPlayers_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgConnectedPlayers_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgConnectedPlayers_Player::MergeFrom(const CMsgConnectedPlayers_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_leaver_state()) {
      mutable_leaver_state()->::CMsgLeaverState::MergeFrom(from.leaver_state());
    }
    if (from.has_disconnect_reason()) {
      set_disconnect_reason(from.disconnect_reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgConnectedPlayers_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConnectedPlayers_Player::CopyFrom(const CMsgConnectedPlayers_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConnectedPlayers_Player::IsInitialized() const {

  return true;
}

void CMsgConnectedPlayers_Player::Swap(CMsgConnectedPlayers_Player* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(leaver_state_, other->leaver_state_);
    std::swap(disconnect_reason_, other->disconnect_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgConnectedPlayers_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgConnectedPlayers_Player_descriptor_;
  metadata.reflection = CMsgConnectedPlayers_Player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgConnectedPlayers::kConnectedPlayersFieldNumber;
const int CMsgConnectedPlayers::kDisconnectedPlayersFieldNumber;
const int CMsgConnectedPlayers::kGameStateFieldNumber;
const int CMsgConnectedPlayers::kTowerStateFieldNumber;
const int CMsgConnectedPlayers::kFirstBloodHappenedFieldNumber;
const int CMsgConnectedPlayers::kLegacyMassDisconnectFieldNumber;
const int CMsgConnectedPlayers::kPoorNetworkConditionsFieldNumber;
const int CMsgConnectedPlayers::kSendReasonFieldNumber;
const int CMsgConnectedPlayers::kRadiantKillsFieldNumber;
const int CMsgConnectedPlayers::kDireKillsFieldNumber;
const int CMsgConnectedPlayers::kBarracksStateFieldNumber;
#endif  // !_MSC_VER

CMsgConnectedPlayers::CMsgConnectedPlayers()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgConnectedPlayers)
}

void CMsgConnectedPlayers::InitAsDefaultInstance() {
  poor_network_conditions_ = const_cast< ::CMsgPoorNetworkConditions*>(&::CMsgPoorNetworkConditions::default_instance());
}

CMsgConnectedPlayers::CMsgConnectedPlayers(const CMsgConnectedPlayers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgConnectedPlayers)
}

void CMsgConnectedPlayers::SharedCtor() {
  _cached_size_ = 0;
  game_state_ = 0;
  tower_state_ = 0u;
  first_blood_happened_ = false;
  legacy_mass_disconnect_ = false;
  poor_network_conditions_ = NULL;
  send_reason_ = 0;
  radiant_kills_ = 0u;
  dire_kills_ = 0u;
  barracks_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgConnectedPlayers::~CMsgConnectedPlayers() {
  // @@protoc_insertion_point(destructor:CMsgConnectedPlayers)
  SharedDtor();
}

void CMsgConnectedPlayers::SharedDtor() {
  if (this != default_instance_) {
    delete poor_network_conditions_;
  }
}

void CMsgConnectedPlayers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgConnectedPlayers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgConnectedPlayers_descriptor_;
}

const CMsgConnectedPlayers& CMsgConnectedPlayers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgConnectedPlayers* CMsgConnectedPlayers::default_instance_ = NULL;

CMsgConnectedPlayers* CMsgConnectedPlayers::New() const {
  return new CMsgConnectedPlayers;
}

void CMsgConnectedPlayers::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgConnectedPlayers*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 252) {
    ZR_(game_state_, send_reason_);
    if (has_poor_network_conditions()) {
      if (poor_network_conditions_ != NULL) poor_network_conditions_->::CMsgPoorNetworkConditions::Clear();
    }
  }
  ZR_(radiant_kills_, barracks_state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  connected_players_.Clear();
  disconnected_players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgConnectedPlayers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgConnectedPlayers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgConnectedPlayers.Player connected_players = 1;
      case 1: {
        if (tag == 10) {
         parse_connected_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_connected_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_connected_players;
        if (input->ExpectTag(16)) goto parse_game_state;
        break;
      }

      // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
      case 2: {
        if (tag == 16) {
         parse_game_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_GameState_IsValid(value)) {
            set_game_state(static_cast< ::DOTA_GameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tower_state;
        break;
      }

      // optional uint32 tower_state = 4;
      case 4: {
        if (tag == 32) {
         parse_tower_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_state_)));
          set_has_tower_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_first_blood_happened;
        break;
      }

      // optional bool first_blood_happened = 6;
      case 6: {
        if (tag == 48) {
         parse_first_blood_happened:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_blood_happened_)));
          set_has_first_blood_happened();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_disconnected_players;
        break;
      }

      // repeated .CMsgConnectedPlayers.Player disconnected_players = 7;
      case 7: {
        if (tag == 58) {
         parse_disconnected_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_disconnected_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_disconnected_players;
        if (input->ExpectTag(64)) goto parse_send_reason;
        break;
      }

      // optional .CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
      case 8: {
        if (tag == 64) {
         parse_send_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgConnectedPlayers_SendReason_IsValid(value)) {
            set_send_reason(static_cast< ::CMsgConnectedPlayers_SendReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_legacy_mass_disconnect;
        break;
      }

      // optional bool legacy_mass_disconnect = 9;
      case 9: {
        if (tag == 72) {
         parse_legacy_mass_disconnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &legacy_mass_disconnect_)));
          set_has_legacy_mass_disconnect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_poor_network_conditions;
        break;
      }

      // optional .CMsgPoorNetworkConditions poor_network_conditions = 10;
      case 10: {
        if (tag == 82) {
         parse_poor_network_conditions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_poor_network_conditions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_radiant_kills;
        break;
      }

      // optional uint32 radiant_kills = 11;
      case 11: {
        if (tag == 88) {
         parse_radiant_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_kills_)));
          set_has_radiant_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_dire_kills;
        break;
      }

      // optional uint32 dire_kills = 12;
      case 12: {
        if (tag == 96) {
         parse_dire_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_kills_)));
          set_has_dire_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_barracks_state;
        break;
      }

      // optional uint32 barracks_state = 13;
      case 13: {
        if (tag == 104) {
         parse_barracks_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &barracks_state_)));
          set_has_barracks_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgConnectedPlayers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgConnectedPlayers)
  return false;
#undef DO_
}

void CMsgConnectedPlayers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgConnectedPlayers)
  // repeated .CMsgConnectedPlayers.Player connected_players = 1;
  for (int i = 0; i < this->connected_players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->connected_players(i), output);
  }

  // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  if (has_game_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->game_state(), output);
  }

  // optional uint32 tower_state = 4;
  if (has_tower_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tower_state(), output);
  }

  // optional bool first_blood_happened = 6;
  if (has_first_blood_happened()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->first_blood_happened(), output);
  }

  // repeated .CMsgConnectedPlayers.Player disconnected_players = 7;
  for (int i = 0; i < this->disconnected_players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->disconnected_players(i), output);
  }

  // optional .CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
  if (has_send_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->send_reason(), output);
  }

  // optional bool legacy_mass_disconnect = 9;
  if (has_legacy_mass_disconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->legacy_mass_disconnect(), output);
  }

  // optional .CMsgPoorNetworkConditions poor_network_conditions = 10;
  if (has_poor_network_conditions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->poor_network_conditions(), output);
  }

  // optional uint32 radiant_kills = 11;
  if (has_radiant_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->radiant_kills(), output);
  }

  // optional uint32 dire_kills = 12;
  if (has_dire_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->dire_kills(), output);
  }

  // optional uint32 barracks_state = 13;
  if (has_barracks_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->barracks_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgConnectedPlayers)
}

::google::protobuf::uint8* CMsgConnectedPlayers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgConnectedPlayers)
  // repeated .CMsgConnectedPlayers.Player connected_players = 1;
  for (int i = 0; i < this->connected_players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->connected_players(i), target);
  }

  // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  if (has_game_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->game_state(), target);
  }

  // optional uint32 tower_state = 4;
  if (has_tower_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tower_state(), target);
  }

  // optional bool first_blood_happened = 6;
  if (has_first_blood_happened()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->first_blood_happened(), target);
  }

  // repeated .CMsgConnectedPlayers.Player disconnected_players = 7;
  for (int i = 0; i < this->disconnected_players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->disconnected_players(i), target);
  }

  // optional .CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
  if (has_send_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->send_reason(), target);
  }

  // optional bool legacy_mass_disconnect = 9;
  if (has_legacy_mass_disconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->legacy_mass_disconnect(), target);
  }

  // optional .CMsgPoorNetworkConditions poor_network_conditions = 10;
  if (has_poor_network_conditions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->poor_network_conditions(), target);
  }

  // optional uint32 radiant_kills = 11;
  if (has_radiant_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->radiant_kills(), target);
  }

  // optional uint32 dire_kills = 12;
  if (has_dire_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->dire_kills(), target);
  }

  // optional uint32 barracks_state = 13;
  if (has_barracks_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->barracks_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgConnectedPlayers)
  return target;
}

int CMsgConnectedPlayers::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
    if (has_game_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_state());
    }

    // optional uint32 tower_state = 4;
    if (has_tower_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_state());
    }

    // optional bool first_blood_happened = 6;
    if (has_first_blood_happened()) {
      total_size += 1 + 1;
    }

    // optional bool legacy_mass_disconnect = 9;
    if (has_legacy_mass_disconnect()) {
      total_size += 1 + 1;
    }

    // optional .CMsgPoorNetworkConditions poor_network_conditions = 10;
    if (has_poor_network_conditions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->poor_network_conditions());
    }

    // optional .CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
    if (has_send_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->send_reason());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 radiant_kills = 11;
    if (has_radiant_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_kills());
    }

    // optional uint32 dire_kills = 12;
    if (has_dire_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_kills());
    }

    // optional uint32 barracks_state = 13;
    if (has_barracks_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->barracks_state());
    }

  }
  // repeated .CMsgConnectedPlayers.Player connected_players = 1;
  total_size += 1 * this->connected_players_size();
  for (int i = 0; i < this->connected_players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->connected_players(i));
  }

  // repeated .CMsgConnectedPlayers.Player disconnected_players = 7;
  total_size += 1 * this->disconnected_players_size();
  for (int i = 0; i < this->disconnected_players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->disconnected_players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgConnectedPlayers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgConnectedPlayers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgConnectedPlayers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgConnectedPlayers::MergeFrom(const CMsgConnectedPlayers& from) {
  GOOGLE_CHECK_NE(&from, this);
  connected_players_.MergeFrom(from.connected_players_);
  disconnected_players_.MergeFrom(from.disconnected_players_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_game_state()) {
      set_game_state(from.game_state());
    }
    if (from.has_tower_state()) {
      set_tower_state(from.tower_state());
    }
    if (from.has_first_blood_happened()) {
      set_first_blood_happened(from.first_blood_happened());
    }
    if (from.has_legacy_mass_disconnect()) {
      set_legacy_mass_disconnect(from.legacy_mass_disconnect());
    }
    if (from.has_poor_network_conditions()) {
      mutable_poor_network_conditions()->::CMsgPoorNetworkConditions::MergeFrom(from.poor_network_conditions());
    }
    if (from.has_send_reason()) {
      set_send_reason(from.send_reason());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_radiant_kills()) {
      set_radiant_kills(from.radiant_kills());
    }
    if (from.has_dire_kills()) {
      set_dire_kills(from.dire_kills());
    }
    if (from.has_barracks_state()) {
      set_barracks_state(from.barracks_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgConnectedPlayers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConnectedPlayers::CopyFrom(const CMsgConnectedPlayers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConnectedPlayers::IsInitialized() const {

  return true;
}

void CMsgConnectedPlayers::Swap(CMsgConnectedPlayers* other) {
  if (other != this) {
    connected_players_.Swap(&other->connected_players_);
    disconnected_players_.Swap(&other->disconnected_players_);
    std::swap(game_state_, other->game_state_);
    std::swap(tower_state_, other->tower_state_);
    std::swap(first_blood_happened_, other->first_blood_happened_);
    std::swap(legacy_mass_disconnect_, other->legacy_mass_disconnect_);
    std::swap(poor_network_conditions_, other->poor_network_conditions_);
    std::swap(send_reason_, other->send_reason_);
    std::swap(radiant_kills_, other->radiant_kills_);
    std::swap(dire_kills_, other->dire_kills_);
    std::swap(barracks_state_, other->barracks_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgConnectedPlayers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgConnectedPlayers_descriptor_;
  metadata.reflection = CMsgConnectedPlayers_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgGameServerInfo_ServerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameServerInfo_ServerType_descriptor_;
}
bool CMsgGameServerInfo_ServerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgGameServerInfo_ServerType CMsgGameServerInfo::UNSPECIFIED;
const CMsgGameServerInfo_ServerType CMsgGameServerInfo::GAME;
const CMsgGameServerInfo_ServerType CMsgGameServerInfo::PROXY;
const CMsgGameServerInfo_ServerType CMsgGameServerInfo::ServerType_MIN;
const CMsgGameServerInfo_ServerType CMsgGameServerInfo::ServerType_MAX;
const int CMsgGameServerInfo::ServerType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgGameServerInfo::kServerPublicIpAddrFieldNumber;
const int CMsgGameServerInfo::kServerPrivateIpAddrFieldNumber;
const int CMsgGameServerInfo::kServerPortFieldNumber;
const int CMsgGameServerInfo::kServerTvPortFieldNumber;
const int CMsgGameServerInfo::kAssignedServerTvPortFieldNumber;
const int CMsgGameServerInfo::kServerSteamdatagramPortFieldNumber;
const int CMsgGameServerInfo::kServerKeyFieldNumber;
const int CMsgGameServerInfo::kServerHibernationFieldNumber;
const int CMsgGameServerInfo::kServerTypeFieldNumber;
const int CMsgGameServerInfo::kServerRegionFieldNumber;
const int CMsgGameServerInfo::kServerLoadavgFieldNumber;
const int CMsgGameServerInfo::kServerTvBroadcastTimeFieldNumber;
const int CMsgGameServerInfo::kServerGameTimeFieldNumber;
const int CMsgGameServerInfo::kServerRelayConnectedSteamIdFieldNumber;
const int CMsgGameServerInfo::kRelaySlotsMaxFieldNumber;
const int CMsgGameServerInfo::kRelaysConnectedFieldNumber;
const int CMsgGameServerInfo::kRelayClientsConnectedFieldNumber;
const int CMsgGameServerInfo::kRelayedGameServerSteamIdFieldNumber;
const int CMsgGameServerInfo::kParentRelayCountFieldNumber;
const int CMsgGameServerInfo::kTvSecretCodeFieldNumber;
const int CMsgGameServerInfo::kServerVersionFieldNumber;
const int CMsgGameServerInfo::kServerClusterFieldNumber;
#endif  // !_MSC_VER

CMsgGameServerInfo::CMsgGameServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGameServerInfo)
}

void CMsgGameServerInfo::InitAsDefaultInstance() {
}

CMsgGameServerInfo::CMsgGameServerInfo(const CMsgGameServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerInfo)
}

void CMsgGameServerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  server_public_ip_addr_ = 0u;
  server_private_ip_addr_ = 0u;
  server_port_ = 0u;
  server_tv_port_ = 0u;
  assigned_server_tv_port_ = 0u;
  server_steamdatagram_port_ = 0u;
  server_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_hibernation_ = false;
  server_type_ = 0;
  server_region_ = 0u;
  server_loadavg_ = 0;
  server_tv_broadcast_time_ = 0;
  server_game_time_ = 0;
  server_relay_connected_steam_id_ = GOOGLE_ULONGLONG(0);
  relay_slots_max_ = 0u;
  relays_connected_ = 0;
  relay_clients_connected_ = 0;
  relayed_game_server_steam_id_ = GOOGLE_ULONGLONG(0);
  parent_relay_count_ = 0u;
  tv_secret_code_ = GOOGLE_ULONGLONG(0);
  server_version_ = 0u;
  server_cluster_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameServerInfo::~CMsgGameServerInfo() {
  // @@protoc_insertion_point(destructor:CMsgGameServerInfo)
  SharedDtor();
}

void CMsgGameServerInfo::SharedDtor() {
  if (server_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_key_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGameServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameServerInfo_descriptor_;
}

const CMsgGameServerInfo& CMsgGameServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGameServerInfo* CMsgGameServerInfo::default_instance_ = NULL;

CMsgGameServerInfo* CMsgGameServerInfo::New() const {
  return new CMsgGameServerInfo;
}

void CMsgGameServerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGameServerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(server_public_ip_addr_, server_steamdatagram_port_);
    if (has_server_key()) {
      if (server_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        server_key_->clear();
      }
    }
    server_hibernation_ = false;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(server_type_, relays_connected_);
  }
  if (_has_bits_[16 / 32] & 4128768) {
    ZR_(relayed_game_server_steam_id_, server_cluster_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGameServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 server_public_ip_addr = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_public_ip_addr_)));
          set_has_server_public_ip_addr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_server_private_ip_addr;
        break;
      }

      // optional fixed32 server_private_ip_addr = 2;
      case 2: {
        if (tag == 21) {
         parse_server_private_ip_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_private_ip_addr_)));
          set_has_server_private_ip_addr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_server_port;
        break;
      }

      // optional uint32 server_port = 3;
      case 3: {
        if (tag == 24) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
          set_has_server_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_server_tv_port;
        break;
      }

      // optional uint32 server_tv_port = 4;
      case 4: {
        if (tag == 32) {
         parse_server_tv_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_tv_port_)));
          set_has_server_tv_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_server_key;
        break;
      }

      // optional string server_key = 5;
      case 5: {
        if (tag == 42) {
         parse_server_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_key().data(), this->server_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "server_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_server_hibernation;
        break;
      }

      // optional bool server_hibernation = 6;
      case 6: {
        if (tag == 48) {
         parse_server_hibernation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &server_hibernation_)));
          set_has_server_hibernation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_server_type;
        break;
      }

      // optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
      case 7: {
        if (tag == 56) {
         parse_server_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGameServerInfo_ServerType_IsValid(value)) {
            set_server_type(static_cast< ::CMsgGameServerInfo_ServerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_server_region;
        break;
      }

      // optional uint32 server_region = 8;
      case 8: {
        if (tag == 64) {
         parse_server_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
          set_has_server_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_server_loadavg;
        break;
      }

      // optional float server_loadavg = 9;
      case 9: {
        if (tag == 77) {
         parse_server_loadavg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &server_loadavg_)));
          set_has_server_loadavg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_server_tv_broadcast_time;
        break;
      }

      // optional float server_tv_broadcast_time = 10;
      case 10: {
        if (tag == 85) {
         parse_server_tv_broadcast_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &server_tv_broadcast_time_)));
          set_has_server_tv_broadcast_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_server_game_time;
        break;
      }

      // optional float server_game_time = 11;
      case 11: {
        if (tag == 93) {
         parse_server_game_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &server_game_time_)));
          set_has_server_game_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_server_relay_connected_steam_id;
        break;
      }

      // optional fixed64 server_relay_connected_steam_id = 12;
      case 12: {
        if (tag == 97) {
         parse_server_relay_connected_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_relay_connected_steam_id_)));
          set_has_server_relay_connected_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_relay_slots_max;
        break;
      }

      // optional uint32 relay_slots_max = 13;
      case 13: {
        if (tag == 104) {
         parse_relay_slots_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relay_slots_max_)));
          set_has_relay_slots_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_relays_connected;
        break;
      }

      // optional int32 relays_connected = 14;
      case 14: {
        if (tag == 112) {
         parse_relays_connected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relays_connected_)));
          set_has_relays_connected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_relay_clients_connected;
        break;
      }

      // optional int32 relay_clients_connected = 15;
      case 15: {
        if (tag == 120) {
         parse_relay_clients_connected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relay_clients_connected_)));
          set_has_relay_clients_connected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_relayed_game_server_steam_id;
        break;
      }

      // optional fixed64 relayed_game_server_steam_id = 16;
      case 16: {
        if (tag == 129) {
         parse_relayed_game_server_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &relayed_game_server_steam_id_)));
          set_has_relayed_game_server_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_parent_relay_count;
        break;
      }

      // optional uint32 parent_relay_count = 17;
      case 17: {
        if (tag == 136) {
         parse_parent_relay_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_relay_count_)));
          set_has_parent_relay_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_tv_secret_code;
        break;
      }

      // optional fixed64 tv_secret_code = 18;
      case 18: {
        if (tag == 145) {
         parse_tv_secret_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &tv_secret_code_)));
          set_has_tv_secret_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_server_version;
        break;
      }

      // optional uint32 server_version = 19;
      case 19: {
        if (tag == 152) {
         parse_server_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_version_)));
          set_has_server_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_server_cluster;
        break;
      }

      // optional uint32 server_cluster = 20;
      case 20: {
        if (tag == 160) {
         parse_server_cluster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_cluster_)));
          set_has_server_cluster();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_server_steamdatagram_port;
        break;
      }

      // optional uint32 server_steamdatagram_port = 21;
      case 21: {
        if (tag == 168) {
         parse_server_steamdatagram_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_steamdatagram_port_)));
          set_has_server_steamdatagram_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_assigned_server_tv_port;
        break;
      }

      // optional uint32 assigned_server_tv_port = 22;
      case 22: {
        if (tag == 176) {
         parse_assigned_server_tv_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assigned_server_tv_port_)));
          set_has_assigned_server_tv_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGameServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGameServerInfo)
  return false;
#undef DO_
}

void CMsgGameServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGameServerInfo)
  // optional fixed32 server_public_ip_addr = 1;
  if (has_server_public_ip_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->server_public_ip_addr(), output);
  }

  // optional fixed32 server_private_ip_addr = 2;
  if (has_server_private_ip_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->server_private_ip_addr(), output);
  }

  // optional uint32 server_port = 3;
  if (has_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_port(), output);
  }

  // optional uint32 server_tv_port = 4;
  if (has_server_tv_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->server_tv_port(), output);
  }

  // optional string server_key = 5;
  if (has_server_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_key().data(), this->server_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->server_key(), output);
  }

  // optional bool server_hibernation = 6;
  if (has_server_hibernation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->server_hibernation(), output);
  }

  // optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->server_type(), output);
  }

  // optional uint32 server_region = 8;
  if (has_server_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->server_region(), output);
  }

  // optional float server_loadavg = 9;
  if (has_server_loadavg()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->server_loadavg(), output);
  }

  // optional float server_tv_broadcast_time = 10;
  if (has_server_tv_broadcast_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->server_tv_broadcast_time(), output);
  }

  // optional float server_game_time = 11;
  if (has_server_game_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->server_game_time(), output);
  }

  // optional fixed64 server_relay_connected_steam_id = 12;
  if (has_server_relay_connected_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(12, this->server_relay_connected_steam_id(), output);
  }

  // optional uint32 relay_slots_max = 13;
  if (has_relay_slots_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->relay_slots_max(), output);
  }

  // optional int32 relays_connected = 14;
  if (has_relays_connected()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->relays_connected(), output);
  }

  // optional int32 relay_clients_connected = 15;
  if (has_relay_clients_connected()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->relay_clients_connected(), output);
  }

  // optional fixed64 relayed_game_server_steam_id = 16;
  if (has_relayed_game_server_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(16, this->relayed_game_server_steam_id(), output);
  }

  // optional uint32 parent_relay_count = 17;
  if (has_parent_relay_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->parent_relay_count(), output);
  }

  // optional fixed64 tv_secret_code = 18;
  if (has_tv_secret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(18, this->tv_secret_code(), output);
  }

  // optional uint32 server_version = 19;
  if (has_server_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->server_version(), output);
  }

  // optional uint32 server_cluster = 20;
  if (has_server_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->server_cluster(), output);
  }

  // optional uint32 server_steamdatagram_port = 21;
  if (has_server_steamdatagram_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->server_steamdatagram_port(), output);
  }

  // optional uint32 assigned_server_tv_port = 22;
  if (has_assigned_server_tv_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->assigned_server_tv_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGameServerInfo)
}

::google::protobuf::uint8* CMsgGameServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerInfo)
  // optional fixed32 server_public_ip_addr = 1;
  if (has_server_public_ip_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->server_public_ip_addr(), target);
  }

  // optional fixed32 server_private_ip_addr = 2;
  if (has_server_private_ip_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->server_private_ip_addr(), target);
  }

  // optional uint32 server_port = 3;
  if (has_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_port(), target);
  }

  // optional uint32 server_tv_port = 4;
  if (has_server_tv_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->server_tv_port(), target);
  }

  // optional string server_key = 5;
  if (has_server_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_key().data(), this->server_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->server_key(), target);
  }

  // optional bool server_hibernation = 6;
  if (has_server_hibernation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->server_hibernation(), target);
  }

  // optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
  if (has_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->server_type(), target);
  }

  // optional uint32 server_region = 8;
  if (has_server_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->server_region(), target);
  }

  // optional float server_loadavg = 9;
  if (has_server_loadavg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->server_loadavg(), target);
  }

  // optional float server_tv_broadcast_time = 10;
  if (has_server_tv_broadcast_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->server_tv_broadcast_time(), target);
  }

  // optional float server_game_time = 11;
  if (has_server_game_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->server_game_time(), target);
  }

  // optional fixed64 server_relay_connected_steam_id = 12;
  if (has_server_relay_connected_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(12, this->server_relay_connected_steam_id(), target);
  }

  // optional uint32 relay_slots_max = 13;
  if (has_relay_slots_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->relay_slots_max(), target);
  }

  // optional int32 relays_connected = 14;
  if (has_relays_connected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->relays_connected(), target);
  }

  // optional int32 relay_clients_connected = 15;
  if (has_relay_clients_connected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->relay_clients_connected(), target);
  }

  // optional fixed64 relayed_game_server_steam_id = 16;
  if (has_relayed_game_server_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(16, this->relayed_game_server_steam_id(), target);
  }

  // optional uint32 parent_relay_count = 17;
  if (has_parent_relay_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->parent_relay_count(), target);
  }

  // optional fixed64 tv_secret_code = 18;
  if (has_tv_secret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(18, this->tv_secret_code(), target);
  }

  // optional uint32 server_version = 19;
  if (has_server_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->server_version(), target);
  }

  // optional uint32 server_cluster = 20;
  if (has_server_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->server_cluster(), target);
  }

  // optional uint32 server_steamdatagram_port = 21;
  if (has_server_steamdatagram_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->server_steamdatagram_port(), target);
  }

  // optional uint32 assigned_server_tv_port = 22;
  if (has_assigned_server_tv_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->assigned_server_tv_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerInfo)
  return target;
}

int CMsgGameServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 server_public_ip_addr = 1;
    if (has_server_public_ip_addr()) {
      total_size += 1 + 4;
    }

    // optional fixed32 server_private_ip_addr = 2;
    if (has_server_private_ip_addr()) {
      total_size += 1 + 4;
    }

    // optional uint32 server_port = 3;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }

    // optional uint32 server_tv_port = 4;
    if (has_server_tv_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_tv_port());
    }

    // optional uint32 assigned_server_tv_port = 22;
    if (has_assigned_server_tv_port()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assigned_server_tv_port());
    }

    // optional uint32 server_steamdatagram_port = 21;
    if (has_server_steamdatagram_port()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_steamdatagram_port());
    }

    // optional string server_key = 5;
    if (has_server_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_key());
    }

    // optional bool server_hibernation = 6;
    if (has_server_hibernation()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->server_type());
    }

    // optional uint32 server_region = 8;
    if (has_server_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

    // optional float server_loadavg = 9;
    if (has_server_loadavg()) {
      total_size += 1 + 4;
    }

    // optional float server_tv_broadcast_time = 10;
    if (has_server_tv_broadcast_time()) {
      total_size += 1 + 4;
    }

    // optional float server_game_time = 11;
    if (has_server_game_time()) {
      total_size += 1 + 4;
    }

    // optional fixed64 server_relay_connected_steam_id = 12;
    if (has_server_relay_connected_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 relay_slots_max = 13;
    if (has_relay_slots_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relay_slots_max());
    }

    // optional int32 relays_connected = 14;
    if (has_relays_connected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relays_connected());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 relay_clients_connected = 15;
    if (has_relay_clients_connected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relay_clients_connected());
    }

    // optional fixed64 relayed_game_server_steam_id = 16;
    if (has_relayed_game_server_steam_id()) {
      total_size += 2 + 8;
    }

    // optional uint32 parent_relay_count = 17;
    if (has_parent_relay_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parent_relay_count());
    }

    // optional fixed64 tv_secret_code = 18;
    if (has_tv_secret_code()) {
      total_size += 2 + 8;
    }

    // optional uint32 server_version = 19;
    if (has_server_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_version());
    }

    // optional uint32 server_cluster = 20;
    if (has_server_cluster()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_cluster());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameServerInfo::MergeFrom(const CMsgGameServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_public_ip_addr()) {
      set_server_public_ip_addr(from.server_public_ip_addr());
    }
    if (from.has_server_private_ip_addr()) {
      set_server_private_ip_addr(from.server_private_ip_addr());
    }
    if (from.has_server_port()) {
      set_server_port(from.server_port());
    }
    if (from.has_server_tv_port()) {
      set_server_tv_port(from.server_tv_port());
    }
    if (from.has_assigned_server_tv_port()) {
      set_assigned_server_tv_port(from.assigned_server_tv_port());
    }
    if (from.has_server_steamdatagram_port()) {
      set_server_steamdatagram_port(from.server_steamdatagram_port());
    }
    if (from.has_server_key()) {
      set_server_key(from.server_key());
    }
    if (from.has_server_hibernation()) {
      set_server_hibernation(from.server_hibernation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
    if (from.has_server_region()) {
      set_server_region(from.server_region());
    }
    if (from.has_server_loadavg()) {
      set_server_loadavg(from.server_loadavg());
    }
    if (from.has_server_tv_broadcast_time()) {
      set_server_tv_broadcast_time(from.server_tv_broadcast_time());
    }
    if (from.has_server_game_time()) {
      set_server_game_time(from.server_game_time());
    }
    if (from.has_server_relay_connected_steam_id()) {
      set_server_relay_connected_steam_id(from.server_relay_connected_steam_id());
    }
    if (from.has_relay_slots_max()) {
      set_relay_slots_max(from.relay_slots_max());
    }
    if (from.has_relays_connected()) {
      set_relays_connected(from.relays_connected());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_relay_clients_connected()) {
      set_relay_clients_connected(from.relay_clients_connected());
    }
    if (from.has_relayed_game_server_steam_id()) {
      set_relayed_game_server_steam_id(from.relayed_game_server_steam_id());
    }
    if (from.has_parent_relay_count()) {
      set_parent_relay_count(from.parent_relay_count());
    }
    if (from.has_tv_secret_code()) {
      set_tv_secret_code(from.tv_secret_code());
    }
    if (from.has_server_version()) {
      set_server_version(from.server_version());
    }
    if (from.has_server_cluster()) {
      set_server_cluster(from.server_cluster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerInfo::CopyFrom(const CMsgGameServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerInfo::IsInitialized() const {

  return true;
}

void CMsgGameServerInfo::Swap(CMsgGameServerInfo* other) {
  if (other != this) {
    std::swap(server_public_ip_addr_, other->server_public_ip_addr_);
    std::swap(server_private_ip_addr_, other->server_private_ip_addr_);
    std::swap(server_port_, other->server_port_);
    std::swap(server_tv_port_, other->server_tv_port_);
    std::swap(assigned_server_tv_port_, other->assigned_server_tv_port_);
    std::swap(server_steamdatagram_port_, other->server_steamdatagram_port_);
    std::swap(server_key_, other->server_key_);
    std::swap(server_hibernation_, other->server_hibernation_);
    std::swap(server_type_, other->server_type_);
    std::swap(server_region_, other->server_region_);
    std::swap(server_loadavg_, other->server_loadavg_);
    std::swap(server_tv_broadcast_time_, other->server_tv_broadcast_time_);
    std::swap(server_game_time_, other->server_game_time_);
    std::swap(server_relay_connected_steam_id_, other->server_relay_connected_steam_id_);
    std::swap(relay_slots_max_, other->relay_slots_max_);
    std::swap(relays_connected_, other->relays_connected_);
    std::swap(relay_clients_connected_, other->relay_clients_connected_);
    std::swap(relayed_game_server_steam_id_, other->relayed_game_server_steam_id_);
    std::swap(parent_relay_count_, other->parent_relay_count_);
    std::swap(tv_secret_code_, other->tv_secret_code_);
    std::swap(server_version_, other->server_version_);
    std::swap(server_cluster_, other->server_cluster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameServerInfo_descriptor_;
  metadata.reflection = CMsgGameServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgLeaverDetected::kSteamIdFieldNumber;
const int CMsgLeaverDetected::kLeaverStatusFieldNumber;
const int CMsgLeaverDetected::kLeaverStateFieldNumber;
const int CMsgLeaverDetected::kServerClusterFieldNumber;
const int CMsgLeaverDetected::kDisconnectReasonFieldNumber;
const int CMsgLeaverDetected::kPoorNetworkConditionsFieldNumber;
#endif  // !_MSC_VER

CMsgLeaverDetected::CMsgLeaverDetected()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgLeaverDetected)
}

void CMsgLeaverDetected::InitAsDefaultInstance() {
  leaver_state_ = const_cast< ::CMsgLeaverState*>(&::CMsgLeaverState::default_instance());
  poor_network_conditions_ = const_cast< ::CMsgPoorNetworkConditions*>(&::CMsgPoorNetworkConditions::default_instance());
}

CMsgLeaverDetected::CMsgLeaverDetected(const CMsgLeaverDetected& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgLeaverDetected)
}

void CMsgLeaverDetected::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  leaver_status_ = 0;
  leaver_state_ = NULL;
  server_cluster_ = 0u;
  disconnect_reason_ = 0;
  poor_network_conditions_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLeaverDetected::~CMsgLeaverDetected() {
  // @@protoc_insertion_point(destructor:CMsgLeaverDetected)
  SharedDtor();
}

void CMsgLeaverDetected::SharedDtor() {
  if (this != default_instance_) {
    delete leaver_state_;
    delete poor_network_conditions_;
  }
}

void CMsgLeaverDetected::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLeaverDetected::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLeaverDetected_descriptor_;
}

const CMsgLeaverDetected& CMsgLeaverDetected::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgLeaverDetected* CMsgLeaverDetected::default_instance_ = NULL;

CMsgLeaverDetected* CMsgLeaverDetected::New() const {
  return new CMsgLeaverDetected;
}

void CMsgLeaverDetected::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgLeaverDetected*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(leaver_status_, server_cluster_);
    steam_id_ = GOOGLE_ULONGLONG(0);
    if (has_leaver_state()) {
      if (leaver_state_ != NULL) leaver_state_->::CMsgLeaverState::Clear();
    }
    disconnect_reason_ = 0;
    if (has_poor_network_conditions()) {
      if (poor_network_conditions_ != NULL) poor_network_conditions_->::CMsgPoorNetworkConditions::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLeaverDetected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgLeaverDetected)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_leaver_status;
        break;
      }

      // optional .DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
      case 2: {
        if (tag == 16) {
         parse_leaver_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTALeaverStatus_t_IsValid(value)) {
            set_leaver_status(static_cast< ::DOTALeaverStatus_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_leaver_state;
        break;
      }

      // optional .CMsgLeaverState leaver_state = 4;
      case 4: {
        if (tag == 34) {
         parse_leaver_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaver_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_server_cluster;
        break;
      }

      // optional uint32 server_cluster = 5;
      case 5: {
        if (tag == 40) {
         parse_server_cluster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_cluster_)));
          set_has_server_cluster();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_disconnect_reason;
        break;
      }

      // optional .ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
      case 6: {
        if (tag == 48) {
         parse_disconnect_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ENetworkDisconnectionReason_IsValid(value)) {
            set_disconnect_reason(static_cast< ::ENetworkDisconnectionReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_poor_network_conditions;
        break;
      }

      // optional .CMsgPoorNetworkConditions poor_network_conditions = 7;
      case 7: {
        if (tag == 58) {
         parse_poor_network_conditions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_poor_network_conditions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgLeaverDetected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgLeaverDetected)
  return false;
#undef DO_
}

void CMsgLeaverDetected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgLeaverDetected)
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional .DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
  if (has_leaver_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->leaver_status(), output);
  }

  // optional .CMsgLeaverState leaver_state = 4;
  if (has_leaver_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->leaver_state(), output);
  }

  // optional uint32 server_cluster = 5;
  if (has_server_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->server_cluster(), output);
  }

  // optional .ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
  if (has_disconnect_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->disconnect_reason(), output);
  }

  // optional .CMsgPoorNetworkConditions poor_network_conditions = 7;
  if (has_poor_network_conditions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->poor_network_conditions(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgLeaverDetected)
}

::google::protobuf::uint8* CMsgLeaverDetected::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLeaverDetected)
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional .DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
  if (has_leaver_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->leaver_status(), target);
  }

  // optional .CMsgLeaverState leaver_state = 4;
  if (has_leaver_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->leaver_state(), target);
  }

  // optional uint32 server_cluster = 5;
  if (has_server_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->server_cluster(), target);
  }

  // optional .ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
  if (has_disconnect_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->disconnect_reason(), target);
  }

  // optional .CMsgPoorNetworkConditions poor_network_conditions = 7;
  if (has_poor_network_conditions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->poor_network_conditions(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLeaverDetected)
  return target;
}

int CMsgLeaverDetected::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional .DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
    if (has_leaver_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->leaver_status());
    }

    // optional .CMsgLeaverState leaver_state = 4;
    if (has_leaver_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leaver_state());
    }

    // optional uint32 server_cluster = 5;
    if (has_server_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_cluster());
    }

    // optional .ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
    if (has_disconnect_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->disconnect_reason());
    }

    // optional .CMsgPoorNetworkConditions poor_network_conditions = 7;
    if (has_poor_network_conditions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->poor_network_conditions());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLeaverDetected::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLeaverDetected* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLeaverDetected*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLeaverDetected::MergeFrom(const CMsgLeaverDetected& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_leaver_status()) {
      set_leaver_status(from.leaver_status());
    }
    if (from.has_leaver_state()) {
      mutable_leaver_state()->::CMsgLeaverState::MergeFrom(from.leaver_state());
    }
    if (from.has_server_cluster()) {
      set_server_cluster(from.server_cluster());
    }
    if (from.has_disconnect_reason()) {
      set_disconnect_reason(from.disconnect_reason());
    }
    if (from.has_poor_network_conditions()) {
      mutable_poor_network_conditions()->::CMsgPoorNetworkConditions::MergeFrom(from.poor_network_conditions());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLeaverDetected::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeaverDetected::CopyFrom(const CMsgLeaverDetected& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaverDetected::IsInitialized() const {

  return true;
}

void CMsgLeaverDetected::Swap(CMsgLeaverDetected* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(leaver_status_, other->leaver_status_);
    std::swap(leaver_state_, other->leaver_state_);
    std::swap(server_cluster_, other->server_cluster_);
    std::swap(disconnect_reason_, other->disconnect_reason_);
    std::swap(poor_network_conditions_, other->poor_network_conditions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLeaverDetected::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLeaverDetected_descriptor_;
  metadata.reflection = CMsgLeaverDetected_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgLeaverDetectedResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgLeaverDetectedResponse::CMsgLeaverDetectedResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgLeaverDetectedResponse)
}

void CMsgLeaverDetectedResponse::InitAsDefaultInstance() {
}

CMsgLeaverDetectedResponse::CMsgLeaverDetectedResponse(const CMsgLeaverDetectedResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgLeaverDetectedResponse)
}

void CMsgLeaverDetectedResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLeaverDetectedResponse::~CMsgLeaverDetectedResponse() {
  // @@protoc_insertion_point(destructor:CMsgLeaverDetectedResponse)
  SharedDtor();
}

void CMsgLeaverDetectedResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLeaverDetectedResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLeaverDetectedResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLeaverDetectedResponse_descriptor_;
}

const CMsgLeaverDetectedResponse& CMsgLeaverDetectedResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgLeaverDetectedResponse* CMsgLeaverDetectedResponse::default_instance_ = NULL;

CMsgLeaverDetectedResponse* CMsgLeaverDetectedResponse::New() const {
  return new CMsgLeaverDetectedResponse;
}

void CMsgLeaverDetectedResponse::Clear() {
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLeaverDetectedResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgLeaverDetectedResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgLeaverDetectedResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgLeaverDetectedResponse)
  return false;
#undef DO_
}

void CMsgLeaverDetectedResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgLeaverDetectedResponse)
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgLeaverDetectedResponse)
}

::google::protobuf::uint8* CMsgLeaverDetectedResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLeaverDetectedResponse)
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLeaverDetectedResponse)
  return target;
}

int CMsgLeaverDetectedResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLeaverDetectedResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLeaverDetectedResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLeaverDetectedResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLeaverDetectedResponse::MergeFrom(const CMsgLeaverDetectedResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLeaverDetectedResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeaverDetectedResponse::CopyFrom(const CMsgLeaverDetectedResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaverDetectedResponse::IsInitialized() const {

  return true;
}

void CMsgLeaverDetectedResponse::Swap(CMsgLeaverDetectedResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLeaverDetectedResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLeaverDetectedResponse_descriptor_;
  metadata.reflection = CMsgLeaverDetectedResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyPlayerStats::kPlayerAccountIdFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kMatchIdFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kMatchCompletedFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kLevelFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kKillsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kDeathsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kAssistsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kLastHitsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kDeniesFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kGpmFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kXppmFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kStunsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kHealingFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kTowerKillsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kRoshanKillsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kTeamIdFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kLeagueIdFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kDelayFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyPlayerStats::CMsgDOTAFantasyPlayerStats()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyPlayerStats)
}

void CMsgDOTAFantasyPlayerStats::InitAsDefaultInstance() {
}

CMsgDOTAFantasyPlayerStats::CMsgDOTAFantasyPlayerStats(const CMsgDOTAFantasyPlayerStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerStats)
}

void CMsgDOTAFantasyPlayerStats::SharedCtor() {
  _cached_size_ = 0;
  player_account_id_ = 0u;
  match_id_ = GOOGLE_ULONGLONG(0);
  match_completed_ = false;
  level_ = 0u;
  kills_ = 0u;
  deaths_ = 0u;
  assists_ = 0u;
  last_hits_ = 0u;
  denies_ = 0u;
  gpm_ = 0;
  xppm_ = 0;
  stuns_ = 0;
  healing_ = 0;
  tower_kills_ = 0u;
  roshan_kills_ = 0u;
  team_id_ = 0u;
  league_id_ = 0u;
  delay_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyPlayerStats::~CMsgDOTAFantasyPlayerStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerStats)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyPlayerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyPlayerStats_descriptor_;
}

const CMsgDOTAFantasyPlayerStats& CMsgDOTAFantasyPlayerStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyPlayerStats* CMsgDOTAFantasyPlayerStats::default_instance_ = NULL;

CMsgDOTAFantasyPlayerStats* CMsgDOTAFantasyPlayerStats::New() const {
  return new CMsgDOTAFantasyPlayerStats;
}

void CMsgDOTAFantasyPlayerStats::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAFantasyPlayerStats*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(match_id_, last_hits_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(denies_, team_id_);
  }
  ZR_(league_id_, delay_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAFantasyPlayerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyPlayerStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_)));
          set_has_player_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (tag == 16) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_match_completed;
        break;
      }

      // optional bool match_completed = 3;
      case 3: {
        if (tag == 24) {
         parse_match_completed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &match_completed_)));
          set_has_match_completed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (tag == 32) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_kills;
        break;
      }

      // optional uint32 kills = 5;
      case 5: {
        if (tag == 40) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
          set_has_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_deaths;
        break;
      }

      // optional uint32 deaths = 6;
      case 6: {
        if (tag == 48) {
         parse_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
          set_has_deaths();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_assists;
        break;
      }

      // optional uint32 assists = 7;
      case 7: {
        if (tag == 56) {
         parse_assists:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
          set_has_assists();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_last_hits;
        break;
      }

      // optional uint32 last_hits = 8;
      case 8: {
        if (tag == 64) {
         parse_last_hits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_hits_)));
          set_has_last_hits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_denies;
        break;
      }

      // optional uint32 denies = 9;
      case 9: {
        if (tag == 72) {
         parse_denies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &denies_)));
          set_has_denies();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_gpm;
        break;
      }

      // optional float gpm = 10;
      case 10: {
        if (tag == 85) {
         parse_gpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gpm_)));
          set_has_gpm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_xppm;
        break;
      }

      // optional float xppm = 11;
      case 11: {
        if (tag == 93) {
         parse_xppm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xppm_)));
          set_has_xppm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_stuns;
        break;
      }

      // optional float stuns = 12;
      case 12: {
        if (tag == 101) {
         parse_stuns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stuns_)));
          set_has_stuns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_healing;
        break;
      }

      // optional float healing = 13;
      case 13: {
        if (tag == 109) {
         parse_healing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &healing_)));
          set_has_healing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_tower_kills;
        break;
      }

      // optional uint32 tower_kills = 14;
      case 14: {
        if (tag == 112) {
         parse_tower_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_kills_)));
          set_has_tower_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_roshan_kills;
        break;
      }

      // optional uint32 roshan_kills = 15;
      case 15: {
        if (tag == 120) {
         parse_roshan_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roshan_kills_)));
          set_has_roshan_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 16;
      case 16: {
        if (tag == 128) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_league_id;
        break;
      }

      // optional uint32 league_id = 17;
      case 17: {
        if (tag == 136) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_delay;
        break;
      }

      // optional uint32 delay = 18;
      case 18: {
        if (tag == 144) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyPlayerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyPlayerStats)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyPlayerStats)
  // optional uint32 player_account_id = 1;
  if (has_player_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_account_id(), output);
  }

  // optional uint64 match_id = 2;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional bool match_completed = 3;
  if (has_match_completed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->match_completed(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 kills = 5;
  if (has_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->kills(), output);
  }

  // optional uint32 deaths = 6;
  if (has_deaths()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->deaths(), output);
  }

  // optional uint32 assists = 7;
  if (has_assists()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->assists(), output);
  }

  // optional uint32 last_hits = 8;
  if (has_last_hits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_hits(), output);
  }

  // optional uint32 denies = 9;
  if (has_denies()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->denies(), output);
  }

  // optional float gpm = 10;
  if (has_gpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->gpm(), output);
  }

  // optional float xppm = 11;
  if (has_xppm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->xppm(), output);
  }

  // optional float stuns = 12;
  if (has_stuns()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->stuns(), output);
  }

  // optional float healing = 13;
  if (has_healing()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->healing(), output);
  }

  // optional uint32 tower_kills = 14;
  if (has_tower_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->tower_kills(), output);
  }

  // optional uint32 roshan_kills = 15;
  if (has_roshan_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->roshan_kills(), output);
  }

  // optional uint32 team_id = 16;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->team_id(), output);
  }

  // optional uint32 league_id = 17;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->league_id(), output);
  }

  // optional uint32 delay = 18;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->delay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyPlayerStats)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerStats)
  // optional uint32 player_account_id = 1;
  if (has_player_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_account_id(), target);
  }

  // optional uint64 match_id = 2;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional bool match_completed = 3;
  if (has_match_completed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->match_completed(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 kills = 5;
  if (has_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->kills(), target);
  }

  // optional uint32 deaths = 6;
  if (has_deaths()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->deaths(), target);
  }

  // optional uint32 assists = 7;
  if (has_assists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->assists(), target);
  }

  // optional uint32 last_hits = 8;
  if (has_last_hits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_hits(), target);
  }

  // optional uint32 denies = 9;
  if (has_denies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->denies(), target);
  }

  // optional float gpm = 10;
  if (has_gpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->gpm(), target);
  }

  // optional float xppm = 11;
  if (has_xppm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->xppm(), target);
  }

  // optional float stuns = 12;
  if (has_stuns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->stuns(), target);
  }

  // optional float healing = 13;
  if (has_healing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->healing(), target);
  }

  // optional uint32 tower_kills = 14;
  if (has_tower_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->tower_kills(), target);
  }

  // optional uint32 roshan_kills = 15;
  if (has_roshan_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->roshan_kills(), target);
  }

  // optional uint32 team_id = 16;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->team_id(), target);
  }

  // optional uint32 league_id = 17;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->league_id(), target);
  }

  // optional uint32 delay = 18;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->delay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerStats)
  return target;
}

int CMsgDOTAFantasyPlayerStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_account_id = 1;
    if (has_player_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id());
    }

    // optional uint64 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional bool match_completed = 3;
    if (has_match_completed()) {
      total_size += 1 + 1;
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 kills = 5;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 6;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 assists = 7;
    if (has_assists()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

    // optional uint32 last_hits = 8;
    if (has_last_hits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_hits());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 denies = 9;
    if (has_denies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->denies());
    }

    // optional float gpm = 10;
    if (has_gpm()) {
      total_size += 1 + 4;
    }

    // optional float xppm = 11;
    if (has_xppm()) {
      total_size += 1 + 4;
    }

    // optional float stuns = 12;
    if (has_stuns()) {
      total_size += 1 + 4;
    }

    // optional float healing = 13;
    if (has_healing()) {
      total_size += 1 + 4;
    }

    // optional uint32 tower_kills = 14;
    if (has_tower_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_kills());
    }

    // optional uint32 roshan_kills = 15;
    if (has_roshan_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roshan_kills());
    }

    // optional uint32 team_id = 16;
    if (has_team_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 league_id = 17;
    if (has_league_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 delay = 18;
    if (has_delay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAFantasyPlayerStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerStats::MergeFrom(const CMsgDOTAFantasyPlayerStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_account_id()) {
      set_player_account_id(from.player_account_id());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_match_completed()) {
      set_match_completed(from.match_completed());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_kills()) {
      set_kills(from.kills());
    }
    if (from.has_deaths()) {
      set_deaths(from.deaths());
    }
    if (from.has_assists()) {
      set_assists(from.assists());
    }
    if (from.has_last_hits()) {
      set_last_hits(from.last_hits());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_denies()) {
      set_denies(from.denies());
    }
    if (from.has_gpm()) {
      set_gpm(from.gpm());
    }
    if (from.has_xppm()) {
      set_xppm(from.xppm());
    }
    if (from.has_stuns()) {
      set_stuns(from.stuns());
    }
    if (from.has_healing()) {
      set_healing(from.healing());
    }
    if (from.has_tower_kills()) {
      set_tower_kills(from.tower_kills());
    }
    if (from.has_roshan_kills()) {
      set_roshan_kills(from.roshan_kills());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAFantasyPlayerStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerStats::CopyFrom(const CMsgDOTAFantasyPlayerStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerStats::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyPlayerStats::Swap(CMsgDOTAFantasyPlayerStats* other) {
  if (other != this) {
    std::swap(player_account_id_, other->player_account_id_);
    std::swap(match_id_, other->match_id_);
    std::swap(match_completed_, other->match_completed_);
    std::swap(level_, other->level_);
    std::swap(kills_, other->kills_);
    std::swap(deaths_, other->deaths_);
    std::swap(assists_, other->assists_);
    std::swap(last_hits_, other->last_hits_);
    std::swap(denies_, other->denies_);
    std::swap(gpm_, other->gpm_);
    std::swap(xppm_, other->xppm_);
    std::swap(stuns_, other->stuns_);
    std::swap(healing_, other->healing_);
    std::swap(tower_kills_, other->tower_kills_);
    std::swap(roshan_kills_, other->roshan_kills_);
    std::swap(team_id_, other->team_id_);
    std::swap(league_id_, other->league_id_);
    std::swap(delay_, other->delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyPlayerStats_descriptor_;
  metadata.reflection = CMsgDOTAFantasyPlayerStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyMatch::kMatchIdFieldNumber;
const int CMsgDOTAFantasyMatch::kLeagueIdFieldNumber;
const int CMsgDOTAFantasyMatch::kSeriesIdFieldNumber;
const int CMsgDOTAFantasyMatch::kStartTimeFieldNumber;
const int CMsgDOTAFantasyMatch::kSeriesTypeFieldNumber;
const int CMsgDOTAFantasyMatch::kTeam1FieldNumber;
const int CMsgDOTAFantasyMatch::kTeam2FieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyMatch::CMsgDOTAFantasyMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyMatch)
}

void CMsgDOTAFantasyMatch::InitAsDefaultInstance() {
}

CMsgDOTAFantasyMatch::CMsgDOTAFantasyMatch(const CMsgDOTAFantasyMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyMatch)
}

void CMsgDOTAFantasyMatch::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  league_id_ = 0u;
  series_id_ = 0u;
  start_time_ = 0u;
  series_type_ = 0u;
  team_1_ = 0u;
  team_2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyMatch::~CMsgDOTAFantasyMatch() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyMatch)
  SharedDtor();
}

void CMsgDOTAFantasyMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyMatch_descriptor_;
}

const CMsgDOTAFantasyMatch& CMsgDOTAFantasyMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyMatch* CMsgDOTAFantasyMatch::default_instance_ = NULL;

CMsgDOTAFantasyMatch* CMsgDOTAFantasyMatch::New() const {
  return new CMsgDOTAFantasyMatch;
}

void CMsgDOTAFantasyMatch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAFantasyMatch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(match_id_, team_2_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAFantasyMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_league_id;
        break;
      }

      // optional uint32 league_id = 2;
      case 2: {
        if (tag == 16) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_series_id;
        break;
      }

      // optional uint32 series_id = 3;
      case 3: {
        if (tag == 24) {
         parse_series_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_id_)));
          set_has_series_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start_time;
        break;
      }

      // optional uint32 start_time = 4;
      case 4: {
        if (tag == 32) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_series_type;
        break;
      }

      // optional uint32 series_type = 5;
      case 5: {
        if (tag == 40) {
         parse_series_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
          set_has_series_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_team_1;
        break;
      }

      // optional uint32 team_1 = 6;
      case 6: {
        if (tag == 48) {
         parse_team_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_1_)));
          set_has_team_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_team_2;
        break;
      }

      // optional uint32 team_2 = 7;
      case 7: {
        if (tag == 56) {
         parse_team_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_2_)));
          set_has_team_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyMatch)
  return false;
#undef DO_
}

void CMsgDOTAFantasyMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyMatch)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 league_id = 2;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->league_id(), output);
  }

  // optional uint32 series_id = 3;
  if (has_series_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->series_id(), output);
  }

  // optional uint32 start_time = 4;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_time(), output);
  }

  // optional uint32 series_type = 5;
  if (has_series_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->series_type(), output);
  }

  // optional uint32 team_1 = 6;
  if (has_team_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->team_1(), output);
  }

  // optional uint32 team_2 = 7;
  if (has_team_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->team_2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyMatch)
}

::google::protobuf::uint8* CMsgDOTAFantasyMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyMatch)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 league_id = 2;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->league_id(), target);
  }

  // optional uint32 series_id = 3;
  if (has_series_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->series_id(), target);
  }

  // optional uint32 start_time = 4;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_time(), target);
  }

  // optional uint32 series_type = 5;
  if (has_series_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->series_type(), target);
  }

  // optional uint32 team_1 = 6;
  if (has_team_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->team_1(), target);
  }

  // optional uint32 team_2 = 7;
  if (has_team_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->team_2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyMatch)
  return target;
}

int CMsgDOTAFantasyMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 league_id = 2;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 series_id = 3;
    if (has_series_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_id());
    }

    // optional uint32 start_time = 4;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional uint32 series_type = 5;
    if (has_series_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

    // optional uint32 team_1 = 6;
    if (has_team_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_1());
    }

    // optional uint32 team_2 = 7;
    if (has_team_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAFantasyMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAFantasyMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyMatch::MergeFrom(const CMsgDOTAFantasyMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_series_id()) {
      set_series_id(from.series_id());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_series_type()) {
      set_series_type(from.series_type());
    }
    if (from.has_team_1()) {
      set_team_1(from.team_1());
    }
    if (from.has_team_2()) {
      set_team_2(from.team_2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAFantasyMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyMatch::CopyFrom(const CMsgDOTAFantasyMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyMatch::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyMatch::Swap(CMsgDOTAFantasyMatch* other) {
  if (other != this) {
    std::swap(match_id_, other->match_id_);
    std::swap(league_id_, other->league_id_);
    std::swap(series_id_, other->series_id_);
    std::swap(start_time_, other->start_time_);
    std::swap(series_type_, other->series_type_);
    std::swap(team_1_, other->team_1_);
    std::swap(team_2_, other->team_2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAFantasyMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyMatch_descriptor_;
  metadata.reflection = CMsgDOTAFantasyMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgServerToGCRealtimeStats::kDelayedFieldNumber;
const int CMsgServerToGCRealtimeStats::kCurrentFieldNumber;
#endif  // !_MSC_VER

CMsgServerToGCRealtimeStats::CMsgServerToGCRealtimeStats()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerToGCRealtimeStats)
}

void CMsgServerToGCRealtimeStats::InitAsDefaultInstance() {
  delayed_ = const_cast< ::CMsgDOTARealtimeGameStatsTerse*>(&::CMsgDOTARealtimeGameStatsTerse::default_instance());
  current_ = const_cast< ::CMsgDOTARealtimeGameStats*>(&::CMsgDOTARealtimeGameStats::default_instance());
}

CMsgServerToGCRealtimeStats::CMsgServerToGCRealtimeStats(const CMsgServerToGCRealtimeStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCRealtimeStats)
}

void CMsgServerToGCRealtimeStats::SharedCtor() {
  _cached_size_ = 0;
  delayed_ = NULL;
  current_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerToGCRealtimeStats::~CMsgServerToGCRealtimeStats() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCRealtimeStats)
  SharedDtor();
}

void CMsgServerToGCRealtimeStats::SharedDtor() {
  if (this != default_instance_) {
    delete delayed_;
    delete current_;
  }
}

void CMsgServerToGCRealtimeStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCRealtimeStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerToGCRealtimeStats_descriptor_;
}

const CMsgServerToGCRealtimeStats& CMsgServerToGCRealtimeStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerToGCRealtimeStats* CMsgServerToGCRealtimeStats::default_instance_ = NULL;

CMsgServerToGCRealtimeStats* CMsgServerToGCRealtimeStats::New() const {
  return new CMsgServerToGCRealtimeStats;
}

void CMsgServerToGCRealtimeStats::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_delayed()) {
      if (delayed_ != NULL) delayed_->::CMsgDOTARealtimeGameStatsTerse::Clear();
    }
    if (has_current()) {
      if (current_ != NULL) current_->::CMsgDOTARealtimeGameStats::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerToGCRealtimeStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerToGCRealtimeStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTARealtimeGameStatsTerse delayed = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delayed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_current;
        break;
      }

      // optional .CMsgDOTARealtimeGameStats current = 2;
      case 2: {
        if (tag == 18) {
         parse_current:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_current()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerToGCRealtimeStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerToGCRealtimeStats)
  return false;
#undef DO_
}

void CMsgServerToGCRealtimeStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerToGCRealtimeStats)
  // optional .CMsgDOTARealtimeGameStatsTerse delayed = 1;
  if (has_delayed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->delayed(), output);
  }

  // optional .CMsgDOTARealtimeGameStats current = 2;
  if (has_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->current(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerToGCRealtimeStats)
}

::google::protobuf::uint8* CMsgServerToGCRealtimeStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCRealtimeStats)
  // optional .CMsgDOTARealtimeGameStatsTerse delayed = 1;
  if (has_delayed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->delayed(), target);
  }

  // optional .CMsgDOTARealtimeGameStats current = 2;
  if (has_current()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->current(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCRealtimeStats)
  return target;
}

int CMsgServerToGCRealtimeStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgDOTARealtimeGameStatsTerse delayed = 1;
    if (has_delayed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->delayed());
    }

    // optional .CMsgDOTARealtimeGameStats current = 2;
    if (has_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->current());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCRealtimeStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerToGCRealtimeStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerToGCRealtimeStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerToGCRealtimeStats::MergeFrom(const CMsgServerToGCRealtimeStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_delayed()) {
      mutable_delayed()->::CMsgDOTARealtimeGameStatsTerse::MergeFrom(from.delayed());
    }
    if (from.has_current()) {
      mutable_current()->::CMsgDOTARealtimeGameStats::MergeFrom(from.current());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerToGCRealtimeStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCRealtimeStats::CopyFrom(const CMsgServerToGCRealtimeStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCRealtimeStats::IsInitialized() const {

  return true;
}

void CMsgServerToGCRealtimeStats::Swap(CMsgServerToGCRealtimeStats* other) {
  if (other != this) {
    std::swap(delayed_, other->delayed_);
    std::swap(current_, other->current_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerToGCRealtimeStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerToGCRealtimeStats_descriptor_;
  metadata.reflection = CMsgServerToGCRealtimeStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToServerRealtimeStatsStartStop::kDelayedFieldNumber;
const int CMsgGCToServerRealtimeStatsStartStop::kCurrentFieldNumber;
#endif  // !_MSC_VER

CMsgGCToServerRealtimeStatsStartStop::CMsgGCToServerRealtimeStatsStartStop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToServerRealtimeStatsStartStop)
}

void CMsgGCToServerRealtimeStatsStartStop::InitAsDefaultInstance() {
}

CMsgGCToServerRealtimeStatsStartStop::CMsgGCToServerRealtimeStatsStartStop(const CMsgGCToServerRealtimeStatsStartStop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerRealtimeStatsStartStop)
}

void CMsgGCToServerRealtimeStatsStartStop::SharedCtor() {
  _cached_size_ = 0;
  delayed_ = false;
  current_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToServerRealtimeStatsStartStop::~CMsgGCToServerRealtimeStatsStartStop() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerRealtimeStatsStartStop)
  SharedDtor();
}

void CMsgGCToServerRealtimeStatsStartStop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToServerRealtimeStatsStartStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToServerRealtimeStatsStartStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToServerRealtimeStatsStartStop_descriptor_;
}

const CMsgGCToServerRealtimeStatsStartStop& CMsgGCToServerRealtimeStatsStartStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGCToServerRealtimeStatsStartStop* CMsgGCToServerRealtimeStatsStartStop::default_instance_ = NULL;

CMsgGCToServerRealtimeStatsStartStop* CMsgGCToServerRealtimeStatsStartStop::New() const {
  return new CMsgGCToServerRealtimeStatsStartStop;
}

void CMsgGCToServerRealtimeStatsStartStop::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGCToServerRealtimeStatsStartStop*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(delayed_, current_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToServerRealtimeStatsStartStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToServerRealtimeStatsStartStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool delayed = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delayed_)));
          set_has_delayed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_current;
        break;
      }

      // optional bool current = 2;
      case 2: {
        if (tag == 16) {
         parse_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &current_)));
          set_has_current();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToServerRealtimeStatsStartStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToServerRealtimeStatsStartStop)
  return false;
#undef DO_
}

void CMsgGCToServerRealtimeStatsStartStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToServerRealtimeStatsStartStop)
  // optional bool delayed = 1;
  if (has_delayed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->delayed(), output);
  }

  // optional bool current = 2;
  if (has_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->current(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToServerRealtimeStatsStartStop)
}

::google::protobuf::uint8* CMsgGCToServerRealtimeStatsStartStop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerRealtimeStatsStartStop)
  // optional bool delayed = 1;
  if (has_delayed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->delayed(), target);
  }

  // optional bool current = 2;
  if (has_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->current(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerRealtimeStatsStartStop)
  return target;
}

int CMsgGCToServerRealtimeStatsStartStop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool delayed = 1;
    if (has_delayed()) {
      total_size += 1 + 1;
    }

    // optional bool current = 2;
    if (has_current()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToServerRealtimeStatsStartStop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToServerRealtimeStatsStartStop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToServerRealtimeStatsStartStop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToServerRealtimeStatsStartStop::MergeFrom(const CMsgGCToServerRealtimeStatsStartStop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_delayed()) {
      set_delayed(from.delayed());
    }
    if (from.has_current()) {
      set_current(from.current());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToServerRealtimeStatsStartStop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerRealtimeStatsStartStop::CopyFrom(const CMsgGCToServerRealtimeStatsStartStop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerRealtimeStatsStartStop::IsInitialized() const {

  return true;
}

void CMsgGCToServerRealtimeStatsStartStop::Swap(CMsgGCToServerRealtimeStatsStartStop* other) {
  if (other != this) {
    std::swap(delayed_, other->delayed_);
    std::swap(current_, other->current_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToServerRealtimeStatsStartStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToServerRealtimeStatsStartStop_descriptor_;
  metadata.reflection = CMsgGCToServerRealtimeStatsStartStop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::kDotaTeamFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::kWinnerFieldNumber;
#endif  // !_MSC_VER

CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::InitAsDefaultInstance() {
}

CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData(const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::SharedCtor() {
  _cached_size_ = 0;
  dota_team_ = 0u;
  winner_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::~CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  SharedDtor();
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_descriptor_;
}

const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::default_instance_ = NULL;

CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::New() const {
  return new CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData;
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(dota_team_, winner_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dota_team = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dota_team_)));
          set_has_dota_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_winner;
        break;
      }

      // optional bool winner = 2;
      case 2: {
        if (tag == 16) {
         parse_winner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &winner_)));
          set_has_winner();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  return false;
#undef DO_
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  // optional uint32 dota_team = 1;
  if (has_dota_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dota_team(), output);
  }

  // optional bool winner = 2;
  if (has_winner()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->winner(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
}

::google::protobuf::uint8* CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  // optional uint32 dota_team = 1;
  if (has_dota_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dota_team(), target);
  }

  // optional bool winner = 2;
  if (has_winner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->winner(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  return target;
}

int CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dota_team = 1;
    if (has_dota_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dota_team());
    }

    // optional bool winner = 2;
    if (has_winner()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::MergeFrom(const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dota_team()) {
      set_dota_team(from.dota_team());
    }
    if (from.has_winner()) {
      set_winner(from.winner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::CopyFrom(const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::IsInitialized() const {

  return true;
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::Swap(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* other) {
  if (other != this) {
    std::swap(dota_team_, other->dota_team_);
    std::swap(winner_, other->winner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_descriptor_;
  metadata.reflection = CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGameMatchSignOut_CTeam_CPlayer::kSteamIdFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kHeroIdFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kItemsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kGoldFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kKillsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kDeathsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kAssistsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kLeaverStatusFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kLastHitsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kDeniesFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kGoldPerMinFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kXpPerMinuteFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kGoldSpentFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kLevelFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kHeroDamageFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kTowerDamageFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kHeroHealingFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kTimeLastSeenFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kSupportAbilityValueFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kPartyIdFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kScaledKillsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kScaledDeathsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kScaledAssistsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kClaimedFarmGoldFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kSupportGoldFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kClaimedDeniesFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kClaimedMissesFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kMissesFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kAbilityUpgradesFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kAdditionalUnitsInventoryFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kNetWorthFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kCustomGameDataFieldNumber;
#endif  // !_MSC_VER

CMsgGameMatchSignOut_CTeam_CPlayer::CMsgGameMatchSignOut_CTeam_CPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGameMatchSignOut.CTeam.CPlayer)
}

void CMsgGameMatchSignOut_CTeam_CPlayer::InitAsDefaultInstance() {
  custom_game_data_ = const_cast< ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData*>(&::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::default_instance());
}

CMsgGameMatchSignOut_CTeam_CPlayer::CMsgGameMatchSignOut_CTeam_CPlayer(const CMsgGameMatchSignOut_CTeam_CPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOut.CTeam.CPlayer)
}

void CMsgGameMatchSignOut_CTeam_CPlayer::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  hero_id_ = 0u;
  gold_ = 0u;
  kills_ = 0u;
  deaths_ = 0u;
  assists_ = 0u;
  leaver_status_ = 0u;
  last_hits_ = 0u;
  denies_ = 0u;
  gold_per_min_ = 0u;
  xp_per_minute_ = 0u;
  gold_spent_ = 0u;
  level_ = 0u;
  hero_damage_ = 0u;
  tower_damage_ = 0u;
  hero_healing_ = 0u;
  time_last_seen_ = 0u;
  support_ability_value_ = 0u;
  party_id_ = GOOGLE_ULONGLONG(0);
  scaled_kills_ = 0;
  scaled_deaths_ = 0;
  scaled_assists_ = 0;
  claimed_farm_gold_ = 0u;
  support_gold_ = 0u;
  claimed_denies_ = 0u;
  claimed_misses_ = 0u;
  misses_ = 0u;
  net_worth_ = 0u;
  custom_game_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameMatchSignOut_CTeam_CPlayer::~CMsgGameMatchSignOut_CTeam_CPlayer() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOut.CTeam.CPlayer)
  SharedDtor();
}

void CMsgGameMatchSignOut_CTeam_CPlayer::SharedDtor() {
  if (this != default_instance_) {
    delete custom_game_data_;
  }
}

void CMsgGameMatchSignOut_CTeam_CPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut_CTeam_CPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameMatchSignOut_CTeam_CPlayer_descriptor_;
}

const CMsgGameMatchSignOut_CTeam_CPlayer& CMsgGameMatchSignOut_CTeam_CPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGameMatchSignOut_CTeam_CPlayer* CMsgGameMatchSignOut_CTeam_CPlayer::default_instance_ = NULL;

CMsgGameMatchSignOut_CTeam_CPlayer* CMsgGameMatchSignOut_CTeam_CPlayer::New() const {
  return new CMsgGameMatchSignOut_CTeam_CPlayer;
}

void CMsgGameMatchSignOut_CTeam_CPlayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGameMatchSignOut_CTeam_CPlayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 251) {
    ZR_(hero_id_, leaver_status_);
    steam_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(last_hits_, tower_damage_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(hero_healing_, claimed_farm_gold_);
  }
  if (_has_bits_[24 / 32] & 3472883712) {
    ZR_(support_gold_, claimed_misses_);
    ZR_(misses_, net_worth_);
    if (has_custom_game_data()) {
      if (custom_game_data_ != NULL) custom_game_data_->::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  ability_upgrades_.Clear();
  additional_units_inventory_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameMatchSignOut_CTeam_CPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGameMatchSignOut.CTeam.CPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hero_id;
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (tag == 24) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_items;
        break;
      }

      // repeated uint32 items = 4;
      case 4: {
        if (tag == 32) {
         parse_items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_items())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_items())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_items;
        if (input->ExpectTag(40)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 5;
      case 5: {
        if (tag == 40) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_kills;
        break;
      }

      // optional uint32 kills = 6;
      case 6: {
        if (tag == 48) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
          set_has_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_deaths;
        break;
      }

      // optional uint32 deaths = 7;
      case 7: {
        if (tag == 56) {
         parse_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
          set_has_deaths();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_assists;
        break;
      }

      // optional uint32 assists = 8;
      case 8: {
        if (tag == 64) {
         parse_assists:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
          set_has_assists();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_leaver_status;
        break;
      }

      // optional uint32 leaver_status = 9;
      case 9: {
        if (tag == 72) {
         parse_leaver_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaver_status_)));
          set_has_leaver_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_last_hits;
        break;
      }

      // optional uint32 last_hits = 10;
      case 10: {
        if (tag == 80) {
         parse_last_hits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_hits_)));
          set_has_last_hits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_denies;
        break;
      }

      // optional uint32 denies = 11;
      case 11: {
        if (tag == 88) {
         parse_denies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &denies_)));
          set_has_denies();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_gold_per_min;
        break;
      }

      // optional uint32 gold_per_min = 12;
      case 12: {
        if (tag == 96) {
         parse_gold_per_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_per_min_)));
          set_has_gold_per_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_xp_per_minute;
        break;
      }

      // optional uint32 xp_per_minute = 13;
      case 13: {
        if (tag == 104) {
         parse_xp_per_minute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_per_minute_)));
          set_has_xp_per_minute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_gold_spent;
        break;
      }

      // optional uint32 gold_spent = 14;
      case 14: {
        if (tag == 112) {
         parse_gold_spent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_spent_)));
          set_has_gold_spent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_level;
        break;
      }

      // optional uint32 level = 15;
      case 15: {
        if (tag == 120) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_hero_damage;
        break;
      }

      // optional uint32 hero_damage = 16;
      case 16: {
        if (tag == 128) {
         parse_hero_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_damage_)));
          set_has_hero_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_tower_damage;
        break;
      }

      // optional uint32 tower_damage = 17;
      case 17: {
        if (tag == 136) {
         parse_tower_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_damage_)));
          set_has_tower_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_hero_healing;
        break;
      }

      // optional uint32 hero_healing = 18;
      case 18: {
        if (tag == 144) {
         parse_hero_healing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_healing_)));
          set_has_hero_healing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_time_last_seen;
        break;
      }

      // optional uint32 time_last_seen = 19;
      case 19: {
        if (tag == 152) {
         parse_time_last_seen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_last_seen_)));
          set_has_time_last_seen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_support_ability_value;
        break;
      }

      // optional uint32 support_ability_value = 20;
      case 20: {
        if (tag == 160) {
         parse_support_ability_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_ability_value_)));
          set_has_support_ability_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_party_id;
        break;
      }

      // optional uint64 party_id = 21;
      case 21: {
        if (tag == 168) {
         parse_party_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
          set_has_party_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(197)) goto parse_scaled_kills;
        break;
      }

      // optional float scaled_kills = 24;
      case 24: {
        if (tag == 197) {
         parse_scaled_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaled_kills_)));
          set_has_scaled_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(205)) goto parse_scaled_deaths;
        break;
      }

      // optional float scaled_deaths = 25;
      case 25: {
        if (tag == 205) {
         parse_scaled_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaled_deaths_)));
          set_has_scaled_deaths();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(213)) goto parse_scaled_assists;
        break;
      }

      // optional float scaled_assists = 26;
      case 26: {
        if (tag == 213) {
         parse_scaled_assists:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaled_assists_)));
          set_has_scaled_assists();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_claimed_farm_gold;
        break;
      }

      // optional uint32 claimed_farm_gold = 27;
      case 27: {
        if (tag == 216) {
         parse_claimed_farm_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claimed_farm_gold_)));
          set_has_claimed_farm_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_support_gold;
        break;
      }

      // optional uint32 support_gold = 28;
      case 28: {
        if (tag == 224) {
         parse_support_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_gold_)));
          set_has_support_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_claimed_denies;
        break;
      }

      // optional uint32 claimed_denies = 29;
      case 29: {
        if (tag == 232) {
         parse_claimed_denies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claimed_denies_)));
          set_has_claimed_denies();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_claimed_misses;
        break;
      }

      // optional uint32 claimed_misses = 30;
      case 30: {
        if (tag == 240) {
         parse_claimed_misses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claimed_misses_)));
          set_has_claimed_misses();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_misses;
        break;
      }

      // optional uint32 misses = 31;
      case 31: {
        if (tag == 248) {
         parse_misses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &misses_)));
          set_has_misses();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_ability_upgrades;
        break;
      }

      // repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 32;
      case 32: {
        if (tag == 258) {
         parse_ability_upgrades:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ability_upgrades()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_ability_upgrades;
        if (input->ExpectTag(266)) goto parse_additional_units_inventory;
        break;
      }

      // repeated .CMatchAdditionalUnitInventory additional_units_inventory = 33;
      case 33: {
        if (tag == 266) {
         parse_additional_units_inventory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_additional_units_inventory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_additional_units_inventory;
        if (input->ExpectTag(272)) goto parse_net_worth;
        break;
      }

      // optional uint32 net_worth = 34;
      case 34: {
        if (tag == 272) {
         parse_net_worth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_worth_)));
          set_has_net_worth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_custom_game_data;
        break;
      }

      // optional .CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData custom_game_data = 35;
      case 35: {
        if (tag == 282) {
         parse_custom_game_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_custom_game_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGameMatchSignOut.CTeam.CPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGameMatchSignOut.CTeam.CPlayer)
  return false;
#undef DO_
}

void CMsgGameMatchSignOut_CTeam_CPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGameMatchSignOut.CTeam.CPlayer)
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 hero_id = 3;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  // repeated uint32 items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->items(i), output);
  }

  // optional uint32 gold = 5;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gold(), output);
  }

  // optional uint32 kills = 6;
  if (has_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->kills(), output);
  }

  // optional uint32 deaths = 7;
  if (has_deaths()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->deaths(), output);
  }

  // optional uint32 assists = 8;
  if (has_assists()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->assists(), output);
  }

  // optional uint32 leaver_status = 9;
  if (has_leaver_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->leaver_status(), output);
  }

  // optional uint32 last_hits = 10;
  if (has_last_hits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->last_hits(), output);
  }

  // optional uint32 denies = 11;
  if (has_denies()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->denies(), output);
  }

  // optional uint32 gold_per_min = 12;
  if (has_gold_per_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->gold_per_min(), output);
  }

  // optional uint32 xp_per_minute = 13;
  if (has_xp_per_minute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->xp_per_minute(), output);
  }

  // optional uint32 gold_spent = 14;
  if (has_gold_spent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->gold_spent(), output);
  }

  // optional uint32 level = 15;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->level(), output);
  }

  // optional uint32 hero_damage = 16;
  if (has_hero_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->hero_damage(), output);
  }

  // optional uint32 tower_damage = 17;
  if (has_tower_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->tower_damage(), output);
  }

  // optional uint32 hero_healing = 18;
  if (has_hero_healing()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->hero_healing(), output);
  }

  // optional uint32 time_last_seen = 19;
  if (has_time_last_seen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->time_last_seen(), output);
  }

  // optional uint32 support_ability_value = 20;
  if (has_support_ability_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->support_ability_value(), output);
  }

  // optional uint64 party_id = 21;
  if (has_party_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->party_id(), output);
  }

  // optional float scaled_kills = 24;
  if (has_scaled_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->scaled_kills(), output);
  }

  // optional float scaled_deaths = 25;
  if (has_scaled_deaths()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->scaled_deaths(), output);
  }

  // optional float scaled_assists = 26;
  if (has_scaled_assists()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->scaled_assists(), output);
  }

  // optional uint32 claimed_farm_gold = 27;
  if (has_claimed_farm_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->claimed_farm_gold(), output);
  }

  // optional uint32 support_gold = 28;
  if (has_support_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->support_gold(), output);
  }

  // optional uint32 claimed_denies = 29;
  if (has_claimed_denies()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->claimed_denies(), output);
  }

  // optional uint32 claimed_misses = 30;
  if (has_claimed_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->claimed_misses(), output);
  }

  // optional uint32 misses = 31;
  if (has_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->misses(), output);
  }

  // repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 32;
  for (int i = 0; i < this->ability_upgrades_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->ability_upgrades(i), output);
  }

  // repeated .CMatchAdditionalUnitInventory additional_units_inventory = 33;
  for (int i = 0; i < this->additional_units_inventory_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->additional_units_inventory(i), output);
  }

  // optional uint32 net_worth = 34;
  if (has_net_worth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->net_worth(), output);
  }

  // optional .CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData custom_game_data = 35;
  if (has_custom_game_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->custom_game_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGameMatchSignOut.CTeam.CPlayer)
}

::google::protobuf::uint8* CMsgGameMatchSignOut_CTeam_CPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOut.CTeam.CPlayer)
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  // repeated uint32 items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->items(i), target);
  }

  // optional uint32 gold = 5;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gold(), target);
  }

  // optional uint32 kills = 6;
  if (has_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->kills(), target);
  }

  // optional uint32 deaths = 7;
  if (has_deaths()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->deaths(), target);
  }

  // optional uint32 assists = 8;
  if (has_assists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->assists(), target);
  }

  // optional uint32 leaver_status = 9;
  if (has_leaver_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->leaver_status(), target);
  }

  // optional uint32 last_hits = 10;
  if (has_last_hits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->last_hits(), target);
  }

  // optional uint32 denies = 11;
  if (has_denies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->denies(), target);
  }

  // optional uint32 gold_per_min = 12;
  if (has_gold_per_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->gold_per_min(), target);
  }

  // optional uint32 xp_per_minute = 13;
  if (has_xp_per_minute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->xp_per_minute(), target);
  }

  // optional uint32 gold_spent = 14;
  if (has_gold_spent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->gold_spent(), target);
  }

  // optional uint32 level = 15;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->level(), target);
  }

  // optional uint32 hero_damage = 16;
  if (has_hero_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->hero_damage(), target);
  }

  // optional uint32 tower_damage = 17;
  if (has_tower_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->tower_damage(), target);
  }

  // optional uint32 hero_healing = 18;
  if (has_hero_healing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->hero_healing(), target);
  }

  // optional uint32 time_last_seen = 19;
  if (has_time_last_seen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->time_last_seen(), target);
  }

  // optional uint32 support_ability_value = 20;
  if (has_support_ability_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->support_ability_value(), target);
  }

  // optional uint64 party_id = 21;
  if (has_party_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->party_id(), target);
  }

  // optional float scaled_kills = 24;
  if (has_scaled_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->scaled_kills(), target);
  }

  // optional float scaled_deaths = 25;
  if (has_scaled_deaths()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->scaled_deaths(), target);
  }

  // optional float scaled_assists = 26;
  if (has_scaled_assists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->scaled_assists(), target);
  }

  // optional uint32 claimed_farm_gold = 27;
  if (has_claimed_farm_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->claimed_farm_gold(), target);
  }

  // optional uint32 support_gold = 28;
  if (has_support_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->support_gold(), target);
  }

  // optional uint32 claimed_denies = 29;
  if (has_claimed_denies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->claimed_denies(), target);
  }

  // optional uint32 claimed_misses = 30;
  if (has_claimed_misses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->claimed_misses(), target);
  }

  // optional uint32 misses = 31;
  if (has_misses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->misses(), target);
  }

  // repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 32;
  for (int i = 0; i < this->ability_upgrades_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->ability_upgrades(i), target);
  }

  // repeated .CMatchAdditionalUnitInventory additional_units_inventory = 33;
  for (int i = 0; i < this->additional_units_inventory_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->additional_units_inventory(i), target);
  }

  // optional uint32 net_worth = 34;
  if (has_net_worth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->net_worth(), target);
  }

  // optional .CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData custom_game_data = 35;
  if (has_custom_game_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->custom_game_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOut.CTeam.CPlayer)
  return target;
}

int CMsgGameMatchSignOut_CTeam_CPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 gold = 5;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional uint32 kills = 6;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 7;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 assists = 8;
    if (has_assists()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

    // optional uint32 leaver_status = 9;
    if (has_leaver_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaver_status());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 last_hits = 10;
    if (has_last_hits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_hits());
    }

    // optional uint32 denies = 11;
    if (has_denies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->denies());
    }

    // optional uint32 gold_per_min = 12;
    if (has_gold_per_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_per_min());
    }

    // optional uint32 xp_per_minute = 13;
    if (has_xp_per_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp_per_minute());
    }

    // optional uint32 gold_spent = 14;
    if (has_gold_spent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_spent());
    }

    // optional uint32 level = 15;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 hero_damage = 16;
    if (has_hero_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_damage());
    }

    // optional uint32 tower_damage = 17;
    if (has_tower_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_damage());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 hero_healing = 18;
    if (has_hero_healing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_healing());
    }

    // optional uint32 time_last_seen = 19;
    if (has_time_last_seen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_last_seen());
    }

    // optional uint32 support_ability_value = 20;
    if (has_support_ability_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support_ability_value());
    }

    // optional uint64 party_id = 21;
    if (has_party_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }

    // optional float scaled_kills = 24;
    if (has_scaled_kills()) {
      total_size += 2 + 4;
    }

    // optional float scaled_deaths = 25;
    if (has_scaled_deaths()) {
      total_size += 2 + 4;
    }

    // optional float scaled_assists = 26;
    if (has_scaled_assists()) {
      total_size += 2 + 4;
    }

    // optional uint32 claimed_farm_gold = 27;
    if (has_claimed_farm_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->claimed_farm_gold());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 support_gold = 28;
    if (has_support_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support_gold());
    }

    // optional uint32 claimed_denies = 29;
    if (has_claimed_denies()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->claimed_denies());
    }

    // optional uint32 claimed_misses = 30;
    if (has_claimed_misses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->claimed_misses());
    }

    // optional uint32 misses = 31;
    if (has_misses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->misses());
    }

    // optional uint32 net_worth = 34;
    if (has_net_worth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_worth());
    }

    // optional .CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData custom_game_data = 35;
    if (has_custom_game_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->custom_game_data());
    }

  }
  // repeated uint32 items = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->items_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->items(i));
    }
    total_size += 1 * this->items_size() + data_size;
  }

  // repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 32;
  total_size += 2 * this->ability_upgrades_size();
  for (int i = 0; i < this->ability_upgrades_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ability_upgrades(i));
  }

  // repeated .CMatchAdditionalUnitInventory additional_units_inventory = 33;
  total_size += 2 * this->additional_units_inventory_size();
  for (int i = 0; i < this->additional_units_inventory_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->additional_units_inventory(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignOut_CTeam_CPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CTeam_CPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameMatchSignOut_CTeam_CPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CTeam_CPlayer::MergeFrom(const CMsgGameMatchSignOut_CTeam_CPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  ability_upgrades_.MergeFrom(from.ability_upgrades_);
  additional_units_inventory_.MergeFrom(from.additional_units_inventory_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_kills()) {
      set_kills(from.kills());
    }
    if (from.has_deaths()) {
      set_deaths(from.deaths());
    }
    if (from.has_assists()) {
      set_assists(from.assists());
    }
    if (from.has_leaver_status()) {
      set_leaver_status(from.leaver_status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_hits()) {
      set_last_hits(from.last_hits());
    }
    if (from.has_denies()) {
      set_denies(from.denies());
    }
    if (from.has_gold_per_min()) {
      set_gold_per_min(from.gold_per_min());
    }
    if (from.has_xp_per_minute()) {
      set_xp_per_minute(from.xp_per_minute());
    }
    if (from.has_gold_spent()) {
      set_gold_spent(from.gold_spent());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_hero_damage()) {
      set_hero_damage(from.hero_damage());
    }
    if (from.has_tower_damage()) {
      set_tower_damage(from.tower_damage());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_hero_healing()) {
      set_hero_healing(from.hero_healing());
    }
    if (from.has_time_last_seen()) {
      set_time_last_seen(from.time_last_seen());
    }
    if (from.has_support_ability_value()) {
      set_support_ability_value(from.support_ability_value());
    }
    if (from.has_party_id()) {
      set_party_id(from.party_id());
    }
    if (from.has_scaled_kills()) {
      set_scaled_kills(from.scaled_kills());
    }
    if (from.has_scaled_deaths()) {
      set_scaled_deaths(from.scaled_deaths());
    }
    if (from.has_scaled_assists()) {
      set_scaled_assists(from.scaled_assists());
    }
    if (from.has_claimed_farm_gold()) {
      set_claimed_farm_gold(from.claimed_farm_gold());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_support_gold()) {
      set_support_gold(from.support_gold());
    }
    if (from.has_claimed_denies()) {
      set_claimed_denies(from.claimed_denies());
    }
    if (from.has_claimed_misses()) {
      set_claimed_misses(from.claimed_misses());
    }
    if (from.has_misses()) {
      set_misses(from.misses());
    }
    if (from.has_net_worth()) {
      set_net_worth(from.net_worth());
    }
    if (from.has_custom_game_data()) {
      mutable_custom_game_data()->::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::MergeFrom(from.custom_game_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameMatchSignOut_CTeam_CPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CTeam_CPlayer::CopyFrom(const CMsgGameMatchSignOut_CTeam_CPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CTeam_CPlayer::IsInitialized() const {

  return true;
}

void CMsgGameMatchSignOut_CTeam_CPlayer::Swap(CMsgGameMatchSignOut_CTeam_CPlayer* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(hero_id_, other->hero_id_);
    items_.Swap(&other->items_);
    std::swap(gold_, other->gold_);
    std::swap(kills_, other->kills_);
    std::swap(deaths_, other->deaths_);
    std::swap(assists_, other->assists_);
    std::swap(leaver_status_, other->leaver_status_);
    std::swap(last_hits_, other->last_hits_);
    std::swap(denies_, other->denies_);
    std::swap(gold_per_min_, other->gold_per_min_);
    std::swap(xp_per_minute_, other->xp_per_minute_);
    std::swap(gold_spent_, other->gold_spent_);
    std::swap(level_, other->level_);
    std::swap(hero_damage_, other->hero_damage_);
    std::swap(tower_damage_, other->tower_damage_);
    std::swap(hero_healing_, other->hero_healing_);
    std::swap(time_last_seen_, other->time_last_seen_);
    std::swap(support_ability_value_, other->support_ability_value_);
    std::swap(party_id_, other->party_id_);
    std::swap(scaled_kills_, other->scaled_kills_);
    std::swap(scaled_deaths_, other->scaled_deaths_);
    std::swap(scaled_assists_, other->scaled_assists_);
    std::swap(claimed_farm_gold_, other->claimed_farm_gold_);
    std::swap(support_gold_, other->support_gold_);
    std::swap(claimed_denies_, other->claimed_denies_);
    std::swap(claimed_misses_, other->claimed_misses_);
    std::swap(misses_, other->misses_);
    ability_upgrades_.Swap(&other->ability_upgrades_);
    additional_units_inventory_.Swap(&other->additional_units_inventory_);
    std::swap(net_worth_, other->net_worth_);
    std::swap(custom_game_data_, other->custom_game_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameMatchSignOut_CTeam_CPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameMatchSignOut_CTeam_CPlayer_descriptor_;
  metadata.reflection = CMsgGameMatchSignOut_CTeam_CPlayer_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGameMatchSignOut_CTeam::kPlayersFieldNumber;
#endif  // !_MSC_VER

CMsgGameMatchSignOut_CTeam::CMsgGameMatchSignOut_CTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGameMatchSignOut.CTeam)
}

void CMsgGameMatchSignOut_CTeam::InitAsDefaultInstance() {
}

CMsgGameMatchSignOut_CTeam::CMsgGameMatchSignOut_CTeam(const CMsgGameMatchSignOut_CTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOut.CTeam)
}

void CMsgGameMatchSignOut_CTeam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameMatchSignOut_CTeam::~CMsgGameMatchSignOut_CTeam() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOut.CTeam)
  SharedDtor();
}

void CMsgGameMatchSignOut_CTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGameMatchSignOut_CTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut_CTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameMatchSignOut_CTeam_descriptor_;
}

const CMsgGameMatchSignOut_CTeam& CMsgGameMatchSignOut_CTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGameMatchSignOut_CTeam* CMsgGameMatchSignOut_CTeam::default_instance_ = NULL;

CMsgGameMatchSignOut_CTeam* CMsgGameMatchSignOut_CTeam::New() const {
  return new CMsgGameMatchSignOut_CTeam;
}

void CMsgGameMatchSignOut_CTeam::Clear() {
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameMatchSignOut_CTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGameMatchSignOut.CTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
      case 1: {
        if (tag == 10) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGameMatchSignOut.CTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGameMatchSignOut.CTeam)
  return false;
#undef DO_
}

void CMsgGameMatchSignOut_CTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGameMatchSignOut.CTeam)
  // repeated .CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGameMatchSignOut.CTeam)
}

::google::protobuf::uint8* CMsgGameMatchSignOut_CTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOut.CTeam)
  // repeated .CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOut.CTeam)
  return target;
}

int CMsgGameMatchSignOut_CTeam::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignOut_CTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameMatchSignOut_CTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CTeam::MergeFrom(const CMsgGameMatchSignOut_CTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameMatchSignOut_CTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CTeam::CopyFrom(const CMsgGameMatchSignOut_CTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CTeam::IsInitialized() const {

  return true;
}

void CMsgGameMatchSignOut_CTeam::Swap(CMsgGameMatchSignOut_CTeam* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameMatchSignOut_CTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameMatchSignOut_CTeam_descriptor_;
  metadata.reflection = CMsgGameMatchSignOut_CTeam_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGameMatchSignOut_CAdditionalSignoutMsg::kIdFieldNumber;
const int CMsgGameMatchSignOut_CAdditionalSignoutMsg::kContentsFieldNumber;
#endif  // !_MSC_VER

CMsgGameMatchSignOut_CAdditionalSignoutMsg::CMsgGameMatchSignOut_CAdditionalSignoutMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::InitAsDefaultInstance() {
}

CMsgGameMatchSignOut_CAdditionalSignoutMsg::CMsgGameMatchSignOut_CAdditionalSignoutMsg(const CMsgGameMatchSignOut_CAdditionalSignoutMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameMatchSignOut_CAdditionalSignoutMsg::~CMsgGameMatchSignOut_CAdditionalSignoutMsg() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  SharedDtor();
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::SharedDtor() {
  if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contents_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut_CAdditionalSignoutMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameMatchSignOut_CAdditionalSignoutMsg_descriptor_;
}

const CMsgGameMatchSignOut_CAdditionalSignoutMsg& CMsgGameMatchSignOut_CAdditionalSignoutMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGameMatchSignOut_CAdditionalSignoutMsg* CMsgGameMatchSignOut_CAdditionalSignoutMsg::default_instance_ = NULL;

CMsgGameMatchSignOut_CAdditionalSignoutMsg* CMsgGameMatchSignOut_CAdditionalSignoutMsg::New() const {
  return new CMsgGameMatchSignOut_CAdditionalSignoutMsg;
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0u;
    if (has_contents()) {
      if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contents_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameMatchSignOut_CAdditionalSignoutMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contents;
        break;
      }

      // optional bytes contents = 2;
      case 2: {
        if (tag == 18) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  return false;
#undef DO_
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bytes contents = 2;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->contents(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
}

::google::protobuf::uint8* CMsgGameMatchSignOut_CAdditionalSignoutMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bytes contents = 2;
  if (has_contents()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->contents(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  return target;
}

int CMsgGameMatchSignOut_CAdditionalSignoutMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bytes contents = 2;
    if (has_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contents());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CAdditionalSignoutMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameMatchSignOut_CAdditionalSignoutMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::MergeFrom(const CMsgGameMatchSignOut_CAdditionalSignoutMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_contents()) {
      set_contents(from.contents());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::CopyFrom(const CMsgGameMatchSignOut_CAdditionalSignoutMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CAdditionalSignoutMsg::IsInitialized() const {

  return true;
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::Swap(CMsgGameMatchSignOut_CAdditionalSignoutMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(contents_, other->contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameMatchSignOut_CAdditionalSignoutMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameMatchSignOut_CAdditionalSignoutMsg_descriptor_;
  metadata.reflection = CMsgGameMatchSignOut_CAdditionalSignoutMsg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGameMatchSignOut_CSocialFeedMatchEvent::kAccountIdFieldNumber;
const int CMsgGameMatchSignOut_CSocialFeedMatchEvent::kTimestampFieldNumber;
const int CMsgGameMatchSignOut_CSocialFeedMatchEvent::kEventTypeFieldNumber;
const int CMsgGameMatchSignOut_CSocialFeedMatchEvent::kGameTimeFieldNumber;
const int CMsgGameMatchSignOut_CSocialFeedMatchEvent::kReplayTimeFieldNumber;
#endif  // !_MSC_VER

CMsgGameMatchSignOut_CSocialFeedMatchEvent::CMsgGameMatchSignOut_CSocialFeedMatchEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::InitAsDefaultInstance() {
}

CMsgGameMatchSignOut_CSocialFeedMatchEvent::CMsgGameMatchSignOut_CSocialFeedMatchEvent(const CMsgGameMatchSignOut_CSocialFeedMatchEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  timestamp_ = 0u;
  event_type_ = 0u;
  game_time_ = 0;
  replay_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameMatchSignOut_CSocialFeedMatchEvent::~CMsgGameMatchSignOut_CSocialFeedMatchEvent() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  SharedDtor();
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut_CSocialFeedMatchEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameMatchSignOut_CSocialFeedMatchEvent_descriptor_;
}

const CMsgGameMatchSignOut_CSocialFeedMatchEvent& CMsgGameMatchSignOut_CSocialFeedMatchEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGameMatchSignOut_CSocialFeedMatchEvent* CMsgGameMatchSignOut_CSocialFeedMatchEvent::default_instance_ = NULL;

CMsgGameMatchSignOut_CSocialFeedMatchEvent* CMsgGameMatchSignOut_CSocialFeedMatchEvent::New() const {
  return new CMsgGameMatchSignOut_CSocialFeedMatchEvent;
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGameMatchSignOut_CSocialFeedMatchEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(account_id_, replay_time_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameMatchSignOut_CSocialFeedMatchEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_event_type;
        break;
      }

      // optional uint32 event_type = 3;
      case 3: {
        if (tag == 24) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_game_time;
        break;
      }

      // optional int32 game_time = 4;
      case 4: {
        if (tag == 32) {
         parse_game_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_time_)));
          set_has_game_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_replay_time;
        break;
      }

      // optional uint32 replay_time = 5;
      case 5: {
        if (tag == 40) {
         parse_replay_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replay_time_)));
          set_has_replay_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  return false;
#undef DO_
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  // optional uint32 event_type = 3;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->event_type(), output);
  }

  // optional int32 game_time = 4;
  if (has_game_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->game_time(), output);
  }

  // optional uint32 replay_time = 5;
  if (has_replay_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->replay_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
}

::google::protobuf::uint8* CMsgGameMatchSignOut_CSocialFeedMatchEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  // optional uint32 event_type = 3;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->event_type(), target);
  }

  // optional int32 game_time = 4;
  if (has_game_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->game_time(), target);
  }

  // optional uint32 replay_time = 5;
  if (has_replay_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->replay_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  return target;
}

int CMsgGameMatchSignOut_CSocialFeedMatchEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 event_type = 3;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_type());
    }

    // optional int32 game_time = 4;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_time());
    }

    // optional uint32 replay_time = 5;
    if (has_replay_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replay_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CSocialFeedMatchEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameMatchSignOut_CSocialFeedMatchEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::MergeFrom(const CMsgGameMatchSignOut_CSocialFeedMatchEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_game_time()) {
      set_game_time(from.game_time());
    }
    if (from.has_replay_time()) {
      set_replay_time(from.replay_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::CopyFrom(const CMsgGameMatchSignOut_CSocialFeedMatchEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CSocialFeedMatchEvent::IsInitialized() const {

  return true;
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::Swap(CMsgGameMatchSignOut_CSocialFeedMatchEvent* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(event_type_, other->event_type_);
    std::swap(game_time_, other->game_time_);
    std::swap(replay_time_, other->replay_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameMatchSignOut_CSocialFeedMatchEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameMatchSignOut_CSocialFeedMatchEvent_descriptor_;
  metadata.reflection = CMsgGameMatchSignOut_CSocialFeedMatchEvent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGameMatchSignOut_CCustomGameData::kPublishTimestampFieldNumber;
#endif  // !_MSC_VER

CMsgGameMatchSignOut_CCustomGameData::CMsgGameMatchSignOut_CCustomGameData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGameMatchSignOut.CCustomGameData)
}

void CMsgGameMatchSignOut_CCustomGameData::InitAsDefaultInstance() {
}

CMsgGameMatchSignOut_CCustomGameData::CMsgGameMatchSignOut_CCustomGameData(const CMsgGameMatchSignOut_CCustomGameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOut.CCustomGameData)
}

void CMsgGameMatchSignOut_CCustomGameData::SharedCtor() {
  _cached_size_ = 0;
  publish_timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameMatchSignOut_CCustomGameData::~CMsgGameMatchSignOut_CCustomGameData() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOut.CCustomGameData)
  SharedDtor();
}

void CMsgGameMatchSignOut_CCustomGameData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGameMatchSignOut_CCustomGameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut_CCustomGameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameMatchSignOut_CCustomGameData_descriptor_;
}

const CMsgGameMatchSignOut_CCustomGameData& CMsgGameMatchSignOut_CCustomGameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGameMatchSignOut_CCustomGameData* CMsgGameMatchSignOut_CCustomGameData::default_instance_ = NULL;

CMsgGameMatchSignOut_CCustomGameData* CMsgGameMatchSignOut_CCustomGameData::New() const {
  return new CMsgGameMatchSignOut_CCustomGameData;
}

void CMsgGameMatchSignOut_CCustomGameData::Clear() {
  publish_timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameMatchSignOut_CCustomGameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGameMatchSignOut.CCustomGameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 publish_timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &publish_timestamp_)));
          set_has_publish_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGameMatchSignOut.CCustomGameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGameMatchSignOut.CCustomGameData)
  return false;
#undef DO_
}

void CMsgGameMatchSignOut_CCustomGameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGameMatchSignOut.CCustomGameData)
  // optional uint32 publish_timestamp = 1;
  if (has_publish_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->publish_timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGameMatchSignOut.CCustomGameData)
}

::google::protobuf::uint8* CMsgGameMatchSignOut_CCustomGameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOut.CCustomGameData)
  // optional uint32 publish_timestamp = 1;
  if (has_publish_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->publish_timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOut.CCustomGameData)
  return target;
}

int CMsgGameMatchSignOut_CCustomGameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 publish_timestamp = 1;
    if (has_publish_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->publish_timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignOut_CCustomGameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CCustomGameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameMatchSignOut_CCustomGameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CCustomGameData::MergeFrom(const CMsgGameMatchSignOut_CCustomGameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_publish_timestamp()) {
      set_publish_timestamp(from.publish_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameMatchSignOut_CCustomGameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CCustomGameData::CopyFrom(const CMsgGameMatchSignOut_CCustomGameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CCustomGameData::IsInitialized() const {

  return true;
}

void CMsgGameMatchSignOut_CCustomGameData::Swap(CMsgGameMatchSignOut_CCustomGameData* other) {
  if (other != this) {
    std::swap(publish_timestamp_, other->publish_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameMatchSignOut_CCustomGameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameMatchSignOut_CCustomGameData_descriptor_;
  metadata.reflection = CMsgGameMatchSignOut_CCustomGameData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGameMatchSignOut::kMatchIdFieldNumber;
const int CMsgGameMatchSignOut::kDurationFieldNumber;
const int CMsgGameMatchSignOut::kGoodGuysWinFieldNumber;
const int CMsgGameMatchSignOut::kDateFieldNumber;
const int CMsgGameMatchSignOut::kNumPlayersFieldNumber;
const int CMsgGameMatchSignOut::kTeamsFieldNumber;
const int CMsgGameMatchSignOut::kTowerStatusFieldNumber;
const int CMsgGameMatchSignOut::kBarracksStatusFieldNumber;
const int CMsgGameMatchSignOut::kClusterFieldNumber;
const int CMsgGameMatchSignOut::kServerAddrFieldNumber;
const int CMsgGameMatchSignOut::kFirstBloodTimeFieldNumber;
const int CMsgGameMatchSignOut::kGameBalanceFieldNumber;
const int CMsgGameMatchSignOut::kEventScoreFieldNumber;
const int CMsgGameMatchSignOut::kPicksBansFieldNumber;
const int CMsgGameMatchSignOut::kFantasyStatsFieldNumber;
const int CMsgGameMatchSignOut::kPlayerStrangeCountAdjustmentsFieldNumber;
const int CMsgGameMatchSignOut::kAutomaticSurrenderFieldNumber;
const int CMsgGameMatchSignOut::kServerVersionFieldNumber;
const int CMsgGameMatchSignOut::kLegacyMassDisconnectFieldNumber;
const int CMsgGameMatchSignOut::kPoorNetworkConditionsFieldNumber;
const int CMsgGameMatchSignOut::kAdditionalMsgsFieldNumber;
const int CMsgGameMatchSignOut::kSocialFeedEventsFieldNumber;
const int CMsgGameMatchSignOut::kAverageNetworthDeltaFieldNumber;
const int CMsgGameMatchSignOut::kNetworthDeltaMin10FieldNumber;
const int CMsgGameMatchSignOut::kNetworthDeltaMin20FieldNumber;
const int CMsgGameMatchSignOut::kMaximumLosingNetworthLeadFieldNumber;
const int CMsgGameMatchSignOut::kAverageExperienceDeltaFieldNumber;
const int CMsgGameMatchSignOut::kExperienceDeltaMin10FieldNumber;
const int CMsgGameMatchSignOut::kExperienceDeltaMin20FieldNumber;
const int CMsgGameMatchSignOut::kBonusGoldWinnerMin10FieldNumber;
const int CMsgGameMatchSignOut::kBonusGoldWinnerMin20FieldNumber;
const int CMsgGameMatchSignOut::kBonusGoldWinnerTotalFieldNumber;
const int CMsgGameMatchSignOut::kBonusGoldLoserMin10FieldNumber;
const int CMsgGameMatchSignOut::kBonusGoldLoserMin20FieldNumber;
const int CMsgGameMatchSignOut::kBonusGoldLoserTotalFieldNumber;
const int CMsgGameMatchSignOut::kCustomGameDataFieldNumber;
#endif  // !_MSC_VER

CMsgGameMatchSignOut::CMsgGameMatchSignOut()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGameMatchSignOut)
}

void CMsgGameMatchSignOut::InitAsDefaultInstance() {
  poor_network_conditions_ = const_cast< ::CMsgPoorNetworkConditions*>(&::CMsgPoorNetworkConditions::default_instance());
  custom_game_data_ = const_cast< ::CMsgGameMatchSignOut_CCustomGameData*>(&::CMsgGameMatchSignOut_CCustomGameData::default_instance());
}

CMsgGameMatchSignOut::CMsgGameMatchSignOut(const CMsgGameMatchSignOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOut)
}

void CMsgGameMatchSignOut::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  duration_ = 0u;
  good_guys_win_ = false;
  date_ = 0u;
  cluster_ = 0u;
  server_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  first_blood_time_ = 0u;
  game_balance_ = 0;
  event_score_ = 0u;
  automatic_surrender_ = false;
  server_version_ = 0u;
  legacy_mass_disconnect_ = false;
  poor_network_conditions_ = NULL;
  average_networth_delta_ = 0;
  networth_delta_min10_ = 0;
  networth_delta_min20_ = 0;
  maximum_losing_networth_lead_ = 0;
  average_experience_delta_ = 0;
  experience_delta_min10_ = 0;
  experience_delta_min20_ = 0;
  bonus_gold_winner_min10_ = 0;
  bonus_gold_winner_min20_ = 0;
  bonus_gold_winner_total_ = 0u;
  bonus_gold_loser_min10_ = 0;
  bonus_gold_loser_min20_ = 0;
  bonus_gold_loser_total_ = 0u;
  custom_game_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameMatchSignOut::~CMsgGameMatchSignOut() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOut)
  SharedDtor();
}

void CMsgGameMatchSignOut::SharedDtor() {
  if (server_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_addr_;
  }
  if (this != default_instance_) {
    delete poor_network_conditions_;
    delete custom_game_data_;
  }
}

void CMsgGameMatchSignOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameMatchSignOut_descriptor_;
}

const CMsgGameMatchSignOut& CMsgGameMatchSignOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGameMatchSignOut* CMsgGameMatchSignOut::default_instance_ = NULL;

CMsgGameMatchSignOut* CMsgGameMatchSignOut::New() const {
  return new CMsgGameMatchSignOut;
}

void CMsgGameMatchSignOut::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGameMatchSignOut*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(match_id_, date_);
    good_guys_win_ = false;
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(cluster_, event_score_);
    if (has_server_addr()) {
      if (server_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        server_addr_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 13565952) {
    ZR_(automatic_surrender_, server_version_);
    ZR_(average_networth_delta_, networth_delta_min10_);
    if (has_poor_network_conditions()) {
      if (poor_network_conditions_ != NULL) poor_network_conditions_->::CMsgPoorNetworkConditions::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(networth_delta_min20_, bonus_gold_winner_total_);
  }
  if (_has_bits_[32 / 32] & 15) {
    ZR_(bonus_gold_loser_min10_, bonus_gold_loser_min20_);
    bonus_gold_loser_total_ = 0u;
    if (has_custom_game_data()) {
      if (custom_game_data_ != NULL) custom_game_data_->::CMsgGameMatchSignOut_CCustomGameData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  num_players_.Clear();
  teams_.Clear();
  tower_status_.Clear();
  barracks_status_.Clear();
  picks_bans_.Clear();
  fantasy_stats_.Clear();
  player_strange_count_adjustments_.Clear();
  additional_msgs_.Clear();
  social_feed_events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameMatchSignOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGameMatchSignOut)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }

      // optional uint32 duration = 2;
      case 2: {
        if (tag == 16) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_good_guys_win;
        break;
      }

      // optional bool good_guys_win = 3;
      case 3: {
        if (tag == 24) {
         parse_good_guys_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &good_guys_win_)));
          set_has_good_guys_win();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_date;
        break;
      }

      // optional fixed32 date = 4;
      case 4: {
        if (tag == 37) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_num_players;
        break;
      }

      // repeated uint32 num_players = 5;
      case 5: {
        if (tag == 40) {
         parse_num_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_num_players())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_num_players())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_num_players;
        if (input->ExpectTag(50)) goto parse_teams;
        break;
      }

      // repeated .CMsgGameMatchSignOut.CTeam teams = 6;
      case 6: {
        if (tag == 50) {
         parse_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_teams;
        if (input->ExpectTag(64)) goto parse_tower_status;
        break;
      }

      // repeated uint32 tower_status = 8;
      case 8: {
        if (tag == 64) {
         parse_tower_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_tower_status())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tower_status())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_tower_status;
        if (input->ExpectTag(72)) goto parse_barracks_status;
        break;
      }

      // repeated uint32 barracks_status = 9;
      case 9: {
        if (tag == 72) {
         parse_barracks_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_barracks_status())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_barracks_status())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_barracks_status;
        if (input->ExpectTag(80)) goto parse_cluster;
        break;
      }

      // optional uint32 cluster = 10;
      case 10: {
        if (tag == 80) {
         parse_cluster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cluster_)));
          set_has_cluster();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_server_addr;
        break;
      }

      // optional string server_addr = 11;
      case 11: {
        if (tag == 90) {
         parse_server_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_addr().data(), this->server_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "server_addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_first_blood_time;
        break;
      }

      // optional uint32 first_blood_time = 12;
      case 12: {
        if (tag == 96) {
         parse_first_blood_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_blood_time_)));
          set_has_first_blood_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_game_balance;
        break;
      }

      // optional float game_balance = 13;
      case 13: {
        if (tag == 109) {
         parse_game_balance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &game_balance_)));
          set_has_game_balance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_event_score;
        break;
      }

      // optional uint32 event_score = 14;
      case 14: {
        if (tag == 112) {
         parse_event_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_score_)));
          set_has_event_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_picks_bans;
        break;
      }

      // repeated .CMatchHeroSelectEvent picks_bans = 15;
      case 15: {
        if (tag == 122) {
         parse_picks_bans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_picks_bans()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_picks_bans;
        if (input->ExpectTag(130)) goto parse_fantasy_stats;
        break;
      }

      // repeated .CMsgDOTAFantasyPlayerStats fantasy_stats = 16;
      case 16: {
        if (tag == 130) {
         parse_fantasy_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fantasy_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_fantasy_stats;
        if (input->ExpectTag(138)) goto parse_player_strange_count_adjustments;
        break;
      }

      // repeated .CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
      case 17: {
        if (tag == 138) {
         parse_player_strange_count_adjustments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_strange_count_adjustments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_player_strange_count_adjustments;
        if (input->ExpectTag(144)) goto parse_automatic_surrender;
        break;
      }

      // optional bool automatic_surrender = 18;
      case 18: {
        if (tag == 144) {
         parse_automatic_surrender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &automatic_surrender_)));
          set_has_automatic_surrender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_server_version;
        break;
      }

      // optional uint32 server_version = 19;
      case 19: {
        if (tag == 152) {
         parse_server_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_version_)));
          set_has_server_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_additional_msgs;
        break;
      }

      // repeated .CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
      case 20: {
        if (tag == 162) {
         parse_additional_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_additional_msgs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_additional_msgs;
        if (input->ExpectTag(168)) goto parse_legacy_mass_disconnect;
        break;
      }

      // optional bool legacy_mass_disconnect = 21;
      case 21: {
        if (tag == 168) {
         parse_legacy_mass_disconnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &legacy_mass_disconnect_)));
          set_has_legacy_mass_disconnect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_average_networth_delta;
        break;
      }

      // optional sint32 average_networth_delta = 22;
      case 22: {
        if (tag == 176) {
         parse_average_networth_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &average_networth_delta_)));
          set_has_average_networth_delta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_networth_delta_min10;
        break;
      }

      // optional sint32 networth_delta_min10 = 23;
      case 23: {
        if (tag == 184) {
         parse_networth_delta_min10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &networth_delta_min10_)));
          set_has_networth_delta_min10();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_networth_delta_min20;
        break;
      }

      // optional sint32 networth_delta_min20 = 24;
      case 24: {
        if (tag == 192) {
         parse_networth_delta_min20:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &networth_delta_min20_)));
          set_has_networth_delta_min20();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_maximum_losing_networth_lead;
        break;
      }

      // optional sint32 maximum_losing_networth_lead = 25;
      case 25: {
        if (tag == 200) {
         parse_maximum_losing_networth_lead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &maximum_losing_networth_lead_)));
          set_has_maximum_losing_networth_lead();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_average_experience_delta;
        break;
      }

      // optional sint32 average_experience_delta = 26;
      case 26: {
        if (tag == 208) {
         parse_average_experience_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &average_experience_delta_)));
          set_has_average_experience_delta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_experience_delta_min10;
        break;
      }

      // optional sint32 experience_delta_min10 = 27;
      case 27: {
        if (tag == 216) {
         parse_experience_delta_min10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &experience_delta_min10_)));
          set_has_experience_delta_min10();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_experience_delta_min20;
        break;
      }

      // optional sint32 experience_delta_min20 = 28;
      case 28: {
        if (tag == 224) {
         parse_experience_delta_min20:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &experience_delta_min20_)));
          set_has_experience_delta_min20();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_bonus_gold_winner_min10;
        break;
      }

      // optional sint32 bonus_gold_winner_min10 = 29;
      case 29: {
        if (tag == 232) {
         parse_bonus_gold_winner_min10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bonus_gold_winner_min10_)));
          set_has_bonus_gold_winner_min10();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_bonus_gold_winner_min20;
        break;
      }

      // optional sint32 bonus_gold_winner_min20 = 30;
      case 30: {
        if (tag == 240) {
         parse_bonus_gold_winner_min20:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bonus_gold_winner_min20_)));
          set_has_bonus_gold_winner_min20();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_bonus_gold_winner_total;
        break;
      }

      // optional uint32 bonus_gold_winner_total = 31;
      case 31: {
        if (tag == 248) {
         parse_bonus_gold_winner_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonus_gold_winner_total_)));
          set_has_bonus_gold_winner_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_bonus_gold_loser_min10;
        break;
      }

      // optional sint32 bonus_gold_loser_min10 = 32;
      case 32: {
        if (tag == 256) {
         parse_bonus_gold_loser_min10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bonus_gold_loser_min10_)));
          set_has_bonus_gold_loser_min10();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_bonus_gold_loser_min20;
        break;
      }

      // optional sint32 bonus_gold_loser_min20 = 33;
      case 33: {
        if (tag == 264) {
         parse_bonus_gold_loser_min20:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bonus_gold_loser_min20_)));
          set_has_bonus_gold_loser_min20();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_bonus_gold_loser_total;
        break;
      }

      // optional uint32 bonus_gold_loser_total = 34;
      case 34: {
        if (tag == 272) {
         parse_bonus_gold_loser_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonus_gold_loser_total_)));
          set_has_bonus_gold_loser_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_poor_network_conditions;
        break;
      }

      // optional .CMsgPoorNetworkConditions poor_network_conditions = 35;
      case 35: {
        if (tag == 282) {
         parse_poor_network_conditions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_poor_network_conditions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_social_feed_events;
        break;
      }

      // repeated .CMsgGameMatchSignOut.CSocialFeedMatchEvent social_feed_events = 36;
      case 36: {
        if (tag == 290) {
         parse_social_feed_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_social_feed_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_social_feed_events;
        if (input->ExpectTag(298)) goto parse_custom_game_data;
        break;
      }

      // optional .CMsgGameMatchSignOut.CCustomGameData custom_game_data = 37;
      case 37: {
        if (tag == 298) {
         parse_custom_game_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_custom_game_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGameMatchSignOut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGameMatchSignOut)
  return false;
#undef DO_
}

void CMsgGameMatchSignOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGameMatchSignOut)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->duration(), output);
  }

  // optional bool good_guys_win = 3;
  if (has_good_guys_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->good_guys_win(), output);
  }

  // optional fixed32 date = 4;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->date(), output);
  }

  // repeated uint32 num_players = 5;
  for (int i = 0; i < this->num_players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->num_players(i), output);
  }

  // repeated .CMsgGameMatchSignOut.CTeam teams = 6;
  for (int i = 0; i < this->teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->teams(i), output);
  }

  // repeated uint32 tower_status = 8;
  for (int i = 0; i < this->tower_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->tower_status(i), output);
  }

  // repeated uint32 barracks_status = 9;
  for (int i = 0; i < this->barracks_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->barracks_status(i), output);
  }

  // optional uint32 cluster = 10;
  if (has_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->cluster(), output);
  }

  // optional string server_addr = 11;
  if (has_server_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_addr().data(), this->server_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->server_addr(), output);
  }

  // optional uint32 first_blood_time = 12;
  if (has_first_blood_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->first_blood_time(), output);
  }

  // optional float game_balance = 13;
  if (has_game_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->game_balance(), output);
  }

  // optional uint32 event_score = 14;
  if (has_event_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->event_score(), output);
  }

  // repeated .CMatchHeroSelectEvent picks_bans = 15;
  for (int i = 0; i < this->picks_bans_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->picks_bans(i), output);
  }

  // repeated .CMsgDOTAFantasyPlayerStats fantasy_stats = 16;
  for (int i = 0; i < this->fantasy_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->fantasy_stats(i), output);
  }

  // repeated .CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
  for (int i = 0; i < this->player_strange_count_adjustments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->player_strange_count_adjustments(i), output);
  }

  // optional bool automatic_surrender = 18;
  if (has_automatic_surrender()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->automatic_surrender(), output);
  }

  // optional uint32 server_version = 19;
  if (has_server_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->server_version(), output);
  }

  // repeated .CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
  for (int i = 0; i < this->additional_msgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->additional_msgs(i), output);
  }

  // optional bool legacy_mass_disconnect = 21;
  if (has_legacy_mass_disconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->legacy_mass_disconnect(), output);
  }

  // optional sint32 average_networth_delta = 22;
  if (has_average_networth_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(22, this->average_networth_delta(), output);
  }

  // optional sint32 networth_delta_min10 = 23;
  if (has_networth_delta_min10()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(23, this->networth_delta_min10(), output);
  }

  // optional sint32 networth_delta_min20 = 24;
  if (has_networth_delta_min20()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(24, this->networth_delta_min20(), output);
  }

  // optional sint32 maximum_losing_networth_lead = 25;
  if (has_maximum_losing_networth_lead()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(25, this->maximum_losing_networth_lead(), output);
  }

  // optional sint32 average_experience_delta = 26;
  if (has_average_experience_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(26, this->average_experience_delta(), output);
  }

  // optional sint32 experience_delta_min10 = 27;
  if (has_experience_delta_min10()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(27, this->experience_delta_min10(), output);
  }

  // optional sint32 experience_delta_min20 = 28;
  if (has_experience_delta_min20()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(28, this->experience_delta_min20(), output);
  }

  // optional sint32 bonus_gold_winner_min10 = 29;
  if (has_bonus_gold_winner_min10()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(29, this->bonus_gold_winner_min10(), output);
  }

  // optional sint32 bonus_gold_winner_min20 = 30;
  if (has_bonus_gold_winner_min20()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(30, this->bonus_gold_winner_min20(), output);
  }

  // optional uint32 bonus_gold_winner_total = 31;
  if (has_bonus_gold_winner_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->bonus_gold_winner_total(), output);
  }

  // optional sint32 bonus_gold_loser_min10 = 32;
  if (has_bonus_gold_loser_min10()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(32, this->bonus_gold_loser_min10(), output);
  }

  // optional sint32 bonus_gold_loser_min20 = 33;
  if (has_bonus_gold_loser_min20()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(33, this->bonus_gold_loser_min20(), output);
  }

  // optional uint32 bonus_gold_loser_total = 34;
  if (has_bonus_gold_loser_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->bonus_gold_loser_total(), output);
  }

  // optional .CMsgPoorNetworkConditions poor_network_conditions = 35;
  if (has_poor_network_conditions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->poor_network_conditions(), output);
  }

  // repeated .CMsgGameMatchSignOut.CSocialFeedMatchEvent social_feed_events = 36;
  for (int i = 0; i < this->social_feed_events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->social_feed_events(i), output);
  }

  // optional .CMsgGameMatchSignOut.CCustomGameData custom_game_data = 37;
  if (has_custom_game_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->custom_game_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGameMatchSignOut)
}

::google::protobuf::uint8* CMsgGameMatchSignOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOut)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->duration(), target);
  }

  // optional bool good_guys_win = 3;
  if (has_good_guys_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->good_guys_win(), target);
  }

  // optional fixed32 date = 4;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->date(), target);
  }

  // repeated uint32 num_players = 5;
  for (int i = 0; i < this->num_players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->num_players(i), target);
  }

  // repeated .CMsgGameMatchSignOut.CTeam teams = 6;
  for (int i = 0; i < this->teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->teams(i), target);
  }

  // repeated uint32 tower_status = 8;
  for (int i = 0; i < this->tower_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->tower_status(i), target);
  }

  // repeated uint32 barracks_status = 9;
  for (int i = 0; i < this->barracks_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->barracks_status(i), target);
  }

  // optional uint32 cluster = 10;
  if (has_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->cluster(), target);
  }

  // optional string server_addr = 11;
  if (has_server_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_addr().data(), this->server_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->server_addr(), target);
  }

  // optional uint32 first_blood_time = 12;
  if (has_first_blood_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->first_blood_time(), target);
  }

  // optional float game_balance = 13;
  if (has_game_balance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->game_balance(), target);
  }

  // optional uint32 event_score = 14;
  if (has_event_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->event_score(), target);
  }

  // repeated .CMatchHeroSelectEvent picks_bans = 15;
  for (int i = 0; i < this->picks_bans_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->picks_bans(i), target);
  }

  // repeated .CMsgDOTAFantasyPlayerStats fantasy_stats = 16;
  for (int i = 0; i < this->fantasy_stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->fantasy_stats(i), target);
  }

  // repeated .CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
  for (int i = 0; i < this->player_strange_count_adjustments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->player_strange_count_adjustments(i), target);
  }

  // optional bool automatic_surrender = 18;
  if (has_automatic_surrender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->automatic_surrender(), target);
  }

  // optional uint32 server_version = 19;
  if (has_server_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->server_version(), target);
  }

  // repeated .CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
  for (int i = 0; i < this->additional_msgs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->additional_msgs(i), target);
  }

  // optional bool legacy_mass_disconnect = 21;
  if (has_legacy_mass_disconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->legacy_mass_disconnect(), target);
  }

  // optional sint32 average_networth_delta = 22;
  if (has_average_networth_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(22, this->average_networth_delta(), target);
  }

  // optional sint32 networth_delta_min10 = 23;
  if (has_networth_delta_min10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(23, this->networth_delta_min10(), target);
  }

  // optional sint32 networth_delta_min20 = 24;
  if (has_networth_delta_min20()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(24, this->networth_delta_min20(), target);
  }

  // optional sint32 maximum_losing_networth_lead = 25;
  if (has_maximum_losing_networth_lead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(25, this->maximum_losing_networth_lead(), target);
  }

  // optional sint32 average_experience_delta = 26;
  if (has_average_experience_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(26, this->average_experience_delta(), target);
  }

  // optional sint32 experience_delta_min10 = 27;
  if (has_experience_delta_min10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(27, this->experience_delta_min10(), target);
  }

  // optional sint32 experience_delta_min20 = 28;
  if (has_experience_delta_min20()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(28, this->experience_delta_min20(), target);
  }

  // optional sint32 bonus_gold_winner_min10 = 29;
  if (has_bonus_gold_winner_min10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(29, this->bonus_gold_winner_min10(), target);
  }

  // optional sint32 bonus_gold_winner_min20 = 30;
  if (has_bonus_gold_winner_min20()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(30, this->bonus_gold_winner_min20(), target);
  }

  // optional uint32 bonus_gold_winner_total = 31;
  if (has_bonus_gold_winner_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->bonus_gold_winner_total(), target);
  }

  // optional sint32 bonus_gold_loser_min10 = 32;
  if (has_bonus_gold_loser_min10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(32, this->bonus_gold_loser_min10(), target);
  }

  // optional sint32 bonus_gold_loser_min20 = 33;
  if (has_bonus_gold_loser_min20()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(33, this->bonus_gold_loser_min20(), target);
  }

  // optional uint32 bonus_gold_loser_total = 34;
  if (has_bonus_gold_loser_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->bonus_gold_loser_total(), target);
  }

  // optional .CMsgPoorNetworkConditions poor_network_conditions = 35;
  if (has_poor_network_conditions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->poor_network_conditions(), target);
  }

  // repeated .CMsgGameMatchSignOut.CSocialFeedMatchEvent social_feed_events = 36;
  for (int i = 0; i < this->social_feed_events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->social_feed_events(i), target);
  }

  // optional .CMsgGameMatchSignOut.CCustomGameData custom_game_data = 37;
  if (has_custom_game_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->custom_game_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOut)
  return target;
}

int CMsgGameMatchSignOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // optional bool good_guys_win = 3;
    if (has_good_guys_win()) {
      total_size += 1 + 1;
    }

    // optional fixed32 date = 4;
    if (has_date()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 cluster = 10;
    if (has_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cluster());
    }

    // optional string server_addr = 11;
    if (has_server_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_addr());
    }

    // optional uint32 first_blood_time = 12;
    if (has_first_blood_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_blood_time());
    }

    // optional float game_balance = 13;
    if (has_game_balance()) {
      total_size += 1 + 4;
    }

    // optional uint32 event_score = 14;
    if (has_event_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_score());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool automatic_surrender = 18;
    if (has_automatic_surrender()) {
      total_size += 2 + 1;
    }

    // optional uint32 server_version = 19;
    if (has_server_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_version());
    }

    // optional bool legacy_mass_disconnect = 21;
    if (has_legacy_mass_disconnect()) {
      total_size += 2 + 1;
    }

    // optional .CMsgPoorNetworkConditions poor_network_conditions = 35;
    if (has_poor_network_conditions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->poor_network_conditions());
    }

    // optional sint32 average_networth_delta = 22;
    if (has_average_networth_delta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->average_networth_delta());
    }

    // optional sint32 networth_delta_min10 = 23;
    if (has_networth_delta_min10()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->networth_delta_min10());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional sint32 networth_delta_min20 = 24;
    if (has_networth_delta_min20()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->networth_delta_min20());
    }

    // optional sint32 maximum_losing_networth_lead = 25;
    if (has_maximum_losing_networth_lead()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->maximum_losing_networth_lead());
    }

    // optional sint32 average_experience_delta = 26;
    if (has_average_experience_delta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->average_experience_delta());
    }

    // optional sint32 experience_delta_min10 = 27;
    if (has_experience_delta_min10()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->experience_delta_min10());
    }

    // optional sint32 experience_delta_min20 = 28;
    if (has_experience_delta_min20()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->experience_delta_min20());
    }

    // optional sint32 bonus_gold_winner_min10 = 29;
    if (has_bonus_gold_winner_min10()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bonus_gold_winner_min10());
    }

    // optional sint32 bonus_gold_winner_min20 = 30;
    if (has_bonus_gold_winner_min20()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bonus_gold_winner_min20());
    }

    // optional uint32 bonus_gold_winner_total = 31;
    if (has_bonus_gold_winner_total()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonus_gold_winner_total());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional sint32 bonus_gold_loser_min10 = 32;
    if (has_bonus_gold_loser_min10()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bonus_gold_loser_min10());
    }

    // optional sint32 bonus_gold_loser_min20 = 33;
    if (has_bonus_gold_loser_min20()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bonus_gold_loser_min20());
    }

    // optional uint32 bonus_gold_loser_total = 34;
    if (has_bonus_gold_loser_total()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonus_gold_loser_total());
    }

    // optional .CMsgGameMatchSignOut.CCustomGameData custom_game_data = 37;
    if (has_custom_game_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->custom_game_data());
    }

  }
  // repeated uint32 num_players = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->num_players_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->num_players(i));
    }
    total_size += 1 * this->num_players_size() + data_size;
  }

  // repeated .CMsgGameMatchSignOut.CTeam teams = 6;
  total_size += 1 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }

  // repeated uint32 tower_status = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->tower_status_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->tower_status(i));
    }
    total_size += 1 * this->tower_status_size() + data_size;
  }

  // repeated uint32 barracks_status = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->barracks_status_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->barracks_status(i));
    }
    total_size += 1 * this->barracks_status_size() + data_size;
  }

  // repeated .CMatchHeroSelectEvent picks_bans = 15;
  total_size += 1 * this->picks_bans_size();
  for (int i = 0; i < this->picks_bans_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->picks_bans(i));
  }

  // repeated .CMsgDOTAFantasyPlayerStats fantasy_stats = 16;
  total_size += 2 * this->fantasy_stats_size();
  for (int i = 0; i < this->fantasy_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fantasy_stats(i));
  }

  // repeated .CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
  total_size += 2 * this->player_strange_count_adjustments_size();
  for (int i = 0; i < this->player_strange_count_adjustments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_strange_count_adjustments(i));
  }

  // repeated .CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
  total_size += 2 * this->additional_msgs_size();
  for (int i = 0; i < this->additional_msgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->additional_msgs(i));
  }

  // repeated .CMsgGameMatchSignOut.CSocialFeedMatchEvent social_feed_events = 36;
  total_size += 2 * this->social_feed_events_size();
  for (int i = 0; i < this->social_feed_events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->social_feed_events(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameMatchSignOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameMatchSignOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut::MergeFrom(const CMsgGameMatchSignOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  num_players_.MergeFrom(from.num_players_);
  teams_.MergeFrom(from.teams_);
  tower_status_.MergeFrom(from.tower_status_);
  barracks_status_.MergeFrom(from.barracks_status_);
  picks_bans_.MergeFrom(from.picks_bans_);
  fantasy_stats_.MergeFrom(from.fantasy_stats_);
  player_strange_count_adjustments_.MergeFrom(from.player_strange_count_adjustments_);
  additional_msgs_.MergeFrom(from.additional_msgs_);
  social_feed_events_.MergeFrom(from.social_feed_events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_good_guys_win()) {
      set_good_guys_win(from.good_guys_win());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cluster()) {
      set_cluster(from.cluster());
    }
    if (from.has_server_addr()) {
      set_server_addr(from.server_addr());
    }
    if (from.has_first_blood_time()) {
      set_first_blood_time(from.first_blood_time());
    }
    if (from.has_game_balance()) {
      set_game_balance(from.game_balance());
    }
    if (from.has_event_score()) {
      set_event_score(from.event_score());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_automatic_surrender()) {
      set_automatic_surrender(from.automatic_surrender());
    }
    if (from.has_server_version()) {
      set_server_version(from.server_version());
    }
    if (from.has_legacy_mass_disconnect()) {
      set_legacy_mass_disconnect(from.legacy_mass_disconnect());
    }
    if (from.has_poor_network_conditions()) {
      mutable_poor_network_conditions()->::CMsgPoorNetworkConditions::MergeFrom(from.poor_network_conditions());
    }
    if (from.has_average_networth_delta()) {
      set_average_networth_delta(from.average_networth_delta());
    }
    if (from.has_networth_delta_min10()) {
      set_networth_delta_min10(from.networth_delta_min10());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_networth_delta_min20()) {
      set_networth_delta_min20(from.networth_delta_min20());
    }
    if (from.has_maximum_losing_networth_lead()) {
      set_maximum_losing_networth_lead(from.maximum_losing_networth_lead());
    }
    if (from.has_average_experience_delta()) {
      set_average_experience_delta(from.average_experience_delta());
    }
    if (from.has_experience_delta_min10()) {
      set_experience_delta_min10(from.experience_delta_min10());
    }
    if (from.has_experience_delta_min20()) {
      set_experience_delta_min20(from.experience_delta_min20());
    }
    if (from.has_bonus_gold_winner_min10()) {
      set_bonus_gold_winner_min10(from.bonus_gold_winner_min10());
    }
    if (from.has_bonus_gold_winner_min20()) {
      set_bonus_gold_winner_min20(from.bonus_gold_winner_min20());
    }
    if (from.has_bonus_gold_winner_total()) {
      set_bonus_gold_winner_total(from.bonus_gold_winner_total());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_bonus_gold_loser_min10()) {
      set_bonus_gold_loser_min10(from.bonus_gold_loser_min10());
    }
    if (from.has_bonus_gold_loser_min20()) {
      set_bonus_gold_loser_min20(from.bonus_gold_loser_min20());
    }
    if (from.has_bonus_gold_loser_total()) {
      set_bonus_gold_loser_total(from.bonus_gold_loser_total());
    }
    if (from.has_custom_game_data()) {
      mutable_custom_game_data()->::CMsgGameMatchSignOut_CCustomGameData::MergeFrom(from.custom_game_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameMatchSignOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut::CopyFrom(const CMsgGameMatchSignOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut::IsInitialized() const {

  return true;
}

void CMsgGameMatchSignOut::Swap(CMsgGameMatchSignOut* other) {
  if (other != this) {
    std::swap(match_id_, other->match_id_);
    std::swap(duration_, other->duration_);
    std::swap(good_guys_win_, other->good_guys_win_);
    std::swap(date_, other->date_);
    num_players_.Swap(&other->num_players_);
    teams_.Swap(&other->teams_);
    tower_status_.Swap(&other->tower_status_);
    barracks_status_.Swap(&other->barracks_status_);
    std::swap(cluster_, other->cluster_);
    std::swap(server_addr_, other->server_addr_);
    std::swap(first_blood_time_, other->first_blood_time_);
    std::swap(game_balance_, other->game_balance_);
    std::swap(event_score_, other->event_score_);
    picks_bans_.Swap(&other->picks_bans_);
    fantasy_stats_.Swap(&other->fantasy_stats_);
    player_strange_count_adjustments_.Swap(&other->player_strange_count_adjustments_);
    std::swap(automatic_surrender_, other->automatic_surrender_);
    std::swap(server_version_, other->server_version_);
    std::swap(legacy_mass_disconnect_, other->legacy_mass_disconnect_);
    std::swap(poor_network_conditions_, other->poor_network_conditions_);
    additional_msgs_.Swap(&other->additional_msgs_);
    social_feed_events_.Swap(&other->social_feed_events_);
    std::swap(average_networth_delta_, other->average_networth_delta_);
    std::swap(networth_delta_min10_, other->networth_delta_min10_);
    std::swap(networth_delta_min20_, other->networth_delta_min20_);
    std::swap(maximum_losing_networth_lead_, other->maximum_losing_networth_lead_);
    std::swap(average_experience_delta_, other->average_experience_delta_);
    std::swap(experience_delta_min10_, other->experience_delta_min10_);
    std::swap(experience_delta_min20_, other->experience_delta_min20_);
    std::swap(bonus_gold_winner_min10_, other->bonus_gold_winner_min10_);
    std::swap(bonus_gold_winner_min20_, other->bonus_gold_winner_min20_);
    std::swap(bonus_gold_winner_total_, other->bonus_gold_winner_total_);
    std::swap(bonus_gold_loser_min10_, other->bonus_gold_loser_min10_);
    std::swap(bonus_gold_loser_min20_, other->bonus_gold_loser_min20_);
    std::swap(bonus_gold_loser_total_, other->bonus_gold_loser_total_);
    std::swap(custom_game_data_, other->custom_game_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameMatchSignOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameMatchSignOut_descriptor_;
  metadata.reflection = CMsgGameMatchSignOut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSignOutDraftInfo::kRadiantCaptainAccountIdFieldNumber;
const int CMsgSignOutDraftInfo::kDireCaptainAccountIdFieldNumber;
const int CMsgSignOutDraftInfo::kPicksBansFieldNumber;
#endif  // !_MSC_VER

CMsgSignOutDraftInfo::CMsgSignOutDraftInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSignOutDraftInfo)
}

void CMsgSignOutDraftInfo::InitAsDefaultInstance() {
}

CMsgSignOutDraftInfo::CMsgSignOutDraftInfo(const CMsgSignOutDraftInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutDraftInfo)
}

void CMsgSignOutDraftInfo::SharedCtor() {
  _cached_size_ = 0;
  radiant_captain_account_id_ = 0u;
  dire_captain_account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSignOutDraftInfo::~CMsgSignOutDraftInfo() {
  // @@protoc_insertion_point(destructor:CMsgSignOutDraftInfo)
  SharedDtor();
}

void CMsgSignOutDraftInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSignOutDraftInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSignOutDraftInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSignOutDraftInfo_descriptor_;
}

const CMsgSignOutDraftInfo& CMsgSignOutDraftInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgSignOutDraftInfo* CMsgSignOutDraftInfo::default_instance_ = NULL;

CMsgSignOutDraftInfo* CMsgSignOutDraftInfo::New() const {
  return new CMsgSignOutDraftInfo;
}

void CMsgSignOutDraftInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgSignOutDraftInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(radiant_captain_account_id_, dire_captain_account_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  picks_bans_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSignOutDraftInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSignOutDraftInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 radiant_captain_account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_captain_account_id_)));
          set_has_radiant_captain_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dire_captain_account_id;
        break;
      }

      // optional uint32 dire_captain_account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_dire_captain_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_captain_account_id_)));
          set_has_dire_captain_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_picks_bans;
        break;
      }

      // repeated .CMatchHeroSelectEvent picks_bans = 3;
      case 3: {
        if (tag == 26) {
         parse_picks_bans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_picks_bans()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_picks_bans;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSignOutDraftInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSignOutDraftInfo)
  return false;
#undef DO_
}

void CMsgSignOutDraftInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSignOutDraftInfo)
  // optional uint32 radiant_captain_account_id = 1;
  if (has_radiant_captain_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->radiant_captain_account_id(), output);
  }

  // optional uint32 dire_captain_account_id = 2;
  if (has_dire_captain_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dire_captain_account_id(), output);
  }

  // repeated .CMatchHeroSelectEvent picks_bans = 3;
  for (int i = 0; i < this->picks_bans_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->picks_bans(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSignOutDraftInfo)
}

::google::protobuf::uint8* CMsgSignOutDraftInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutDraftInfo)
  // optional uint32 radiant_captain_account_id = 1;
  if (has_radiant_captain_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->radiant_captain_account_id(), target);
  }

  // optional uint32 dire_captain_account_id = 2;
  if (has_dire_captain_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dire_captain_account_id(), target);
  }

  // repeated .CMatchHeroSelectEvent picks_bans = 3;
  for (int i = 0; i < this->picks_bans_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->picks_bans(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutDraftInfo)
  return target;
}

int CMsgSignOutDraftInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 radiant_captain_account_id = 1;
    if (has_radiant_captain_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_captain_account_id());
    }

    // optional uint32 dire_captain_account_id = 2;
    if (has_dire_captain_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_captain_account_id());
    }

  }
  // repeated .CMatchHeroSelectEvent picks_bans = 3;
  total_size += 1 * this->picks_bans_size();
  for (int i = 0; i < this->picks_bans_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->picks_bans(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSignOutDraftInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSignOutDraftInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSignOutDraftInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSignOutDraftInfo::MergeFrom(const CMsgSignOutDraftInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  picks_bans_.MergeFrom(from.picks_bans_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_radiant_captain_account_id()) {
      set_radiant_captain_account_id(from.radiant_captain_account_id());
    }
    if (from.has_dire_captain_account_id()) {
      set_dire_captain_account_id(from.dire_captain_account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSignOutDraftInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutDraftInfo::CopyFrom(const CMsgSignOutDraftInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutDraftInfo::IsInitialized() const {

  return true;
}

void CMsgSignOutDraftInfo::Swap(CMsgSignOutDraftInfo* other) {
  if (other != this) {
    std::swap(radiant_captain_account_id_, other->radiant_captain_account_id_);
    std::swap(dire_captain_account_id_, other->dire_captain_account_id_);
    picks_bans_.Swap(&other->picks_bans_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSignOutDraftInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSignOutDraftInfo_descriptor_;
  metadata.reflection = CMsgSignOutDraftInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSignOutBotInfo_CMsgBotSlotDifficulty::kSlotFieldNumber;
const int CMsgSignOutBotInfo_CMsgBotSlotDifficulty::kBotDifficultyFieldNumber;
#endif  // !_MSC_VER

CMsgSignOutBotInfo_CMsgBotSlotDifficulty::CMsgSignOutBotInfo_CMsgBotSlotDifficulty()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSignOutBotInfo.CMsgBotSlotDifficulty)
}

void CMsgSignOutBotInfo_CMsgBotSlotDifficulty::InitAsDefaultInstance() {
}

CMsgSignOutBotInfo_CMsgBotSlotDifficulty::CMsgSignOutBotInfo_CMsgBotSlotDifficulty(const CMsgSignOutBotInfo_CMsgBotSlotDifficulty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutBotInfo.CMsgBotSlotDifficulty)
}

void CMsgSignOutBotInfo_CMsgBotSlotDifficulty::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0u;
  bot_difficulty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSignOutBotInfo_CMsgBotSlotDifficulty::~CMsgSignOutBotInfo_CMsgBotSlotDifficulty() {
  // @@protoc_insertion_point(destructor:CMsgSignOutBotInfo.CMsgBotSlotDifficulty)
  SharedDtor();
}

void CMsgSignOutBotInfo_CMsgBotSlotDifficulty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSignOutBotInfo_CMsgBotSlotDifficulty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSignOutBotInfo_CMsgBotSlotDifficulty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSignOutBotInfo_CMsgBotSlotDifficulty_descriptor_;
}

const CMsgSignOutBotInfo_CMsgBotSlotDifficulty& CMsgSignOutBotInfo_CMsgBotSlotDifficulty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgSignOutBotInfo_CMsgBotSlotDifficulty* CMsgSignOutBotInfo_CMsgBotSlotDifficulty::default_instance_ = NULL;

CMsgSignOutBotInfo_CMsgBotSlotDifficulty* CMsgSignOutBotInfo_CMsgBotSlotDifficulty::New() const {
  return new CMsgSignOutBotInfo_CMsgBotSlotDifficulty;
}

void CMsgSignOutBotInfo_CMsgBotSlotDifficulty::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgSignOutBotInfo_CMsgBotSlotDifficulty*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(slot_, bot_difficulty_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSignOutBotInfo_CMsgBotSlotDifficulty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSignOutBotInfo.CMsgBotSlotDifficulty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bot_difficulty;
        break;
      }

      // optional .DOTABotDifficulty bot_difficulty = 2 [default = BOT_DIFFICULTY_PASSIVE];
      case 2: {
        if (tag == 16) {
         parse_bot_difficulty:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty(static_cast< ::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSignOutBotInfo.CMsgBotSlotDifficulty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSignOutBotInfo.CMsgBotSlotDifficulty)
  return false;
#undef DO_
}

void CMsgSignOutBotInfo_CMsgBotSlotDifficulty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSignOutBotInfo.CMsgBotSlotDifficulty)
  // optional uint32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot(), output);
  }

  // optional .DOTABotDifficulty bot_difficulty = 2 [default = BOT_DIFFICULTY_PASSIVE];
  if (has_bot_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->bot_difficulty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSignOutBotInfo.CMsgBotSlotDifficulty)
}

::google::protobuf::uint8* CMsgSignOutBotInfo_CMsgBotSlotDifficulty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutBotInfo.CMsgBotSlotDifficulty)
  // optional uint32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot(), target);
  }

  // optional .DOTABotDifficulty bot_difficulty = 2 [default = BOT_DIFFICULTY_PASSIVE];
  if (has_bot_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->bot_difficulty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutBotInfo.CMsgBotSlotDifficulty)
  return target;
}

int CMsgSignOutBotInfo_CMsgBotSlotDifficulty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

    // optional .DOTABotDifficulty bot_difficulty = 2 [default = BOT_DIFFICULTY_PASSIVE];
    if (has_bot_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSignOutBotInfo_CMsgBotSlotDifficulty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSignOutBotInfo_CMsgBotSlotDifficulty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSignOutBotInfo_CMsgBotSlotDifficulty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSignOutBotInfo_CMsgBotSlotDifficulty::MergeFrom(const CMsgSignOutBotInfo_CMsgBotSlotDifficulty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_bot_difficulty()) {
      set_bot_difficulty(from.bot_difficulty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSignOutBotInfo_CMsgBotSlotDifficulty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutBotInfo_CMsgBotSlotDifficulty::CopyFrom(const CMsgSignOutBotInfo_CMsgBotSlotDifficulty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutBotInfo_CMsgBotSlotDifficulty::IsInitialized() const {

  return true;
}

void CMsgSignOutBotInfo_CMsgBotSlotDifficulty::Swap(CMsgSignOutBotInfo_CMsgBotSlotDifficulty* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(bot_difficulty_, other->bot_difficulty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSignOutBotInfo_CMsgBotSlotDifficulty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSignOutBotInfo_CMsgBotSlotDifficulty_descriptor_;
  metadata.reflection = CMsgSignOutBotInfo_CMsgBotSlotDifficulty_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSignOutBotInfo::kAllowCheatsFieldNumber;
const int CMsgSignOutBotInfo::kBotDifficultyFieldNumber;
const int CMsgSignOutBotInfo::kCreatedLobbyFieldNumber;
const int CMsgSignOutBotInfo::kBotSlotDifficultiesFieldNumber;
#endif  // !_MSC_VER

CMsgSignOutBotInfo::CMsgSignOutBotInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSignOutBotInfo)
}

void CMsgSignOutBotInfo::InitAsDefaultInstance() {
}

CMsgSignOutBotInfo::CMsgSignOutBotInfo(const CMsgSignOutBotInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutBotInfo)
}

void CMsgSignOutBotInfo::SharedCtor() {
  _cached_size_ = 0;
  allow_cheats_ = false;
  bot_difficulty_ = 0;
  created_lobby_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSignOutBotInfo::~CMsgSignOutBotInfo() {
  // @@protoc_insertion_point(destructor:CMsgSignOutBotInfo)
  SharedDtor();
}

void CMsgSignOutBotInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSignOutBotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSignOutBotInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSignOutBotInfo_descriptor_;
}

const CMsgSignOutBotInfo& CMsgSignOutBotInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgSignOutBotInfo* CMsgSignOutBotInfo::default_instance_ = NULL;

CMsgSignOutBotInfo* CMsgSignOutBotInfo::New() const {
  return new CMsgSignOutBotInfo;
}

void CMsgSignOutBotInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgSignOutBotInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(bot_difficulty_, created_lobby_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  bot_slot_difficulties_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSignOutBotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSignOutBotInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool allow_cheats = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_cheats_)));
          set_has_allow_cheats();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bot_difficulty;
        break;
      }

      // optional .DOTABotDifficulty bot_difficulty = 2 [default = BOT_DIFFICULTY_PASSIVE];
      case 2: {
        if (tag == 16) {
         parse_bot_difficulty:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty(static_cast< ::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_created_lobby;
        break;
      }

      // optional bool created_lobby = 3;
      case 3: {
        if (tag == 24) {
         parse_created_lobby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &created_lobby_)));
          set_has_created_lobby();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bot_slot_difficulties;
        break;
      }

      // repeated .CMsgSignOutBotInfo.CMsgBotSlotDifficulty bot_slot_difficulties = 4;
      case 4: {
        if (tag == 34) {
         parse_bot_slot_difficulties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bot_slot_difficulties()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bot_slot_difficulties;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSignOutBotInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSignOutBotInfo)
  return false;
#undef DO_
}

void CMsgSignOutBotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSignOutBotInfo)
  // optional bool allow_cheats = 1;
  if (has_allow_cheats()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->allow_cheats(), output);
  }

  // optional .DOTABotDifficulty bot_difficulty = 2 [default = BOT_DIFFICULTY_PASSIVE];
  if (has_bot_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->bot_difficulty(), output);
  }

  // optional bool created_lobby = 3;
  if (has_created_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->created_lobby(), output);
  }

  // repeated .CMsgSignOutBotInfo.CMsgBotSlotDifficulty bot_slot_difficulties = 4;
  for (int i = 0; i < this->bot_slot_difficulties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bot_slot_difficulties(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSignOutBotInfo)
}

::google::protobuf::uint8* CMsgSignOutBotInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutBotInfo)
  // optional bool allow_cheats = 1;
  if (has_allow_cheats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->allow_cheats(), target);
  }

  // optional .DOTABotDifficulty bot_difficulty = 2 [default = BOT_DIFFICULTY_PASSIVE];
  if (has_bot_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->bot_difficulty(), target);
  }

  // optional bool created_lobby = 3;
  if (has_created_lobby()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->created_lobby(), target);
  }

  // repeated .CMsgSignOutBotInfo.CMsgBotSlotDifficulty bot_slot_difficulties = 4;
  for (int i = 0; i < this->bot_slot_difficulties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bot_slot_difficulties(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutBotInfo)
  return target;
}

int CMsgSignOutBotInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool allow_cheats = 1;
    if (has_allow_cheats()) {
      total_size += 1 + 1;
    }

    // optional .DOTABotDifficulty bot_difficulty = 2 [default = BOT_DIFFICULTY_PASSIVE];
    if (has_bot_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty());
    }

    // optional bool created_lobby = 3;
    if (has_created_lobby()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CMsgSignOutBotInfo.CMsgBotSlotDifficulty bot_slot_difficulties = 4;
  total_size += 1 * this->bot_slot_difficulties_size();
  for (int i = 0; i < this->bot_slot_difficulties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bot_slot_difficulties(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSignOutBotInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSignOutBotInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSignOutBotInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSignOutBotInfo::MergeFrom(const CMsgSignOutBotInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  bot_slot_difficulties_.MergeFrom(from.bot_slot_difficulties_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allow_cheats()) {
      set_allow_cheats(from.allow_cheats());
    }
    if (from.has_bot_difficulty()) {
      set_bot_difficulty(from.bot_difficulty());
    }
    if (from.has_created_lobby()) {
      set_created_lobby(from.created_lobby());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSignOutBotInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutBotInfo::CopyFrom(const CMsgSignOutBotInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutBotInfo::IsInitialized() const {

  return true;
}

void CMsgSignOutBotInfo::Swap(CMsgSignOutBotInfo* other) {
  if (other != this) {
    std::swap(allow_cheats_, other->allow_cheats_);
    std::swap(bot_difficulty_, other->bot_difficulty_);
    std::swap(created_lobby_, other->created_lobby_);
    bot_slot_difficulties_.Swap(&other->bot_slot_difficulties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSignOutBotInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSignOutBotInfo_descriptor_;
  metadata.reflection = CMsgSignOutBotInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSignOutPlayerStats::kAccountIdFieldNumber;
const int CMsgSignOutPlayerStats::kMatchIdFieldNumber;
const int CMsgSignOutPlayerStats::kRankFieldNumber;
const int CMsgSignOutPlayerStats::kHeroIdFieldNumber;
const int CMsgSignOutPlayerStats::kRampagesFieldNumber;
const int CMsgSignOutPlayerStats::kTripleKillsFieldNumber;
const int CMsgSignOutPlayerStats::kFirstBloodClaimedFieldNumber;
const int CMsgSignOutPlayerStats::kFirstBloodGivenFieldNumber;
const int CMsgSignOutPlayerStats::kCouriersKilledFieldNumber;
const int CMsgSignOutPlayerStats::kAegisesSnatchedFieldNumber;
const int CMsgSignOutPlayerStats::kCheesesEatenFieldNumber;
const int CMsgSignOutPlayerStats::kCreepsStackedFieldNumber;
const int CMsgSignOutPlayerStats::kFightScoreFieldNumber;
const int CMsgSignOutPlayerStats::kFarmScoreFieldNumber;
const int CMsgSignOutPlayerStats::kSupportScoreFieldNumber;
const int CMsgSignOutPlayerStats::kPushScoreFieldNumber;
const int CMsgSignOutPlayerStats::kKillsFieldNumber;
const int CMsgSignOutPlayerStats::kDeathsFieldNumber;
const int CMsgSignOutPlayerStats::kAssistsFieldNumber;
const int CMsgSignOutPlayerStats::kLastHitsFieldNumber;
const int CMsgSignOutPlayerStats::kDeniesFieldNumber;
const int CMsgSignOutPlayerStats::kGpmFieldNumber;
const int CMsgSignOutPlayerStats::kXppmFieldNumber;
#endif  // !_MSC_VER

CMsgSignOutPlayerStats::CMsgSignOutPlayerStats()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSignOutPlayerStats)
}

void CMsgSignOutPlayerStats::InitAsDefaultInstance() {
}

CMsgSignOutPlayerStats::CMsgSignOutPlayerStats(const CMsgSignOutPlayerStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutPlayerStats)
}

void CMsgSignOutPlayerStats::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  hero_id_ = 0u;
  rampages_ = 0u;
  triple_kills_ = 0u;
  first_blood_claimed_ = 0u;
  first_blood_given_ = 0u;
  couriers_killed_ = 0u;
  aegises_snatched_ = 0u;
  cheeses_eaten_ = 0u;
  creeps_stacked_ = 0u;
  fight_score_ = 0;
  farm_score_ = 0;
  support_score_ = 0;
  push_score_ = 0;
  kills_ = 0u;
  deaths_ = 0u;
  assists_ = 0u;
  last_hits_ = 0u;
  denies_ = 0u;
  gpm_ = 0;
  xppm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSignOutPlayerStats::~CMsgSignOutPlayerStats() {
  // @@protoc_insertion_point(destructor:CMsgSignOutPlayerStats)
  SharedDtor();
}

void CMsgSignOutPlayerStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSignOutPlayerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSignOutPlayerStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSignOutPlayerStats_descriptor_;
}

const CMsgSignOutPlayerStats& CMsgSignOutPlayerStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgSignOutPlayerStats* CMsgSignOutPlayerStats::default_instance_ = NULL;

CMsgSignOutPlayerStats* CMsgSignOutPlayerStats::New() const {
  return new CMsgSignOutPlayerStats;
}

void CMsgSignOutPlayerStats::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgSignOutPlayerStats*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(match_id_, first_blood_given_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(couriers_killed_, push_score_);
  }
  if (_has_bits_[16 / 32] & 8323072) {
    ZR_(kills_, xppm_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSignOutPlayerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSignOutPlayerStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (tag == 16) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 3;
      case 3: {
        if (tag == 24) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hero_id;
        break;
      }

      // optional uint32 hero_id = 4;
      case 4: {
        if (tag == 32) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_rampages;
        break;
      }

      // optional uint32 rampages = 5;
      case 5: {
        if (tag == 40) {
         parse_rampages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rampages_)));
          set_has_rampages();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_triple_kills;
        break;
      }

      // optional uint32 triple_kills = 6;
      case 6: {
        if (tag == 48) {
         parse_triple_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &triple_kills_)));
          set_has_triple_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_first_blood_claimed;
        break;
      }

      // optional uint32 first_blood_claimed = 7;
      case 7: {
        if (tag == 56) {
         parse_first_blood_claimed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_blood_claimed_)));
          set_has_first_blood_claimed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_first_blood_given;
        break;
      }

      // optional uint32 first_blood_given = 8;
      case 8: {
        if (tag == 64) {
         parse_first_blood_given:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_blood_given_)));
          set_has_first_blood_given();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_couriers_killed;
        break;
      }

      // optional uint32 couriers_killed = 9;
      case 9: {
        if (tag == 72) {
         parse_couriers_killed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &couriers_killed_)));
          set_has_couriers_killed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_aegises_snatched;
        break;
      }

      // optional uint32 aegises_snatched = 10;
      case 10: {
        if (tag == 80) {
         parse_aegises_snatched:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aegises_snatched_)));
          set_has_aegises_snatched();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_cheeses_eaten;
        break;
      }

      // optional uint32 cheeses_eaten = 11;
      case 11: {
        if (tag == 88) {
         parse_cheeses_eaten:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cheeses_eaten_)));
          set_has_cheeses_eaten();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_creeps_stacked;
        break;
      }

      // optional uint32 creeps_stacked = 12;
      case 12: {
        if (tag == 96) {
         parse_creeps_stacked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creeps_stacked_)));
          set_has_creeps_stacked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_fight_score;
        break;
      }

      // optional float fight_score = 13;
      case 13: {
        if (tag == 109) {
         parse_fight_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fight_score_)));
          set_has_fight_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_farm_score;
        break;
      }

      // optional float farm_score = 14;
      case 14: {
        if (tag == 117) {
         parse_farm_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &farm_score_)));
          set_has_farm_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_support_score;
        break;
      }

      // optional float support_score = 15;
      case 15: {
        if (tag == 125) {
         parse_support_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &support_score_)));
          set_has_support_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_push_score;
        break;
      }

      // optional float push_score = 16;
      case 16: {
        if (tag == 133) {
         parse_push_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &push_score_)));
          set_has_push_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_kills;
        break;
      }

      // optional uint32 kills = 17;
      case 17: {
        if (tag == 136) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
          set_has_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_deaths;
        break;
      }

      // optional uint32 deaths = 18;
      case 18: {
        if (tag == 144) {
         parse_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
          set_has_deaths();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_assists;
        break;
      }

      // optional uint32 assists = 19;
      case 19: {
        if (tag == 152) {
         parse_assists:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
          set_has_assists();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_last_hits;
        break;
      }

      // optional uint32 last_hits = 20;
      case 20: {
        if (tag == 160) {
         parse_last_hits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_hits_)));
          set_has_last_hits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_denies;
        break;
      }

      // optional uint32 denies = 21;
      case 21: {
        if (tag == 168) {
         parse_denies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &denies_)));
          set_has_denies();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(181)) goto parse_gpm;
        break;
      }

      // optional float gpm = 22;
      case 22: {
        if (tag == 181) {
         parse_gpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gpm_)));
          set_has_gpm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(189)) goto parse_xppm;
        break;
      }

      // optional float xppm = 23;
      case 23: {
        if (tag == 189) {
         parse_xppm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xppm_)));
          set_has_xppm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSignOutPlayerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSignOutPlayerStats)
  return false;
#undef DO_
}

void CMsgSignOutPlayerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSignOutPlayerStats)
  // optional int32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->account_id(), output);
  }

  // optional uint64 match_id = 2;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional uint32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  // optional uint32 hero_id = 4;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hero_id(), output);
  }

  // optional uint32 rampages = 5;
  if (has_rampages()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rampages(), output);
  }

  // optional uint32 triple_kills = 6;
  if (has_triple_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->triple_kills(), output);
  }

  // optional uint32 first_blood_claimed = 7;
  if (has_first_blood_claimed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->first_blood_claimed(), output);
  }

  // optional uint32 first_blood_given = 8;
  if (has_first_blood_given()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->first_blood_given(), output);
  }

  // optional uint32 couriers_killed = 9;
  if (has_couriers_killed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->couriers_killed(), output);
  }

  // optional uint32 aegises_snatched = 10;
  if (has_aegises_snatched()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->aegises_snatched(), output);
  }

  // optional uint32 cheeses_eaten = 11;
  if (has_cheeses_eaten()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->cheeses_eaten(), output);
  }

  // optional uint32 creeps_stacked = 12;
  if (has_creeps_stacked()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->creeps_stacked(), output);
  }

  // optional float fight_score = 13;
  if (has_fight_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->fight_score(), output);
  }

  // optional float farm_score = 14;
  if (has_farm_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->farm_score(), output);
  }

  // optional float support_score = 15;
  if (has_support_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->support_score(), output);
  }

  // optional float push_score = 16;
  if (has_push_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->push_score(), output);
  }

  // optional uint32 kills = 17;
  if (has_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->kills(), output);
  }

  // optional uint32 deaths = 18;
  if (has_deaths()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->deaths(), output);
  }

  // optional uint32 assists = 19;
  if (has_assists()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->assists(), output);
  }

  // optional uint32 last_hits = 20;
  if (has_last_hits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->last_hits(), output);
  }

  // optional uint32 denies = 21;
  if (has_denies()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->denies(), output);
  }

  // optional float gpm = 22;
  if (has_gpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->gpm(), output);
  }

  // optional float xppm = 23;
  if (has_xppm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->xppm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSignOutPlayerStats)
}

::google::protobuf::uint8* CMsgSignOutPlayerStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutPlayerStats)
  // optional int32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->account_id(), target);
  }

  // optional uint64 match_id = 2;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional uint32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  // optional uint32 hero_id = 4;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hero_id(), target);
  }

  // optional uint32 rampages = 5;
  if (has_rampages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rampages(), target);
  }

  // optional uint32 triple_kills = 6;
  if (has_triple_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->triple_kills(), target);
  }

  // optional uint32 first_blood_claimed = 7;
  if (has_first_blood_claimed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->first_blood_claimed(), target);
  }

  // optional uint32 first_blood_given = 8;
  if (has_first_blood_given()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->first_blood_given(), target);
  }

  // optional uint32 couriers_killed = 9;
  if (has_couriers_killed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->couriers_killed(), target);
  }

  // optional uint32 aegises_snatched = 10;
  if (has_aegises_snatched()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->aegises_snatched(), target);
  }

  // optional uint32 cheeses_eaten = 11;
  if (has_cheeses_eaten()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->cheeses_eaten(), target);
  }

  // optional uint32 creeps_stacked = 12;
  if (has_creeps_stacked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->creeps_stacked(), target);
  }

  // optional float fight_score = 13;
  if (has_fight_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->fight_score(), target);
  }

  // optional float farm_score = 14;
  if (has_farm_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->farm_score(), target);
  }

  // optional float support_score = 15;
  if (has_support_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->support_score(), target);
  }

  // optional float push_score = 16;
  if (has_push_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->push_score(), target);
  }

  // optional uint32 kills = 17;
  if (has_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->kills(), target);
  }

  // optional uint32 deaths = 18;
  if (has_deaths()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->deaths(), target);
  }

  // optional uint32 assists = 19;
  if (has_assists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->assists(), target);
  }

  // optional uint32 last_hits = 20;
  if (has_last_hits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->last_hits(), target);
  }

  // optional uint32 denies = 21;
  if (has_denies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->denies(), target);
  }

  // optional float gpm = 22;
  if (has_gpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->gpm(), target);
  }

  // optional float xppm = 23;
  if (has_xppm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->xppm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutPlayerStats)
  return target;
}

int CMsgSignOutPlayerStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->account_id());
    }

    // optional uint64 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 hero_id = 4;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 rampages = 5;
    if (has_rampages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rampages());
    }

    // optional uint32 triple_kills = 6;
    if (has_triple_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->triple_kills());
    }

    // optional uint32 first_blood_claimed = 7;
    if (has_first_blood_claimed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_blood_claimed());
    }

    // optional uint32 first_blood_given = 8;
    if (has_first_blood_given()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_blood_given());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 couriers_killed = 9;
    if (has_couriers_killed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->couriers_killed());
    }

    // optional uint32 aegises_snatched = 10;
    if (has_aegises_snatched()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aegises_snatched());
    }

    // optional uint32 cheeses_eaten = 11;
    if (has_cheeses_eaten()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cheeses_eaten());
    }

    // optional uint32 creeps_stacked = 12;
    if (has_creeps_stacked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creeps_stacked());
    }

    // optional float fight_score = 13;
    if (has_fight_score()) {
      total_size += 1 + 4;
    }

    // optional float farm_score = 14;
    if (has_farm_score()) {
      total_size += 1 + 4;
    }

    // optional float support_score = 15;
    if (has_support_score()) {
      total_size += 1 + 4;
    }

    // optional float push_score = 16;
    if (has_push_score()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 kills = 17;
    if (has_kills()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 18;
    if (has_deaths()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 assists = 19;
    if (has_assists()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

    // optional uint32 last_hits = 20;
    if (has_last_hits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_hits());
    }

    // optional uint32 denies = 21;
    if (has_denies()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->denies());
    }

    // optional float gpm = 22;
    if (has_gpm()) {
      total_size += 2 + 4;
    }

    // optional float xppm = 23;
    if (has_xppm()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSignOutPlayerStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSignOutPlayerStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSignOutPlayerStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSignOutPlayerStats::MergeFrom(const CMsgSignOutPlayerStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_rampages()) {
      set_rampages(from.rampages());
    }
    if (from.has_triple_kills()) {
      set_triple_kills(from.triple_kills());
    }
    if (from.has_first_blood_claimed()) {
      set_first_blood_claimed(from.first_blood_claimed());
    }
    if (from.has_first_blood_given()) {
      set_first_blood_given(from.first_blood_given());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_couriers_killed()) {
      set_couriers_killed(from.couriers_killed());
    }
    if (from.has_aegises_snatched()) {
      set_aegises_snatched(from.aegises_snatched());
    }
    if (from.has_cheeses_eaten()) {
      set_cheeses_eaten(from.cheeses_eaten());
    }
    if (from.has_creeps_stacked()) {
      set_creeps_stacked(from.creeps_stacked());
    }
    if (from.has_fight_score()) {
      set_fight_score(from.fight_score());
    }
    if (from.has_farm_score()) {
      set_farm_score(from.farm_score());
    }
    if (from.has_support_score()) {
      set_support_score(from.support_score());
    }
    if (from.has_push_score()) {
      set_push_score(from.push_score());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_kills()) {
      set_kills(from.kills());
    }
    if (from.has_deaths()) {
      set_deaths(from.deaths());
    }
    if (from.has_assists()) {
      set_assists(from.assists());
    }
    if (from.has_last_hits()) {
      set_last_hits(from.last_hits());
    }
    if (from.has_denies()) {
      set_denies(from.denies());
    }
    if (from.has_gpm()) {
      set_gpm(from.gpm());
    }
    if (from.has_xppm()) {
      set_xppm(from.xppm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSignOutPlayerStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutPlayerStats::CopyFrom(const CMsgSignOutPlayerStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutPlayerStats::IsInitialized() const {

  return true;
}

void CMsgSignOutPlayerStats::Swap(CMsgSignOutPlayerStats* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(match_id_, other->match_id_);
    std::swap(rank_, other->rank_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(rampages_, other->rampages_);
    std::swap(triple_kills_, other->triple_kills_);
    std::swap(first_blood_claimed_, other->first_blood_claimed_);
    std::swap(first_blood_given_, other->first_blood_given_);
    std::swap(couriers_killed_, other->couriers_killed_);
    std::swap(aegises_snatched_, other->aegises_snatched_);
    std::swap(cheeses_eaten_, other->cheeses_eaten_);
    std::swap(creeps_stacked_, other->creeps_stacked_);
    std::swap(fight_score_, other->fight_score_);
    std::swap(farm_score_, other->farm_score_);
    std::swap(support_score_, other->support_score_);
    std::swap(push_score_, other->push_score_);
    std::swap(kills_, other->kills_);
    std::swap(deaths_, other->deaths_);
    std::swap(assists_, other->assists_);
    std::swap(last_hits_, other->last_hits_);
    std::swap(denies_, other->denies_);
    std::swap(gpm_, other->gpm_);
    std::swap(xppm_, other->xppm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSignOutPlayerStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSignOutPlayerStats_descriptor_;
  metadata.reflection = CMsgSignOutPlayerStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kAccountIdFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kPingsFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kMaxPingsPerIntervalFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kTeammatePingsFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kMaxTeammatePingsPerIntervalFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kTeamChatMessagesFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kAllChatMessagesFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kChatWheelMessagesFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kPausesFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kUnpausesFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kLinesDrawnFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kVoiceChatSecondsFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kChatMutesFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kVoiceMutesFieldNumber;
#endif  // !_MSC_VER

CMsgSignOutCommunicationSummary_PlayerCommunication::CMsgSignOutCommunicationSummary_PlayerCommunication()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSignOutCommunicationSummary.PlayerCommunication)
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::InitAsDefaultInstance() {
}

CMsgSignOutCommunicationSummary_PlayerCommunication::CMsgSignOutCommunicationSummary_PlayerCommunication(const CMsgSignOutCommunicationSummary_PlayerCommunication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutCommunicationSummary.PlayerCommunication)
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  pings_ = 0u;
  max_pings_per_interval_ = 0u;
  teammate_pings_ = 0u;
  max_teammate_pings_per_interval_ = 0u;
  team_chat_messages_ = 0u;
  all_chat_messages_ = 0u;
  chat_wheel_messages_ = 0u;
  pauses_ = 0u;
  unpauses_ = 0u;
  lines_drawn_ = 0u;
  voice_chat_seconds_ = 0u;
  chat_mutes_ = 0u;
  voice_mutes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSignOutCommunicationSummary_PlayerCommunication::~CMsgSignOutCommunicationSummary_PlayerCommunication() {
  // @@protoc_insertion_point(destructor:CMsgSignOutCommunicationSummary.PlayerCommunication)
  SharedDtor();
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSignOutCommunicationSummary_PlayerCommunication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSignOutCommunicationSummary_PlayerCommunication_descriptor_;
}

const CMsgSignOutCommunicationSummary_PlayerCommunication& CMsgSignOutCommunicationSummary_PlayerCommunication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgSignOutCommunicationSummary_PlayerCommunication* CMsgSignOutCommunicationSummary_PlayerCommunication::default_instance_ = NULL;

CMsgSignOutCommunicationSummary_PlayerCommunication* CMsgSignOutCommunicationSummary_PlayerCommunication::New() const {
  return new CMsgSignOutCommunicationSummary_PlayerCommunication;
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgSignOutCommunicationSummary_PlayerCommunication*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(account_id_, chat_wheel_messages_);
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(pauses_, voice_mutes_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSignOutCommunicationSummary_PlayerCommunication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSignOutCommunicationSummary.PlayerCommunication)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pings;
        break;
      }

      // optional uint32 pings = 2;
      case 2: {
        if (tag == 16) {
         parse_pings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pings_)));
          set_has_pings();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_pings_per_interval;
        break;
      }

      // optional uint32 max_pings_per_interval = 3;
      case 3: {
        if (tag == 24) {
         parse_max_pings_per_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_pings_per_interval_)));
          set_has_max_pings_per_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_teammate_pings;
        break;
      }

      // optional uint32 teammate_pings = 4;
      case 4: {
        if (tag == 32) {
         parse_teammate_pings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teammate_pings_)));
          set_has_teammate_pings();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_max_teammate_pings_per_interval;
        break;
      }

      // optional uint32 max_teammate_pings_per_interval = 5;
      case 5: {
        if (tag == 40) {
         parse_max_teammate_pings_per_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_teammate_pings_per_interval_)));
          set_has_max_teammate_pings_per_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_team_chat_messages;
        break;
      }

      // optional uint32 team_chat_messages = 6;
      case 6: {
        if (tag == 48) {
         parse_team_chat_messages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_chat_messages_)));
          set_has_team_chat_messages();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_all_chat_messages;
        break;
      }

      // optional uint32 all_chat_messages = 7;
      case 7: {
        if (tag == 56) {
         parse_all_chat_messages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &all_chat_messages_)));
          set_has_all_chat_messages();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_chat_wheel_messages;
        break;
      }

      // optional uint32 chat_wheel_messages = 8;
      case 8: {
        if (tag == 64) {
         parse_chat_wheel_messages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chat_wheel_messages_)));
          set_has_chat_wheel_messages();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_pauses;
        break;
      }

      // optional uint32 pauses = 9;
      case 9: {
        if (tag == 72) {
         parse_pauses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pauses_)));
          set_has_pauses();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_unpauses;
        break;
      }

      // optional uint32 unpauses = 10;
      case 10: {
        if (tag == 80) {
         parse_unpauses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unpauses_)));
          set_has_unpauses();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_lines_drawn;
        break;
      }

      // optional uint32 lines_drawn = 11;
      case 11: {
        if (tag == 88) {
         parse_lines_drawn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lines_drawn_)));
          set_has_lines_drawn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_voice_chat_seconds;
        break;
      }

      // optional uint32 voice_chat_seconds = 12;
      case 12: {
        if (tag == 96) {
         parse_voice_chat_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &voice_chat_seconds_)));
          set_has_voice_chat_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_chat_mutes;
        break;
      }

      // optional uint32 chat_mutes = 13;
      case 13: {
        if (tag == 104) {
         parse_chat_mutes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chat_mutes_)));
          set_has_chat_mutes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_voice_mutes;
        break;
      }

      // optional uint32 voice_mutes = 14;
      case 14: {
        if (tag == 112) {
         parse_voice_mutes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &voice_mutes_)));
          set_has_voice_mutes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSignOutCommunicationSummary.PlayerCommunication)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSignOutCommunicationSummary.PlayerCommunication)
  return false;
#undef DO_
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSignOutCommunicationSummary.PlayerCommunication)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 pings = 2;
  if (has_pings()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pings(), output);
  }

  // optional uint32 max_pings_per_interval = 3;
  if (has_max_pings_per_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_pings_per_interval(), output);
  }

  // optional uint32 teammate_pings = 4;
  if (has_teammate_pings()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->teammate_pings(), output);
  }

  // optional uint32 max_teammate_pings_per_interval = 5;
  if (has_max_teammate_pings_per_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_teammate_pings_per_interval(), output);
  }

  // optional uint32 team_chat_messages = 6;
  if (has_team_chat_messages()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->team_chat_messages(), output);
  }

  // optional uint32 all_chat_messages = 7;
  if (has_all_chat_messages()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->all_chat_messages(), output);
  }

  // optional uint32 chat_wheel_messages = 8;
  if (has_chat_wheel_messages()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->chat_wheel_messages(), output);
  }

  // optional uint32 pauses = 9;
  if (has_pauses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pauses(), output);
  }

  // optional uint32 unpauses = 10;
  if (has_unpauses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->unpauses(), output);
  }

  // optional uint32 lines_drawn = 11;
  if (has_lines_drawn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->lines_drawn(), output);
  }

  // optional uint32 voice_chat_seconds = 12;
  if (has_voice_chat_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->voice_chat_seconds(), output);
  }

  // optional uint32 chat_mutes = 13;
  if (has_chat_mutes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->chat_mutes(), output);
  }

  // optional uint32 voice_mutes = 14;
  if (has_voice_mutes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->voice_mutes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSignOutCommunicationSummary.PlayerCommunication)
}

::google::protobuf::uint8* CMsgSignOutCommunicationSummary_PlayerCommunication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutCommunicationSummary.PlayerCommunication)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 pings = 2;
  if (has_pings()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pings(), target);
  }

  // optional uint32 max_pings_per_interval = 3;
  if (has_max_pings_per_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_pings_per_interval(), target);
  }

  // optional uint32 teammate_pings = 4;
  if (has_teammate_pings()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->teammate_pings(), target);
  }

  // optional uint32 max_teammate_pings_per_interval = 5;
  if (has_max_teammate_pings_per_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_teammate_pings_per_interval(), target);
  }

  // optional uint32 team_chat_messages = 6;
  if (has_team_chat_messages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->team_chat_messages(), target);
  }

  // optional uint32 all_chat_messages = 7;
  if (has_all_chat_messages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->all_chat_messages(), target);
  }

  // optional uint32 chat_wheel_messages = 8;
  if (has_chat_wheel_messages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->chat_wheel_messages(), target);
  }

  // optional uint32 pauses = 9;
  if (has_pauses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pauses(), target);
  }

  // optional uint32 unpauses = 10;
  if (has_unpauses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->unpauses(), target);
  }

  // optional uint32 lines_drawn = 11;
  if (has_lines_drawn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->lines_drawn(), target);
  }

  // optional uint32 voice_chat_seconds = 12;
  if (has_voice_chat_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->voice_chat_seconds(), target);
  }

  // optional uint32 chat_mutes = 13;
  if (has_chat_mutes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->chat_mutes(), target);
  }

  // optional uint32 voice_mutes = 14;
  if (has_voice_mutes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->voice_mutes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutCommunicationSummary.PlayerCommunication)
  return target;
}

int CMsgSignOutCommunicationSummary_PlayerCommunication::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 pings = 2;
    if (has_pings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pings());
    }

    // optional uint32 max_pings_per_interval = 3;
    if (has_max_pings_per_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_pings_per_interval());
    }

    // optional uint32 teammate_pings = 4;
    if (has_teammate_pings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teammate_pings());
    }

    // optional uint32 max_teammate_pings_per_interval = 5;
    if (has_max_teammate_pings_per_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_teammate_pings_per_interval());
    }

    // optional uint32 team_chat_messages = 6;
    if (has_team_chat_messages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_chat_messages());
    }

    // optional uint32 all_chat_messages = 7;
    if (has_all_chat_messages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->all_chat_messages());
    }

    // optional uint32 chat_wheel_messages = 8;
    if (has_chat_wheel_messages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chat_wheel_messages());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 pauses = 9;
    if (has_pauses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pauses());
    }

    // optional uint32 unpauses = 10;
    if (has_unpauses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unpauses());
    }

    // optional uint32 lines_drawn = 11;
    if (has_lines_drawn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lines_drawn());
    }

    // optional uint32 voice_chat_seconds = 12;
    if (has_voice_chat_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->voice_chat_seconds());
    }

    // optional uint32 chat_mutes = 13;
    if (has_chat_mutes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chat_mutes());
    }

    // optional uint32 voice_mutes = 14;
    if (has_voice_mutes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->voice_mutes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSignOutCommunicationSummary_PlayerCommunication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSignOutCommunicationSummary_PlayerCommunication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::MergeFrom(const CMsgSignOutCommunicationSummary_PlayerCommunication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_pings()) {
      set_pings(from.pings());
    }
    if (from.has_max_pings_per_interval()) {
      set_max_pings_per_interval(from.max_pings_per_interval());
    }
    if (from.has_teammate_pings()) {
      set_teammate_pings(from.teammate_pings());
    }
    if (from.has_max_teammate_pings_per_interval()) {
      set_max_teammate_pings_per_interval(from.max_teammate_pings_per_interval());
    }
    if (from.has_team_chat_messages()) {
      set_team_chat_messages(from.team_chat_messages());
    }
    if (from.has_all_chat_messages()) {
      set_all_chat_messages(from.all_chat_messages());
    }
    if (from.has_chat_wheel_messages()) {
      set_chat_wheel_messages(from.chat_wheel_messages());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pauses()) {
      set_pauses(from.pauses());
    }
    if (from.has_unpauses()) {
      set_unpauses(from.unpauses());
    }
    if (from.has_lines_drawn()) {
      set_lines_drawn(from.lines_drawn());
    }
    if (from.has_voice_chat_seconds()) {
      set_voice_chat_seconds(from.voice_chat_seconds());
    }
    if (from.has_chat_mutes()) {
      set_chat_mutes(from.chat_mutes());
    }
    if (from.has_voice_mutes()) {
      set_voice_mutes(from.voice_mutes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::CopyFrom(const CMsgSignOutCommunicationSummary_PlayerCommunication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutCommunicationSummary_PlayerCommunication::IsInitialized() const {

  return true;
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::Swap(CMsgSignOutCommunicationSummary_PlayerCommunication* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(pings_, other->pings_);
    std::swap(max_pings_per_interval_, other->max_pings_per_interval_);
    std::swap(teammate_pings_, other->teammate_pings_);
    std::swap(max_teammate_pings_per_interval_, other->max_teammate_pings_per_interval_);
    std::swap(team_chat_messages_, other->team_chat_messages_);
    std::swap(all_chat_messages_, other->all_chat_messages_);
    std::swap(chat_wheel_messages_, other->chat_wheel_messages_);
    std::swap(pauses_, other->pauses_);
    std::swap(unpauses_, other->unpauses_);
    std::swap(lines_drawn_, other->lines_drawn_);
    std::swap(voice_chat_seconds_, other->voice_chat_seconds_);
    std::swap(chat_mutes_, other->chat_mutes_);
    std::swap(voice_mutes_, other->voice_mutes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSignOutCommunicationSummary_PlayerCommunication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSignOutCommunicationSummary_PlayerCommunication_descriptor_;
  metadata.reflection = CMsgSignOutCommunicationSummary_PlayerCommunication_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSignOutCommunicationSummary::kPlayersFieldNumber;
#endif  // !_MSC_VER

CMsgSignOutCommunicationSummary::CMsgSignOutCommunicationSummary()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSignOutCommunicationSummary)
}

void CMsgSignOutCommunicationSummary::InitAsDefaultInstance() {
}

CMsgSignOutCommunicationSummary::CMsgSignOutCommunicationSummary(const CMsgSignOutCommunicationSummary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutCommunicationSummary)
}

void CMsgSignOutCommunicationSummary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSignOutCommunicationSummary::~CMsgSignOutCommunicationSummary() {
  // @@protoc_insertion_point(destructor:CMsgSignOutCommunicationSummary)
  SharedDtor();
}

void CMsgSignOutCommunicationSummary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSignOutCommunicationSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSignOutCommunicationSummary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSignOutCommunicationSummary_descriptor_;
}

const CMsgSignOutCommunicationSummary& CMsgSignOutCommunicationSummary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgSignOutCommunicationSummary* CMsgSignOutCommunicationSummary::default_instance_ = NULL;

CMsgSignOutCommunicationSummary* CMsgSignOutCommunicationSummary::New() const {
  return new CMsgSignOutCommunicationSummary;
}

void CMsgSignOutCommunicationSummary::Clear() {
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSignOutCommunicationSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSignOutCommunicationSummary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgSignOutCommunicationSummary.PlayerCommunication players = 1;
      case 1: {
        if (tag == 10) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSignOutCommunicationSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSignOutCommunicationSummary)
  return false;
#undef DO_
}

void CMsgSignOutCommunicationSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSignOutCommunicationSummary)
  // repeated .CMsgSignOutCommunicationSummary.PlayerCommunication players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSignOutCommunicationSummary)
}

::google::protobuf::uint8* CMsgSignOutCommunicationSummary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutCommunicationSummary)
  // repeated .CMsgSignOutCommunicationSummary.PlayerCommunication players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutCommunicationSummary)
  return target;
}

int CMsgSignOutCommunicationSummary::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgSignOutCommunicationSummary.PlayerCommunication players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSignOutCommunicationSummary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSignOutCommunicationSummary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSignOutCommunicationSummary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSignOutCommunicationSummary::MergeFrom(const CMsgSignOutCommunicationSummary& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSignOutCommunicationSummary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutCommunicationSummary::CopyFrom(const CMsgSignOutCommunicationSummary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutCommunicationSummary::IsInitialized() const {

  return true;
}

void CMsgSignOutCommunicationSummary::Swap(CMsgSignOutCommunicationSummary* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSignOutCommunicationSummary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSignOutCommunicationSummary_descriptor_;
  metadata.reflection = CMsgSignOutCommunicationSummary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::kIdFieldNumber;
const int CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::kContentsFieldNumber;
#endif  // !_MSC_VER

CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGameMatchSignoutResponse.CAdditionalSignoutMsg)
}

void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::InitAsDefaultInstance() {
}

CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg(const CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignoutResponse.CAdditionalSignoutMsg)
}

void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::~CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignoutResponse.CAdditionalSignoutMsg)
  SharedDtor();
}

void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::SharedDtor() {
  if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contents_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg_descriptor_;
}

const CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg& CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg* CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::default_instance_ = NULL;

CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg* CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::New() const {
  return new CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg;
}

void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0u;
    if (has_contents()) {
      if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contents_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGameMatchSignoutResponse.CAdditionalSignoutMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contents;
        break;
      }

      // optional bytes contents = 2;
      case 2: {
        if (tag == 18) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGameMatchSignoutResponse.CAdditionalSignoutMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGameMatchSignoutResponse.CAdditionalSignoutMsg)
  return false;
#undef DO_
}

void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGameMatchSignoutResponse.CAdditionalSignoutMsg)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bytes contents = 2;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->contents(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGameMatchSignoutResponse.CAdditionalSignoutMsg)
}

::google::protobuf::uint8* CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignoutResponse.CAdditionalSignoutMsg)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bytes contents = 2;
  if (has_contents()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->contents(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignoutResponse.CAdditionalSignoutMsg)
  return target;
}

int CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bytes contents = 2;
    if (has_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contents());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::MergeFrom(const CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_contents()) {
      set_contents(from.contents());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::CopyFrom(const CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::IsInitialized() const {

  return true;
}

void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::Swap(CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(contents_, other->contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg_descriptor_;
  metadata.reflection = CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGameMatchSignoutResponse::kMatchIdFieldNumber;
const int CMsgGameMatchSignoutResponse::kReplaySaltFieldNumber;
const int CMsgGameMatchSignoutResponse::kTimedRewardDetailsFieldNumber;
const int CMsgGameMatchSignoutResponse::kXpRewardDetailsFieldNumber;
const int CMsgGameMatchSignoutResponse::kLeagueidFieldNumber;
const int CMsgGameMatchSignoutResponse::kAdditionalMsgsFieldNumber;
#endif  // !_MSC_VER

CMsgGameMatchSignoutResponse::CMsgGameMatchSignoutResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGameMatchSignoutResponse)
}

void CMsgGameMatchSignoutResponse::InitAsDefaultInstance() {
}

CMsgGameMatchSignoutResponse::CMsgGameMatchSignoutResponse(const CMsgGameMatchSignoutResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignoutResponse)
}

void CMsgGameMatchSignoutResponse::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  replay_salt_ = 0u;
  leagueid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameMatchSignoutResponse::~CMsgGameMatchSignoutResponse() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignoutResponse)
  SharedDtor();
}

void CMsgGameMatchSignoutResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGameMatchSignoutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignoutResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameMatchSignoutResponse_descriptor_;
}

const CMsgGameMatchSignoutResponse& CMsgGameMatchSignoutResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGameMatchSignoutResponse* CMsgGameMatchSignoutResponse::default_instance_ = NULL;

CMsgGameMatchSignoutResponse* CMsgGameMatchSignoutResponse::New() const {
  return new CMsgGameMatchSignoutResponse;
}

void CMsgGameMatchSignoutResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGameMatchSignoutResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 19) {
    ZR_(replay_salt_, leagueid_);
    match_id_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  timed_reward_details_.Clear();
  xp_reward_details_.Clear();
  additional_msgs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameMatchSignoutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGameMatchSignoutResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_replay_salt;
        break;
      }

      // optional fixed32 replay_salt = 2;
      case 2: {
        if (tag == 21) {
         parse_replay_salt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &replay_salt_)));
          set_has_replay_salt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_timed_reward_details;
        break;
      }

      // repeated .CLobbyTimedRewardDetails timed_reward_details = 3;
      case 3: {
        if (tag == 26) {
         parse_timed_reward_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timed_reward_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_timed_reward_details;
        if (input->ExpectTag(34)) goto parse_xp_reward_details;
        break;
      }

      // repeated .CDOTALobbyMember xp_reward_details = 4;
      case 4: {
        if (tag == 34) {
         parse_xp_reward_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xp_reward_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_xp_reward_details;
        if (input->ExpectTag(40)) goto parse_leagueid;
        break;
      }

      // optional uint32 leagueid = 5;
      case 5: {
        if (tag == 40) {
         parse_leagueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leagueid_)));
          set_has_leagueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_additional_msgs;
        break;
      }

      // repeated .CMsgGameMatchSignoutResponse.CAdditionalSignoutMsg additional_msgs = 6;
      case 6: {
        if (tag == 50) {
         parse_additional_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_additional_msgs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_additional_msgs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGameMatchSignoutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGameMatchSignoutResponse)
  return false;
#undef DO_
}

void CMsgGameMatchSignoutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGameMatchSignoutResponse)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional fixed32 replay_salt = 2;
  if (has_replay_salt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->replay_salt(), output);
  }

  // repeated .CLobbyTimedRewardDetails timed_reward_details = 3;
  for (int i = 0; i < this->timed_reward_details_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->timed_reward_details(i), output);
  }

  // repeated .CDOTALobbyMember xp_reward_details = 4;
  for (int i = 0; i < this->xp_reward_details_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->xp_reward_details(i), output);
  }

  // optional uint32 leagueid = 5;
  if (has_leagueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->leagueid(), output);
  }

  // repeated .CMsgGameMatchSignoutResponse.CAdditionalSignoutMsg additional_msgs = 6;
  for (int i = 0; i < this->additional_msgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->additional_msgs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGameMatchSignoutResponse)
}

::google::protobuf::uint8* CMsgGameMatchSignoutResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignoutResponse)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional fixed32 replay_salt = 2;
  if (has_replay_salt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->replay_salt(), target);
  }

  // repeated .CLobbyTimedRewardDetails timed_reward_details = 3;
  for (int i = 0; i < this->timed_reward_details_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->timed_reward_details(i), target);
  }

  // repeated .CDOTALobbyMember xp_reward_details = 4;
  for (int i = 0; i < this->xp_reward_details_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->xp_reward_details(i), target);
  }

  // optional uint32 leagueid = 5;
  if (has_leagueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->leagueid(), target);
  }

  // repeated .CMsgGameMatchSignoutResponse.CAdditionalSignoutMsg additional_msgs = 6;
  for (int i = 0; i < this->additional_msgs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->additional_msgs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignoutResponse)
  return target;
}

int CMsgGameMatchSignoutResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional fixed32 replay_salt = 2;
    if (has_replay_salt()) {
      total_size += 1 + 4;
    }

    // optional uint32 leagueid = 5;
    if (has_leagueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leagueid());
    }

  }
  // repeated .CLobbyTimedRewardDetails timed_reward_details = 3;
  total_size += 1 * this->timed_reward_details_size();
  for (int i = 0; i < this->timed_reward_details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timed_reward_details(i));
  }

  // repeated .CDOTALobbyMember xp_reward_details = 4;
  total_size += 1 * this->xp_reward_details_size();
  for (int i = 0; i < this->xp_reward_details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xp_reward_details(i));
  }

  // repeated .CMsgGameMatchSignoutResponse.CAdditionalSignoutMsg additional_msgs = 6;
  total_size += 1 * this->additional_msgs_size();
  for (int i = 0; i < this->additional_msgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->additional_msgs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignoutResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameMatchSignoutResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameMatchSignoutResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignoutResponse::MergeFrom(const CMsgGameMatchSignoutResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  timed_reward_details_.MergeFrom(from.timed_reward_details_);
  xp_reward_details_.MergeFrom(from.xp_reward_details_);
  additional_msgs_.MergeFrom(from.additional_msgs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_replay_salt()) {
      set_replay_salt(from.replay_salt());
    }
    if (from.has_leagueid()) {
      set_leagueid(from.leagueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameMatchSignoutResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignoutResponse::CopyFrom(const CMsgGameMatchSignoutResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignoutResponse::IsInitialized() const {

  return true;
}

void CMsgGameMatchSignoutResponse::Swap(CMsgGameMatchSignoutResponse* other) {
  if (other != this) {
    std::swap(match_id_, other->match_id_);
    std::swap(replay_salt_, other->replay_salt_);
    timed_reward_details_.Swap(&other->timed_reward_details_);
    xp_reward_details_.Swap(&other->xp_reward_details_);
    std::swap(leagueid_, other->leagueid_);
    additional_msgs_.Swap(&other->additional_msgs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameMatchSignoutResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameMatchSignoutResponse_descriptor_;
  metadata.reflection = CMsgGameMatchSignoutResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGameMatchSignOutPermissionRequest::kServerVersionFieldNumber;
const int CMsgGameMatchSignOutPermissionRequest::kLocalAttemptFieldNumber;
const int CMsgGameMatchSignOutPermissionRequest::kTotalAttemptFieldNumber;
const int CMsgGameMatchSignOutPermissionRequest::kSecondsWaitedFieldNumber;
#endif  // !_MSC_VER

CMsgGameMatchSignOutPermissionRequest::CMsgGameMatchSignOutPermissionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGameMatchSignOutPermissionRequest)
}

void CMsgGameMatchSignOutPermissionRequest::InitAsDefaultInstance() {
}

CMsgGameMatchSignOutPermissionRequest::CMsgGameMatchSignOutPermissionRequest(const CMsgGameMatchSignOutPermissionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOutPermissionRequest)
}

void CMsgGameMatchSignOutPermissionRequest::SharedCtor() {
  _cached_size_ = 0;
  server_version_ = 0u;
  local_attempt_ = 0u;
  total_attempt_ = 0u;
  seconds_waited_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameMatchSignOutPermissionRequest::~CMsgGameMatchSignOutPermissionRequest() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOutPermissionRequest)
  SharedDtor();
}

void CMsgGameMatchSignOutPermissionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGameMatchSignOutPermissionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignOutPermissionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameMatchSignOutPermissionRequest_descriptor_;
}

const CMsgGameMatchSignOutPermissionRequest& CMsgGameMatchSignOutPermissionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGameMatchSignOutPermissionRequest* CMsgGameMatchSignOutPermissionRequest::default_instance_ = NULL;

CMsgGameMatchSignOutPermissionRequest* CMsgGameMatchSignOutPermissionRequest::New() const {
  return new CMsgGameMatchSignOutPermissionRequest;
}

void CMsgGameMatchSignOutPermissionRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGameMatchSignOutPermissionRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(server_version_, seconds_waited_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameMatchSignOutPermissionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGameMatchSignOutPermissionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_version_)));
          set_has_server_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_local_attempt;
        break;
      }

      // optional uint32 local_attempt = 2;
      case 2: {
        if (tag == 16) {
         parse_local_attempt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_attempt_)));
          set_has_local_attempt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_total_attempt;
        break;
      }

      // optional uint32 total_attempt = 3;
      case 3: {
        if (tag == 24) {
         parse_total_attempt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_attempt_)));
          set_has_total_attempt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_seconds_waited;
        break;
      }

      // optional uint32 seconds_waited = 4;
      case 4: {
        if (tag == 32) {
         parse_seconds_waited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_waited_)));
          set_has_seconds_waited();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGameMatchSignOutPermissionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGameMatchSignOutPermissionRequest)
  return false;
#undef DO_
}

void CMsgGameMatchSignOutPermissionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGameMatchSignOutPermissionRequest)
  // optional uint32 server_version = 1;
  if (has_server_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_version(), output);
  }

  // optional uint32 local_attempt = 2;
  if (has_local_attempt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->local_attempt(), output);
  }

  // optional uint32 total_attempt = 3;
  if (has_total_attempt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_attempt(), output);
  }

  // optional uint32 seconds_waited = 4;
  if (has_seconds_waited()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seconds_waited(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGameMatchSignOutPermissionRequest)
}

::google::protobuf::uint8* CMsgGameMatchSignOutPermissionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOutPermissionRequest)
  // optional uint32 server_version = 1;
  if (has_server_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_version(), target);
  }

  // optional uint32 local_attempt = 2;
  if (has_local_attempt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->local_attempt(), target);
  }

  // optional uint32 total_attempt = 3;
  if (has_total_attempt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_attempt(), target);
  }

  // optional uint32 seconds_waited = 4;
  if (has_seconds_waited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seconds_waited(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOutPermissionRequest)
  return target;
}

int CMsgGameMatchSignOutPermissionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_version = 1;
    if (has_server_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_version());
    }

    // optional uint32 local_attempt = 2;
    if (has_local_attempt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_attempt());
    }

    // optional uint32 total_attempt = 3;
    if (has_total_attempt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_attempt());
    }

    // optional uint32 seconds_waited = 4;
    if (has_seconds_waited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_waited());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignOutPermissionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameMatchSignOutPermissionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameMatchSignOutPermissionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOutPermissionRequest::MergeFrom(const CMsgGameMatchSignOutPermissionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_version()) {
      set_server_version(from.server_version());
    }
    if (from.has_local_attempt()) {
      set_local_attempt(from.local_attempt());
    }
    if (from.has_total_attempt()) {
      set_total_attempt(from.total_attempt());
    }
    if (from.has_seconds_waited()) {
      set_seconds_waited(from.seconds_waited());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameMatchSignOutPermissionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOutPermissionRequest::CopyFrom(const CMsgGameMatchSignOutPermissionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOutPermissionRequest::IsInitialized() const {

  return true;
}

void CMsgGameMatchSignOutPermissionRequest::Swap(CMsgGameMatchSignOutPermissionRequest* other) {
  if (other != this) {
    std::swap(server_version_, other->server_version_);
    std::swap(local_attempt_, other->local_attempt_);
    std::swap(total_attempt_, other->total_attempt_);
    std::swap(seconds_waited_, other->seconds_waited_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameMatchSignOutPermissionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameMatchSignOutPermissionRequest_descriptor_;
  metadata.reflection = CMsgGameMatchSignOutPermissionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGameMatchSignOutPermissionResponse::kPermissionGrantedFieldNumber;
const int CMsgGameMatchSignOutPermissionResponse::kAbandonSignoutFieldNumber;
const int CMsgGameMatchSignOutPermissionResponse::kRetryDelaySecondsFieldNumber;
#endif  // !_MSC_VER

CMsgGameMatchSignOutPermissionResponse::CMsgGameMatchSignOutPermissionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGameMatchSignOutPermissionResponse)
}

void CMsgGameMatchSignOutPermissionResponse::InitAsDefaultInstance() {
}

CMsgGameMatchSignOutPermissionResponse::CMsgGameMatchSignOutPermissionResponse(const CMsgGameMatchSignOutPermissionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOutPermissionResponse)
}

void CMsgGameMatchSignOutPermissionResponse::SharedCtor() {
  _cached_size_ = 0;
  permission_granted_ = false;
  abandon_signout_ = false;
  retry_delay_seconds_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameMatchSignOutPermissionResponse::~CMsgGameMatchSignOutPermissionResponse() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOutPermissionResponse)
  SharedDtor();
}

void CMsgGameMatchSignOutPermissionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGameMatchSignOutPermissionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignOutPermissionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameMatchSignOutPermissionResponse_descriptor_;
}

const CMsgGameMatchSignOutPermissionResponse& CMsgGameMatchSignOutPermissionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGameMatchSignOutPermissionResponse* CMsgGameMatchSignOutPermissionResponse::default_instance_ = NULL;

CMsgGameMatchSignOutPermissionResponse* CMsgGameMatchSignOutPermissionResponse::New() const {
  return new CMsgGameMatchSignOutPermissionResponse;
}

void CMsgGameMatchSignOutPermissionResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGameMatchSignOutPermissionResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(permission_granted_, retry_delay_seconds_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameMatchSignOutPermissionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGameMatchSignOutPermissionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool permission_granted = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &permission_granted_)));
          set_has_permission_granted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_abandon_signout;
        break;
      }

      // optional bool abandon_signout = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_abandon_signout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &abandon_signout_)));
          set_has_abandon_signout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_retry_delay_seconds;
        break;
      }

      // optional uint32 retry_delay_seconds = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_retry_delay_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retry_delay_seconds_)));
          set_has_retry_delay_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGameMatchSignOutPermissionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGameMatchSignOutPermissionResponse)
  return false;
#undef DO_
}

void CMsgGameMatchSignOutPermissionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGameMatchSignOutPermissionResponse)
  // optional bool permission_granted = 1 [default = false];
  if (has_permission_granted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->permission_granted(), output);
  }

  // optional bool abandon_signout = 2 [default = false];
  if (has_abandon_signout()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->abandon_signout(), output);
  }

  // optional uint32 retry_delay_seconds = 3 [default = 0];
  if (has_retry_delay_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->retry_delay_seconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGameMatchSignOutPermissionResponse)
}

::google::protobuf::uint8* CMsgGameMatchSignOutPermissionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOutPermissionResponse)
  // optional bool permission_granted = 1 [default = false];
  if (has_permission_granted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->permission_granted(), target);
  }

  // optional bool abandon_signout = 2 [default = false];
  if (has_abandon_signout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->abandon_signout(), target);
  }

  // optional uint32 retry_delay_seconds = 3 [default = 0];
  if (has_retry_delay_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->retry_delay_seconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOutPermissionResponse)
  return target;
}

int CMsgGameMatchSignOutPermissionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool permission_granted = 1 [default = false];
    if (has_permission_granted()) {
      total_size += 1 + 1;
    }

    // optional bool abandon_signout = 2 [default = false];
    if (has_abandon_signout()) {
      total_size += 1 + 1;
    }

    // optional uint32 retry_delay_seconds = 3 [default = 0];
    if (has_retry_delay_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retry_delay_seconds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignOutPermissionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameMatchSignOutPermissionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameMatchSignOutPermissionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOutPermissionResponse::MergeFrom(const CMsgGameMatchSignOutPermissionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_permission_granted()) {
      set_permission_granted(from.permission_granted());
    }
    if (from.has_abandon_signout()) {
      set_abandon_signout(from.abandon_signout());
    }
    if (from.has_retry_delay_seconds()) {
      set_retry_delay_seconds(from.retry_delay_seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameMatchSignOutPermissionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOutPermissionResponse::CopyFrom(const CMsgGameMatchSignOutPermissionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOutPermissionResponse::IsInitialized() const {

  return true;
}

void CMsgGameMatchSignOutPermissionResponse::Swap(CMsgGameMatchSignOutPermissionResponse* other) {
  if (other != this) {
    std::swap(permission_granted_, other->permission_granted_);
    std::swap(abandon_signout_, other->abandon_signout_);
    std::swap(retry_delay_seconds_, other->retry_delay_seconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameMatchSignOutPermissionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameMatchSignOutPermissionResponse_descriptor_;
  metadata.reflection = CMsgGameMatchSignOutPermissionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGameChatLog_CChatLine::kAccountIdFieldNumber;
const int CMsgGameChatLog_CChatLine::kTeamOnlyFieldNumber;
const int CMsgGameChatLog_CChatLine::kTextFieldNumber;
const int CMsgGameChatLog_CChatLine::kGameTimeFieldNumber;
#endif  // !_MSC_VER

CMsgGameChatLog_CChatLine::CMsgGameChatLog_CChatLine()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGameChatLog.CChatLine)
}

void CMsgGameChatLog_CChatLine::InitAsDefaultInstance() {
}

CMsgGameChatLog_CChatLine::CMsgGameChatLog_CChatLine(const CMsgGameChatLog_CChatLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGameChatLog.CChatLine)
}

void CMsgGameChatLog_CChatLine::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_id_ = 0u;
  team_only_ = 0u;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameChatLog_CChatLine::~CMsgGameChatLog_CChatLine() {
  // @@protoc_insertion_point(destructor:CMsgGameChatLog.CChatLine)
  SharedDtor();
}

void CMsgGameChatLog_CChatLine::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGameChatLog_CChatLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameChatLog_CChatLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameChatLog_CChatLine_descriptor_;
}

const CMsgGameChatLog_CChatLine& CMsgGameChatLog_CChatLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGameChatLog_CChatLine* CMsgGameChatLog_CChatLine::default_instance_ = NULL;

CMsgGameChatLog_CChatLine* CMsgGameChatLog_CChatLine::New() const {
  return new CMsgGameChatLog_CChatLine;
}

void CMsgGameChatLog_CChatLine::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGameChatLog_CChatLine*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(account_id_, team_only_);
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
    game_time_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameChatLog_CChatLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGameChatLog.CChatLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team_only;
        break;
      }

      // optional uint32 team_only = 2;
      case 2: {
        if (tag == 16) {
         parse_team_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_only_)));
          set_has_team_only();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // optional string text = 3;
      case 3: {
        if (tag == 26) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_game_time;
        break;
      }

      // optional uint32 game_time = 4;
      case 4: {
        if (tag == 32) {
         parse_game_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_time_)));
          set_has_game_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGameChatLog.CChatLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGameChatLog.CChatLine)
  return false;
#undef DO_
}

void CMsgGameChatLog_CChatLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGameChatLog.CChatLine)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 team_only = 2;
  if (has_team_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_only(), output);
  }

  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  // optional uint32 game_time = 4;
  if (has_game_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGameChatLog.CChatLine)
}

::google::protobuf::uint8* CMsgGameChatLog_CChatLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameChatLog.CChatLine)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 team_only = 2;
  if (has_team_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_only(), target);
  }

  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  // optional uint32 game_time = 4;
  if (has_game_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameChatLog.CChatLine)
  return target;
}

int CMsgGameChatLog_CChatLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 team_only = 2;
    if (has_team_only()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_only());
    }

    // optional string text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint32 game_time = 4;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameChatLog_CChatLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameChatLog_CChatLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameChatLog_CChatLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameChatLog_CChatLine::MergeFrom(const CMsgGameChatLog_CChatLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_team_only()) {
      set_team_only(from.team_only());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_game_time()) {
      set_game_time(from.game_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameChatLog_CChatLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameChatLog_CChatLine::CopyFrom(const CMsgGameChatLog_CChatLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameChatLog_CChatLine::IsInitialized() const {

  return true;
}

void CMsgGameChatLog_CChatLine::Swap(CMsgGameChatLog_CChatLine* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(team_only_, other->team_only_);
    std::swap(text_, other->text_);
    std::swap(game_time_, other->game_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameChatLog_CChatLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameChatLog_CChatLine_descriptor_;
  metadata.reflection = CMsgGameChatLog_CChatLine_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGameChatLog::kMatchIdFieldNumber;
const int CMsgGameChatLog::kLinesFieldNumber;
#endif  // !_MSC_VER

CMsgGameChatLog::CMsgGameChatLog()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGameChatLog)
}

void CMsgGameChatLog::InitAsDefaultInstance() {
}

CMsgGameChatLog::CMsgGameChatLog(const CMsgGameChatLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGameChatLog)
}

void CMsgGameChatLog::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameChatLog::~CMsgGameChatLog() {
  // @@protoc_insertion_point(destructor:CMsgGameChatLog)
  SharedDtor();
}

void CMsgGameChatLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGameChatLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameChatLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameChatLog_descriptor_;
}

const CMsgGameChatLog& CMsgGameChatLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGameChatLog* CMsgGameChatLog::default_instance_ = NULL;

CMsgGameChatLog* CMsgGameChatLog::New() const {
  return new CMsgGameChatLog;
}

void CMsgGameChatLog::Clear() {
  match_id_ = GOOGLE_ULONGLONG(0);
  lines_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameChatLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGameChatLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lines;
        break;
      }

      // repeated .CMsgGameChatLog.CChatLine lines = 2;
      case 2: {
        if (tag == 18) {
         parse_lines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lines()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lines;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGameChatLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGameChatLog)
  return false;
#undef DO_
}

void CMsgGameChatLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGameChatLog)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // repeated .CMsgGameChatLog.CChatLine lines = 2;
  for (int i = 0; i < this->lines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lines(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGameChatLog)
}

::google::protobuf::uint8* CMsgGameChatLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameChatLog)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // repeated .CMsgGameChatLog.CChatLine lines = 2;
  for (int i = 0; i < this->lines_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lines(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameChatLog)
  return target;
}

int CMsgGameChatLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

  }
  // repeated .CMsgGameChatLog.CChatLine lines = 2;
  total_size += 1 * this->lines_size();
  for (int i = 0; i < this->lines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lines(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameChatLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameChatLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameChatLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameChatLog::MergeFrom(const CMsgGameChatLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  lines_.MergeFrom(from.lines_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameChatLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameChatLog::CopyFrom(const CMsgGameChatLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameChatLog::IsInitialized() const {

  return true;
}

void CMsgGameChatLog::Swap(CMsgGameChatLog* other) {
  if (other != this) {
    std::swap(match_id_, other->match_id_);
    lines_.Swap(&other->lines_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameChatLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameChatLog_descriptor_;
  metadata.reflection = CMsgGameChatLog_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_descriptor_;
}
bool CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::k_EDOTAUltimateStateNotLearned;
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::k_EDOTAUltimateStateCooldown;
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::k_EDOTAUltimateStateNeedsMana;
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::k_EDOTAUltimateStateReady;
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::DOTAUltimateState_MIN;
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::DOTAUltimateState_MAX;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::DOTAUltimateState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::kAbilityIdFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::kAbilityLevelFieldNumber;
#endif  // !_MSC_VER

CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::InitAsDefaultInstance() {
}

CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility(const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::SharedCtor() {
  _cached_size_ = 0;
  ability_id_ = 0u;
  ability_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::~CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility() {
  // @@protoc_insertion_point(destructor:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  SharedDtor();
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_descriptor_;
}

const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::default_instance_ = NULL;

CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::New() const {
  return new CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility;
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ability_id_, ability_level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ability_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_id_)));
          set_has_ability_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ability_level;
        break;
      }

      // optional uint32 ability_level = 2;
      case 2: {
        if (tag == 16) {
         parse_ability_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_level_)));
          set_has_ability_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  return false;
#undef DO_
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  // optional uint32 ability_id = 1;
  if (has_ability_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ability_id(), output);
  }

  // optional uint32 ability_level = 2;
  if (has_ability_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ability_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
}

::google::protobuf::uint8* CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  // optional uint32 ability_id = 1;
  if (has_ability_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ability_id(), target);
  }

  // optional uint32 ability_level = 2;
  if (has_ability_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ability_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  return target;
}

int CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ability_id = 1;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_id());
    }

    // optional uint32 ability_level = 2;
    if (has_ability_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::MergeFrom(const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ability_id()) {
      set_ability_id(from.ability_id());
    }
    if (from.has_ability_level()) {
      set_ability_level(from.ability_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::CopyFrom(const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::IsInitialized() const {

  return true;
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::Swap(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* other) {
  if (other != this) {
    std::swap(ability_id_, other->ability_id_);
    std::swap(ability_level_, other->ability_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_descriptor_;
  metadata.reflection = CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kPlayerSlotFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kPlayerNameFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kHeroNameFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kHeroIdFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kKillsFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kDeathsFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kAssistsFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kLastHitsFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kDeniesFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kGoldFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kLevelFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kGoldPerMinFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kXpPerMinFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kUltimateStateFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kUltimateCooldownFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kItem0FieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kItem1FieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kItem2FieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kItem3FieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kItem4FieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kItem5FieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kRespawnTimerFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kAccountIdFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kPositionXFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kPositionYFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kNetWorthFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kAbilitiesFieldNumber;
#endif  // !_MSC_VER

CMsgDOTALiveScoreboardUpdate_Team_Player::CMsgDOTALiveScoreboardUpdate_Team_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTALiveScoreboardUpdate.Team.Player)
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::InitAsDefaultInstance() {
}

CMsgDOTALiveScoreboardUpdate_Team_Player::CMsgDOTALiveScoreboardUpdate_Team_Player(const CMsgDOTALiveScoreboardUpdate_Team_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALiveScoreboardUpdate.Team.Player)
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_slot_ = 0u;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hero_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hero_id_ = 0u;
  kills_ = 0u;
  deaths_ = 0u;
  assists_ = 0u;
  last_hits_ = 0u;
  denies_ = 0u;
  gold_ = 0u;
  level_ = 0u;
  gold_per_min_ = 0;
  xp_per_min_ = 0;
  ultimate_state_ = 0;
  ultimate_cooldown_ = 0;
  item0_ = 0u;
  item1_ = 0u;
  item2_ = 0u;
  item3_ = 0u;
  item4_ = 0u;
  item5_ = 0u;
  respawn_timer_ = 0u;
  account_id_ = 0u;
  position_x_ = 0;
  position_y_ = 0;
  net_worth_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTALiveScoreboardUpdate_Team_Player::~CMsgDOTALiveScoreboardUpdate_Team_Player() {
  // @@protoc_insertion_point(destructor:CMsgDOTALiveScoreboardUpdate.Team.Player)
  SharedDtor();
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_name_;
  }
  if (hero_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hero_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTALiveScoreboardUpdate_Team_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTALiveScoreboardUpdate_Team_Player_descriptor_;
}

const CMsgDOTALiveScoreboardUpdate_Team_Player& CMsgDOTALiveScoreboardUpdate_Team_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgDOTALiveScoreboardUpdate_Team_Player* CMsgDOTALiveScoreboardUpdate_Team_Player::default_instance_ = NULL;

CMsgDOTALiveScoreboardUpdate_Team_Player* CMsgDOTALiveScoreboardUpdate_Team_Player::New() const {
  return new CMsgDOTALiveScoreboardUpdate_Team_Player;
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTALiveScoreboardUpdate_Team_Player*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(player_slot_, hero_id_);
    ZR_(kills_, last_hits_);
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_name_->clear();
      }
    }
    if (has_hero_name()) {
      if (hero_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hero_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(denies_, item0_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(item1_, position_x_);
  }
  ZR_(position_y_, net_worth_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  abilities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTALiveScoreboardUpdate_Team_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTALiveScoreboardUpdate.Team.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_slot = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_slot_)));
          set_has_player_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (tag == 18) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "player_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hero_name;
        break;
      }

      // optional string hero_name = 3;
      case 3: {
        if (tag == 26) {
         parse_hero_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hero_name().data(), this->hero_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hero_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hero_id;
        break;
      }

      // optional uint32 hero_id = 4;
      case 4: {
        if (tag == 32) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_kills;
        break;
      }

      // optional uint32 kills = 5;
      case 5: {
        if (tag == 40) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
          set_has_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_deaths;
        break;
      }

      // optional uint32 deaths = 6;
      case 6: {
        if (tag == 48) {
         parse_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
          set_has_deaths();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_assists;
        break;
      }

      // optional uint32 assists = 7;
      case 7: {
        if (tag == 56) {
         parse_assists:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
          set_has_assists();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_last_hits;
        break;
      }

      // optional uint32 last_hits = 8;
      case 8: {
        if (tag == 64) {
         parse_last_hits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_hits_)));
          set_has_last_hits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_denies;
        break;
      }

      // optional uint32 denies = 9;
      case 9: {
        if (tag == 72) {
         parse_denies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &denies_)));
          set_has_denies();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 10;
      case 10: {
        if (tag == 80) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_level;
        break;
      }

      // optional uint32 level = 11;
      case 11: {
        if (tag == 88) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_gold_per_min;
        break;
      }

      // optional float gold_per_min = 12;
      case 12: {
        if (tag == 101) {
         parse_gold_per_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gold_per_min_)));
          set_has_gold_per_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_xp_per_min;
        break;
      }

      // optional float xp_per_min = 13;
      case 13: {
        if (tag == 109) {
         parse_xp_per_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xp_per_min_)));
          set_has_xp_per_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_ultimate_state;
        break;
      }

      // optional .CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
      case 14: {
        if (tag == 112) {
         parse_ultimate_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_IsValid(value)) {
            set_ultimate_state(static_cast< ::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_ultimate_cooldown;
        break;
      }

      // optional float ultimate_cooldown = 15;
      case 15: {
        if (tag == 125) {
         parse_ultimate_cooldown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ultimate_cooldown_)));
          set_has_ultimate_cooldown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_item0;
        break;
      }

      // optional uint32 item0 = 16;
      case 16: {
        if (tag == 128) {
         parse_item0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item0_)));
          set_has_item0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_item1;
        break;
      }

      // optional uint32 item1 = 17;
      case 17: {
        if (tag == 136) {
         parse_item1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item1_)));
          set_has_item1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_item2;
        break;
      }

      // optional uint32 item2 = 18;
      case 18: {
        if (tag == 144) {
         parse_item2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item2_)));
          set_has_item2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_item3;
        break;
      }

      // optional uint32 item3 = 19;
      case 19: {
        if (tag == 152) {
         parse_item3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item3_)));
          set_has_item3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_item4;
        break;
      }

      // optional uint32 item4 = 20;
      case 20: {
        if (tag == 160) {
         parse_item4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item4_)));
          set_has_item4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_item5;
        break;
      }

      // optional uint32 item5 = 21;
      case 21: {
        if (tag == 168) {
         parse_item5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item5_)));
          set_has_item5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_respawn_timer;
        break;
      }

      // optional uint32 respawn_timer = 22;
      case 22: {
        if (tag == 176) {
         parse_respawn_timer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &respawn_timer_)));
          set_has_respawn_timer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_account_id;
        break;
      }

      // optional uint32 account_id = 23;
      case 23: {
        if (tag == 184) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(197)) goto parse_position_x;
        break;
      }

      // optional float position_x = 24;
      case 24: {
        if (tag == 197) {
         parse_position_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_x_)));
          set_has_position_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(205)) goto parse_position_y;
        break;
      }

      // optional float position_y = 25;
      case 25: {
        if (tag == 205) {
         parse_position_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_y_)));
          set_has_position_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_net_worth;
        break;
      }

      // optional uint32 net_worth = 26;
      case 26: {
        if (tag == 208) {
         parse_net_worth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_worth_)));
          set_has_net_worth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_abilities;
        break;
      }

      // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility abilities = 27;
      case 27: {
        if (tag == 218) {
         parse_abilities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_abilities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_abilities;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTALiveScoreboardUpdate.Team.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTALiveScoreboardUpdate.Team.Player)
  return false;
#undef DO_
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTALiveScoreboardUpdate.Team.Player)
  // optional uint32 player_slot = 1;
  if (has_player_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_slot(), output);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_name(), output);
  }

  // optional string hero_name = 3;
  if (has_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hero_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hero_name(), output);
  }

  // optional uint32 hero_id = 4;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hero_id(), output);
  }

  // optional uint32 kills = 5;
  if (has_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->kills(), output);
  }

  // optional uint32 deaths = 6;
  if (has_deaths()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->deaths(), output);
  }

  // optional uint32 assists = 7;
  if (has_assists()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->assists(), output);
  }

  // optional uint32 last_hits = 8;
  if (has_last_hits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_hits(), output);
  }

  // optional uint32 denies = 9;
  if (has_denies()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->denies(), output);
  }

  // optional uint32 gold = 10;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->gold(), output);
  }

  // optional uint32 level = 11;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->level(), output);
  }

  // optional float gold_per_min = 12;
  if (has_gold_per_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->gold_per_min(), output);
  }

  // optional float xp_per_min = 13;
  if (has_xp_per_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->xp_per_min(), output);
  }

  // optional .CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
  if (has_ultimate_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->ultimate_state(), output);
  }

  // optional float ultimate_cooldown = 15;
  if (has_ultimate_cooldown()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->ultimate_cooldown(), output);
  }

  // optional uint32 item0 = 16;
  if (has_item0()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->item0(), output);
  }

  // optional uint32 item1 = 17;
  if (has_item1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->item1(), output);
  }

  // optional uint32 item2 = 18;
  if (has_item2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->item2(), output);
  }

  // optional uint32 item3 = 19;
  if (has_item3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->item3(), output);
  }

  // optional uint32 item4 = 20;
  if (has_item4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->item4(), output);
  }

  // optional uint32 item5 = 21;
  if (has_item5()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->item5(), output);
  }

  // optional uint32 respawn_timer = 22;
  if (has_respawn_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->respawn_timer(), output);
  }

  // optional uint32 account_id = 23;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->account_id(), output);
  }

  // optional float position_x = 24;
  if (has_position_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->position_x(), output);
  }

  // optional float position_y = 25;
  if (has_position_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->position_y(), output);
  }

  // optional uint32 net_worth = 26;
  if (has_net_worth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->net_worth(), output);
  }

  // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility abilities = 27;
  for (int i = 0; i < this->abilities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->abilities(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTALiveScoreboardUpdate.Team.Player)
}

::google::protobuf::uint8* CMsgDOTALiveScoreboardUpdate_Team_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALiveScoreboardUpdate.Team.Player)
  // optional uint32 player_slot = 1;
  if (has_player_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_slot(), target);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional string hero_name = 3;
  if (has_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hero_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hero_name(), target);
  }

  // optional uint32 hero_id = 4;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hero_id(), target);
  }

  // optional uint32 kills = 5;
  if (has_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->kills(), target);
  }

  // optional uint32 deaths = 6;
  if (has_deaths()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->deaths(), target);
  }

  // optional uint32 assists = 7;
  if (has_assists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->assists(), target);
  }

  // optional uint32 last_hits = 8;
  if (has_last_hits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_hits(), target);
  }

  // optional uint32 denies = 9;
  if (has_denies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->denies(), target);
  }

  // optional uint32 gold = 10;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->gold(), target);
  }

  // optional uint32 level = 11;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->level(), target);
  }

  // optional float gold_per_min = 12;
  if (has_gold_per_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->gold_per_min(), target);
  }

  // optional float xp_per_min = 13;
  if (has_xp_per_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->xp_per_min(), target);
  }

  // optional .CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
  if (has_ultimate_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->ultimate_state(), target);
  }

  // optional float ultimate_cooldown = 15;
  if (has_ultimate_cooldown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->ultimate_cooldown(), target);
  }

  // optional uint32 item0 = 16;
  if (has_item0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->item0(), target);
  }

  // optional uint32 item1 = 17;
  if (has_item1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->item1(), target);
  }

  // optional uint32 item2 = 18;
  if (has_item2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->item2(), target);
  }

  // optional uint32 item3 = 19;
  if (has_item3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->item3(), target);
  }

  // optional uint32 item4 = 20;
  if (has_item4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->item4(), target);
  }

  // optional uint32 item5 = 21;
  if (has_item5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->item5(), target);
  }

  // optional uint32 respawn_timer = 22;
  if (has_respawn_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->respawn_timer(), target);
  }

  // optional uint32 account_id = 23;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->account_id(), target);
  }

  // optional float position_x = 24;
  if (has_position_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->position_x(), target);
  }

  // optional float position_y = 25;
  if (has_position_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->position_y(), target);
  }

  // optional uint32 net_worth = 26;
  if (has_net_worth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->net_worth(), target);
  }

  // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility abilities = 27;
  for (int i = 0; i < this->abilities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->abilities(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALiveScoreboardUpdate.Team.Player)
  return target;
}

int CMsgDOTALiveScoreboardUpdate_Team_Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_slot = 1;
    if (has_player_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_slot());
    }

    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional string hero_name = 3;
    if (has_hero_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero_name());
    }

    // optional uint32 hero_id = 4;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 kills = 5;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 6;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 assists = 7;
    if (has_assists()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

    // optional uint32 last_hits = 8;
    if (has_last_hits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_hits());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 denies = 9;
    if (has_denies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->denies());
    }

    // optional uint32 gold = 10;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional uint32 level = 11;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional float gold_per_min = 12;
    if (has_gold_per_min()) {
      total_size += 1 + 4;
    }

    // optional float xp_per_min = 13;
    if (has_xp_per_min()) {
      total_size += 1 + 4;
    }

    // optional .CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
    if (has_ultimate_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ultimate_state());
    }

    // optional float ultimate_cooldown = 15;
    if (has_ultimate_cooldown()) {
      total_size += 1 + 4;
    }

    // optional uint32 item0 = 16;
    if (has_item0()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item0());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 item1 = 17;
    if (has_item1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item1());
    }

    // optional uint32 item2 = 18;
    if (has_item2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item2());
    }

    // optional uint32 item3 = 19;
    if (has_item3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item3());
    }

    // optional uint32 item4 = 20;
    if (has_item4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item4());
    }

    // optional uint32 item5 = 21;
    if (has_item5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item5());
    }

    // optional uint32 respawn_timer = 22;
    if (has_respawn_timer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->respawn_timer());
    }

    // optional uint32 account_id = 23;
    if (has_account_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional float position_x = 24;
    if (has_position_x()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float position_y = 25;
    if (has_position_y()) {
      total_size += 2 + 4;
    }

    // optional uint32 net_worth = 26;
    if (has_net_worth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_worth());
    }

  }
  // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility abilities = 27;
  total_size += 2 * this->abilities_size();
  for (int i = 0; i < this->abilities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->abilities(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTALiveScoreboardUpdate_Team_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTALiveScoreboardUpdate_Team_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::MergeFrom(const CMsgDOTALiveScoreboardUpdate_Team_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  abilities_.MergeFrom(from.abilities_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_slot()) {
      set_player_slot(from.player_slot());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_hero_name()) {
      set_hero_name(from.hero_name());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_kills()) {
      set_kills(from.kills());
    }
    if (from.has_deaths()) {
      set_deaths(from.deaths());
    }
    if (from.has_assists()) {
      set_assists(from.assists());
    }
    if (from.has_last_hits()) {
      set_last_hits(from.last_hits());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_denies()) {
      set_denies(from.denies());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_gold_per_min()) {
      set_gold_per_min(from.gold_per_min());
    }
    if (from.has_xp_per_min()) {
      set_xp_per_min(from.xp_per_min());
    }
    if (from.has_ultimate_state()) {
      set_ultimate_state(from.ultimate_state());
    }
    if (from.has_ultimate_cooldown()) {
      set_ultimate_cooldown(from.ultimate_cooldown());
    }
    if (from.has_item0()) {
      set_item0(from.item0());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_item1()) {
      set_item1(from.item1());
    }
    if (from.has_item2()) {
      set_item2(from.item2());
    }
    if (from.has_item3()) {
      set_item3(from.item3());
    }
    if (from.has_item4()) {
      set_item4(from.item4());
    }
    if (from.has_item5()) {
      set_item5(from.item5());
    }
    if (from.has_respawn_timer()) {
      set_respawn_timer(from.respawn_timer());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_position_x()) {
      set_position_x(from.position_x());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_position_y()) {
      set_position_y(from.position_y());
    }
    if (from.has_net_worth()) {
      set_net_worth(from.net_worth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::CopyFrom(const CMsgDOTALiveScoreboardUpdate_Team_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALiveScoreboardUpdate_Team_Player::IsInitialized() const {

  return true;
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::Swap(CMsgDOTALiveScoreboardUpdate_Team_Player* other) {
  if (other != this) {
    std::swap(player_slot_, other->player_slot_);
    std::swap(player_name_, other->player_name_);
    std::swap(hero_name_, other->hero_name_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(kills_, other->kills_);
    std::swap(deaths_, other->deaths_);
    std::swap(assists_, other->assists_);
    std::swap(last_hits_, other->last_hits_);
    std::swap(denies_, other->denies_);
    std::swap(gold_, other->gold_);
    std::swap(level_, other->level_);
    std::swap(gold_per_min_, other->gold_per_min_);
    std::swap(xp_per_min_, other->xp_per_min_);
    std::swap(ultimate_state_, other->ultimate_state_);
    std::swap(ultimate_cooldown_, other->ultimate_cooldown_);
    std::swap(item0_, other->item0_);
    std::swap(item1_, other->item1_);
    std::swap(item2_, other->item2_);
    std::swap(item3_, other->item3_);
    std::swap(item4_, other->item4_);
    std::swap(item5_, other->item5_);
    std::swap(respawn_timer_, other->respawn_timer_);
    std::swap(account_id_, other->account_id_);
    std::swap(position_x_, other->position_x_);
    std::swap(position_y_, other->position_y_);
    std::swap(net_worth_, other->net_worth_);
    abilities_.Swap(&other->abilities_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTALiveScoreboardUpdate_Team_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTALiveScoreboardUpdate_Team_Player_descriptor_;
  metadata.reflection = CMsgDOTALiveScoreboardUpdate_Team_Player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTALiveScoreboardUpdate_Team::kPlayersFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team::kScoreFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team::kTowerStateFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team::kBarracksStateFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team::kHeroPicksFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team::kHeroBansFieldNumber;
#endif  // !_MSC_VER

CMsgDOTALiveScoreboardUpdate_Team::CMsgDOTALiveScoreboardUpdate_Team()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTALiveScoreboardUpdate.Team)
}

void CMsgDOTALiveScoreboardUpdate_Team::InitAsDefaultInstance() {
}

CMsgDOTALiveScoreboardUpdate_Team::CMsgDOTALiveScoreboardUpdate_Team(const CMsgDOTALiveScoreboardUpdate_Team& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALiveScoreboardUpdate.Team)
}

void CMsgDOTALiveScoreboardUpdate_Team::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0u;
  tower_state_ = 0u;
  barracks_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTALiveScoreboardUpdate_Team::~CMsgDOTALiveScoreboardUpdate_Team() {
  // @@protoc_insertion_point(destructor:CMsgDOTALiveScoreboardUpdate.Team)
  SharedDtor();
}

void CMsgDOTALiveScoreboardUpdate_Team::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTALiveScoreboardUpdate_Team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTALiveScoreboardUpdate_Team::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTALiveScoreboardUpdate_Team_descriptor_;
}

const CMsgDOTALiveScoreboardUpdate_Team& CMsgDOTALiveScoreboardUpdate_Team::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgDOTALiveScoreboardUpdate_Team* CMsgDOTALiveScoreboardUpdate_Team::default_instance_ = NULL;

CMsgDOTALiveScoreboardUpdate_Team* CMsgDOTALiveScoreboardUpdate_Team::New() const {
  return new CMsgDOTALiveScoreboardUpdate_Team;
}

void CMsgDOTALiveScoreboardUpdate_Team::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTALiveScoreboardUpdate_Team*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 14) {
    ZR_(score_, tower_state_);
    barracks_state_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  players_.Clear();
  hero_picks_.Clear();
  hero_bans_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTALiveScoreboardUpdate_Team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTALiveScoreboardUpdate.Team)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
      case 1: {
        if (tag == 10) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional uint32 score = 2;
      case 2: {
        if (tag == 16) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tower_state;
        break;
      }

      // optional uint32 tower_state = 3;
      case 3: {
        if (tag == 24) {
         parse_tower_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_state_)));
          set_has_tower_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_barracks_state;
        break;
      }

      // optional uint32 barracks_state = 4;
      case 4: {
        if (tag == 32) {
         parse_barracks_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &barracks_state_)));
          set_has_barracks_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hero_picks;
        break;
      }

      // repeated uint32 hero_picks = 5;
      case 5: {
        if (tag == 40) {
         parse_hero_picks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_hero_picks())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hero_picks())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hero_picks;
        if (input->ExpectTag(48)) goto parse_hero_bans;
        break;
      }

      // repeated uint32 hero_bans = 6;
      case 6: {
        if (tag == 48) {
         parse_hero_bans:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_hero_bans())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hero_bans())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hero_bans;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTALiveScoreboardUpdate.Team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTALiveScoreboardUpdate.Team)
  return false;
#undef DO_
}

void CMsgDOTALiveScoreboardUpdate_Team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTALiveScoreboardUpdate.Team)
  // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // optional uint32 tower_state = 3;
  if (has_tower_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tower_state(), output);
  }

  // optional uint32 barracks_state = 4;
  if (has_barracks_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->barracks_state(), output);
  }

  // repeated uint32 hero_picks = 5;
  for (int i = 0; i < this->hero_picks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->hero_picks(i), output);
  }

  // repeated uint32 hero_bans = 6;
  for (int i = 0; i < this->hero_bans_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->hero_bans(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTALiveScoreboardUpdate.Team)
}

::google::protobuf::uint8* CMsgDOTALiveScoreboardUpdate_Team::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALiveScoreboardUpdate.Team)
  // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // optional uint32 tower_state = 3;
  if (has_tower_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tower_state(), target);
  }

  // optional uint32 barracks_state = 4;
  if (has_barracks_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->barracks_state(), target);
  }

  // repeated uint32 hero_picks = 5;
  for (int i = 0; i < this->hero_picks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->hero_picks(i), target);
  }

  // repeated uint32 hero_bans = 6;
  for (int i = 0; i < this->hero_bans_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->hero_bans(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALiveScoreboardUpdate.Team)
  return target;
}

int CMsgDOTALiveScoreboardUpdate_Team::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 tower_state = 3;
    if (has_tower_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_state());
    }

    // optional uint32 barracks_state = 4;
    if (has_barracks_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->barracks_state());
    }

  }
  // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  // repeated uint32 hero_picks = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->hero_picks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hero_picks(i));
    }
    total_size += 1 * this->hero_picks_size() + data_size;
  }

  // repeated uint32 hero_bans = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->hero_bans_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hero_bans(i));
    }
    total_size += 1 * this->hero_bans_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTALiveScoreboardUpdate_Team::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTALiveScoreboardUpdate_Team* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTALiveScoreboardUpdate_Team*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTALiveScoreboardUpdate_Team::MergeFrom(const CMsgDOTALiveScoreboardUpdate_Team& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  hero_picks_.MergeFrom(from.hero_picks_);
  hero_bans_.MergeFrom(from.hero_bans_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_tower_state()) {
      set_tower_state(from.tower_state());
    }
    if (from.has_barracks_state()) {
      set_barracks_state(from.barracks_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTALiveScoreboardUpdate_Team::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALiveScoreboardUpdate_Team::CopyFrom(const CMsgDOTALiveScoreboardUpdate_Team& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALiveScoreboardUpdate_Team::IsInitialized() const {

  return true;
}

void CMsgDOTALiveScoreboardUpdate_Team::Swap(CMsgDOTALiveScoreboardUpdate_Team* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(score_, other->score_);
    std::swap(tower_state_, other->tower_state_);
    std::swap(barracks_state_, other->barracks_state_);
    hero_picks_.Swap(&other->hero_picks_);
    hero_bans_.Swap(&other->hero_bans_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTALiveScoreboardUpdate_Team::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTALiveScoreboardUpdate_Team_descriptor_;
  metadata.reflection = CMsgDOTALiveScoreboardUpdate_Team_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTALiveScoreboardUpdate::kTournamentIdFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kTournamentGameIdFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kDurationFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kHltvDelayFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kTeamGoodFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kTeamBadFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kRoshanRespawnTimerFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kLeagueIdFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kMatchIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTALiveScoreboardUpdate::CMsgDOTALiveScoreboardUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTALiveScoreboardUpdate)
}

void CMsgDOTALiveScoreboardUpdate::InitAsDefaultInstance() {
  team_good_ = const_cast< ::CMsgDOTALiveScoreboardUpdate_Team*>(&::CMsgDOTALiveScoreboardUpdate_Team::default_instance());
  team_bad_ = const_cast< ::CMsgDOTALiveScoreboardUpdate_Team*>(&::CMsgDOTALiveScoreboardUpdate_Team::default_instance());
}

CMsgDOTALiveScoreboardUpdate::CMsgDOTALiveScoreboardUpdate(const CMsgDOTALiveScoreboardUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALiveScoreboardUpdate)
}

void CMsgDOTALiveScoreboardUpdate::SharedCtor() {
  _cached_size_ = 0;
  tournament_id_ = 0u;
  tournament_game_id_ = 0u;
  duration_ = 0;
  hltv_delay_ = 0;
  team_good_ = NULL;
  team_bad_ = NULL;
  roshan_respawn_timer_ = 0u;
  league_id_ = 0u;
  match_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTALiveScoreboardUpdate::~CMsgDOTALiveScoreboardUpdate() {
  // @@protoc_insertion_point(destructor:CMsgDOTALiveScoreboardUpdate)
  SharedDtor();
}

void CMsgDOTALiveScoreboardUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete team_good_;
    delete team_bad_;
  }
}

void CMsgDOTALiveScoreboardUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTALiveScoreboardUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTALiveScoreboardUpdate_descriptor_;
}

const CMsgDOTALiveScoreboardUpdate& CMsgDOTALiveScoreboardUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgDOTALiveScoreboardUpdate* CMsgDOTALiveScoreboardUpdate::default_instance_ = NULL;

CMsgDOTALiveScoreboardUpdate* CMsgDOTALiveScoreboardUpdate::New() const {
  return new CMsgDOTALiveScoreboardUpdate;
}

void CMsgDOTALiveScoreboardUpdate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTALiveScoreboardUpdate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(tournament_id_, hltv_delay_);
    ZR_(roshan_respawn_timer_, league_id_);
    if (has_team_good()) {
      if (team_good_ != NULL) team_good_->::CMsgDOTALiveScoreboardUpdate_Team::Clear();
    }
    if (has_team_bad()) {
      if (team_bad_ != NULL) team_bad_->::CMsgDOTALiveScoreboardUpdate_Team::Clear();
    }
  }
  match_id_ = GOOGLE_ULONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTALiveScoreboardUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTALiveScoreboardUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tournament_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
          set_has_tournament_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tournament_game_id;
        break;
      }

      // optional uint32 tournament_game_id = 2;
      case 2: {
        if (tag == 16) {
         parse_tournament_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_game_id_)));
          set_has_tournament_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_duration;
        break;
      }

      // optional float duration = 3;
      case 3: {
        if (tag == 29) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hltv_delay;
        break;
      }

      // optional int32 hltv_delay = 4;
      case 4: {
        if (tag == 32) {
         parse_hltv_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hltv_delay_)));
          set_has_hltv_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_team_good;
        break;
      }

      // optional .CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
      case 5: {
        if (tag == 42) {
         parse_team_good:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_good()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_team_bad;
        break;
      }

      // optional .CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
      case 6: {
        if (tag == 50) {
         parse_team_bad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_bad()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_roshan_respawn_timer;
        break;
      }

      // optional uint32 roshan_respawn_timer = 7;
      case 7: {
        if (tag == 56) {
         parse_roshan_respawn_timer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roshan_respawn_timer_)));
          set_has_roshan_respawn_timer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_league_id;
        break;
      }

      // optional uint32 league_id = 8;
      case 8: {
        if (tag == 64) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 9;
      case 9: {
        if (tag == 72) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTALiveScoreboardUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTALiveScoreboardUpdate)
  return false;
#undef DO_
}

void CMsgDOTALiveScoreboardUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTALiveScoreboardUpdate)
  // optional uint32 tournament_id = 1;
  if (has_tournament_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tournament_id(), output);
  }

  // optional uint32 tournament_game_id = 2;
  if (has_tournament_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tournament_game_id(), output);
  }

  // optional float duration = 3;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->duration(), output);
  }

  // optional int32 hltv_delay = 4;
  if (has_hltv_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hltv_delay(), output);
  }

  // optional .CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
  if (has_team_good()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->team_good(), output);
  }

  // optional .CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
  if (has_team_bad()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->team_bad(), output);
  }

  // optional uint32 roshan_respawn_timer = 7;
  if (has_roshan_respawn_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->roshan_respawn_timer(), output);
  }

  // optional uint32 league_id = 8;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->league_id(), output);
  }

  // optional uint64 match_id = 9;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->match_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTALiveScoreboardUpdate)
}

::google::protobuf::uint8* CMsgDOTALiveScoreboardUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALiveScoreboardUpdate)
  // optional uint32 tournament_id = 1;
  if (has_tournament_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tournament_id(), target);
  }

  // optional uint32 tournament_game_id = 2;
  if (has_tournament_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tournament_game_id(), target);
  }

  // optional float duration = 3;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->duration(), target);
  }

  // optional int32 hltv_delay = 4;
  if (has_hltv_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hltv_delay(), target);
  }

  // optional .CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
  if (has_team_good()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->team_good(), target);
  }

  // optional .CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
  if (has_team_bad()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->team_bad(), target);
  }

  // optional uint32 roshan_respawn_timer = 7;
  if (has_roshan_respawn_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->roshan_respawn_timer(), target);
  }

  // optional uint32 league_id = 8;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->league_id(), target);
  }

  // optional uint64 match_id = 9;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->match_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALiveScoreboardUpdate)
  return target;
}

int CMsgDOTALiveScoreboardUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tournament_id = 1;
    if (has_tournament_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 tournament_game_id = 2;
    if (has_tournament_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_game_id());
    }

    // optional float duration = 3;
    if (has_duration()) {
      total_size += 1 + 4;
    }

    // optional int32 hltv_delay = 4;
    if (has_hltv_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hltv_delay());
    }

    // optional .CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
    if (has_team_good()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_good());
    }

    // optional .CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
    if (has_team_bad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_bad());
    }

    // optional uint32 roshan_respawn_timer = 7;
    if (has_roshan_respawn_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roshan_respawn_timer());
    }

    // optional uint32 league_id = 8;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 match_id = 9;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTALiveScoreboardUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTALiveScoreboardUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTALiveScoreboardUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTALiveScoreboardUpdate::MergeFrom(const CMsgDOTALiveScoreboardUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tournament_id()) {
      set_tournament_id(from.tournament_id());
    }
    if (from.has_tournament_game_id()) {
      set_tournament_game_id(from.tournament_game_id());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_hltv_delay()) {
      set_hltv_delay(from.hltv_delay());
    }
    if (from.has_team_good()) {
      mutable_team_good()->::CMsgDOTALiveScoreboardUpdate_Team::MergeFrom(from.team_good());
    }
    if (from.has_team_bad()) {
      mutable_team_bad()->::CMsgDOTALiveScoreboardUpdate_Team::MergeFrom(from.team_bad());
    }
    if (from.has_roshan_respawn_timer()) {
      set_roshan_respawn_timer(from.roshan_respawn_timer());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTALiveScoreboardUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALiveScoreboardUpdate::CopyFrom(const CMsgDOTALiveScoreboardUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALiveScoreboardUpdate::IsInitialized() const {

  return true;
}

void CMsgDOTALiveScoreboardUpdate::Swap(CMsgDOTALiveScoreboardUpdate* other) {
  if (other != this) {
    std::swap(tournament_id_, other->tournament_id_);
    std::swap(tournament_game_id_, other->tournament_game_id_);
    std::swap(duration_, other->duration_);
    std::swap(hltv_delay_, other->hltv_delay_);
    std::swap(team_good_, other->team_good_);
    std::swap(team_bad_, other->team_bad_);
    std::swap(roshan_respawn_timer_, other->roshan_respawn_timer_);
    std::swap(league_id_, other->league_id_);
    std::swap(match_id_, other->match_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTALiveScoreboardUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTALiveScoreboardUpdate_descriptor_;
  metadata.reflection = CMsgDOTALiveScoreboardUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTARequestPlayerResources::kSteamIdFieldNumber;
const int CMsgDOTARequestPlayerResources::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARequestPlayerResources::CMsgDOTARequestPlayerResources()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARequestPlayerResources)
}

void CMsgDOTARequestPlayerResources::InitAsDefaultInstance() {
}

CMsgDOTARequestPlayerResources::CMsgDOTARequestPlayerResources(const CMsgDOTARequestPlayerResources& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARequestPlayerResources)
}

void CMsgDOTARequestPlayerResources::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARequestPlayerResources::~CMsgDOTARequestPlayerResources() {
  // @@protoc_insertion_point(destructor:CMsgDOTARequestPlayerResources)
  SharedDtor();
}

void CMsgDOTARequestPlayerResources::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARequestPlayerResources::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARequestPlayerResources::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARequestPlayerResources_descriptor_;
}

const CMsgDOTARequestPlayerResources& CMsgDOTARequestPlayerResources::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgDOTARequestPlayerResources* CMsgDOTARequestPlayerResources::default_instance_ = NULL;

CMsgDOTARequestPlayerResources* CMsgDOTARequestPlayerResources::New() const {
  return new CMsgDOTARequestPlayerResources;
}

void CMsgDOTARequestPlayerResources::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTARequestPlayerResources*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(steam_id_, player_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARequestPlayerResources::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARequestPlayerResources)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional uint32 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARequestPlayerResources)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARequestPlayerResources)
  return false;
#undef DO_
}

void CMsgDOTARequestPlayerResources::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARequestPlayerResources)
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARequestPlayerResources)
}

::google::protobuf::uint8* CMsgDOTARequestPlayerResources::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARequestPlayerResources)
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARequestPlayerResources)
  return target;
}

int CMsgDOTARequestPlayerResources::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARequestPlayerResources::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARequestPlayerResources* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARequestPlayerResources*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARequestPlayerResources::MergeFrom(const CMsgDOTARequestPlayerResources& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARequestPlayerResources::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestPlayerResources::CopyFrom(const CMsgDOTARequestPlayerResources& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestPlayerResources::IsInitialized() const {

  return true;
}

void CMsgDOTARequestPlayerResources::Swap(CMsgDOTARequestPlayerResources* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARequestPlayerResources::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARequestPlayerResources_descriptor_;
  metadata.reflection = CMsgDOTARequestPlayerResources_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTARequestPlayerResourcesResponse::kSteamIdFieldNumber;
const int CMsgDOTARequestPlayerResourcesResponse::kRankFieldNumber;
const int CMsgDOTARequestPlayerResourcesResponse::kPlayerIdFieldNumber;
const int CMsgDOTARequestPlayerResourcesResponse::kPreventTextChatFieldNumber;
const int CMsgDOTARequestPlayerResourcesResponse::kPreventVoiceChatFieldNumber;
const int CMsgDOTARequestPlayerResourcesResponse::kLowPriorityFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARequestPlayerResourcesResponse::CMsgDOTARequestPlayerResourcesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARequestPlayerResourcesResponse)
}

void CMsgDOTARequestPlayerResourcesResponse::InitAsDefaultInstance() {
}

CMsgDOTARequestPlayerResourcesResponse::CMsgDOTARequestPlayerResourcesResponse(const CMsgDOTARequestPlayerResourcesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARequestPlayerResourcesResponse)
}

void CMsgDOTARequestPlayerResourcesResponse::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  player_id_ = 0u;
  prevent_text_chat_ = false;
  prevent_voice_chat_ = false;
  low_priority_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARequestPlayerResourcesResponse::~CMsgDOTARequestPlayerResourcesResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTARequestPlayerResourcesResponse)
  SharedDtor();
}

void CMsgDOTARequestPlayerResourcesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARequestPlayerResourcesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARequestPlayerResourcesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARequestPlayerResourcesResponse_descriptor_;
}

const CMsgDOTARequestPlayerResourcesResponse& CMsgDOTARequestPlayerResourcesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgDOTARequestPlayerResourcesResponse* CMsgDOTARequestPlayerResourcesResponse::default_instance_ = NULL;

CMsgDOTARequestPlayerResourcesResponse* CMsgDOTARequestPlayerResourcesResponse::New() const {
  return new CMsgDOTARequestPlayerResourcesResponse;
}

void CMsgDOTARequestPlayerResourcesResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTARequestPlayerResourcesResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(steam_id_, low_priority_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARequestPlayerResourcesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARequestPlayerResourcesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 2;
      case 2: {
        if (tag == 16) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // optional uint32 player_id = 3;
      case 3: {
        if (tag == 24) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_prevent_text_chat;
        break;
      }

      // optional bool prevent_text_chat = 4;
      case 4: {
        if (tag == 32) {
         parse_prevent_text_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prevent_text_chat_)));
          set_has_prevent_text_chat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_prevent_voice_chat;
        break;
      }

      // optional bool prevent_voice_chat = 5;
      case 5: {
        if (tag == 40) {
         parse_prevent_voice_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prevent_voice_chat_)));
          set_has_prevent_voice_chat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_low_priority;
        break;
      }

      // optional bool low_priority = 6;
      case 6: {
        if (tag == 48) {
         parse_low_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_priority_)));
          set_has_low_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARequestPlayerResourcesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARequestPlayerResourcesResponse)
  return false;
#undef DO_
}

void CMsgDOTARequestPlayerResourcesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARequestPlayerResourcesResponse)
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  // optional uint32 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_id(), output);
  }

  // optional bool prevent_text_chat = 4;
  if (has_prevent_text_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->prevent_text_chat(), output);
  }

  // optional bool prevent_voice_chat = 5;
  if (has_prevent_voice_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->prevent_voice_chat(), output);
  }

  // optional bool low_priority = 6;
  if (has_low_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->low_priority(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARequestPlayerResourcesResponse)
}

::google::protobuf::uint8* CMsgDOTARequestPlayerResourcesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARequestPlayerResourcesResponse)
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  // optional uint32 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_id(), target);
  }

  // optional bool prevent_text_chat = 4;
  if (has_prevent_text_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->prevent_text_chat(), target);
  }

  // optional bool prevent_voice_chat = 5;
  if (has_prevent_voice_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->prevent_voice_chat(), target);
  }

  // optional bool low_priority = 6;
  if (has_low_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->low_priority(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARequestPlayerResourcesResponse)
  return target;
}

int CMsgDOTARequestPlayerResourcesResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional bool prevent_text_chat = 4;
    if (has_prevent_text_chat()) {
      total_size += 1 + 1;
    }

    // optional bool prevent_voice_chat = 5;
    if (has_prevent_voice_chat()) {
      total_size += 1 + 1;
    }

    // optional bool low_priority = 6;
    if (has_low_priority()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARequestPlayerResourcesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARequestPlayerResourcesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARequestPlayerResourcesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARequestPlayerResourcesResponse::MergeFrom(const CMsgDOTARequestPlayerResourcesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_prevent_text_chat()) {
      set_prevent_text_chat(from.prevent_text_chat());
    }
    if (from.has_prevent_voice_chat()) {
      set_prevent_voice_chat(from.prevent_voice_chat());
    }
    if (from.has_low_priority()) {
      set_low_priority(from.low_priority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARequestPlayerResourcesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestPlayerResourcesResponse::CopyFrom(const CMsgDOTARequestPlayerResourcesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestPlayerResourcesResponse::IsInitialized() const {

  return true;
}

void CMsgDOTARequestPlayerResourcesResponse::Swap(CMsgDOTARequestPlayerResourcesResponse* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(rank_, other->rank_);
    std::swap(player_id_, other->player_id_);
    std::swap(prevent_text_chat_, other->prevent_text_chat_);
    std::swap(prevent_voice_chat_, other->prevent_voice_chat_);
    std::swap(low_priority_, other->low_priority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARequestPlayerResourcesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARequestPlayerResourcesResponse_descriptor_;
  metadata.reflection = CMsgDOTARequestPlayerResourcesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTARequestBatchPlayerResources::kAccountIdsFieldNumber;
const int CMsgDOTARequestBatchPlayerResources::kRankTypesFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARequestBatchPlayerResources::CMsgDOTARequestBatchPlayerResources()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARequestBatchPlayerResources)
}

void CMsgDOTARequestBatchPlayerResources::InitAsDefaultInstance() {
}

CMsgDOTARequestBatchPlayerResources::CMsgDOTARequestBatchPlayerResources(const CMsgDOTARequestBatchPlayerResources& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARequestBatchPlayerResources)
}

void CMsgDOTARequestBatchPlayerResources::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARequestBatchPlayerResources::~CMsgDOTARequestBatchPlayerResources() {
  // @@protoc_insertion_point(destructor:CMsgDOTARequestBatchPlayerResources)
  SharedDtor();
}

void CMsgDOTARequestBatchPlayerResources::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARequestBatchPlayerResources::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARequestBatchPlayerResources::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARequestBatchPlayerResources_descriptor_;
}

const CMsgDOTARequestBatchPlayerResources& CMsgDOTARequestBatchPlayerResources::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgDOTARequestBatchPlayerResources* CMsgDOTARequestBatchPlayerResources::default_instance_ = NULL;

CMsgDOTARequestBatchPlayerResources* CMsgDOTARequestBatchPlayerResources::New() const {
  return new CMsgDOTARequestBatchPlayerResources;
}

void CMsgDOTARequestBatchPlayerResources::Clear() {
  account_ids_.Clear();
  rank_types_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARequestBatchPlayerResources::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARequestBatchPlayerResources)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10, input, this->mutable_account_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rank_types;
        break;
      }

      // repeated uint32 rank_types = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_rank_types:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rank_types())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34, input, this->mutable_rank_types())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARequestBatchPlayerResources)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARequestBatchPlayerResources)
  return false;
#undef DO_
}

void CMsgDOTARequestBatchPlayerResources::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARequestBatchPlayerResources)
  // repeated uint32 account_ids = 1 [packed = true];
  if (this->account_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_account_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->account_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->account_ids(i), output);
  }

  // repeated uint32 rank_types = 4 [packed = true];
  if (this->rank_types_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_rank_types_cached_byte_size_);
  }
  for (int i = 0; i < this->rank_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->rank_types(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARequestBatchPlayerResources)
}

::google::protobuf::uint8* CMsgDOTARequestBatchPlayerResources::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARequestBatchPlayerResources)
  // repeated uint32 account_ids = 1 [packed = true];
  if (this->account_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _account_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->account_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->account_ids(i), target);
  }

  // repeated uint32 rank_types = 4 [packed = true];
  if (this->rank_types_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _rank_types_cached_byte_size_, target);
  }
  for (int i = 0; i < this->rank_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->rank_types(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARequestBatchPlayerResources)
  return target;
}

int CMsgDOTARequestBatchPlayerResources::ByteSize() const {
  int total_size = 0;

  // repeated uint32 account_ids = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->account_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->account_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _account_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 rank_types = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->rank_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rank_types(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rank_types_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARequestBatchPlayerResources::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARequestBatchPlayerResources* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARequestBatchPlayerResources*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARequestBatchPlayerResources::MergeFrom(const CMsgDOTARequestBatchPlayerResources& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_ids_.MergeFrom(from.account_ids_);
  rank_types_.MergeFrom(from.rank_types_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARequestBatchPlayerResources::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestBatchPlayerResources::CopyFrom(const CMsgDOTARequestBatchPlayerResources& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestBatchPlayerResources::IsInitialized() const {

  return true;
}

void CMsgDOTARequestBatchPlayerResources::Swap(CMsgDOTARequestBatchPlayerResources* other) {
  if (other != this) {
    account_ids_.Swap(&other->account_ids_);
    rank_types_.Swap(&other->rank_types_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARequestBatchPlayerResources::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARequestBatchPlayerResources_descriptor_;
  metadata.reflection = CMsgDOTARequestBatchPlayerResources_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTARequestBatchPlayerResourcesResponse_Result::kAccountIdFieldNumber;
const int CMsgDOTARequestBatchPlayerResourcesResponse_Result::kPreventTextChatFieldNumber;
const int CMsgDOTARequestBatchPlayerResourcesResponse_Result::kPreventVoiceChatFieldNumber;
const int CMsgDOTARequestBatchPlayerResourcesResponse_Result::kRankFieldNumber;
const int CMsgDOTARequestBatchPlayerResourcesResponse_Result::kRankCalibratedFieldNumber;
const int CMsgDOTARequestBatchPlayerResourcesResponse_Result::kLowPriorityFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARequestBatchPlayerResourcesResponse_Result::CMsgDOTARequestBatchPlayerResourcesResponse_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARequestBatchPlayerResourcesResponse.Result)
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::InitAsDefaultInstance() {
}

CMsgDOTARequestBatchPlayerResourcesResponse_Result::CMsgDOTARequestBatchPlayerResourcesResponse_Result(const CMsgDOTARequestBatchPlayerResourcesResponse_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARequestBatchPlayerResourcesResponse.Result)
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  prevent_text_chat_ = false;
  prevent_voice_chat_ = false;
  rank_ = 0u;
  rank_calibrated_ = false;
  low_priority_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARequestBatchPlayerResourcesResponse_Result::~CMsgDOTARequestBatchPlayerResourcesResponse_Result() {
  // @@protoc_insertion_point(destructor:CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  SharedDtor();
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARequestBatchPlayerResourcesResponse_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARequestBatchPlayerResourcesResponse_Result_descriptor_;
}

const CMsgDOTARequestBatchPlayerResourcesResponse_Result& CMsgDOTARequestBatchPlayerResourcesResponse_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgDOTARequestBatchPlayerResourcesResponse_Result* CMsgDOTARequestBatchPlayerResourcesResponse_Result::default_instance_ = NULL;

CMsgDOTARequestBatchPlayerResourcesResponse_Result* CMsgDOTARequestBatchPlayerResourcesResponse_Result::New() const {
  return new CMsgDOTARequestBatchPlayerResourcesResponse_Result;
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTARequestBatchPlayerResourcesResponse_Result*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(account_id_, low_priority_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_prevent_text_chat;
        break;
      }

      // optional bool prevent_text_chat = 2;
      case 2: {
        if (tag == 16) {
         parse_prevent_text_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prevent_text_chat_)));
          set_has_prevent_text_chat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_prevent_voice_chat;
        break;
      }

      // optional bool prevent_voice_chat = 3;
      case 3: {
        if (tag == 24) {
         parse_prevent_voice_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prevent_voice_chat_)));
          set_has_prevent_voice_chat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 4;
      case 4: {
        if (tag == 32) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_rank_calibrated;
        break;
      }

      // optional bool rank_calibrated = 5;
      case 5: {
        if (tag == 40) {
         parse_rank_calibrated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rank_calibrated_)));
          set_has_rank_calibrated();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_low_priority;
        break;
      }

      // optional bool low_priority = 6;
      case 6: {
        if (tag == 48) {
         parse_low_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_priority_)));
          set_has_low_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  return false;
#undef DO_
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional bool prevent_text_chat = 2;
  if (has_prevent_text_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->prevent_text_chat(), output);
  }

  // optional bool prevent_voice_chat = 3;
  if (has_prevent_voice_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->prevent_voice_chat(), output);
  }

  // optional uint32 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rank(), output);
  }

  // optional bool rank_calibrated = 5;
  if (has_rank_calibrated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->rank_calibrated(), output);
  }

  // optional bool low_priority = 6;
  if (has_low_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->low_priority(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARequestBatchPlayerResourcesResponse.Result)
}

::google::protobuf::uint8* CMsgDOTARequestBatchPlayerResourcesResponse_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional bool prevent_text_chat = 2;
  if (has_prevent_text_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->prevent_text_chat(), target);
  }

  // optional bool prevent_voice_chat = 3;
  if (has_prevent_voice_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->prevent_voice_chat(), target);
  }

  // optional uint32 rank = 4;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rank(), target);
  }

  // optional bool rank_calibrated = 5;
  if (has_rank_calibrated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->rank_calibrated(), target);
  }

  // optional bool low_priority = 6;
  if (has_low_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->low_priority(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  return target;
}

int CMsgDOTARequestBatchPlayerResourcesResponse_Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional bool prevent_text_chat = 2;
    if (has_prevent_text_chat()) {
      total_size += 1 + 1;
    }

    // optional bool prevent_voice_chat = 3;
    if (has_prevent_voice_chat()) {
      total_size += 1 + 1;
    }

    // optional uint32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional bool rank_calibrated = 5;
    if (has_rank_calibrated()) {
      total_size += 1 + 1;
    }

    // optional bool low_priority = 6;
    if (has_low_priority()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARequestBatchPlayerResourcesResponse_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARequestBatchPlayerResourcesResponse_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::MergeFrom(const CMsgDOTARequestBatchPlayerResourcesResponse_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_prevent_text_chat()) {
      set_prevent_text_chat(from.prevent_text_chat());
    }
    if (from.has_prevent_voice_chat()) {
      set_prevent_voice_chat(from.prevent_voice_chat());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_rank_calibrated()) {
      set_rank_calibrated(from.rank_calibrated());
    }
    if (from.has_low_priority()) {
      set_low_priority(from.low_priority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::CopyFrom(const CMsgDOTARequestBatchPlayerResourcesResponse_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::IsInitialized() const {

  return true;
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::Swap(CMsgDOTARequestBatchPlayerResourcesResponse_Result* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(prevent_text_chat_, other->prevent_text_chat_);
    std::swap(prevent_voice_chat_, other->prevent_voice_chat_);
    std::swap(rank_, other->rank_);
    std::swap(rank_calibrated_, other->rank_calibrated_);
    std::swap(low_priority_, other->low_priority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARequestBatchPlayerResourcesResponse_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARequestBatchPlayerResourcesResponse_Result_descriptor_;
  metadata.reflection = CMsgDOTARequestBatchPlayerResourcesResponse_Result_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARequestBatchPlayerResourcesResponse::kResultsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARequestBatchPlayerResourcesResponse::CMsgDOTARequestBatchPlayerResourcesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARequestBatchPlayerResourcesResponse)
}

void CMsgDOTARequestBatchPlayerResourcesResponse::InitAsDefaultInstance() {
}

CMsgDOTARequestBatchPlayerResourcesResponse::CMsgDOTARequestBatchPlayerResourcesResponse(const CMsgDOTARequestBatchPlayerResourcesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARequestBatchPlayerResourcesResponse)
}

void CMsgDOTARequestBatchPlayerResourcesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARequestBatchPlayerResourcesResponse::~CMsgDOTARequestBatchPlayerResourcesResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTARequestBatchPlayerResourcesResponse)
  SharedDtor();
}

void CMsgDOTARequestBatchPlayerResourcesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARequestBatchPlayerResourcesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARequestBatchPlayerResourcesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARequestBatchPlayerResourcesResponse_descriptor_;
}

const CMsgDOTARequestBatchPlayerResourcesResponse& CMsgDOTARequestBatchPlayerResourcesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgDOTARequestBatchPlayerResourcesResponse* CMsgDOTARequestBatchPlayerResourcesResponse::default_instance_ = NULL;

CMsgDOTARequestBatchPlayerResourcesResponse* CMsgDOTARequestBatchPlayerResourcesResponse::New() const {
  return new CMsgDOTARequestBatchPlayerResourcesResponse;
}

void CMsgDOTARequestBatchPlayerResourcesResponse::Clear() {
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARequestBatchPlayerResourcesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARequestBatchPlayerResourcesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgDOTARequestBatchPlayerResourcesResponse.Result results = 6;
      case 6: {
        if (tag == 50) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_results;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARequestBatchPlayerResourcesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARequestBatchPlayerResourcesResponse)
  return false;
#undef DO_
}

void CMsgDOTARequestBatchPlayerResourcesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARequestBatchPlayerResourcesResponse)
  // repeated .CMsgDOTARequestBatchPlayerResourcesResponse.Result results = 6;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->results(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARequestBatchPlayerResourcesResponse)
}

::google::protobuf::uint8* CMsgDOTARequestBatchPlayerResourcesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARequestBatchPlayerResourcesResponse)
  // repeated .CMsgDOTARequestBatchPlayerResourcesResponse.Result results = 6;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->results(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARequestBatchPlayerResourcesResponse)
  return target;
}

int CMsgDOTARequestBatchPlayerResourcesResponse::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgDOTARequestBatchPlayerResourcesResponse.Result results = 6;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARequestBatchPlayerResourcesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARequestBatchPlayerResourcesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARequestBatchPlayerResourcesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARequestBatchPlayerResourcesResponse::MergeFrom(const CMsgDOTARequestBatchPlayerResourcesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  results_.MergeFrom(from.results_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARequestBatchPlayerResourcesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestBatchPlayerResourcesResponse::CopyFrom(const CMsgDOTARequestBatchPlayerResourcesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestBatchPlayerResourcesResponse::IsInitialized() const {

  return true;
}

void CMsgDOTARequestBatchPlayerResourcesResponse::Swap(CMsgDOTARequestBatchPlayerResourcesResponse* other) {
  if (other != this) {
    results_.Swap(&other->results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARequestBatchPlayerResourcesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARequestBatchPlayerResourcesResponse_descriptor_;
  metadata.reflection = CMsgDOTARequestBatchPlayerResourcesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAPlayerFailedToConnect::kFailedLoadersFieldNumber;
const int CMsgDOTAPlayerFailedToConnect::kAbandonedLoadersFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAPlayerFailedToConnect::CMsgDOTAPlayerFailedToConnect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAPlayerFailedToConnect)
}

void CMsgDOTAPlayerFailedToConnect::InitAsDefaultInstance() {
}

CMsgDOTAPlayerFailedToConnect::CMsgDOTAPlayerFailedToConnect(const CMsgDOTAPlayerFailedToConnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPlayerFailedToConnect)
}

void CMsgDOTAPlayerFailedToConnect::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAPlayerFailedToConnect::~CMsgDOTAPlayerFailedToConnect() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPlayerFailedToConnect)
  SharedDtor();
}

void CMsgDOTAPlayerFailedToConnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAPlayerFailedToConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAPlayerFailedToConnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAPlayerFailedToConnect_descriptor_;
}

const CMsgDOTAPlayerFailedToConnect& CMsgDOTAPlayerFailedToConnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgDOTAPlayerFailedToConnect* CMsgDOTAPlayerFailedToConnect::default_instance_ = NULL;

CMsgDOTAPlayerFailedToConnect* CMsgDOTAPlayerFailedToConnect::New() const {
  return new CMsgDOTAPlayerFailedToConnect;
}

void CMsgDOTAPlayerFailedToConnect::Clear() {
  failed_loaders_.Clear();
  abandoned_loaders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAPlayerFailedToConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAPlayerFailedToConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 failed_loaders = 1;
      case 1: {
        if (tag == 9) {
         parse_failed_loaders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9, input, this->mutable_failed_loaders())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_failed_loaders())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_failed_loaders;
        if (input->ExpectTag(17)) goto parse_abandoned_loaders;
        break;
      }

      // repeated fixed64 abandoned_loaders = 2;
      case 2: {
        if (tag == 17) {
         parse_abandoned_loaders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_abandoned_loaders())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_abandoned_loaders())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_abandoned_loaders;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAPlayerFailedToConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAPlayerFailedToConnect)
  return false;
#undef DO_
}

void CMsgDOTAPlayerFailedToConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAPlayerFailedToConnect)
  // repeated fixed64 failed_loaders = 1;
  for (int i = 0; i < this->failed_loaders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->failed_loaders(i), output);
  }

  // repeated fixed64 abandoned_loaders = 2;
  for (int i = 0; i < this->abandoned_loaders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->abandoned_loaders(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAPlayerFailedToConnect)
}

::google::protobuf::uint8* CMsgDOTAPlayerFailedToConnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPlayerFailedToConnect)
  // repeated fixed64 failed_loaders = 1;
  for (int i = 0; i < this->failed_loaders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(1, this->failed_loaders(i), target);
  }

  // repeated fixed64 abandoned_loaders = 2;
  for (int i = 0; i < this->abandoned_loaders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(2, this->abandoned_loaders(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPlayerFailedToConnect)
  return target;
}

int CMsgDOTAPlayerFailedToConnect::ByteSize() const {
  int total_size = 0;

  // repeated fixed64 failed_loaders = 1;
  {
    int data_size = 0;
    data_size = 8 * this->failed_loaders_size();
    total_size += 1 * this->failed_loaders_size() + data_size;
  }

  // repeated fixed64 abandoned_loaders = 2;
  {
    int data_size = 0;
    data_size = 8 * this->abandoned_loaders_size();
    total_size += 1 * this->abandoned_loaders_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAPlayerFailedToConnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAPlayerFailedToConnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAPlayerFailedToConnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAPlayerFailedToConnect::MergeFrom(const CMsgDOTAPlayerFailedToConnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  failed_loaders_.MergeFrom(from.failed_loaders_);
  abandoned_loaders_.MergeFrom(from.abandoned_loaders_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAPlayerFailedToConnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPlayerFailedToConnect::CopyFrom(const CMsgDOTAPlayerFailedToConnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPlayerFailedToConnect::IsInitialized() const {

  return true;
}

void CMsgDOTAPlayerFailedToConnect::Swap(CMsgDOTAPlayerFailedToConnect* other) {
  if (other != this) {
    failed_loaders_.Swap(&other->failed_loaders_);
    abandoned_loaders_.Swap(&other->abandoned_loaders_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAPlayerFailedToConnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAPlayerFailedToConnect_descriptor_;
  metadata.reflection = CMsgDOTAPlayerFailedToConnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToRelayConnect::kSourceTvPublicAddrFieldNumber;
const int CMsgGCToRelayConnect::kSourceTvPrivateAddrFieldNumber;
const int CMsgGCToRelayConnect::kSourceTvPortFieldNumber;
const int CMsgGCToRelayConnect::kGameServerSteamIdFieldNumber;
const int CMsgGCToRelayConnect::kParentCountFieldNumber;
const int CMsgGCToRelayConnect::kTvUniqueSecretCodeFieldNumber;
const int CMsgGCToRelayConnect::kSourceTvSteamidFieldNumber;
#endif  // !_MSC_VER

CMsgGCToRelayConnect::CMsgGCToRelayConnect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToRelayConnect)
}

void CMsgGCToRelayConnect::InitAsDefaultInstance() {
}

CMsgGCToRelayConnect::CMsgGCToRelayConnect(const CMsgGCToRelayConnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToRelayConnect)
}

void CMsgGCToRelayConnect::SharedCtor() {
  _cached_size_ = 0;
  source_tv_public_addr_ = 0u;
  source_tv_private_addr_ = 0u;
  source_tv_port_ = 0u;
  game_server_steam_id_ = GOOGLE_ULONGLONG(0);
  parent_count_ = 0u;
  tv_unique_secret_code_ = GOOGLE_ULONGLONG(0);
  source_tv_steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToRelayConnect::~CMsgGCToRelayConnect() {
  // @@protoc_insertion_point(destructor:CMsgGCToRelayConnect)
  SharedDtor();
}

void CMsgGCToRelayConnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToRelayConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToRelayConnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToRelayConnect_descriptor_;
}

const CMsgGCToRelayConnect& CMsgGCToRelayConnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGCToRelayConnect* CMsgGCToRelayConnect::default_instance_ = NULL;

CMsgGCToRelayConnect* CMsgGCToRelayConnect::New() const {
  return new CMsgGCToRelayConnect;
}

void CMsgGCToRelayConnect::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGCToRelayConnect*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(source_tv_public_addr_, source_tv_steamid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToRelayConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToRelayConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 source_tv_public_addr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_tv_public_addr_)));
          set_has_source_tv_public_addr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_source_tv_private_addr;
        break;
      }

      // optional uint32 source_tv_private_addr = 2;
      case 2: {
        if (tag == 16) {
         parse_source_tv_private_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_tv_private_addr_)));
          set_has_source_tv_private_addr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_source_tv_port;
        break;
      }

      // optional uint32 source_tv_port = 3;
      case 3: {
        if (tag == 24) {
         parse_source_tv_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_tv_port_)));
          set_has_source_tv_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_game_server_steam_id;
        break;
      }

      // optional uint64 game_server_steam_id = 4;
      case 4: {
        if (tag == 32) {
         parse_game_server_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_server_steam_id_)));
          set_has_game_server_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_parent_count;
        break;
      }

      // optional uint32 parent_count = 5;
      case 5: {
        if (tag == 40) {
         parse_parent_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_count_)));
          set_has_parent_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_tv_unique_secret_code;
        break;
      }

      // optional fixed64 tv_unique_secret_code = 6;
      case 6: {
        if (tag == 49) {
         parse_tv_unique_secret_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &tv_unique_secret_code_)));
          set_has_tv_unique_secret_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_source_tv_steamid;
        break;
      }

      // optional fixed64 source_tv_steamid = 7;
      case 7: {
        if (tag == 57) {
         parse_source_tv_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_tv_steamid_)));
          set_has_source_tv_steamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToRelayConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToRelayConnect)
  return false;
#undef DO_
}

void CMsgGCToRelayConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToRelayConnect)
  // optional uint32 source_tv_public_addr = 1;
  if (has_source_tv_public_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->source_tv_public_addr(), output);
  }

  // optional uint32 source_tv_private_addr = 2;
  if (has_source_tv_private_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->source_tv_private_addr(), output);
  }

  // optional uint32 source_tv_port = 3;
  if (has_source_tv_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->source_tv_port(), output);
  }

  // optional uint64 game_server_steam_id = 4;
  if (has_game_server_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->game_server_steam_id(), output);
  }

  // optional uint32 parent_count = 5;
  if (has_parent_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->parent_count(), output);
  }

  // optional fixed64 tv_unique_secret_code = 6;
  if (has_tv_unique_secret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->tv_unique_secret_code(), output);
  }

  // optional fixed64 source_tv_steamid = 7;
  if (has_source_tv_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->source_tv_steamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToRelayConnect)
}

::google::protobuf::uint8* CMsgGCToRelayConnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToRelayConnect)
  // optional uint32 source_tv_public_addr = 1;
  if (has_source_tv_public_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->source_tv_public_addr(), target);
  }

  // optional uint32 source_tv_private_addr = 2;
  if (has_source_tv_private_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->source_tv_private_addr(), target);
  }

  // optional uint32 source_tv_port = 3;
  if (has_source_tv_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->source_tv_port(), target);
  }

  // optional uint64 game_server_steam_id = 4;
  if (has_game_server_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->game_server_steam_id(), target);
  }

  // optional uint32 parent_count = 5;
  if (has_parent_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->parent_count(), target);
  }

  // optional fixed64 tv_unique_secret_code = 6;
  if (has_tv_unique_secret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->tv_unique_secret_code(), target);
  }

  // optional fixed64 source_tv_steamid = 7;
  if (has_source_tv_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->source_tv_steamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToRelayConnect)
  return target;
}

int CMsgGCToRelayConnect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 source_tv_public_addr = 1;
    if (has_source_tv_public_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_tv_public_addr());
    }

    // optional uint32 source_tv_private_addr = 2;
    if (has_source_tv_private_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_tv_private_addr());
    }

    // optional uint32 source_tv_port = 3;
    if (has_source_tv_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_tv_port());
    }

    // optional uint64 game_server_steam_id = 4;
    if (has_game_server_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->game_server_steam_id());
    }

    // optional uint32 parent_count = 5;
    if (has_parent_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parent_count());
    }

    // optional fixed64 tv_unique_secret_code = 6;
    if (has_tv_unique_secret_code()) {
      total_size += 1 + 8;
    }

    // optional fixed64 source_tv_steamid = 7;
    if (has_source_tv_steamid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToRelayConnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToRelayConnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToRelayConnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToRelayConnect::MergeFrom(const CMsgGCToRelayConnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_tv_public_addr()) {
      set_source_tv_public_addr(from.source_tv_public_addr());
    }
    if (from.has_source_tv_private_addr()) {
      set_source_tv_private_addr(from.source_tv_private_addr());
    }
    if (from.has_source_tv_port()) {
      set_source_tv_port(from.source_tv_port());
    }
    if (from.has_game_server_steam_id()) {
      set_game_server_steam_id(from.game_server_steam_id());
    }
    if (from.has_parent_count()) {
      set_parent_count(from.parent_count());
    }
    if (from.has_tv_unique_secret_code()) {
      set_tv_unique_secret_code(from.tv_unique_secret_code());
    }
    if (from.has_source_tv_steamid()) {
      set_source_tv_steamid(from.source_tv_steamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToRelayConnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToRelayConnect::CopyFrom(const CMsgGCToRelayConnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToRelayConnect::IsInitialized() const {

  return true;
}

void CMsgGCToRelayConnect::Swap(CMsgGCToRelayConnect* other) {
  if (other != this) {
    std::swap(source_tv_public_addr_, other->source_tv_public_addr_);
    std::swap(source_tv_private_addr_, other->source_tv_private_addr_);
    std::swap(source_tv_port_, other->source_tv_port_);
    std::swap(game_server_steam_id_, other->game_server_steam_id_);
    std::swap(parent_count_, other->parent_count_);
    std::swap(tv_unique_secret_code_, other->tv_unique_secret_code_);
    std::swap(source_tv_steamid_, other->source_tv_steamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToRelayConnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToRelayConnect_descriptor_;
  metadata.reflection = CMsgGCToRelayConnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCGCToLANServerRelayConnect::kRelaySteamidFieldNumber;
#endif  // !_MSC_VER

CMsgGCGCToLANServerRelayConnect::CMsgGCGCToLANServerRelayConnect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCGCToLANServerRelayConnect)
}

void CMsgGCGCToLANServerRelayConnect::InitAsDefaultInstance() {
}

CMsgGCGCToLANServerRelayConnect::CMsgGCGCToLANServerRelayConnect(const CMsgGCGCToLANServerRelayConnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCGCToLANServerRelayConnect)
}

void CMsgGCGCToLANServerRelayConnect::SharedCtor() {
  _cached_size_ = 0;
  relay_steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCGCToLANServerRelayConnect::~CMsgGCGCToLANServerRelayConnect() {
  // @@protoc_insertion_point(destructor:CMsgGCGCToLANServerRelayConnect)
  SharedDtor();
}

void CMsgGCGCToLANServerRelayConnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCGCToLANServerRelayConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGCToLANServerRelayConnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCGCToLANServerRelayConnect_descriptor_;
}

const CMsgGCGCToLANServerRelayConnect& CMsgGCGCToLANServerRelayConnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGCGCToLANServerRelayConnect* CMsgGCGCToLANServerRelayConnect::default_instance_ = NULL;

CMsgGCGCToLANServerRelayConnect* CMsgGCGCToLANServerRelayConnect::New() const {
  return new CMsgGCGCToLANServerRelayConnect;
}

void CMsgGCGCToLANServerRelayConnect::Clear() {
  relay_steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCGCToLANServerRelayConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCGCToLANServerRelayConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 relay_steamid = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &relay_steamid_)));
          set_has_relay_steamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCGCToLANServerRelayConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCGCToLANServerRelayConnect)
  return false;
#undef DO_
}

void CMsgGCGCToLANServerRelayConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCGCToLANServerRelayConnect)
  // optional fixed64 relay_steamid = 1;
  if (has_relay_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->relay_steamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCGCToLANServerRelayConnect)
}

::google::protobuf::uint8* CMsgGCGCToLANServerRelayConnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGCToLANServerRelayConnect)
  // optional fixed64 relay_steamid = 1;
  if (has_relay_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->relay_steamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGCToLANServerRelayConnect)
  return target;
}

int CMsgGCGCToLANServerRelayConnect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 relay_steamid = 1;
    if (has_relay_steamid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGCToLANServerRelayConnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCGCToLANServerRelayConnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCGCToLANServerRelayConnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCGCToLANServerRelayConnect::MergeFrom(const CMsgGCGCToLANServerRelayConnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_relay_steamid()) {
      set_relay_steamid(from.relay_steamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCGCToLANServerRelayConnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGCToLANServerRelayConnect::CopyFrom(const CMsgGCGCToLANServerRelayConnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGCToLANServerRelayConnect::IsInitialized() const {

  return true;
}

void CMsgGCGCToLANServerRelayConnect::Swap(CMsgGCGCToLANServerRelayConnect* other) {
  if (other != this) {
    std::swap(relay_steamid_, other->relay_steamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCGCToLANServerRelayConnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCGCToLANServerRelayConnect_descriptor_;
  metadata.reflection = CMsgGCGCToLANServerRelayConnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgGCToRelayConnectResponse::CMsgGCToRelayConnectResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToRelayConnectResponse)
}

void CMsgGCToRelayConnectResponse::InitAsDefaultInstance() {
}

CMsgGCToRelayConnectResponse::CMsgGCToRelayConnectResponse(const CMsgGCToRelayConnectResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToRelayConnectResponse)
}

void CMsgGCToRelayConnectResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToRelayConnectResponse::~CMsgGCToRelayConnectResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToRelayConnectResponse)
  SharedDtor();
}

void CMsgGCToRelayConnectResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToRelayConnectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToRelayConnectResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToRelayConnectResponse_descriptor_;
}

const CMsgGCToRelayConnectResponse& CMsgGCToRelayConnectResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGCToRelayConnectResponse* CMsgGCToRelayConnectResponse::default_instance_ = NULL;

CMsgGCToRelayConnectResponse* CMsgGCToRelayConnectResponse::New() const {
  return new CMsgGCToRelayConnectResponse;
}

void CMsgGCToRelayConnectResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToRelayConnectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToRelayConnectResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToRelayConnectResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToRelayConnectResponse)
  return false;
#undef DO_
}

void CMsgGCToRelayConnectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToRelayConnectResponse)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToRelayConnectResponse)
}

::google::protobuf::uint8* CMsgGCToRelayConnectResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToRelayConnectResponse)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToRelayConnectResponse)
  return target;
}

int CMsgGCToRelayConnectResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToRelayConnectResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToRelayConnectResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToRelayConnectResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToRelayConnectResponse::MergeFrom(const CMsgGCToRelayConnectResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToRelayConnectResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToRelayConnectResponse::CopyFrom(const CMsgGCToRelayConnectResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToRelayConnectResponse::IsInitialized() const {

  return true;
}

void CMsgGCToRelayConnectResponse::Swap(CMsgGCToRelayConnectResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToRelayConnectResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToRelayConnectResponse_descriptor_;
  metadata.reflection = CMsgGCToRelayConnectResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCBanStatusRequest::kAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCBanStatusRequest::CMsgGCBanStatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCBanStatusRequest)
}

void CMsgGCBanStatusRequest::InitAsDefaultInstance() {
}

CMsgGCBanStatusRequest::CMsgGCBanStatusRequest(const CMsgGCBanStatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCBanStatusRequest)
}

void CMsgGCBanStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCBanStatusRequest::~CMsgGCBanStatusRequest() {
  // @@protoc_insertion_point(destructor:CMsgGCBanStatusRequest)
  SharedDtor();
}

void CMsgGCBanStatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCBanStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCBanStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCBanStatusRequest_descriptor_;
}

const CMsgGCBanStatusRequest& CMsgGCBanStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGCBanStatusRequest* CMsgGCBanStatusRequest::default_instance_ = NULL;

CMsgGCBanStatusRequest* CMsgGCBanStatusRequest::New() const {
  return new CMsgGCBanStatusRequest;
}

void CMsgGCBanStatusRequest::Clear() {
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCBanStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCBanStatusRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCBanStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCBanStatusRequest)
  return false;
#undef DO_
}

void CMsgGCBanStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCBanStatusRequest)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCBanStatusRequest)
}

::google::protobuf::uint8* CMsgGCBanStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCBanStatusRequest)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCBanStatusRequest)
  return target;
}

int CMsgGCBanStatusRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCBanStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCBanStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCBanStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCBanStatusRequest::MergeFrom(const CMsgGCBanStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCBanStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCBanStatusRequest::CopyFrom(const CMsgGCBanStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCBanStatusRequest::IsInitialized() const {

  return true;
}

void CMsgGCBanStatusRequest::Swap(CMsgGCBanStatusRequest* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCBanStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCBanStatusRequest_descriptor_;
  metadata.reflection = CMsgGCBanStatusRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCBanStatusResponse::kResultFieldNumber;
const int CMsgGCBanStatusResponse::kLowPriorityFieldNumber;
const int CMsgGCBanStatusResponse::kTextChatBannedFieldNumber;
const int CMsgGCBanStatusResponse::kVoiceChatBannedFieldNumber;
#endif  // !_MSC_VER

CMsgGCBanStatusResponse::CMsgGCBanStatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCBanStatusResponse)
}

void CMsgGCBanStatusResponse::InitAsDefaultInstance() {
}

CMsgGCBanStatusResponse::CMsgGCBanStatusResponse(const CMsgGCBanStatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCBanStatusResponse)
}

void CMsgGCBanStatusResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  low_priority_ = false;
  text_chat_banned_ = false;
  voice_chat_banned_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCBanStatusResponse::~CMsgGCBanStatusResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCBanStatusResponse)
  SharedDtor();
}

void CMsgGCBanStatusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCBanStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCBanStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCBanStatusResponse_descriptor_;
}

const CMsgGCBanStatusResponse& CMsgGCBanStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGCBanStatusResponse* CMsgGCBanStatusResponse::default_instance_ = NULL;

CMsgGCBanStatusResponse* CMsgGCBanStatusResponse::New() const {
  return new CMsgGCBanStatusResponse;
}

void CMsgGCBanStatusResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGCBanStatusResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(result_, voice_chat_banned_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCBanStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCBanStatusResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_low_priority;
        break;
      }

      // optional bool low_priority = 2;
      case 2: {
        if (tag == 16) {
         parse_low_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_priority_)));
          set_has_low_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_text_chat_banned;
        break;
      }

      // optional bool text_chat_banned = 3;
      case 3: {
        if (tag == 24) {
         parse_text_chat_banned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &text_chat_banned_)));
          set_has_text_chat_banned();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_voice_chat_banned;
        break;
      }

      // optional bool voice_chat_banned = 4;
      case 4: {
        if (tag == 32) {
         parse_voice_chat_banned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &voice_chat_banned_)));
          set_has_voice_chat_banned();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCBanStatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCBanStatusResponse)
  return false;
#undef DO_
}

void CMsgGCBanStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCBanStatusResponse)
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional bool low_priority = 2;
  if (has_low_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->low_priority(), output);
  }

  // optional bool text_chat_banned = 3;
  if (has_text_chat_banned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->text_chat_banned(), output);
  }

  // optional bool voice_chat_banned = 4;
  if (has_voice_chat_banned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->voice_chat_banned(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCBanStatusResponse)
}

::google::protobuf::uint8* CMsgGCBanStatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCBanStatusResponse)
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional bool low_priority = 2;
  if (has_low_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->low_priority(), target);
  }

  // optional bool text_chat_banned = 3;
  if (has_text_chat_banned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->text_chat_banned(), target);
  }

  // optional bool voice_chat_banned = 4;
  if (has_voice_chat_banned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->voice_chat_banned(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCBanStatusResponse)
  return target;
}

int CMsgGCBanStatusResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional bool low_priority = 2;
    if (has_low_priority()) {
      total_size += 1 + 1;
    }

    // optional bool text_chat_banned = 3;
    if (has_text_chat_banned()) {
      total_size += 1 + 1;
    }

    // optional bool voice_chat_banned = 4;
    if (has_voice_chat_banned()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCBanStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCBanStatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCBanStatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCBanStatusResponse::MergeFrom(const CMsgGCBanStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_low_priority()) {
      set_low_priority(from.low_priority());
    }
    if (from.has_text_chat_banned()) {
      set_text_chat_banned(from.text_chat_banned());
    }
    if (from.has_voice_chat_banned()) {
      set_voice_chat_banned(from.voice_chat_banned());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCBanStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCBanStatusResponse::CopyFrom(const CMsgGCBanStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCBanStatusResponse::IsInitialized() const {

  return true;
}

void CMsgGCBanStatusResponse::Swap(CMsgGCBanStatusResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(low_priority_, other->low_priority_);
    std::swap(text_chat_banned_, other->text_chat_banned_);
    std::swap(voice_chat_banned_, other->voice_chat_banned_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCBanStatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCBanStatusResponse_descriptor_;
  metadata.reflection = CMsgGCBanStatusResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTournamentItemEvent::kKillerAccountIdFieldNumber;
const int CMsgTournamentItemEvent::kVictimAccountIdFieldNumber;
const int CMsgTournamentItemEvent::kEventTypeFieldNumber;
const int CMsgTournamentItemEvent::kTvDelayFieldNumber;
const int CMsgTournamentItemEvent::kDotaTimeFieldNumber;
const int CMsgTournamentItemEvent::kReplayTimeFieldNumber;
const int CMsgTournamentItemEvent::kLootListFieldNumber;
const int CMsgTournamentItemEvent::kEventTeamFieldNumber;
const int CMsgTournamentItemEvent::kMultiKillCountFieldNumber;
const int CMsgTournamentItemEvent::kWinnerScoreFieldNumber;
const int CMsgTournamentItemEvent::kLoserScoreFieldNumber;
const int CMsgTournamentItemEvent::kHeroStatuesFieldNumber;
#endif  // !_MSC_VER

CMsgTournamentItemEvent::CMsgTournamentItemEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTournamentItemEvent)
}

void CMsgTournamentItemEvent::InitAsDefaultInstance() {
}

CMsgTournamentItemEvent::CMsgTournamentItemEvent(const CMsgTournamentItemEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgTournamentItemEvent)
}

void CMsgTournamentItemEvent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  killer_account_id_ = 0u;
  victim_account_id_ = 0u;
  event_type_ = 0;
  tv_delay_ = 0;
  dota_time_ = 0;
  replay_time_ = 0;
  loot_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_team_ = 0u;
  multi_kill_count_ = 0u;
  winner_score_ = 0u;
  loser_score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTournamentItemEvent::~CMsgTournamentItemEvent() {
  // @@protoc_insertion_point(destructor:CMsgTournamentItemEvent)
  SharedDtor();
}

void CMsgTournamentItemEvent::SharedDtor() {
  if (loot_list_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loot_list_;
  }
  if (this != default_instance_) {
  }
}

void CMsgTournamentItemEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTournamentItemEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTournamentItemEvent_descriptor_;
}

const CMsgTournamentItemEvent& CMsgTournamentItemEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgTournamentItemEvent* CMsgTournamentItemEvent::default_instance_ = NULL;

CMsgTournamentItemEvent* CMsgTournamentItemEvent::New() const {
  return new CMsgTournamentItemEvent;
}

void CMsgTournamentItemEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgTournamentItemEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(killer_account_id_, replay_time_);
    if (has_loot_list()) {
      if (loot_list_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        loot_list_->clear();
      }
    }
    event_team_ = 0u;
  }
  ZR_(multi_kill_count_, loser_score_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  hero_statues_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTournamentItemEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTournamentItemEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 killer_account_id = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &killer_account_id_)));
          set_has_killer_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_victim_account_id;
        break;
      }

      // optional fixed32 victim_account_id = 2;
      case 2: {
        if (tag == 21) {
         parse_victim_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &victim_account_id_)));
          set_has_victim_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_event_type;
        break;
      }

      // optional .DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
      case 3: {
        if (tag == 24) {
         parse_event_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_TournamentEvents_IsValid(value)) {
            set_event_type(static_cast< ::DOTA_TournamentEvents >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tv_delay;
        break;
      }

      // optional int32 tv_delay = 4;
      case 4: {
        if (tag == 32) {
         parse_tv_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tv_delay_)));
          set_has_tv_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dota_time;
        break;
      }

      // optional int32 dota_time = 5;
      case 5: {
        if (tag == 40) {
         parse_dota_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dota_time_)));
          set_has_dota_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_replay_time;
        break;
      }

      // optional float replay_time = 6;
      case 6: {
        if (tag == 53) {
         parse_replay_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &replay_time_)));
          set_has_replay_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loot_list;
        break;
      }

      // optional string loot_list = 7;
      case 7: {
        if (tag == 58) {
         parse_loot_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loot_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loot_list().data(), this->loot_list().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "loot_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_event_team;
        break;
      }

      // optional uint32 event_team = 8;
      case 8: {
        if (tag == 64) {
         parse_event_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_team_)));
          set_has_event_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_multi_kill_count;
        break;
      }

      // optional uint32 multi_kill_count = 9;
      case 9: {
        if (tag == 72) {
         parse_multi_kill_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multi_kill_count_)));
          set_has_multi_kill_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_winner_score;
        break;
      }

      // optional uint32 winner_score = 10;
      case 10: {
        if (tag == 80) {
         parse_winner_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winner_score_)));
          set_has_winner_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_loser_score;
        break;
      }

      // optional uint32 loser_score = 11;
      case 11: {
        if (tag == 88) {
         parse_loser_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loser_score_)));
          set_has_loser_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_hero_statues;
        break;
      }

      // repeated .CProtoItemHeroStatue hero_statues = 12;
      case 12: {
        if (tag == 98) {
         parse_hero_statues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero_statues()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_hero_statues;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTournamentItemEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTournamentItemEvent)
  return false;
#undef DO_
}

void CMsgTournamentItemEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTournamentItemEvent)
  // optional fixed32 killer_account_id = 1;
  if (has_killer_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->killer_account_id(), output);
  }

  // optional fixed32 victim_account_id = 2;
  if (has_victim_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->victim_account_id(), output);
  }

  // optional .DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->event_type(), output);
  }

  // optional int32 tv_delay = 4;
  if (has_tv_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tv_delay(), output);
  }

  // optional int32 dota_time = 5;
  if (has_dota_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dota_time(), output);
  }

  // optional float replay_time = 6;
  if (has_replay_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->replay_time(), output);
  }

  // optional string loot_list = 7;
  if (has_loot_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loot_list().data(), this->loot_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loot_list");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->loot_list(), output);
  }

  // optional uint32 event_team = 8;
  if (has_event_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->event_team(), output);
  }

  // optional uint32 multi_kill_count = 9;
  if (has_multi_kill_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->multi_kill_count(), output);
  }

  // optional uint32 winner_score = 10;
  if (has_winner_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->winner_score(), output);
  }

  // optional uint32 loser_score = 11;
  if (has_loser_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->loser_score(), output);
  }

  // repeated .CProtoItemHeroStatue hero_statues = 12;
  for (int i = 0; i < this->hero_statues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->hero_statues(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTournamentItemEvent)
}

::google::protobuf::uint8* CMsgTournamentItemEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTournamentItemEvent)
  // optional fixed32 killer_account_id = 1;
  if (has_killer_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->killer_account_id(), target);
  }

  // optional fixed32 victim_account_id = 2;
  if (has_victim_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->victim_account_id(), target);
  }

  // optional .DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->event_type(), target);
  }

  // optional int32 tv_delay = 4;
  if (has_tv_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tv_delay(), target);
  }

  // optional int32 dota_time = 5;
  if (has_dota_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dota_time(), target);
  }

  // optional float replay_time = 6;
  if (has_replay_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->replay_time(), target);
  }

  // optional string loot_list = 7;
  if (has_loot_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loot_list().data(), this->loot_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loot_list");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->loot_list(), target);
  }

  // optional uint32 event_team = 8;
  if (has_event_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->event_team(), target);
  }

  // optional uint32 multi_kill_count = 9;
  if (has_multi_kill_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->multi_kill_count(), target);
  }

  // optional uint32 winner_score = 10;
  if (has_winner_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->winner_score(), target);
  }

  // optional uint32 loser_score = 11;
  if (has_loser_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->loser_score(), target);
  }

  // repeated .CProtoItemHeroStatue hero_statues = 12;
  for (int i = 0; i < this->hero_statues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->hero_statues(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTournamentItemEvent)
  return target;
}

int CMsgTournamentItemEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 killer_account_id = 1;
    if (has_killer_account_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 victim_account_id = 2;
    if (has_victim_account_id()) {
      total_size += 1 + 4;
    }

    // optional .DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
    }

    // optional int32 tv_delay = 4;
    if (has_tv_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tv_delay());
    }

    // optional int32 dota_time = 5;
    if (has_dota_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dota_time());
    }

    // optional float replay_time = 6;
    if (has_replay_time()) {
      total_size += 1 + 4;
    }

    // optional string loot_list = 7;
    if (has_loot_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loot_list());
    }

    // optional uint32 event_team = 8;
    if (has_event_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_team());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 multi_kill_count = 9;
    if (has_multi_kill_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->multi_kill_count());
    }

    // optional uint32 winner_score = 10;
    if (has_winner_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winner_score());
    }

    // optional uint32 loser_score = 11;
    if (has_loser_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loser_score());
    }

  }
  // repeated .CProtoItemHeroStatue hero_statues = 12;
  total_size += 1 * this->hero_statues_size();
  for (int i = 0; i < this->hero_statues_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero_statues(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTournamentItemEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTournamentItemEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTournamentItemEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTournamentItemEvent::MergeFrom(const CMsgTournamentItemEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_statues_.MergeFrom(from.hero_statues_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_killer_account_id()) {
      set_killer_account_id(from.killer_account_id());
    }
    if (from.has_victim_account_id()) {
      set_victim_account_id(from.victim_account_id());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_tv_delay()) {
      set_tv_delay(from.tv_delay());
    }
    if (from.has_dota_time()) {
      set_dota_time(from.dota_time());
    }
    if (from.has_replay_time()) {
      set_replay_time(from.replay_time());
    }
    if (from.has_loot_list()) {
      set_loot_list(from.loot_list());
    }
    if (from.has_event_team()) {
      set_event_team(from.event_team());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_multi_kill_count()) {
      set_multi_kill_count(from.multi_kill_count());
    }
    if (from.has_winner_score()) {
      set_winner_score(from.winner_score());
    }
    if (from.has_loser_score()) {
      set_loser_score(from.loser_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTournamentItemEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTournamentItemEvent::CopyFrom(const CMsgTournamentItemEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTournamentItemEvent::IsInitialized() const {

  return true;
}

void CMsgTournamentItemEvent::Swap(CMsgTournamentItemEvent* other) {
  if (other != this) {
    std::swap(killer_account_id_, other->killer_account_id_);
    std::swap(victim_account_id_, other->victim_account_id_);
    std::swap(event_type_, other->event_type_);
    std::swap(tv_delay_, other->tv_delay_);
    std::swap(dota_time_, other->dota_time_);
    std::swap(replay_time_, other->replay_time_);
    std::swap(loot_list_, other->loot_list_);
    std::swap(event_team_, other->event_team_);
    std::swap(multi_kill_count_, other->multi_kill_count_);
    std::swap(winner_score_, other->winner_score_);
    std::swap(loser_score_, other->loser_score_);
    hero_statues_.Swap(&other->hero_statues_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTournamentItemEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTournamentItemEvent_descriptor_;
  metadata.reflection = CMsgTournamentItemEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTournamentItemEventResponse::kEventTypeFieldNumber;
const int CMsgTournamentItemEventResponse::kViewersGrantedFieldNumber;
#endif  // !_MSC_VER

CMsgTournamentItemEventResponse::CMsgTournamentItemEventResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTournamentItemEventResponse)
}

void CMsgTournamentItemEventResponse::InitAsDefaultInstance() {
}

CMsgTournamentItemEventResponse::CMsgTournamentItemEventResponse(const CMsgTournamentItemEventResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgTournamentItemEventResponse)
}

void CMsgTournamentItemEventResponse::SharedCtor() {
  _cached_size_ = 0;
  event_type_ = 0;
  viewers_granted_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTournamentItemEventResponse::~CMsgTournamentItemEventResponse() {
  // @@protoc_insertion_point(destructor:CMsgTournamentItemEventResponse)
  SharedDtor();
}

void CMsgTournamentItemEventResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTournamentItemEventResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTournamentItemEventResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTournamentItemEventResponse_descriptor_;
}

const CMsgTournamentItemEventResponse& CMsgTournamentItemEventResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgTournamentItemEventResponse* CMsgTournamentItemEventResponse::default_instance_ = NULL;

CMsgTournamentItemEventResponse* CMsgTournamentItemEventResponse::New() const {
  return new CMsgTournamentItemEventResponse;
}

void CMsgTournamentItemEventResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgTournamentItemEventResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(event_type_, viewers_granted_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTournamentItemEventResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTournamentItemEventResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_TournamentEvents_IsValid(value)) {
            set_event_type(static_cast< ::DOTA_TournamentEvents >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_viewers_granted;
        break;
      }

      // optional uint32 viewers_granted = 6;
      case 6: {
        if (tag == 48) {
         parse_viewers_granted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viewers_granted_)));
          set_has_viewers_granted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTournamentItemEventResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTournamentItemEventResponse)
  return false;
#undef DO_
}

void CMsgTournamentItemEventResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTournamentItemEventResponse)
  // optional .DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_type(), output);
  }

  // optional uint32 viewers_granted = 6;
  if (has_viewers_granted()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->viewers_granted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTournamentItemEventResponse)
}

::google::protobuf::uint8* CMsgTournamentItemEventResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTournamentItemEventResponse)
  // optional .DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_type(), target);
  }

  // optional uint32 viewers_granted = 6;
  if (has_viewers_granted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->viewers_granted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTournamentItemEventResponse)
  return target;
}

int CMsgTournamentItemEventResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
    }

    // optional uint32 viewers_granted = 6;
    if (has_viewers_granted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viewers_granted());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTournamentItemEventResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTournamentItemEventResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTournamentItemEventResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTournamentItemEventResponse::MergeFrom(const CMsgTournamentItemEventResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_viewers_granted()) {
      set_viewers_granted(from.viewers_granted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTournamentItemEventResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTournamentItemEventResponse::CopyFrom(const CMsgTournamentItemEventResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTournamentItemEventResponse::IsInitialized() const {

  return true;
}

void CMsgTournamentItemEventResponse::Swap(CMsgTournamentItemEventResponse* other) {
  if (other != this) {
    std::swap(event_type_, other->event_type_);
    std::swap(viewers_granted_, other->viewers_granted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTournamentItemEventResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTournamentItemEventResponse_descriptor_;
  metadata.reflection = CMsgTournamentItemEventResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTeamFanfare::kMatchIdFieldNumber;
#endif  // !_MSC_VER

CMsgTeamFanfare::CMsgTeamFanfare()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTeamFanfare)
}

void CMsgTeamFanfare::InitAsDefaultInstance() {
}

CMsgTeamFanfare::CMsgTeamFanfare(const CMsgTeamFanfare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgTeamFanfare)
}

void CMsgTeamFanfare::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTeamFanfare::~CMsgTeamFanfare() {
  // @@protoc_insertion_point(destructor:CMsgTeamFanfare)
  SharedDtor();
}

void CMsgTeamFanfare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTeamFanfare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTeamFanfare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTeamFanfare_descriptor_;
}

const CMsgTeamFanfare& CMsgTeamFanfare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgTeamFanfare* CMsgTeamFanfare::default_instance_ = NULL;

CMsgTeamFanfare* CMsgTeamFanfare::New() const {
  return new CMsgTeamFanfare;
}

void CMsgTeamFanfare::Clear() {
  match_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTeamFanfare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTeamFanfare)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTeamFanfare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTeamFanfare)
  return false;
#undef DO_
}

void CMsgTeamFanfare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTeamFanfare)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTeamFanfare)
}

::google::protobuf::uint8* CMsgTeamFanfare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTeamFanfare)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTeamFanfare)
  return target;
}

int CMsgTeamFanfare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTeamFanfare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTeamFanfare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTeamFanfare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTeamFanfare::MergeFrom(const CMsgTeamFanfare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTeamFanfare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTeamFanfare::CopyFrom(const CMsgTeamFanfare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTeamFanfare::IsInitialized() const {

  return true;
}

void CMsgTeamFanfare::Swap(CMsgTeamFanfare* other) {
  if (other != this) {
    std::swap(match_id_, other->match_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTeamFanfare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTeamFanfare_descriptor_;
  metadata.reflection = CMsgTeamFanfare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgResponseTeamFanfare::kFanfareGoodguysFieldNumber;
const int CMsgResponseTeamFanfare::kFanfareBadguysFieldNumber;
#endif  // !_MSC_VER

CMsgResponseTeamFanfare::CMsgResponseTeamFanfare()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgResponseTeamFanfare)
}

void CMsgResponseTeamFanfare::InitAsDefaultInstance() {
}

CMsgResponseTeamFanfare::CMsgResponseTeamFanfare(const CMsgResponseTeamFanfare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgResponseTeamFanfare)
}

void CMsgResponseTeamFanfare::SharedCtor() {
  _cached_size_ = 0;
  fanfare_goodguys_ = 0u;
  fanfare_badguys_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgResponseTeamFanfare::~CMsgResponseTeamFanfare() {
  // @@protoc_insertion_point(destructor:CMsgResponseTeamFanfare)
  SharedDtor();
}

void CMsgResponseTeamFanfare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgResponseTeamFanfare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgResponseTeamFanfare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgResponseTeamFanfare_descriptor_;
}

const CMsgResponseTeamFanfare& CMsgResponseTeamFanfare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgResponseTeamFanfare* CMsgResponseTeamFanfare::default_instance_ = NULL;

CMsgResponseTeamFanfare* CMsgResponseTeamFanfare::New() const {
  return new CMsgResponseTeamFanfare;
}

void CMsgResponseTeamFanfare::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgResponseTeamFanfare*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(fanfare_goodguys_, fanfare_badguys_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgResponseTeamFanfare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgResponseTeamFanfare)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fanfare_goodguys = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fanfare_goodguys_)));
          set_has_fanfare_goodguys();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fanfare_badguys;
        break;
      }

      // optional uint32 fanfare_badguys = 2;
      case 2: {
        if (tag == 16) {
         parse_fanfare_badguys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fanfare_badguys_)));
          set_has_fanfare_badguys();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgResponseTeamFanfare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgResponseTeamFanfare)
  return false;
#undef DO_
}

void CMsgResponseTeamFanfare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgResponseTeamFanfare)
  // optional uint32 fanfare_goodguys = 1;
  if (has_fanfare_goodguys()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fanfare_goodguys(), output);
  }

  // optional uint32 fanfare_badguys = 2;
  if (has_fanfare_badguys()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fanfare_badguys(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgResponseTeamFanfare)
}

::google::protobuf::uint8* CMsgResponseTeamFanfare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgResponseTeamFanfare)
  // optional uint32 fanfare_goodguys = 1;
  if (has_fanfare_goodguys()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fanfare_goodguys(), target);
  }

  // optional uint32 fanfare_badguys = 2;
  if (has_fanfare_badguys()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fanfare_badguys(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgResponseTeamFanfare)
  return target;
}

int CMsgResponseTeamFanfare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 fanfare_goodguys = 1;
    if (has_fanfare_goodguys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fanfare_goodguys());
    }

    // optional uint32 fanfare_badguys = 2;
    if (has_fanfare_badguys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fanfare_badguys());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgResponseTeamFanfare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgResponseTeamFanfare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgResponseTeamFanfare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgResponseTeamFanfare::MergeFrom(const CMsgResponseTeamFanfare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fanfare_goodguys()) {
      set_fanfare_goodguys(from.fanfare_goodguys());
    }
    if (from.has_fanfare_badguys()) {
      set_fanfare_badguys(from.fanfare_badguys());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgResponseTeamFanfare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgResponseTeamFanfare::CopyFrom(const CMsgResponseTeamFanfare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgResponseTeamFanfare::IsInitialized() const {

  return true;
}

void CMsgResponseTeamFanfare::Swap(CMsgResponseTeamFanfare* other) {
  if (other != this) {
    std::swap(fanfare_goodguys_, other->fanfare_goodguys_);
    std::swap(fanfare_badguys_, other->fanfare_badguys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgResponseTeamFanfare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgResponseTeamFanfare_descriptor_;
  metadata.reflection = CMsgResponseTeamFanfare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGameServerUploadSaveGame::kGameTimeFieldNumber;
const int CMsgGameServerUploadSaveGame::kSaveGameDataFieldNumber;
const int CMsgGameServerUploadSaveGame::kLobbyIdFieldNumber;
const int CMsgGameServerUploadSaveGame::kPlayerSteamIdsFieldNumber;
#endif  // !_MSC_VER

CMsgGameServerUploadSaveGame::CMsgGameServerUploadSaveGame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGameServerUploadSaveGame)
}

void CMsgGameServerUploadSaveGame::InitAsDefaultInstance() {
}

CMsgGameServerUploadSaveGame::CMsgGameServerUploadSaveGame(const CMsgGameServerUploadSaveGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerUploadSaveGame)
}

void CMsgGameServerUploadSaveGame::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  game_time_ = 0u;
  save_game_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lobby_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameServerUploadSaveGame::~CMsgGameServerUploadSaveGame() {
  // @@protoc_insertion_point(destructor:CMsgGameServerUploadSaveGame)
  SharedDtor();
}

void CMsgGameServerUploadSaveGame::SharedDtor() {
  if (save_game_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete save_game_data_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGameServerUploadSaveGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameServerUploadSaveGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameServerUploadSaveGame_descriptor_;
}

const CMsgGameServerUploadSaveGame& CMsgGameServerUploadSaveGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGameServerUploadSaveGame* CMsgGameServerUploadSaveGame::default_instance_ = NULL;

CMsgGameServerUploadSaveGame* CMsgGameServerUploadSaveGame::New() const {
  return new CMsgGameServerUploadSaveGame;
}

void CMsgGameServerUploadSaveGame::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    game_time_ = 0u;
    if (has_save_game_data()) {
      if (save_game_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        save_game_data_->clear();
      }
    }
    lobby_id_ = GOOGLE_ULONGLONG(0);
  }
  player_steam_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameServerUploadSaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGameServerUploadSaveGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_time_)));
          set_has_game_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_save_game_data;
        break;
      }

      // optional bytes save_game_data = 2;
      case 2: {
        if (tag == 18) {
         parse_save_game_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_save_game_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lobby_id;
        break;
      }

      // optional uint64 lobby_id = 3;
      case 3: {
        if (tag == 24) {
         parse_lobby_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
          set_has_lobby_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_player_steam_ids;
        break;
      }

      // repeated uint64 player_steam_ids = 4;
      case 4: {
        if (tag == 32) {
         parse_player_steam_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_player_steam_ids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_player_steam_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_player_steam_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGameServerUploadSaveGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGameServerUploadSaveGame)
  return false;
#undef DO_
}

void CMsgGameServerUploadSaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGameServerUploadSaveGame)
  // optional uint32 game_time = 1;
  if (has_game_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_time(), output);
  }

  // optional bytes save_game_data = 2;
  if (has_save_game_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->save_game_data(), output);
  }

  // optional uint64 lobby_id = 3;
  if (has_lobby_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lobby_id(), output);
  }

  // repeated uint64 player_steam_ids = 4;
  for (int i = 0; i < this->player_steam_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->player_steam_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGameServerUploadSaveGame)
}

::google::protobuf::uint8* CMsgGameServerUploadSaveGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerUploadSaveGame)
  // optional uint32 game_time = 1;
  if (has_game_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_time(), target);
  }

  // optional bytes save_game_data = 2;
  if (has_save_game_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->save_game_data(), target);
  }

  // optional uint64 lobby_id = 3;
  if (has_lobby_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lobby_id(), target);
  }

  // repeated uint64 player_steam_ids = 4;
  for (int i = 0; i < this->player_steam_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->player_steam_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerUploadSaveGame)
  return target;
}

int CMsgGameServerUploadSaveGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_time = 1;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_time());
    }

    // optional bytes save_game_data = 2;
    if (has_save_game_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->save_game_data());
    }

    // optional uint64 lobby_id = 3;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

  }
  // repeated uint64 player_steam_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->player_steam_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->player_steam_ids(i));
    }
    total_size += 1 * this->player_steam_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerUploadSaveGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameServerUploadSaveGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameServerUploadSaveGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameServerUploadSaveGame::MergeFrom(const CMsgGameServerUploadSaveGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_steam_ids_.MergeFrom(from.player_steam_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_time()) {
      set_game_time(from.game_time());
    }
    if (from.has_save_game_data()) {
      set_save_game_data(from.save_game_data());
    }
    if (from.has_lobby_id()) {
      set_lobby_id(from.lobby_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameServerUploadSaveGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerUploadSaveGame::CopyFrom(const CMsgGameServerUploadSaveGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerUploadSaveGame::IsInitialized() const {

  return true;
}

void CMsgGameServerUploadSaveGame::Swap(CMsgGameServerUploadSaveGame* other) {
  if (other != this) {
    std::swap(game_time_, other->game_time_);
    std::swap(save_game_data_, other->save_game_data_);
    std::swap(lobby_id_, other->lobby_id_);
    player_steam_ids_.Swap(&other->player_steam_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameServerUploadSaveGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameServerUploadSaveGame_descriptor_;
  metadata.reflection = CMsgGameServerUploadSaveGame_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgGameServerSaveGameResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameServerSaveGameResult_Result_descriptor_;
}
bool CMsgGameServerSaveGameResult_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::SaveSuccessful;
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::SessionNotFound;
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::DatabaseError;
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::TooBig;
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::Result_MIN;
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::Result_MAX;
const int CMsgGameServerSaveGameResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgGameServerSaveGameResult::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgGameServerSaveGameResult::CMsgGameServerSaveGameResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGameServerSaveGameResult)
}

void CMsgGameServerSaveGameResult::InitAsDefaultInstance() {
}

CMsgGameServerSaveGameResult::CMsgGameServerSaveGameResult(const CMsgGameServerSaveGameResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerSaveGameResult)
}

void CMsgGameServerSaveGameResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameServerSaveGameResult::~CMsgGameServerSaveGameResult() {
  // @@protoc_insertion_point(destructor:CMsgGameServerSaveGameResult)
  SharedDtor();
}

void CMsgGameServerSaveGameResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGameServerSaveGameResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameServerSaveGameResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameServerSaveGameResult_descriptor_;
}

const CMsgGameServerSaveGameResult& CMsgGameServerSaveGameResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGameServerSaveGameResult* CMsgGameServerSaveGameResult::default_instance_ = NULL;

CMsgGameServerSaveGameResult* CMsgGameServerSaveGameResult::New() const {
  return new CMsgGameServerSaveGameResult;
}

void CMsgGameServerSaveGameResult::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameServerSaveGameResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGameServerSaveGameResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGameServerSaveGameResult_Result_IsValid(value)) {
            set_result(static_cast< ::CMsgGameServerSaveGameResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGameServerSaveGameResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGameServerSaveGameResult)
  return false;
#undef DO_
}

void CMsgGameServerSaveGameResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGameServerSaveGameResult)
  // optional .CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGameServerSaveGameResult)
}

::google::protobuf::uint8* CMsgGameServerSaveGameResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerSaveGameResult)
  // optional .CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerSaveGameResult)
  return target;
}

int CMsgGameServerSaveGameResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerSaveGameResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameServerSaveGameResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameServerSaveGameResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameServerSaveGameResult::MergeFrom(const CMsgGameServerSaveGameResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameServerSaveGameResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerSaveGameResult::CopyFrom(const CMsgGameServerSaveGameResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerSaveGameResult::IsInitialized() const {

  return true;
}

void CMsgGameServerSaveGameResult::Swap(CMsgGameServerSaveGameResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameServerSaveGameResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameServerSaveGameResult_descriptor_;
  metadata.reflection = CMsgGameServerSaveGameResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGameServerGetLoadGame::kSaveIdFieldNumber;
#endif  // !_MSC_VER

CMsgGameServerGetLoadGame::CMsgGameServerGetLoadGame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGameServerGetLoadGame)
}

void CMsgGameServerGetLoadGame::InitAsDefaultInstance() {
}

CMsgGameServerGetLoadGame::CMsgGameServerGetLoadGame(const CMsgGameServerGetLoadGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerGetLoadGame)
}

void CMsgGameServerGetLoadGame::SharedCtor() {
  _cached_size_ = 0;
  save_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameServerGetLoadGame::~CMsgGameServerGetLoadGame() {
  // @@protoc_insertion_point(destructor:CMsgGameServerGetLoadGame)
  SharedDtor();
}

void CMsgGameServerGetLoadGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGameServerGetLoadGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameServerGetLoadGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameServerGetLoadGame_descriptor_;
}

const CMsgGameServerGetLoadGame& CMsgGameServerGetLoadGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGameServerGetLoadGame* CMsgGameServerGetLoadGame::default_instance_ = NULL;

CMsgGameServerGetLoadGame* CMsgGameServerGetLoadGame::New() const {
  return new CMsgGameServerGetLoadGame;
}

void CMsgGameServerGetLoadGame::Clear() {
  save_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameServerGetLoadGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGameServerGetLoadGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 save_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &save_id_)));
          set_has_save_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGameServerGetLoadGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGameServerGetLoadGame)
  return false;
#undef DO_
}

void CMsgGameServerGetLoadGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGameServerGetLoadGame)
  // optional uint32 save_id = 1;
  if (has_save_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->save_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGameServerGetLoadGame)
}

::google::protobuf::uint8* CMsgGameServerGetLoadGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerGetLoadGame)
  // optional uint32 save_id = 1;
  if (has_save_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->save_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerGetLoadGame)
  return target;
}

int CMsgGameServerGetLoadGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 save_id = 1;
    if (has_save_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->save_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerGetLoadGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameServerGetLoadGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameServerGetLoadGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameServerGetLoadGame::MergeFrom(const CMsgGameServerGetLoadGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_save_id()) {
      set_save_id(from.save_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameServerGetLoadGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerGetLoadGame::CopyFrom(const CMsgGameServerGetLoadGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerGetLoadGame::IsInitialized() const {

  return true;
}

void CMsgGameServerGetLoadGame::Swap(CMsgGameServerGetLoadGame* other) {
  if (other != this) {
    std::swap(save_id_, other->save_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameServerGetLoadGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameServerGetLoadGame_descriptor_;
  metadata.reflection = CMsgGameServerGetLoadGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGameServerGetLoadGameResult::kSaveGameDataFieldNumber;
#endif  // !_MSC_VER

CMsgGameServerGetLoadGameResult::CMsgGameServerGetLoadGameResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGameServerGetLoadGameResult)
}

void CMsgGameServerGetLoadGameResult::InitAsDefaultInstance() {
}

CMsgGameServerGetLoadGameResult::CMsgGameServerGetLoadGameResult(const CMsgGameServerGetLoadGameResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerGetLoadGameResult)
}

void CMsgGameServerGetLoadGameResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  save_game_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameServerGetLoadGameResult::~CMsgGameServerGetLoadGameResult() {
  // @@protoc_insertion_point(destructor:CMsgGameServerGetLoadGameResult)
  SharedDtor();
}

void CMsgGameServerGetLoadGameResult::SharedDtor() {
  if (save_game_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete save_game_data_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGameServerGetLoadGameResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameServerGetLoadGameResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameServerGetLoadGameResult_descriptor_;
}

const CMsgGameServerGetLoadGameResult& CMsgGameServerGetLoadGameResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGameServerGetLoadGameResult* CMsgGameServerGetLoadGameResult::default_instance_ = NULL;

CMsgGameServerGetLoadGameResult* CMsgGameServerGetLoadGameResult::New() const {
  return new CMsgGameServerGetLoadGameResult;
}

void CMsgGameServerGetLoadGameResult::Clear() {
  if (has_save_game_data()) {
    if (save_game_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      save_game_data_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameServerGetLoadGameResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGameServerGetLoadGameResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes save_game_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_save_game_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGameServerGetLoadGameResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGameServerGetLoadGameResult)
  return false;
#undef DO_
}

void CMsgGameServerGetLoadGameResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGameServerGetLoadGameResult)
  // optional bytes save_game_data = 1;
  if (has_save_game_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->save_game_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGameServerGetLoadGameResult)
}

::google::protobuf::uint8* CMsgGameServerGetLoadGameResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerGetLoadGameResult)
  // optional bytes save_game_data = 1;
  if (has_save_game_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->save_game_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerGetLoadGameResult)
  return target;
}

int CMsgGameServerGetLoadGameResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes save_game_data = 1;
    if (has_save_game_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->save_game_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerGetLoadGameResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameServerGetLoadGameResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameServerGetLoadGameResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameServerGetLoadGameResult::MergeFrom(const CMsgGameServerGetLoadGameResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_save_game_data()) {
      set_save_game_data(from.save_game_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameServerGetLoadGameResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerGetLoadGameResult::CopyFrom(const CMsgGameServerGetLoadGameResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerGetLoadGameResult::IsInitialized() const {

  return true;
}

void CMsgGameServerGetLoadGameResult::Swap(CMsgGameServerGetLoadGameResult* other) {
  if (other != this) {
    std::swap(save_game_data_, other->save_game_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameServerGetLoadGameResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameServerGetLoadGameResult_descriptor_;
  metadata.reflection = CMsgGameServerGetLoadGameResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAGenerateDiretidePrizeList::kPrizeListFieldNumber;
const int CMsgDOTAGenerateDiretidePrizeList::kHighestRoshanLevelFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGenerateDiretidePrizeList::CMsgDOTAGenerateDiretidePrizeList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGenerateDiretidePrizeList)
}

void CMsgDOTAGenerateDiretidePrizeList::InitAsDefaultInstance() {
}

CMsgDOTAGenerateDiretidePrizeList::CMsgDOTAGenerateDiretidePrizeList(const CMsgDOTAGenerateDiretidePrizeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGenerateDiretidePrizeList)
}

void CMsgDOTAGenerateDiretidePrizeList::SharedCtor() {
  _cached_size_ = 0;
  prize_list_ = 0u;
  highest_roshan_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGenerateDiretidePrizeList::~CMsgDOTAGenerateDiretidePrizeList() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGenerateDiretidePrizeList)
  SharedDtor();
}

void CMsgDOTAGenerateDiretidePrizeList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGenerateDiretidePrizeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGenerateDiretidePrizeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGenerateDiretidePrizeList_descriptor_;
}

const CMsgDOTAGenerateDiretidePrizeList& CMsgDOTAGenerateDiretidePrizeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgDOTAGenerateDiretidePrizeList* CMsgDOTAGenerateDiretidePrizeList::default_instance_ = NULL;

CMsgDOTAGenerateDiretidePrizeList* CMsgDOTAGenerateDiretidePrizeList::New() const {
  return new CMsgDOTAGenerateDiretidePrizeList;
}

void CMsgDOTAGenerateDiretidePrizeList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAGenerateDiretidePrizeList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(prize_list_, highest_roshan_level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGenerateDiretidePrizeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGenerateDiretidePrizeList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 prize_list = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prize_list_)));
          set_has_prize_list();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_highest_roshan_level;
        break;
      }

      // optional uint32 highest_roshan_level = 2;
      case 2: {
        if (tag == 16) {
         parse_highest_roshan_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highest_roshan_level_)));
          set_has_highest_roshan_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGenerateDiretidePrizeList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGenerateDiretidePrizeList)
  return false;
#undef DO_
}

void CMsgDOTAGenerateDiretidePrizeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGenerateDiretidePrizeList)
  // optional uint32 prize_list = 1;
  if (has_prize_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prize_list(), output);
  }

  // optional uint32 highest_roshan_level = 2;
  if (has_highest_roshan_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->highest_roshan_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGenerateDiretidePrizeList)
}

::google::protobuf::uint8* CMsgDOTAGenerateDiretidePrizeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGenerateDiretidePrizeList)
  // optional uint32 prize_list = 1;
  if (has_prize_list()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prize_list(), target);
  }

  // optional uint32 highest_roshan_level = 2;
  if (has_highest_roshan_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->highest_roshan_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGenerateDiretidePrizeList)
  return target;
}

int CMsgDOTAGenerateDiretidePrizeList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 prize_list = 1;
    if (has_prize_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prize_list());
    }

    // optional uint32 highest_roshan_level = 2;
    if (has_highest_roshan_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->highest_roshan_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGenerateDiretidePrizeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGenerateDiretidePrizeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGenerateDiretidePrizeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGenerateDiretidePrizeList::MergeFrom(const CMsgDOTAGenerateDiretidePrizeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prize_list()) {
      set_prize_list(from.prize_list());
    }
    if (from.has_highest_roshan_level()) {
      set_highest_roshan_level(from.highest_roshan_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGenerateDiretidePrizeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGenerateDiretidePrizeList::CopyFrom(const CMsgDOTAGenerateDiretidePrizeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGenerateDiretidePrizeList::IsInitialized() const {

  return true;
}

void CMsgDOTAGenerateDiretidePrizeList::Swap(CMsgDOTAGenerateDiretidePrizeList* other) {
  if (other != this) {
    std::swap(prize_list_, other->prize_list_);
    std::swap(highest_roshan_level_, other->highest_roshan_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGenerateDiretidePrizeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGenerateDiretidePrizeList_descriptor_;
  metadata.reflection = CMsgDOTAGenerateDiretidePrizeList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAGenerateDiretidePrizeListResponse::kItemDefsFieldNumber;
const int CMsgDOTAGenerateDiretidePrizeListResponse::kSteamIdsFieldNumber;
const int CMsgDOTAGenerateDiretidePrizeListResponse::kPrizeListFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGenerateDiretidePrizeListResponse::CMsgDOTAGenerateDiretidePrizeListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGenerateDiretidePrizeListResponse)
}

void CMsgDOTAGenerateDiretidePrizeListResponse::InitAsDefaultInstance() {
}

CMsgDOTAGenerateDiretidePrizeListResponse::CMsgDOTAGenerateDiretidePrizeListResponse(const CMsgDOTAGenerateDiretidePrizeListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGenerateDiretidePrizeListResponse)
}

void CMsgDOTAGenerateDiretidePrizeListResponse::SharedCtor() {
  _cached_size_ = 0;
  prize_list_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGenerateDiretidePrizeListResponse::~CMsgDOTAGenerateDiretidePrizeListResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGenerateDiretidePrizeListResponse)
  SharedDtor();
}

void CMsgDOTAGenerateDiretidePrizeListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGenerateDiretidePrizeListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGenerateDiretidePrizeListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGenerateDiretidePrizeListResponse_descriptor_;
}

const CMsgDOTAGenerateDiretidePrizeListResponse& CMsgDOTAGenerateDiretidePrizeListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgDOTAGenerateDiretidePrizeListResponse* CMsgDOTAGenerateDiretidePrizeListResponse::default_instance_ = NULL;

CMsgDOTAGenerateDiretidePrizeListResponse* CMsgDOTAGenerateDiretidePrizeListResponse::New() const {
  return new CMsgDOTAGenerateDiretidePrizeListResponse;
}

void CMsgDOTAGenerateDiretidePrizeListResponse::Clear() {
  prize_list_ = 0u;
  item_defs_.Clear();
  steam_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGenerateDiretidePrizeListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGenerateDiretidePrizeListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 item_defs = 1;
      case 1: {
        if (tag == 8) {
         parse_item_defs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_item_defs())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_item_defs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_item_defs;
        if (input->ExpectTag(17)) goto parse_steam_ids;
        break;
      }

      // repeated fixed64 steam_ids = 2;
      case 2: {
        if (tag == 17) {
         parse_steam_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_steam_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steam_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_steam_ids;
        if (input->ExpectTag(24)) goto parse_prize_list;
        break;
      }

      // optional uint32 prize_list = 3;
      case 3: {
        if (tag == 24) {
         parse_prize_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prize_list_)));
          set_has_prize_list();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGenerateDiretidePrizeListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGenerateDiretidePrizeListResponse)
  return false;
#undef DO_
}

void CMsgDOTAGenerateDiretidePrizeListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGenerateDiretidePrizeListResponse)
  // repeated uint32 item_defs = 1;
  for (int i = 0; i < this->item_defs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->item_defs(i), output);
  }

  // repeated fixed64 steam_ids = 2;
  for (int i = 0; i < this->steam_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->steam_ids(i), output);
  }

  // optional uint32 prize_list = 3;
  if (has_prize_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prize_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGenerateDiretidePrizeListResponse)
}

::google::protobuf::uint8* CMsgDOTAGenerateDiretidePrizeListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGenerateDiretidePrizeListResponse)
  // repeated uint32 item_defs = 1;
  for (int i = 0; i < this->item_defs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->item_defs(i), target);
  }

  // repeated fixed64 steam_ids = 2;
  for (int i = 0; i < this->steam_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(2, this->steam_ids(i), target);
  }

  // optional uint32 prize_list = 3;
  if (has_prize_list()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->prize_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGenerateDiretidePrizeListResponse)
  return target;
}

int CMsgDOTAGenerateDiretidePrizeListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 prize_list = 3;
    if (has_prize_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prize_list());
    }

  }
  // repeated uint32 item_defs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_defs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->item_defs(i));
    }
    total_size += 1 * this->item_defs_size() + data_size;
  }

  // repeated fixed64 steam_ids = 2;
  {
    int data_size = 0;
    data_size = 8 * this->steam_ids_size();
    total_size += 1 * this->steam_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGenerateDiretidePrizeListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGenerateDiretidePrizeListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGenerateDiretidePrizeListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGenerateDiretidePrizeListResponse::MergeFrom(const CMsgDOTAGenerateDiretidePrizeListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_defs_.MergeFrom(from.item_defs_);
  steam_ids_.MergeFrom(from.steam_ids_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_prize_list()) {
      set_prize_list(from.prize_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGenerateDiretidePrizeListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGenerateDiretidePrizeListResponse::CopyFrom(const CMsgDOTAGenerateDiretidePrizeListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGenerateDiretidePrizeListResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAGenerateDiretidePrizeListResponse::Swap(CMsgDOTAGenerateDiretidePrizeListResponse* other) {
  if (other != this) {
    item_defs_.Swap(&other->item_defs_);
    steam_ids_.Swap(&other->steam_ids_);
    std::swap(prize_list_, other->prize_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGenerateDiretidePrizeListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGenerateDiretidePrizeListResponse_descriptor_;
  metadata.reflection = CMsgDOTAGenerateDiretidePrizeListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTARewardDiretidePrizes::kTeamFieldNumber;
const int CMsgDOTARewardDiretidePrizes::kPrizeListFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARewardDiretidePrizes::CMsgDOTARewardDiretidePrizes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARewardDiretidePrizes)
}

void CMsgDOTARewardDiretidePrizes::InitAsDefaultInstance() {
}

CMsgDOTARewardDiretidePrizes::CMsgDOTARewardDiretidePrizes(const CMsgDOTARewardDiretidePrizes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARewardDiretidePrizes)
}

void CMsgDOTARewardDiretidePrizes::SharedCtor() {
  _cached_size_ = 0;
  team_ = 0u;
  prize_list_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARewardDiretidePrizes::~CMsgDOTARewardDiretidePrizes() {
  // @@protoc_insertion_point(destructor:CMsgDOTARewardDiretidePrizes)
  SharedDtor();
}

void CMsgDOTARewardDiretidePrizes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARewardDiretidePrizes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARewardDiretidePrizes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARewardDiretidePrizes_descriptor_;
}

const CMsgDOTARewardDiretidePrizes& CMsgDOTARewardDiretidePrizes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgDOTARewardDiretidePrizes* CMsgDOTARewardDiretidePrizes::default_instance_ = NULL;

CMsgDOTARewardDiretidePrizes* CMsgDOTARewardDiretidePrizes::New() const {
  return new CMsgDOTARewardDiretidePrizes;
}

void CMsgDOTARewardDiretidePrizes::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTARewardDiretidePrizes*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(team_, prize_list_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARewardDiretidePrizes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARewardDiretidePrizes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_prize_list;
        break;
      }

      // optional uint32 prize_list = 2;
      case 2: {
        if (tag == 16) {
         parse_prize_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prize_list_)));
          set_has_prize_list();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARewardDiretidePrizes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARewardDiretidePrizes)
  return false;
#undef DO_
}

void CMsgDOTARewardDiretidePrizes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARewardDiretidePrizes)
  // optional uint32 team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team(), output);
  }

  // optional uint32 prize_list = 2;
  if (has_prize_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prize_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARewardDiretidePrizes)
}

::google::protobuf::uint8* CMsgDOTARewardDiretidePrizes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARewardDiretidePrizes)
  // optional uint32 team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team(), target);
  }

  // optional uint32 prize_list = 2;
  if (has_prize_list()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prize_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARewardDiretidePrizes)
  return target;
}

int CMsgDOTARewardDiretidePrizes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional uint32 prize_list = 2;
    if (has_prize_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prize_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARewardDiretidePrizes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARewardDiretidePrizes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARewardDiretidePrizes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARewardDiretidePrizes::MergeFrom(const CMsgDOTARewardDiretidePrizes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_prize_list()) {
      set_prize_list(from.prize_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARewardDiretidePrizes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARewardDiretidePrizes::CopyFrom(const CMsgDOTARewardDiretidePrizes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARewardDiretidePrizes::IsInitialized() const {

  return true;
}

void CMsgDOTARewardDiretidePrizes::Swap(CMsgDOTARewardDiretidePrizes* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(prize_list_, other->prize_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARewardDiretidePrizes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARewardDiretidePrizes_descriptor_;
  metadata.reflection = CMsgDOTARewardDiretidePrizes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTADiretidePrizesRewardedResponse::kPrizeListFieldNumber;
#endif  // !_MSC_VER

CMsgDOTADiretidePrizesRewardedResponse::CMsgDOTADiretidePrizesRewardedResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTADiretidePrizesRewardedResponse)
}

void CMsgDOTADiretidePrizesRewardedResponse::InitAsDefaultInstance() {
}

CMsgDOTADiretidePrizesRewardedResponse::CMsgDOTADiretidePrizesRewardedResponse(const CMsgDOTADiretidePrizesRewardedResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADiretidePrizesRewardedResponse)
}

void CMsgDOTADiretidePrizesRewardedResponse::SharedCtor() {
  _cached_size_ = 0;
  prize_list_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTADiretidePrizesRewardedResponse::~CMsgDOTADiretidePrizesRewardedResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTADiretidePrizesRewardedResponse)
  SharedDtor();
}

void CMsgDOTADiretidePrizesRewardedResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTADiretidePrizesRewardedResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTADiretidePrizesRewardedResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTADiretidePrizesRewardedResponse_descriptor_;
}

const CMsgDOTADiretidePrizesRewardedResponse& CMsgDOTADiretidePrizesRewardedResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgDOTADiretidePrizesRewardedResponse* CMsgDOTADiretidePrizesRewardedResponse::default_instance_ = NULL;

CMsgDOTADiretidePrizesRewardedResponse* CMsgDOTADiretidePrizesRewardedResponse::New() const {
  return new CMsgDOTADiretidePrizesRewardedResponse;
}

void CMsgDOTADiretidePrizesRewardedResponse::Clear() {
  prize_list_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTADiretidePrizesRewardedResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTADiretidePrizesRewardedResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 prize_list = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prize_list_)));
          set_has_prize_list();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTADiretidePrizesRewardedResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTADiretidePrizesRewardedResponse)
  return false;
#undef DO_
}

void CMsgDOTADiretidePrizesRewardedResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTADiretidePrizesRewardedResponse)
  // optional uint32 prize_list = 1;
  if (has_prize_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prize_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTADiretidePrizesRewardedResponse)
}

::google::protobuf::uint8* CMsgDOTADiretidePrizesRewardedResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADiretidePrizesRewardedResponse)
  // optional uint32 prize_list = 1;
  if (has_prize_list()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prize_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADiretidePrizesRewardedResponse)
  return target;
}

int CMsgDOTADiretidePrizesRewardedResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 prize_list = 1;
    if (has_prize_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prize_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTADiretidePrizesRewardedResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTADiretidePrizesRewardedResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTADiretidePrizesRewardedResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTADiretidePrizesRewardedResponse::MergeFrom(const CMsgDOTADiretidePrizesRewardedResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prize_list()) {
      set_prize_list(from.prize_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTADiretidePrizesRewardedResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADiretidePrizesRewardedResponse::CopyFrom(const CMsgDOTADiretidePrizesRewardedResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADiretidePrizesRewardedResponse::IsInitialized() const {

  return true;
}

void CMsgDOTADiretidePrizesRewardedResponse::Swap(CMsgDOTADiretidePrizesRewardedResponse* other) {
  if (other != this) {
    std::swap(prize_list_, other->prize_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTADiretidePrizesRewardedResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTADiretidePrizesRewardedResponse_descriptor_;
  metadata.reflection = CMsgDOTADiretidePrizesRewardedResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAAwardEventPoints_AwardPoints::kAccountIdFieldNumber;
const int CMsgDOTAAwardEventPoints_AwardPoints::kPointsFieldNumber;
const int CMsgDOTAAwardEventPoints_AwardPoints::kPremiumPointsFieldNumber;
const int CMsgDOTAAwardEventPoints_AwardPoints::kTradeBanTimeFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAAwardEventPoints_AwardPoints::CMsgDOTAAwardEventPoints_AwardPoints()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAAwardEventPoints.AwardPoints)
}

void CMsgDOTAAwardEventPoints_AwardPoints::InitAsDefaultInstance() {
}

CMsgDOTAAwardEventPoints_AwardPoints::CMsgDOTAAwardEventPoints_AwardPoints(const CMsgDOTAAwardEventPoints_AwardPoints& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAAwardEventPoints.AwardPoints)
}

void CMsgDOTAAwardEventPoints_AwardPoints::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  points_ = 0;
  premium_points_ = 0;
  trade_ban_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAAwardEventPoints_AwardPoints::~CMsgDOTAAwardEventPoints_AwardPoints() {
  // @@protoc_insertion_point(destructor:CMsgDOTAAwardEventPoints.AwardPoints)
  SharedDtor();
}

void CMsgDOTAAwardEventPoints_AwardPoints::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAAwardEventPoints_AwardPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAAwardEventPoints_AwardPoints::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAAwardEventPoints_AwardPoints_descriptor_;
}

const CMsgDOTAAwardEventPoints_AwardPoints& CMsgDOTAAwardEventPoints_AwardPoints::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgDOTAAwardEventPoints_AwardPoints* CMsgDOTAAwardEventPoints_AwardPoints::default_instance_ = NULL;

CMsgDOTAAwardEventPoints_AwardPoints* CMsgDOTAAwardEventPoints_AwardPoints::New() const {
  return new CMsgDOTAAwardEventPoints_AwardPoints;
}

void CMsgDOTAAwardEventPoints_AwardPoints::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAAwardEventPoints_AwardPoints*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(account_id_, trade_ban_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAAwardEventPoints_AwardPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAAwardEventPoints.AwardPoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_points;
        break;
      }

      // optional int32 points = 2;
      case 2: {
        if (tag == 16) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_premium_points;
        break;
      }

      // optional int32 premium_points = 3;
      case 3: {
        if (tag == 24) {
         parse_premium_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &premium_points_)));
          set_has_premium_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_trade_ban_time;
        break;
      }

      // optional uint32 trade_ban_time = 5;
      case 5: {
        if (tag == 40) {
         parse_trade_ban_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trade_ban_time_)));
          set_has_trade_ban_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAAwardEventPoints.AwardPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAAwardEventPoints.AwardPoints)
  return false;
#undef DO_
}

void CMsgDOTAAwardEventPoints_AwardPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAAwardEventPoints.AwardPoints)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional int32 points = 2;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->points(), output);
  }

  // optional int32 premium_points = 3;
  if (has_premium_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->premium_points(), output);
  }

  // optional uint32 trade_ban_time = 5;
  if (has_trade_ban_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->trade_ban_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAAwardEventPoints.AwardPoints)
}

::google::protobuf::uint8* CMsgDOTAAwardEventPoints_AwardPoints::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAAwardEventPoints.AwardPoints)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional int32 points = 2;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->points(), target);
  }

  // optional int32 premium_points = 3;
  if (has_premium_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->premium_points(), target);
  }

  // optional uint32 trade_ban_time = 5;
  if (has_trade_ban_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->trade_ban_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAAwardEventPoints.AwardPoints)
  return target;
}

int CMsgDOTAAwardEventPoints_AwardPoints::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional int32 points = 2;
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

    // optional int32 premium_points = 3;
    if (has_premium_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->premium_points());
    }

    // optional uint32 trade_ban_time = 5;
    if (has_trade_ban_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trade_ban_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAAwardEventPoints_AwardPoints::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAAwardEventPoints_AwardPoints* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAAwardEventPoints_AwardPoints*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAAwardEventPoints_AwardPoints::MergeFrom(const CMsgDOTAAwardEventPoints_AwardPoints& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
    if (from.has_premium_points()) {
      set_premium_points(from.premium_points());
    }
    if (from.has_trade_ban_time()) {
      set_trade_ban_time(from.trade_ban_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAAwardEventPoints_AwardPoints::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAAwardEventPoints_AwardPoints::CopyFrom(const CMsgDOTAAwardEventPoints_AwardPoints& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAAwardEventPoints_AwardPoints::IsInitialized() const {

  return true;
}

void CMsgDOTAAwardEventPoints_AwardPoints::Swap(CMsgDOTAAwardEventPoints_AwardPoints* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(points_, other->points_);
    std::swap(premium_points_, other->premium_points_);
    std::swap(trade_ban_time_, other->trade_ban_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAAwardEventPoints_AwardPoints::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAAwardEventPoints_AwardPoints_descriptor_;
  metadata.reflection = CMsgDOTAAwardEventPoints_AwardPoints_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAAwardEventPoints::kAwardPointsFieldNumber;
const int CMsgDOTAAwardEventPoints::kMatchIdFieldNumber;
const int CMsgDOTAAwardEventPoints::kEventIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAAwardEventPoints::CMsgDOTAAwardEventPoints()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAAwardEventPoints)
}

void CMsgDOTAAwardEventPoints::InitAsDefaultInstance() {
}

CMsgDOTAAwardEventPoints::CMsgDOTAAwardEventPoints(const CMsgDOTAAwardEventPoints& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAAwardEventPoints)
}

void CMsgDOTAAwardEventPoints::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  event_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAAwardEventPoints::~CMsgDOTAAwardEventPoints() {
  // @@protoc_insertion_point(destructor:CMsgDOTAAwardEventPoints)
  SharedDtor();
}

void CMsgDOTAAwardEventPoints::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAAwardEventPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAAwardEventPoints::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAAwardEventPoints_descriptor_;
}

const CMsgDOTAAwardEventPoints& CMsgDOTAAwardEventPoints::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgDOTAAwardEventPoints* CMsgDOTAAwardEventPoints::default_instance_ = NULL;

CMsgDOTAAwardEventPoints* CMsgDOTAAwardEventPoints::New() const {
  return new CMsgDOTAAwardEventPoints;
}

void CMsgDOTAAwardEventPoints::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAAwardEventPoints*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(match_id_, event_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  award_points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAAwardEventPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAAwardEventPoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
      case 1: {
        if (tag == 10) {
         parse_award_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_award_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_award_points;
        if (input->ExpectTag(16)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (tag == 16) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_event_id;
        break;
      }

      // optional uint32 event_id = 4;
      case 4: {
        if (tag == 32) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAAwardEventPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAAwardEventPoints)
  return false;
#undef DO_
}

void CMsgDOTAAwardEventPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAAwardEventPoints)
  // repeated .CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
  for (int i = 0; i < this->award_points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->award_points(i), output);
  }

  // optional uint64 match_id = 2;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional uint32 event_id = 4;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->event_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAAwardEventPoints)
}

::google::protobuf::uint8* CMsgDOTAAwardEventPoints::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAAwardEventPoints)
  // repeated .CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
  for (int i = 0; i < this->award_points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->award_points(i), target);
  }

  // optional uint64 match_id = 2;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional uint32 event_id = 4;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->event_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAAwardEventPoints)
  return target;
}

int CMsgDOTAAwardEventPoints::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 event_id = 4;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

  }
  // repeated .CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
  total_size += 1 * this->award_points_size();
  for (int i = 0; i < this->award_points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->award_points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAAwardEventPoints::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAAwardEventPoints* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAAwardEventPoints*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAAwardEventPoints::MergeFrom(const CMsgDOTAAwardEventPoints& from) {
  GOOGLE_CHECK_NE(&from, this);
  award_points_.MergeFrom(from.award_points_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAAwardEventPoints::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAAwardEventPoints::CopyFrom(const CMsgDOTAAwardEventPoints& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAAwardEventPoints::IsInitialized() const {

  return true;
}

void CMsgDOTAAwardEventPoints::Swap(CMsgDOTAAwardEventPoints* other) {
  if (other != this) {
    award_points_.Swap(&other->award_points_);
    std::swap(match_id_, other->match_id_);
    std::swap(event_id_, other->event_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAAwardEventPoints::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAAwardEventPoints_descriptor_;
  metadata.reflection = CMsgDOTAAwardEventPoints_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::kLootListFieldNumber;
const int CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::kPlayerAccountIdsFieldNumber;
const int CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::kNoTradeFieldNumber;
const int CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::kRandomizeRewardFieldNumber;
#endif  // !_MSC_VER

CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::InitAsDefaultInstance() {
}

CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops(const CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  loot_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  no_trade_ = false;
  randomize_reward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::~CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  SharedDtor();
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::SharedDtor() {
  if (loot_list_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loot_list_;
  }
  if (this != default_instance_) {
  }
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_descriptor_;
}

const CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops& CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops* CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::default_instance_ = NULL;

CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops* CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::New() const {
  return new CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops;
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(no_trade_, randomize_reward_);
    if (has_loot_list()) {
      if (loot_list_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        loot_list_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  player_account_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string loot_list = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loot_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loot_list().data(), this->loot_list().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "loot_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_account_ids;
        break;
      }

      // repeated uint32 player_account_ids = 2;
      case 2: {
        if (tag == 16) {
         parse_player_account_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_player_account_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_player_account_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_account_ids;
        if (input->ExpectTag(24)) goto parse_no_trade;
        break;
      }

      // optional bool no_trade = 3;
      case 3: {
        if (tag == 24) {
         parse_no_trade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_trade_)));
          set_has_no_trade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_randomize_reward;
        break;
      }

      // optional bool randomize_reward = 4;
      case 4: {
        if (tag == 32) {
         parse_randomize_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &randomize_reward_)));
          set_has_randomize_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  return false;
#undef DO_
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  // optional string loot_list = 1;
  if (has_loot_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loot_list().data(), this->loot_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loot_list");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->loot_list(), output);
  }

  // repeated uint32 player_account_ids = 2;
  for (int i = 0; i < this->player_account_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->player_account_ids(i), output);
  }

  // optional bool no_trade = 3;
  if (has_no_trade()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->no_trade(), output);
  }

  // optional bool randomize_reward = 4;
  if (has_randomize_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->randomize_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
}

::google::protobuf::uint8* CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  // optional string loot_list = 1;
  if (has_loot_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loot_list().data(), this->loot_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loot_list");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->loot_list(), target);
  }

  // repeated uint32 player_account_ids = 2;
  for (int i = 0; i < this->player_account_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->player_account_ids(i), target);
  }

  // optional bool no_trade = 3;
  if (has_no_trade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->no_trade(), target);
  }

  // optional bool randomize_reward = 4;
  if (has_randomize_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->randomize_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  return target;
}

int CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string loot_list = 1;
    if (has_loot_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loot_list());
    }

    // optional bool no_trade = 3;
    if (has_no_trade()) {
      total_size += 1 + 1;
    }

    // optional bool randomize_reward = 4;
    if (has_randomize_reward()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 player_account_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->player_account_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->player_account_ids(i));
    }
    total_size += 1 * this->player_account_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::MergeFrom(const CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_account_ids_.MergeFrom(from.player_account_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loot_list()) {
      set_loot_list(from.loot_list());
    }
    if (from.has_no_trade()) {
      set_no_trade(from.no_trade());
    }
    if (from.has_randomize_reward()) {
      set_randomize_reward(from.randomize_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::CopyFrom(const CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::IsInitialized() const {

  return true;
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::Swap(CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops* other) {
  if (other != this) {
    std::swap(loot_list_, other->loot_list_);
    player_account_ids_.Swap(&other->player_account_ids_);
    std::swap(no_trade_, other->no_trade_);
    std::swap(randomize_reward_, other->randomize_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_descriptor_;
  metadata.reflection = CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgServerToGCSignoutAwardAdditionalDrops::kDropsFieldNumber;
const int CMsgServerToGCSignoutAwardAdditionalDrops::kMatchIdFieldNumber;
#endif  // !_MSC_VER

CMsgServerToGCSignoutAwardAdditionalDrops::CMsgServerToGCSignoutAwardAdditionalDrops()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerToGCSignoutAwardAdditionalDrops)
}

void CMsgServerToGCSignoutAwardAdditionalDrops::InitAsDefaultInstance() {
}

CMsgServerToGCSignoutAwardAdditionalDrops::CMsgServerToGCSignoutAwardAdditionalDrops(const CMsgServerToGCSignoutAwardAdditionalDrops& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCSignoutAwardAdditionalDrops)
}

void CMsgServerToGCSignoutAwardAdditionalDrops::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerToGCSignoutAwardAdditionalDrops::~CMsgServerToGCSignoutAwardAdditionalDrops() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCSignoutAwardAdditionalDrops)
  SharedDtor();
}

void CMsgServerToGCSignoutAwardAdditionalDrops::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerToGCSignoutAwardAdditionalDrops::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCSignoutAwardAdditionalDrops::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerToGCSignoutAwardAdditionalDrops_descriptor_;
}

const CMsgServerToGCSignoutAwardAdditionalDrops& CMsgServerToGCSignoutAwardAdditionalDrops::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerToGCSignoutAwardAdditionalDrops* CMsgServerToGCSignoutAwardAdditionalDrops::default_instance_ = NULL;

CMsgServerToGCSignoutAwardAdditionalDrops* CMsgServerToGCSignoutAwardAdditionalDrops::New() const {
  return new CMsgServerToGCSignoutAwardAdditionalDrops;
}

void CMsgServerToGCSignoutAwardAdditionalDrops::Clear() {
  match_id_ = GOOGLE_ULONGLONG(0);
  drops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerToGCSignoutAwardAdditionalDrops::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerToGCSignoutAwardAdditionalDrops)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops drops = 1;
      case 1: {
        if (tag == 10) {
         parse_drops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drops()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_drops;
        if (input->ExpectTag(16)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (tag == 16) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerToGCSignoutAwardAdditionalDrops)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerToGCSignoutAwardAdditionalDrops)
  return false;
#undef DO_
}

void CMsgServerToGCSignoutAwardAdditionalDrops::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerToGCSignoutAwardAdditionalDrops)
  // repeated .CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops drops = 1;
  for (int i = 0; i < this->drops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->drops(i), output);
  }

  // optional uint64 match_id = 2;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerToGCSignoutAwardAdditionalDrops)
}

::google::protobuf::uint8* CMsgServerToGCSignoutAwardAdditionalDrops::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCSignoutAwardAdditionalDrops)
  // repeated .CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops drops = 1;
  for (int i = 0; i < this->drops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->drops(i), target);
  }

  // optional uint64 match_id = 2;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCSignoutAwardAdditionalDrops)
  return target;
}

int CMsgServerToGCSignoutAwardAdditionalDrops::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

  }
  // repeated .CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops drops = 1;
  total_size += 1 * this->drops_size();
  for (int i = 0; i < this->drops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drops(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCSignoutAwardAdditionalDrops::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerToGCSignoutAwardAdditionalDrops* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerToGCSignoutAwardAdditionalDrops*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerToGCSignoutAwardAdditionalDrops::MergeFrom(const CMsgServerToGCSignoutAwardAdditionalDrops& from) {
  GOOGLE_CHECK_NE(&from, this);
  drops_.MergeFrom(from.drops_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerToGCSignoutAwardAdditionalDrops::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCSignoutAwardAdditionalDrops::CopyFrom(const CMsgServerToGCSignoutAwardAdditionalDrops& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCSignoutAwardAdditionalDrops::IsInitialized() const {

  return true;
}

void CMsgServerToGCSignoutAwardAdditionalDrops::Swap(CMsgServerToGCSignoutAwardAdditionalDrops* other) {
  if (other != this) {
    drops_.Swap(&other->drops_);
    std::swap(match_id_, other->match_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerToGCSignoutAwardAdditionalDrops::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerToGCSignoutAwardAdditionalDrops_descriptor_;
  metadata.reflection = CMsgServerToGCSignoutAwardAdditionalDrops_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAUpdateTI4HeroQuest_Player::kAccountIdFieldNumber;
const int CMsgDOTAUpdateTI4HeroQuest_Player::kHeroIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAUpdateTI4HeroQuest_Player::CMsgDOTAUpdateTI4HeroQuest_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAUpdateTI4HeroQuest.Player)
}

void CMsgDOTAUpdateTI4HeroQuest_Player::InitAsDefaultInstance() {
}

CMsgDOTAUpdateTI4HeroQuest_Player::CMsgDOTAUpdateTI4HeroQuest_Player(const CMsgDOTAUpdateTI4HeroQuest_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAUpdateTI4HeroQuest.Player)
}

void CMsgDOTAUpdateTI4HeroQuest_Player::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  hero_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAUpdateTI4HeroQuest_Player::~CMsgDOTAUpdateTI4HeroQuest_Player() {
  // @@protoc_insertion_point(destructor:CMsgDOTAUpdateTI4HeroQuest.Player)
  SharedDtor();
}

void CMsgDOTAUpdateTI4HeroQuest_Player::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAUpdateTI4HeroQuest_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAUpdateTI4HeroQuest_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAUpdateTI4HeroQuest_Player_descriptor_;
}

const CMsgDOTAUpdateTI4HeroQuest_Player& CMsgDOTAUpdateTI4HeroQuest_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgDOTAUpdateTI4HeroQuest_Player* CMsgDOTAUpdateTI4HeroQuest_Player::default_instance_ = NULL;

CMsgDOTAUpdateTI4HeroQuest_Player* CMsgDOTAUpdateTI4HeroQuest_Player::New() const {
  return new CMsgDOTAUpdateTI4HeroQuest_Player;
}

void CMsgDOTAUpdateTI4HeroQuest_Player::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAUpdateTI4HeroQuest_Player*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(account_id_, hero_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAUpdateTI4HeroQuest_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAUpdateTI4HeroQuest.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint32 hero_id = 2;
      case 2: {
        if (tag == 16) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAUpdateTI4HeroQuest.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAUpdateTI4HeroQuest.Player)
  return false;
#undef DO_
}

void CMsgDOTAUpdateTI4HeroQuest_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAUpdateTI4HeroQuest.Player)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAUpdateTI4HeroQuest.Player)
}

::google::protobuf::uint8* CMsgDOTAUpdateTI4HeroQuest_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAUpdateTI4HeroQuest.Player)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAUpdateTI4HeroQuest.Player)
  return target;
}

int CMsgDOTAUpdateTI4HeroQuest_Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAUpdateTI4HeroQuest_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAUpdateTI4HeroQuest_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAUpdateTI4HeroQuest_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAUpdateTI4HeroQuest_Player::MergeFrom(const CMsgDOTAUpdateTI4HeroQuest_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAUpdateTI4HeroQuest_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAUpdateTI4HeroQuest_Player::CopyFrom(const CMsgDOTAUpdateTI4HeroQuest_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAUpdateTI4HeroQuest_Player::IsInitialized() const {

  return true;
}

void CMsgDOTAUpdateTI4HeroQuest_Player::Swap(CMsgDOTAUpdateTI4HeroQuest_Player* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAUpdateTI4HeroQuest_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAUpdateTI4HeroQuest_Player_descriptor_;
  metadata.reflection = CMsgDOTAUpdateTI4HeroQuest_Player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAUpdateTI4HeroQuest::kPlayersFieldNumber;
const int CMsgDOTAUpdateTI4HeroQuest::kMatchStartTimeFieldNumber;
const int CMsgDOTAUpdateTI4HeroQuest::kMatchIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAUpdateTI4HeroQuest::CMsgDOTAUpdateTI4HeroQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAUpdateTI4HeroQuest)
}

void CMsgDOTAUpdateTI4HeroQuest::InitAsDefaultInstance() {
}

CMsgDOTAUpdateTI4HeroQuest::CMsgDOTAUpdateTI4HeroQuest(const CMsgDOTAUpdateTI4HeroQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAUpdateTI4HeroQuest)
}

void CMsgDOTAUpdateTI4HeroQuest::SharedCtor() {
  _cached_size_ = 0;
  match_start_time_ = 0u;
  match_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAUpdateTI4HeroQuest::~CMsgDOTAUpdateTI4HeroQuest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAUpdateTI4HeroQuest)
  SharedDtor();
}

void CMsgDOTAUpdateTI4HeroQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAUpdateTI4HeroQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAUpdateTI4HeroQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAUpdateTI4HeroQuest_descriptor_;
}

const CMsgDOTAUpdateTI4HeroQuest& CMsgDOTAUpdateTI4HeroQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgDOTAUpdateTI4HeroQuest* CMsgDOTAUpdateTI4HeroQuest::default_instance_ = NULL;

CMsgDOTAUpdateTI4HeroQuest* CMsgDOTAUpdateTI4HeroQuest::New() const {
  return new CMsgDOTAUpdateTI4HeroQuest;
}

void CMsgDOTAUpdateTI4HeroQuest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAUpdateTI4HeroQuest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(match_id_, match_start_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAUpdateTI4HeroQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAUpdateTI4HeroQuest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgDOTAUpdateTI4HeroQuest.Player players = 1;
      case 1: {
        if (tag == 10) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectTag(21)) goto parse_match_start_time;
        break;
      }

      // optional fixed32 match_start_time = 2;
      case 2: {
        if (tag == 21) {
         parse_match_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &match_start_time_)));
          set_has_match_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 3;
      case 3: {
        if (tag == 24) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAUpdateTI4HeroQuest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAUpdateTI4HeroQuest)
  return false;
#undef DO_
}

void CMsgDOTAUpdateTI4HeroQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAUpdateTI4HeroQuest)
  // repeated .CMsgDOTAUpdateTI4HeroQuest.Player players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  // optional fixed32 match_start_time = 2;
  if (has_match_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->match_start_time(), output);
  }

  // optional uint64 match_id = 3;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->match_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAUpdateTI4HeroQuest)
}

::google::protobuf::uint8* CMsgDOTAUpdateTI4HeroQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAUpdateTI4HeroQuest)
  // repeated .CMsgDOTAUpdateTI4HeroQuest.Player players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  // optional fixed32 match_start_time = 2;
  if (has_match_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->match_start_time(), target);
  }

  // optional uint64 match_id = 3;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->match_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAUpdateTI4HeroQuest)
  return target;
}

int CMsgDOTAUpdateTI4HeroQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional fixed32 match_start_time = 2;
    if (has_match_start_time()) {
      total_size += 1 + 4;
    }

    // optional uint64 match_id = 3;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

  }
  // repeated .CMsgDOTAUpdateTI4HeroQuest.Player players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAUpdateTI4HeroQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAUpdateTI4HeroQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAUpdateTI4HeroQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAUpdateTI4HeroQuest::MergeFrom(const CMsgDOTAUpdateTI4HeroQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_match_start_time()) {
      set_match_start_time(from.match_start_time());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAUpdateTI4HeroQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAUpdateTI4HeroQuest::CopyFrom(const CMsgDOTAUpdateTI4HeroQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAUpdateTI4HeroQuest::IsInitialized() const {

  return true;
}

void CMsgDOTAUpdateTI4HeroQuest::Swap(CMsgDOTAUpdateTI4HeroQuest* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(match_start_time_, other->match_start_time_);
    std::swap(match_id_, other->match_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAUpdateTI4HeroQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAUpdateTI4HeroQuest_descriptor_;
  metadata.reflection = CMsgDOTAUpdateTI4HeroQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFrostivusTimeElapsed_User::kAccountIdFieldNumber;
const int CMsgDOTAFrostivusTimeElapsed_User::kTimeElapsedSFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFrostivusTimeElapsed_User::CMsgDOTAFrostivusTimeElapsed_User()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFrostivusTimeElapsed.User)
}

void CMsgDOTAFrostivusTimeElapsed_User::InitAsDefaultInstance() {
}

CMsgDOTAFrostivusTimeElapsed_User::CMsgDOTAFrostivusTimeElapsed_User(const CMsgDOTAFrostivusTimeElapsed_User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFrostivusTimeElapsed.User)
}

void CMsgDOTAFrostivusTimeElapsed_User::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  time_elapsed_s_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFrostivusTimeElapsed_User::~CMsgDOTAFrostivusTimeElapsed_User() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFrostivusTimeElapsed.User)
  SharedDtor();
}

void CMsgDOTAFrostivusTimeElapsed_User::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFrostivusTimeElapsed_User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFrostivusTimeElapsed_User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFrostivusTimeElapsed_User_descriptor_;
}

const CMsgDOTAFrostivusTimeElapsed_User& CMsgDOTAFrostivusTimeElapsed_User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgDOTAFrostivusTimeElapsed_User* CMsgDOTAFrostivusTimeElapsed_User::default_instance_ = NULL;

CMsgDOTAFrostivusTimeElapsed_User* CMsgDOTAFrostivusTimeElapsed_User::New() const {
  return new CMsgDOTAFrostivusTimeElapsed_User;
}

void CMsgDOTAFrostivusTimeElapsed_User::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAFrostivusTimeElapsed_User*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(account_id_, time_elapsed_s_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAFrostivusTimeElapsed_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFrostivusTimeElapsed.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_elapsed_s;
        break;
      }

      // optional uint32 time_elapsed_s = 2;
      case 2: {
        if (tag == 16) {
         parse_time_elapsed_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_elapsed_s_)));
          set_has_time_elapsed_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFrostivusTimeElapsed.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFrostivusTimeElapsed.User)
  return false;
#undef DO_
}

void CMsgDOTAFrostivusTimeElapsed_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFrostivusTimeElapsed.User)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 time_elapsed_s = 2;
  if (has_time_elapsed_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_elapsed_s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFrostivusTimeElapsed.User)
}

::google::protobuf::uint8* CMsgDOTAFrostivusTimeElapsed_User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFrostivusTimeElapsed.User)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 time_elapsed_s = 2;
  if (has_time_elapsed_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_elapsed_s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFrostivusTimeElapsed.User)
  return target;
}

int CMsgDOTAFrostivusTimeElapsed_User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 time_elapsed_s = 2;
    if (has_time_elapsed_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_elapsed_s());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFrostivusTimeElapsed_User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAFrostivusTimeElapsed_User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAFrostivusTimeElapsed_User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFrostivusTimeElapsed_User::MergeFrom(const CMsgDOTAFrostivusTimeElapsed_User& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_time_elapsed_s()) {
      set_time_elapsed_s(from.time_elapsed_s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAFrostivusTimeElapsed_User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFrostivusTimeElapsed_User::CopyFrom(const CMsgDOTAFrostivusTimeElapsed_User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFrostivusTimeElapsed_User::IsInitialized() const {

  return true;
}

void CMsgDOTAFrostivusTimeElapsed_User::Swap(CMsgDOTAFrostivusTimeElapsed_User* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(time_elapsed_s_, other->time_elapsed_s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAFrostivusTimeElapsed_User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFrostivusTimeElapsed_User_descriptor_;
  metadata.reflection = CMsgDOTAFrostivusTimeElapsed_User_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAFrostivusTimeElapsed::kSecondsFieldNumber;
const int CMsgDOTAFrostivusTimeElapsed::kUsersFieldNumber;
const int CMsgDOTAFrostivusTimeElapsed::kMatchIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFrostivusTimeElapsed::CMsgDOTAFrostivusTimeElapsed()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFrostivusTimeElapsed)
}

void CMsgDOTAFrostivusTimeElapsed::InitAsDefaultInstance() {
}

CMsgDOTAFrostivusTimeElapsed::CMsgDOTAFrostivusTimeElapsed(const CMsgDOTAFrostivusTimeElapsed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFrostivusTimeElapsed)
}

void CMsgDOTAFrostivusTimeElapsed::SharedCtor() {
  _cached_size_ = 0;
  seconds_ = 0u;
  match_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFrostivusTimeElapsed::~CMsgDOTAFrostivusTimeElapsed() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFrostivusTimeElapsed)
  SharedDtor();
}

void CMsgDOTAFrostivusTimeElapsed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFrostivusTimeElapsed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFrostivusTimeElapsed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFrostivusTimeElapsed_descriptor_;
}

const CMsgDOTAFrostivusTimeElapsed& CMsgDOTAFrostivusTimeElapsed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgDOTAFrostivusTimeElapsed* CMsgDOTAFrostivusTimeElapsed::default_instance_ = NULL;

CMsgDOTAFrostivusTimeElapsed* CMsgDOTAFrostivusTimeElapsed::New() const {
  return new CMsgDOTAFrostivusTimeElapsed;
}

void CMsgDOTAFrostivusTimeElapsed::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAFrostivusTimeElapsed*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(match_id_, seconds_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAFrostivusTimeElapsed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFrostivusTimeElapsed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 seconds = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_users;
        break;
      }

      // repeated .CMsgDOTAFrostivusTimeElapsed.User users = 2;
      case 2: {
        if (tag == 18) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_users;
        if (input->ExpectTag(24)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 3;
      case 3: {
        if (tag == 24) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFrostivusTimeElapsed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFrostivusTimeElapsed)
  return false;
#undef DO_
}

void CMsgDOTAFrostivusTimeElapsed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFrostivusTimeElapsed)
  // optional uint32 seconds = 1;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seconds(), output);
  }

  // repeated .CMsgDOTAFrostivusTimeElapsed.User users = 2;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->users(i), output);
  }

  // optional uint64 match_id = 3;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->match_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFrostivusTimeElapsed)
}

::google::protobuf::uint8* CMsgDOTAFrostivusTimeElapsed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFrostivusTimeElapsed)
  // optional uint32 seconds = 1;
  if (has_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seconds(), target);
  }

  // repeated .CMsgDOTAFrostivusTimeElapsed.User users = 2;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->users(i), target);
  }

  // optional uint64 match_id = 3;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->match_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFrostivusTimeElapsed)
  return target;
}

int CMsgDOTAFrostivusTimeElapsed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 seconds = 1;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds());
    }

    // optional uint64 match_id = 3;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

  }
  // repeated .CMsgDOTAFrostivusTimeElapsed.User users = 2;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFrostivusTimeElapsed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAFrostivusTimeElapsed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAFrostivusTimeElapsed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFrostivusTimeElapsed::MergeFrom(const CMsgDOTAFrostivusTimeElapsed& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAFrostivusTimeElapsed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFrostivusTimeElapsed::CopyFrom(const CMsgDOTAFrostivusTimeElapsed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFrostivusTimeElapsed::IsInitialized() const {

  return true;
}

void CMsgDOTAFrostivusTimeElapsed::Swap(CMsgDOTAFrostivusTimeElapsed* other) {
  if (other != this) {
    std::swap(seconds_, other->seconds_);
    users_.Swap(&other->users_);
    std::swap(match_id_, other->match_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAFrostivusTimeElapsed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFrostivusTimeElapsed_descriptor_;
  metadata.reflection = CMsgDOTAFrostivusTimeElapsed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToServerPingRequest::kRequestIdFieldNumber;
const int CMsgGCToServerPingRequest::kRequestTimeFieldNumber;
#endif  // !_MSC_VER

CMsgGCToServerPingRequest::CMsgGCToServerPingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToServerPingRequest)
}

void CMsgGCToServerPingRequest::InitAsDefaultInstance() {
}

CMsgGCToServerPingRequest::CMsgGCToServerPingRequest(const CMsgGCToServerPingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerPingRequest)
}

void CMsgGCToServerPingRequest::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  request_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToServerPingRequest::~CMsgGCToServerPingRequest() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerPingRequest)
  SharedDtor();
}

void CMsgGCToServerPingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToServerPingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToServerPingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToServerPingRequest_descriptor_;
}

const CMsgGCToServerPingRequest& CMsgGCToServerPingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGCToServerPingRequest* CMsgGCToServerPingRequest::default_instance_ = NULL;

CMsgGCToServerPingRequest* CMsgGCToServerPingRequest::New() const {
  return new CMsgGCToServerPingRequest;
}

void CMsgGCToServerPingRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGCToServerPingRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(request_id_, request_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToServerPingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToServerPingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 request_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_request_time;
        break;
      }

      // optional uint64 request_time = 2;
      case 2: {
        if (tag == 16) {
         parse_request_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_time_)));
          set_has_request_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToServerPingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToServerPingRequest)
  return false;
#undef DO_
}

void CMsgGCToServerPingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToServerPingRequest)
  // optional fixed64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->request_id(), output);
  }

  // optional uint64 request_time = 2;
  if (has_request_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->request_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToServerPingRequest)
}

::google::protobuf::uint8* CMsgGCToServerPingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerPingRequest)
  // optional fixed64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->request_id(), target);
  }

  // optional uint64 request_time = 2;
  if (has_request_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->request_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerPingRequest)
  return target;
}

int CMsgGCToServerPingRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 + 8;
    }

    // optional uint64 request_time = 2;
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToServerPingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToServerPingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToServerPingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToServerPingRequest::MergeFrom(const CMsgGCToServerPingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_request_time()) {
      set_request_time(from.request_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToServerPingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerPingRequest::CopyFrom(const CMsgGCToServerPingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerPingRequest::IsInitialized() const {

  return true;
}

void CMsgGCToServerPingRequest::Swap(CMsgGCToServerPingRequest* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(request_time_, other->request_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToServerPingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToServerPingRequest_descriptor_;
  metadata.reflection = CMsgGCToServerPingRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToServerPingResponse::kRequestIdFieldNumber;
const int CMsgGCToServerPingResponse::kRequestTimeFieldNumber;
const int CMsgGCToServerPingResponse::kClusterFieldNumber;
#endif  // !_MSC_VER

CMsgGCToServerPingResponse::CMsgGCToServerPingResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToServerPingResponse)
}

void CMsgGCToServerPingResponse::InitAsDefaultInstance() {
}

CMsgGCToServerPingResponse::CMsgGCToServerPingResponse(const CMsgGCToServerPingResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerPingResponse)
}

void CMsgGCToServerPingResponse::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  request_time_ = GOOGLE_ULONGLONG(0);
  cluster_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToServerPingResponse::~CMsgGCToServerPingResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerPingResponse)
  SharedDtor();
}

void CMsgGCToServerPingResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToServerPingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToServerPingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToServerPingResponse_descriptor_;
}

const CMsgGCToServerPingResponse& CMsgGCToServerPingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGCToServerPingResponse* CMsgGCToServerPingResponse::default_instance_ = NULL;

CMsgGCToServerPingResponse* CMsgGCToServerPingResponse::New() const {
  return new CMsgGCToServerPingResponse;
}

void CMsgGCToServerPingResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGCToServerPingResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(request_id_, cluster_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToServerPingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToServerPingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 request_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_request_time;
        break;
      }

      // optional uint64 request_time = 2;
      case 2: {
        if (tag == 16) {
         parse_request_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_time_)));
          set_has_request_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cluster;
        break;
      }

      // optional uint32 cluster = 3;
      case 3: {
        if (tag == 24) {
         parse_cluster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cluster_)));
          set_has_cluster();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToServerPingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToServerPingResponse)
  return false;
#undef DO_
}

void CMsgGCToServerPingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToServerPingResponse)
  // optional fixed64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->request_id(), output);
  }

  // optional uint64 request_time = 2;
  if (has_request_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->request_time(), output);
  }

  // optional uint32 cluster = 3;
  if (has_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cluster(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToServerPingResponse)
}

::google::protobuf::uint8* CMsgGCToServerPingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerPingResponse)
  // optional fixed64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->request_id(), target);
  }

  // optional uint64 request_time = 2;
  if (has_request_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->request_time(), target);
  }

  // optional uint32 cluster = 3;
  if (has_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cluster(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerPingResponse)
  return target;
}

int CMsgGCToServerPingResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 + 8;
    }

    // optional uint64 request_time = 2;
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_time());
    }

    // optional uint32 cluster = 3;
    if (has_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cluster());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToServerPingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToServerPingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToServerPingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToServerPingResponse::MergeFrom(const CMsgGCToServerPingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_request_time()) {
      set_request_time(from.request_time());
    }
    if (from.has_cluster()) {
      set_cluster(from.cluster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToServerPingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerPingResponse::CopyFrom(const CMsgGCToServerPingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerPingResponse::IsInitialized() const {

  return true;
}

void CMsgGCToServerPingResponse::Swap(CMsgGCToServerPingResponse* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(request_time_, other->request_time_);
    std::swap(cluster_, other->cluster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToServerPingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToServerPingResponse_descriptor_;
  metadata.reflection = CMsgGCToServerPingResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToServerConsoleCommand::kConsoleCommandFieldNumber;
#endif  // !_MSC_VER

CMsgGCToServerConsoleCommand::CMsgGCToServerConsoleCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToServerConsoleCommand)
}

void CMsgGCToServerConsoleCommand::InitAsDefaultInstance() {
}

CMsgGCToServerConsoleCommand::CMsgGCToServerConsoleCommand(const CMsgGCToServerConsoleCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerConsoleCommand)
}

void CMsgGCToServerConsoleCommand::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  console_command_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToServerConsoleCommand::~CMsgGCToServerConsoleCommand() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerConsoleCommand)
  SharedDtor();
}

void CMsgGCToServerConsoleCommand::SharedDtor() {
  if (console_command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete console_command_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCToServerConsoleCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToServerConsoleCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToServerConsoleCommand_descriptor_;
}

const CMsgGCToServerConsoleCommand& CMsgGCToServerConsoleCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGCToServerConsoleCommand* CMsgGCToServerConsoleCommand::default_instance_ = NULL;

CMsgGCToServerConsoleCommand* CMsgGCToServerConsoleCommand::New() const {
  return new CMsgGCToServerConsoleCommand;
}

void CMsgGCToServerConsoleCommand::Clear() {
  if (has_console_command()) {
    if (console_command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      console_command_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToServerConsoleCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToServerConsoleCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string console_command = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_console_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->console_command().data(), this->console_command().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "console_command");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToServerConsoleCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToServerConsoleCommand)
  return false;
#undef DO_
}

void CMsgGCToServerConsoleCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToServerConsoleCommand)
  // optional string console_command = 1;
  if (has_console_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->console_command().data(), this->console_command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "console_command");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->console_command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToServerConsoleCommand)
}

::google::protobuf::uint8* CMsgGCToServerConsoleCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerConsoleCommand)
  // optional string console_command = 1;
  if (has_console_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->console_command().data(), this->console_command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "console_command");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->console_command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerConsoleCommand)
  return target;
}

int CMsgGCToServerConsoleCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string console_command = 1;
    if (has_console_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->console_command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToServerConsoleCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToServerConsoleCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToServerConsoleCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToServerConsoleCommand::MergeFrom(const CMsgGCToServerConsoleCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_console_command()) {
      set_console_command(from.console_command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToServerConsoleCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerConsoleCommand::CopyFrom(const CMsgGCToServerConsoleCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerConsoleCommand::IsInitialized() const {

  return true;
}

void CMsgGCToServerConsoleCommand::Swap(CMsgGCToServerConsoleCommand* other) {
  if (other != this) {
    std::swap(console_command_, other->console_command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToServerConsoleCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToServerConsoleCommand_descriptor_;
  metadata.reflection = CMsgGCToServerConsoleCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgServerGetEventPoints::kEventIdFieldNumber;
const int CMsgServerGetEventPoints::kAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgServerGetEventPoints::CMsgServerGetEventPoints()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerGetEventPoints)
}

void CMsgServerGetEventPoints::InitAsDefaultInstance() {
}

CMsgServerGetEventPoints::CMsgServerGetEventPoints(const CMsgServerGetEventPoints& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerGetEventPoints)
}

void CMsgServerGetEventPoints::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerGetEventPoints::~CMsgServerGetEventPoints() {
  // @@protoc_insertion_point(destructor:CMsgServerGetEventPoints)
  SharedDtor();
}

void CMsgServerGetEventPoints::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerGetEventPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerGetEventPoints::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerGetEventPoints_descriptor_;
}

const CMsgServerGetEventPoints& CMsgServerGetEventPoints::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerGetEventPoints* CMsgServerGetEventPoints::default_instance_ = NULL;

CMsgServerGetEventPoints* CMsgServerGetEventPoints::New() const {
  return new CMsgServerGetEventPoints;
}

void CMsgServerGetEventPoints::Clear() {
  event_id_ = 0u;
  account_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerGetEventPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerGetEventPoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }

      // repeated uint32 account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_account_id())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerGetEventPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerGetEventPoints)
  return false;
#undef DO_
}

void CMsgServerGetEventPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerGetEventPoints)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // repeated uint32 account_id = 2;
  for (int i = 0; i < this->account_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->account_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerGetEventPoints)
}

::google::protobuf::uint8* CMsgServerGetEventPoints::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerGetEventPoints)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // repeated uint32 account_id = 2;
  for (int i = 0; i < this->account_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->account_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerGetEventPoints)
  return target;
}

int CMsgServerGetEventPoints::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

  }
  // repeated uint32 account_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->account_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->account_id(i));
    }
    total_size += 1 * this->account_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerGetEventPoints::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerGetEventPoints* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerGetEventPoints*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerGetEventPoints::MergeFrom(const CMsgServerGetEventPoints& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_id_.MergeFrom(from.account_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerGetEventPoints::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGetEventPoints::CopyFrom(const CMsgServerGetEventPoints& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGetEventPoints::IsInitialized() const {

  return true;
}

void CMsgServerGetEventPoints::Swap(CMsgServerGetEventPoints* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    account_id_.Swap(&other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerGetEventPoints::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerGetEventPoints_descriptor_;
  metadata.reflection = CMsgServerGetEventPoints_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgServerGetEventPointsResponse_Points::kAccountIdFieldNumber;
const int CMsgServerGetEventPointsResponse_Points::kPointsTotalFieldNumber;
const int CMsgServerGetEventPointsResponse_Points::kOwnedFieldNumber;
#endif  // !_MSC_VER

CMsgServerGetEventPointsResponse_Points::CMsgServerGetEventPointsResponse_Points()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerGetEventPointsResponse.Points)
}

void CMsgServerGetEventPointsResponse_Points::InitAsDefaultInstance() {
}

CMsgServerGetEventPointsResponse_Points::CMsgServerGetEventPointsResponse_Points(const CMsgServerGetEventPointsResponse_Points& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerGetEventPointsResponse.Points)
}

void CMsgServerGetEventPointsResponse_Points::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  points_total_ = 0u;
  owned_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerGetEventPointsResponse_Points::~CMsgServerGetEventPointsResponse_Points() {
  // @@protoc_insertion_point(destructor:CMsgServerGetEventPointsResponse.Points)
  SharedDtor();
}

void CMsgServerGetEventPointsResponse_Points::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerGetEventPointsResponse_Points::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerGetEventPointsResponse_Points::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerGetEventPointsResponse_Points_descriptor_;
}

const CMsgServerGetEventPointsResponse_Points& CMsgServerGetEventPointsResponse_Points::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerGetEventPointsResponse_Points* CMsgServerGetEventPointsResponse_Points::default_instance_ = NULL;

CMsgServerGetEventPointsResponse_Points* CMsgServerGetEventPointsResponse_Points::New() const {
  return new CMsgServerGetEventPointsResponse_Points;
}

void CMsgServerGetEventPointsResponse_Points::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgServerGetEventPointsResponse_Points*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(account_id_, owned_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerGetEventPointsResponse_Points::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerGetEventPointsResponse.Points)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_points_total;
        break;
      }

      // optional uint32 points_total = 2;
      case 2: {
        if (tag == 16) {
         parse_points_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_total_)));
          set_has_points_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_owned;
        break;
      }

      // optional bool owned = 4;
      case 4: {
        if (tag == 32) {
         parse_owned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &owned_)));
          set_has_owned();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerGetEventPointsResponse.Points)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerGetEventPointsResponse.Points)
  return false;
#undef DO_
}

void CMsgServerGetEventPointsResponse_Points::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerGetEventPointsResponse.Points)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 points_total = 2;
  if (has_points_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->points_total(), output);
  }

  // optional bool owned = 4;
  if (has_owned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->owned(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerGetEventPointsResponse.Points)
}

::google::protobuf::uint8* CMsgServerGetEventPointsResponse_Points::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerGetEventPointsResponse.Points)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 points_total = 2;
  if (has_points_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->points_total(), target);
  }

  // optional bool owned = 4;
  if (has_owned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->owned(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerGetEventPointsResponse.Points)
  return target;
}

int CMsgServerGetEventPointsResponse_Points::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 points_total = 2;
    if (has_points_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points_total());
    }

    // optional bool owned = 4;
    if (has_owned()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerGetEventPointsResponse_Points::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerGetEventPointsResponse_Points* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerGetEventPointsResponse_Points*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerGetEventPointsResponse_Points::MergeFrom(const CMsgServerGetEventPointsResponse_Points& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_points_total()) {
      set_points_total(from.points_total());
    }
    if (from.has_owned()) {
      set_owned(from.owned());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerGetEventPointsResponse_Points::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGetEventPointsResponse_Points::CopyFrom(const CMsgServerGetEventPointsResponse_Points& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGetEventPointsResponse_Points::IsInitialized() const {

  return true;
}

void CMsgServerGetEventPointsResponse_Points::Swap(CMsgServerGetEventPointsResponse_Points* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(points_total_, other->points_total_);
    std::swap(owned_, other->owned_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerGetEventPointsResponse_Points::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerGetEventPointsResponse_Points_descriptor_;
  metadata.reflection = CMsgServerGetEventPointsResponse_Points_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgServerGetEventPointsResponse::kEventIdFieldNumber;
const int CMsgServerGetEventPointsResponse::kPointsFieldNumber;
#endif  // !_MSC_VER

CMsgServerGetEventPointsResponse::CMsgServerGetEventPointsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerGetEventPointsResponse)
}

void CMsgServerGetEventPointsResponse::InitAsDefaultInstance() {
}

CMsgServerGetEventPointsResponse::CMsgServerGetEventPointsResponse(const CMsgServerGetEventPointsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerGetEventPointsResponse)
}

void CMsgServerGetEventPointsResponse::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerGetEventPointsResponse::~CMsgServerGetEventPointsResponse() {
  // @@protoc_insertion_point(destructor:CMsgServerGetEventPointsResponse)
  SharedDtor();
}

void CMsgServerGetEventPointsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerGetEventPointsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerGetEventPointsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerGetEventPointsResponse_descriptor_;
}

const CMsgServerGetEventPointsResponse& CMsgServerGetEventPointsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerGetEventPointsResponse* CMsgServerGetEventPointsResponse::default_instance_ = NULL;

CMsgServerGetEventPointsResponse* CMsgServerGetEventPointsResponse::New() const {
  return new CMsgServerGetEventPointsResponse;
}

void CMsgServerGetEventPointsResponse::Clear() {
  event_id_ = 0u;
  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerGetEventPointsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerGetEventPointsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_points;
        break;
      }

      // repeated .CMsgServerGetEventPointsResponse.Points points = 2;
      case 2: {
        if (tag == 18) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_points;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerGetEventPointsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerGetEventPointsResponse)
  return false;
#undef DO_
}

void CMsgServerGetEventPointsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerGetEventPointsResponse)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // repeated .CMsgServerGetEventPointsResponse.Points points = 2;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->points(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerGetEventPointsResponse)
}

::google::protobuf::uint8* CMsgServerGetEventPointsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerGetEventPointsResponse)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // repeated .CMsgServerGetEventPointsResponse.Points points = 2;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->points(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerGetEventPointsResponse)
  return target;
}

int CMsgServerGetEventPointsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

  }
  // repeated .CMsgServerGetEventPointsResponse.Points points = 2;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerGetEventPointsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerGetEventPointsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerGetEventPointsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerGetEventPointsResponse::MergeFrom(const CMsgServerGetEventPointsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerGetEventPointsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGetEventPointsResponse::CopyFrom(const CMsgServerGetEventPointsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGetEventPointsResponse::IsInitialized() const {

  return true;
}

void CMsgServerGetEventPointsResponse::Swap(CMsgServerGetEventPointsResponse* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    points_.Swap(&other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerGetEventPointsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerGetEventPointsResponse_descriptor_;
  metadata.reflection = CMsgServerGetEventPointsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgServerGrantSurveyPermission_Survey::kAccountIdFieldNumber;
const int CMsgServerGrantSurveyPermission_Survey::kQuestionIdFieldNumber;
const int CMsgServerGrantSurveyPermission_Survey::kExpireTimeFieldNumber;
const int CMsgServerGrantSurveyPermission_Survey::kSurveyKeyFieldNumber;
const int CMsgServerGrantSurveyPermission_Survey::kExtraDataFieldNumber;
const int CMsgServerGrantSurveyPermission_Survey::kExtraData32FieldNumber;
#endif  // !_MSC_VER

CMsgServerGrantSurveyPermission_Survey::CMsgServerGrantSurveyPermission_Survey()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerGrantSurveyPermission.Survey)
}

void CMsgServerGrantSurveyPermission_Survey::InitAsDefaultInstance() {
}

CMsgServerGrantSurveyPermission_Survey::CMsgServerGrantSurveyPermission_Survey(const CMsgServerGrantSurveyPermission_Survey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerGrantSurveyPermission.Survey)
}

void CMsgServerGrantSurveyPermission_Survey::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  question_id_ = 0u;
  expire_time_ = 0u;
  survey_key_ = GOOGLE_ULONGLONG(0);
  extra_data_ = GOOGLE_ULONGLONG(0);
  extra_data_32_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerGrantSurveyPermission_Survey::~CMsgServerGrantSurveyPermission_Survey() {
  // @@protoc_insertion_point(destructor:CMsgServerGrantSurveyPermission.Survey)
  SharedDtor();
}

void CMsgServerGrantSurveyPermission_Survey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerGrantSurveyPermission_Survey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerGrantSurveyPermission_Survey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerGrantSurveyPermission_Survey_descriptor_;
}

const CMsgServerGrantSurveyPermission_Survey& CMsgServerGrantSurveyPermission_Survey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerGrantSurveyPermission_Survey* CMsgServerGrantSurveyPermission_Survey::default_instance_ = NULL;

CMsgServerGrantSurveyPermission_Survey* CMsgServerGrantSurveyPermission_Survey::New() const {
  return new CMsgServerGrantSurveyPermission_Survey;
}

void CMsgServerGrantSurveyPermission_Survey::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgServerGrantSurveyPermission_Survey*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(account_id_, expire_time_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerGrantSurveyPermission_Survey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerGrantSurveyPermission.Survey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_question_id;
        break;
      }

      // optional uint32 question_id = 2;
      case 2: {
        if (tag == 16) {
         parse_question_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &question_id_)));
          set_has_question_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_expire_time;
        break;
      }

      // optional uint32 expire_time = 3;
      case 3: {
        if (tag == 24) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_survey_key;
        break;
      }

      // optional uint64 survey_key = 4;
      case 4: {
        if (tag == 32) {
         parse_survey_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &survey_key_)));
          set_has_survey_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_extra_data;
        break;
      }

      // optional uint64 extra_data = 5;
      case 5: {
        if (tag == 40) {
         parse_extra_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &extra_data_)));
          set_has_extra_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_extra_data_32;
        break;
      }

      // optional uint64 extra_data_32 = 6;
      case 6: {
        if (tag == 48) {
         parse_extra_data_32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &extra_data_32_)));
          set_has_extra_data_32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerGrantSurveyPermission.Survey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerGrantSurveyPermission.Survey)
  return false;
#undef DO_
}

void CMsgServerGrantSurveyPermission_Survey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerGrantSurveyPermission.Survey)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 question_id = 2;
  if (has_question_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->question_id(), output);
  }

  // optional uint32 expire_time = 3;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->expire_time(), output);
  }

  // optional uint64 survey_key = 4;
  if (has_survey_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->survey_key(), output);
  }

  // optional uint64 extra_data = 5;
  if (has_extra_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->extra_data(), output);
  }

  // optional uint64 extra_data_32 = 6;
  if (has_extra_data_32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->extra_data_32(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerGrantSurveyPermission.Survey)
}

::google::protobuf::uint8* CMsgServerGrantSurveyPermission_Survey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerGrantSurveyPermission.Survey)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 question_id = 2;
  if (has_question_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->question_id(), target);
  }

  // optional uint32 expire_time = 3;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->expire_time(), target);
  }

  // optional uint64 survey_key = 4;
  if (has_survey_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->survey_key(), target);
  }

  // optional uint64 extra_data = 5;
  if (has_extra_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->extra_data(), target);
  }

  // optional uint64 extra_data_32 = 6;
  if (has_extra_data_32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->extra_data_32(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerGrantSurveyPermission.Survey)
  return target;
}

int CMsgServerGrantSurveyPermission_Survey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 question_id = 2;
    if (has_question_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->question_id());
    }

    // optional uint32 expire_time = 3;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expire_time());
    }

    // optional uint64 survey_key = 4;
    if (has_survey_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->survey_key());
    }

    // optional uint64 extra_data = 5;
    if (has_extra_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->extra_data());
    }

    // optional uint64 extra_data_32 = 6;
    if (has_extra_data_32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->extra_data_32());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerGrantSurveyPermission_Survey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerGrantSurveyPermission_Survey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerGrantSurveyPermission_Survey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerGrantSurveyPermission_Survey::MergeFrom(const CMsgServerGrantSurveyPermission_Survey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_question_id()) {
      set_question_id(from.question_id());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_survey_key()) {
      set_survey_key(from.survey_key());
    }
    if (from.has_extra_data()) {
      set_extra_data(from.extra_data());
    }
    if (from.has_extra_data_32()) {
      set_extra_data_32(from.extra_data_32());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerGrantSurveyPermission_Survey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGrantSurveyPermission_Survey::CopyFrom(const CMsgServerGrantSurveyPermission_Survey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGrantSurveyPermission_Survey::IsInitialized() const {

  return true;
}

void CMsgServerGrantSurveyPermission_Survey::Swap(CMsgServerGrantSurveyPermission_Survey* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(question_id_, other->question_id_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(survey_key_, other->survey_key_);
    std::swap(extra_data_, other->extra_data_);
    std::swap(extra_data_32_, other->extra_data_32_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerGrantSurveyPermission_Survey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerGrantSurveyPermission_Survey_descriptor_;
  metadata.reflection = CMsgServerGrantSurveyPermission_Survey_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgServerGrantSurveyPermission::kSurveysFieldNumber;
#endif  // !_MSC_VER

CMsgServerGrantSurveyPermission::CMsgServerGrantSurveyPermission()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerGrantSurveyPermission)
}

void CMsgServerGrantSurveyPermission::InitAsDefaultInstance() {
}

CMsgServerGrantSurveyPermission::CMsgServerGrantSurveyPermission(const CMsgServerGrantSurveyPermission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerGrantSurveyPermission)
}

void CMsgServerGrantSurveyPermission::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerGrantSurveyPermission::~CMsgServerGrantSurveyPermission() {
  // @@protoc_insertion_point(destructor:CMsgServerGrantSurveyPermission)
  SharedDtor();
}

void CMsgServerGrantSurveyPermission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerGrantSurveyPermission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerGrantSurveyPermission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerGrantSurveyPermission_descriptor_;
}

const CMsgServerGrantSurveyPermission& CMsgServerGrantSurveyPermission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerGrantSurveyPermission* CMsgServerGrantSurveyPermission::default_instance_ = NULL;

CMsgServerGrantSurveyPermission* CMsgServerGrantSurveyPermission::New() const {
  return new CMsgServerGrantSurveyPermission;
}

void CMsgServerGrantSurveyPermission::Clear() {
  surveys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerGrantSurveyPermission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerGrantSurveyPermission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgServerGrantSurveyPermission.Survey surveys = 1;
      case 1: {
        if (tag == 10) {
         parse_surveys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_surveys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_surveys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerGrantSurveyPermission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerGrantSurveyPermission)
  return false;
#undef DO_
}

void CMsgServerGrantSurveyPermission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerGrantSurveyPermission)
  // repeated .CMsgServerGrantSurveyPermission.Survey surveys = 1;
  for (int i = 0; i < this->surveys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->surveys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerGrantSurveyPermission)
}

::google::protobuf::uint8* CMsgServerGrantSurveyPermission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerGrantSurveyPermission)
  // repeated .CMsgServerGrantSurveyPermission.Survey surveys = 1;
  for (int i = 0; i < this->surveys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->surveys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerGrantSurveyPermission)
  return target;
}

int CMsgServerGrantSurveyPermission::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgServerGrantSurveyPermission.Survey surveys = 1;
  total_size += 1 * this->surveys_size();
  for (int i = 0; i < this->surveys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->surveys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerGrantSurveyPermission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerGrantSurveyPermission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerGrantSurveyPermission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerGrantSurveyPermission::MergeFrom(const CMsgServerGrantSurveyPermission& from) {
  GOOGLE_CHECK_NE(&from, this);
  surveys_.MergeFrom(from.surveys_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerGrantSurveyPermission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGrantSurveyPermission::CopyFrom(const CMsgServerGrantSurveyPermission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGrantSurveyPermission::IsInitialized() const {

  return true;
}

void CMsgServerGrantSurveyPermission::Swap(CMsgServerGrantSurveyPermission* other) {
  if (other != this) {
    surveys_.Swap(&other->surveys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerGrantSurveyPermission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerGrantSurveyPermission_descriptor_;
  metadata.reflection = CMsgServerGrantSurveyPermission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgServerGrantSurveyPermissionResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgServerGrantSurveyPermissionResponse::CMsgServerGrantSurveyPermissionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerGrantSurveyPermissionResponse)
}

void CMsgServerGrantSurveyPermissionResponse::InitAsDefaultInstance() {
}

CMsgServerGrantSurveyPermissionResponse::CMsgServerGrantSurveyPermissionResponse(const CMsgServerGrantSurveyPermissionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerGrantSurveyPermissionResponse)
}

void CMsgServerGrantSurveyPermissionResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerGrantSurveyPermissionResponse::~CMsgServerGrantSurveyPermissionResponse() {
  // @@protoc_insertion_point(destructor:CMsgServerGrantSurveyPermissionResponse)
  SharedDtor();
}

void CMsgServerGrantSurveyPermissionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerGrantSurveyPermissionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerGrantSurveyPermissionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerGrantSurveyPermissionResponse_descriptor_;
}

const CMsgServerGrantSurveyPermissionResponse& CMsgServerGrantSurveyPermissionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerGrantSurveyPermissionResponse* CMsgServerGrantSurveyPermissionResponse::default_instance_ = NULL;

CMsgServerGrantSurveyPermissionResponse* CMsgServerGrantSurveyPermissionResponse::New() const {
  return new CMsgServerGrantSurveyPermissionResponse;
}

void CMsgServerGrantSurveyPermissionResponse::Clear() {
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerGrantSurveyPermissionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerGrantSurveyPermissionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerGrantSurveyPermissionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerGrantSurveyPermissionResponse)
  return false;
#undef DO_
}

void CMsgServerGrantSurveyPermissionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerGrantSurveyPermissionResponse)
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerGrantSurveyPermissionResponse)
}

::google::protobuf::uint8* CMsgServerGrantSurveyPermissionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerGrantSurveyPermissionResponse)
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerGrantSurveyPermissionResponse)
  return target;
}

int CMsgServerGrantSurveyPermissionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerGrantSurveyPermissionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerGrantSurveyPermissionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerGrantSurveyPermissionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerGrantSurveyPermissionResponse::MergeFrom(const CMsgServerGrantSurveyPermissionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerGrantSurveyPermissionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGrantSurveyPermissionResponse::CopyFrom(const CMsgServerGrantSurveyPermissionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGrantSurveyPermissionResponse::IsInitialized() const {

  return true;
}

void CMsgServerGrantSurveyPermissionResponse::Swap(CMsgServerGrantSurveyPermissionResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerGrantSurveyPermissionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerGrantSurveyPermissionResponse_descriptor_;
  metadata.reflection = CMsgServerGrantSurveyPermissionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgServerToGCMatchConnectionStats_Player::kAccountIdFieldNumber;
const int CMsgServerToGCMatchConnectionStats_Player::kIpFieldNumber;
const int CMsgServerToGCMatchConnectionStats_Player::kAvgPingMsFieldNumber;
const int CMsgServerToGCMatchConnectionStats_Player::kPacketLossFieldNumber;
const int CMsgServerToGCMatchConnectionStats_Player::kPingDeviationFieldNumber;
const int CMsgServerToGCMatchConnectionStats_Player::kFullResendsFieldNumber;
#endif  // !_MSC_VER

CMsgServerToGCMatchConnectionStats_Player::CMsgServerToGCMatchConnectionStats_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerToGCMatchConnectionStats.Player)
}

void CMsgServerToGCMatchConnectionStats_Player::InitAsDefaultInstance() {
}

CMsgServerToGCMatchConnectionStats_Player::CMsgServerToGCMatchConnectionStats_Player(const CMsgServerToGCMatchConnectionStats_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchConnectionStats.Player)
}

void CMsgServerToGCMatchConnectionStats_Player::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ip_ = 0u;
  avg_ping_ms_ = 0u;
  packet_loss_ = 0;
  ping_deviation_ = 0;
  full_resends_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerToGCMatchConnectionStats_Player::~CMsgServerToGCMatchConnectionStats_Player() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchConnectionStats.Player)
  SharedDtor();
}

void CMsgServerToGCMatchConnectionStats_Player::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerToGCMatchConnectionStats_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCMatchConnectionStats_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerToGCMatchConnectionStats_Player_descriptor_;
}

const CMsgServerToGCMatchConnectionStats_Player& CMsgServerToGCMatchConnectionStats_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerToGCMatchConnectionStats_Player* CMsgServerToGCMatchConnectionStats_Player::default_instance_ = NULL;

CMsgServerToGCMatchConnectionStats_Player* CMsgServerToGCMatchConnectionStats_Player::New() const {
  return new CMsgServerToGCMatchConnectionStats_Player;
}

void CMsgServerToGCMatchConnectionStats_Player::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgServerToGCMatchConnectionStats_Player*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(account_id_, full_resends_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerToGCMatchConnectionStats_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerToGCMatchConnectionStats.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_ip;
        break;
      }

      // optional fixed32 ip = 2;
      case 2: {
        if (tag == 21) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_avg_ping_ms;
        break;
      }

      // optional uint32 avg_ping_ms = 3;
      case 3: {
        if (tag == 24) {
         parse_avg_ping_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_ping_ms_)));
          set_has_avg_ping_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_packet_loss;
        break;
      }

      // optional float packet_loss = 5;
      case 5: {
        if (tag == 45) {
         parse_packet_loss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &packet_loss_)));
          set_has_packet_loss();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_ping_deviation;
        break;
      }

      // optional float ping_deviation = 6;
      case 6: {
        if (tag == 53) {
         parse_ping_deviation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ping_deviation_)));
          set_has_ping_deviation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_full_resends;
        break;
      }

      // optional uint32 full_resends = 7;
      case 7: {
        if (tag == 56) {
         parse_full_resends:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &full_resends_)));
          set_has_full_resends();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerToGCMatchConnectionStats.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerToGCMatchConnectionStats.Player)
  return false;
#undef DO_
}

void CMsgServerToGCMatchConnectionStats_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerToGCMatchConnectionStats.Player)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional fixed32 ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->ip(), output);
  }

  // optional uint32 avg_ping_ms = 3;
  if (has_avg_ping_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->avg_ping_ms(), output);
  }

  // optional float packet_loss = 5;
  if (has_packet_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->packet_loss(), output);
  }

  // optional float ping_deviation = 6;
  if (has_ping_deviation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->ping_deviation(), output);
  }

  // optional uint32 full_resends = 7;
  if (has_full_resends()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->full_resends(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerToGCMatchConnectionStats.Player)
}

::google::protobuf::uint8* CMsgServerToGCMatchConnectionStats_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchConnectionStats.Player)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional fixed32 ip = 2;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->ip(), target);
  }

  // optional uint32 avg_ping_ms = 3;
  if (has_avg_ping_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->avg_ping_ms(), target);
  }

  // optional float packet_loss = 5;
  if (has_packet_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->packet_loss(), target);
  }

  // optional float ping_deviation = 6;
  if (has_ping_deviation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->ping_deviation(), target);
  }

  // optional uint32 full_resends = 7;
  if (has_full_resends()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->full_resends(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchConnectionStats.Player)
  return target;
}

int CMsgServerToGCMatchConnectionStats_Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional fixed32 ip = 2;
    if (has_ip()) {
      total_size += 1 + 4;
    }

    // optional uint32 avg_ping_ms = 3;
    if (has_avg_ping_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_ping_ms());
    }

    // optional float packet_loss = 5;
    if (has_packet_loss()) {
      total_size += 1 + 4;
    }

    // optional float ping_deviation = 6;
    if (has_ping_deviation()) {
      total_size += 1 + 4;
    }

    // optional uint32 full_resends = 7;
    if (has_full_resends()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->full_resends());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCMatchConnectionStats_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerToGCMatchConnectionStats_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerToGCMatchConnectionStats_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchConnectionStats_Player::MergeFrom(const CMsgServerToGCMatchConnectionStats_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_avg_ping_ms()) {
      set_avg_ping_ms(from.avg_ping_ms());
    }
    if (from.has_packet_loss()) {
      set_packet_loss(from.packet_loss());
    }
    if (from.has_ping_deviation()) {
      set_ping_deviation(from.ping_deviation());
    }
    if (from.has_full_resends()) {
      set_full_resends(from.full_resends());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerToGCMatchConnectionStats_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchConnectionStats_Player::CopyFrom(const CMsgServerToGCMatchConnectionStats_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchConnectionStats_Player::IsInitialized() const {

  return true;
}

void CMsgServerToGCMatchConnectionStats_Player::Swap(CMsgServerToGCMatchConnectionStats_Player* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(ip_, other->ip_);
    std::swap(avg_ping_ms_, other->avg_ping_ms_);
    std::swap(packet_loss_, other->packet_loss_);
    std::swap(ping_deviation_, other->ping_deviation_);
    std::swap(full_resends_, other->full_resends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerToGCMatchConnectionStats_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerToGCMatchConnectionStats_Player_descriptor_;
  metadata.reflection = CMsgServerToGCMatchConnectionStats_Player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgServerToGCMatchConnectionStats::kMatchIdFieldNumber;
const int CMsgServerToGCMatchConnectionStats::kRegionIdFieldNumber;
const int CMsgServerToGCMatchConnectionStats::kLeagueIdFieldNumber;
const int CMsgServerToGCMatchConnectionStats::kPlayersFieldNumber;
const int CMsgServerToGCMatchConnectionStats::kClusterIdFieldNumber;
#endif  // !_MSC_VER

CMsgServerToGCMatchConnectionStats::CMsgServerToGCMatchConnectionStats()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerToGCMatchConnectionStats)
}

void CMsgServerToGCMatchConnectionStats::InitAsDefaultInstance() {
}

CMsgServerToGCMatchConnectionStats::CMsgServerToGCMatchConnectionStats(const CMsgServerToGCMatchConnectionStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchConnectionStats)
}

void CMsgServerToGCMatchConnectionStats::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  region_id_ = 0u;
  league_id_ = 0u;
  cluster_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerToGCMatchConnectionStats::~CMsgServerToGCMatchConnectionStats() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchConnectionStats)
  SharedDtor();
}

void CMsgServerToGCMatchConnectionStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerToGCMatchConnectionStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCMatchConnectionStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerToGCMatchConnectionStats_descriptor_;
}

const CMsgServerToGCMatchConnectionStats& CMsgServerToGCMatchConnectionStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerToGCMatchConnectionStats* CMsgServerToGCMatchConnectionStats::default_instance_ = NULL;

CMsgServerToGCMatchConnectionStats* CMsgServerToGCMatchConnectionStats::New() const {
  return new CMsgServerToGCMatchConnectionStats;
}

void CMsgServerToGCMatchConnectionStats::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgServerToGCMatchConnectionStats*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 23) {
    ZR_(match_id_, league_id_);
    cluster_id_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerToGCMatchConnectionStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerToGCMatchConnectionStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_region_id;
        break;
      }

      // optional uint32 region_id = 2;
      case 2: {
        if (tag == 16) {
         parse_region_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_league_id;
        break;
      }

      // optional uint32 league_id = 3;
      case 3: {
        if (tag == 24) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_players;
        break;
      }

      // repeated .CMsgServerToGCMatchConnectionStats.Player players = 4;
      case 4: {
        if (tag == 34) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_players;
        if (input->ExpectTag(40)) goto parse_cluster_id;
        break;
      }

      // optional uint32 cluster_id = 5;
      case 5: {
        if (tag == 40) {
         parse_cluster_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cluster_id_)));
          set_has_cluster_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerToGCMatchConnectionStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerToGCMatchConnectionStats)
  return false;
#undef DO_
}

void CMsgServerToGCMatchConnectionStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerToGCMatchConnectionStats)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 region_id = 2;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->region_id(), output);
  }

  // optional uint32 league_id = 3;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->league_id(), output);
  }

  // repeated .CMsgServerToGCMatchConnectionStats.Player players = 4;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->players(i), output);
  }

  // optional uint32 cluster_id = 5;
  if (has_cluster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cluster_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerToGCMatchConnectionStats)
}

::google::protobuf::uint8* CMsgServerToGCMatchConnectionStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchConnectionStats)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 region_id = 2;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->region_id(), target);
  }

  // optional uint32 league_id = 3;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->league_id(), target);
  }

  // repeated .CMsgServerToGCMatchConnectionStats.Player players = 4;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->players(i), target);
  }

  // optional uint32 cluster_id = 5;
  if (has_cluster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cluster_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchConnectionStats)
  return target;
}

int CMsgServerToGCMatchConnectionStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 region_id = 2;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_id());
    }

    // optional uint32 league_id = 3;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 cluster_id = 5;
    if (has_cluster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cluster_id());
    }

  }
  // repeated .CMsgServerToGCMatchConnectionStats.Player players = 4;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCMatchConnectionStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerToGCMatchConnectionStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerToGCMatchConnectionStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchConnectionStats::MergeFrom(const CMsgServerToGCMatchConnectionStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_cluster_id()) {
      set_cluster_id(from.cluster_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerToGCMatchConnectionStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchConnectionStats::CopyFrom(const CMsgServerToGCMatchConnectionStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchConnectionStats::IsInitialized() const {

  return true;
}

void CMsgServerToGCMatchConnectionStats::Swap(CMsgServerToGCMatchConnectionStats* other) {
  if (other != this) {
    std::swap(match_id_, other->match_id_);
    std::swap(region_id_, other->region_id_);
    std::swap(league_id_, other->league_id_);
    players_.Swap(&other->players_);
    std::swap(cluster_id_, other->cluster_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerToGCMatchConnectionStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerToGCMatchConnectionStats_descriptor_;
  metadata.reflection = CMsgServerToGCMatchConnectionStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgServerGCUpdateSpectatorCount::kSpectatorCountFieldNumber;
#endif  // !_MSC_VER

CMsgServerGCUpdateSpectatorCount::CMsgServerGCUpdateSpectatorCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerGCUpdateSpectatorCount)
}

void CMsgServerGCUpdateSpectatorCount::InitAsDefaultInstance() {
}

CMsgServerGCUpdateSpectatorCount::CMsgServerGCUpdateSpectatorCount(const CMsgServerGCUpdateSpectatorCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerGCUpdateSpectatorCount)
}

void CMsgServerGCUpdateSpectatorCount::SharedCtor() {
  _cached_size_ = 0;
  spectator_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerGCUpdateSpectatorCount::~CMsgServerGCUpdateSpectatorCount() {
  // @@protoc_insertion_point(destructor:CMsgServerGCUpdateSpectatorCount)
  SharedDtor();
}

void CMsgServerGCUpdateSpectatorCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerGCUpdateSpectatorCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerGCUpdateSpectatorCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerGCUpdateSpectatorCount_descriptor_;
}

const CMsgServerGCUpdateSpectatorCount& CMsgServerGCUpdateSpectatorCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerGCUpdateSpectatorCount* CMsgServerGCUpdateSpectatorCount::default_instance_ = NULL;

CMsgServerGCUpdateSpectatorCount* CMsgServerGCUpdateSpectatorCount::New() const {
  return new CMsgServerGCUpdateSpectatorCount;
}

void CMsgServerGCUpdateSpectatorCount::Clear() {
  spectator_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerGCUpdateSpectatorCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerGCUpdateSpectatorCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 spectator_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spectator_count_)));
          set_has_spectator_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerGCUpdateSpectatorCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerGCUpdateSpectatorCount)
  return false;
#undef DO_
}

void CMsgServerGCUpdateSpectatorCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerGCUpdateSpectatorCount)
  // optional uint32 spectator_count = 1;
  if (has_spectator_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->spectator_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerGCUpdateSpectatorCount)
}

::google::protobuf::uint8* CMsgServerGCUpdateSpectatorCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerGCUpdateSpectatorCount)
  // optional uint32 spectator_count = 1;
  if (has_spectator_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->spectator_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerGCUpdateSpectatorCount)
  return target;
}

int CMsgServerGCUpdateSpectatorCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 spectator_count = 1;
    if (has_spectator_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spectator_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerGCUpdateSpectatorCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerGCUpdateSpectatorCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerGCUpdateSpectatorCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerGCUpdateSpectatorCount::MergeFrom(const CMsgServerGCUpdateSpectatorCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spectator_count()) {
      set_spectator_count(from.spectator_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerGCUpdateSpectatorCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGCUpdateSpectatorCount::CopyFrom(const CMsgServerGCUpdateSpectatorCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGCUpdateSpectatorCount::IsInitialized() const {

  return true;
}

void CMsgServerGCUpdateSpectatorCount::Swap(CMsgServerGCUpdateSpectatorCount* other) {
  if (other != this) {
    std::swap(spectator_count_, other->spectator_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerGCUpdateSpectatorCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerGCUpdateSpectatorCount_descriptor_;
  metadata.reflection = CMsgServerGCUpdateSpectatorCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSerializedCombatLog_Dictionary_DictString::kIdFieldNumber;
const int CSerializedCombatLog_Dictionary_DictString::kValueFieldNumber;
#endif  // !_MSC_VER

CSerializedCombatLog_Dictionary_DictString::CSerializedCombatLog_Dictionary_DictString()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSerializedCombatLog.Dictionary.DictString)
}

void CSerializedCombatLog_Dictionary_DictString::InitAsDefaultInstance() {
}

CSerializedCombatLog_Dictionary_DictString::CSerializedCombatLog_Dictionary_DictString(const CSerializedCombatLog_Dictionary_DictString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSerializedCombatLog.Dictionary.DictString)
}

void CSerializedCombatLog_Dictionary_DictString::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSerializedCombatLog_Dictionary_DictString::~CSerializedCombatLog_Dictionary_DictString() {
  // @@protoc_insertion_point(destructor:CSerializedCombatLog.Dictionary.DictString)
  SharedDtor();
}

void CSerializedCombatLog_Dictionary_DictString::SharedDtor() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CSerializedCombatLog_Dictionary_DictString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSerializedCombatLog_Dictionary_DictString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSerializedCombatLog_Dictionary_DictString_descriptor_;
}

const CSerializedCombatLog_Dictionary_DictString& CSerializedCombatLog_Dictionary_DictString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CSerializedCombatLog_Dictionary_DictString* CSerializedCombatLog_Dictionary_DictString::default_instance_ = NULL;

CSerializedCombatLog_Dictionary_DictString* CSerializedCombatLog_Dictionary_DictString::New() const {
  return new CSerializedCombatLog_Dictionary_DictString;
}

void CSerializedCombatLog_Dictionary_DictString::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0u;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSerializedCombatLog_Dictionary_DictString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSerializedCombatLog.Dictionary.DictString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSerializedCombatLog.Dictionary.DictString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSerializedCombatLog.Dictionary.DictString)
  return false;
#undef DO_
}

void CSerializedCombatLog_Dictionary_DictString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSerializedCombatLog.Dictionary.DictString)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSerializedCombatLog.Dictionary.DictString)
}

::google::protobuf::uint8* CSerializedCombatLog_Dictionary_DictString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSerializedCombatLog.Dictionary.DictString)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSerializedCombatLog.Dictionary.DictString)
  return target;
}

int CSerializedCombatLog_Dictionary_DictString::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSerializedCombatLog_Dictionary_DictString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSerializedCombatLog_Dictionary_DictString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSerializedCombatLog_Dictionary_DictString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSerializedCombatLog_Dictionary_DictString::MergeFrom(const CSerializedCombatLog_Dictionary_DictString& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSerializedCombatLog_Dictionary_DictString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSerializedCombatLog_Dictionary_DictString::CopyFrom(const CSerializedCombatLog_Dictionary_DictString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSerializedCombatLog_Dictionary_DictString::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSerializedCombatLog_Dictionary_DictString::Swap(CSerializedCombatLog_Dictionary_DictString* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSerializedCombatLog_Dictionary_DictString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSerializedCombatLog_Dictionary_DictString_descriptor_;
  metadata.reflection = CSerializedCombatLog_Dictionary_DictString_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSerializedCombatLog_Dictionary::kStringsFieldNumber;
#endif  // !_MSC_VER

CSerializedCombatLog_Dictionary::CSerializedCombatLog_Dictionary()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSerializedCombatLog.Dictionary)
}

void CSerializedCombatLog_Dictionary::InitAsDefaultInstance() {
}

CSerializedCombatLog_Dictionary::CSerializedCombatLog_Dictionary(const CSerializedCombatLog_Dictionary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSerializedCombatLog.Dictionary)
}

void CSerializedCombatLog_Dictionary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSerializedCombatLog_Dictionary::~CSerializedCombatLog_Dictionary() {
  // @@protoc_insertion_point(destructor:CSerializedCombatLog.Dictionary)
  SharedDtor();
}

void CSerializedCombatLog_Dictionary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSerializedCombatLog_Dictionary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSerializedCombatLog_Dictionary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSerializedCombatLog_Dictionary_descriptor_;
}

const CSerializedCombatLog_Dictionary& CSerializedCombatLog_Dictionary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CSerializedCombatLog_Dictionary* CSerializedCombatLog_Dictionary::default_instance_ = NULL;

CSerializedCombatLog_Dictionary* CSerializedCombatLog_Dictionary::New() const {
  return new CSerializedCombatLog_Dictionary;
}

void CSerializedCombatLog_Dictionary::Clear() {
  strings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSerializedCombatLog_Dictionary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSerializedCombatLog.Dictionary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSerializedCombatLog.Dictionary.DictString strings = 1;
      case 1: {
        if (tag == 10) {
         parse_strings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_strings;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSerializedCombatLog.Dictionary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSerializedCombatLog.Dictionary)
  return false;
#undef DO_
}

void CSerializedCombatLog_Dictionary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSerializedCombatLog.Dictionary)
  // repeated .CSerializedCombatLog.Dictionary.DictString strings = 1;
  for (int i = 0; i < this->strings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->strings(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSerializedCombatLog.Dictionary)
}

::google::protobuf::uint8* CSerializedCombatLog_Dictionary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSerializedCombatLog.Dictionary)
  // repeated .CSerializedCombatLog.Dictionary.DictString strings = 1;
  for (int i = 0; i < this->strings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->strings(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSerializedCombatLog.Dictionary)
  return target;
}

int CSerializedCombatLog_Dictionary::ByteSize() const {
  int total_size = 0;

  // repeated .CSerializedCombatLog.Dictionary.DictString strings = 1;
  total_size += 1 * this->strings_size();
  for (int i = 0; i < this->strings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSerializedCombatLog_Dictionary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSerializedCombatLog_Dictionary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSerializedCombatLog_Dictionary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSerializedCombatLog_Dictionary::MergeFrom(const CSerializedCombatLog_Dictionary& from) {
  GOOGLE_CHECK_NE(&from, this);
  strings_.MergeFrom(from.strings_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSerializedCombatLog_Dictionary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSerializedCombatLog_Dictionary::CopyFrom(const CSerializedCombatLog_Dictionary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSerializedCombatLog_Dictionary::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->strings())) return false;
  return true;
}

void CSerializedCombatLog_Dictionary::Swap(CSerializedCombatLog_Dictionary* other) {
  if (other != this) {
    strings_.Swap(&other->strings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSerializedCombatLog_Dictionary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSerializedCombatLog_Dictionary_descriptor_;
  metadata.reflection = CSerializedCombatLog_Dictionary_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSerializedCombatLog::kVersionFieldNumber;
const int CSerializedCombatLog::kDictionaryFieldNumber;
const int CSerializedCombatLog::kEntriesFieldNumber;
#endif  // !_MSC_VER

CSerializedCombatLog::CSerializedCombatLog()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSerializedCombatLog)
}

void CSerializedCombatLog::InitAsDefaultInstance() {
  dictionary_ = const_cast< ::CSerializedCombatLog_Dictionary*>(&::CSerializedCombatLog_Dictionary::default_instance());
}

CSerializedCombatLog::CSerializedCombatLog(const CSerializedCombatLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSerializedCombatLog)
}

void CSerializedCombatLog::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  dictionary_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSerializedCombatLog::~CSerializedCombatLog() {
  // @@protoc_insertion_point(destructor:CSerializedCombatLog)
  SharedDtor();
}

void CSerializedCombatLog::SharedDtor() {
  if (this != default_instance_) {
    delete dictionary_;
  }
}

void CSerializedCombatLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSerializedCombatLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSerializedCombatLog_descriptor_;
}

const CSerializedCombatLog& CSerializedCombatLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CSerializedCombatLog* CSerializedCombatLog::default_instance_ = NULL;

CSerializedCombatLog* CSerializedCombatLog::New() const {
  return new CSerializedCombatLog;
}

void CSerializedCombatLog::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    version_ = 0u;
    if (has_dictionary()) {
      if (dictionary_ != NULL) dictionary_->::CSerializedCombatLog_Dictionary::Clear();
    }
  }
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSerializedCombatLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSerializedCombatLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dictionary;
        break;
      }

      // optional .CSerializedCombatLog.Dictionary dictionary = 2;
      case 2: {
        if (tag == 18) {
         parse_dictionary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dictionary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_entries;
        break;
      }

      // repeated .CMsgDOTACombatLogEntry entries = 3;
      case 3: {
        if (tag == 26) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_entries;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSerializedCombatLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSerializedCombatLog)
  return false;
#undef DO_
}

void CSerializedCombatLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSerializedCombatLog)
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional .CSerializedCombatLog.Dictionary dictionary = 2;
  if (has_dictionary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dictionary(), output);
  }

  // repeated .CMsgDOTACombatLogEntry entries = 3;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSerializedCombatLog)
}

::google::protobuf::uint8* CSerializedCombatLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSerializedCombatLog)
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional .CSerializedCombatLog.Dictionary dictionary = 2;
  if (has_dictionary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dictionary(), target);
  }

  // repeated .CMsgDOTACombatLogEntry entries = 3;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSerializedCombatLog)
  return target;
}

int CSerializedCombatLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional .CSerializedCombatLog.Dictionary dictionary = 2;
    if (has_dictionary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dictionary());
    }

  }
  // repeated .CMsgDOTACombatLogEntry entries = 3;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSerializedCombatLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSerializedCombatLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSerializedCombatLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSerializedCombatLog::MergeFrom(const CSerializedCombatLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_dictionary()) {
      mutable_dictionary()->::CSerializedCombatLog_Dictionary::MergeFrom(from.dictionary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSerializedCombatLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSerializedCombatLog::CopyFrom(const CSerializedCombatLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSerializedCombatLog::IsInitialized() const {

  if (has_dictionary()) {
    if (!this->dictionary().IsInitialized()) return false;
  }
  return true;
}

void CSerializedCombatLog::Swap(CSerializedCombatLog* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(dictionary_, other->dictionary_);
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSerializedCombatLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSerializedCombatLog_descriptor_;
  metadata.reflection = CSerializedCombatLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgServerToGCGetAdditionalEquips::kAccountIdsFieldNumber;
#endif  // !_MSC_VER

CMsgServerToGCGetAdditionalEquips::CMsgServerToGCGetAdditionalEquips()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerToGCGetAdditionalEquips)
}

void CMsgServerToGCGetAdditionalEquips::InitAsDefaultInstance() {
}

CMsgServerToGCGetAdditionalEquips::CMsgServerToGCGetAdditionalEquips(const CMsgServerToGCGetAdditionalEquips& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCGetAdditionalEquips)
}

void CMsgServerToGCGetAdditionalEquips::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerToGCGetAdditionalEquips::~CMsgServerToGCGetAdditionalEquips() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCGetAdditionalEquips)
  SharedDtor();
}

void CMsgServerToGCGetAdditionalEquips::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerToGCGetAdditionalEquips::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCGetAdditionalEquips::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerToGCGetAdditionalEquips_descriptor_;
}

const CMsgServerToGCGetAdditionalEquips& CMsgServerToGCGetAdditionalEquips::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerToGCGetAdditionalEquips* CMsgServerToGCGetAdditionalEquips::default_instance_ = NULL;

CMsgServerToGCGetAdditionalEquips* CMsgServerToGCGetAdditionalEquips::New() const {
  return new CMsgServerToGCGetAdditionalEquips;
}

void CMsgServerToGCGetAdditionalEquips::Clear() {
  account_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerToGCGetAdditionalEquips::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerToGCGetAdditionalEquips)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (tag == 8) {
         parse_account_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_account_ids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_account_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerToGCGetAdditionalEquips)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerToGCGetAdditionalEquips)
  return false;
#undef DO_
}

void CMsgServerToGCGetAdditionalEquips::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerToGCGetAdditionalEquips)
  // repeated uint32 account_ids = 1;
  for (int i = 0; i < this->account_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->account_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerToGCGetAdditionalEquips)
}

::google::protobuf::uint8* CMsgServerToGCGetAdditionalEquips::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCGetAdditionalEquips)
  // repeated uint32 account_ids = 1;
  for (int i = 0; i < this->account_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->account_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCGetAdditionalEquips)
  return target;
}

int CMsgServerToGCGetAdditionalEquips::ByteSize() const {
  int total_size = 0;

  // repeated uint32 account_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->account_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->account_ids(i));
    }
    total_size += 1 * this->account_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCGetAdditionalEquips::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerToGCGetAdditionalEquips* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerToGCGetAdditionalEquips*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetAdditionalEquips::MergeFrom(const CMsgServerToGCGetAdditionalEquips& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_ids_.MergeFrom(from.account_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerToGCGetAdditionalEquips::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetAdditionalEquips::CopyFrom(const CMsgServerToGCGetAdditionalEquips& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetAdditionalEquips::IsInitialized() const {

  return true;
}

void CMsgServerToGCGetAdditionalEquips::Swap(CMsgServerToGCGetAdditionalEquips* other) {
  if (other != this) {
    account_ids_.Swap(&other->account_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerToGCGetAdditionalEquips::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerToGCGetAdditionalEquips_descriptor_;
  metadata.reflection = CMsgServerToGCGetAdditionalEquips_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::kAccountIdFieldNumber;
const int CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::kEquipsFieldNumber;
#endif  // !_MSC_VER

CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::InitAsDefaultInstance() {
}

CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips(const CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::~CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  SharedDtor();
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_descriptor_;
}

const CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips& CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips* CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::default_instance_ = NULL;

CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips* CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::New() const {
  return new CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips;
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::Clear() {
  account_id_ = 0u;
  equips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equips;
        break;
      }

      // repeated .CAdditionalEquipSlot equips = 2;
      case 2: {
        if (tag == 18) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equips;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  return false;
#undef DO_
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated .CAdditionalEquipSlot equips = 2;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equips(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
}

::google::protobuf::uint8* CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated .CAdditionalEquipSlot equips = 2;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equips(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  return target;
}

int CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  // repeated .CAdditionalEquipSlot equips = 2;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::MergeFrom(const CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::CopyFrom(const CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::IsInitialized() const {

  return true;
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::Swap(CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    equips_.Swap(&other->equips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_descriptor_;
  metadata.reflection = CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgServerToGCGetAdditionalEquipsResponse::kEquipsFieldNumber;
#endif  // !_MSC_VER

CMsgServerToGCGetAdditionalEquipsResponse::CMsgServerToGCGetAdditionalEquipsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerToGCGetAdditionalEquipsResponse)
}

void CMsgServerToGCGetAdditionalEquipsResponse::InitAsDefaultInstance() {
}

CMsgServerToGCGetAdditionalEquipsResponse::CMsgServerToGCGetAdditionalEquipsResponse(const CMsgServerToGCGetAdditionalEquipsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCGetAdditionalEquipsResponse)
}

void CMsgServerToGCGetAdditionalEquipsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerToGCGetAdditionalEquipsResponse::~CMsgServerToGCGetAdditionalEquipsResponse() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCGetAdditionalEquipsResponse)
  SharedDtor();
}

void CMsgServerToGCGetAdditionalEquipsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerToGCGetAdditionalEquipsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCGetAdditionalEquipsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerToGCGetAdditionalEquipsResponse_descriptor_;
}

const CMsgServerToGCGetAdditionalEquipsResponse& CMsgServerToGCGetAdditionalEquipsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerToGCGetAdditionalEquipsResponse* CMsgServerToGCGetAdditionalEquipsResponse::default_instance_ = NULL;

CMsgServerToGCGetAdditionalEquipsResponse* CMsgServerToGCGetAdditionalEquipsResponse::New() const {
  return new CMsgServerToGCGetAdditionalEquipsResponse;
}

void CMsgServerToGCGetAdditionalEquipsResponse::Clear() {
  equips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerToGCGetAdditionalEquipsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerToGCGetAdditionalEquipsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips equips = 1;
      case 1: {
        if (tag == 10) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_equips;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerToGCGetAdditionalEquipsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerToGCGetAdditionalEquipsResponse)
  return false;
#undef DO_
}

void CMsgServerToGCGetAdditionalEquipsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerToGCGetAdditionalEquipsResponse)
  // repeated .CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips equips = 1;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerToGCGetAdditionalEquipsResponse)
}

::google::protobuf::uint8* CMsgServerToGCGetAdditionalEquipsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCGetAdditionalEquipsResponse)
  // repeated .CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips equips = 1;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equips(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCGetAdditionalEquipsResponse)
  return target;
}

int CMsgServerToGCGetAdditionalEquipsResponse::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips equips = 1;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCGetAdditionalEquipsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerToGCGetAdditionalEquipsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerToGCGetAdditionalEquipsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetAdditionalEquipsResponse::MergeFrom(const CMsgServerToGCGetAdditionalEquipsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerToGCGetAdditionalEquipsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetAdditionalEquipsResponse::CopyFrom(const CMsgServerToGCGetAdditionalEquipsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetAdditionalEquipsResponse::IsInitialized() const {

  return true;
}

void CMsgServerToGCGetAdditionalEquipsResponse::Swap(CMsgServerToGCGetAdditionalEquipsResponse* other) {
  if (other != this) {
    equips_.Swap(&other->equips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerToGCGetAdditionalEquipsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerToGCGetAdditionalEquipsResponse_descriptor_;
  metadata.reflection = CMsgServerToGCGetAdditionalEquipsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgServerToGCGetProfileCard::kAccountIdsFieldNumber;
#endif  // !_MSC_VER

CMsgServerToGCGetProfileCard::CMsgServerToGCGetProfileCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerToGCGetProfileCard)
}

void CMsgServerToGCGetProfileCard::InitAsDefaultInstance() {
}

CMsgServerToGCGetProfileCard::CMsgServerToGCGetProfileCard(const CMsgServerToGCGetProfileCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCGetProfileCard)
}

void CMsgServerToGCGetProfileCard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerToGCGetProfileCard::~CMsgServerToGCGetProfileCard() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCGetProfileCard)
  SharedDtor();
}

void CMsgServerToGCGetProfileCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerToGCGetProfileCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCGetProfileCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerToGCGetProfileCard_descriptor_;
}

const CMsgServerToGCGetProfileCard& CMsgServerToGCGetProfileCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerToGCGetProfileCard* CMsgServerToGCGetProfileCard::default_instance_ = NULL;

CMsgServerToGCGetProfileCard* CMsgServerToGCGetProfileCard::New() const {
  return new CMsgServerToGCGetProfileCard;
}

void CMsgServerToGCGetProfileCard::Clear() {
  account_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerToGCGetProfileCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerToGCGetProfileCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (tag == 8) {
         parse_account_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_account_ids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_account_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerToGCGetProfileCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerToGCGetProfileCard)
  return false;
#undef DO_
}

void CMsgServerToGCGetProfileCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerToGCGetProfileCard)
  // repeated uint32 account_ids = 1;
  for (int i = 0; i < this->account_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->account_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerToGCGetProfileCard)
}

::google::protobuf::uint8* CMsgServerToGCGetProfileCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCGetProfileCard)
  // repeated uint32 account_ids = 1;
  for (int i = 0; i < this->account_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->account_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCGetProfileCard)
  return target;
}

int CMsgServerToGCGetProfileCard::ByteSize() const {
  int total_size = 0;

  // repeated uint32 account_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->account_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->account_ids(i));
    }
    total_size += 1 * this->account_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCGetProfileCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerToGCGetProfileCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerToGCGetProfileCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetProfileCard::MergeFrom(const CMsgServerToGCGetProfileCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_ids_.MergeFrom(from.account_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerToGCGetProfileCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetProfileCard::CopyFrom(const CMsgServerToGCGetProfileCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetProfileCard::IsInitialized() const {

  return true;
}

void CMsgServerToGCGetProfileCard::Swap(CMsgServerToGCGetProfileCard* other) {
  if (other != this) {
    account_ids_.Swap(&other->account_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerToGCGetProfileCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerToGCGetProfileCard_descriptor_;
  metadata.reflection = CMsgServerToGCGetProfileCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgServerToGCGetProfileCardResponse::kCardsFieldNumber;
#endif  // !_MSC_VER

CMsgServerToGCGetProfileCardResponse::CMsgServerToGCGetProfileCardResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerToGCGetProfileCardResponse)
}

void CMsgServerToGCGetProfileCardResponse::InitAsDefaultInstance() {
}

CMsgServerToGCGetProfileCardResponse::CMsgServerToGCGetProfileCardResponse(const CMsgServerToGCGetProfileCardResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCGetProfileCardResponse)
}

void CMsgServerToGCGetProfileCardResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerToGCGetProfileCardResponse::~CMsgServerToGCGetProfileCardResponse() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCGetProfileCardResponse)
  SharedDtor();
}

void CMsgServerToGCGetProfileCardResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerToGCGetProfileCardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCGetProfileCardResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerToGCGetProfileCardResponse_descriptor_;
}

const CMsgServerToGCGetProfileCardResponse& CMsgServerToGCGetProfileCardResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerToGCGetProfileCardResponse* CMsgServerToGCGetProfileCardResponse::default_instance_ = NULL;

CMsgServerToGCGetProfileCardResponse* CMsgServerToGCGetProfileCardResponse::New() const {
  return new CMsgServerToGCGetProfileCardResponse;
}

void CMsgServerToGCGetProfileCardResponse::Clear() {
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerToGCGetProfileCardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerToGCGetProfileCardResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgDOTAProfileCard cards = 1;
      case 1: {
        if (tag == 10) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerToGCGetProfileCardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerToGCGetProfileCardResponse)
  return false;
#undef DO_
}

void CMsgServerToGCGetProfileCardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerToGCGetProfileCardResponse)
  // repeated .CMsgDOTAProfileCard cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerToGCGetProfileCardResponse)
}

::google::protobuf::uint8* CMsgServerToGCGetProfileCardResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCGetProfileCardResponse)
  // repeated .CMsgDOTAProfileCard cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCGetProfileCardResponse)
  return target;
}

int CMsgServerToGCGetProfileCardResponse::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgDOTAProfileCard cards = 1;
  total_size += 1 * this->cards_size();
  for (int i = 0; i < this->cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCGetProfileCardResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerToGCGetProfileCardResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerToGCGetProfileCardResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetProfileCardResponse::MergeFrom(const CMsgServerToGCGetProfileCardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerToGCGetProfileCardResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetProfileCardResponse::CopyFrom(const CMsgServerToGCGetProfileCardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetProfileCardResponse::IsInitialized() const {

  return true;
}

void CMsgServerToGCGetProfileCardResponse::Swap(CMsgServerToGCGetProfileCardResponse* other) {
  if (other != this) {
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerToGCGetProfileCardResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerToGCGetProfileCardResponse_descriptor_;
  metadata.reflection = CMsgServerToGCGetProfileCardResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgServerToGCVictoryPredictions_Record::kAccountIdFieldNumber;
const int CMsgServerToGCVictoryPredictions_Record::kItemIdFieldNumber;
const int CMsgServerToGCVictoryPredictions_Record::kItemIdsFieldNumber;
#endif  // !_MSC_VER

CMsgServerToGCVictoryPredictions_Record::CMsgServerToGCVictoryPredictions_Record()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerToGCVictoryPredictions.Record)
}

void CMsgServerToGCVictoryPredictions_Record::InitAsDefaultInstance() {
}

CMsgServerToGCVictoryPredictions_Record::CMsgServerToGCVictoryPredictions_Record(const CMsgServerToGCVictoryPredictions_Record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCVictoryPredictions.Record)
}

void CMsgServerToGCVictoryPredictions_Record::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerToGCVictoryPredictions_Record::~CMsgServerToGCVictoryPredictions_Record() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCVictoryPredictions.Record)
  SharedDtor();
}

void CMsgServerToGCVictoryPredictions_Record::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerToGCVictoryPredictions_Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCVictoryPredictions_Record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerToGCVictoryPredictions_Record_descriptor_;
}

const CMsgServerToGCVictoryPredictions_Record& CMsgServerToGCVictoryPredictions_Record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerToGCVictoryPredictions_Record* CMsgServerToGCVictoryPredictions_Record::default_instance_ = NULL;

CMsgServerToGCVictoryPredictions_Record* CMsgServerToGCVictoryPredictions_Record::New() const {
  return new CMsgServerToGCVictoryPredictions_Record;
}

void CMsgServerToGCVictoryPredictions_Record::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    account_id_ = 0u;
    item_id_ = GOOGLE_ULONGLONG(0);
  }
  item_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerToGCVictoryPredictions_Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerToGCVictoryPredictions.Record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional uint64 item_id = 2;
      case 2: {
        if (tag == 16) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_item_ids;
        break;
      }

      // repeated uint64 item_ids = 5;
      case 5: {
        if (tag == 40) {
         parse_item_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_item_ids())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_item_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_item_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerToGCVictoryPredictions.Record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerToGCVictoryPredictions.Record)
  return false;
#undef DO_
}

void CMsgServerToGCVictoryPredictions_Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerToGCVictoryPredictions.Record)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }

  // repeated uint64 item_ids = 5;
  for (int i = 0; i < this->item_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->item_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerToGCVictoryPredictions.Record)
}

::google::protobuf::uint8* CMsgServerToGCVictoryPredictions_Record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCVictoryPredictions.Record)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }

  // repeated uint64 item_ids = 5;
  for (int i = 0; i < this->item_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->item_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCVictoryPredictions.Record)
  return target;
}

int CMsgServerToGCVictoryPredictions_Record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint64 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

  }
  // repeated uint64 item_ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->item_ids(i));
    }
    total_size += 1 * this->item_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCVictoryPredictions_Record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerToGCVictoryPredictions_Record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerToGCVictoryPredictions_Record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerToGCVictoryPredictions_Record::MergeFrom(const CMsgServerToGCVictoryPredictions_Record& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_ids_.MergeFrom(from.item_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerToGCVictoryPredictions_Record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCVictoryPredictions_Record::CopyFrom(const CMsgServerToGCVictoryPredictions_Record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCVictoryPredictions_Record::IsInitialized() const {

  return true;
}

void CMsgServerToGCVictoryPredictions_Record::Swap(CMsgServerToGCVictoryPredictions_Record* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(item_id_, other->item_id_);
    item_ids_.Swap(&other->item_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerToGCVictoryPredictions_Record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerToGCVictoryPredictions_Record_descriptor_;
  metadata.reflection = CMsgServerToGCVictoryPredictions_Record_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgServerToGCVictoryPredictions::kRecordsFieldNumber;
#endif  // !_MSC_VER

CMsgServerToGCVictoryPredictions::CMsgServerToGCVictoryPredictions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerToGCVictoryPredictions)
}

void CMsgServerToGCVictoryPredictions::InitAsDefaultInstance() {
}

CMsgServerToGCVictoryPredictions::CMsgServerToGCVictoryPredictions(const CMsgServerToGCVictoryPredictions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCVictoryPredictions)
}

void CMsgServerToGCVictoryPredictions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerToGCVictoryPredictions::~CMsgServerToGCVictoryPredictions() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCVictoryPredictions)
  SharedDtor();
}

void CMsgServerToGCVictoryPredictions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerToGCVictoryPredictions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCVictoryPredictions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerToGCVictoryPredictions_descriptor_;
}

const CMsgServerToGCVictoryPredictions& CMsgServerToGCVictoryPredictions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerToGCVictoryPredictions* CMsgServerToGCVictoryPredictions::default_instance_ = NULL;

CMsgServerToGCVictoryPredictions* CMsgServerToGCVictoryPredictions::New() const {
  return new CMsgServerToGCVictoryPredictions;
}

void CMsgServerToGCVictoryPredictions::Clear() {
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerToGCVictoryPredictions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerToGCVictoryPredictions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgServerToGCVictoryPredictions.Record records = 1;
      case 1: {
        if (tag == 10) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_records;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerToGCVictoryPredictions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerToGCVictoryPredictions)
  return false;
#undef DO_
}

void CMsgServerToGCVictoryPredictions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerToGCVictoryPredictions)
  // repeated .CMsgServerToGCVictoryPredictions.Record records = 1;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerToGCVictoryPredictions)
}

::google::protobuf::uint8* CMsgServerToGCVictoryPredictions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCVictoryPredictions)
  // repeated .CMsgServerToGCVictoryPredictions.Record records = 1;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCVictoryPredictions)
  return target;
}

int CMsgServerToGCVictoryPredictions::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgServerToGCVictoryPredictions.Record records = 1;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCVictoryPredictions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerToGCVictoryPredictions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerToGCVictoryPredictions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerToGCVictoryPredictions::MergeFrom(const CMsgServerToGCVictoryPredictions& from) {
  GOOGLE_CHECK_NE(&from, this);
  records_.MergeFrom(from.records_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerToGCVictoryPredictions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCVictoryPredictions::CopyFrom(const CMsgServerToGCVictoryPredictions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCVictoryPredictions::IsInitialized() const {

  return true;
}

void CMsgServerToGCVictoryPredictions::Swap(CMsgServerToGCVictoryPredictions* other) {
  if (other != this) {
    records_.Swap(&other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerToGCVictoryPredictions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerToGCVictoryPredictions_descriptor_;
  metadata.reflection = CMsgServerToGCVictoryPredictions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSuspiciousActivity::kAccountIdFieldNumber;
const int CMsgSuspiciousActivity::kActivityFieldNumber;
const int CMsgSuspiciousActivity::kIntdata1FieldNumber;
const int CMsgSuspiciousActivity::kIntdata2FieldNumber;
const int CMsgSuspiciousActivity::kTimeFieldNumber;
#endif  // !_MSC_VER

CMsgSuspiciousActivity::CMsgSuspiciousActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSuspiciousActivity)
}

void CMsgSuspiciousActivity::InitAsDefaultInstance() {
}

CMsgSuspiciousActivity::CMsgSuspiciousActivity(const CMsgSuspiciousActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSuspiciousActivity)
}

void CMsgSuspiciousActivity::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  activity_ = 1;
  intdata1_ = 0;
  intdata2_ = 0;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSuspiciousActivity::~CMsgSuspiciousActivity() {
  // @@protoc_insertion_point(destructor:CMsgSuspiciousActivity)
  SharedDtor();
}

void CMsgSuspiciousActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSuspiciousActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSuspiciousActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSuspiciousActivity_descriptor_;
}

const CMsgSuspiciousActivity& CMsgSuspiciousActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgSuspiciousActivity* CMsgSuspiciousActivity::default_instance_ = NULL;

CMsgSuspiciousActivity* CMsgSuspiciousActivity::New() const {
  return new CMsgSuspiciousActivity;
}

void CMsgSuspiciousActivity::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgSuspiciousActivity*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(intdata1_, time_);
    account_id_ = 0u;
    activity_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSuspiciousActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSuspiciousActivity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_activity;
        break;
      }

      // optional .ESuspiciousActivity activity = 2 [default = k_ESuspiciousActivity_VAC_MultipleInstances];
      case 2: {
        if (tag == 16) {
         parse_activity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ESuspiciousActivity_IsValid(value)) {
            set_activity(static_cast< ::ESuspiciousActivity >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_intdata1;
        break;
      }

      // optional sint32 intdata1 = 3;
      case 3: {
        if (tag == 24) {
         parse_intdata1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &intdata1_)));
          set_has_intdata1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_intdata2;
        break;
      }

      // optional sint32 intdata2 = 4;
      case 4: {
        if (tag == 32) {
         parse_intdata2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &intdata2_)));
          set_has_intdata2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint32 time = 5;
      case 5: {
        if (tag == 40) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSuspiciousActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSuspiciousActivity)
  return false;
#undef DO_
}

void CMsgSuspiciousActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSuspiciousActivity)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional .ESuspiciousActivity activity = 2 [default = k_ESuspiciousActivity_VAC_MultipleInstances];
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->activity(), output);
  }

  // optional sint32 intdata1 = 3;
  if (has_intdata1()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->intdata1(), output);
  }

  // optional sint32 intdata2 = 4;
  if (has_intdata2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->intdata2(), output);
  }

  // optional uint32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSuspiciousActivity)
}

::google::protobuf::uint8* CMsgSuspiciousActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSuspiciousActivity)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional .ESuspiciousActivity activity = 2 [default = k_ESuspiciousActivity_VAC_MultipleInstances];
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->activity(), target);
  }

  // optional sint32 intdata1 = 3;
  if (has_intdata1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->intdata1(), target);
  }

  // optional sint32 intdata2 = 4;
  if (has_intdata2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->intdata2(), target);
  }

  // optional uint32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSuspiciousActivity)
  return target;
}

int CMsgSuspiciousActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional .ESuspiciousActivity activity = 2 [default = k_ESuspiciousActivity_VAC_MultipleInstances];
    if (has_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->activity());
    }

    // optional sint32 intdata1 = 3;
    if (has_intdata1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->intdata1());
    }

    // optional sint32 intdata2 = 4;
    if (has_intdata2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->intdata2());
    }

    // optional uint32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSuspiciousActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSuspiciousActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSuspiciousActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSuspiciousActivity::MergeFrom(const CMsgSuspiciousActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_activity()) {
      set_activity(from.activity());
    }
    if (from.has_intdata1()) {
      set_intdata1(from.intdata1());
    }
    if (from.has_intdata2()) {
      set_intdata2(from.intdata2());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSuspiciousActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSuspiciousActivity::CopyFrom(const CMsgSuspiciousActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSuspiciousActivity::IsInitialized() const {

  return true;
}

void CMsgSuspiciousActivity::Swap(CMsgSuspiciousActivity* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(activity_, other->activity_);
    std::swap(intdata1_, other->intdata1_);
    std::swap(intdata2_, other->intdata2_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSuspiciousActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSuspiciousActivity_descriptor_;
  metadata.reflection = CMsgSuspiciousActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgServerToGCRequestStatus::CMsgServerToGCRequestStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerToGCRequestStatus)
}

void CMsgServerToGCRequestStatus::InitAsDefaultInstance() {
}

CMsgServerToGCRequestStatus::CMsgServerToGCRequestStatus(const CMsgServerToGCRequestStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCRequestStatus)
}

void CMsgServerToGCRequestStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerToGCRequestStatus::~CMsgServerToGCRequestStatus() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCRequestStatus)
  SharedDtor();
}

void CMsgServerToGCRequestStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerToGCRequestStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCRequestStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerToGCRequestStatus_descriptor_;
}

const CMsgServerToGCRequestStatus& CMsgServerToGCRequestStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerToGCRequestStatus* CMsgServerToGCRequestStatus::default_instance_ = NULL;

CMsgServerToGCRequestStatus* CMsgServerToGCRequestStatus::New() const {
  return new CMsgServerToGCRequestStatus;
}

void CMsgServerToGCRequestStatus::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerToGCRequestStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerToGCRequestStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerToGCRequestStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerToGCRequestStatus)
  return false;
#undef DO_
}

void CMsgServerToGCRequestStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerToGCRequestStatus)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerToGCRequestStatus)
}

::google::protobuf::uint8* CMsgServerToGCRequestStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCRequestStatus)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCRequestStatus)
  return target;
}

int CMsgServerToGCRequestStatus::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCRequestStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerToGCRequestStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerToGCRequestStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerToGCRequestStatus::MergeFrom(const CMsgServerToGCRequestStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerToGCRequestStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCRequestStatus::CopyFrom(const CMsgServerToGCRequestStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCRequestStatus::IsInitialized() const {

  return true;
}

void CMsgServerToGCRequestStatus::Swap(CMsgServerToGCRequestStatus* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerToGCRequestStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerToGCRequestStatus_descriptor_;
  metadata.reflection = CMsgServerToGCRequestStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgServerToGCRequestStatus_Response::kResponseFieldNumber;
#endif  // !_MSC_VER

CMsgServerToGCRequestStatus_Response::CMsgServerToGCRequestStatus_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerToGCRequestStatus_Response)
}

void CMsgServerToGCRequestStatus_Response::InitAsDefaultInstance() {
}

CMsgServerToGCRequestStatus_Response::CMsgServerToGCRequestStatus_Response(const CMsgServerToGCRequestStatus_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCRequestStatus_Response)
}

void CMsgServerToGCRequestStatus_Response::SharedCtor() {
  _cached_size_ = 0;
  response_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerToGCRequestStatus_Response::~CMsgServerToGCRequestStatus_Response() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCRequestStatus_Response)
  SharedDtor();
}

void CMsgServerToGCRequestStatus_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerToGCRequestStatus_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCRequestStatus_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerToGCRequestStatus_Response_descriptor_;
}

const CMsgServerToGCRequestStatus_Response& CMsgServerToGCRequestStatus_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerToGCRequestStatus_Response* CMsgServerToGCRequestStatus_Response::default_instance_ = NULL;

CMsgServerToGCRequestStatus_Response* CMsgServerToGCRequestStatus_Response::New() const {
  return new CMsgServerToGCRequestStatus_Response;
}

void CMsgServerToGCRequestStatus_Response::Clear() {
  response_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerToGCRequestStatus_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerToGCRequestStatus_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 response = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &response_)));
          set_has_response();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerToGCRequestStatus_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerToGCRequestStatus_Response)
  return false;
#undef DO_
}

void CMsgServerToGCRequestStatus_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerToGCRequestStatus_Response)
  // optional uint32 response = 1;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerToGCRequestStatus_Response)
}

::google::protobuf::uint8* CMsgServerToGCRequestStatus_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCRequestStatus_Response)
  // optional uint32 response = 1;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCRequestStatus_Response)
  return target;
}

int CMsgServerToGCRequestStatus_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCRequestStatus_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerToGCRequestStatus_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerToGCRequestStatus_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerToGCRequestStatus_Response::MergeFrom(const CMsgServerToGCRequestStatus_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      set_response(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerToGCRequestStatus_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCRequestStatus_Response::CopyFrom(const CMsgServerToGCRequestStatus_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCRequestStatus_Response::IsInitialized() const {

  return true;
}

void CMsgServerToGCRequestStatus_Response::Swap(CMsgServerToGCRequestStatus_Response* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerToGCRequestStatus_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerToGCRequestStatus_Response_descriptor_;
  metadata.reflection = CMsgServerToGCRequestStatus_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSignOutAssassinMiniGameInfo::kWinningPlayersFieldNumber;
const int CMsgSignOutAssassinMiniGameInfo::kLosingPlayersFieldNumber;
const int CMsgSignOutAssassinMiniGameInfo::kArcanaOwnersFieldNumber;
const int CMsgSignOutAssassinMiniGameInfo::kAssassinWonFieldNumber;
const int CMsgSignOutAssassinMiniGameInfo::kTargetHeroIdFieldNumber;
const int CMsgSignOutAssassinMiniGameInfo::kContractCompletedFieldNumber;
const int CMsgSignOutAssassinMiniGameInfo::kContractCompleteTimeFieldNumber;
const int CMsgSignOutAssassinMiniGameInfo::kPaIsRadiantFieldNumber;
#endif  // !_MSC_VER

CMsgSignOutAssassinMiniGameInfo::CMsgSignOutAssassinMiniGameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSignOutAssassinMiniGameInfo)
}

void CMsgSignOutAssassinMiniGameInfo::InitAsDefaultInstance() {
}

CMsgSignOutAssassinMiniGameInfo::CMsgSignOutAssassinMiniGameInfo(const CMsgSignOutAssassinMiniGameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutAssassinMiniGameInfo)
}

void CMsgSignOutAssassinMiniGameInfo::SharedCtor() {
  _cached_size_ = 0;
  assassin_won_ = false;
  target_hero_id_ = 0u;
  contract_completed_ = false;
  contract_complete_time_ = 0;
  pa_is_radiant_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSignOutAssassinMiniGameInfo::~CMsgSignOutAssassinMiniGameInfo() {
  // @@protoc_insertion_point(destructor:CMsgSignOutAssassinMiniGameInfo)
  SharedDtor();
}

void CMsgSignOutAssassinMiniGameInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSignOutAssassinMiniGameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSignOutAssassinMiniGameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSignOutAssassinMiniGameInfo_descriptor_;
}

const CMsgSignOutAssassinMiniGameInfo& CMsgSignOutAssassinMiniGameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgSignOutAssassinMiniGameInfo* CMsgSignOutAssassinMiniGameInfo::default_instance_ = NULL;

CMsgSignOutAssassinMiniGameInfo* CMsgSignOutAssassinMiniGameInfo::New() const {
  return new CMsgSignOutAssassinMiniGameInfo;
}

void CMsgSignOutAssassinMiniGameInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgSignOutAssassinMiniGameInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 248) {
    ZR_(target_hero_id_, contract_complete_time_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  winning_players_.Clear();
  losing_players_.Clear();
  arcana_owners_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSignOutAssassinMiniGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSignOutAssassinMiniGameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 winning_players = 1;
      case 1: {
        if (tag == 9) {
         parse_winning_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9, input, this->mutable_winning_players())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_winning_players())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_winning_players;
        if (input->ExpectTag(17)) goto parse_losing_players;
        break;
      }

      // repeated fixed64 losing_players = 2;
      case 2: {
        if (tag == 17) {
         parse_losing_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_losing_players())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_losing_players())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_losing_players;
        if (input->ExpectTag(25)) goto parse_arcana_owners;
        break;
      }

      // repeated fixed64 arcana_owners = 3;
      case 3: {
        if (tag == 25) {
         parse_arcana_owners:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25, input, this->mutable_arcana_owners())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_arcana_owners())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_arcana_owners;
        if (input->ExpectTag(32)) goto parse_assassin_won;
        break;
      }

      // optional bool assassin_won = 4;
      case 4: {
        if (tag == 32) {
         parse_assassin_won:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &assassin_won_)));
          set_has_assassin_won();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_target_hero_id;
        break;
      }

      // optional uint32 target_hero_id = 5;
      case 5: {
        if (tag == 40) {
         parse_target_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_hero_id_)));
          set_has_target_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_contract_completed;
        break;
      }

      // optional bool contract_completed = 6;
      case 6: {
        if (tag == 48) {
         parse_contract_completed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &contract_completed_)));
          set_has_contract_completed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_contract_complete_time;
        break;
      }

      // optional float contract_complete_time = 7;
      case 7: {
        if (tag == 61) {
         parse_contract_complete_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &contract_complete_time_)));
          set_has_contract_complete_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_pa_is_radiant;
        break;
      }

      // optional bool pa_is_radiant = 8;
      case 8: {
        if (tag == 64) {
         parse_pa_is_radiant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pa_is_radiant_)));
          set_has_pa_is_radiant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSignOutAssassinMiniGameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSignOutAssassinMiniGameInfo)
  return false;
#undef DO_
}

void CMsgSignOutAssassinMiniGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSignOutAssassinMiniGameInfo)
  // repeated fixed64 winning_players = 1;
  for (int i = 0; i < this->winning_players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->winning_players(i), output);
  }

  // repeated fixed64 losing_players = 2;
  for (int i = 0; i < this->losing_players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->losing_players(i), output);
  }

  // repeated fixed64 arcana_owners = 3;
  for (int i = 0; i < this->arcana_owners_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->arcana_owners(i), output);
  }

  // optional bool assassin_won = 4;
  if (has_assassin_won()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->assassin_won(), output);
  }

  // optional uint32 target_hero_id = 5;
  if (has_target_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->target_hero_id(), output);
  }

  // optional bool contract_completed = 6;
  if (has_contract_completed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->contract_completed(), output);
  }

  // optional float contract_complete_time = 7;
  if (has_contract_complete_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->contract_complete_time(), output);
  }

  // optional bool pa_is_radiant = 8;
  if (has_pa_is_radiant()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->pa_is_radiant(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSignOutAssassinMiniGameInfo)
}

::google::protobuf::uint8* CMsgSignOutAssassinMiniGameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutAssassinMiniGameInfo)
  // repeated fixed64 winning_players = 1;
  for (int i = 0; i < this->winning_players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(1, this->winning_players(i), target);
  }

  // repeated fixed64 losing_players = 2;
  for (int i = 0; i < this->losing_players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(2, this->losing_players(i), target);
  }

  // repeated fixed64 arcana_owners = 3;
  for (int i = 0; i < this->arcana_owners_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(3, this->arcana_owners(i), target);
  }

  // optional bool assassin_won = 4;
  if (has_assassin_won()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->assassin_won(), target);
  }

  // optional uint32 target_hero_id = 5;
  if (has_target_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->target_hero_id(), target);
  }

  // optional bool contract_completed = 6;
  if (has_contract_completed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->contract_completed(), target);
  }

  // optional float contract_complete_time = 7;
  if (has_contract_complete_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->contract_complete_time(), target);
  }

  // optional bool pa_is_radiant = 8;
  if (has_pa_is_radiant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->pa_is_radiant(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutAssassinMiniGameInfo)
  return target;
}

int CMsgSignOutAssassinMiniGameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional bool assassin_won = 4;
    if (has_assassin_won()) {
      total_size += 1 + 1;
    }

    // optional uint32 target_hero_id = 5;
    if (has_target_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_hero_id());
    }

    // optional bool contract_completed = 6;
    if (has_contract_completed()) {
      total_size += 1 + 1;
    }

    // optional float contract_complete_time = 7;
    if (has_contract_complete_time()) {
      total_size += 1 + 4;
    }

    // optional bool pa_is_radiant = 8;
    if (has_pa_is_radiant()) {
      total_size += 1 + 1;
    }

  }
  // repeated fixed64 winning_players = 1;
  {
    int data_size = 0;
    data_size = 8 * this->winning_players_size();
    total_size += 1 * this->winning_players_size() + data_size;
  }

  // repeated fixed64 losing_players = 2;
  {
    int data_size = 0;
    data_size = 8 * this->losing_players_size();
    total_size += 1 * this->losing_players_size() + data_size;
  }

  // repeated fixed64 arcana_owners = 3;
  {
    int data_size = 0;
    data_size = 8 * this->arcana_owners_size();
    total_size += 1 * this->arcana_owners_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSignOutAssassinMiniGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSignOutAssassinMiniGameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSignOutAssassinMiniGameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSignOutAssassinMiniGameInfo::MergeFrom(const CMsgSignOutAssassinMiniGameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  winning_players_.MergeFrom(from.winning_players_);
  losing_players_.MergeFrom(from.losing_players_);
  arcana_owners_.MergeFrom(from.arcana_owners_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_assassin_won()) {
      set_assassin_won(from.assassin_won());
    }
    if (from.has_target_hero_id()) {
      set_target_hero_id(from.target_hero_id());
    }
    if (from.has_contract_completed()) {
      set_contract_completed(from.contract_completed());
    }
    if (from.has_contract_complete_time()) {
      set_contract_complete_time(from.contract_complete_time());
    }
    if (from.has_pa_is_radiant()) {
      set_pa_is_radiant(from.pa_is_radiant());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSignOutAssassinMiniGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutAssassinMiniGameInfo::CopyFrom(const CMsgSignOutAssassinMiniGameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutAssassinMiniGameInfo::IsInitialized() const {

  return true;
}

void CMsgSignOutAssassinMiniGameInfo::Swap(CMsgSignOutAssassinMiniGameInfo* other) {
  if (other != this) {
    winning_players_.Swap(&other->winning_players_);
    losing_players_.Swap(&other->losing_players_);
    arcana_owners_.Swap(&other->arcana_owners_);
    std::swap(assassin_won_, other->assassin_won_);
    std::swap(target_hero_id_, other->target_hero_id_);
    std::swap(contract_completed_, other->contract_completed_);
    std::swap(contract_complete_time_, other->contract_complete_time_);
    std::swap(pa_is_radiant_, other->pa_is_radiant_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSignOutAssassinMiniGameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSignOutAssassinMiniGameInfo_descriptor_;
  metadata.reflection = CMsgSignOutAssassinMiniGameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgServerToGCGetIngameEventData::kEventFieldNumber;
#endif  // !_MSC_VER

CMsgServerToGCGetIngameEventData::CMsgServerToGCGetIngameEventData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerToGCGetIngameEventData)
}

void CMsgServerToGCGetIngameEventData::InitAsDefaultInstance() {
}

CMsgServerToGCGetIngameEventData::CMsgServerToGCGetIngameEventData(const CMsgServerToGCGetIngameEventData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCGetIngameEventData)
}

void CMsgServerToGCGetIngameEventData::SharedCtor() {
  _cached_size_ = 0;
  event_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerToGCGetIngameEventData::~CMsgServerToGCGetIngameEventData() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCGetIngameEventData)
  SharedDtor();
}

void CMsgServerToGCGetIngameEventData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerToGCGetIngameEventData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCGetIngameEventData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerToGCGetIngameEventData_descriptor_;
}

const CMsgServerToGCGetIngameEventData& CMsgServerToGCGetIngameEventData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerToGCGetIngameEventData* CMsgServerToGCGetIngameEventData::default_instance_ = NULL;

CMsgServerToGCGetIngameEventData* CMsgServerToGCGetIngameEventData::New() const {
  return new CMsgServerToGCGetIngameEventData;
}

void CMsgServerToGCGetIngameEventData::Clear() {
  event_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerToGCGetIngameEventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerToGCGetIngameEventData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EEvent event = 1 [default = EVENT_ID_NONE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EEvent_IsValid(value)) {
            set_event(static_cast< ::EEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerToGCGetIngameEventData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerToGCGetIngameEventData)
  return false;
#undef DO_
}

void CMsgServerToGCGetIngameEventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerToGCGetIngameEventData)
  // optional .EEvent event = 1 [default = EVENT_ID_NONE];
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerToGCGetIngameEventData)
}

::google::protobuf::uint8* CMsgServerToGCGetIngameEventData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCGetIngameEventData)
  // optional .EEvent event = 1 [default = EVENT_ID_NONE];
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCGetIngameEventData)
  return target;
}

int CMsgServerToGCGetIngameEventData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .EEvent event = 1 [default = EVENT_ID_NONE];
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCGetIngameEventData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerToGCGetIngameEventData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerToGCGetIngameEventData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetIngameEventData::MergeFrom(const CMsgServerToGCGetIngameEventData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event()) {
      set_event(from.event());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerToGCGetIngameEventData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetIngameEventData::CopyFrom(const CMsgServerToGCGetIngameEventData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetIngameEventData::IsInitialized() const {

  return true;
}

void CMsgServerToGCGetIngameEventData::Swap(CMsgServerToGCGetIngameEventData* other) {
  if (other != this) {
    std::swap(event_, other->event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerToGCGetIngameEventData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerToGCGetIngameEventData_descriptor_;
  metadata.reflection = CMsgServerToGCGetIngameEventData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToServerIngameEventDataOraclePA::kTargetHeroIdsFieldNumber;
#endif  // !_MSC_VER

CMsgGCToServerIngameEventDataOraclePA::CMsgGCToServerIngameEventDataOraclePA()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToServerIngameEventDataOraclePA)
}

void CMsgGCToServerIngameEventDataOraclePA::InitAsDefaultInstance() {
}

CMsgGCToServerIngameEventDataOraclePA::CMsgGCToServerIngameEventDataOraclePA(const CMsgGCToServerIngameEventDataOraclePA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerIngameEventDataOraclePA)
}

void CMsgGCToServerIngameEventDataOraclePA::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToServerIngameEventDataOraclePA::~CMsgGCToServerIngameEventDataOraclePA() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerIngameEventDataOraclePA)
  SharedDtor();
}

void CMsgGCToServerIngameEventDataOraclePA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToServerIngameEventDataOraclePA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToServerIngameEventDataOraclePA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToServerIngameEventDataOraclePA_descriptor_;
}

const CMsgGCToServerIngameEventDataOraclePA& CMsgGCToServerIngameEventDataOraclePA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGCToServerIngameEventDataOraclePA* CMsgGCToServerIngameEventDataOraclePA::default_instance_ = NULL;

CMsgGCToServerIngameEventDataOraclePA* CMsgGCToServerIngameEventDataOraclePA::New() const {
  return new CMsgGCToServerIngameEventDataOraclePA;
}

void CMsgGCToServerIngameEventDataOraclePA::Clear() {
  target_hero_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToServerIngameEventDataOraclePA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToServerIngameEventDataOraclePA)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 target_hero_ids = 1;
      case 1: {
        if (tag == 8) {
         parse_target_hero_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_target_hero_ids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_target_hero_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_target_hero_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToServerIngameEventDataOraclePA)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToServerIngameEventDataOraclePA)
  return false;
#undef DO_
}

void CMsgGCToServerIngameEventDataOraclePA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToServerIngameEventDataOraclePA)
  // repeated uint32 target_hero_ids = 1;
  for (int i = 0; i < this->target_hero_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->target_hero_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToServerIngameEventDataOraclePA)
}

::google::protobuf::uint8* CMsgGCToServerIngameEventDataOraclePA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerIngameEventDataOraclePA)
  // repeated uint32 target_hero_ids = 1;
  for (int i = 0; i < this->target_hero_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->target_hero_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerIngameEventDataOraclePA)
  return target;
}

int CMsgGCToServerIngameEventDataOraclePA::ByteSize() const {
  int total_size = 0;

  // repeated uint32 target_hero_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->target_hero_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->target_hero_ids(i));
    }
    total_size += 1 * this->target_hero_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToServerIngameEventDataOraclePA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToServerIngameEventDataOraclePA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToServerIngameEventDataOraclePA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToServerIngameEventDataOraclePA::MergeFrom(const CMsgGCToServerIngameEventDataOraclePA& from) {
  GOOGLE_CHECK_NE(&from, this);
  target_hero_ids_.MergeFrom(from.target_hero_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToServerIngameEventDataOraclePA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerIngameEventDataOraclePA::CopyFrom(const CMsgGCToServerIngameEventDataOraclePA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerIngameEventDataOraclePA::IsInitialized() const {

  return true;
}

void CMsgGCToServerIngameEventDataOraclePA::Swap(CMsgGCToServerIngameEventDataOraclePA* other) {
  if (other != this) {
    target_hero_ids_.Swap(&other->target_hero_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToServerIngameEventDataOraclePA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToServerIngameEventDataOraclePA_descriptor_;
  metadata.reflection = CMsgGCToServerIngameEventDataOraclePA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgServerToGCKillSummaries_KillSummary::kKillerHeroIdFieldNumber;
const int CMsgServerToGCKillSummaries_KillSummary::kVictimHeroIdFieldNumber;
const int CMsgServerToGCKillSummaries_KillSummary::kKillCountFieldNumber;
#endif  // !_MSC_VER

CMsgServerToGCKillSummaries_KillSummary::CMsgServerToGCKillSummaries_KillSummary()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerToGCKillSummaries.KillSummary)
}

void CMsgServerToGCKillSummaries_KillSummary::InitAsDefaultInstance() {
}

CMsgServerToGCKillSummaries_KillSummary::CMsgServerToGCKillSummaries_KillSummary(const CMsgServerToGCKillSummaries_KillSummary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCKillSummaries.KillSummary)
}

void CMsgServerToGCKillSummaries_KillSummary::SharedCtor() {
  _cached_size_ = 0;
  killer_hero_id_ = 0u;
  victim_hero_id_ = 0u;
  kill_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerToGCKillSummaries_KillSummary::~CMsgServerToGCKillSummaries_KillSummary() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCKillSummaries.KillSummary)
  SharedDtor();
}

void CMsgServerToGCKillSummaries_KillSummary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerToGCKillSummaries_KillSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCKillSummaries_KillSummary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerToGCKillSummaries_KillSummary_descriptor_;
}

const CMsgServerToGCKillSummaries_KillSummary& CMsgServerToGCKillSummaries_KillSummary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerToGCKillSummaries_KillSummary* CMsgServerToGCKillSummaries_KillSummary::default_instance_ = NULL;

CMsgServerToGCKillSummaries_KillSummary* CMsgServerToGCKillSummaries_KillSummary::New() const {
  return new CMsgServerToGCKillSummaries_KillSummary;
}

void CMsgServerToGCKillSummaries_KillSummary::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgServerToGCKillSummaries_KillSummary*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(killer_hero_id_, kill_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerToGCKillSummaries_KillSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerToGCKillSummaries.KillSummary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 killer_hero_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killer_hero_id_)));
          set_has_killer_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_victim_hero_id;
        break;
      }

      // optional uint32 victim_hero_id = 2;
      case 2: {
        if (tag == 16) {
         parse_victim_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &victim_hero_id_)));
          set_has_victim_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_kill_count;
        break;
      }

      // optional uint32 kill_count = 3;
      case 3: {
        if (tag == 24) {
         parse_kill_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_count_)));
          set_has_kill_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerToGCKillSummaries.KillSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerToGCKillSummaries.KillSummary)
  return false;
#undef DO_
}

void CMsgServerToGCKillSummaries_KillSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerToGCKillSummaries.KillSummary)
  // optional uint32 killer_hero_id = 1;
  if (has_killer_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->killer_hero_id(), output);
  }

  // optional uint32 victim_hero_id = 2;
  if (has_victim_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->victim_hero_id(), output);
  }

  // optional uint32 kill_count = 3;
  if (has_kill_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->kill_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerToGCKillSummaries.KillSummary)
}

::google::protobuf::uint8* CMsgServerToGCKillSummaries_KillSummary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCKillSummaries.KillSummary)
  // optional uint32 killer_hero_id = 1;
  if (has_killer_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->killer_hero_id(), target);
  }

  // optional uint32 victim_hero_id = 2;
  if (has_victim_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->victim_hero_id(), target);
  }

  // optional uint32 kill_count = 3;
  if (has_kill_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->kill_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCKillSummaries.KillSummary)
  return target;
}

int CMsgServerToGCKillSummaries_KillSummary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 killer_hero_id = 1;
    if (has_killer_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killer_hero_id());
    }

    // optional uint32 victim_hero_id = 2;
    if (has_victim_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->victim_hero_id());
    }

    // optional uint32 kill_count = 3;
    if (has_kill_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCKillSummaries_KillSummary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerToGCKillSummaries_KillSummary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerToGCKillSummaries_KillSummary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerToGCKillSummaries_KillSummary::MergeFrom(const CMsgServerToGCKillSummaries_KillSummary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_killer_hero_id()) {
      set_killer_hero_id(from.killer_hero_id());
    }
    if (from.has_victim_hero_id()) {
      set_victim_hero_id(from.victim_hero_id());
    }
    if (from.has_kill_count()) {
      set_kill_count(from.kill_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerToGCKillSummaries_KillSummary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCKillSummaries_KillSummary::CopyFrom(const CMsgServerToGCKillSummaries_KillSummary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCKillSummaries_KillSummary::IsInitialized() const {

  return true;
}

void CMsgServerToGCKillSummaries_KillSummary::Swap(CMsgServerToGCKillSummaries_KillSummary* other) {
  if (other != this) {
    std::swap(killer_hero_id_, other->killer_hero_id_);
    std::swap(victim_hero_id_, other->victim_hero_id_);
    std::swap(kill_count_, other->kill_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerToGCKillSummaries_KillSummary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerToGCKillSummaries_KillSummary_descriptor_;
  metadata.reflection = CMsgServerToGCKillSummaries_KillSummary_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgServerToGCKillSummaries::kIngameeventIdFieldNumber;
const int CMsgServerToGCKillSummaries::kSummariesFieldNumber;
#endif  // !_MSC_VER

CMsgServerToGCKillSummaries::CMsgServerToGCKillSummaries()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerToGCKillSummaries)
}

void CMsgServerToGCKillSummaries::InitAsDefaultInstance() {
}

CMsgServerToGCKillSummaries::CMsgServerToGCKillSummaries(const CMsgServerToGCKillSummaries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCKillSummaries)
}

void CMsgServerToGCKillSummaries::SharedCtor() {
  _cached_size_ = 0;
  ingameevent_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerToGCKillSummaries::~CMsgServerToGCKillSummaries() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCKillSummaries)
  SharedDtor();
}

void CMsgServerToGCKillSummaries::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerToGCKillSummaries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCKillSummaries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerToGCKillSummaries_descriptor_;
}

const CMsgServerToGCKillSummaries& CMsgServerToGCKillSummaries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerToGCKillSummaries* CMsgServerToGCKillSummaries::default_instance_ = NULL;

CMsgServerToGCKillSummaries* CMsgServerToGCKillSummaries::New() const {
  return new CMsgServerToGCKillSummaries;
}

void CMsgServerToGCKillSummaries::Clear() {
  ingameevent_id_ = 0u;
  summaries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerToGCKillSummaries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerToGCKillSummaries)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ingameevent_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ingameevent_id_)));
          set_has_ingameevent_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_summaries;
        break;
      }

      // repeated .CMsgServerToGCKillSummaries.KillSummary summaries = 2;
      case 2: {
        if (tag == 18) {
         parse_summaries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_summaries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_summaries;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerToGCKillSummaries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerToGCKillSummaries)
  return false;
#undef DO_
}

void CMsgServerToGCKillSummaries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerToGCKillSummaries)
  // optional uint32 ingameevent_id = 1;
  if (has_ingameevent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ingameevent_id(), output);
  }

  // repeated .CMsgServerToGCKillSummaries.KillSummary summaries = 2;
  for (int i = 0; i < this->summaries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->summaries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerToGCKillSummaries)
}

::google::protobuf::uint8* CMsgServerToGCKillSummaries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCKillSummaries)
  // optional uint32 ingameevent_id = 1;
  if (has_ingameevent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ingameevent_id(), target);
  }

  // repeated .CMsgServerToGCKillSummaries.KillSummary summaries = 2;
  for (int i = 0; i < this->summaries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->summaries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCKillSummaries)
  return target;
}

int CMsgServerToGCKillSummaries::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ingameevent_id = 1;
    if (has_ingameevent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ingameevent_id());
    }

  }
  // repeated .CMsgServerToGCKillSummaries.KillSummary summaries = 2;
  total_size += 1 * this->summaries_size();
  for (int i = 0; i < this->summaries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->summaries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCKillSummaries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerToGCKillSummaries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerToGCKillSummaries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerToGCKillSummaries::MergeFrom(const CMsgServerToGCKillSummaries& from) {
  GOOGLE_CHECK_NE(&from, this);
  summaries_.MergeFrom(from.summaries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ingameevent_id()) {
      set_ingameevent_id(from.ingameevent_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerToGCKillSummaries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCKillSummaries::CopyFrom(const CMsgServerToGCKillSummaries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCKillSummaries::IsInitialized() const {

  return true;
}

void CMsgServerToGCKillSummaries::Swap(CMsgServerToGCKillSummaries* other) {
  if (other != this) {
    std::swap(ingameevent_id_, other->ingameevent_id_);
    summaries_.Swap(&other->summaries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerToGCKillSummaries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerToGCKillSummaries_descriptor_;
  metadata.reflection = CMsgServerToGCKillSummaries_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgGCToServerPredictionResult_Prediction_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToServerPredictionResult_Prediction_EResult_descriptor_;
}
bool CMsgGCToServerPredictionResult_Prediction_EResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgGCToServerPredictionResult_Prediction_EResult CMsgGCToServerPredictionResult_Prediction::k_eResult_ItemGranted;
const CMsgGCToServerPredictionResult_Prediction_EResult CMsgGCToServerPredictionResult_Prediction::k_eResult_Destroyed;
const CMsgGCToServerPredictionResult_Prediction_EResult CMsgGCToServerPredictionResult_Prediction::EResult_MIN;
const CMsgGCToServerPredictionResult_Prediction_EResult CMsgGCToServerPredictionResult_Prediction::EResult_MAX;
const int CMsgGCToServerPredictionResult_Prediction::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgGCToServerPredictionResult_Prediction::kItemDefFieldNumber;
const int CMsgGCToServerPredictionResult_Prediction::kNumCorrectFieldNumber;
const int CMsgGCToServerPredictionResult_Prediction::kNumFailsFieldNumber;
const int CMsgGCToServerPredictionResult_Prediction::kResultFieldNumber;
const int CMsgGCToServerPredictionResult_Prediction::kGrantedItemDefsFieldNumber;
#endif  // !_MSC_VER

CMsgGCToServerPredictionResult_Prediction::CMsgGCToServerPredictionResult_Prediction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToServerPredictionResult.Prediction)
}

void CMsgGCToServerPredictionResult_Prediction::InitAsDefaultInstance() {
}

CMsgGCToServerPredictionResult_Prediction::CMsgGCToServerPredictionResult_Prediction(const CMsgGCToServerPredictionResult_Prediction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerPredictionResult.Prediction)
}

void CMsgGCToServerPredictionResult_Prediction::SharedCtor() {
  _cached_size_ = 0;
  item_def_ = 0u;
  num_correct_ = 0u;
  num_fails_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToServerPredictionResult_Prediction::~CMsgGCToServerPredictionResult_Prediction() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerPredictionResult.Prediction)
  SharedDtor();
}

void CMsgGCToServerPredictionResult_Prediction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToServerPredictionResult_Prediction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToServerPredictionResult_Prediction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToServerPredictionResult_Prediction_descriptor_;
}

const CMsgGCToServerPredictionResult_Prediction& CMsgGCToServerPredictionResult_Prediction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGCToServerPredictionResult_Prediction* CMsgGCToServerPredictionResult_Prediction::default_instance_ = NULL;

CMsgGCToServerPredictionResult_Prediction* CMsgGCToServerPredictionResult_Prediction::New() const {
  return new CMsgGCToServerPredictionResult_Prediction;
}

void CMsgGCToServerPredictionResult_Prediction::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGCToServerPredictionResult_Prediction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(item_def_, num_fails_);
    result_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  granted_item_defs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToServerPredictionResult_Prediction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToServerPredictionResult.Prediction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_def = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_)));
          set_has_item_def();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_correct;
        break;
      }

      // optional uint32 num_correct = 2;
      case 2: {
        if (tag == 16) {
         parse_num_correct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_correct_)));
          set_has_num_correct();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_fails;
        break;
      }

      // optional uint32 num_fails = 3;
      case 3: {
        if (tag == 24) {
         parse_num_fails:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_fails_)));
          set_has_num_fails();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .CMsgGCToServerPredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGCToServerPredictionResult_Prediction_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgGCToServerPredictionResult_Prediction_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_granted_item_defs;
        break;
      }

      // repeated uint32 granted_item_defs = 6;
      case 6: {
        if (tag == 48) {
         parse_granted_item_defs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_granted_item_defs())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_granted_item_defs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_granted_item_defs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToServerPredictionResult.Prediction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToServerPredictionResult.Prediction)
  return false;
#undef DO_
}

void CMsgGCToServerPredictionResult_Prediction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToServerPredictionResult.Prediction)
  // optional uint32 item_def = 1;
  if (has_item_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_def(), output);
  }

  // optional uint32 num_correct = 2;
  if (has_num_correct()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_correct(), output);
  }

  // optional uint32 num_fails = 3;
  if (has_num_fails()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_fails(), output);
  }

  // optional .CMsgGCToServerPredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // repeated uint32 granted_item_defs = 6;
  for (int i = 0; i < this->granted_item_defs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->granted_item_defs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToServerPredictionResult.Prediction)
}

::google::protobuf::uint8* CMsgGCToServerPredictionResult_Prediction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerPredictionResult.Prediction)
  // optional uint32 item_def = 1;
  if (has_item_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_def(), target);
  }

  // optional uint32 num_correct = 2;
  if (has_num_correct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_correct(), target);
  }

  // optional uint32 num_fails = 3;
  if (has_num_fails()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_fails(), target);
  }

  // optional .CMsgGCToServerPredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  // repeated uint32 granted_item_defs = 6;
  for (int i = 0; i < this->granted_item_defs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->granted_item_defs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerPredictionResult.Prediction)
  return target;
}

int CMsgGCToServerPredictionResult_Prediction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_def = 1;
    if (has_item_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def());
    }

    // optional uint32 num_correct = 2;
    if (has_num_correct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_correct());
    }

    // optional uint32 num_fails = 3;
    if (has_num_fails()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_fails());
    }

    // optional .CMsgGCToServerPredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  // repeated uint32 granted_item_defs = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->granted_item_defs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->granted_item_defs(i));
    }
    total_size += 1 * this->granted_item_defs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToServerPredictionResult_Prediction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToServerPredictionResult_Prediction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToServerPredictionResult_Prediction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToServerPredictionResult_Prediction::MergeFrom(const CMsgGCToServerPredictionResult_Prediction& from) {
  GOOGLE_CHECK_NE(&from, this);
  granted_item_defs_.MergeFrom(from.granted_item_defs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_def()) {
      set_item_def(from.item_def());
    }
    if (from.has_num_correct()) {
      set_num_correct(from.num_correct());
    }
    if (from.has_num_fails()) {
      set_num_fails(from.num_fails());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToServerPredictionResult_Prediction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerPredictionResult_Prediction::CopyFrom(const CMsgGCToServerPredictionResult_Prediction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerPredictionResult_Prediction::IsInitialized() const {

  return true;
}

void CMsgGCToServerPredictionResult_Prediction::Swap(CMsgGCToServerPredictionResult_Prediction* other) {
  if (other != this) {
    std::swap(item_def_, other->item_def_);
    std::swap(num_correct_, other->num_correct_);
    std::swap(num_fails_, other->num_fails_);
    std::swap(result_, other->result_);
    granted_item_defs_.Swap(&other->granted_item_defs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToServerPredictionResult_Prediction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToServerPredictionResult_Prediction_descriptor_;
  metadata.reflection = CMsgGCToServerPredictionResult_Prediction_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGCToServerPredictionResult::kAccountIdFieldNumber;
const int CMsgGCToServerPredictionResult::kMatchIdFieldNumber;
const int CMsgGCToServerPredictionResult::kCorrectFieldNumber;
const int CMsgGCToServerPredictionResult::kPredictionsFieldNumber;
#endif  // !_MSC_VER

CMsgGCToServerPredictionResult::CMsgGCToServerPredictionResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToServerPredictionResult)
}

void CMsgGCToServerPredictionResult::InitAsDefaultInstance() {
}

CMsgGCToServerPredictionResult::CMsgGCToServerPredictionResult(const CMsgGCToServerPredictionResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerPredictionResult)
}

void CMsgGCToServerPredictionResult::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  match_id_ = GOOGLE_ULONGLONG(0);
  correct_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToServerPredictionResult::~CMsgGCToServerPredictionResult() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerPredictionResult)
  SharedDtor();
}

void CMsgGCToServerPredictionResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToServerPredictionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToServerPredictionResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToServerPredictionResult_descriptor_;
}

const CMsgGCToServerPredictionResult& CMsgGCToServerPredictionResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGCToServerPredictionResult* CMsgGCToServerPredictionResult::default_instance_ = NULL;

CMsgGCToServerPredictionResult* CMsgGCToServerPredictionResult::New() const {
  return new CMsgGCToServerPredictionResult;
}

void CMsgGCToServerPredictionResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGCToServerPredictionResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(match_id_, correct_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  predictions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToServerPredictionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToServerPredictionResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (tag == 16) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_correct;
        break;
      }

      // optional bool correct = 3;
      case 3: {
        if (tag == 24) {
         parse_correct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &correct_)));
          set_has_correct();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_predictions;
        break;
      }

      // repeated .CMsgGCToServerPredictionResult.Prediction predictions = 4;
      case 4: {
        if (tag == 34) {
         parse_predictions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_predictions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_predictions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToServerPredictionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToServerPredictionResult)
  return false;
#undef DO_
}

void CMsgGCToServerPredictionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToServerPredictionResult)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint64 match_id = 2;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional bool correct = 3;
  if (has_correct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->correct(), output);
  }

  // repeated .CMsgGCToServerPredictionResult.Prediction predictions = 4;
  for (int i = 0; i < this->predictions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->predictions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToServerPredictionResult)
}

::google::protobuf::uint8* CMsgGCToServerPredictionResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerPredictionResult)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint64 match_id = 2;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional bool correct = 3;
  if (has_correct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->correct(), target);
  }

  // repeated .CMsgGCToServerPredictionResult.Prediction predictions = 4;
  for (int i = 0; i < this->predictions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->predictions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerPredictionResult)
  return target;
}

int CMsgGCToServerPredictionResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint64 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional bool correct = 3;
    if (has_correct()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CMsgGCToServerPredictionResult.Prediction predictions = 4;
  total_size += 1 * this->predictions_size();
  for (int i = 0; i < this->predictions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->predictions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToServerPredictionResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToServerPredictionResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToServerPredictionResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToServerPredictionResult::MergeFrom(const CMsgGCToServerPredictionResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  predictions_.MergeFrom(from.predictions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_correct()) {
      set_correct(from.correct());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToServerPredictionResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerPredictionResult::CopyFrom(const CMsgGCToServerPredictionResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerPredictionResult::IsInitialized() const {

  return true;
}

void CMsgGCToServerPredictionResult::Swap(CMsgGCToServerPredictionResult* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(match_id_, other->match_id_);
    std::swap(correct_, other->correct_);
    predictions_.Swap(&other->predictions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToServerPredictionResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToServerPredictionResult_descriptor_;
  metadata.reflection = CMsgGCToServerPredictionResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgServerToGCLockCharmTrading::kAccountIdFieldNumber;
const int CMsgServerToGCLockCharmTrading::kItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgServerToGCLockCharmTrading::CMsgServerToGCLockCharmTrading()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerToGCLockCharmTrading)
}

void CMsgServerToGCLockCharmTrading::InitAsDefaultInstance() {
}

CMsgServerToGCLockCharmTrading::CMsgServerToGCLockCharmTrading(const CMsgServerToGCLockCharmTrading& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCLockCharmTrading)
}

void CMsgServerToGCLockCharmTrading::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerToGCLockCharmTrading::~CMsgServerToGCLockCharmTrading() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCLockCharmTrading)
  SharedDtor();
}

void CMsgServerToGCLockCharmTrading::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerToGCLockCharmTrading::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCLockCharmTrading::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerToGCLockCharmTrading_descriptor_;
}

const CMsgServerToGCLockCharmTrading& CMsgServerToGCLockCharmTrading::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerToGCLockCharmTrading* CMsgServerToGCLockCharmTrading::default_instance_ = NULL;

CMsgServerToGCLockCharmTrading* CMsgServerToGCLockCharmTrading::New() const {
  return new CMsgServerToGCLockCharmTrading;
}

void CMsgServerToGCLockCharmTrading::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgServerToGCLockCharmTrading*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(item_id_, account_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerToGCLockCharmTrading::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerToGCLockCharmTrading)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional uint64 item_id = 2;
      case 2: {
        if (tag == 16) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerToGCLockCharmTrading)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerToGCLockCharmTrading)
  return false;
#undef DO_
}

void CMsgServerToGCLockCharmTrading::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerToGCLockCharmTrading)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerToGCLockCharmTrading)
}

::google::protobuf::uint8* CMsgServerToGCLockCharmTrading::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCLockCharmTrading)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCLockCharmTrading)
  return target;
}

int CMsgServerToGCLockCharmTrading::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint64 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCLockCharmTrading::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerToGCLockCharmTrading* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerToGCLockCharmTrading*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerToGCLockCharmTrading::MergeFrom(const CMsgServerToGCLockCharmTrading& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerToGCLockCharmTrading::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCLockCharmTrading::CopyFrom(const CMsgServerToGCLockCharmTrading& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCLockCharmTrading::IsInitialized() const {

  return true;
}

void CMsgServerToGCLockCharmTrading::Swap(CMsgServerToGCLockCharmTrading* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerToGCLockCharmTrading::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerToGCLockCharmTrading_descriptor_;
  metadata.reflection = CMsgServerToGCLockCharmTrading_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTACNY2015EventPointUsage_PointUsage::kPathFieldNumber;
const int CMsgDOTACNY2015EventPointUsage_PointUsage::kPathLevelFieldNumber;
const int CMsgDOTACNY2015EventPointUsage_PointUsage::kAbilityPointsSpentFieldNumber;
#endif  // !_MSC_VER

CMsgDOTACNY2015EventPointUsage_PointUsage::CMsgDOTACNY2015EventPointUsage_PointUsage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTACNY2015EventPointUsage.PointUsage)
}

void CMsgDOTACNY2015EventPointUsage_PointUsage::InitAsDefaultInstance() {
}

CMsgDOTACNY2015EventPointUsage_PointUsage::CMsgDOTACNY2015EventPointUsage_PointUsage(const CMsgDOTACNY2015EventPointUsage_PointUsage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTACNY2015EventPointUsage.PointUsage)
}

void CMsgDOTACNY2015EventPointUsage_PointUsage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTACNY2015EventPointUsage_PointUsage::~CMsgDOTACNY2015EventPointUsage_PointUsage() {
  // @@protoc_insertion_point(destructor:CMsgDOTACNY2015EventPointUsage.PointUsage)
  SharedDtor();
}

void CMsgDOTACNY2015EventPointUsage_PointUsage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTACNY2015EventPointUsage_PointUsage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTACNY2015EventPointUsage_PointUsage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTACNY2015EventPointUsage_PointUsage_descriptor_;
}

const CMsgDOTACNY2015EventPointUsage_PointUsage& CMsgDOTACNY2015EventPointUsage_PointUsage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgDOTACNY2015EventPointUsage_PointUsage* CMsgDOTACNY2015EventPointUsage_PointUsage::default_instance_ = NULL;

CMsgDOTACNY2015EventPointUsage_PointUsage* CMsgDOTACNY2015EventPointUsage_PointUsage::New() const {
  return new CMsgDOTACNY2015EventPointUsage_PointUsage;
}

void CMsgDOTACNY2015EventPointUsage_PointUsage::Clear() {
  path_.Clear();
  path_level_.Clear();
  ability_points_spent_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTACNY2015EventPointUsage_PointUsage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTACNY2015EventPointUsage.PointUsage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 path = 1;
      case 1: {
        if (tag == 8) {
         parse_path:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_path())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_path())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_path;
        if (input->ExpectTag(16)) goto parse_path_level;
        break;
      }

      // repeated uint32 path_level = 2;
      case 2: {
        if (tag == 16) {
         parse_path_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_path_level())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_path_level())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_path_level;
        if (input->ExpectTag(24)) goto parse_ability_points_spent;
        break;
      }

      // repeated uint32 ability_points_spent = 3;
      case 3: {
        if (tag == 24) {
         parse_ability_points_spent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_ability_points_spent())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ability_points_spent())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ability_points_spent;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTACNY2015EventPointUsage.PointUsage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTACNY2015EventPointUsage.PointUsage)
  return false;
#undef DO_
}

void CMsgDOTACNY2015EventPointUsage_PointUsage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTACNY2015EventPointUsage.PointUsage)
  // repeated uint32 path = 1;
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->path(i), output);
  }

  // repeated uint32 path_level = 2;
  for (int i = 0; i < this->path_level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->path_level(i), output);
  }

  // repeated uint32 ability_points_spent = 3;
  for (int i = 0; i < this->ability_points_spent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->ability_points_spent(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTACNY2015EventPointUsage.PointUsage)
}

::google::protobuf::uint8* CMsgDOTACNY2015EventPointUsage_PointUsage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTACNY2015EventPointUsage.PointUsage)
  // repeated uint32 path = 1;
  for (int i = 0; i < this->path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->path(i), target);
  }

  // repeated uint32 path_level = 2;
  for (int i = 0; i < this->path_level_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->path_level(i), target);
  }

  // repeated uint32 ability_points_spent = 3;
  for (int i = 0; i < this->ability_points_spent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->ability_points_spent(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTACNY2015EventPointUsage.PointUsage)
  return target;
}

int CMsgDOTACNY2015EventPointUsage_PointUsage::ByteSize() const {
  int total_size = 0;

  // repeated uint32 path = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->path_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->path(i));
    }
    total_size += 1 * this->path_size() + data_size;
  }

  // repeated uint32 path_level = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->path_level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->path_level(i));
    }
    total_size += 1 * this->path_level_size() + data_size;
  }

  // repeated uint32 ability_points_spent = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->ability_points_spent_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ability_points_spent(i));
    }
    total_size += 1 * this->ability_points_spent_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTACNY2015EventPointUsage_PointUsage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTACNY2015EventPointUsage_PointUsage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTACNY2015EventPointUsage_PointUsage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTACNY2015EventPointUsage_PointUsage::MergeFrom(const CMsgDOTACNY2015EventPointUsage_PointUsage& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_.MergeFrom(from.path_);
  path_level_.MergeFrom(from.path_level_);
  ability_points_spent_.MergeFrom(from.ability_points_spent_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTACNY2015EventPointUsage_PointUsage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTACNY2015EventPointUsage_PointUsage::CopyFrom(const CMsgDOTACNY2015EventPointUsage_PointUsage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACNY2015EventPointUsage_PointUsage::IsInitialized() const {

  return true;
}

void CMsgDOTACNY2015EventPointUsage_PointUsage::Swap(CMsgDOTACNY2015EventPointUsage_PointUsage* other) {
  if (other != this) {
    path_.Swap(&other->path_);
    path_level_.Swap(&other->path_level_);
    ability_points_spent_.Swap(&other->ability_points_spent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTACNY2015EventPointUsage_PointUsage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTACNY2015EventPointUsage_PointUsage_descriptor_;
  metadata.reflection = CMsgDOTACNY2015EventPointUsage_PointUsage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTACNY2015EventPointUsage::kWinningTeamUsageFieldNumber;
const int CMsgDOTACNY2015EventPointUsage::kLosingTeamUsageFieldNumber;
#endif  // !_MSC_VER

CMsgDOTACNY2015EventPointUsage::CMsgDOTACNY2015EventPointUsage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTACNY2015EventPointUsage)
}

void CMsgDOTACNY2015EventPointUsage::InitAsDefaultInstance() {
  winning_team_usage_ = const_cast< ::CMsgDOTACNY2015EventPointUsage_PointUsage*>(&::CMsgDOTACNY2015EventPointUsage_PointUsage::default_instance());
  losing_team_usage_ = const_cast< ::CMsgDOTACNY2015EventPointUsage_PointUsage*>(&::CMsgDOTACNY2015EventPointUsage_PointUsage::default_instance());
}

CMsgDOTACNY2015EventPointUsage::CMsgDOTACNY2015EventPointUsage(const CMsgDOTACNY2015EventPointUsage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTACNY2015EventPointUsage)
}

void CMsgDOTACNY2015EventPointUsage::SharedCtor() {
  _cached_size_ = 0;
  winning_team_usage_ = NULL;
  losing_team_usage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTACNY2015EventPointUsage::~CMsgDOTACNY2015EventPointUsage() {
  // @@protoc_insertion_point(destructor:CMsgDOTACNY2015EventPointUsage)
  SharedDtor();
}

void CMsgDOTACNY2015EventPointUsage::SharedDtor() {
  if (this != default_instance_) {
    delete winning_team_usage_;
    delete losing_team_usage_;
  }
}

void CMsgDOTACNY2015EventPointUsage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTACNY2015EventPointUsage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTACNY2015EventPointUsage_descriptor_;
}

const CMsgDOTACNY2015EventPointUsage& CMsgDOTACNY2015EventPointUsage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgDOTACNY2015EventPointUsage* CMsgDOTACNY2015EventPointUsage::default_instance_ = NULL;

CMsgDOTACNY2015EventPointUsage* CMsgDOTACNY2015EventPointUsage::New() const {
  return new CMsgDOTACNY2015EventPointUsage;
}

void CMsgDOTACNY2015EventPointUsage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_winning_team_usage()) {
      if (winning_team_usage_ != NULL) winning_team_usage_->::CMsgDOTACNY2015EventPointUsage_PointUsage::Clear();
    }
    if (has_losing_team_usage()) {
      if (losing_team_usage_ != NULL) losing_team_usage_->::CMsgDOTACNY2015EventPointUsage_PointUsage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTACNY2015EventPointUsage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTACNY2015EventPointUsage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTACNY2015EventPointUsage.PointUsage winning_team_usage = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_winning_team_usage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_losing_team_usage;
        break;
      }

      // optional .CMsgDOTACNY2015EventPointUsage.PointUsage losing_team_usage = 2;
      case 2: {
        if (tag == 18) {
         parse_losing_team_usage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_losing_team_usage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTACNY2015EventPointUsage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTACNY2015EventPointUsage)
  return false;
#undef DO_
}

void CMsgDOTACNY2015EventPointUsage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTACNY2015EventPointUsage)
  // optional .CMsgDOTACNY2015EventPointUsage.PointUsage winning_team_usage = 1;
  if (has_winning_team_usage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->winning_team_usage(), output);
  }

  // optional .CMsgDOTACNY2015EventPointUsage.PointUsage losing_team_usage = 2;
  if (has_losing_team_usage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->losing_team_usage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTACNY2015EventPointUsage)
}

::google::protobuf::uint8* CMsgDOTACNY2015EventPointUsage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTACNY2015EventPointUsage)
  // optional .CMsgDOTACNY2015EventPointUsage.PointUsage winning_team_usage = 1;
  if (has_winning_team_usage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->winning_team_usage(), target);
  }

  // optional .CMsgDOTACNY2015EventPointUsage.PointUsage losing_team_usage = 2;
  if (has_losing_team_usage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->losing_team_usage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTACNY2015EventPointUsage)
  return target;
}

int CMsgDOTACNY2015EventPointUsage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgDOTACNY2015EventPointUsage.PointUsage winning_team_usage = 1;
    if (has_winning_team_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->winning_team_usage());
    }

    // optional .CMsgDOTACNY2015EventPointUsage.PointUsage losing_team_usage = 2;
    if (has_losing_team_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->losing_team_usage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTACNY2015EventPointUsage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTACNY2015EventPointUsage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTACNY2015EventPointUsage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTACNY2015EventPointUsage::MergeFrom(const CMsgDOTACNY2015EventPointUsage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winning_team_usage()) {
      mutable_winning_team_usage()->::CMsgDOTACNY2015EventPointUsage_PointUsage::MergeFrom(from.winning_team_usage());
    }
    if (from.has_losing_team_usage()) {
      mutable_losing_team_usage()->::CMsgDOTACNY2015EventPointUsage_PointUsage::MergeFrom(from.losing_team_usage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTACNY2015EventPointUsage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTACNY2015EventPointUsage::CopyFrom(const CMsgDOTACNY2015EventPointUsage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACNY2015EventPointUsage::IsInitialized() const {

  return true;
}

void CMsgDOTACNY2015EventPointUsage::Swap(CMsgDOTACNY2015EventPointUsage* other) {
  if (other != this) {
    std::swap(winning_team_usage_, other->winning_team_usage_);
    std::swap(losing_team_usage_, other->losing_team_usage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTACNY2015EventPointUsage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTACNY2015EventPointUsage_descriptor_;
  metadata.reflection = CMsgDOTACNY2015EventPointUsage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSignOutUpdatePlayerChallenge_Challenge::kEventIdFieldNumber;
const int CMsgSignOutUpdatePlayerChallenge_Challenge::kSequenceIdFieldNumber;
#endif  // !_MSC_VER

CMsgSignOutUpdatePlayerChallenge_Challenge::CMsgSignOutUpdatePlayerChallenge_Challenge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSignOutUpdatePlayerChallenge.Challenge)
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::InitAsDefaultInstance() {
}

CMsgSignOutUpdatePlayerChallenge_Challenge::CMsgSignOutUpdatePlayerChallenge_Challenge(const CMsgSignOutUpdatePlayerChallenge_Challenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutUpdatePlayerChallenge.Challenge)
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  sequence_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSignOutUpdatePlayerChallenge_Challenge::~CMsgSignOutUpdatePlayerChallenge_Challenge() {
  // @@protoc_insertion_point(destructor:CMsgSignOutUpdatePlayerChallenge.Challenge)
  SharedDtor();
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSignOutUpdatePlayerChallenge_Challenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSignOutUpdatePlayerChallenge_Challenge_descriptor_;
}

const CMsgSignOutUpdatePlayerChallenge_Challenge& CMsgSignOutUpdatePlayerChallenge_Challenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgSignOutUpdatePlayerChallenge_Challenge* CMsgSignOutUpdatePlayerChallenge_Challenge::default_instance_ = NULL;

CMsgSignOutUpdatePlayerChallenge_Challenge* CMsgSignOutUpdatePlayerChallenge_Challenge::New() const {
  return new CMsgSignOutUpdatePlayerChallenge_Challenge;
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgSignOutUpdatePlayerChallenge_Challenge*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(event_id_, sequence_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSignOutUpdatePlayerChallenge_Challenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSignOutUpdatePlayerChallenge.Challenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sequence_id;
        break;
      }

      // optional uint32 sequence_id = 3;
      case 3: {
        if (tag == 24) {
         parse_sequence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_id_)));
          set_has_sequence_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSignOutUpdatePlayerChallenge.Challenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSignOutUpdatePlayerChallenge.Challenge)
  return false;
#undef DO_
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSignOutUpdatePlayerChallenge.Challenge)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint32 sequence_id = 3;
  if (has_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sequence_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSignOutUpdatePlayerChallenge.Challenge)
}

::google::protobuf::uint8* CMsgSignOutUpdatePlayerChallenge_Challenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutUpdatePlayerChallenge.Challenge)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint32 sequence_id = 3;
  if (has_sequence_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sequence_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutUpdatePlayerChallenge.Challenge)
  return target;
}

int CMsgSignOutUpdatePlayerChallenge_Challenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 sequence_id = 3;
    if (has_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSignOutUpdatePlayerChallenge_Challenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSignOutUpdatePlayerChallenge_Challenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::MergeFrom(const CMsgSignOutUpdatePlayerChallenge_Challenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_sequence_id()) {
      set_sequence_id(from.sequence_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::CopyFrom(const CMsgSignOutUpdatePlayerChallenge_Challenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutUpdatePlayerChallenge_Challenge::IsInitialized() const {

  return true;
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::Swap(CMsgSignOutUpdatePlayerChallenge_Challenge* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(sequence_id_, other->sequence_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSignOutUpdatePlayerChallenge_Challenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSignOutUpdatePlayerChallenge_Challenge_descriptor_;
  metadata.reflection = CMsgSignOutUpdatePlayerChallenge_Challenge_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSignOutUpdatePlayerChallenge::kAccountIdFieldNumber;
const int CMsgSignOutUpdatePlayerChallenge::kCompletedFieldNumber;
const int CMsgSignOutUpdatePlayerChallenge::kRerolledFieldNumber;
const int CMsgSignOutUpdatePlayerChallenge::kMatchIdFieldNumber;
#endif  // !_MSC_VER

CMsgSignOutUpdatePlayerChallenge::CMsgSignOutUpdatePlayerChallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSignOutUpdatePlayerChallenge)
}

void CMsgSignOutUpdatePlayerChallenge::InitAsDefaultInstance() {
}

CMsgSignOutUpdatePlayerChallenge::CMsgSignOutUpdatePlayerChallenge(const CMsgSignOutUpdatePlayerChallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutUpdatePlayerChallenge)
}

void CMsgSignOutUpdatePlayerChallenge::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  match_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSignOutUpdatePlayerChallenge::~CMsgSignOutUpdatePlayerChallenge() {
  // @@protoc_insertion_point(destructor:CMsgSignOutUpdatePlayerChallenge)
  SharedDtor();
}

void CMsgSignOutUpdatePlayerChallenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSignOutUpdatePlayerChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSignOutUpdatePlayerChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSignOutUpdatePlayerChallenge_descriptor_;
}

const CMsgSignOutUpdatePlayerChallenge& CMsgSignOutUpdatePlayerChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgSignOutUpdatePlayerChallenge* CMsgSignOutUpdatePlayerChallenge::default_instance_ = NULL;

CMsgSignOutUpdatePlayerChallenge* CMsgSignOutUpdatePlayerChallenge::New() const {
  return new CMsgSignOutUpdatePlayerChallenge;
}

void CMsgSignOutUpdatePlayerChallenge::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgSignOutUpdatePlayerChallenge*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(match_id_, account_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  completed_.Clear();
  rerolled_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSignOutUpdatePlayerChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSignOutUpdatePlayerChallenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_completed;
        break;
      }

      // repeated .CMsgSignOutUpdatePlayerChallenge.Challenge completed = 2;
      case 2: {
        if (tag == 18) {
         parse_completed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_completed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_completed;
        if (input->ExpectTag(26)) goto parse_rerolled;
        break;
      }

      // repeated .CMsgSignOutUpdatePlayerChallenge.Challenge rerolled = 3;
      case 3: {
        if (tag == 26) {
         parse_rerolled:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rerolled()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rerolled;
        if (input->ExpectTag(32)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 4;
      case 4: {
        if (tag == 32) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSignOutUpdatePlayerChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSignOutUpdatePlayerChallenge)
  return false;
#undef DO_
}

void CMsgSignOutUpdatePlayerChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSignOutUpdatePlayerChallenge)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated .CMsgSignOutUpdatePlayerChallenge.Challenge completed = 2;
  for (int i = 0; i < this->completed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->completed(i), output);
  }

  // repeated .CMsgSignOutUpdatePlayerChallenge.Challenge rerolled = 3;
  for (int i = 0; i < this->rerolled_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rerolled(i), output);
  }

  // optional uint64 match_id = 4;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->match_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSignOutUpdatePlayerChallenge)
}

::google::protobuf::uint8* CMsgSignOutUpdatePlayerChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutUpdatePlayerChallenge)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated .CMsgSignOutUpdatePlayerChallenge.Challenge completed = 2;
  for (int i = 0; i < this->completed_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->completed(i), target);
  }

  // repeated .CMsgSignOutUpdatePlayerChallenge.Challenge rerolled = 3;
  for (int i = 0; i < this->rerolled_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rerolled(i), target);
  }

  // optional uint64 match_id = 4;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->match_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutUpdatePlayerChallenge)
  return target;
}

int CMsgSignOutUpdatePlayerChallenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint64 match_id = 4;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

  }
  // repeated .CMsgSignOutUpdatePlayerChallenge.Challenge completed = 2;
  total_size += 1 * this->completed_size();
  for (int i = 0; i < this->completed_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->completed(i));
  }

  // repeated .CMsgSignOutUpdatePlayerChallenge.Challenge rerolled = 3;
  total_size += 1 * this->rerolled_size();
  for (int i = 0; i < this->rerolled_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rerolled(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSignOutUpdatePlayerChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSignOutUpdatePlayerChallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSignOutUpdatePlayerChallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSignOutUpdatePlayerChallenge::MergeFrom(const CMsgSignOutUpdatePlayerChallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  completed_.MergeFrom(from.completed_);
  rerolled_.MergeFrom(from.rerolled_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSignOutUpdatePlayerChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutUpdatePlayerChallenge::CopyFrom(const CMsgSignOutUpdatePlayerChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutUpdatePlayerChallenge::IsInitialized() const {

  return true;
}

void CMsgSignOutUpdatePlayerChallenge::Swap(CMsgSignOutUpdatePlayerChallenge* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    completed_.Swap(&other->completed_);
    rerolled_.Swap(&other->rerolled_);
    std::swap(match_id_, other->match_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSignOutUpdatePlayerChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSignOutUpdatePlayerChallenge_descriptor_;
  metadata.reflection = CMsgSignOutUpdatePlayerChallenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgServerToGCRerollPlayerChallenge::kAccountIdFieldNumber;
const int CMsgServerToGCRerollPlayerChallenge::kRerollMsgFieldNumber;
#endif  // !_MSC_VER

CMsgServerToGCRerollPlayerChallenge::CMsgServerToGCRerollPlayerChallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerToGCRerollPlayerChallenge)
}

void CMsgServerToGCRerollPlayerChallenge::InitAsDefaultInstance() {
  reroll_msg_ = const_cast< ::CMsgClientToGCRerollPlayerChallenge*>(&::CMsgClientToGCRerollPlayerChallenge::default_instance());
}

CMsgServerToGCRerollPlayerChallenge::CMsgServerToGCRerollPlayerChallenge(const CMsgServerToGCRerollPlayerChallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCRerollPlayerChallenge)
}

void CMsgServerToGCRerollPlayerChallenge::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  reroll_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerToGCRerollPlayerChallenge::~CMsgServerToGCRerollPlayerChallenge() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCRerollPlayerChallenge)
  SharedDtor();
}

void CMsgServerToGCRerollPlayerChallenge::SharedDtor() {
  if (this != default_instance_) {
    delete reroll_msg_;
  }
}

void CMsgServerToGCRerollPlayerChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCRerollPlayerChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerToGCRerollPlayerChallenge_descriptor_;
}

const CMsgServerToGCRerollPlayerChallenge& CMsgServerToGCRerollPlayerChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerToGCRerollPlayerChallenge* CMsgServerToGCRerollPlayerChallenge::default_instance_ = NULL;

CMsgServerToGCRerollPlayerChallenge* CMsgServerToGCRerollPlayerChallenge::New() const {
  return new CMsgServerToGCRerollPlayerChallenge;
}

void CMsgServerToGCRerollPlayerChallenge::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    account_id_ = 0u;
    if (has_reroll_msg()) {
      if (reroll_msg_ != NULL) reroll_msg_->::CMsgClientToGCRerollPlayerChallenge::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerToGCRerollPlayerChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerToGCRerollPlayerChallenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reroll_msg;
        break;
      }

      // optional .CMsgClientToGCRerollPlayerChallenge reroll_msg = 2;
      case 2: {
        if (tag == 18) {
         parse_reroll_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reroll_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerToGCRerollPlayerChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerToGCRerollPlayerChallenge)
  return false;
#undef DO_
}

void CMsgServerToGCRerollPlayerChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerToGCRerollPlayerChallenge)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional .CMsgClientToGCRerollPlayerChallenge reroll_msg = 2;
  if (has_reroll_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reroll_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerToGCRerollPlayerChallenge)
}

::google::protobuf::uint8* CMsgServerToGCRerollPlayerChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCRerollPlayerChallenge)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional .CMsgClientToGCRerollPlayerChallenge reroll_msg = 2;
  if (has_reroll_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reroll_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCRerollPlayerChallenge)
  return target;
}

int CMsgServerToGCRerollPlayerChallenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional .CMsgClientToGCRerollPlayerChallenge reroll_msg = 2;
    if (has_reroll_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reroll_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCRerollPlayerChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerToGCRerollPlayerChallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerToGCRerollPlayerChallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerToGCRerollPlayerChallenge::MergeFrom(const CMsgServerToGCRerollPlayerChallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_reroll_msg()) {
      mutable_reroll_msg()->::CMsgClientToGCRerollPlayerChallenge::MergeFrom(from.reroll_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerToGCRerollPlayerChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCRerollPlayerChallenge::CopyFrom(const CMsgServerToGCRerollPlayerChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCRerollPlayerChallenge::IsInitialized() const {

  return true;
}

void CMsgServerToGCRerollPlayerChallenge::Swap(CMsgServerToGCRerollPlayerChallenge* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(reroll_msg_, other->reroll_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerToGCRerollPlayerChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerToGCRerollPlayerChallenge_descriptor_;
  metadata.reflection = CMsgServerToGCRerollPlayerChallenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgServerToGCHoldEventPoints_HoldRequest::kAccountIdFieldNumber;
const int CMsgServerToGCHoldEventPoints_HoldRequest::kPointsHeldFieldNumber;
const int CMsgServerToGCHoldEventPoints_HoldRequest::kPremiumHeldFieldNumber;
#endif  // !_MSC_VER

CMsgServerToGCHoldEventPoints_HoldRequest::CMsgServerToGCHoldEventPoints_HoldRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerToGCHoldEventPoints.HoldRequest)
}

void CMsgServerToGCHoldEventPoints_HoldRequest::InitAsDefaultInstance() {
}

CMsgServerToGCHoldEventPoints_HoldRequest::CMsgServerToGCHoldEventPoints_HoldRequest(const CMsgServerToGCHoldEventPoints_HoldRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCHoldEventPoints.HoldRequest)
}

void CMsgServerToGCHoldEventPoints_HoldRequest::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  points_held_ = 0u;
  premium_held_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerToGCHoldEventPoints_HoldRequest::~CMsgServerToGCHoldEventPoints_HoldRequest() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCHoldEventPoints.HoldRequest)
  SharedDtor();
}

void CMsgServerToGCHoldEventPoints_HoldRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerToGCHoldEventPoints_HoldRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCHoldEventPoints_HoldRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerToGCHoldEventPoints_HoldRequest_descriptor_;
}

const CMsgServerToGCHoldEventPoints_HoldRequest& CMsgServerToGCHoldEventPoints_HoldRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerToGCHoldEventPoints_HoldRequest* CMsgServerToGCHoldEventPoints_HoldRequest::default_instance_ = NULL;

CMsgServerToGCHoldEventPoints_HoldRequest* CMsgServerToGCHoldEventPoints_HoldRequest::New() const {
  return new CMsgServerToGCHoldEventPoints_HoldRequest;
}

void CMsgServerToGCHoldEventPoints_HoldRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgServerToGCHoldEventPoints_HoldRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(account_id_, premium_held_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerToGCHoldEventPoints_HoldRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerToGCHoldEventPoints.HoldRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_points_held;
        break;
      }

      // optional uint32 points_held = 2;
      case 2: {
        if (tag == 16) {
         parse_points_held:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_held_)));
          set_has_points_held();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_premium_held;
        break;
      }

      // optional uint32 premium_held = 3;
      case 3: {
        if (tag == 24) {
         parse_premium_held:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &premium_held_)));
          set_has_premium_held();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerToGCHoldEventPoints.HoldRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerToGCHoldEventPoints.HoldRequest)
  return false;
#undef DO_
}

void CMsgServerToGCHoldEventPoints_HoldRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerToGCHoldEventPoints.HoldRequest)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 points_held = 2;
  if (has_points_held()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->points_held(), output);
  }

  // optional uint32 premium_held = 3;
  if (has_premium_held()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->premium_held(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerToGCHoldEventPoints.HoldRequest)
}

::google::protobuf::uint8* CMsgServerToGCHoldEventPoints_HoldRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCHoldEventPoints.HoldRequest)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 points_held = 2;
  if (has_points_held()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->points_held(), target);
  }

  // optional uint32 premium_held = 3;
  if (has_premium_held()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->premium_held(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCHoldEventPoints.HoldRequest)
  return target;
}

int CMsgServerToGCHoldEventPoints_HoldRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 points_held = 2;
    if (has_points_held()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points_held());
    }

    // optional uint32 premium_held = 3;
    if (has_premium_held()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->premium_held());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCHoldEventPoints_HoldRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerToGCHoldEventPoints_HoldRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerToGCHoldEventPoints_HoldRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerToGCHoldEventPoints_HoldRequest::MergeFrom(const CMsgServerToGCHoldEventPoints_HoldRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_points_held()) {
      set_points_held(from.points_held());
    }
    if (from.has_premium_held()) {
      set_premium_held(from.premium_held());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerToGCHoldEventPoints_HoldRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCHoldEventPoints_HoldRequest::CopyFrom(const CMsgServerToGCHoldEventPoints_HoldRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCHoldEventPoints_HoldRequest::IsInitialized() const {

  return true;
}

void CMsgServerToGCHoldEventPoints_HoldRequest::Swap(CMsgServerToGCHoldEventPoints_HoldRequest* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(points_held_, other->points_held_);
    std::swap(premium_held_, other->premium_held_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerToGCHoldEventPoints_HoldRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerToGCHoldEventPoints_HoldRequest_descriptor_;
  metadata.reflection = CMsgServerToGCHoldEventPoints_HoldRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgServerToGCHoldEventPoints::kHoldsFieldNumber;
const int CMsgServerToGCHoldEventPoints::kEventIdFieldNumber;
const int CMsgServerToGCHoldEventPoints::kHoldKeyFieldNumber;
const int CMsgServerToGCHoldEventPoints::kHoldUntilFieldNumber;
#endif  // !_MSC_VER

CMsgServerToGCHoldEventPoints::CMsgServerToGCHoldEventPoints()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgServerToGCHoldEventPoints)
}

void CMsgServerToGCHoldEventPoints::InitAsDefaultInstance() {
}

CMsgServerToGCHoldEventPoints::CMsgServerToGCHoldEventPoints(const CMsgServerToGCHoldEventPoints& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCHoldEventPoints)
}

void CMsgServerToGCHoldEventPoints::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  hold_key_ = GOOGLE_ULONGLONG(0);
  hold_until_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerToGCHoldEventPoints::~CMsgServerToGCHoldEventPoints() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCHoldEventPoints)
  SharedDtor();
}

void CMsgServerToGCHoldEventPoints::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerToGCHoldEventPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCHoldEventPoints::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerToGCHoldEventPoints_descriptor_;
}

const CMsgServerToGCHoldEventPoints& CMsgServerToGCHoldEventPoints::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgServerToGCHoldEventPoints* CMsgServerToGCHoldEventPoints::default_instance_ = NULL;

CMsgServerToGCHoldEventPoints* CMsgServerToGCHoldEventPoints::New() const {
  return new CMsgServerToGCHoldEventPoints;
}

void CMsgServerToGCHoldEventPoints::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgServerToGCHoldEventPoints*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hold_key_, hold_until_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  holds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerToGCHoldEventPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgServerToGCHoldEventPoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgServerToGCHoldEventPoints.HoldRequest holds = 1;
      case 1: {
        if (tag == 10) {
         parse_holds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_holds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_holds;
        if (input->ExpectTag(16)) goto parse_event_id;
        break;
      }

      // optional uint32 event_id = 2;
      case 2: {
        if (tag == 16) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hold_key;
        break;
      }

      // optional uint64 hold_key = 3;
      case 3: {
        if (tag == 24) {
         parse_hold_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hold_key_)));
          set_has_hold_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hold_until;
        break;
      }

      // optional uint32 hold_until = 4;
      case 4: {
        if (tag == 32) {
         parse_hold_until:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hold_until_)));
          set_has_hold_until();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgServerToGCHoldEventPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgServerToGCHoldEventPoints)
  return false;
#undef DO_
}

void CMsgServerToGCHoldEventPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgServerToGCHoldEventPoints)
  // repeated .CMsgServerToGCHoldEventPoints.HoldRequest holds = 1;
  for (int i = 0; i < this->holds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->holds(i), output);
  }

  // optional uint32 event_id = 2;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event_id(), output);
  }

  // optional uint64 hold_key = 3;
  if (has_hold_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hold_key(), output);
  }

  // optional uint32 hold_until = 4;
  if (has_hold_until()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hold_until(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgServerToGCHoldEventPoints)
}

::google::protobuf::uint8* CMsgServerToGCHoldEventPoints::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCHoldEventPoints)
  // repeated .CMsgServerToGCHoldEventPoints.HoldRequest holds = 1;
  for (int i = 0; i < this->holds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->holds(i), target);
  }

  // optional uint32 event_id = 2;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event_id(), target);
  }

  // optional uint64 hold_key = 3;
  if (has_hold_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hold_key(), target);
  }

  // optional uint32 hold_until = 4;
  if (has_hold_until()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hold_until(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCHoldEventPoints)
  return target;
}

int CMsgServerToGCHoldEventPoints::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 event_id = 2;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint64 hold_key = 3;
    if (has_hold_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hold_key());
    }

    // optional uint32 hold_until = 4;
    if (has_hold_until()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hold_until());
    }

  }
  // repeated .CMsgServerToGCHoldEventPoints.HoldRequest holds = 1;
  total_size += 1 * this->holds_size();
  for (int i = 0; i < this->holds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->holds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCHoldEventPoints::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerToGCHoldEventPoints* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerToGCHoldEventPoints*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerToGCHoldEventPoints::MergeFrom(const CMsgServerToGCHoldEventPoints& from) {
  GOOGLE_CHECK_NE(&from, this);
  holds_.MergeFrom(from.holds_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_hold_key()) {
      set_hold_key(from.hold_key());
    }
    if (from.has_hold_until()) {
      set_hold_until(from.hold_until());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerToGCHoldEventPoints::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCHoldEventPoints::CopyFrom(const CMsgServerToGCHoldEventPoints& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCHoldEventPoints::IsInitialized() const {

  return true;
}

void CMsgServerToGCHoldEventPoints::Swap(CMsgServerToGCHoldEventPoints* other) {
  if (other != this) {
    holds_.Swap(&other->holds_);
    std::swap(event_id_, other->event_id_);
    std::swap(hold_key_, other->hold_key_);
    std::swap(hold_until_, other->hold_until_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerToGCHoldEventPoints::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerToGCHoldEventPoints_descriptor_;
  metadata.reflection = CMsgServerToGCHoldEventPoints_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSignOutReleaseEventPointHolds::kAccountIdsFieldNumber;
const int CMsgSignOutReleaseEventPointHolds::kEventIdFieldNumber;
const int CMsgSignOutReleaseEventPointHolds::kHoldKeyFieldNumber;
#endif  // !_MSC_VER

CMsgSignOutReleaseEventPointHolds::CMsgSignOutReleaseEventPointHolds()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSignOutReleaseEventPointHolds)
}

void CMsgSignOutReleaseEventPointHolds::InitAsDefaultInstance() {
}

CMsgSignOutReleaseEventPointHolds::CMsgSignOutReleaseEventPointHolds(const CMsgSignOutReleaseEventPointHolds& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutReleaseEventPointHolds)
}

void CMsgSignOutReleaseEventPointHolds::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  hold_key_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSignOutReleaseEventPointHolds::~CMsgSignOutReleaseEventPointHolds() {
  // @@protoc_insertion_point(destructor:CMsgSignOutReleaseEventPointHolds)
  SharedDtor();
}

void CMsgSignOutReleaseEventPointHolds::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSignOutReleaseEventPointHolds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSignOutReleaseEventPointHolds::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSignOutReleaseEventPointHolds_descriptor_;
}

const CMsgSignOutReleaseEventPointHolds& CMsgSignOutReleaseEventPointHolds::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgSignOutReleaseEventPointHolds* CMsgSignOutReleaseEventPointHolds::default_instance_ = NULL;

CMsgSignOutReleaseEventPointHolds* CMsgSignOutReleaseEventPointHolds::New() const {
  return new CMsgSignOutReleaseEventPointHolds;
}

void CMsgSignOutReleaseEventPointHolds::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgSignOutReleaseEventPointHolds*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hold_key_, event_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  account_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSignOutReleaseEventPointHolds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSignOutReleaseEventPointHolds)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (tag == 8) {
         parse_account_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_account_ids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_account_ids;
        if (input->ExpectTag(16)) goto parse_event_id;
        break;
      }

      // optional uint32 event_id = 2;
      case 2: {
        if (tag == 16) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hold_key;
        break;
      }

      // optional uint64 hold_key = 3;
      case 3: {
        if (tag == 24) {
         parse_hold_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hold_key_)));
          set_has_hold_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSignOutReleaseEventPointHolds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSignOutReleaseEventPointHolds)
  return false;
#undef DO_
}

void CMsgSignOutReleaseEventPointHolds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSignOutReleaseEventPointHolds)
  // repeated uint32 account_ids = 1;
  for (int i = 0; i < this->account_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->account_ids(i), output);
  }

  // optional uint32 event_id = 2;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event_id(), output);
  }

  // optional uint64 hold_key = 3;
  if (has_hold_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hold_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSignOutReleaseEventPointHolds)
}

::google::protobuf::uint8* CMsgSignOutReleaseEventPointHolds::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutReleaseEventPointHolds)
  // repeated uint32 account_ids = 1;
  for (int i = 0; i < this->account_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->account_ids(i), target);
  }

  // optional uint32 event_id = 2;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event_id(), target);
  }

  // optional uint64 hold_key = 3;
  if (has_hold_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hold_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutReleaseEventPointHolds)
  return target;
}

int CMsgSignOutReleaseEventPointHolds::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 event_id = 2;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint64 hold_key = 3;
    if (has_hold_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hold_key());
    }

  }
  // repeated uint32 account_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->account_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->account_ids(i));
    }
    total_size += 1 * this->account_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSignOutReleaseEventPointHolds::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSignOutReleaseEventPointHolds* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSignOutReleaseEventPointHolds*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSignOutReleaseEventPointHolds::MergeFrom(const CMsgSignOutReleaseEventPointHolds& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_ids_.MergeFrom(from.account_ids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_hold_key()) {
      set_hold_key(from.hold_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSignOutReleaseEventPointHolds::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutReleaseEventPointHolds::CopyFrom(const CMsgSignOutReleaseEventPointHolds& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutReleaseEventPointHolds::IsInitialized() const {

  return true;
}

void CMsgSignOutReleaseEventPointHolds::Swap(CMsgSignOutReleaseEventPointHolds* other) {
  if (other != this) {
    account_ids_.Swap(&other->account_ids_);
    std::swap(event_id_, other->event_id_);
    std::swap(hold_key_, other->hold_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSignOutReleaseEventPointHolds::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSignOutReleaseEventPointHolds_descriptor_;
  metadata.reflection = CMsgSignOutReleaseEventPointHolds_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToServerUpdateBroadcastCheers::kTimeStampFieldNumber;
const int CMsgGCToServerUpdateBroadcastCheers::kTeam1CheersFieldNumber;
const int CMsgGCToServerUpdateBroadcastCheers::kTeam2CheersFieldNumber;
#endif  // !_MSC_VER

CMsgGCToServerUpdateBroadcastCheers::CMsgGCToServerUpdateBroadcastCheers()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToServerUpdateBroadcastCheers)
}

void CMsgGCToServerUpdateBroadcastCheers::InitAsDefaultInstance() {
}

CMsgGCToServerUpdateBroadcastCheers::CMsgGCToServerUpdateBroadcastCheers(const CMsgGCToServerUpdateBroadcastCheers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerUpdateBroadcastCheers)
}

void CMsgGCToServerUpdateBroadcastCheers::SharedCtor() {
  _cached_size_ = 0;
  time_stamp_ = 0u;
  team_1_cheers_ = 0u;
  team_2_cheers_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToServerUpdateBroadcastCheers::~CMsgGCToServerUpdateBroadcastCheers() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerUpdateBroadcastCheers)
  SharedDtor();
}

void CMsgGCToServerUpdateBroadcastCheers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToServerUpdateBroadcastCheers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToServerUpdateBroadcastCheers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToServerUpdateBroadcastCheers_descriptor_;
}

const CMsgGCToServerUpdateBroadcastCheers& CMsgGCToServerUpdateBroadcastCheers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgGCToServerUpdateBroadcastCheers* CMsgGCToServerUpdateBroadcastCheers::default_instance_ = NULL;

CMsgGCToServerUpdateBroadcastCheers* CMsgGCToServerUpdateBroadcastCheers::New() const {
  return new CMsgGCToServerUpdateBroadcastCheers;
}

void CMsgGCToServerUpdateBroadcastCheers::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGCToServerUpdateBroadcastCheers*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(time_stamp_, team_2_cheers_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToServerUpdateBroadcastCheers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToServerUpdateBroadcastCheers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time_stamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team_1_cheers;
        break;
      }

      // optional uint32 team_1_cheers = 2;
      case 2: {
        if (tag == 16) {
         parse_team_1_cheers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_1_cheers_)));
          set_has_team_1_cheers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_team_2_cheers;
        break;
      }

      // optional uint32 team_2_cheers = 3;
      case 3: {
        if (tag == 24) {
         parse_team_2_cheers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_2_cheers_)));
          set_has_team_2_cheers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToServerUpdateBroadcastCheers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToServerUpdateBroadcastCheers)
  return false;
#undef DO_
}

void CMsgGCToServerUpdateBroadcastCheers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToServerUpdateBroadcastCheers)
  // optional uint32 time_stamp = 1;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time_stamp(), output);
  }

  // optional uint32 team_1_cheers = 2;
  if (has_team_1_cheers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_1_cheers(), output);
  }

  // optional uint32 team_2_cheers = 3;
  if (has_team_2_cheers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team_2_cheers(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToServerUpdateBroadcastCheers)
}

::google::protobuf::uint8* CMsgGCToServerUpdateBroadcastCheers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerUpdateBroadcastCheers)
  // optional uint32 time_stamp = 1;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time_stamp(), target);
  }

  // optional uint32 team_1_cheers = 2;
  if (has_team_1_cheers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_1_cheers(), target);
  }

  // optional uint32 team_2_cheers = 3;
  if (has_team_2_cheers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team_2_cheers(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerUpdateBroadcastCheers)
  return target;
}

int CMsgGCToServerUpdateBroadcastCheers::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 time_stamp = 1;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

    // optional uint32 team_1_cheers = 2;
    if (has_team_1_cheers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_1_cheers());
    }

    // optional uint32 team_2_cheers = 3;
    if (has_team_2_cheers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_2_cheers());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToServerUpdateBroadcastCheers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToServerUpdateBroadcastCheers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToServerUpdateBroadcastCheers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToServerUpdateBroadcastCheers::MergeFrom(const CMsgGCToServerUpdateBroadcastCheers& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_team_1_cheers()) {
      set_team_1_cheers(from.team_1_cheers());
    }
    if (from.has_team_2_cheers()) {
      set_team_2_cheers(from.team_2_cheers());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToServerUpdateBroadcastCheers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerUpdateBroadcastCheers::CopyFrom(const CMsgGCToServerUpdateBroadcastCheers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerUpdateBroadcastCheers::IsInitialized() const {

  return true;
}

void CMsgGCToServerUpdateBroadcastCheers::Swap(CMsgGCToServerUpdateBroadcastCheers* other) {
  if (other != this) {
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(team_1_cheers_, other->team_1_cheers_);
    std::swap(team_2_cheers_, other->team_2_cheers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToServerUpdateBroadcastCheers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToServerUpdateBroadcastCheers_descriptor_;
  metadata.reflection = CMsgGCToServerUpdateBroadcastCheers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSignOutWagerStats_Player::kAccountIdFieldNumber;
const int CMsgSignOutWagerStats_Player::kWinningsFieldNumber;
const int CMsgSignOutWagerStats_Player::kMaxWagerFieldNumber;
#endif  // !_MSC_VER

CMsgSignOutWagerStats_Player::CMsgSignOutWagerStats_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSignOutWagerStats.Player)
}

void CMsgSignOutWagerStats_Player::InitAsDefaultInstance() {
}

CMsgSignOutWagerStats_Player::CMsgSignOutWagerStats_Player(const CMsgSignOutWagerStats_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutWagerStats.Player)
}

void CMsgSignOutWagerStats_Player::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  winnings_ = 0;
  max_wager_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSignOutWagerStats_Player::~CMsgSignOutWagerStats_Player() {
  // @@protoc_insertion_point(destructor:CMsgSignOutWagerStats.Player)
  SharedDtor();
}

void CMsgSignOutWagerStats_Player::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSignOutWagerStats_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSignOutWagerStats_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSignOutWagerStats_Player_descriptor_;
}

const CMsgSignOutWagerStats_Player& CMsgSignOutWagerStats_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgSignOutWagerStats_Player* CMsgSignOutWagerStats_Player::default_instance_ = NULL;

CMsgSignOutWagerStats_Player* CMsgSignOutWagerStats_Player::New() const {
  return new CMsgSignOutWagerStats_Player;
}

void CMsgSignOutWagerStats_Player::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgSignOutWagerStats_Player*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(account_id_, max_wager_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSignOutWagerStats_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSignOutWagerStats.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_winnings;
        break;
      }

      // optional sint32 winnings = 2;
      case 2: {
        if (tag == 16) {
         parse_winnings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &winnings_)));
          set_has_winnings();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_wager;
        break;
      }

      // optional uint32 max_wager = 3;
      case 3: {
        if (tag == 24) {
         parse_max_wager:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_wager_)));
          set_has_max_wager();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSignOutWagerStats.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSignOutWagerStats.Player)
  return false;
#undef DO_
}

void CMsgSignOutWagerStats_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSignOutWagerStats.Player)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional sint32 winnings = 2;
  if (has_winnings()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->winnings(), output);
  }

  // optional uint32 max_wager = 3;
  if (has_max_wager()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_wager(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSignOutWagerStats.Player)
}

::google::protobuf::uint8* CMsgSignOutWagerStats_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutWagerStats.Player)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional sint32 winnings = 2;
  if (has_winnings()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->winnings(), target);
  }

  // optional uint32 max_wager = 3;
  if (has_max_wager()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_wager(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutWagerStats.Player)
  return target;
}

int CMsgSignOutWagerStats_Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional sint32 winnings = 2;
    if (has_winnings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->winnings());
    }

    // optional uint32 max_wager = 3;
    if (has_max_wager()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_wager());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSignOutWagerStats_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSignOutWagerStats_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSignOutWagerStats_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSignOutWagerStats_Player::MergeFrom(const CMsgSignOutWagerStats_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_winnings()) {
      set_winnings(from.winnings());
    }
    if (from.has_max_wager()) {
      set_max_wager(from.max_wager());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSignOutWagerStats_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutWagerStats_Player::CopyFrom(const CMsgSignOutWagerStats_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutWagerStats_Player::IsInitialized() const {

  return true;
}

void CMsgSignOutWagerStats_Player::Swap(CMsgSignOutWagerStats_Player* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(winnings_, other->winnings_);
    std::swap(max_wager_, other->max_wager_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSignOutWagerStats_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSignOutWagerStats_Player_descriptor_;
  metadata.reflection = CMsgSignOutWagerStats_Player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSignOutWagerStats::kPlayersFieldNumber;
const int CMsgSignOutWagerStats::kEventIdFieldNumber;
#endif  // !_MSC_VER

CMsgSignOutWagerStats::CMsgSignOutWagerStats()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSignOutWagerStats)
}

void CMsgSignOutWagerStats::InitAsDefaultInstance() {
}

CMsgSignOutWagerStats::CMsgSignOutWagerStats(const CMsgSignOutWagerStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutWagerStats)
}

void CMsgSignOutWagerStats::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSignOutWagerStats::~CMsgSignOutWagerStats() {
  // @@protoc_insertion_point(destructor:CMsgSignOutWagerStats)
  SharedDtor();
}

void CMsgSignOutWagerStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSignOutWagerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSignOutWagerStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSignOutWagerStats_descriptor_;
}

const CMsgSignOutWagerStats& CMsgSignOutWagerStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  return *default_instance_;
}

CMsgSignOutWagerStats* CMsgSignOutWagerStats::default_instance_ = NULL;

CMsgSignOutWagerStats* CMsgSignOutWagerStats::New() const {
  return new CMsgSignOutWagerStats;
}

void CMsgSignOutWagerStats::Clear() {
  event_id_ = 0u;
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSignOutWagerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSignOutWagerStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgSignOutWagerStats.Player players = 1;
      case 1: {
        if (tag == 10) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectTag(16)) goto parse_event_id;
        break;
      }

      // optional uint32 event_id = 2;
      case 2: {
        if (tag == 16) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSignOutWagerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSignOutWagerStats)
  return false;
#undef DO_
}

void CMsgSignOutWagerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSignOutWagerStats)
  // repeated .CMsgSignOutWagerStats.Player players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  // optional uint32 event_id = 2;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSignOutWagerStats)
}

::google::protobuf::uint8* CMsgSignOutWagerStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutWagerStats)
  // repeated .CMsgSignOutWagerStats.Player players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  // optional uint32 event_id = 2;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutWagerStats)
  return target;
}

int CMsgSignOutWagerStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 event_id = 2;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

  }
  // repeated .CMsgSignOutWagerStats.Player players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSignOutWagerStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSignOutWagerStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSignOutWagerStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSignOutWagerStats::MergeFrom(const CMsgSignOutWagerStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSignOutWagerStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutWagerStats::CopyFrom(const CMsgSignOutWagerStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutWagerStats::IsInitialized() const {

  return true;
}

void CMsgSignOutWagerStats::Swap(CMsgSignOutWagerStats* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(event_id_, other->event_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSignOutWagerStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSignOutWagerStats_descriptor_;
  metadata.reflection = CMsgSignOutWagerStats_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
