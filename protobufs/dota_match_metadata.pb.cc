// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_match_metadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_match_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CDOTAMatchMetadataFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAMatchMetadataFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAMatchMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAMatchMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAMatchMetadata_Team_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAMatchMetadata_Team_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAMatchMetadata_Team_PlayerKill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAMatchMetadata_Team_PlayerKill_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAMatchMetadata_Team_ItemPurchase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAMatchMetadata_Team_ItemPurchase_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAMatchMetadata_Team_InventorySnapshot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAMatchMetadata_Team_InventorySnapshot_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAMatchMetadata_Team_AutoStyleCriteria_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAMatchMetadata_Team_AutoStyleCriteria_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAMatchMetadata_Team_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAMatchMetadata_Team_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAMatchPrivateMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAMatchPrivateMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAMatchPrivateMetadata_Team_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAMatchPrivateMetadata_Team_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAMatchPrivateMetadata_Team_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAMatchPrivateMetadata_Team_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAMatchPrivateMetadata_Team_Building_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAMatchPrivateMetadata_Team_Building_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dota_5fmatch_5fmetadata_2eproto() {
  protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dota_match_metadata.proto");
  GOOGLE_CHECK(file != NULL);
  CDOTAMatchMetadataFile_descriptor_ = file->message_type(0);
  static const int CDOTAMatchMetadataFile_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadataFile, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadataFile, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadataFile, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadataFile, private_metadata_),
  };
  CDOTAMatchMetadataFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAMatchMetadataFile_descriptor_,
      CDOTAMatchMetadataFile::default_instance_,
      CDOTAMatchMetadataFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadataFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadataFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAMatchMetadataFile));
  CDOTAMatchMetadata_descriptor_ = file->message_type(1);
  static const int CDOTAMatchMetadata_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata, teams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata, item_rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata, lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata, report_until_time_),
  };
  CDOTAMatchMetadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAMatchMetadata_descriptor_,
      CDOTAMatchMetadata::default_instance_,
      CDOTAMatchMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAMatchMetadata));
  CDOTAMatchMetadata_Team_descriptor_ = CDOTAMatchMetadata_descriptor_->nested_type(0);
  static const int CDOTAMatchMetadata_Team_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team, dota_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team, graph_experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team, graph_gold_earned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team, graph_net_worth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team, cm_first_pick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team, cm_captain_player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team, cm_bans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team, cm_picks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team, cm_penalty_),
  };
  CDOTAMatchMetadata_Team_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAMatchMetadata_Team_descriptor_,
      CDOTAMatchMetadata_Team::default_instance_,
      CDOTAMatchMetadata_Team_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAMatchMetadata_Team));
  CDOTAMatchMetadata_Team_PlayerKill_descriptor_ = CDOTAMatchMetadata_Team_descriptor_->nested_type(0);
  static const int CDOTAMatchMetadata_Team_PlayerKill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_PlayerKill, victim_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_PlayerKill, count_),
  };
  CDOTAMatchMetadata_Team_PlayerKill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAMatchMetadata_Team_PlayerKill_descriptor_,
      CDOTAMatchMetadata_Team_PlayerKill::default_instance_,
      CDOTAMatchMetadata_Team_PlayerKill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_PlayerKill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_PlayerKill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAMatchMetadata_Team_PlayerKill));
  CDOTAMatchMetadata_Team_ItemPurchase_descriptor_ = CDOTAMatchMetadata_Team_descriptor_->nested_type(1);
  static const int CDOTAMatchMetadata_Team_ItemPurchase_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_ItemPurchase, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_ItemPurchase, purchase_time_),
  };
  CDOTAMatchMetadata_Team_ItemPurchase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAMatchMetadata_Team_ItemPurchase_descriptor_,
      CDOTAMatchMetadata_Team_ItemPurchase::default_instance_,
      CDOTAMatchMetadata_Team_ItemPurchase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_ItemPurchase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_ItemPurchase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAMatchMetadata_Team_ItemPurchase));
  CDOTAMatchMetadata_Team_InventorySnapshot_descriptor_ = CDOTAMatchMetadata_Team_descriptor_->nested_type(2);
  static const int CDOTAMatchMetadata_Team_InventorySnapshot_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_InventorySnapshot, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_InventorySnapshot, game_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_InventorySnapshot, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_InventorySnapshot, deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_InventorySnapshot, assists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_InventorySnapshot, level_),
  };
  CDOTAMatchMetadata_Team_InventorySnapshot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAMatchMetadata_Team_InventorySnapshot_descriptor_,
      CDOTAMatchMetadata_Team_InventorySnapshot::default_instance_,
      CDOTAMatchMetadata_Team_InventorySnapshot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_InventorySnapshot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_InventorySnapshot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAMatchMetadata_Team_InventorySnapshot));
  CDOTAMatchMetadata_Team_AutoStyleCriteria_descriptor_ = CDOTAMatchMetadata_Team_descriptor_->nested_type(3);
  static const int CDOTAMatchMetadata_Team_AutoStyleCriteria_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_AutoStyleCriteria, name_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_AutoStyleCriteria, value_),
  };
  CDOTAMatchMetadata_Team_AutoStyleCriteria_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAMatchMetadata_Team_AutoStyleCriteria_descriptor_,
      CDOTAMatchMetadata_Team_AutoStyleCriteria::default_instance_,
      CDOTAMatchMetadata_Team_AutoStyleCriteria_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_AutoStyleCriteria, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_AutoStyleCriteria, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAMatchMetadata_Team_AutoStyleCriteria));
  CDOTAMatchMetadata_Team_Player_descriptor_ = CDOTAMatchMetadata_Team_descriptor_->nested_type(4);
  static const int CDOTAMatchMetadata_Team_Player_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, ability_upgrades_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, player_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, equipped_econ_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, avg_kills_x16_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, avg_deaths_x16_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, avg_assists_x16_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, avg_gpm_x16_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, avg_xpm_x16_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, best_kills_x16_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, best_assists_x16_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, best_gpm_x16_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, best_xpm_x16_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, win_streak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, best_win_streak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, fight_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, farm_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, support_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, push_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, level_up_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, graph_net_worth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, inventory_snapshot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, avg_stats_calibrated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, auto_style_criteria_),
  };
  CDOTAMatchMetadata_Team_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAMatchMetadata_Team_Player_descriptor_,
      CDOTAMatchMetadata_Team_Player::default_instance_,
      CDOTAMatchMetadata_Team_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAMatchMetadata_Team_Player));
  CDOTAMatchPrivateMetadata_descriptor_ = file->message_type(2);
  static const int CDOTAMatchPrivateMetadata_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata, teams_),
  };
  CDOTAMatchPrivateMetadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAMatchPrivateMetadata_descriptor_,
      CDOTAMatchPrivateMetadata::default_instance_,
      CDOTAMatchPrivateMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAMatchPrivateMetadata));
  CDOTAMatchPrivateMetadata_Team_descriptor_ = CDOTAMatchPrivateMetadata_descriptor_->nested_type(0);
  static const int CDOTAMatchPrivateMetadata_Team_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team, dota_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team, buildings_),
  };
  CDOTAMatchPrivateMetadata_Team_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAMatchPrivateMetadata_Team_descriptor_,
      CDOTAMatchPrivateMetadata_Team::default_instance_,
      CDOTAMatchPrivateMetadata_Team_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAMatchPrivateMetadata_Team));
  CDOTAMatchPrivateMetadata_Team_Player_descriptor_ = CDOTAMatchPrivateMetadata_Team_descriptor_->nested_type(0);
  static const int CDOTAMatchPrivateMetadata_Team_Player_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player, player_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player, position_stream_),
  };
  CDOTAMatchPrivateMetadata_Team_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAMatchPrivateMetadata_Team_Player_descriptor_,
      CDOTAMatchPrivateMetadata_Team_Player::default_instance_,
      CDOTAMatchPrivateMetadata_Team_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAMatchPrivateMetadata_Team_Player));
  CDOTAMatchPrivateMetadata_Team_Building_descriptor_ = CDOTAMatchPrivateMetadata_Team_descriptor_->nested_type(1);
  static const int CDOTAMatchPrivateMetadata_Team_Building_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Building, unit_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Building, position_quant_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Building, position_quant_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Building, death_time_),
  };
  CDOTAMatchPrivateMetadata_Team_Building_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAMatchPrivateMetadata_Team_Building_descriptor_,
      CDOTAMatchPrivateMetadata_Team_Building::default_instance_,
      CDOTAMatchPrivateMetadata_Team_Building_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Building, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Building, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAMatchPrivateMetadata_Team_Building));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dota_5fmatch_5fmetadata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAMatchMetadataFile_descriptor_, &CDOTAMatchMetadataFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAMatchMetadata_descriptor_, &CDOTAMatchMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAMatchMetadata_Team_descriptor_, &CDOTAMatchMetadata_Team::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAMatchMetadata_Team_PlayerKill_descriptor_, &CDOTAMatchMetadata_Team_PlayerKill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAMatchMetadata_Team_ItemPurchase_descriptor_, &CDOTAMatchMetadata_Team_ItemPurchase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAMatchMetadata_Team_InventorySnapshot_descriptor_, &CDOTAMatchMetadata_Team_InventorySnapshot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAMatchMetadata_Team_AutoStyleCriteria_descriptor_, &CDOTAMatchMetadata_Team_AutoStyleCriteria::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAMatchMetadata_Team_Player_descriptor_, &CDOTAMatchMetadata_Team_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAMatchPrivateMetadata_descriptor_, &CDOTAMatchPrivateMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAMatchPrivateMetadata_Team_descriptor_, &CDOTAMatchPrivateMetadata_Team::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAMatchPrivateMetadata_Team_Player_descriptor_, &CDOTAMatchPrivateMetadata_Team_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAMatchPrivateMetadata_Team_Building_descriptor_, &CDOTAMatchPrivateMetadata_Team_Building::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dota_5fmatch_5fmetadata_2eproto() {
  delete CDOTAMatchMetadataFile::default_instance_;
  delete CDOTAMatchMetadataFile_reflection_;
  delete CDOTAMatchMetadata::default_instance_;
  delete CDOTAMatchMetadata_reflection_;
  delete CDOTAMatchMetadata_Team::default_instance_;
  delete CDOTAMatchMetadata_Team_reflection_;
  delete CDOTAMatchMetadata_Team_PlayerKill::default_instance_;
  delete CDOTAMatchMetadata_Team_PlayerKill_reflection_;
  delete CDOTAMatchMetadata_Team_ItemPurchase::default_instance_;
  delete CDOTAMatchMetadata_Team_ItemPurchase_reflection_;
  delete CDOTAMatchMetadata_Team_InventorySnapshot::default_instance_;
  delete CDOTAMatchMetadata_Team_InventorySnapshot_reflection_;
  delete CDOTAMatchMetadata_Team_AutoStyleCriteria::default_instance_;
  delete CDOTAMatchMetadata_Team_AutoStyleCriteria_reflection_;
  delete CDOTAMatchMetadata_Team_Player::default_instance_;
  delete CDOTAMatchMetadata_Team_Player_reflection_;
  delete CDOTAMatchPrivateMetadata::default_instance_;
  delete CDOTAMatchPrivateMetadata_reflection_;
  delete CDOTAMatchPrivateMetadata_Team::default_instance_;
  delete CDOTAMatchPrivateMetadata_Team_reflection_;
  delete CDOTAMatchPrivateMetadata_Team_Player::default_instance_;
  delete CDOTAMatchPrivateMetadata_Team_Player_reflection_;
  delete CDOTAMatchPrivateMetadata_Team_Building::default_instance_;
  delete CDOTAMatchPrivateMetadata_Team_Building_reflection_;
}

void protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_base_5fgcmessages_2eproto();
  ::protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031dota_match_metadata.proto\032\025base_gcmess"
    "ages.proto\032-dota_gcmessages_common_match"
    "_management.proto\"|\n\026CDOTAMatchMetadataF"
    "ile\022\017\n\007version\030\001 \002(\005\022\020\n\010match_id\030\002 \002(\004\022%"
    "\n\010metadata\030\003 \001(\0132\023.CDOTAMatchMetadata\022\030\n"
    "\020private_metadata\030\005 \001(\014\"\321\013\n\022CDOTAMatchMe"
    "tadata\022\'\n\005teams\030\001 \003(\0132\030.CDOTAMatchMetada"
    "ta.Team\022/\n\014item_rewards\030\002 \003(\0132\031.CLobbyTi"
    "medRewardDetails\022\020\n\010lobby_id\030\003 \001(\006\022\031\n\021re"
    "port_until_time\030\004 \001(\006\032\263\n\n\004Team\022\021\n\tdota_t"
    "eam\030\001 \001(\r\0220\n\007players\030\002 \003(\0132\037.CDOTAMatchM"
    "etadata.Team.Player\022\030\n\020graph_experience\030"
    "\003 \003(\002\022\031\n\021graph_gold_earned\030\004 \003(\002\022\027\n\017grap"
    "h_net_worth\030\005 \003(\002\022\025\n\rcm_first_pick\030\006 \001(\010"
    "\022\034\n\024cm_captain_player_id\030\007 \001(\r\022\017\n\007cm_ban"
    "s\030\010 \003(\r\022\020\n\010cm_picks\030\t \003(\r\022\022\n\ncm_penalty\030"
    "\n \001(\r\0320\n\nPlayerKill\022\023\n\013victim_slot\030\001 \001(\r"
    "\022\r\n\005count\030\002 \001(\r\0326\n\014ItemPurchase\022\017\n\007item_"
    "id\030\001 \001(\r\022\025\n\rpurchase_time\030\002 \001(\005\032v\n\021Inven"
    "torySnapshot\022\017\n\007item_id\030\001 \003(\r\022\021\n\tgame_ti"
    "me\030\002 \001(\005\022\r\n\005kills\030\003 \001(\r\022\016\n\006deaths\030\004 \001(\r\022"
    "\017\n\007assists\030\005 \001(\r\022\r\n\005level\030\006 \001(\r\0326\n\021AutoS"
    "tyleCriteria\022\022\n\nname_token\030\001 \001(\r\022\r\n\005valu"
    "e\030\002 \001(\002\032\221\006\n\006Player\022\022\n\naccount_id\030\001 \001(\r\022\030"
    "\n\020ability_upgrades\030\002 \003(\r\022\023\n\013player_slot\030"
    "\003 \001(\r\022)\n\023equipped_econ_items\030\004 \003(\0132\014.CSO"
    "EconItem\0222\n\005kills\030\005 \003(\0132#.CDOTAMatchMeta"
    "data.Team.PlayerKill\0224\n\005items\030\006 \003(\0132%.CD"
    "OTAMatchMetadata.Team.ItemPurchase\022\025\n\rav"
    "g_kills_x16\030\007 \001(\r\022\026\n\016avg_deaths_x16\030\010 \001("
    "\r\022\027\n\017avg_assists_x16\030\t \001(\r\022\023\n\013avg_gpm_x1"
    "6\030\n \001(\r\022\023\n\013avg_xpm_x16\030\013 \001(\r\022\026\n\016best_kil"
    "ls_x16\030\014 \001(\r\022\030\n\020best_assists_x16\030\r \001(\r\022\024"
    "\n\014best_gpm_x16\030\016 \001(\r\022\024\n\014best_xpm_x16\030\017 \001"
    "(\r\022\022\n\nwin_streak\030\020 \001(\r\022\027\n\017best_win_strea"
    "k\030\021 \001(\r\022\023\n\013fight_score\030\022 \001(\002\022\022\n\nfarm_sco"
    "re\030\023 \001(\002\022\025\n\rsupport_score\030\024 \001(\002\022\022\n\npush_"
    "score\030\025 \001(\002\022\026\n\016level_up_times\030\026 \003(\r\022\027\n\017g"
    "raph_net_worth\030\027 \003(\002\022F\n\022inventory_snapsh"
    "ot\030\030 \003(\0132*.CDOTAMatchMetadata.Team.Inven"
    "torySnapshot\022\034\n\024avg_stats_calibrated\030\031 \001"
    "(\010\022G\n\023auto_style_criteria\030\032 \003(\0132*.CDOTAM"
    "atchMetadata.Team.AutoStyleCriteria\"\220\003\n\031"
    "CDOTAMatchPrivateMetadata\022.\n\005teams\030\001 \003(\013"
    "2\037.CDOTAMatchPrivateMetadata.Team\032\302\002\n\004Te"
    "am\022\021\n\tdota_team\030\001 \001(\r\0227\n\007players\030\002 \003(\0132&"
    ".CDOTAMatchPrivateMetadata.Team.Player\022;"
    "\n\tbuildings\030\003 \003(\0132(.CDOTAMatchPrivateMet"
    "adata.Team.Building\032J\n\006Player\022\022\n\naccount"
    "_id\030\001 \001(\r\022\023\n\013player_slot\030\002 \001(\r\022\027\n\017positi"
    "on_stream\030\003 \001(\014\032e\n\010Building\022\021\n\tunit_name"
    "\030\001 \001(\t\022\030\n\020position_quant_x\030\002 \001(\r\022\030\n\020posi"
    "tion_quant_y\030\003 \001(\r\022\022\n\ndeath_time\030\004 \001(\002B\003"
    "\200\001\000", 2123);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_match_metadata.proto", &protobuf_RegisterTypes);
  CDOTAMatchMetadataFile::default_instance_ = new CDOTAMatchMetadataFile();
  CDOTAMatchMetadata::default_instance_ = new CDOTAMatchMetadata();
  CDOTAMatchMetadata_Team::default_instance_ = new CDOTAMatchMetadata_Team();
  CDOTAMatchMetadata_Team_PlayerKill::default_instance_ = new CDOTAMatchMetadata_Team_PlayerKill();
  CDOTAMatchMetadata_Team_ItemPurchase::default_instance_ = new CDOTAMatchMetadata_Team_ItemPurchase();
  CDOTAMatchMetadata_Team_InventorySnapshot::default_instance_ = new CDOTAMatchMetadata_Team_InventorySnapshot();
  CDOTAMatchMetadata_Team_AutoStyleCriteria::default_instance_ = new CDOTAMatchMetadata_Team_AutoStyleCriteria();
  CDOTAMatchMetadata_Team_Player::default_instance_ = new CDOTAMatchMetadata_Team_Player();
  CDOTAMatchPrivateMetadata::default_instance_ = new CDOTAMatchPrivateMetadata();
  CDOTAMatchPrivateMetadata_Team::default_instance_ = new CDOTAMatchPrivateMetadata_Team();
  CDOTAMatchPrivateMetadata_Team_Player::default_instance_ = new CDOTAMatchPrivateMetadata_Team_Player();
  CDOTAMatchPrivateMetadata_Team_Building::default_instance_ = new CDOTAMatchPrivateMetadata_Team_Building();
  CDOTAMatchMetadataFile::default_instance_->InitAsDefaultInstance();
  CDOTAMatchMetadata::default_instance_->InitAsDefaultInstance();
  CDOTAMatchMetadata_Team::default_instance_->InitAsDefaultInstance();
  CDOTAMatchMetadata_Team_PlayerKill::default_instance_->InitAsDefaultInstance();
  CDOTAMatchMetadata_Team_ItemPurchase::default_instance_->InitAsDefaultInstance();
  CDOTAMatchMetadata_Team_InventorySnapshot::default_instance_->InitAsDefaultInstance();
  CDOTAMatchMetadata_Team_AutoStyleCriteria::default_instance_->InitAsDefaultInstance();
  CDOTAMatchMetadata_Team_Player::default_instance_->InitAsDefaultInstance();
  CDOTAMatchPrivateMetadata::default_instance_->InitAsDefaultInstance();
  CDOTAMatchPrivateMetadata_Team::default_instance_->InitAsDefaultInstance();
  CDOTAMatchPrivateMetadata_Team_Player::default_instance_->InitAsDefaultInstance();
  CDOTAMatchPrivateMetadata_Team_Building::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dota_5fmatch_5fmetadata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dota_5fmatch_5fmetadata_2eproto {
  StaticDescriptorInitializer_dota_5fmatch_5fmetadata_2eproto() {
    protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto();
  }
} static_descriptor_initializer_dota_5fmatch_5fmetadata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CDOTAMatchMetadataFile::kVersionFieldNumber;
const int CDOTAMatchMetadataFile::kMatchIdFieldNumber;
const int CDOTAMatchMetadataFile::kMetadataFieldNumber;
const int CDOTAMatchMetadataFile::kPrivateMetadataFieldNumber;
#endif  // !_MSC_VER

CDOTAMatchMetadataFile::CDOTAMatchMetadataFile()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAMatchMetadataFile)
}

void CDOTAMatchMetadataFile::InitAsDefaultInstance() {
  metadata_ = const_cast< ::CDOTAMatchMetadata*>(&::CDOTAMatchMetadata::default_instance());
}

CDOTAMatchMetadataFile::CDOTAMatchMetadataFile(const CDOTAMatchMetadataFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadataFile)
}

void CDOTAMatchMetadataFile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  metadata_ = NULL;
  private_metadata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAMatchMetadataFile::~CDOTAMatchMetadataFile() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadataFile)
  SharedDtor();
}

void CDOTAMatchMetadataFile::SharedDtor() {
  if (private_metadata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete private_metadata_;
  }
  if (this != default_instance_) {
    delete metadata_;
  }
}

void CDOTAMatchMetadataFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMatchMetadataFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAMatchMetadataFile_descriptor_;
}

const CDOTAMatchMetadataFile& CDOTAMatchMetadataFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto();
  return *default_instance_;
}

CDOTAMatchMetadataFile* CDOTAMatchMetadataFile::default_instance_ = NULL;

CDOTAMatchMetadataFile* CDOTAMatchMetadataFile::New() const {
  return new CDOTAMatchMetadataFile;
}

void CDOTAMatchMetadataFile::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    version_ = 0;
    match_id_ = GOOGLE_ULONGLONG(0);
    if (has_metadata()) {
      if (metadata_ != NULL) metadata_->::CDOTAMatchMetadata::Clear();
    }
    if (has_private_metadata()) {
      if (private_metadata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        private_metadata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAMatchMetadataFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAMatchMetadataFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_match_id;
        break;
      }

      // required uint64 match_id = 2;
      case 2: {
        if (tag == 16) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_metadata;
        break;
      }

      // optional .CDOTAMatchMetadata metadata = 3;
      case 3: {
        if (tag == 26) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_private_metadata;
        break;
      }

      // optional bytes private_metadata = 5;
      case 5: {
        if (tag == 42) {
         parse_private_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_private_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAMatchMetadataFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAMatchMetadataFile)
  return false;
#undef DO_
}

void CDOTAMatchMetadataFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAMatchMetadataFile)
  // required int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required uint64 match_id = 2;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional .CDOTAMatchMetadata metadata = 3;
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->metadata(), output);
  }

  // optional bytes private_metadata = 5;
  if (has_private_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->private_metadata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAMatchMetadataFile)
}

::google::protobuf::uint8* CDOTAMatchMetadataFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadataFile)
  // required int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // required uint64 match_id = 2;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional .CDOTAMatchMetadata metadata = 3;
  if (has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->metadata(), target);
  }

  // optional bytes private_metadata = 5;
  if (has_private_metadata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->private_metadata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadataFile)
  return target;
}

int CDOTAMatchMetadataFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // required uint64 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional .CDOTAMatchMetadata metadata = 3;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata());
    }

    // optional bytes private_metadata = 5;
    if (has_private_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->private_metadata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMatchMetadataFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAMatchMetadataFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAMatchMetadataFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadataFile::MergeFrom(const CDOTAMatchMetadataFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_metadata()) {
      mutable_metadata()->::CDOTAMatchMetadata::MergeFrom(from.metadata());
    }
    if (from.has_private_metadata()) {
      set_private_metadata(from.private_metadata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAMatchMetadataFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadataFile::CopyFrom(const CDOTAMatchMetadataFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadataFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CDOTAMatchMetadataFile::Swap(CDOTAMatchMetadataFile* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(match_id_, other->match_id_);
    std::swap(metadata_, other->metadata_);
    std::swap(private_metadata_, other->private_metadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAMatchMetadataFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAMatchMetadataFile_descriptor_;
  metadata.reflection = CDOTAMatchMetadataFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAMatchMetadata_Team_PlayerKill::kVictimSlotFieldNumber;
const int CDOTAMatchMetadata_Team_PlayerKill::kCountFieldNumber;
#endif  // !_MSC_VER

CDOTAMatchMetadata_Team_PlayerKill::CDOTAMatchMetadata_Team_PlayerKill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAMatchMetadata.Team.PlayerKill)
}

void CDOTAMatchMetadata_Team_PlayerKill::InitAsDefaultInstance() {
}

CDOTAMatchMetadata_Team_PlayerKill::CDOTAMatchMetadata_Team_PlayerKill(const CDOTAMatchMetadata_Team_PlayerKill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.PlayerKill)
}

void CDOTAMatchMetadata_Team_PlayerKill::SharedCtor() {
  _cached_size_ = 0;
  victim_slot_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAMatchMetadata_Team_PlayerKill::~CDOTAMatchMetadata_Team_PlayerKill() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.PlayerKill)
  SharedDtor();
}

void CDOTAMatchMetadata_Team_PlayerKill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAMatchMetadata_Team_PlayerKill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMatchMetadata_Team_PlayerKill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAMatchMetadata_Team_PlayerKill_descriptor_;
}

const CDOTAMatchMetadata_Team_PlayerKill& CDOTAMatchMetadata_Team_PlayerKill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto();
  return *default_instance_;
}

CDOTAMatchMetadata_Team_PlayerKill* CDOTAMatchMetadata_Team_PlayerKill::default_instance_ = NULL;

CDOTAMatchMetadata_Team_PlayerKill* CDOTAMatchMetadata_Team_PlayerKill::New() const {
  return new CDOTAMatchMetadata_Team_PlayerKill;
}

void CDOTAMatchMetadata_Team_PlayerKill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAMatchMetadata_Team_PlayerKill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(victim_slot_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAMatchMetadata_Team_PlayerKill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAMatchMetadata.Team.PlayerKill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 victim_slot = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &victim_slot_)));
          set_has_victim_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAMatchMetadata.Team.PlayerKill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAMatchMetadata.Team.PlayerKill)
  return false;
#undef DO_
}

void CDOTAMatchMetadata_Team_PlayerKill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAMatchMetadata.Team.PlayerKill)
  // optional uint32 victim_slot = 1;
  if (has_victim_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->victim_slot(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAMatchMetadata.Team.PlayerKill)
}

::google::protobuf::uint8* CDOTAMatchMetadata_Team_PlayerKill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.PlayerKill)
  // optional uint32 victim_slot = 1;
  if (has_victim_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->victim_slot(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.PlayerKill)
  return target;
}

int CDOTAMatchMetadata_Team_PlayerKill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 victim_slot = 1;
    if (has_victim_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->victim_slot());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMatchMetadata_Team_PlayerKill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_PlayerKill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAMatchMetadata_Team_PlayerKill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_PlayerKill::MergeFrom(const CDOTAMatchMetadata_Team_PlayerKill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_victim_slot()) {
      set_victim_slot(from.victim_slot());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAMatchMetadata_Team_PlayerKill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_PlayerKill::CopyFrom(const CDOTAMatchMetadata_Team_PlayerKill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_PlayerKill::IsInitialized() const {

  return true;
}

void CDOTAMatchMetadata_Team_PlayerKill::Swap(CDOTAMatchMetadata_Team_PlayerKill* other) {
  if (other != this) {
    std::swap(victim_slot_, other->victim_slot_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAMatchMetadata_Team_PlayerKill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAMatchMetadata_Team_PlayerKill_descriptor_;
  metadata.reflection = CDOTAMatchMetadata_Team_PlayerKill_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAMatchMetadata_Team_ItemPurchase::kItemIdFieldNumber;
const int CDOTAMatchMetadata_Team_ItemPurchase::kPurchaseTimeFieldNumber;
#endif  // !_MSC_VER

CDOTAMatchMetadata_Team_ItemPurchase::CDOTAMatchMetadata_Team_ItemPurchase()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAMatchMetadata.Team.ItemPurchase)
}

void CDOTAMatchMetadata_Team_ItemPurchase::InitAsDefaultInstance() {
}

CDOTAMatchMetadata_Team_ItemPurchase::CDOTAMatchMetadata_Team_ItemPurchase(const CDOTAMatchMetadata_Team_ItemPurchase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.ItemPurchase)
}

void CDOTAMatchMetadata_Team_ItemPurchase::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  purchase_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAMatchMetadata_Team_ItemPurchase::~CDOTAMatchMetadata_Team_ItemPurchase() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.ItemPurchase)
  SharedDtor();
}

void CDOTAMatchMetadata_Team_ItemPurchase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAMatchMetadata_Team_ItemPurchase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMatchMetadata_Team_ItemPurchase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAMatchMetadata_Team_ItemPurchase_descriptor_;
}

const CDOTAMatchMetadata_Team_ItemPurchase& CDOTAMatchMetadata_Team_ItemPurchase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto();
  return *default_instance_;
}

CDOTAMatchMetadata_Team_ItemPurchase* CDOTAMatchMetadata_Team_ItemPurchase::default_instance_ = NULL;

CDOTAMatchMetadata_Team_ItemPurchase* CDOTAMatchMetadata_Team_ItemPurchase::New() const {
  return new CDOTAMatchMetadata_Team_ItemPurchase;
}

void CDOTAMatchMetadata_Team_ItemPurchase::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAMatchMetadata_Team_ItemPurchase*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(item_id_, purchase_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAMatchMetadata_Team_ItemPurchase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAMatchMetadata.Team.ItemPurchase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_purchase_time;
        break;
      }

      // optional int32 purchase_time = 2;
      case 2: {
        if (tag == 16) {
         parse_purchase_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &purchase_time_)));
          set_has_purchase_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAMatchMetadata.Team.ItemPurchase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAMatchMetadata.Team.ItemPurchase)
  return false;
#undef DO_
}

void CDOTAMatchMetadata_Team_ItemPurchase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAMatchMetadata.Team.ItemPurchase)
  // optional uint32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // optional int32 purchase_time = 2;
  if (has_purchase_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->purchase_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAMatchMetadata.Team.ItemPurchase)
}

::google::protobuf::uint8* CDOTAMatchMetadata_Team_ItemPurchase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.ItemPurchase)
  // optional uint32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // optional int32 purchase_time = 2;
  if (has_purchase_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->purchase_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.ItemPurchase)
  return target;
}

int CDOTAMatchMetadata_Team_ItemPurchase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional int32 purchase_time = 2;
    if (has_purchase_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->purchase_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMatchMetadata_Team_ItemPurchase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_ItemPurchase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAMatchMetadata_Team_ItemPurchase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_ItemPurchase::MergeFrom(const CDOTAMatchMetadata_Team_ItemPurchase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_purchase_time()) {
      set_purchase_time(from.purchase_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAMatchMetadata_Team_ItemPurchase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_ItemPurchase::CopyFrom(const CDOTAMatchMetadata_Team_ItemPurchase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_ItemPurchase::IsInitialized() const {

  return true;
}

void CDOTAMatchMetadata_Team_ItemPurchase::Swap(CDOTAMatchMetadata_Team_ItemPurchase* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(purchase_time_, other->purchase_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAMatchMetadata_Team_ItemPurchase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAMatchMetadata_Team_ItemPurchase_descriptor_;
  metadata.reflection = CDOTAMatchMetadata_Team_ItemPurchase_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAMatchMetadata_Team_InventorySnapshot::kItemIdFieldNumber;
const int CDOTAMatchMetadata_Team_InventorySnapshot::kGameTimeFieldNumber;
const int CDOTAMatchMetadata_Team_InventorySnapshot::kKillsFieldNumber;
const int CDOTAMatchMetadata_Team_InventorySnapshot::kDeathsFieldNumber;
const int CDOTAMatchMetadata_Team_InventorySnapshot::kAssistsFieldNumber;
const int CDOTAMatchMetadata_Team_InventorySnapshot::kLevelFieldNumber;
#endif  // !_MSC_VER

CDOTAMatchMetadata_Team_InventorySnapshot::CDOTAMatchMetadata_Team_InventorySnapshot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAMatchMetadata.Team.InventorySnapshot)
}

void CDOTAMatchMetadata_Team_InventorySnapshot::InitAsDefaultInstance() {
}

CDOTAMatchMetadata_Team_InventorySnapshot::CDOTAMatchMetadata_Team_InventorySnapshot(const CDOTAMatchMetadata_Team_InventorySnapshot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.InventorySnapshot)
}

void CDOTAMatchMetadata_Team_InventorySnapshot::SharedCtor() {
  _cached_size_ = 0;
  game_time_ = 0;
  kills_ = 0u;
  deaths_ = 0u;
  assists_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAMatchMetadata_Team_InventorySnapshot::~CDOTAMatchMetadata_Team_InventorySnapshot() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.InventorySnapshot)
  SharedDtor();
}

void CDOTAMatchMetadata_Team_InventorySnapshot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAMatchMetadata_Team_InventorySnapshot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMatchMetadata_Team_InventorySnapshot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAMatchMetadata_Team_InventorySnapshot_descriptor_;
}

const CDOTAMatchMetadata_Team_InventorySnapshot& CDOTAMatchMetadata_Team_InventorySnapshot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto();
  return *default_instance_;
}

CDOTAMatchMetadata_Team_InventorySnapshot* CDOTAMatchMetadata_Team_InventorySnapshot::default_instance_ = NULL;

CDOTAMatchMetadata_Team_InventorySnapshot* CDOTAMatchMetadata_Team_InventorySnapshot::New() const {
  return new CDOTAMatchMetadata_Team_InventorySnapshot;
}

void CDOTAMatchMetadata_Team_InventorySnapshot::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAMatchMetadata_Team_InventorySnapshot*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 62) {
    ZR_(game_time_, level_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  item_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAMatchMetadata_Team_InventorySnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAMatchMetadata.Team.InventorySnapshot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 item_id = 1;
      case 1: {
        if (tag == 8) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_item_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_item_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_item_id;
        if (input->ExpectTag(16)) goto parse_game_time;
        break;
      }

      // optional int32 game_time = 2;
      case 2: {
        if (tag == 16) {
         parse_game_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_time_)));
          set_has_game_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_kills;
        break;
      }

      // optional uint32 kills = 3;
      case 3: {
        if (tag == 24) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
          set_has_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_deaths;
        break;
      }

      // optional uint32 deaths = 4;
      case 4: {
        if (tag == 32) {
         parse_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
          set_has_deaths();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_assists;
        break;
      }

      // optional uint32 assists = 5;
      case 5: {
        if (tag == 40) {
         parse_assists:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
          set_has_assists();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional uint32 level = 6;
      case 6: {
        if (tag == 48) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAMatchMetadata.Team.InventorySnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAMatchMetadata.Team.InventorySnapshot)
  return false;
#undef DO_
}

void CDOTAMatchMetadata_Team_InventorySnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAMatchMetadata.Team.InventorySnapshot)
  // repeated uint32 item_id = 1;
  for (int i = 0; i < this->item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->item_id(i), output);
  }

  // optional int32 game_time = 2;
  if (has_game_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_time(), output);
  }

  // optional uint32 kills = 3;
  if (has_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->kills(), output);
  }

  // optional uint32 deaths = 4;
  if (has_deaths()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->deaths(), output);
  }

  // optional uint32 assists = 5;
  if (has_assists()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->assists(), output);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAMatchMetadata.Team.InventorySnapshot)
}

::google::protobuf::uint8* CDOTAMatchMetadata_Team_InventorySnapshot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.InventorySnapshot)
  // repeated uint32 item_id = 1;
  for (int i = 0; i < this->item_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->item_id(i), target);
  }

  // optional int32 game_time = 2;
  if (has_game_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game_time(), target);
  }

  // optional uint32 kills = 3;
  if (has_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->kills(), target);
  }

  // optional uint32 deaths = 4;
  if (has_deaths()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->deaths(), target);
  }

  // optional uint32 assists = 5;
  if (has_assists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->assists(), target);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.InventorySnapshot)
  return target;
}

int CDOTAMatchMetadata_Team_InventorySnapshot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 game_time = 2;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_time());
    }

    // optional uint32 kills = 3;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 4;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 assists = 5;
    if (has_assists()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  // repeated uint32 item_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->item_id(i));
    }
    total_size += 1 * this->item_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMatchMetadata_Team_InventorySnapshot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_InventorySnapshot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAMatchMetadata_Team_InventorySnapshot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_InventorySnapshot::MergeFrom(const CDOTAMatchMetadata_Team_InventorySnapshot& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_id_.MergeFrom(from.item_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_game_time()) {
      set_game_time(from.game_time());
    }
    if (from.has_kills()) {
      set_kills(from.kills());
    }
    if (from.has_deaths()) {
      set_deaths(from.deaths());
    }
    if (from.has_assists()) {
      set_assists(from.assists());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAMatchMetadata_Team_InventorySnapshot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_InventorySnapshot::CopyFrom(const CDOTAMatchMetadata_Team_InventorySnapshot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_InventorySnapshot::IsInitialized() const {

  return true;
}

void CDOTAMatchMetadata_Team_InventorySnapshot::Swap(CDOTAMatchMetadata_Team_InventorySnapshot* other) {
  if (other != this) {
    item_id_.Swap(&other->item_id_);
    std::swap(game_time_, other->game_time_);
    std::swap(kills_, other->kills_);
    std::swap(deaths_, other->deaths_);
    std::swap(assists_, other->assists_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAMatchMetadata_Team_InventorySnapshot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAMatchMetadata_Team_InventorySnapshot_descriptor_;
  metadata.reflection = CDOTAMatchMetadata_Team_InventorySnapshot_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAMatchMetadata_Team_AutoStyleCriteria::kNameTokenFieldNumber;
const int CDOTAMatchMetadata_Team_AutoStyleCriteria::kValueFieldNumber;
#endif  // !_MSC_VER

CDOTAMatchMetadata_Team_AutoStyleCriteria::CDOTAMatchMetadata_Team_AutoStyleCriteria()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAMatchMetadata.Team.AutoStyleCriteria)
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::InitAsDefaultInstance() {
}

CDOTAMatchMetadata_Team_AutoStyleCriteria::CDOTAMatchMetadata_Team_AutoStyleCriteria(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.AutoStyleCriteria)
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::SharedCtor() {
  _cached_size_ = 0;
  name_token_ = 0u;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAMatchMetadata_Team_AutoStyleCriteria::~CDOTAMatchMetadata_Team_AutoStyleCriteria() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  SharedDtor();
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMatchMetadata_Team_AutoStyleCriteria::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAMatchMetadata_Team_AutoStyleCriteria_descriptor_;
}

const CDOTAMatchMetadata_Team_AutoStyleCriteria& CDOTAMatchMetadata_Team_AutoStyleCriteria::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto();
  return *default_instance_;
}

CDOTAMatchMetadata_Team_AutoStyleCriteria* CDOTAMatchMetadata_Team_AutoStyleCriteria::default_instance_ = NULL;

CDOTAMatchMetadata_Team_AutoStyleCriteria* CDOTAMatchMetadata_Team_AutoStyleCriteria::New() const {
  return new CDOTAMatchMetadata_Team_AutoStyleCriteria;
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAMatchMetadata_Team_AutoStyleCriteria*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(name_token_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAMatchMetadata_Team_AutoStyleCriteria::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 name_token = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_token_)));
          set_has_name_token();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_value;
        break;
      }

      // optional float value = 2;
      case 2: {
        if (tag == 21) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  return false;
#undef DO_
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  // optional uint32 name_token = 1;
  if (has_name_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->name_token(), output);
  }

  // optional float value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAMatchMetadata.Team.AutoStyleCriteria)
}

::google::protobuf::uint8* CDOTAMatchMetadata_Team_AutoStyleCriteria::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  // optional uint32 name_token = 1;
  if (has_name_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->name_token(), target);
  }

  // optional float value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  return target;
}

int CDOTAMatchMetadata_Team_AutoStyleCriteria::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 name_token = 1;
    if (has_name_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->name_token());
    }

    // optional float value = 2;
    if (has_value()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_AutoStyleCriteria* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAMatchMetadata_Team_AutoStyleCriteria*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::MergeFrom(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name_token()) {
      set_name_token(from.name_token());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::CopyFrom(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_AutoStyleCriteria::IsInitialized() const {

  return true;
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::Swap(CDOTAMatchMetadata_Team_AutoStyleCriteria* other) {
  if (other != this) {
    std::swap(name_token_, other->name_token_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAMatchMetadata_Team_AutoStyleCriteria::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAMatchMetadata_Team_AutoStyleCriteria_descriptor_;
  metadata.reflection = CDOTAMatchMetadata_Team_AutoStyleCriteria_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAMatchMetadata_Team_Player::kAccountIdFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kAbilityUpgradesFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kPlayerSlotFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kEquippedEconItemsFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kKillsFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kItemsFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kAvgKillsX16FieldNumber;
const int CDOTAMatchMetadata_Team_Player::kAvgDeathsX16FieldNumber;
const int CDOTAMatchMetadata_Team_Player::kAvgAssistsX16FieldNumber;
const int CDOTAMatchMetadata_Team_Player::kAvgGpmX16FieldNumber;
const int CDOTAMatchMetadata_Team_Player::kAvgXpmX16FieldNumber;
const int CDOTAMatchMetadata_Team_Player::kBestKillsX16FieldNumber;
const int CDOTAMatchMetadata_Team_Player::kBestAssistsX16FieldNumber;
const int CDOTAMatchMetadata_Team_Player::kBestGpmX16FieldNumber;
const int CDOTAMatchMetadata_Team_Player::kBestXpmX16FieldNumber;
const int CDOTAMatchMetadata_Team_Player::kWinStreakFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kBestWinStreakFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kFightScoreFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kFarmScoreFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kSupportScoreFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kPushScoreFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kLevelUpTimesFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kGraphNetWorthFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kInventorySnapshotFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kAvgStatsCalibratedFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kAutoStyleCriteriaFieldNumber;
#endif  // !_MSC_VER

CDOTAMatchMetadata_Team_Player::CDOTAMatchMetadata_Team_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAMatchMetadata.Team.Player)
}

void CDOTAMatchMetadata_Team_Player::InitAsDefaultInstance() {
}

CDOTAMatchMetadata_Team_Player::CDOTAMatchMetadata_Team_Player(const CDOTAMatchMetadata_Team_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.Player)
}

void CDOTAMatchMetadata_Team_Player::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  player_slot_ = 0u;
  avg_kills_x16_ = 0u;
  avg_deaths_x16_ = 0u;
  avg_assists_x16_ = 0u;
  avg_gpm_x16_ = 0u;
  avg_xpm_x16_ = 0u;
  best_kills_x16_ = 0u;
  best_assists_x16_ = 0u;
  best_gpm_x16_ = 0u;
  best_xpm_x16_ = 0u;
  win_streak_ = 0u;
  best_win_streak_ = 0u;
  fight_score_ = 0;
  farm_score_ = 0;
  support_score_ = 0;
  push_score_ = 0;
  avg_stats_calibrated_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAMatchMetadata_Team_Player::~CDOTAMatchMetadata_Team_Player() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.Player)
  SharedDtor();
}

void CDOTAMatchMetadata_Team_Player::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAMatchMetadata_Team_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMatchMetadata_Team_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAMatchMetadata_Team_Player_descriptor_;
}

const CDOTAMatchMetadata_Team_Player& CDOTAMatchMetadata_Team_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto();
  return *default_instance_;
}

CDOTAMatchMetadata_Team_Player* CDOTAMatchMetadata_Team_Player::default_instance_ = NULL;

CDOTAMatchMetadata_Team_Player* CDOTAMatchMetadata_Team_Player::New() const {
  return new CDOTAMatchMetadata_Team_Player;
}

void CDOTAMatchMetadata_Team_Player::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAMatchMetadata_Team_Player*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(account_id_, player_slot_);
  ZR_(avg_kills_x16_, avg_deaths_x16_);
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(avg_assists_x16_, win_streak_);
  }
  if (_has_bits_[16 / 32] & 2031616) {
    ZR_(best_win_streak_, support_score_);
    push_score_ = 0;
  }
  avg_stats_calibrated_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ability_upgrades_.Clear();
  equipped_econ_items_.Clear();
  kills_.Clear();
  items_.Clear();
  level_up_times_.Clear();
  graph_net_worth_.Clear();
  inventory_snapshot_.Clear();
  auto_style_criteria_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAMatchMetadata_Team_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAMatchMetadata.Team.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ability_upgrades;
        break;
      }

      // repeated uint32 ability_upgrades = 2;
      case 2: {
        if (tag == 16) {
         parse_ability_upgrades:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_ability_upgrades())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ability_upgrades())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ability_upgrades;
        if (input->ExpectTag(24)) goto parse_player_slot;
        break;
      }

      // optional uint32 player_slot = 3;
      case 3: {
        if (tag == 24) {
         parse_player_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_slot_)));
          set_has_player_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_equipped_econ_items;
        break;
      }

      // repeated .CSOEconItem equipped_econ_items = 4;
      case 4: {
        if (tag == 34) {
         parse_equipped_econ_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipped_econ_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_equipped_econ_items;
        if (input->ExpectTag(42)) goto parse_kills;
        break;
      }

      // repeated .CDOTAMatchMetadata.Team.PlayerKill kills = 5;
      case 5: {
        if (tag == 42) {
         parse_kills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kills()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_kills;
        if (input->ExpectTag(50)) goto parse_items;
        break;
      }

      // repeated .CDOTAMatchMetadata.Team.ItemPurchase items = 6;
      case 6: {
        if (tag == 50) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_items;
        if (input->ExpectTag(56)) goto parse_avg_kills_x16;
        break;
      }

      // optional uint32 avg_kills_x16 = 7;
      case 7: {
        if (tag == 56) {
         parse_avg_kills_x16:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_kills_x16_)));
          set_has_avg_kills_x16();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_avg_deaths_x16;
        break;
      }

      // optional uint32 avg_deaths_x16 = 8;
      case 8: {
        if (tag == 64) {
         parse_avg_deaths_x16:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_deaths_x16_)));
          set_has_avg_deaths_x16();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_avg_assists_x16;
        break;
      }

      // optional uint32 avg_assists_x16 = 9;
      case 9: {
        if (tag == 72) {
         parse_avg_assists_x16:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_assists_x16_)));
          set_has_avg_assists_x16();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_avg_gpm_x16;
        break;
      }

      // optional uint32 avg_gpm_x16 = 10;
      case 10: {
        if (tag == 80) {
         parse_avg_gpm_x16:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_gpm_x16_)));
          set_has_avg_gpm_x16();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_avg_xpm_x16;
        break;
      }

      // optional uint32 avg_xpm_x16 = 11;
      case 11: {
        if (tag == 88) {
         parse_avg_xpm_x16:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_xpm_x16_)));
          set_has_avg_xpm_x16();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_best_kills_x16;
        break;
      }

      // optional uint32 best_kills_x16 = 12;
      case 12: {
        if (tag == 96) {
         parse_best_kills_x16:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_kills_x16_)));
          set_has_best_kills_x16();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_best_assists_x16;
        break;
      }

      // optional uint32 best_assists_x16 = 13;
      case 13: {
        if (tag == 104) {
         parse_best_assists_x16:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_assists_x16_)));
          set_has_best_assists_x16();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_best_gpm_x16;
        break;
      }

      // optional uint32 best_gpm_x16 = 14;
      case 14: {
        if (tag == 112) {
         parse_best_gpm_x16:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_gpm_x16_)));
          set_has_best_gpm_x16();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_best_xpm_x16;
        break;
      }

      // optional uint32 best_xpm_x16 = 15;
      case 15: {
        if (tag == 120) {
         parse_best_xpm_x16:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_xpm_x16_)));
          set_has_best_xpm_x16();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_win_streak;
        break;
      }

      // optional uint32 win_streak = 16;
      case 16: {
        if (tag == 128) {
         parse_win_streak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_streak_)));
          set_has_win_streak();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_best_win_streak;
        break;
      }

      // optional uint32 best_win_streak = 17;
      case 17: {
        if (tag == 136) {
         parse_best_win_streak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_win_streak_)));
          set_has_best_win_streak();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_fight_score;
        break;
      }

      // optional float fight_score = 18;
      case 18: {
        if (tag == 149) {
         parse_fight_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fight_score_)));
          set_has_fight_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(157)) goto parse_farm_score;
        break;
      }

      // optional float farm_score = 19;
      case 19: {
        if (tag == 157) {
         parse_farm_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &farm_score_)));
          set_has_farm_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(165)) goto parse_support_score;
        break;
      }

      // optional float support_score = 20;
      case 20: {
        if (tag == 165) {
         parse_support_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &support_score_)));
          set_has_support_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(173)) goto parse_push_score;
        break;
      }

      // optional float push_score = 21;
      case 21: {
        if (tag == 173) {
         parse_push_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &push_score_)));
          set_has_push_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_level_up_times;
        break;
      }

      // repeated uint32 level_up_times = 22;
      case 22: {
        if (tag == 176) {
         parse_level_up_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 176, input, this->mutable_level_up_times())));
        } else if (tag == 178) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_level_up_times())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_level_up_times;
        if (input->ExpectTag(189)) goto parse_graph_net_worth;
        break;
      }

      // repeated float graph_net_worth = 23;
      case 23: {
        if (tag == 189) {
         parse_graph_net_worth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 189, input, this->mutable_graph_net_worth())));
        } else if (tag == 186) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_graph_net_worth())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(189)) goto parse_graph_net_worth;
        if (input->ExpectTag(194)) goto parse_inventory_snapshot;
        break;
      }

      // repeated .CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
      case 24: {
        if (tag == 194) {
         parse_inventory_snapshot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inventory_snapshot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_inventory_snapshot;
        if (input->ExpectTag(200)) goto parse_avg_stats_calibrated;
        break;
      }

      // optional bool avg_stats_calibrated = 25;
      case 25: {
        if (tag == 200) {
         parse_avg_stats_calibrated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &avg_stats_calibrated_)));
          set_has_avg_stats_calibrated();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_auto_style_criteria;
        break;
      }

      // repeated .CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
      case 26: {
        if (tag == 210) {
         parse_auto_style_criteria:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_auto_style_criteria()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_auto_style_criteria;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAMatchMetadata.Team.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAMatchMetadata.Team.Player)
  return false;
#undef DO_
}

void CDOTAMatchMetadata_Team_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAMatchMetadata.Team.Player)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated uint32 ability_upgrades = 2;
  for (int i = 0; i < this->ability_upgrades_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->ability_upgrades(i), output);
  }

  // optional uint32 player_slot = 3;
  if (has_player_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_slot(), output);
  }

  // repeated .CSOEconItem equipped_econ_items = 4;
  for (int i = 0; i < this->equipped_econ_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->equipped_econ_items(i), output);
  }

  // repeated .CDOTAMatchMetadata.Team.PlayerKill kills = 5;
  for (int i = 0; i < this->kills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->kills(i), output);
  }

  // repeated .CDOTAMatchMetadata.Team.ItemPurchase items = 6;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->items(i), output);
  }

  // optional uint32 avg_kills_x16 = 7;
  if (has_avg_kills_x16()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->avg_kills_x16(), output);
  }

  // optional uint32 avg_deaths_x16 = 8;
  if (has_avg_deaths_x16()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->avg_deaths_x16(), output);
  }

  // optional uint32 avg_assists_x16 = 9;
  if (has_avg_assists_x16()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->avg_assists_x16(), output);
  }

  // optional uint32 avg_gpm_x16 = 10;
  if (has_avg_gpm_x16()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->avg_gpm_x16(), output);
  }

  // optional uint32 avg_xpm_x16 = 11;
  if (has_avg_xpm_x16()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->avg_xpm_x16(), output);
  }

  // optional uint32 best_kills_x16 = 12;
  if (has_best_kills_x16()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->best_kills_x16(), output);
  }

  // optional uint32 best_assists_x16 = 13;
  if (has_best_assists_x16()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->best_assists_x16(), output);
  }

  // optional uint32 best_gpm_x16 = 14;
  if (has_best_gpm_x16()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->best_gpm_x16(), output);
  }

  // optional uint32 best_xpm_x16 = 15;
  if (has_best_xpm_x16()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->best_xpm_x16(), output);
  }

  // optional uint32 win_streak = 16;
  if (has_win_streak()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->win_streak(), output);
  }

  // optional uint32 best_win_streak = 17;
  if (has_best_win_streak()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->best_win_streak(), output);
  }

  // optional float fight_score = 18;
  if (has_fight_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->fight_score(), output);
  }

  // optional float farm_score = 19;
  if (has_farm_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->farm_score(), output);
  }

  // optional float support_score = 20;
  if (has_support_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->support_score(), output);
  }

  // optional float push_score = 21;
  if (has_push_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->push_score(), output);
  }

  // repeated uint32 level_up_times = 22;
  for (int i = 0; i < this->level_up_times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      22, this->level_up_times(i), output);
  }

  // repeated float graph_net_worth = 23;
  for (int i = 0; i < this->graph_net_worth_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      23, this->graph_net_worth(i), output);
  }

  // repeated .CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
  for (int i = 0; i < this->inventory_snapshot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->inventory_snapshot(i), output);
  }

  // optional bool avg_stats_calibrated = 25;
  if (has_avg_stats_calibrated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->avg_stats_calibrated(), output);
  }

  // repeated .CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
  for (int i = 0; i < this->auto_style_criteria_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->auto_style_criteria(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAMatchMetadata.Team.Player)
}

::google::protobuf::uint8* CDOTAMatchMetadata_Team_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.Player)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated uint32 ability_upgrades = 2;
  for (int i = 0; i < this->ability_upgrades_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->ability_upgrades(i), target);
  }

  // optional uint32 player_slot = 3;
  if (has_player_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_slot(), target);
  }

  // repeated .CSOEconItem equipped_econ_items = 4;
  for (int i = 0; i < this->equipped_econ_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->equipped_econ_items(i), target);
  }

  // repeated .CDOTAMatchMetadata.Team.PlayerKill kills = 5;
  for (int i = 0; i < this->kills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->kills(i), target);
  }

  // repeated .CDOTAMatchMetadata.Team.ItemPurchase items = 6;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->items(i), target);
  }

  // optional uint32 avg_kills_x16 = 7;
  if (has_avg_kills_x16()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->avg_kills_x16(), target);
  }

  // optional uint32 avg_deaths_x16 = 8;
  if (has_avg_deaths_x16()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->avg_deaths_x16(), target);
  }

  // optional uint32 avg_assists_x16 = 9;
  if (has_avg_assists_x16()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->avg_assists_x16(), target);
  }

  // optional uint32 avg_gpm_x16 = 10;
  if (has_avg_gpm_x16()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->avg_gpm_x16(), target);
  }

  // optional uint32 avg_xpm_x16 = 11;
  if (has_avg_xpm_x16()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->avg_xpm_x16(), target);
  }

  // optional uint32 best_kills_x16 = 12;
  if (has_best_kills_x16()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->best_kills_x16(), target);
  }

  // optional uint32 best_assists_x16 = 13;
  if (has_best_assists_x16()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->best_assists_x16(), target);
  }

  // optional uint32 best_gpm_x16 = 14;
  if (has_best_gpm_x16()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->best_gpm_x16(), target);
  }

  // optional uint32 best_xpm_x16 = 15;
  if (has_best_xpm_x16()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->best_xpm_x16(), target);
  }

  // optional uint32 win_streak = 16;
  if (has_win_streak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->win_streak(), target);
  }

  // optional uint32 best_win_streak = 17;
  if (has_best_win_streak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->best_win_streak(), target);
  }

  // optional float fight_score = 18;
  if (has_fight_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->fight_score(), target);
  }

  // optional float farm_score = 19;
  if (has_farm_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->farm_score(), target);
  }

  // optional float support_score = 20;
  if (has_support_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->support_score(), target);
  }

  // optional float push_score = 21;
  if (has_push_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->push_score(), target);
  }

  // repeated uint32 level_up_times = 22;
  for (int i = 0; i < this->level_up_times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(22, this->level_up_times(i), target);
  }

  // repeated float graph_net_worth = 23;
  for (int i = 0; i < this->graph_net_worth_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(23, this->graph_net_worth(i), target);
  }

  // repeated .CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
  for (int i = 0; i < this->inventory_snapshot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->inventory_snapshot(i), target);
  }

  // optional bool avg_stats_calibrated = 25;
  if (has_avg_stats_calibrated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->avg_stats_calibrated(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
  for (int i = 0; i < this->auto_style_criteria_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->auto_style_criteria(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.Player)
  return target;
}

int CDOTAMatchMetadata_Team_Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 player_slot = 3;
    if (has_player_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_slot());
    }

    // optional uint32 avg_kills_x16 = 7;
    if (has_avg_kills_x16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_kills_x16());
    }

    // optional uint32 avg_deaths_x16 = 8;
    if (has_avg_deaths_x16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_deaths_x16());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 avg_assists_x16 = 9;
    if (has_avg_assists_x16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_assists_x16());
    }

    // optional uint32 avg_gpm_x16 = 10;
    if (has_avg_gpm_x16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_gpm_x16());
    }

    // optional uint32 avg_xpm_x16 = 11;
    if (has_avg_xpm_x16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_xpm_x16());
    }

    // optional uint32 best_kills_x16 = 12;
    if (has_best_kills_x16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_kills_x16());
    }

    // optional uint32 best_assists_x16 = 13;
    if (has_best_assists_x16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_assists_x16());
    }

    // optional uint32 best_gpm_x16 = 14;
    if (has_best_gpm_x16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_gpm_x16());
    }

    // optional uint32 best_xpm_x16 = 15;
    if (has_best_xpm_x16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_xpm_x16());
    }

    // optional uint32 win_streak = 16;
    if (has_win_streak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_streak());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 best_win_streak = 17;
    if (has_best_win_streak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_win_streak());
    }

    // optional float fight_score = 18;
    if (has_fight_score()) {
      total_size += 2 + 4;
    }

    // optional float farm_score = 19;
    if (has_farm_score()) {
      total_size += 2 + 4;
    }

    // optional float support_score = 20;
    if (has_support_score()) {
      total_size += 2 + 4;
    }

    // optional float push_score = 21;
    if (has_push_score()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool avg_stats_calibrated = 25;
    if (has_avg_stats_calibrated()) {
      total_size += 2 + 1;
    }

  }
  // repeated uint32 ability_upgrades = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->ability_upgrades_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ability_upgrades(i));
    }
    total_size += 1 * this->ability_upgrades_size() + data_size;
  }

  // repeated .CSOEconItem equipped_econ_items = 4;
  total_size += 1 * this->equipped_econ_items_size();
  for (int i = 0; i < this->equipped_econ_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipped_econ_items(i));
  }

  // repeated .CDOTAMatchMetadata.Team.PlayerKill kills = 5;
  total_size += 1 * this->kills_size();
  for (int i = 0; i < this->kills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kills(i));
  }

  // repeated .CDOTAMatchMetadata.Team.ItemPurchase items = 6;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated uint32 level_up_times = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->level_up_times_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->level_up_times(i));
    }
    total_size += 2 * this->level_up_times_size() + data_size;
  }

  // repeated float graph_net_worth = 23;
  {
    int data_size = 0;
    data_size = 4 * this->graph_net_worth_size();
    total_size += 2 * this->graph_net_worth_size() + data_size;
  }

  // repeated .CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
  total_size += 2 * this->inventory_snapshot_size();
  for (int i = 0; i < this->inventory_snapshot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inventory_snapshot(i));
  }

  // repeated .CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
  total_size += 2 * this->auto_style_criteria_size();
  for (int i = 0; i < this->auto_style_criteria_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->auto_style_criteria(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMatchMetadata_Team_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAMatchMetadata_Team_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_Player::MergeFrom(const CDOTAMatchMetadata_Team_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  ability_upgrades_.MergeFrom(from.ability_upgrades_);
  equipped_econ_items_.MergeFrom(from.equipped_econ_items_);
  kills_.MergeFrom(from.kills_);
  items_.MergeFrom(from.items_);
  level_up_times_.MergeFrom(from.level_up_times_);
  graph_net_worth_.MergeFrom(from.graph_net_worth_);
  inventory_snapshot_.MergeFrom(from.inventory_snapshot_);
  auto_style_criteria_.MergeFrom(from.auto_style_criteria_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_player_slot()) {
      set_player_slot(from.player_slot());
    }
    if (from.has_avg_kills_x16()) {
      set_avg_kills_x16(from.avg_kills_x16());
    }
    if (from.has_avg_deaths_x16()) {
      set_avg_deaths_x16(from.avg_deaths_x16());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_avg_assists_x16()) {
      set_avg_assists_x16(from.avg_assists_x16());
    }
    if (from.has_avg_gpm_x16()) {
      set_avg_gpm_x16(from.avg_gpm_x16());
    }
    if (from.has_avg_xpm_x16()) {
      set_avg_xpm_x16(from.avg_xpm_x16());
    }
    if (from.has_best_kills_x16()) {
      set_best_kills_x16(from.best_kills_x16());
    }
    if (from.has_best_assists_x16()) {
      set_best_assists_x16(from.best_assists_x16());
    }
    if (from.has_best_gpm_x16()) {
      set_best_gpm_x16(from.best_gpm_x16());
    }
    if (from.has_best_xpm_x16()) {
      set_best_xpm_x16(from.best_xpm_x16());
    }
    if (from.has_win_streak()) {
      set_win_streak(from.win_streak());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_best_win_streak()) {
      set_best_win_streak(from.best_win_streak());
    }
    if (from.has_fight_score()) {
      set_fight_score(from.fight_score());
    }
    if (from.has_farm_score()) {
      set_farm_score(from.farm_score());
    }
    if (from.has_support_score()) {
      set_support_score(from.support_score());
    }
    if (from.has_push_score()) {
      set_push_score(from.push_score());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_avg_stats_calibrated()) {
      set_avg_stats_calibrated(from.avg_stats_calibrated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAMatchMetadata_Team_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_Player::CopyFrom(const CDOTAMatchMetadata_Team_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_Player::IsInitialized() const {

  return true;
}

void CDOTAMatchMetadata_Team_Player::Swap(CDOTAMatchMetadata_Team_Player* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    ability_upgrades_.Swap(&other->ability_upgrades_);
    std::swap(player_slot_, other->player_slot_);
    equipped_econ_items_.Swap(&other->equipped_econ_items_);
    kills_.Swap(&other->kills_);
    items_.Swap(&other->items_);
    std::swap(avg_kills_x16_, other->avg_kills_x16_);
    std::swap(avg_deaths_x16_, other->avg_deaths_x16_);
    std::swap(avg_assists_x16_, other->avg_assists_x16_);
    std::swap(avg_gpm_x16_, other->avg_gpm_x16_);
    std::swap(avg_xpm_x16_, other->avg_xpm_x16_);
    std::swap(best_kills_x16_, other->best_kills_x16_);
    std::swap(best_assists_x16_, other->best_assists_x16_);
    std::swap(best_gpm_x16_, other->best_gpm_x16_);
    std::swap(best_xpm_x16_, other->best_xpm_x16_);
    std::swap(win_streak_, other->win_streak_);
    std::swap(best_win_streak_, other->best_win_streak_);
    std::swap(fight_score_, other->fight_score_);
    std::swap(farm_score_, other->farm_score_);
    std::swap(support_score_, other->support_score_);
    std::swap(push_score_, other->push_score_);
    level_up_times_.Swap(&other->level_up_times_);
    graph_net_worth_.Swap(&other->graph_net_worth_);
    inventory_snapshot_.Swap(&other->inventory_snapshot_);
    std::swap(avg_stats_calibrated_, other->avg_stats_calibrated_);
    auto_style_criteria_.Swap(&other->auto_style_criteria_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAMatchMetadata_Team_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAMatchMetadata_Team_Player_descriptor_;
  metadata.reflection = CDOTAMatchMetadata_Team_Player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAMatchMetadata_Team::kDotaTeamFieldNumber;
const int CDOTAMatchMetadata_Team::kPlayersFieldNumber;
const int CDOTAMatchMetadata_Team::kGraphExperienceFieldNumber;
const int CDOTAMatchMetadata_Team::kGraphGoldEarnedFieldNumber;
const int CDOTAMatchMetadata_Team::kGraphNetWorthFieldNumber;
const int CDOTAMatchMetadata_Team::kCmFirstPickFieldNumber;
const int CDOTAMatchMetadata_Team::kCmCaptainPlayerIdFieldNumber;
const int CDOTAMatchMetadata_Team::kCmBansFieldNumber;
const int CDOTAMatchMetadata_Team::kCmPicksFieldNumber;
const int CDOTAMatchMetadata_Team::kCmPenaltyFieldNumber;
#endif  // !_MSC_VER

CDOTAMatchMetadata_Team::CDOTAMatchMetadata_Team()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAMatchMetadata.Team)
}

void CDOTAMatchMetadata_Team::InitAsDefaultInstance() {
}

CDOTAMatchMetadata_Team::CDOTAMatchMetadata_Team(const CDOTAMatchMetadata_Team& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team)
}

void CDOTAMatchMetadata_Team::SharedCtor() {
  _cached_size_ = 0;
  dota_team_ = 0u;
  cm_first_pick_ = false;
  cm_captain_player_id_ = 0u;
  cm_penalty_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAMatchMetadata_Team::~CDOTAMatchMetadata_Team() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team)
  SharedDtor();
}

void CDOTAMatchMetadata_Team::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAMatchMetadata_Team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMatchMetadata_Team::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAMatchMetadata_Team_descriptor_;
}

const CDOTAMatchMetadata_Team& CDOTAMatchMetadata_Team::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto();
  return *default_instance_;
}

CDOTAMatchMetadata_Team* CDOTAMatchMetadata_Team::default_instance_ = NULL;

CDOTAMatchMetadata_Team* CDOTAMatchMetadata_Team::New() const {
  return new CDOTAMatchMetadata_Team;
}

void CDOTAMatchMetadata_Team::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAMatchMetadata_Team*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 97) {
    ZR_(dota_team_, cm_first_pick_);
    cm_captain_player_id_ = 0u;
  }
  cm_penalty_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  players_.Clear();
  graph_experience_.Clear();
  graph_gold_earned_.Clear();
  graph_net_worth_.Clear();
  cm_bans_.Clear();
  cm_picks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAMatchMetadata_Team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAMatchMetadata.Team)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dota_team = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dota_team_)));
          set_has_dota_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_players;
        break;
      }

      // repeated .CDOTAMatchMetadata.Team.Player players = 2;
      case 2: {
        if (tag == 18) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_players;
        if (input->ExpectTag(29)) goto parse_graph_experience;
        break;
      }

      // repeated float graph_experience = 3;
      case 3: {
        if (tag == 29) {
         parse_graph_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_graph_experience())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_graph_experience())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_graph_experience;
        if (input->ExpectTag(37)) goto parse_graph_gold_earned;
        break;
      }

      // repeated float graph_gold_earned = 4;
      case 4: {
        if (tag == 37) {
         parse_graph_gold_earned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_graph_gold_earned())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_graph_gold_earned())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_graph_gold_earned;
        if (input->ExpectTag(45)) goto parse_graph_net_worth;
        break;
      }

      // repeated float graph_net_worth = 5;
      case 5: {
        if (tag == 45) {
         parse_graph_net_worth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_graph_net_worth())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_graph_net_worth())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_graph_net_worth;
        if (input->ExpectTag(48)) goto parse_cm_first_pick;
        break;
      }

      // optional bool cm_first_pick = 6;
      case 6: {
        if (tag == 48) {
         parse_cm_first_pick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cm_first_pick_)));
          set_has_cm_first_pick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cm_captain_player_id;
        break;
      }

      // optional uint32 cm_captain_player_id = 7;
      case 7: {
        if (tag == 56) {
         parse_cm_captain_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cm_captain_player_id_)));
          set_has_cm_captain_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_cm_bans;
        break;
      }

      // repeated uint32 cm_bans = 8;
      case 8: {
        if (tag == 64) {
         parse_cm_bans:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_cm_bans())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cm_bans())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_cm_bans;
        if (input->ExpectTag(72)) goto parse_cm_picks;
        break;
      }

      // repeated uint32 cm_picks = 9;
      case 9: {
        if (tag == 72) {
         parse_cm_picks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_cm_picks())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cm_picks())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_cm_picks;
        if (input->ExpectTag(80)) goto parse_cm_penalty;
        break;
      }

      // optional uint32 cm_penalty = 10;
      case 10: {
        if (tag == 80) {
         parse_cm_penalty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cm_penalty_)));
          set_has_cm_penalty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAMatchMetadata.Team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAMatchMetadata.Team)
  return false;
#undef DO_
}

void CDOTAMatchMetadata_Team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAMatchMetadata.Team)
  // optional uint32 dota_team = 1;
  if (has_dota_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dota_team(), output);
  }

  // repeated .CDOTAMatchMetadata.Team.Player players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->players(i), output);
  }

  // repeated float graph_experience = 3;
  for (int i = 0; i < this->graph_experience_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->graph_experience(i), output);
  }

  // repeated float graph_gold_earned = 4;
  for (int i = 0; i < this->graph_gold_earned_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->graph_gold_earned(i), output);
  }

  // repeated float graph_net_worth = 5;
  for (int i = 0; i < this->graph_net_worth_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->graph_net_worth(i), output);
  }

  // optional bool cm_first_pick = 6;
  if (has_cm_first_pick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->cm_first_pick(), output);
  }

  // optional uint32 cm_captain_player_id = 7;
  if (has_cm_captain_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cm_captain_player_id(), output);
  }

  // repeated uint32 cm_bans = 8;
  for (int i = 0; i < this->cm_bans_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->cm_bans(i), output);
  }

  // repeated uint32 cm_picks = 9;
  for (int i = 0; i < this->cm_picks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->cm_picks(i), output);
  }

  // optional uint32 cm_penalty = 10;
  if (has_cm_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->cm_penalty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAMatchMetadata.Team)
}

::google::protobuf::uint8* CDOTAMatchMetadata_Team::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team)
  // optional uint32 dota_team = 1;
  if (has_dota_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dota_team(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.Player players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->players(i), target);
  }

  // repeated float graph_experience = 3;
  for (int i = 0; i < this->graph_experience_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->graph_experience(i), target);
  }

  // repeated float graph_gold_earned = 4;
  for (int i = 0; i < this->graph_gold_earned_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->graph_gold_earned(i), target);
  }

  // repeated float graph_net_worth = 5;
  for (int i = 0; i < this->graph_net_worth_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->graph_net_worth(i), target);
  }

  // optional bool cm_first_pick = 6;
  if (has_cm_first_pick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->cm_first_pick(), target);
  }

  // optional uint32 cm_captain_player_id = 7;
  if (has_cm_captain_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cm_captain_player_id(), target);
  }

  // repeated uint32 cm_bans = 8;
  for (int i = 0; i < this->cm_bans_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->cm_bans(i), target);
  }

  // repeated uint32 cm_picks = 9;
  for (int i = 0; i < this->cm_picks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->cm_picks(i), target);
  }

  // optional uint32 cm_penalty = 10;
  if (has_cm_penalty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->cm_penalty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team)
  return target;
}

int CDOTAMatchMetadata_Team::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dota_team = 1;
    if (has_dota_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dota_team());
    }

    // optional bool cm_first_pick = 6;
    if (has_cm_first_pick()) {
      total_size += 1 + 1;
    }

    // optional uint32 cm_captain_player_id = 7;
    if (has_cm_captain_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cm_captain_player_id());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 cm_penalty = 10;
    if (has_cm_penalty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cm_penalty());
    }

  }
  // repeated .CDOTAMatchMetadata.Team.Player players = 2;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  // repeated float graph_experience = 3;
  {
    int data_size = 0;
    data_size = 4 * this->graph_experience_size();
    total_size += 1 * this->graph_experience_size() + data_size;
  }

  // repeated float graph_gold_earned = 4;
  {
    int data_size = 0;
    data_size = 4 * this->graph_gold_earned_size();
    total_size += 1 * this->graph_gold_earned_size() + data_size;
  }

  // repeated float graph_net_worth = 5;
  {
    int data_size = 0;
    data_size = 4 * this->graph_net_worth_size();
    total_size += 1 * this->graph_net_worth_size() + data_size;
  }

  // repeated uint32 cm_bans = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->cm_bans_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cm_bans(i));
    }
    total_size += 1 * this->cm_bans_size() + data_size;
  }

  // repeated uint32 cm_picks = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->cm_picks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cm_picks(i));
    }
    total_size += 1 * this->cm_picks_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMatchMetadata_Team::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAMatchMetadata_Team*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team::MergeFrom(const CDOTAMatchMetadata_Team& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  graph_experience_.MergeFrom(from.graph_experience_);
  graph_gold_earned_.MergeFrom(from.graph_gold_earned_);
  graph_net_worth_.MergeFrom(from.graph_net_worth_);
  cm_bans_.MergeFrom(from.cm_bans_);
  cm_picks_.MergeFrom(from.cm_picks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dota_team()) {
      set_dota_team(from.dota_team());
    }
    if (from.has_cm_first_pick()) {
      set_cm_first_pick(from.cm_first_pick());
    }
    if (from.has_cm_captain_player_id()) {
      set_cm_captain_player_id(from.cm_captain_player_id());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_cm_penalty()) {
      set_cm_penalty(from.cm_penalty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAMatchMetadata_Team::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team::CopyFrom(const CDOTAMatchMetadata_Team& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team::IsInitialized() const {

  return true;
}

void CDOTAMatchMetadata_Team::Swap(CDOTAMatchMetadata_Team* other) {
  if (other != this) {
    std::swap(dota_team_, other->dota_team_);
    players_.Swap(&other->players_);
    graph_experience_.Swap(&other->graph_experience_);
    graph_gold_earned_.Swap(&other->graph_gold_earned_);
    graph_net_worth_.Swap(&other->graph_net_worth_);
    std::swap(cm_first_pick_, other->cm_first_pick_);
    std::swap(cm_captain_player_id_, other->cm_captain_player_id_);
    cm_bans_.Swap(&other->cm_bans_);
    cm_picks_.Swap(&other->cm_picks_);
    std::swap(cm_penalty_, other->cm_penalty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAMatchMetadata_Team::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAMatchMetadata_Team_descriptor_;
  metadata.reflection = CDOTAMatchMetadata_Team_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAMatchMetadata::kTeamsFieldNumber;
const int CDOTAMatchMetadata::kItemRewardsFieldNumber;
const int CDOTAMatchMetadata::kLobbyIdFieldNumber;
const int CDOTAMatchMetadata::kReportUntilTimeFieldNumber;
#endif  // !_MSC_VER

CDOTAMatchMetadata::CDOTAMatchMetadata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAMatchMetadata)
}

void CDOTAMatchMetadata::InitAsDefaultInstance() {
}

CDOTAMatchMetadata::CDOTAMatchMetadata(const CDOTAMatchMetadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata)
}

void CDOTAMatchMetadata::SharedCtor() {
  _cached_size_ = 0;
  lobby_id_ = GOOGLE_ULONGLONG(0);
  report_until_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAMatchMetadata::~CDOTAMatchMetadata() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata)
  SharedDtor();
}

void CDOTAMatchMetadata::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAMatchMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMatchMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAMatchMetadata_descriptor_;
}

const CDOTAMatchMetadata& CDOTAMatchMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto();
  return *default_instance_;
}

CDOTAMatchMetadata* CDOTAMatchMetadata::default_instance_ = NULL;

CDOTAMatchMetadata* CDOTAMatchMetadata::New() const {
  return new CDOTAMatchMetadata;
}

void CDOTAMatchMetadata::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAMatchMetadata*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(lobby_id_, report_until_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  teams_.Clear();
  item_rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAMatchMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAMatchMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CDOTAMatchMetadata.Team teams = 1;
      case 1: {
        if (tag == 10) {
         parse_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_teams;
        if (input->ExpectTag(18)) goto parse_item_rewards;
        break;
      }

      // repeated .CLobbyTimedRewardDetails item_rewards = 2;
      case 2: {
        if (tag == 18) {
         parse_item_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item_rewards;
        if (input->ExpectTag(25)) goto parse_lobby_id;
        break;
      }

      // optional fixed64 lobby_id = 3;
      case 3: {
        if (tag == 25) {
         parse_lobby_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lobby_id_)));
          set_has_lobby_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_report_until_time;
        break;
      }

      // optional fixed64 report_until_time = 4;
      case 4: {
        if (tag == 33) {
         parse_report_until_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &report_until_time_)));
          set_has_report_until_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAMatchMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAMatchMetadata)
  return false;
#undef DO_
}

void CDOTAMatchMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAMatchMetadata)
  // repeated .CDOTAMatchMetadata.Team teams = 1;
  for (int i = 0; i < this->teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teams(i), output);
  }

  // repeated .CLobbyTimedRewardDetails item_rewards = 2;
  for (int i = 0; i < this->item_rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_rewards(i), output);
  }

  // optional fixed64 lobby_id = 3;
  if (has_lobby_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->lobby_id(), output);
  }

  // optional fixed64 report_until_time = 4;
  if (has_report_until_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->report_until_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAMatchMetadata)
}

::google::protobuf::uint8* CDOTAMatchMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata)
  // repeated .CDOTAMatchMetadata.Team teams = 1;
  for (int i = 0; i < this->teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teams(i), target);
  }

  // repeated .CLobbyTimedRewardDetails item_rewards = 2;
  for (int i = 0; i < this->item_rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_rewards(i), target);
  }

  // optional fixed64 lobby_id = 3;
  if (has_lobby_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->lobby_id(), target);
  }

  // optional fixed64 report_until_time = 4;
  if (has_report_until_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->report_until_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata)
  return target;
}

int CDOTAMatchMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional fixed64 lobby_id = 3;
    if (has_lobby_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 report_until_time = 4;
    if (has_report_until_time()) {
      total_size += 1 + 8;
    }

  }
  // repeated .CDOTAMatchMetadata.Team teams = 1;
  total_size += 1 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }

  // repeated .CLobbyTimedRewardDetails item_rewards = 2;
  total_size += 1 * this->item_rewards_size();
  for (int i = 0; i < this->item_rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMatchMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAMatchMetadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAMatchMetadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata::MergeFrom(const CDOTAMatchMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  teams_.MergeFrom(from.teams_);
  item_rewards_.MergeFrom(from.item_rewards_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_lobby_id()) {
      set_lobby_id(from.lobby_id());
    }
    if (from.has_report_until_time()) {
      set_report_until_time(from.report_until_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAMatchMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata::CopyFrom(const CDOTAMatchMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata::IsInitialized() const {

  return true;
}

void CDOTAMatchMetadata::Swap(CDOTAMatchMetadata* other) {
  if (other != this) {
    teams_.Swap(&other->teams_);
    item_rewards_.Swap(&other->item_rewards_);
    std::swap(lobby_id_, other->lobby_id_);
    std::swap(report_until_time_, other->report_until_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAMatchMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAMatchMetadata_descriptor_;
  metadata.reflection = CDOTAMatchMetadata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAMatchPrivateMetadata_Team_Player::kAccountIdFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Player::kPlayerSlotFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Player::kPositionStreamFieldNumber;
#endif  // !_MSC_VER

CDOTAMatchPrivateMetadata_Team_Player::CDOTAMatchPrivateMetadata_Team_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAMatchPrivateMetadata.Team.Player)
}

void CDOTAMatchPrivateMetadata_Team_Player::InitAsDefaultInstance() {
}

CDOTAMatchPrivateMetadata_Team_Player::CDOTAMatchPrivateMetadata_Team_Player(const CDOTAMatchPrivateMetadata_Team_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.Team.Player)
}

void CDOTAMatchPrivateMetadata_Team_Player::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_id_ = 0u;
  player_slot_ = 0u;
  position_stream_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAMatchPrivateMetadata_Team_Player::~CDOTAMatchPrivateMetadata_Team_Player() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.Team.Player)
  SharedDtor();
}

void CDOTAMatchPrivateMetadata_Team_Player::SharedDtor() {
  if (position_stream_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_stream_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAMatchPrivateMetadata_Team_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMatchPrivateMetadata_Team_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAMatchPrivateMetadata_Team_Player_descriptor_;
}

const CDOTAMatchPrivateMetadata_Team_Player& CDOTAMatchPrivateMetadata_Team_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto();
  return *default_instance_;
}

CDOTAMatchPrivateMetadata_Team_Player* CDOTAMatchPrivateMetadata_Team_Player::default_instance_ = NULL;

CDOTAMatchPrivateMetadata_Team_Player* CDOTAMatchPrivateMetadata_Team_Player::New() const {
  return new CDOTAMatchPrivateMetadata_Team_Player;
}

void CDOTAMatchPrivateMetadata_Team_Player::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAMatchPrivateMetadata_Team_Player*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(account_id_, player_slot_);
    if (has_position_stream()) {
      if (position_stream_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        position_stream_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAMatchPrivateMetadata_Team_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAMatchPrivateMetadata.Team.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_slot;
        break;
      }

      // optional uint32 player_slot = 2;
      case 2: {
        if (tag == 16) {
         parse_player_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_slot_)));
          set_has_player_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_position_stream;
        break;
      }

      // optional bytes position_stream = 3;
      case 3: {
        if (tag == 26) {
         parse_position_stream:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_position_stream()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAMatchPrivateMetadata.Team.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAMatchPrivateMetadata.Team.Player)
  return false;
#undef DO_
}

void CDOTAMatchPrivateMetadata_Team_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAMatchPrivateMetadata.Team.Player)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 player_slot = 2;
  if (has_player_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_slot(), output);
  }

  // optional bytes position_stream = 3;
  if (has_position_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->position_stream(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAMatchPrivateMetadata.Team.Player)
}

::google::protobuf::uint8* CDOTAMatchPrivateMetadata_Team_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.Team.Player)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 player_slot = 2;
  if (has_player_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_slot(), target);
  }

  // optional bytes position_stream = 3;
  if (has_position_stream()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->position_stream(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.Team.Player)
  return target;
}

int CDOTAMatchPrivateMetadata_Team_Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 player_slot = 2;
    if (has_player_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_slot());
    }

    // optional bytes position_stream = 3;
    if (has_position_stream()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->position_stream());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMatchPrivateMetadata_Team_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata_Team_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAMatchPrivateMetadata_Team_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata_Team_Player::MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_player_slot()) {
      set_player_slot(from.player_slot());
    }
    if (from.has_position_stream()) {
      set_position_stream(from.position_stream());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAMatchPrivateMetadata_Team_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata_Team_Player::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player::IsInitialized() const {

  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player::Swap(CDOTAMatchPrivateMetadata_Team_Player* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(player_slot_, other->player_slot_);
    std::swap(position_stream_, other->position_stream_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAMatchPrivateMetadata_Team_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAMatchPrivateMetadata_Team_Player_descriptor_;
  metadata.reflection = CDOTAMatchPrivateMetadata_Team_Player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAMatchPrivateMetadata_Team_Building::kUnitNameFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Building::kPositionQuantXFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Building::kPositionQuantYFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Building::kDeathTimeFieldNumber;
#endif  // !_MSC_VER

CDOTAMatchPrivateMetadata_Team_Building::CDOTAMatchPrivateMetadata_Team_Building()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAMatchPrivateMetadata.Team.Building)
}

void CDOTAMatchPrivateMetadata_Team_Building::InitAsDefaultInstance() {
}

CDOTAMatchPrivateMetadata_Team_Building::CDOTAMatchPrivateMetadata_Team_Building(const CDOTAMatchPrivateMetadata_Team_Building& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.Team.Building)
}

void CDOTAMatchPrivateMetadata_Team_Building::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  unit_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_quant_x_ = 0u;
  position_quant_y_ = 0u;
  death_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAMatchPrivateMetadata_Team_Building::~CDOTAMatchPrivateMetadata_Team_Building() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.Team.Building)
  SharedDtor();
}

void CDOTAMatchPrivateMetadata_Team_Building::SharedDtor() {
  if (unit_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unit_name_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAMatchPrivateMetadata_Team_Building::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMatchPrivateMetadata_Team_Building::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAMatchPrivateMetadata_Team_Building_descriptor_;
}

const CDOTAMatchPrivateMetadata_Team_Building& CDOTAMatchPrivateMetadata_Team_Building::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto();
  return *default_instance_;
}

CDOTAMatchPrivateMetadata_Team_Building* CDOTAMatchPrivateMetadata_Team_Building::default_instance_ = NULL;

CDOTAMatchPrivateMetadata_Team_Building* CDOTAMatchPrivateMetadata_Team_Building::New() const {
  return new CDOTAMatchPrivateMetadata_Team_Building;
}

void CDOTAMatchPrivateMetadata_Team_Building::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAMatchPrivateMetadata_Team_Building*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(position_quant_x_, death_time_);
    if (has_unit_name()) {
      if (unit_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        unit_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAMatchPrivateMetadata_Team_Building::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAMatchPrivateMetadata.Team.Building)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string unit_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unit_name().data(), this->unit_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "unit_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_position_quant_x;
        break;
      }

      // optional uint32 position_quant_x = 2;
      case 2: {
        if (tag == 16) {
         parse_position_quant_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_quant_x_)));
          set_has_position_quant_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_position_quant_y;
        break;
      }

      // optional uint32 position_quant_y = 3;
      case 3: {
        if (tag == 24) {
         parse_position_quant_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_quant_y_)));
          set_has_position_quant_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_death_time;
        break;
      }

      // optional float death_time = 4;
      case 4: {
        if (tag == 37) {
         parse_death_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &death_time_)));
          set_has_death_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAMatchPrivateMetadata.Team.Building)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAMatchPrivateMetadata.Team.Building)
  return false;
#undef DO_
}

void CDOTAMatchPrivateMetadata_Team_Building::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAMatchPrivateMetadata.Team.Building)
  // optional string unit_name = 1;
  if (has_unit_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unit_name().data(), this->unit_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unit_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->unit_name(), output);
  }

  // optional uint32 position_quant_x = 2;
  if (has_position_quant_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position_quant_x(), output);
  }

  // optional uint32 position_quant_y = 3;
  if (has_position_quant_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->position_quant_y(), output);
  }

  // optional float death_time = 4;
  if (has_death_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->death_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAMatchPrivateMetadata.Team.Building)
}

::google::protobuf::uint8* CDOTAMatchPrivateMetadata_Team_Building::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.Team.Building)
  // optional string unit_name = 1;
  if (has_unit_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unit_name().data(), this->unit_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unit_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->unit_name(), target);
  }

  // optional uint32 position_quant_x = 2;
  if (has_position_quant_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position_quant_x(), target);
  }

  // optional uint32 position_quant_y = 3;
  if (has_position_quant_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->position_quant_y(), target);
  }

  // optional float death_time = 4;
  if (has_death_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->death_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.Team.Building)
  return target;
}

int CDOTAMatchPrivateMetadata_Team_Building::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string unit_name = 1;
    if (has_unit_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unit_name());
    }

    // optional uint32 position_quant_x = 2;
    if (has_position_quant_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position_quant_x());
    }

    // optional uint32 position_quant_y = 3;
    if (has_position_quant_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position_quant_y());
    }

    // optional float death_time = 4;
    if (has_death_time()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMatchPrivateMetadata_Team_Building::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata_Team_Building* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAMatchPrivateMetadata_Team_Building*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata_Team_Building::MergeFrom(const CDOTAMatchPrivateMetadata_Team_Building& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit_name()) {
      set_unit_name(from.unit_name());
    }
    if (from.has_position_quant_x()) {
      set_position_quant_x(from.position_quant_x());
    }
    if (from.has_position_quant_y()) {
      set_position_quant_y(from.position_quant_y());
    }
    if (from.has_death_time()) {
      set_death_time(from.death_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAMatchPrivateMetadata_Team_Building::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata_Team_Building::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Building& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Building::IsInitialized() const {

  return true;
}

void CDOTAMatchPrivateMetadata_Team_Building::Swap(CDOTAMatchPrivateMetadata_Team_Building* other) {
  if (other != this) {
    std::swap(unit_name_, other->unit_name_);
    std::swap(position_quant_x_, other->position_quant_x_);
    std::swap(position_quant_y_, other->position_quant_y_);
    std::swap(death_time_, other->death_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAMatchPrivateMetadata_Team_Building::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAMatchPrivateMetadata_Team_Building_descriptor_;
  metadata.reflection = CDOTAMatchPrivateMetadata_Team_Building_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAMatchPrivateMetadata_Team::kDotaTeamFieldNumber;
const int CDOTAMatchPrivateMetadata_Team::kPlayersFieldNumber;
const int CDOTAMatchPrivateMetadata_Team::kBuildingsFieldNumber;
#endif  // !_MSC_VER

CDOTAMatchPrivateMetadata_Team::CDOTAMatchPrivateMetadata_Team()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAMatchPrivateMetadata.Team)
}

void CDOTAMatchPrivateMetadata_Team::InitAsDefaultInstance() {
}

CDOTAMatchPrivateMetadata_Team::CDOTAMatchPrivateMetadata_Team(const CDOTAMatchPrivateMetadata_Team& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.Team)
}

void CDOTAMatchPrivateMetadata_Team::SharedCtor() {
  _cached_size_ = 0;
  dota_team_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAMatchPrivateMetadata_Team::~CDOTAMatchPrivateMetadata_Team() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.Team)
  SharedDtor();
}

void CDOTAMatchPrivateMetadata_Team::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAMatchPrivateMetadata_Team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMatchPrivateMetadata_Team::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAMatchPrivateMetadata_Team_descriptor_;
}

const CDOTAMatchPrivateMetadata_Team& CDOTAMatchPrivateMetadata_Team::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto();
  return *default_instance_;
}

CDOTAMatchPrivateMetadata_Team* CDOTAMatchPrivateMetadata_Team::default_instance_ = NULL;

CDOTAMatchPrivateMetadata_Team* CDOTAMatchPrivateMetadata_Team::New() const {
  return new CDOTAMatchPrivateMetadata_Team;
}

void CDOTAMatchPrivateMetadata_Team::Clear() {
  dota_team_ = 0u;
  players_.Clear();
  buildings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAMatchPrivateMetadata_Team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAMatchPrivateMetadata.Team)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dota_team = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dota_team_)));
          set_has_dota_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_players;
        break;
      }

      // repeated .CDOTAMatchPrivateMetadata.Team.Player players = 2;
      case 2: {
        if (tag == 18) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_players;
        if (input->ExpectTag(26)) goto parse_buildings;
        break;
      }

      // repeated .CDOTAMatchPrivateMetadata.Team.Building buildings = 3;
      case 3: {
        if (tag == 26) {
         parse_buildings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_buildings;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAMatchPrivateMetadata.Team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAMatchPrivateMetadata.Team)
  return false;
#undef DO_
}

void CDOTAMatchPrivateMetadata_Team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAMatchPrivateMetadata.Team)
  // optional uint32 dota_team = 1;
  if (has_dota_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dota_team(), output);
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Player players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->players(i), output);
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Building buildings = 3;
  for (int i = 0; i < this->buildings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buildings(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAMatchPrivateMetadata.Team)
}

::google::protobuf::uint8* CDOTAMatchPrivateMetadata_Team::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.Team)
  // optional uint32 dota_team = 1;
  if (has_dota_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dota_team(), target);
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Player players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->players(i), target);
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Building buildings = 3;
  for (int i = 0; i < this->buildings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->buildings(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.Team)
  return target;
}

int CDOTAMatchPrivateMetadata_Team::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dota_team = 1;
    if (has_dota_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dota_team());
    }

  }
  // repeated .CDOTAMatchPrivateMetadata.Team.Player players = 2;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Building buildings = 3;
  total_size += 1 * this->buildings_size();
  for (int i = 0; i < this->buildings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMatchPrivateMetadata_Team::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata_Team* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAMatchPrivateMetadata_Team*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata_Team::MergeFrom(const CDOTAMatchPrivateMetadata_Team& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  buildings_.MergeFrom(from.buildings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dota_team()) {
      set_dota_team(from.dota_team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAMatchPrivateMetadata_Team::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata_Team::CopyFrom(const CDOTAMatchPrivateMetadata_Team& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team::IsInitialized() const {

  return true;
}

void CDOTAMatchPrivateMetadata_Team::Swap(CDOTAMatchPrivateMetadata_Team* other) {
  if (other != this) {
    std::swap(dota_team_, other->dota_team_);
    players_.Swap(&other->players_);
    buildings_.Swap(&other->buildings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAMatchPrivateMetadata_Team::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAMatchPrivateMetadata_Team_descriptor_;
  metadata.reflection = CDOTAMatchPrivateMetadata_Team_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAMatchPrivateMetadata::kTeamsFieldNumber;
#endif  // !_MSC_VER

CDOTAMatchPrivateMetadata::CDOTAMatchPrivateMetadata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAMatchPrivateMetadata)
}

void CDOTAMatchPrivateMetadata::InitAsDefaultInstance() {
}

CDOTAMatchPrivateMetadata::CDOTAMatchPrivateMetadata(const CDOTAMatchPrivateMetadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata)
}

void CDOTAMatchPrivateMetadata::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAMatchPrivateMetadata::~CDOTAMatchPrivateMetadata() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata)
  SharedDtor();
}

void CDOTAMatchPrivateMetadata::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAMatchPrivateMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMatchPrivateMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAMatchPrivateMetadata_descriptor_;
}

const CDOTAMatchPrivateMetadata& CDOTAMatchPrivateMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto();
  return *default_instance_;
}

CDOTAMatchPrivateMetadata* CDOTAMatchPrivateMetadata::default_instance_ = NULL;

CDOTAMatchPrivateMetadata* CDOTAMatchPrivateMetadata::New() const {
  return new CDOTAMatchPrivateMetadata;
}

void CDOTAMatchPrivateMetadata::Clear() {
  teams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAMatchPrivateMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAMatchPrivateMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CDOTAMatchPrivateMetadata.Team teams = 1;
      case 1: {
        if (tag == 10) {
         parse_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_teams;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAMatchPrivateMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAMatchPrivateMetadata)
  return false;
#undef DO_
}

void CDOTAMatchPrivateMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAMatchPrivateMetadata)
  // repeated .CDOTAMatchPrivateMetadata.Team teams = 1;
  for (int i = 0; i < this->teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teams(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAMatchPrivateMetadata)
}

::google::protobuf::uint8* CDOTAMatchPrivateMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata)
  // repeated .CDOTAMatchPrivateMetadata.Team teams = 1;
  for (int i = 0; i < this->teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teams(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata)
  return target;
}

int CDOTAMatchPrivateMetadata::ByteSize() const {
  int total_size = 0;

  // repeated .CDOTAMatchPrivateMetadata.Team teams = 1;
  total_size += 1 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMatchPrivateMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAMatchPrivateMetadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata::MergeFrom(const CDOTAMatchPrivateMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  teams_.MergeFrom(from.teams_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAMatchPrivateMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata::CopyFrom(const CDOTAMatchPrivateMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata::IsInitialized() const {

  return true;
}

void CDOTAMatchPrivateMetadata::Swap(CDOTAMatchPrivateMetadata* other) {
  if (other != this) {
    teams_.Swap(&other->teams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAMatchPrivateMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAMatchPrivateMetadata_descriptor_;
  metadata.reflection = CDOTAMatchPrivateMetadata_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
