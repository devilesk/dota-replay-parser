// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_match_metadata.proto

#ifndef PROTOBUF_dota_5fmatch_5fmetadata_2eproto__INCLUDED
#define PROTOBUF_dota_5fmatch_5fmetadata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "base_gcmessages.pb.h"
#include "dota_gcmessages_common_match_management.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto();
void protobuf_AssignDesc_dota_5fmatch_5fmetadata_2eproto();
void protobuf_ShutdownFile_dota_5fmatch_5fmetadata_2eproto();

class CDOTAMatchMetadataFile;
class CDOTAMatchMetadata;
class CDOTAMatchMetadata_Team;
class CDOTAMatchMetadata_Team_PlayerKill;
class CDOTAMatchMetadata_Team_ItemPurchase;
class CDOTAMatchMetadata_Team_InventorySnapshot;
class CDOTAMatchMetadata_Team_AutoStyleCriteria;
class CDOTAMatchMetadata_Team_Player;
class CDOTAMatchPrivateMetadata;
class CDOTAMatchPrivateMetadata_Team;
class CDOTAMatchPrivateMetadata_Team_Player;
class CDOTAMatchPrivateMetadata_Team_Building;

// ===================================================================

class CDOTAMatchMetadataFile : public ::google::protobuf::Message {
 public:
  CDOTAMatchMetadataFile();
  virtual ~CDOTAMatchMetadataFile();

  CDOTAMatchMetadataFile(const CDOTAMatchMetadataFile& from);

  inline CDOTAMatchMetadataFile& operator=(const CDOTAMatchMetadataFile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAMatchMetadataFile& default_instance();

  void Swap(CDOTAMatchMetadataFile* other);

  // implements Message ----------------------------------------------

  CDOTAMatchMetadataFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAMatchMetadataFile& from);
  void MergeFrom(const CDOTAMatchMetadataFile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // required uint64 match_id = 2;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 2;
  inline ::google::protobuf::uint64 match_id() const;
  inline void set_match_id(::google::protobuf::uint64 value);

  // optional .CDOTAMatchMetadata metadata = 3;
  inline bool has_metadata() const;
  inline void clear_metadata();
  static const int kMetadataFieldNumber = 3;
  inline const ::CDOTAMatchMetadata& metadata() const;
  inline ::CDOTAMatchMetadata* mutable_metadata();
  inline ::CDOTAMatchMetadata* release_metadata();
  inline void set_allocated_metadata(::CDOTAMatchMetadata* metadata);

  // optional bytes private_metadata = 5;
  inline bool has_private_metadata() const;
  inline void clear_private_metadata();
  static const int kPrivateMetadataFieldNumber = 5;
  inline const ::std::string& private_metadata() const;
  inline void set_private_metadata(const ::std::string& value);
  inline void set_private_metadata(const char* value);
  inline void set_private_metadata(const void* value, size_t size);
  inline ::std::string* mutable_private_metadata();
  inline ::std::string* release_private_metadata();
  inline void set_allocated_private_metadata(::std::string* private_metadata);

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadataFile)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_match_id();
  inline void clear_has_match_id();
  inline void set_has_metadata();
  inline void clear_has_metadata();
  inline void set_has_private_metadata();
  inline void clear_has_private_metadata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 match_id_;
  ::CDOTAMatchMetadata* metadata_;
  ::std::string* private_metadata_;
  ::google::protobuf::int32 version_;
  friend void  protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto();
  friend void protobuf_AssignDesc_dota_5fmatch_5fmetadata_2eproto();
  friend void protobuf_ShutdownFile_dota_5fmatch_5fmetadata_2eproto();

  void InitAsDefaultInstance();
  static CDOTAMatchMetadataFile* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_PlayerKill : public ::google::protobuf::Message {
 public:
  CDOTAMatchMetadata_Team_PlayerKill();
  virtual ~CDOTAMatchMetadata_Team_PlayerKill();

  CDOTAMatchMetadata_Team_PlayerKill(const CDOTAMatchMetadata_Team_PlayerKill& from);

  inline CDOTAMatchMetadata_Team_PlayerKill& operator=(const CDOTAMatchMetadata_Team_PlayerKill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAMatchMetadata_Team_PlayerKill& default_instance();

  void Swap(CDOTAMatchMetadata_Team_PlayerKill* other);

  // implements Message ----------------------------------------------

  CDOTAMatchMetadata_Team_PlayerKill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAMatchMetadata_Team_PlayerKill& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_PlayerKill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 victim_slot = 1;
  inline bool has_victim_slot() const;
  inline void clear_victim_slot();
  static const int kVictimSlotFieldNumber = 1;
  inline ::google::protobuf::uint32 victim_slot() const;
  inline void set_victim_slot(::google::protobuf::uint32 value);

  // optional uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.PlayerKill)
 private:
  inline void set_has_victim_slot();
  inline void clear_has_victim_slot();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 victim_slot_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto();
  friend void protobuf_AssignDesc_dota_5fmatch_5fmetadata_2eproto();
  friend void protobuf_ShutdownFile_dota_5fmatch_5fmetadata_2eproto();

  void InitAsDefaultInstance();
  static CDOTAMatchMetadata_Team_PlayerKill* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_ItemPurchase : public ::google::protobuf::Message {
 public:
  CDOTAMatchMetadata_Team_ItemPurchase();
  virtual ~CDOTAMatchMetadata_Team_ItemPurchase();

  CDOTAMatchMetadata_Team_ItemPurchase(const CDOTAMatchMetadata_Team_ItemPurchase& from);

  inline CDOTAMatchMetadata_Team_ItemPurchase& operator=(const CDOTAMatchMetadata_Team_ItemPurchase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAMatchMetadata_Team_ItemPurchase& default_instance();

  void Swap(CDOTAMatchMetadata_Team_ItemPurchase* other);

  // implements Message ----------------------------------------------

  CDOTAMatchMetadata_Team_ItemPurchase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAMatchMetadata_Team_ItemPurchase& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_ItemPurchase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // optional int32 purchase_time = 2;
  inline bool has_purchase_time() const;
  inline void clear_purchase_time();
  static const int kPurchaseTimeFieldNumber = 2;
  inline ::google::protobuf::int32 purchase_time() const;
  inline void set_purchase_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.ItemPurchase)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_purchase_time();
  inline void clear_has_purchase_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::int32 purchase_time_;
  friend void  protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto();
  friend void protobuf_AssignDesc_dota_5fmatch_5fmetadata_2eproto();
  friend void protobuf_ShutdownFile_dota_5fmatch_5fmetadata_2eproto();

  void InitAsDefaultInstance();
  static CDOTAMatchMetadata_Team_ItemPurchase* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_InventorySnapshot : public ::google::protobuf::Message {
 public:
  CDOTAMatchMetadata_Team_InventorySnapshot();
  virtual ~CDOTAMatchMetadata_Team_InventorySnapshot();

  CDOTAMatchMetadata_Team_InventorySnapshot(const CDOTAMatchMetadata_Team_InventorySnapshot& from);

  inline CDOTAMatchMetadata_Team_InventorySnapshot& operator=(const CDOTAMatchMetadata_Team_InventorySnapshot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAMatchMetadata_Team_InventorySnapshot& default_instance();

  void Swap(CDOTAMatchMetadata_Team_InventorySnapshot* other);

  // implements Message ----------------------------------------------

  CDOTAMatchMetadata_Team_InventorySnapshot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAMatchMetadata_Team_InventorySnapshot& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_InventorySnapshot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 item_id = 1;
  inline int item_id_size() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 item_id(int index) const;
  inline void set_item_id(int index, ::google::protobuf::uint32 value);
  inline void add_item_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      item_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_item_id();

  // optional int32 game_time = 2;
  inline bool has_game_time() const;
  inline void clear_game_time();
  static const int kGameTimeFieldNumber = 2;
  inline ::google::protobuf::int32 game_time() const;
  inline void set_game_time(::google::protobuf::int32 value);

  // optional uint32 kills = 3;
  inline bool has_kills() const;
  inline void clear_kills();
  static const int kKillsFieldNumber = 3;
  inline ::google::protobuf::uint32 kills() const;
  inline void set_kills(::google::protobuf::uint32 value);

  // optional uint32 deaths = 4;
  inline bool has_deaths() const;
  inline void clear_deaths();
  static const int kDeathsFieldNumber = 4;
  inline ::google::protobuf::uint32 deaths() const;
  inline void set_deaths(::google::protobuf::uint32 value);

  // optional uint32 assists = 5;
  inline bool has_assists() const;
  inline void clear_assists();
  static const int kAssistsFieldNumber = 5;
  inline ::google::protobuf::uint32 assists() const;
  inline void set_assists(::google::protobuf::uint32 value);

  // optional uint32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.InventorySnapshot)
 private:
  inline void set_has_game_time();
  inline void clear_has_game_time();
  inline void set_has_kills();
  inline void clear_has_kills();
  inline void set_has_deaths();
  inline void clear_has_deaths();
  inline void set_has_assists();
  inline void clear_has_assists();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > item_id_;
  ::google::protobuf::int32 game_time_;
  ::google::protobuf::uint32 kills_;
  ::google::protobuf::uint32 deaths_;
  ::google::protobuf::uint32 assists_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto();
  friend void protobuf_AssignDesc_dota_5fmatch_5fmetadata_2eproto();
  friend void protobuf_ShutdownFile_dota_5fmatch_5fmetadata_2eproto();

  void InitAsDefaultInstance();
  static CDOTAMatchMetadata_Team_InventorySnapshot* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_AutoStyleCriteria : public ::google::protobuf::Message {
 public:
  CDOTAMatchMetadata_Team_AutoStyleCriteria();
  virtual ~CDOTAMatchMetadata_Team_AutoStyleCriteria();

  CDOTAMatchMetadata_Team_AutoStyleCriteria(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from);

  inline CDOTAMatchMetadata_Team_AutoStyleCriteria& operator=(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAMatchMetadata_Team_AutoStyleCriteria& default_instance();

  void Swap(CDOTAMatchMetadata_Team_AutoStyleCriteria* other);

  // implements Message ----------------------------------------------

  CDOTAMatchMetadata_Team_AutoStyleCriteria* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 name_token = 1;
  inline bool has_name_token() const;
  inline void clear_name_token();
  static const int kNameTokenFieldNumber = 1;
  inline ::google::protobuf::uint32 name_token() const;
  inline void set_name_token(::google::protobuf::uint32 value);

  // optional float value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline float value() const;
  inline void set_value(float value);

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.AutoStyleCriteria)
 private:
  inline void set_has_name_token();
  inline void clear_has_name_token();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 name_token_;
  float value_;
  friend void  protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto();
  friend void protobuf_AssignDesc_dota_5fmatch_5fmetadata_2eproto();
  friend void protobuf_ShutdownFile_dota_5fmatch_5fmetadata_2eproto();

  void InitAsDefaultInstance();
  static CDOTAMatchMetadata_Team_AutoStyleCriteria* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_Player : public ::google::protobuf::Message {
 public:
  CDOTAMatchMetadata_Team_Player();
  virtual ~CDOTAMatchMetadata_Team_Player();

  CDOTAMatchMetadata_Team_Player(const CDOTAMatchMetadata_Team_Player& from);

  inline CDOTAMatchMetadata_Team_Player& operator=(const CDOTAMatchMetadata_Team_Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAMatchMetadata_Team_Player& default_instance();

  void Swap(CDOTAMatchMetadata_Team_Player* other);

  // implements Message ----------------------------------------------

  CDOTAMatchMetadata_Team_Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAMatchMetadata_Team_Player& from);
  void MergeFrom(const CDOTAMatchMetadata_Team_Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // repeated uint32 ability_upgrades = 2;
  inline int ability_upgrades_size() const;
  inline void clear_ability_upgrades();
  static const int kAbilityUpgradesFieldNumber = 2;
  inline ::google::protobuf::uint32 ability_upgrades(int index) const;
  inline void set_ability_upgrades(int index, ::google::protobuf::uint32 value);
  inline void add_ability_upgrades(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ability_upgrades() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ability_upgrades();

  // optional uint32 player_slot = 3;
  inline bool has_player_slot() const;
  inline void clear_player_slot();
  static const int kPlayerSlotFieldNumber = 3;
  inline ::google::protobuf::uint32 player_slot() const;
  inline void set_player_slot(::google::protobuf::uint32 value);

  // repeated .CSOEconItem equipped_econ_items = 4;
  inline int equipped_econ_items_size() const;
  inline void clear_equipped_econ_items();
  static const int kEquippedEconItemsFieldNumber = 4;
  inline const ::CSOEconItem& equipped_econ_items(int index) const;
  inline ::CSOEconItem* mutable_equipped_econ_items(int index);
  inline ::CSOEconItem* add_equipped_econ_items();
  inline const ::google::protobuf::RepeatedPtrField< ::CSOEconItem >&
      equipped_econ_items() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSOEconItem >*
      mutable_equipped_econ_items();

  // repeated .CDOTAMatchMetadata.Team.PlayerKill kills = 5;
  inline int kills_size() const;
  inline void clear_kills();
  static const int kKillsFieldNumber = 5;
  inline const ::CDOTAMatchMetadata_Team_PlayerKill& kills(int index) const;
  inline ::CDOTAMatchMetadata_Team_PlayerKill* mutable_kills(int index);
  inline ::CDOTAMatchMetadata_Team_PlayerKill* add_kills();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team_PlayerKill >&
      kills() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team_PlayerKill >*
      mutable_kills();

  // repeated .CDOTAMatchMetadata.Team.ItemPurchase items = 6;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 6;
  inline const ::CDOTAMatchMetadata_Team_ItemPurchase& items(int index) const;
  inline ::CDOTAMatchMetadata_Team_ItemPurchase* mutable_items(int index);
  inline ::CDOTAMatchMetadata_Team_ItemPurchase* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team_ItemPurchase >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team_ItemPurchase >*
      mutable_items();

  // optional uint32 avg_kills_x16 = 7;
  inline bool has_avg_kills_x16() const;
  inline void clear_avg_kills_x16();
  static const int kAvgKillsX16FieldNumber = 7;
  inline ::google::protobuf::uint32 avg_kills_x16() const;
  inline void set_avg_kills_x16(::google::protobuf::uint32 value);

  // optional uint32 avg_deaths_x16 = 8;
  inline bool has_avg_deaths_x16() const;
  inline void clear_avg_deaths_x16();
  static const int kAvgDeathsX16FieldNumber = 8;
  inline ::google::protobuf::uint32 avg_deaths_x16() const;
  inline void set_avg_deaths_x16(::google::protobuf::uint32 value);

  // optional uint32 avg_assists_x16 = 9;
  inline bool has_avg_assists_x16() const;
  inline void clear_avg_assists_x16();
  static const int kAvgAssistsX16FieldNumber = 9;
  inline ::google::protobuf::uint32 avg_assists_x16() const;
  inline void set_avg_assists_x16(::google::protobuf::uint32 value);

  // optional uint32 avg_gpm_x16 = 10;
  inline bool has_avg_gpm_x16() const;
  inline void clear_avg_gpm_x16();
  static const int kAvgGpmX16FieldNumber = 10;
  inline ::google::protobuf::uint32 avg_gpm_x16() const;
  inline void set_avg_gpm_x16(::google::protobuf::uint32 value);

  // optional uint32 avg_xpm_x16 = 11;
  inline bool has_avg_xpm_x16() const;
  inline void clear_avg_xpm_x16();
  static const int kAvgXpmX16FieldNumber = 11;
  inline ::google::protobuf::uint32 avg_xpm_x16() const;
  inline void set_avg_xpm_x16(::google::protobuf::uint32 value);

  // optional uint32 best_kills_x16 = 12;
  inline bool has_best_kills_x16() const;
  inline void clear_best_kills_x16();
  static const int kBestKillsX16FieldNumber = 12;
  inline ::google::protobuf::uint32 best_kills_x16() const;
  inline void set_best_kills_x16(::google::protobuf::uint32 value);

  // optional uint32 best_assists_x16 = 13;
  inline bool has_best_assists_x16() const;
  inline void clear_best_assists_x16();
  static const int kBestAssistsX16FieldNumber = 13;
  inline ::google::protobuf::uint32 best_assists_x16() const;
  inline void set_best_assists_x16(::google::protobuf::uint32 value);

  // optional uint32 best_gpm_x16 = 14;
  inline bool has_best_gpm_x16() const;
  inline void clear_best_gpm_x16();
  static const int kBestGpmX16FieldNumber = 14;
  inline ::google::protobuf::uint32 best_gpm_x16() const;
  inline void set_best_gpm_x16(::google::protobuf::uint32 value);

  // optional uint32 best_xpm_x16 = 15;
  inline bool has_best_xpm_x16() const;
  inline void clear_best_xpm_x16();
  static const int kBestXpmX16FieldNumber = 15;
  inline ::google::protobuf::uint32 best_xpm_x16() const;
  inline void set_best_xpm_x16(::google::protobuf::uint32 value);

  // optional uint32 win_streak = 16;
  inline bool has_win_streak() const;
  inline void clear_win_streak();
  static const int kWinStreakFieldNumber = 16;
  inline ::google::protobuf::uint32 win_streak() const;
  inline void set_win_streak(::google::protobuf::uint32 value);

  // optional uint32 best_win_streak = 17;
  inline bool has_best_win_streak() const;
  inline void clear_best_win_streak();
  static const int kBestWinStreakFieldNumber = 17;
  inline ::google::protobuf::uint32 best_win_streak() const;
  inline void set_best_win_streak(::google::protobuf::uint32 value);

  // optional float fight_score = 18;
  inline bool has_fight_score() const;
  inline void clear_fight_score();
  static const int kFightScoreFieldNumber = 18;
  inline float fight_score() const;
  inline void set_fight_score(float value);

  // optional float farm_score = 19;
  inline bool has_farm_score() const;
  inline void clear_farm_score();
  static const int kFarmScoreFieldNumber = 19;
  inline float farm_score() const;
  inline void set_farm_score(float value);

  // optional float support_score = 20;
  inline bool has_support_score() const;
  inline void clear_support_score();
  static const int kSupportScoreFieldNumber = 20;
  inline float support_score() const;
  inline void set_support_score(float value);

  // optional float push_score = 21;
  inline bool has_push_score() const;
  inline void clear_push_score();
  static const int kPushScoreFieldNumber = 21;
  inline float push_score() const;
  inline void set_push_score(float value);

  // repeated uint32 level_up_times = 22;
  inline int level_up_times_size() const;
  inline void clear_level_up_times();
  static const int kLevelUpTimesFieldNumber = 22;
  inline ::google::protobuf::uint32 level_up_times(int index) const;
  inline void set_level_up_times(int index, ::google::protobuf::uint32 value);
  inline void add_level_up_times(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      level_up_times() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_level_up_times();

  // repeated float graph_net_worth = 23;
  inline int graph_net_worth_size() const;
  inline void clear_graph_net_worth();
  static const int kGraphNetWorthFieldNumber = 23;
  inline float graph_net_worth(int index) const;
  inline void set_graph_net_worth(int index, float value);
  inline void add_graph_net_worth(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      graph_net_worth() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_graph_net_worth();

  // repeated .CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
  inline int inventory_snapshot_size() const;
  inline void clear_inventory_snapshot();
  static const int kInventorySnapshotFieldNumber = 24;
  inline const ::CDOTAMatchMetadata_Team_InventorySnapshot& inventory_snapshot(int index) const;
  inline ::CDOTAMatchMetadata_Team_InventorySnapshot* mutable_inventory_snapshot(int index);
  inline ::CDOTAMatchMetadata_Team_InventorySnapshot* add_inventory_snapshot();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team_InventorySnapshot >&
      inventory_snapshot() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team_InventorySnapshot >*
      mutable_inventory_snapshot();

  // optional bool avg_stats_calibrated = 25;
  inline bool has_avg_stats_calibrated() const;
  inline void clear_avg_stats_calibrated();
  static const int kAvgStatsCalibratedFieldNumber = 25;
  inline bool avg_stats_calibrated() const;
  inline void set_avg_stats_calibrated(bool value);

  // repeated .CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
  inline int auto_style_criteria_size() const;
  inline void clear_auto_style_criteria();
  static const int kAutoStyleCriteriaFieldNumber = 26;
  inline const ::CDOTAMatchMetadata_Team_AutoStyleCriteria& auto_style_criteria(int index) const;
  inline ::CDOTAMatchMetadata_Team_AutoStyleCriteria* mutable_auto_style_criteria(int index);
  inline ::CDOTAMatchMetadata_Team_AutoStyleCriteria* add_auto_style_criteria();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team_AutoStyleCriteria >&
      auto_style_criteria() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team_AutoStyleCriteria >*
      mutable_auto_style_criteria();

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.Player)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_player_slot();
  inline void clear_has_player_slot();
  inline void set_has_avg_kills_x16();
  inline void clear_has_avg_kills_x16();
  inline void set_has_avg_deaths_x16();
  inline void clear_has_avg_deaths_x16();
  inline void set_has_avg_assists_x16();
  inline void clear_has_avg_assists_x16();
  inline void set_has_avg_gpm_x16();
  inline void clear_has_avg_gpm_x16();
  inline void set_has_avg_xpm_x16();
  inline void clear_has_avg_xpm_x16();
  inline void set_has_best_kills_x16();
  inline void clear_has_best_kills_x16();
  inline void set_has_best_assists_x16();
  inline void clear_has_best_assists_x16();
  inline void set_has_best_gpm_x16();
  inline void clear_has_best_gpm_x16();
  inline void set_has_best_xpm_x16();
  inline void clear_has_best_xpm_x16();
  inline void set_has_win_streak();
  inline void clear_has_win_streak();
  inline void set_has_best_win_streak();
  inline void clear_has_best_win_streak();
  inline void set_has_fight_score();
  inline void clear_has_fight_score();
  inline void set_has_farm_score();
  inline void clear_has_farm_score();
  inline void set_has_support_score();
  inline void clear_has_support_score();
  inline void set_has_push_score();
  inline void clear_has_push_score();
  inline void set_has_avg_stats_calibrated();
  inline void clear_has_avg_stats_calibrated();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ability_upgrades_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 player_slot_;
  ::google::protobuf::RepeatedPtrField< ::CSOEconItem > equipped_econ_items_;
  ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team_PlayerKill > kills_;
  ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team_ItemPurchase > items_;
  ::google::protobuf::uint32 avg_kills_x16_;
  ::google::protobuf::uint32 avg_deaths_x16_;
  ::google::protobuf::uint32 avg_assists_x16_;
  ::google::protobuf::uint32 avg_gpm_x16_;
  ::google::protobuf::uint32 avg_xpm_x16_;
  ::google::protobuf::uint32 best_kills_x16_;
  ::google::protobuf::uint32 best_assists_x16_;
  ::google::protobuf::uint32 best_gpm_x16_;
  ::google::protobuf::uint32 best_xpm_x16_;
  ::google::protobuf::uint32 win_streak_;
  ::google::protobuf::uint32 best_win_streak_;
  float fight_score_;
  float farm_score_;
  float support_score_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > level_up_times_;
  ::google::protobuf::RepeatedField< float > graph_net_worth_;
  float push_score_;
  bool avg_stats_calibrated_;
  ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team_InventorySnapshot > inventory_snapshot_;
  ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team_AutoStyleCriteria > auto_style_criteria_;
  friend void  protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto();
  friend void protobuf_AssignDesc_dota_5fmatch_5fmetadata_2eproto();
  friend void protobuf_ShutdownFile_dota_5fmatch_5fmetadata_2eproto();

  void InitAsDefaultInstance();
  static CDOTAMatchMetadata_Team_Player* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team : public ::google::protobuf::Message {
 public:
  CDOTAMatchMetadata_Team();
  virtual ~CDOTAMatchMetadata_Team();

  CDOTAMatchMetadata_Team(const CDOTAMatchMetadata_Team& from);

  inline CDOTAMatchMetadata_Team& operator=(const CDOTAMatchMetadata_Team& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAMatchMetadata_Team& default_instance();

  void Swap(CDOTAMatchMetadata_Team* other);

  // implements Message ----------------------------------------------

  CDOTAMatchMetadata_Team* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAMatchMetadata_Team& from);
  void MergeFrom(const CDOTAMatchMetadata_Team& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CDOTAMatchMetadata_Team_PlayerKill PlayerKill;
  typedef CDOTAMatchMetadata_Team_ItemPurchase ItemPurchase;
  typedef CDOTAMatchMetadata_Team_InventorySnapshot InventorySnapshot;
  typedef CDOTAMatchMetadata_Team_AutoStyleCriteria AutoStyleCriteria;
  typedef CDOTAMatchMetadata_Team_Player Player;

  // accessors -------------------------------------------------------

  // optional uint32 dota_team = 1;
  inline bool has_dota_team() const;
  inline void clear_dota_team();
  static const int kDotaTeamFieldNumber = 1;
  inline ::google::protobuf::uint32 dota_team() const;
  inline void set_dota_team(::google::protobuf::uint32 value);

  // repeated .CDOTAMatchMetadata.Team.Player players = 2;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 2;
  inline const ::CDOTAMatchMetadata_Team_Player& players(int index) const;
  inline ::CDOTAMatchMetadata_Team_Player* mutable_players(int index);
  inline ::CDOTAMatchMetadata_Team_Player* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team_Player >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team_Player >*
      mutable_players();

  // repeated float graph_experience = 3;
  inline int graph_experience_size() const;
  inline void clear_graph_experience();
  static const int kGraphExperienceFieldNumber = 3;
  inline float graph_experience(int index) const;
  inline void set_graph_experience(int index, float value);
  inline void add_graph_experience(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      graph_experience() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_graph_experience();

  // repeated float graph_gold_earned = 4;
  inline int graph_gold_earned_size() const;
  inline void clear_graph_gold_earned();
  static const int kGraphGoldEarnedFieldNumber = 4;
  inline float graph_gold_earned(int index) const;
  inline void set_graph_gold_earned(int index, float value);
  inline void add_graph_gold_earned(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      graph_gold_earned() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_graph_gold_earned();

  // repeated float graph_net_worth = 5;
  inline int graph_net_worth_size() const;
  inline void clear_graph_net_worth();
  static const int kGraphNetWorthFieldNumber = 5;
  inline float graph_net_worth(int index) const;
  inline void set_graph_net_worth(int index, float value);
  inline void add_graph_net_worth(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      graph_net_worth() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_graph_net_worth();

  // optional bool cm_first_pick = 6;
  inline bool has_cm_first_pick() const;
  inline void clear_cm_first_pick();
  static const int kCmFirstPickFieldNumber = 6;
  inline bool cm_first_pick() const;
  inline void set_cm_first_pick(bool value);

  // optional uint32 cm_captain_player_id = 7;
  inline bool has_cm_captain_player_id() const;
  inline void clear_cm_captain_player_id();
  static const int kCmCaptainPlayerIdFieldNumber = 7;
  inline ::google::protobuf::uint32 cm_captain_player_id() const;
  inline void set_cm_captain_player_id(::google::protobuf::uint32 value);

  // repeated uint32 cm_bans = 8;
  inline int cm_bans_size() const;
  inline void clear_cm_bans();
  static const int kCmBansFieldNumber = 8;
  inline ::google::protobuf::uint32 cm_bans(int index) const;
  inline void set_cm_bans(int index, ::google::protobuf::uint32 value);
  inline void add_cm_bans(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cm_bans() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cm_bans();

  // repeated uint32 cm_picks = 9;
  inline int cm_picks_size() const;
  inline void clear_cm_picks();
  static const int kCmPicksFieldNumber = 9;
  inline ::google::protobuf::uint32 cm_picks(int index) const;
  inline void set_cm_picks(int index, ::google::protobuf::uint32 value);
  inline void add_cm_picks(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cm_picks() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cm_picks();

  // optional uint32 cm_penalty = 10;
  inline bool has_cm_penalty() const;
  inline void clear_cm_penalty();
  static const int kCmPenaltyFieldNumber = 10;
  inline ::google::protobuf::uint32 cm_penalty() const;
  inline void set_cm_penalty(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team)
 private:
  inline void set_has_dota_team();
  inline void clear_has_dota_team();
  inline void set_has_cm_first_pick();
  inline void clear_has_cm_first_pick();
  inline void set_has_cm_captain_player_id();
  inline void clear_has_cm_captain_player_id();
  inline void set_has_cm_penalty();
  inline void clear_has_cm_penalty();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team_Player > players_;
  ::google::protobuf::RepeatedField< float > graph_experience_;
  ::google::protobuf::uint32 dota_team_;
  bool cm_first_pick_;
  ::google::protobuf::RepeatedField< float > graph_gold_earned_;
  ::google::protobuf::RepeatedField< float > graph_net_worth_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cm_bans_;
  ::google::protobuf::uint32 cm_captain_player_id_;
  ::google::protobuf::uint32 cm_penalty_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cm_picks_;
  friend void  protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto();
  friend void protobuf_AssignDesc_dota_5fmatch_5fmetadata_2eproto();
  friend void protobuf_ShutdownFile_dota_5fmatch_5fmetadata_2eproto();

  void InitAsDefaultInstance();
  static CDOTAMatchMetadata_Team* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata : public ::google::protobuf::Message {
 public:
  CDOTAMatchMetadata();
  virtual ~CDOTAMatchMetadata();

  CDOTAMatchMetadata(const CDOTAMatchMetadata& from);

  inline CDOTAMatchMetadata& operator=(const CDOTAMatchMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAMatchMetadata& default_instance();

  void Swap(CDOTAMatchMetadata* other);

  // implements Message ----------------------------------------------

  CDOTAMatchMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAMatchMetadata& from);
  void MergeFrom(const CDOTAMatchMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CDOTAMatchMetadata_Team Team;

  // accessors -------------------------------------------------------

  // repeated .CDOTAMatchMetadata.Team teams = 1;
  inline int teams_size() const;
  inline void clear_teams();
  static const int kTeamsFieldNumber = 1;
  inline const ::CDOTAMatchMetadata_Team& teams(int index) const;
  inline ::CDOTAMatchMetadata_Team* mutable_teams(int index);
  inline ::CDOTAMatchMetadata_Team* add_teams();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team >&
      teams() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team >*
      mutable_teams();

  // repeated .CLobbyTimedRewardDetails item_rewards = 2;
  inline int item_rewards_size() const;
  inline void clear_item_rewards();
  static const int kItemRewardsFieldNumber = 2;
  inline const ::CLobbyTimedRewardDetails& item_rewards(int index) const;
  inline ::CLobbyTimedRewardDetails* mutable_item_rewards(int index);
  inline ::CLobbyTimedRewardDetails* add_item_rewards();
  inline const ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >&
      item_rewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >*
      mutable_item_rewards();

  // optional fixed64 lobby_id = 3;
  inline bool has_lobby_id() const;
  inline void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 3;
  inline ::google::protobuf::uint64 lobby_id() const;
  inline void set_lobby_id(::google::protobuf::uint64 value);

  // optional fixed64 report_until_time = 4;
  inline bool has_report_until_time() const;
  inline void clear_report_until_time();
  static const int kReportUntilTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 report_until_time() const;
  inline void set_report_until_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata)
 private:
  inline void set_has_lobby_id();
  inline void clear_has_lobby_id();
  inline void set_has_report_until_time();
  inline void clear_has_report_until_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team > teams_;
  ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails > item_rewards_;
  ::google::protobuf::uint64 lobby_id_;
  ::google::protobuf::uint64 report_until_time_;
  friend void  protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto();
  friend void protobuf_AssignDesc_dota_5fmatch_5fmetadata_2eproto();
  friend void protobuf_ShutdownFile_dota_5fmatch_5fmetadata_2eproto();

  void InitAsDefaultInstance();
  static CDOTAMatchMetadata* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAMatchPrivateMetadata_Team_Player : public ::google::protobuf::Message {
 public:
  CDOTAMatchPrivateMetadata_Team_Player();
  virtual ~CDOTAMatchPrivateMetadata_Team_Player();

  CDOTAMatchPrivateMetadata_Team_Player(const CDOTAMatchPrivateMetadata_Team_Player& from);

  inline CDOTAMatchPrivateMetadata_Team_Player& operator=(const CDOTAMatchPrivateMetadata_Team_Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAMatchPrivateMetadata_Team_Player& default_instance();

  void Swap(CDOTAMatchPrivateMetadata_Team_Player* other);

  // implements Message ----------------------------------------------

  CDOTAMatchPrivateMetadata_Team_Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player& from);
  void MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 player_slot = 2;
  inline bool has_player_slot() const;
  inline void clear_player_slot();
  static const int kPlayerSlotFieldNumber = 2;
  inline ::google::protobuf::uint32 player_slot() const;
  inline void set_player_slot(::google::protobuf::uint32 value);

  // optional bytes position_stream = 3;
  inline bool has_position_stream() const;
  inline void clear_position_stream();
  static const int kPositionStreamFieldNumber = 3;
  inline const ::std::string& position_stream() const;
  inline void set_position_stream(const ::std::string& value);
  inline void set_position_stream(const char* value);
  inline void set_position_stream(const void* value, size_t size);
  inline ::std::string* mutable_position_stream();
  inline ::std::string* release_position_stream();
  inline void set_allocated_position_stream(::std::string* position_stream);

  // @@protoc_insertion_point(class_scope:CDOTAMatchPrivateMetadata.Team.Player)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_player_slot();
  inline void clear_has_player_slot();
  inline void set_has_position_stream();
  inline void clear_has_position_stream();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 player_slot_;
  ::std::string* position_stream_;
  friend void  protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto();
  friend void protobuf_AssignDesc_dota_5fmatch_5fmetadata_2eproto();
  friend void protobuf_ShutdownFile_dota_5fmatch_5fmetadata_2eproto();

  void InitAsDefaultInstance();
  static CDOTAMatchPrivateMetadata_Team_Player* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAMatchPrivateMetadata_Team_Building : public ::google::protobuf::Message {
 public:
  CDOTAMatchPrivateMetadata_Team_Building();
  virtual ~CDOTAMatchPrivateMetadata_Team_Building();

  CDOTAMatchPrivateMetadata_Team_Building(const CDOTAMatchPrivateMetadata_Team_Building& from);

  inline CDOTAMatchPrivateMetadata_Team_Building& operator=(const CDOTAMatchPrivateMetadata_Team_Building& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAMatchPrivateMetadata_Team_Building& default_instance();

  void Swap(CDOTAMatchPrivateMetadata_Team_Building* other);

  // implements Message ----------------------------------------------

  CDOTAMatchPrivateMetadata_Team_Building* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAMatchPrivateMetadata_Team_Building& from);
  void MergeFrom(const CDOTAMatchPrivateMetadata_Team_Building& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string unit_name = 1;
  inline bool has_unit_name() const;
  inline void clear_unit_name();
  static const int kUnitNameFieldNumber = 1;
  inline const ::std::string& unit_name() const;
  inline void set_unit_name(const ::std::string& value);
  inline void set_unit_name(const char* value);
  inline void set_unit_name(const char* value, size_t size);
  inline ::std::string* mutable_unit_name();
  inline ::std::string* release_unit_name();
  inline void set_allocated_unit_name(::std::string* unit_name);

  // optional uint32 position_quant_x = 2;
  inline bool has_position_quant_x() const;
  inline void clear_position_quant_x();
  static const int kPositionQuantXFieldNumber = 2;
  inline ::google::protobuf::uint32 position_quant_x() const;
  inline void set_position_quant_x(::google::protobuf::uint32 value);

  // optional uint32 position_quant_y = 3;
  inline bool has_position_quant_y() const;
  inline void clear_position_quant_y();
  static const int kPositionQuantYFieldNumber = 3;
  inline ::google::protobuf::uint32 position_quant_y() const;
  inline void set_position_quant_y(::google::protobuf::uint32 value);

  // optional float death_time = 4;
  inline bool has_death_time() const;
  inline void clear_death_time();
  static const int kDeathTimeFieldNumber = 4;
  inline float death_time() const;
  inline void set_death_time(float value);

  // @@protoc_insertion_point(class_scope:CDOTAMatchPrivateMetadata.Team.Building)
 private:
  inline void set_has_unit_name();
  inline void clear_has_unit_name();
  inline void set_has_position_quant_x();
  inline void clear_has_position_quant_x();
  inline void set_has_position_quant_y();
  inline void clear_has_position_quant_y();
  inline void set_has_death_time();
  inline void clear_has_death_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* unit_name_;
  ::google::protobuf::uint32 position_quant_x_;
  ::google::protobuf::uint32 position_quant_y_;
  float death_time_;
  friend void  protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto();
  friend void protobuf_AssignDesc_dota_5fmatch_5fmetadata_2eproto();
  friend void protobuf_ShutdownFile_dota_5fmatch_5fmetadata_2eproto();

  void InitAsDefaultInstance();
  static CDOTAMatchPrivateMetadata_Team_Building* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAMatchPrivateMetadata_Team : public ::google::protobuf::Message {
 public:
  CDOTAMatchPrivateMetadata_Team();
  virtual ~CDOTAMatchPrivateMetadata_Team();

  CDOTAMatchPrivateMetadata_Team(const CDOTAMatchPrivateMetadata_Team& from);

  inline CDOTAMatchPrivateMetadata_Team& operator=(const CDOTAMatchPrivateMetadata_Team& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAMatchPrivateMetadata_Team& default_instance();

  void Swap(CDOTAMatchPrivateMetadata_Team* other);

  // implements Message ----------------------------------------------

  CDOTAMatchPrivateMetadata_Team* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAMatchPrivateMetadata_Team& from);
  void MergeFrom(const CDOTAMatchPrivateMetadata_Team& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CDOTAMatchPrivateMetadata_Team_Player Player;
  typedef CDOTAMatchPrivateMetadata_Team_Building Building;

  // accessors -------------------------------------------------------

  // optional uint32 dota_team = 1;
  inline bool has_dota_team() const;
  inline void clear_dota_team();
  static const int kDotaTeamFieldNumber = 1;
  inline ::google::protobuf::uint32 dota_team() const;
  inline void set_dota_team(::google::protobuf::uint32 value);

  // repeated .CDOTAMatchPrivateMetadata.Team.Player players = 2;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 2;
  inline const ::CDOTAMatchPrivateMetadata_Team_Player& players(int index) const;
  inline ::CDOTAMatchPrivateMetadata_Team_Player* mutable_players(int index);
  inline ::CDOTAMatchPrivateMetadata_Team_Player* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player >*
      mutable_players();

  // repeated .CDOTAMatchPrivateMetadata.Team.Building buildings = 3;
  inline int buildings_size() const;
  inline void clear_buildings();
  static const int kBuildingsFieldNumber = 3;
  inline const ::CDOTAMatchPrivateMetadata_Team_Building& buildings(int index) const;
  inline ::CDOTAMatchPrivateMetadata_Team_Building* mutable_buildings(int index);
  inline ::CDOTAMatchPrivateMetadata_Team_Building* add_buildings();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Building >&
      buildings() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Building >*
      mutable_buildings();

  // @@protoc_insertion_point(class_scope:CDOTAMatchPrivateMetadata.Team)
 private:
  inline void set_has_dota_team();
  inline void clear_has_dota_team();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player > players_;
  ::google::protobuf::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Building > buildings_;
  ::google::protobuf::uint32 dota_team_;
  friend void  protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto();
  friend void protobuf_AssignDesc_dota_5fmatch_5fmetadata_2eproto();
  friend void protobuf_ShutdownFile_dota_5fmatch_5fmetadata_2eproto();

  void InitAsDefaultInstance();
  static CDOTAMatchPrivateMetadata_Team* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAMatchPrivateMetadata : public ::google::protobuf::Message {
 public:
  CDOTAMatchPrivateMetadata();
  virtual ~CDOTAMatchPrivateMetadata();

  CDOTAMatchPrivateMetadata(const CDOTAMatchPrivateMetadata& from);

  inline CDOTAMatchPrivateMetadata& operator=(const CDOTAMatchPrivateMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAMatchPrivateMetadata& default_instance();

  void Swap(CDOTAMatchPrivateMetadata* other);

  // implements Message ----------------------------------------------

  CDOTAMatchPrivateMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAMatchPrivateMetadata& from);
  void MergeFrom(const CDOTAMatchPrivateMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CDOTAMatchPrivateMetadata_Team Team;

  // accessors -------------------------------------------------------

  // repeated .CDOTAMatchPrivateMetadata.Team teams = 1;
  inline int teams_size() const;
  inline void clear_teams();
  static const int kTeamsFieldNumber = 1;
  inline const ::CDOTAMatchPrivateMetadata_Team& teams(int index) const;
  inline ::CDOTAMatchPrivateMetadata_Team* mutable_teams(int index);
  inline ::CDOTAMatchPrivateMetadata_Team* add_teams();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team >&
      teams() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team >*
      mutable_teams();

  // @@protoc_insertion_point(class_scope:CDOTAMatchPrivateMetadata)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team > teams_;
  friend void  protobuf_AddDesc_dota_5fmatch_5fmetadata_2eproto();
  friend void protobuf_AssignDesc_dota_5fmatch_5fmetadata_2eproto();
  friend void protobuf_ShutdownFile_dota_5fmatch_5fmetadata_2eproto();

  void InitAsDefaultInstance();
  static CDOTAMatchPrivateMetadata* default_instance_;
};
// ===================================================================


// ===================================================================

// CDOTAMatchMetadataFile

// required int32 version = 1;
inline bool CDOTAMatchMetadataFile::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchMetadataFile::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAMatchMetadataFile::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAMatchMetadataFile::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 CDOTAMatchMetadataFile::version() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadataFile.version)
  return version_;
}
inline void CDOTAMatchMetadataFile::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadataFile.version)
}

// required uint64 match_id = 2;
inline bool CDOTAMatchMetadataFile::has_match_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAMatchMetadataFile::set_has_match_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAMatchMetadataFile::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAMatchMetadataFile::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
inline ::google::protobuf::uint64 CDOTAMatchMetadataFile::match_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadataFile.match_id)
  return match_id_;
}
inline void CDOTAMatchMetadataFile::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadataFile.match_id)
}

// optional .CDOTAMatchMetadata metadata = 3;
inline bool CDOTAMatchMetadataFile::has_metadata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAMatchMetadataFile::set_has_metadata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAMatchMetadataFile::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAMatchMetadataFile::clear_metadata() {
  if (metadata_ != NULL) metadata_->::CDOTAMatchMetadata::Clear();
  clear_has_metadata();
}
inline const ::CDOTAMatchMetadata& CDOTAMatchMetadataFile::metadata() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadataFile.metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
inline ::CDOTAMatchMetadata* CDOTAMatchMetadataFile::mutable_metadata() {
  set_has_metadata();
  if (metadata_ == NULL) metadata_ = new ::CDOTAMatchMetadata;
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadataFile.metadata)
  return metadata_;
}
inline ::CDOTAMatchMetadata* CDOTAMatchMetadataFile::release_metadata() {
  clear_has_metadata();
  ::CDOTAMatchMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline void CDOTAMatchMetadataFile::set_allocated_metadata(::CDOTAMatchMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTAMatchMetadataFile.metadata)
}

// optional bytes private_metadata = 5;
inline bool CDOTAMatchMetadataFile::has_private_metadata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAMatchMetadataFile::set_has_private_metadata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAMatchMetadataFile::clear_has_private_metadata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAMatchMetadataFile::clear_private_metadata() {
  if (private_metadata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_metadata_->clear();
  }
  clear_has_private_metadata();
}
inline const ::std::string& CDOTAMatchMetadataFile::private_metadata() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadataFile.private_metadata)
  return *private_metadata_;
}
inline void CDOTAMatchMetadataFile::set_private_metadata(const ::std::string& value) {
  set_has_private_metadata();
  if (private_metadata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_metadata_ = new ::std::string;
  }
  private_metadata_->assign(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadataFile.private_metadata)
}
inline void CDOTAMatchMetadataFile::set_private_metadata(const char* value) {
  set_has_private_metadata();
  if (private_metadata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_metadata_ = new ::std::string;
  }
  private_metadata_->assign(value);
  // @@protoc_insertion_point(field_set_char:CDOTAMatchMetadataFile.private_metadata)
}
inline void CDOTAMatchMetadataFile::set_private_metadata(const void* value, size_t size) {
  set_has_private_metadata();
  if (private_metadata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_metadata_ = new ::std::string;
  }
  private_metadata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CDOTAMatchMetadataFile.private_metadata)
}
inline ::std::string* CDOTAMatchMetadataFile::mutable_private_metadata() {
  set_has_private_metadata();
  if (private_metadata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_metadata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadataFile.private_metadata)
  return private_metadata_;
}
inline ::std::string* CDOTAMatchMetadataFile::release_private_metadata() {
  clear_has_private_metadata();
  if (private_metadata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = private_metadata_;
    private_metadata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CDOTAMatchMetadataFile::set_allocated_private_metadata(::std::string* private_metadata) {
  if (private_metadata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete private_metadata_;
  }
  if (private_metadata) {
    set_has_private_metadata();
    private_metadata_ = private_metadata;
  } else {
    clear_has_private_metadata();
    private_metadata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTAMatchMetadataFile.private_metadata)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_PlayerKill

// optional uint32 victim_slot = 1;
inline bool CDOTAMatchMetadata_Team_PlayerKill::has_victim_slot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchMetadata_Team_PlayerKill::set_has_victim_slot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAMatchMetadata_Team_PlayerKill::clear_has_victim_slot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAMatchMetadata_Team_PlayerKill::clear_victim_slot() {
  victim_slot_ = 0u;
  clear_has_victim_slot();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_PlayerKill::victim_slot() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.PlayerKill.victim_slot)
  return victim_slot_;
}
inline void CDOTAMatchMetadata_Team_PlayerKill::set_victim_slot(::google::protobuf::uint32 value) {
  set_has_victim_slot();
  victim_slot_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.PlayerKill.victim_slot)
}

// optional uint32 count = 2;
inline bool CDOTAMatchMetadata_Team_PlayerKill::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAMatchMetadata_Team_PlayerKill::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAMatchMetadata_Team_PlayerKill::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAMatchMetadata_Team_PlayerKill::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_PlayerKill::count() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.PlayerKill.count)
  return count_;
}
inline void CDOTAMatchMetadata_Team_PlayerKill::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.PlayerKill.count)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_ItemPurchase

// optional uint32 item_id = 1;
inline bool CDOTAMatchMetadata_Team_ItemPurchase::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchMetadata_Team_ItemPurchase::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAMatchMetadata_Team_ItemPurchase::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAMatchMetadata_Team_ItemPurchase::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_ItemPurchase::item_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.ItemPurchase.item_id)
  return item_id_;
}
inline void CDOTAMatchMetadata_Team_ItemPurchase::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.ItemPurchase.item_id)
}

// optional int32 purchase_time = 2;
inline bool CDOTAMatchMetadata_Team_ItemPurchase::has_purchase_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAMatchMetadata_Team_ItemPurchase::set_has_purchase_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAMatchMetadata_Team_ItemPurchase::clear_has_purchase_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAMatchMetadata_Team_ItemPurchase::clear_purchase_time() {
  purchase_time_ = 0;
  clear_has_purchase_time();
}
inline ::google::protobuf::int32 CDOTAMatchMetadata_Team_ItemPurchase::purchase_time() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.ItemPurchase.purchase_time)
  return purchase_time_;
}
inline void CDOTAMatchMetadata_Team_ItemPurchase::set_purchase_time(::google::protobuf::int32 value) {
  set_has_purchase_time();
  purchase_time_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.ItemPurchase.purchase_time)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_InventorySnapshot

// repeated uint32 item_id = 1;
inline int CDOTAMatchMetadata_Team_InventorySnapshot::item_id_size() const {
  return item_id_.size();
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_item_id() {
  item_id_.Clear();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_InventorySnapshot::item_id(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.InventorySnapshot.item_id)
  return item_id_.Get(index);
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_item_id(int index, ::google::protobuf::uint32 value) {
  item_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.InventorySnapshot.item_id)
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::add_item_id(::google::protobuf::uint32 value) {
  item_id_.Add(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.InventorySnapshot.item_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAMatchMetadata_Team_InventorySnapshot::item_id() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.InventorySnapshot.item_id)
  return item_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAMatchMetadata_Team_InventorySnapshot::mutable_item_id() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.InventorySnapshot.item_id)
  return &item_id_;
}

// optional int32 game_time = 2;
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::has_game_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_has_game_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_game_time() {
  game_time_ = 0;
  clear_has_game_time();
}
inline ::google::protobuf::int32 CDOTAMatchMetadata_Team_InventorySnapshot::game_time() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.InventorySnapshot.game_time)
  return game_time_;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_game_time(::google::protobuf::int32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.InventorySnapshot.game_time)
}

// optional uint32 kills = 3;
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::has_kills() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_has_kills() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_has_kills() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_InventorySnapshot::kills() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.InventorySnapshot.kills)
  return kills_;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.InventorySnapshot.kills)
}

// optional uint32 deaths = 4;
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::has_deaths() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_has_deaths() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_deaths() {
  deaths_ = 0u;
  clear_has_deaths();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_InventorySnapshot::deaths() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.InventorySnapshot.deaths)
  return deaths_;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_deaths(::google::protobuf::uint32 value) {
  set_has_deaths();
  deaths_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.InventorySnapshot.deaths)
}

// optional uint32 assists = 5;
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::has_assists() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_has_assists() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_has_assists() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_assists() {
  assists_ = 0u;
  clear_has_assists();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_InventorySnapshot::assists() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.InventorySnapshot.assists)
  return assists_;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_assists(::google::protobuf::uint32 value) {
  set_has_assists();
  assists_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.InventorySnapshot.assists)
}

// optional uint32 level = 6;
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_InventorySnapshot::level() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.InventorySnapshot.level)
  return level_;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.InventorySnapshot.level)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_AutoStyleCriteria

// optional uint32 name_token = 1;
inline bool CDOTAMatchMetadata_Team_AutoStyleCriteria::has_name_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::set_has_name_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::clear_has_name_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::clear_name_token() {
  name_token_ = 0u;
  clear_has_name_token();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_AutoStyleCriteria::name_token() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.AutoStyleCriteria.name_token)
  return name_token_;
}
inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::set_name_token(::google::protobuf::uint32 value) {
  set_has_name_token();
  name_token_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.AutoStyleCriteria.name_token)
}

// optional float value = 2;
inline bool CDOTAMatchMetadata_Team_AutoStyleCriteria::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float CDOTAMatchMetadata_Team_AutoStyleCriteria::value() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.AutoStyleCriteria.value)
  return value_;
}
inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.AutoStyleCriteria.value)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_Player

// optional uint32 account_id = 1;
inline bool CDOTAMatchMetadata_Team_Player::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::account_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.account_id)
  return account_id_;
}
inline void CDOTAMatchMetadata_Team_Player::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.account_id)
}

// repeated uint32 ability_upgrades = 2;
inline int CDOTAMatchMetadata_Team_Player::ability_upgrades_size() const {
  return ability_upgrades_.size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_ability_upgrades() {
  ability_upgrades_.Clear();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::ability_upgrades(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.ability_upgrades)
  return ability_upgrades_.Get(index);
}
inline void CDOTAMatchMetadata_Team_Player::set_ability_upgrades(int index, ::google::protobuf::uint32 value) {
  ability_upgrades_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.ability_upgrades)
}
inline void CDOTAMatchMetadata_Team_Player::add_ability_upgrades(::google::protobuf::uint32 value) {
  ability_upgrades_.Add(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.ability_upgrades)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAMatchMetadata_Team_Player::ability_upgrades() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.ability_upgrades)
  return ability_upgrades_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAMatchMetadata_Team_Player::mutable_ability_upgrades() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.ability_upgrades)
  return &ability_upgrades_;
}

// optional uint32 player_slot = 3;
inline bool CDOTAMatchMetadata_Team_Player::has_player_slot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::set_has_player_slot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_has_player_slot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_player_slot() {
  player_slot_ = 0u;
  clear_has_player_slot();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::player_slot() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.player_slot)
  return player_slot_;
}
inline void CDOTAMatchMetadata_Team_Player::set_player_slot(::google::protobuf::uint32 value) {
  set_has_player_slot();
  player_slot_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.player_slot)
}

// repeated .CSOEconItem equipped_econ_items = 4;
inline int CDOTAMatchMetadata_Team_Player::equipped_econ_items_size() const {
  return equipped_econ_items_.size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_equipped_econ_items() {
  equipped_econ_items_.Clear();
}
inline const ::CSOEconItem& CDOTAMatchMetadata_Team_Player::equipped_econ_items(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.equipped_econ_items)
  return equipped_econ_items_.Get(index);
}
inline ::CSOEconItem* CDOTAMatchMetadata_Team_Player::mutable_equipped_econ_items(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.Player.equipped_econ_items)
  return equipped_econ_items_.Mutable(index);
}
inline ::CSOEconItem* CDOTAMatchMetadata_Team_Player::add_equipped_econ_items() {
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.equipped_econ_items)
  return equipped_econ_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSOEconItem >&
CDOTAMatchMetadata_Team_Player::equipped_econ_items() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.equipped_econ_items)
  return equipped_econ_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSOEconItem >*
CDOTAMatchMetadata_Team_Player::mutable_equipped_econ_items() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.equipped_econ_items)
  return &equipped_econ_items_;
}

// repeated .CDOTAMatchMetadata.Team.PlayerKill kills = 5;
inline int CDOTAMatchMetadata_Team_Player::kills_size() const {
  return kills_.size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_kills() {
  kills_.Clear();
}
inline const ::CDOTAMatchMetadata_Team_PlayerKill& CDOTAMatchMetadata_Team_Player::kills(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.kills)
  return kills_.Get(index);
}
inline ::CDOTAMatchMetadata_Team_PlayerKill* CDOTAMatchMetadata_Team_Player::mutable_kills(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.Player.kills)
  return kills_.Mutable(index);
}
inline ::CDOTAMatchMetadata_Team_PlayerKill* CDOTAMatchMetadata_Team_Player::add_kills() {
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.kills)
  return kills_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team_PlayerKill >&
CDOTAMatchMetadata_Team_Player::kills() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.kills)
  return kills_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team_PlayerKill >*
CDOTAMatchMetadata_Team_Player::mutable_kills() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.kills)
  return &kills_;
}

// repeated .CDOTAMatchMetadata.Team.ItemPurchase items = 6;
inline int CDOTAMatchMetadata_Team_Player::items_size() const {
  return items_.size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_items() {
  items_.Clear();
}
inline const ::CDOTAMatchMetadata_Team_ItemPurchase& CDOTAMatchMetadata_Team_Player::items(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.items)
  return items_.Get(index);
}
inline ::CDOTAMatchMetadata_Team_ItemPurchase* CDOTAMatchMetadata_Team_Player::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.Player.items)
  return items_.Mutable(index);
}
inline ::CDOTAMatchMetadata_Team_ItemPurchase* CDOTAMatchMetadata_Team_Player::add_items() {
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team_ItemPurchase >&
CDOTAMatchMetadata_Team_Player::items() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team_ItemPurchase >*
CDOTAMatchMetadata_Team_Player::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.items)
  return &items_;
}

// optional uint32 avg_kills_x16 = 7;
inline bool CDOTAMatchMetadata_Team_Player::has_avg_kills_x16() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::set_has_avg_kills_x16() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_has_avg_kills_x16() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_avg_kills_x16() {
  avg_kills_x16_ = 0u;
  clear_has_avg_kills_x16();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::avg_kills_x16() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.avg_kills_x16)
  return avg_kills_x16_;
}
inline void CDOTAMatchMetadata_Team_Player::set_avg_kills_x16(::google::protobuf::uint32 value) {
  set_has_avg_kills_x16();
  avg_kills_x16_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.avg_kills_x16)
}

// optional uint32 avg_deaths_x16 = 8;
inline bool CDOTAMatchMetadata_Team_Player::has_avg_deaths_x16() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::set_has_avg_deaths_x16() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_has_avg_deaths_x16() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_avg_deaths_x16() {
  avg_deaths_x16_ = 0u;
  clear_has_avg_deaths_x16();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::avg_deaths_x16() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.avg_deaths_x16)
  return avg_deaths_x16_;
}
inline void CDOTAMatchMetadata_Team_Player::set_avg_deaths_x16(::google::protobuf::uint32 value) {
  set_has_avg_deaths_x16();
  avg_deaths_x16_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.avg_deaths_x16)
}

// optional uint32 avg_assists_x16 = 9;
inline bool CDOTAMatchMetadata_Team_Player::has_avg_assists_x16() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::set_has_avg_assists_x16() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_has_avg_assists_x16() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_avg_assists_x16() {
  avg_assists_x16_ = 0u;
  clear_has_avg_assists_x16();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::avg_assists_x16() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.avg_assists_x16)
  return avg_assists_x16_;
}
inline void CDOTAMatchMetadata_Team_Player::set_avg_assists_x16(::google::protobuf::uint32 value) {
  set_has_avg_assists_x16();
  avg_assists_x16_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.avg_assists_x16)
}

// optional uint32 avg_gpm_x16 = 10;
inline bool CDOTAMatchMetadata_Team_Player::has_avg_gpm_x16() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::set_has_avg_gpm_x16() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_has_avg_gpm_x16() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_avg_gpm_x16() {
  avg_gpm_x16_ = 0u;
  clear_has_avg_gpm_x16();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::avg_gpm_x16() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.avg_gpm_x16)
  return avg_gpm_x16_;
}
inline void CDOTAMatchMetadata_Team_Player::set_avg_gpm_x16(::google::protobuf::uint32 value) {
  set_has_avg_gpm_x16();
  avg_gpm_x16_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.avg_gpm_x16)
}

// optional uint32 avg_xpm_x16 = 11;
inline bool CDOTAMatchMetadata_Team_Player::has_avg_xpm_x16() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::set_has_avg_xpm_x16() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_has_avg_xpm_x16() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_avg_xpm_x16() {
  avg_xpm_x16_ = 0u;
  clear_has_avg_xpm_x16();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::avg_xpm_x16() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.avg_xpm_x16)
  return avg_xpm_x16_;
}
inline void CDOTAMatchMetadata_Team_Player::set_avg_xpm_x16(::google::protobuf::uint32 value) {
  set_has_avg_xpm_x16();
  avg_xpm_x16_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.avg_xpm_x16)
}

// optional uint32 best_kills_x16 = 12;
inline bool CDOTAMatchMetadata_Team_Player::has_best_kills_x16() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::set_has_best_kills_x16() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_has_best_kills_x16() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_best_kills_x16() {
  best_kills_x16_ = 0u;
  clear_has_best_kills_x16();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::best_kills_x16() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.best_kills_x16)
  return best_kills_x16_;
}
inline void CDOTAMatchMetadata_Team_Player::set_best_kills_x16(::google::protobuf::uint32 value) {
  set_has_best_kills_x16();
  best_kills_x16_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.best_kills_x16)
}

// optional uint32 best_assists_x16 = 13;
inline bool CDOTAMatchMetadata_Team_Player::has_best_assists_x16() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::set_has_best_assists_x16() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_has_best_assists_x16() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_best_assists_x16() {
  best_assists_x16_ = 0u;
  clear_has_best_assists_x16();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::best_assists_x16() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.best_assists_x16)
  return best_assists_x16_;
}
inline void CDOTAMatchMetadata_Team_Player::set_best_assists_x16(::google::protobuf::uint32 value) {
  set_has_best_assists_x16();
  best_assists_x16_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.best_assists_x16)
}

// optional uint32 best_gpm_x16 = 14;
inline bool CDOTAMatchMetadata_Team_Player::has_best_gpm_x16() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::set_has_best_gpm_x16() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_has_best_gpm_x16() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_best_gpm_x16() {
  best_gpm_x16_ = 0u;
  clear_has_best_gpm_x16();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::best_gpm_x16() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.best_gpm_x16)
  return best_gpm_x16_;
}
inline void CDOTAMatchMetadata_Team_Player::set_best_gpm_x16(::google::protobuf::uint32 value) {
  set_has_best_gpm_x16();
  best_gpm_x16_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.best_gpm_x16)
}

// optional uint32 best_xpm_x16 = 15;
inline bool CDOTAMatchMetadata_Team_Player::has_best_xpm_x16() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::set_has_best_xpm_x16() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_has_best_xpm_x16() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_best_xpm_x16() {
  best_xpm_x16_ = 0u;
  clear_has_best_xpm_x16();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::best_xpm_x16() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.best_xpm_x16)
  return best_xpm_x16_;
}
inline void CDOTAMatchMetadata_Team_Player::set_best_xpm_x16(::google::protobuf::uint32 value) {
  set_has_best_xpm_x16();
  best_xpm_x16_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.best_xpm_x16)
}

// optional uint32 win_streak = 16;
inline bool CDOTAMatchMetadata_Team_Player::has_win_streak() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::set_has_win_streak() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_has_win_streak() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_win_streak() {
  win_streak_ = 0u;
  clear_has_win_streak();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::win_streak() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.win_streak)
  return win_streak_;
}
inline void CDOTAMatchMetadata_Team_Player::set_win_streak(::google::protobuf::uint32 value) {
  set_has_win_streak();
  win_streak_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.win_streak)
}

// optional uint32 best_win_streak = 17;
inline bool CDOTAMatchMetadata_Team_Player::has_best_win_streak() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::set_has_best_win_streak() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_has_best_win_streak() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_best_win_streak() {
  best_win_streak_ = 0u;
  clear_has_best_win_streak();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::best_win_streak() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.best_win_streak)
  return best_win_streak_;
}
inline void CDOTAMatchMetadata_Team_Player::set_best_win_streak(::google::protobuf::uint32 value) {
  set_has_best_win_streak();
  best_win_streak_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.best_win_streak)
}

// optional float fight_score = 18;
inline bool CDOTAMatchMetadata_Team_Player::has_fight_score() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::set_has_fight_score() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_has_fight_score() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_fight_score() {
  fight_score_ = 0;
  clear_has_fight_score();
}
inline float CDOTAMatchMetadata_Team_Player::fight_score() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.fight_score)
  return fight_score_;
}
inline void CDOTAMatchMetadata_Team_Player::set_fight_score(float value) {
  set_has_fight_score();
  fight_score_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.fight_score)
}

// optional float farm_score = 19;
inline bool CDOTAMatchMetadata_Team_Player::has_farm_score() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::set_has_farm_score() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_has_farm_score() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_farm_score() {
  farm_score_ = 0;
  clear_has_farm_score();
}
inline float CDOTAMatchMetadata_Team_Player::farm_score() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.farm_score)
  return farm_score_;
}
inline void CDOTAMatchMetadata_Team_Player::set_farm_score(float value) {
  set_has_farm_score();
  farm_score_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.farm_score)
}

// optional float support_score = 20;
inline bool CDOTAMatchMetadata_Team_Player::has_support_score() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::set_has_support_score() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_has_support_score() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_support_score() {
  support_score_ = 0;
  clear_has_support_score();
}
inline float CDOTAMatchMetadata_Team_Player::support_score() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.support_score)
  return support_score_;
}
inline void CDOTAMatchMetadata_Team_Player::set_support_score(float value) {
  set_has_support_score();
  support_score_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.support_score)
}

// optional float push_score = 21;
inline bool CDOTAMatchMetadata_Team_Player::has_push_score() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::set_has_push_score() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_has_push_score() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_push_score() {
  push_score_ = 0;
  clear_has_push_score();
}
inline float CDOTAMatchMetadata_Team_Player::push_score() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.push_score)
  return push_score_;
}
inline void CDOTAMatchMetadata_Team_Player::set_push_score(float value) {
  set_has_push_score();
  push_score_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.push_score)
}

// repeated uint32 level_up_times = 22;
inline int CDOTAMatchMetadata_Team_Player::level_up_times_size() const {
  return level_up_times_.size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_level_up_times() {
  level_up_times_.Clear();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::level_up_times(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.level_up_times)
  return level_up_times_.Get(index);
}
inline void CDOTAMatchMetadata_Team_Player::set_level_up_times(int index, ::google::protobuf::uint32 value) {
  level_up_times_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.level_up_times)
}
inline void CDOTAMatchMetadata_Team_Player::add_level_up_times(::google::protobuf::uint32 value) {
  level_up_times_.Add(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.level_up_times)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAMatchMetadata_Team_Player::level_up_times() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.level_up_times)
  return level_up_times_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAMatchMetadata_Team_Player::mutable_level_up_times() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.level_up_times)
  return &level_up_times_;
}

// repeated float graph_net_worth = 23;
inline int CDOTAMatchMetadata_Team_Player::graph_net_worth_size() const {
  return graph_net_worth_.size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_graph_net_worth() {
  graph_net_worth_.Clear();
}
inline float CDOTAMatchMetadata_Team_Player::graph_net_worth(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.graph_net_worth)
  return graph_net_worth_.Get(index);
}
inline void CDOTAMatchMetadata_Team_Player::set_graph_net_worth(int index, float value) {
  graph_net_worth_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.graph_net_worth)
}
inline void CDOTAMatchMetadata_Team_Player::add_graph_net_worth(float value) {
  graph_net_worth_.Add(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.graph_net_worth)
}
inline const ::google::protobuf::RepeatedField< float >&
CDOTAMatchMetadata_Team_Player::graph_net_worth() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.graph_net_worth)
  return graph_net_worth_;
}
inline ::google::protobuf::RepeatedField< float >*
CDOTAMatchMetadata_Team_Player::mutable_graph_net_worth() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.graph_net_worth)
  return &graph_net_worth_;
}

// repeated .CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
inline int CDOTAMatchMetadata_Team_Player::inventory_snapshot_size() const {
  return inventory_snapshot_.size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_inventory_snapshot() {
  inventory_snapshot_.Clear();
}
inline const ::CDOTAMatchMetadata_Team_InventorySnapshot& CDOTAMatchMetadata_Team_Player::inventory_snapshot(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.inventory_snapshot)
  return inventory_snapshot_.Get(index);
}
inline ::CDOTAMatchMetadata_Team_InventorySnapshot* CDOTAMatchMetadata_Team_Player::mutable_inventory_snapshot(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.Player.inventory_snapshot)
  return inventory_snapshot_.Mutable(index);
}
inline ::CDOTAMatchMetadata_Team_InventorySnapshot* CDOTAMatchMetadata_Team_Player::add_inventory_snapshot() {
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.inventory_snapshot)
  return inventory_snapshot_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team_InventorySnapshot >&
CDOTAMatchMetadata_Team_Player::inventory_snapshot() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.inventory_snapshot)
  return inventory_snapshot_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team_InventorySnapshot >*
CDOTAMatchMetadata_Team_Player::mutable_inventory_snapshot() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.inventory_snapshot)
  return &inventory_snapshot_;
}

// optional bool avg_stats_calibrated = 25;
inline bool CDOTAMatchMetadata_Team_Player::has_avg_stats_calibrated() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CDOTAMatchMetadata_Team_Player::set_has_avg_stats_calibrated() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_has_avg_stats_calibrated() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CDOTAMatchMetadata_Team_Player::clear_avg_stats_calibrated() {
  avg_stats_calibrated_ = false;
  clear_has_avg_stats_calibrated();
}
inline bool CDOTAMatchMetadata_Team_Player::avg_stats_calibrated() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.avg_stats_calibrated)
  return avg_stats_calibrated_;
}
inline void CDOTAMatchMetadata_Team_Player::set_avg_stats_calibrated(bool value) {
  set_has_avg_stats_calibrated();
  avg_stats_calibrated_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.avg_stats_calibrated)
}

// repeated .CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
inline int CDOTAMatchMetadata_Team_Player::auto_style_criteria_size() const {
  return auto_style_criteria_.size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_auto_style_criteria() {
  auto_style_criteria_.Clear();
}
inline const ::CDOTAMatchMetadata_Team_AutoStyleCriteria& CDOTAMatchMetadata_Team_Player::auto_style_criteria(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.auto_style_criteria)
  return auto_style_criteria_.Get(index);
}
inline ::CDOTAMatchMetadata_Team_AutoStyleCriteria* CDOTAMatchMetadata_Team_Player::mutable_auto_style_criteria(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.Player.auto_style_criteria)
  return auto_style_criteria_.Mutable(index);
}
inline ::CDOTAMatchMetadata_Team_AutoStyleCriteria* CDOTAMatchMetadata_Team_Player::add_auto_style_criteria() {
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.auto_style_criteria)
  return auto_style_criteria_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team_AutoStyleCriteria >&
CDOTAMatchMetadata_Team_Player::auto_style_criteria() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.auto_style_criteria)
  return auto_style_criteria_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team_AutoStyleCriteria >*
CDOTAMatchMetadata_Team_Player::mutable_auto_style_criteria() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.auto_style_criteria)
  return &auto_style_criteria_;
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team

// optional uint32 dota_team = 1;
inline bool CDOTAMatchMetadata_Team::has_dota_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchMetadata_Team::set_has_dota_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAMatchMetadata_Team::clear_has_dota_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAMatchMetadata_Team::clear_dota_team() {
  dota_team_ = 0u;
  clear_has_dota_team();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team::dota_team() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.dota_team)
  return dota_team_;
}
inline void CDOTAMatchMetadata_Team::set_dota_team(::google::protobuf::uint32 value) {
  set_has_dota_team();
  dota_team_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.dota_team)
}

// repeated .CDOTAMatchMetadata.Team.Player players = 2;
inline int CDOTAMatchMetadata_Team::players_size() const {
  return players_.size();
}
inline void CDOTAMatchMetadata_Team::clear_players() {
  players_.Clear();
}
inline const ::CDOTAMatchMetadata_Team_Player& CDOTAMatchMetadata_Team::players(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.players)
  return players_.Get(index);
}
inline ::CDOTAMatchMetadata_Team_Player* CDOTAMatchMetadata_Team::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.players)
  return players_.Mutable(index);
}
inline ::CDOTAMatchMetadata_Team_Player* CDOTAMatchMetadata_Team::add_players() {
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team_Player >&
CDOTAMatchMetadata_Team::players() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.players)
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team_Player >*
CDOTAMatchMetadata_Team::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.players)
  return &players_;
}

// repeated float graph_experience = 3;
inline int CDOTAMatchMetadata_Team::graph_experience_size() const {
  return graph_experience_.size();
}
inline void CDOTAMatchMetadata_Team::clear_graph_experience() {
  graph_experience_.Clear();
}
inline float CDOTAMatchMetadata_Team::graph_experience(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.graph_experience)
  return graph_experience_.Get(index);
}
inline void CDOTAMatchMetadata_Team::set_graph_experience(int index, float value) {
  graph_experience_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.graph_experience)
}
inline void CDOTAMatchMetadata_Team::add_graph_experience(float value) {
  graph_experience_.Add(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.graph_experience)
}
inline const ::google::protobuf::RepeatedField< float >&
CDOTAMatchMetadata_Team::graph_experience() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.graph_experience)
  return graph_experience_;
}
inline ::google::protobuf::RepeatedField< float >*
CDOTAMatchMetadata_Team::mutable_graph_experience() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.graph_experience)
  return &graph_experience_;
}

// repeated float graph_gold_earned = 4;
inline int CDOTAMatchMetadata_Team::graph_gold_earned_size() const {
  return graph_gold_earned_.size();
}
inline void CDOTAMatchMetadata_Team::clear_graph_gold_earned() {
  graph_gold_earned_.Clear();
}
inline float CDOTAMatchMetadata_Team::graph_gold_earned(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.graph_gold_earned)
  return graph_gold_earned_.Get(index);
}
inline void CDOTAMatchMetadata_Team::set_graph_gold_earned(int index, float value) {
  graph_gold_earned_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.graph_gold_earned)
}
inline void CDOTAMatchMetadata_Team::add_graph_gold_earned(float value) {
  graph_gold_earned_.Add(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.graph_gold_earned)
}
inline const ::google::protobuf::RepeatedField< float >&
CDOTAMatchMetadata_Team::graph_gold_earned() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.graph_gold_earned)
  return graph_gold_earned_;
}
inline ::google::protobuf::RepeatedField< float >*
CDOTAMatchMetadata_Team::mutable_graph_gold_earned() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.graph_gold_earned)
  return &graph_gold_earned_;
}

// repeated float graph_net_worth = 5;
inline int CDOTAMatchMetadata_Team::graph_net_worth_size() const {
  return graph_net_worth_.size();
}
inline void CDOTAMatchMetadata_Team::clear_graph_net_worth() {
  graph_net_worth_.Clear();
}
inline float CDOTAMatchMetadata_Team::graph_net_worth(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.graph_net_worth)
  return graph_net_worth_.Get(index);
}
inline void CDOTAMatchMetadata_Team::set_graph_net_worth(int index, float value) {
  graph_net_worth_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.graph_net_worth)
}
inline void CDOTAMatchMetadata_Team::add_graph_net_worth(float value) {
  graph_net_worth_.Add(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.graph_net_worth)
}
inline const ::google::protobuf::RepeatedField< float >&
CDOTAMatchMetadata_Team::graph_net_worth() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.graph_net_worth)
  return graph_net_worth_;
}
inline ::google::protobuf::RepeatedField< float >*
CDOTAMatchMetadata_Team::mutable_graph_net_worth() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.graph_net_worth)
  return &graph_net_worth_;
}

// optional bool cm_first_pick = 6;
inline bool CDOTAMatchMetadata_Team::has_cm_first_pick() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTAMatchMetadata_Team::set_has_cm_first_pick() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDOTAMatchMetadata_Team::clear_has_cm_first_pick() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDOTAMatchMetadata_Team::clear_cm_first_pick() {
  cm_first_pick_ = false;
  clear_has_cm_first_pick();
}
inline bool CDOTAMatchMetadata_Team::cm_first_pick() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.cm_first_pick)
  return cm_first_pick_;
}
inline void CDOTAMatchMetadata_Team::set_cm_first_pick(bool value) {
  set_has_cm_first_pick();
  cm_first_pick_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.cm_first_pick)
}

// optional uint32 cm_captain_player_id = 7;
inline bool CDOTAMatchMetadata_Team::has_cm_captain_player_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDOTAMatchMetadata_Team::set_has_cm_captain_player_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CDOTAMatchMetadata_Team::clear_has_cm_captain_player_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CDOTAMatchMetadata_Team::clear_cm_captain_player_id() {
  cm_captain_player_id_ = 0u;
  clear_has_cm_captain_player_id();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team::cm_captain_player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.cm_captain_player_id)
  return cm_captain_player_id_;
}
inline void CDOTAMatchMetadata_Team::set_cm_captain_player_id(::google::protobuf::uint32 value) {
  set_has_cm_captain_player_id();
  cm_captain_player_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.cm_captain_player_id)
}

// repeated uint32 cm_bans = 8;
inline int CDOTAMatchMetadata_Team::cm_bans_size() const {
  return cm_bans_.size();
}
inline void CDOTAMatchMetadata_Team::clear_cm_bans() {
  cm_bans_.Clear();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team::cm_bans(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.cm_bans)
  return cm_bans_.Get(index);
}
inline void CDOTAMatchMetadata_Team::set_cm_bans(int index, ::google::protobuf::uint32 value) {
  cm_bans_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.cm_bans)
}
inline void CDOTAMatchMetadata_Team::add_cm_bans(::google::protobuf::uint32 value) {
  cm_bans_.Add(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.cm_bans)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAMatchMetadata_Team::cm_bans() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.cm_bans)
  return cm_bans_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAMatchMetadata_Team::mutable_cm_bans() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.cm_bans)
  return &cm_bans_;
}

// repeated uint32 cm_picks = 9;
inline int CDOTAMatchMetadata_Team::cm_picks_size() const {
  return cm_picks_.size();
}
inline void CDOTAMatchMetadata_Team::clear_cm_picks() {
  cm_picks_.Clear();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team::cm_picks(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.cm_picks)
  return cm_picks_.Get(index);
}
inline void CDOTAMatchMetadata_Team::set_cm_picks(int index, ::google::protobuf::uint32 value) {
  cm_picks_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.cm_picks)
}
inline void CDOTAMatchMetadata_Team::add_cm_picks(::google::protobuf::uint32 value) {
  cm_picks_.Add(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.cm_picks)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAMatchMetadata_Team::cm_picks() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.cm_picks)
  return cm_picks_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAMatchMetadata_Team::mutable_cm_picks() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.cm_picks)
  return &cm_picks_;
}

// optional uint32 cm_penalty = 10;
inline bool CDOTAMatchMetadata_Team::has_cm_penalty() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CDOTAMatchMetadata_Team::set_has_cm_penalty() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CDOTAMatchMetadata_Team::clear_has_cm_penalty() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CDOTAMatchMetadata_Team::clear_cm_penalty() {
  cm_penalty_ = 0u;
  clear_has_cm_penalty();
}
inline ::google::protobuf::uint32 CDOTAMatchMetadata_Team::cm_penalty() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.cm_penalty)
  return cm_penalty_;
}
inline void CDOTAMatchMetadata_Team::set_cm_penalty(::google::protobuf::uint32 value) {
  set_has_cm_penalty();
  cm_penalty_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.cm_penalty)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata

// repeated .CDOTAMatchMetadata.Team teams = 1;
inline int CDOTAMatchMetadata::teams_size() const {
  return teams_.size();
}
inline void CDOTAMatchMetadata::clear_teams() {
  teams_.Clear();
}
inline const ::CDOTAMatchMetadata_Team& CDOTAMatchMetadata::teams(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.teams)
  return teams_.Get(index);
}
inline ::CDOTAMatchMetadata_Team* CDOTAMatchMetadata::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.teams)
  return teams_.Mutable(index);
}
inline ::CDOTAMatchMetadata_Team* CDOTAMatchMetadata::add_teams() {
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.teams)
  return teams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team >&
CDOTAMatchMetadata::teams() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.teams)
  return teams_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTAMatchMetadata_Team >*
CDOTAMatchMetadata::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.teams)
  return &teams_;
}

// repeated .CLobbyTimedRewardDetails item_rewards = 2;
inline int CDOTAMatchMetadata::item_rewards_size() const {
  return item_rewards_.size();
}
inline void CDOTAMatchMetadata::clear_item_rewards() {
  item_rewards_.Clear();
}
inline const ::CLobbyTimedRewardDetails& CDOTAMatchMetadata::item_rewards(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.item_rewards)
  return item_rewards_.Get(index);
}
inline ::CLobbyTimedRewardDetails* CDOTAMatchMetadata::mutable_item_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.item_rewards)
  return item_rewards_.Mutable(index);
}
inline ::CLobbyTimedRewardDetails* CDOTAMatchMetadata::add_item_rewards() {
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.item_rewards)
  return item_rewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >&
CDOTAMatchMetadata::item_rewards() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.item_rewards)
  return item_rewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >*
CDOTAMatchMetadata::mutable_item_rewards() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.item_rewards)
  return &item_rewards_;
}

// optional fixed64 lobby_id = 3;
inline bool CDOTAMatchMetadata::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAMatchMetadata::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAMatchMetadata::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAMatchMetadata::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
inline ::google::protobuf::uint64 CDOTAMatchMetadata::lobby_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.lobby_id)
  return lobby_id_;
}
inline void CDOTAMatchMetadata::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.lobby_id)
}

// optional fixed64 report_until_time = 4;
inline bool CDOTAMatchMetadata::has_report_until_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAMatchMetadata::set_has_report_until_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAMatchMetadata::clear_has_report_until_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAMatchMetadata::clear_report_until_time() {
  report_until_time_ = GOOGLE_ULONGLONG(0);
  clear_has_report_until_time();
}
inline ::google::protobuf::uint64 CDOTAMatchMetadata::report_until_time() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.report_until_time)
  return report_until_time_;
}
inline void CDOTAMatchMetadata::set_report_until_time(::google::protobuf::uint64 value) {
  set_has_report_until_time();
  report_until_time_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.report_until_time)
}

// -------------------------------------------------------------------

// CDOTAMatchPrivateMetadata_Team_Player

// optional uint32 account_id = 1;
inline bool CDOTAMatchPrivateMetadata_Team_Player::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CDOTAMatchPrivateMetadata_Team_Player::account_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.account_id)
  return account_id_;
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.account_id)
}

// optional uint32 player_slot = 2;
inline bool CDOTAMatchPrivateMetadata_Team_Player::has_player_slot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_has_player_slot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_has_player_slot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_player_slot() {
  player_slot_ = 0u;
  clear_has_player_slot();
}
inline ::google::protobuf::uint32 CDOTAMatchPrivateMetadata_Team_Player::player_slot() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.player_slot)
  return player_slot_;
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_player_slot(::google::protobuf::uint32 value) {
  set_has_player_slot();
  player_slot_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.player_slot)
}

// optional bytes position_stream = 3;
inline bool CDOTAMatchPrivateMetadata_Team_Player::has_position_stream() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_has_position_stream() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_has_position_stream() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAMatchPrivateMetadata_Team_Player::clear_position_stream() {
  if (position_stream_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_stream_->clear();
  }
  clear_has_position_stream();
}
inline const ::std::string& CDOTAMatchPrivateMetadata_Team_Player::position_stream() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Player.position_stream)
  return *position_stream_;
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_position_stream(const ::std::string& value) {
  set_has_position_stream();
  if (position_stream_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_stream_ = new ::std::string;
  }
  position_stream_->assign(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Player.position_stream)
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_position_stream(const char* value) {
  set_has_position_stream();
  if (position_stream_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_stream_ = new ::std::string;
  }
  position_stream_->assign(value);
  // @@protoc_insertion_point(field_set_char:CDOTAMatchPrivateMetadata.Team.Player.position_stream)
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_position_stream(const void* value, size_t size) {
  set_has_position_stream();
  if (position_stream_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_stream_ = new ::std::string;
  }
  position_stream_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CDOTAMatchPrivateMetadata.Team.Player.position_stream)
}
inline ::std::string* CDOTAMatchPrivateMetadata_Team_Player::mutable_position_stream() {
  set_has_position_stream();
  if (position_stream_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_stream_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CDOTAMatchPrivateMetadata.Team.Player.position_stream)
  return position_stream_;
}
inline ::std::string* CDOTAMatchPrivateMetadata_Team_Player::release_position_stream() {
  clear_has_position_stream();
  if (position_stream_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = position_stream_;
    position_stream_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CDOTAMatchPrivateMetadata_Team_Player::set_allocated_position_stream(::std::string* position_stream) {
  if (position_stream_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_stream_;
  }
  if (position_stream) {
    set_has_position_stream();
    position_stream_ = position_stream;
  } else {
    clear_has_position_stream();
    position_stream_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTAMatchPrivateMetadata.Team.Player.position_stream)
}

// -------------------------------------------------------------------

// CDOTAMatchPrivateMetadata_Team_Building

// optional string unit_name = 1;
inline bool CDOTAMatchPrivateMetadata_Team_Building::has_unit_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchPrivateMetadata_Team_Building::set_has_unit_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAMatchPrivateMetadata_Team_Building::clear_has_unit_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAMatchPrivateMetadata_Team_Building::clear_unit_name() {
  if (unit_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unit_name_->clear();
  }
  clear_has_unit_name();
}
inline const ::std::string& CDOTAMatchPrivateMetadata_Team_Building::unit_name() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Building.unit_name)
  return *unit_name_;
}
inline void CDOTAMatchPrivateMetadata_Team_Building::set_unit_name(const ::std::string& value) {
  set_has_unit_name();
  if (unit_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unit_name_ = new ::std::string;
  }
  unit_name_->assign(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Building.unit_name)
}
inline void CDOTAMatchPrivateMetadata_Team_Building::set_unit_name(const char* value) {
  set_has_unit_name();
  if (unit_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unit_name_ = new ::std::string;
  }
  unit_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CDOTAMatchPrivateMetadata.Team.Building.unit_name)
}
inline void CDOTAMatchPrivateMetadata_Team_Building::set_unit_name(const char* value, size_t size) {
  set_has_unit_name();
  if (unit_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unit_name_ = new ::std::string;
  }
  unit_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CDOTAMatchPrivateMetadata.Team.Building.unit_name)
}
inline ::std::string* CDOTAMatchPrivateMetadata_Team_Building::mutable_unit_name() {
  set_has_unit_name();
  if (unit_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unit_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CDOTAMatchPrivateMetadata.Team.Building.unit_name)
  return unit_name_;
}
inline ::std::string* CDOTAMatchPrivateMetadata_Team_Building::release_unit_name() {
  clear_has_unit_name();
  if (unit_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = unit_name_;
    unit_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CDOTAMatchPrivateMetadata_Team_Building::set_allocated_unit_name(::std::string* unit_name) {
  if (unit_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unit_name_;
  }
  if (unit_name) {
    set_has_unit_name();
    unit_name_ = unit_name;
  } else {
    clear_has_unit_name();
    unit_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTAMatchPrivateMetadata.Team.Building.unit_name)
}

// optional uint32 position_quant_x = 2;
inline bool CDOTAMatchPrivateMetadata_Team_Building::has_position_quant_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAMatchPrivateMetadata_Team_Building::set_has_position_quant_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAMatchPrivateMetadata_Team_Building::clear_has_position_quant_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAMatchPrivateMetadata_Team_Building::clear_position_quant_x() {
  position_quant_x_ = 0u;
  clear_has_position_quant_x();
}
inline ::google::protobuf::uint32 CDOTAMatchPrivateMetadata_Team_Building::position_quant_x() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Building.position_quant_x)
  return position_quant_x_;
}
inline void CDOTAMatchPrivateMetadata_Team_Building::set_position_quant_x(::google::protobuf::uint32 value) {
  set_has_position_quant_x();
  position_quant_x_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Building.position_quant_x)
}

// optional uint32 position_quant_y = 3;
inline bool CDOTAMatchPrivateMetadata_Team_Building::has_position_quant_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAMatchPrivateMetadata_Team_Building::set_has_position_quant_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAMatchPrivateMetadata_Team_Building::clear_has_position_quant_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAMatchPrivateMetadata_Team_Building::clear_position_quant_y() {
  position_quant_y_ = 0u;
  clear_has_position_quant_y();
}
inline ::google::protobuf::uint32 CDOTAMatchPrivateMetadata_Team_Building::position_quant_y() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Building.position_quant_y)
  return position_quant_y_;
}
inline void CDOTAMatchPrivateMetadata_Team_Building::set_position_quant_y(::google::protobuf::uint32 value) {
  set_has_position_quant_y();
  position_quant_y_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Building.position_quant_y)
}

// optional float death_time = 4;
inline bool CDOTAMatchPrivateMetadata_Team_Building::has_death_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAMatchPrivateMetadata_Team_Building::set_has_death_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAMatchPrivateMetadata_Team_Building::clear_has_death_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAMatchPrivateMetadata_Team_Building::clear_death_time() {
  death_time_ = 0;
  clear_has_death_time();
}
inline float CDOTAMatchPrivateMetadata_Team_Building::death_time() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.Building.death_time)
  return death_time_;
}
inline void CDOTAMatchPrivateMetadata_Team_Building::set_death_time(float value) {
  set_has_death_time();
  death_time_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.Building.death_time)
}

// -------------------------------------------------------------------

// CDOTAMatchPrivateMetadata_Team

// optional uint32 dota_team = 1;
inline bool CDOTAMatchPrivateMetadata_Team::has_dota_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAMatchPrivateMetadata_Team::set_has_dota_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAMatchPrivateMetadata_Team::clear_has_dota_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAMatchPrivateMetadata_Team::clear_dota_team() {
  dota_team_ = 0u;
  clear_has_dota_team();
}
inline ::google::protobuf::uint32 CDOTAMatchPrivateMetadata_Team::dota_team() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.dota_team)
  return dota_team_;
}
inline void CDOTAMatchPrivateMetadata_Team::set_dota_team(::google::protobuf::uint32 value) {
  set_has_dota_team();
  dota_team_ = value;
  // @@protoc_insertion_point(field_set:CDOTAMatchPrivateMetadata.Team.dota_team)
}

// repeated .CDOTAMatchPrivateMetadata.Team.Player players = 2;
inline int CDOTAMatchPrivateMetadata_Team::players_size() const {
  return players_.size();
}
inline void CDOTAMatchPrivateMetadata_Team::clear_players() {
  players_.Clear();
}
inline const ::CDOTAMatchPrivateMetadata_Team_Player& CDOTAMatchPrivateMetadata_Team::players(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.players)
  return players_.Get(index);
}
inline ::CDOTAMatchPrivateMetadata_Team_Player* CDOTAMatchPrivateMetadata_Team::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchPrivateMetadata.Team.players)
  return players_.Mutable(index);
}
inline ::CDOTAMatchPrivateMetadata_Team_Player* CDOTAMatchPrivateMetadata_Team::add_players() {
  // @@protoc_insertion_point(field_add:CDOTAMatchPrivateMetadata.Team.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player >&
CDOTAMatchPrivateMetadata_Team::players() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchPrivateMetadata.Team.players)
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Player >*
CDOTAMatchPrivateMetadata_Team::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchPrivateMetadata.Team.players)
  return &players_;
}

// repeated .CDOTAMatchPrivateMetadata.Team.Building buildings = 3;
inline int CDOTAMatchPrivateMetadata_Team::buildings_size() const {
  return buildings_.size();
}
inline void CDOTAMatchPrivateMetadata_Team::clear_buildings() {
  buildings_.Clear();
}
inline const ::CDOTAMatchPrivateMetadata_Team_Building& CDOTAMatchPrivateMetadata_Team::buildings(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.Team.buildings)
  return buildings_.Get(index);
}
inline ::CDOTAMatchPrivateMetadata_Team_Building* CDOTAMatchPrivateMetadata_Team::mutable_buildings(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchPrivateMetadata.Team.buildings)
  return buildings_.Mutable(index);
}
inline ::CDOTAMatchPrivateMetadata_Team_Building* CDOTAMatchPrivateMetadata_Team::add_buildings() {
  // @@protoc_insertion_point(field_add:CDOTAMatchPrivateMetadata.Team.buildings)
  return buildings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Building >&
CDOTAMatchPrivateMetadata_Team::buildings() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchPrivateMetadata.Team.buildings)
  return buildings_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team_Building >*
CDOTAMatchPrivateMetadata_Team::mutable_buildings() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchPrivateMetadata.Team.buildings)
  return &buildings_;
}

// -------------------------------------------------------------------

// CDOTAMatchPrivateMetadata

// repeated .CDOTAMatchPrivateMetadata.Team teams = 1;
inline int CDOTAMatchPrivateMetadata::teams_size() const {
  return teams_.size();
}
inline void CDOTAMatchPrivateMetadata::clear_teams() {
  teams_.Clear();
}
inline const ::CDOTAMatchPrivateMetadata_Team& CDOTAMatchPrivateMetadata::teams(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchPrivateMetadata.teams)
  return teams_.Get(index);
}
inline ::CDOTAMatchPrivateMetadata_Team* CDOTAMatchPrivateMetadata::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchPrivateMetadata.teams)
  return teams_.Mutable(index);
}
inline ::CDOTAMatchPrivateMetadata_Team* CDOTAMatchPrivateMetadata::add_teams() {
  // @@protoc_insertion_point(field_add:CDOTAMatchPrivateMetadata.teams)
  return teams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team >&
CDOTAMatchPrivateMetadata::teams() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchPrivateMetadata.teams)
  return teams_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTAMatchPrivateMetadata_Team >*
CDOTAMatchPrivateMetadata::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchPrivateMetadata.teams)
  return &teams_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dota_5fmatch_5fmetadata_2eproto__INCLUDED
