// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_shared_enums.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_shared_enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CDOTAClientHardwareSpecs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientHardwareSpecs_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTASaveGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTASaveGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTASaveGame_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTASaveGame_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTASaveGame_SaveInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTASaveGame_SaveInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTASaveGame_SaveInstance_PlayerPositions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTASaveGame_SaveInstance_PlayerPositions_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_GameMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_GameState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_GC_TEAM_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EEvent_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTALeaverStatus_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTAConnectionState_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Fantasy_Roles_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Fantasy_Team_Slots_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Fantasy_Selection_Mode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTAChatChannelType_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EProfileCardSlotType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMatchGroupServerStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_CM_PICK_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTALowPriorityBanType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTALobbyReadyState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTAGameVersion_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTAJoinLobbyResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SelectionPriorityType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTAMatchVote_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_LobbyMemberXPBonus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTALobbyVisibility_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDOTAPlayerMMRType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MatchType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTABotDifficulty_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_BOT_MODE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MatchLanguages_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETourneyQueueDeadlineState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMatchOutcome_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dota_5fshared_5fenums_2eproto() {
  protobuf_AddDesc_dota_5fshared_5fenums_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dota_shared_enums.proto");
  GOOGLE_CHECK(file != NULL);
  CDOTAClientHardwareSpecs_descriptor_ = file->message_type(0);
  static const int CDOTAClientHardwareSpecs_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientHardwareSpecs, logical_processors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientHardwareSpecs, cpu_cycles_per_second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientHardwareSpecs, total_physical_memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientHardwareSpecs, is_64_bit_os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientHardwareSpecs, upload_measurement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientHardwareSpecs, prefer_not_host_),
  };
  CDOTAClientHardwareSpecs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientHardwareSpecs_descriptor_,
      CDOTAClientHardwareSpecs::default_instance_,
      CDOTAClientHardwareSpecs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientHardwareSpecs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientHardwareSpecs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientHardwareSpecs));
  CDOTASaveGame_descriptor_ = file->message_type(1);
  static const int CDOTASaveGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame, save_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame, save_instances_),
  };
  CDOTASaveGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTASaveGame_descriptor_,
      CDOTASaveGame::default_instance_,
      CDOTASaveGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTASaveGame));
  CDOTASaveGame_Player_descriptor_ = CDOTASaveGame_descriptor_->nested_type(0);
  static const int CDOTASaveGame_Player_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_Player, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_Player, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_Player, hero_),
  };
  CDOTASaveGame_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTASaveGame_Player_descriptor_,
      CDOTASaveGame_Player::default_instance_,
      CDOTASaveGame_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTASaveGame_Player));
  CDOTASaveGame_SaveInstance_descriptor_ = CDOTASaveGame_descriptor_->nested_type(1);
  static const int CDOTASaveGame_SaveInstance_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, game_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, team1_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, team2_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, player_positions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, save_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, save_time_),
  };
  CDOTASaveGame_SaveInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTASaveGame_SaveInstance_descriptor_,
      CDOTASaveGame_SaveInstance::default_instance_,
      CDOTASaveGame_SaveInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTASaveGame_SaveInstance));
  CDOTASaveGame_SaveInstance_PlayerPositions_descriptor_ = CDOTASaveGame_SaveInstance_descriptor_->nested_type(0);
  static const int CDOTASaveGame_SaveInstance_PlayerPositions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance_PlayerPositions, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance_PlayerPositions, y_),
  };
  CDOTASaveGame_SaveInstance_PlayerPositions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTASaveGame_SaveInstance_PlayerPositions_descriptor_,
      CDOTASaveGame_SaveInstance_PlayerPositions::default_instance_,
      CDOTASaveGame_SaveInstance_PlayerPositions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance_PlayerPositions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance_PlayerPositions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTASaveGame_SaveInstance_PlayerPositions));
  DOTA_GameMode_descriptor_ = file->enum_type(0);
  DOTA_GameState_descriptor_ = file->enum_type(1);
  DOTA_GC_TEAM_descriptor_ = file->enum_type(2);
  EEvent_descriptor_ = file->enum_type(3);
  DOTALeaverStatus_t_descriptor_ = file->enum_type(4);
  DOTAConnectionState_t_descriptor_ = file->enum_type(5);
  Fantasy_Roles_descriptor_ = file->enum_type(6);
  Fantasy_Team_Slots_descriptor_ = file->enum_type(7);
  Fantasy_Selection_Mode_descriptor_ = file->enum_type(8);
  DOTAChatChannelType_t_descriptor_ = file->enum_type(9);
  EProfileCardSlotType_descriptor_ = file->enum_type(10);
  EMatchGroupServerStatus_descriptor_ = file->enum_type(11);
  DOTA_CM_PICK_descriptor_ = file->enum_type(12);
  DOTALowPriorityBanType_descriptor_ = file->enum_type(13);
  DOTALobbyReadyState_descriptor_ = file->enum_type(14);
  DOTAGameVersion_descriptor_ = file->enum_type(15);
  DOTAJoinLobbyResult_descriptor_ = file->enum_type(16);
  SelectionPriorityType_descriptor_ = file->enum_type(17);
  DOTAMatchVote_descriptor_ = file->enum_type(18);
  DOTA_LobbyMemberXPBonus_descriptor_ = file->enum_type(19);
  DOTALobbyVisibility_descriptor_ = file->enum_type(20);
  EDOTAPlayerMMRType_descriptor_ = file->enum_type(21);
  MatchType_descriptor_ = file->enum_type(22);
  DOTABotDifficulty_descriptor_ = file->enum_type(23);
  DOTA_BOT_MODE_descriptor_ = file->enum_type(24);
  MatchLanguages_descriptor_ = file->enum_type(25);
  ETourneyQueueDeadlineState_descriptor_ = file->enum_type(26);
  EMatchOutcome_descriptor_ = file->enum_type(27);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dota_5fshared_5fenums_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientHardwareSpecs_descriptor_, &CDOTAClientHardwareSpecs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTASaveGame_descriptor_, &CDOTASaveGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTASaveGame_Player_descriptor_, &CDOTASaveGame_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTASaveGame_SaveInstance_descriptor_, &CDOTASaveGame_SaveInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTASaveGame_SaveInstance_PlayerPositions_descriptor_, &CDOTASaveGame_SaveInstance_PlayerPositions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dota_5fshared_5fenums_2eproto() {
  delete CDOTAClientHardwareSpecs::default_instance_;
  delete CDOTAClientHardwareSpecs_reflection_;
  delete CDOTASaveGame::default_instance_;
  delete CDOTASaveGame_reflection_;
  delete CDOTASaveGame_Player::default_instance_;
  delete CDOTASaveGame_Player_reflection_;
  delete CDOTASaveGame_SaveInstance::default_instance_;
  delete CDOTASaveGame_SaveInstance_reflection_;
  delete CDOTASaveGame_SaveInstance_PlayerPositions::default_instance_;
  delete CDOTASaveGame_SaveInstance_PlayerPositions_reflection_;
}

void protobuf_AddDesc_dota_5fshared_5fenums_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027dota_shared_enums.proto\"\277\001\n\030CDOTAClien"
    "tHardwareSpecs\022\032\n\022logical_processors\030\001 \001"
    "(\r\022\035\n\025cpu_cycles_per_second\030\002 \001(\006\022\035\n\025tot"
    "al_physical_memory\030\003 \001(\006\022\024\n\014is_64_bit_os"
    "\030\004 \001(\010\022\032\n\022upload_measurement\030\005 \001(\004\022\027\n\017pr"
    "efer_not_host\030\006 \001(\010\"\316\003\n\rCDOTASaveGame\022\020\n"
    "\010match_id\030\005 \001(\004\022\021\n\tsave_time\030\002 \001(\r\022&\n\007pl"
    "ayers\030\003 \003(\0132\025.CDOTASaveGame.Player\0223\n\016sa"
    "ve_instances\030\004 \003(\0132\033.CDOTASaveGame.SaveI"
    "nstance\032Y\n\006Player\0223\n\004team\030\001 \001(\0162\r.DOTA_G"
    "C_TEAM:\026DOTA_GC_TEAM_GOOD_GUYS\022\014\n\004name\030\002"
    " \001(\t\022\014\n\004hero\030\003 \001(\t\032\337\001\n\014SaveInstance\022\021\n\tg"
    "ame_time\030\002 \001(\r\022\023\n\013team1_score\030\003 \001(\r\022\023\n\013t"
    "eam2_score\030\004 \001(\r\022E\n\020player_positions\030\005 \003"
    "(\0132+.CDOTASaveGame.SaveInstance.PlayerPo"
    "sitions\022\017\n\007save_id\030\006 \001(\r\022\021\n\tsave_time\030\007 "
    "\001(\r\032\'\n\017PlayerPositions\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002"
    " \001(\002*\300\004\n\rDOTA_GameMode\022\026\n\022DOTA_GAMEMODE_"
    "NONE\020\000\022\024\n\020DOTA_GAMEMODE_AP\020\001\022\024\n\020DOTA_GAM"
    "EMODE_CM\020\002\022\024\n\020DOTA_GAMEMODE_RD\020\003\022\024\n\020DOTA"
    "_GAMEMODE_SD\020\004\022\024\n\020DOTA_GAMEMODE_AR\020\005\022\027\n\023"
    "DOTA_GAMEMODE_INTRO\020\006\022\024\n\020DOTA_GAMEMODE_H"
    "W\020\007\022\034\n\030DOTA_GAMEMODE_REVERSE_CM\020\010\022\026\n\022DOT"
    "A_GAMEMODE_XMAS\020\t\022\032\n\026DOTA_GAMEMODE_TUTOR"
    "IAL\020\n\022\024\n\020DOTA_GAMEMODE_MO\020\013\022\024\n\020DOTA_GAME"
    "MODE_LP\020\014\022\027\n\023DOTA_GAMEMODE_POOL1\020\r\022\024\n\020DO"
    "TA_GAMEMODE_FH\020\016\022\030\n\024DOTA_GAMEMODE_CUSTOM"
    "\020\017\022\024\n\020DOTA_GAMEMODE_CD\020\020\022\024\n\020DOTA_GAMEMOD"
    "E_BD\020\021\022\037\n\033DOTA_GAMEMODE_ABILITY_DRAFT\020\022\022"
    "\027\n\023DOTA_GAMEMODE_EVENT\020\023\022\026\n\022DOTA_GAMEMOD"
    "E_ARDM\020\024\022\030\n\024DOTA_GAMEMODE_1V1MID\020\025\022\033\n\027DO"
    "TA_GAMEMODE_ALL_DRAFT\020\026*\354\003\n\016DOTA_GameSta"
    "te\022\035\n\031DOTA_GAMERULES_STATE_INIT\020\000\0221\n-DOT"
    "A_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LO"
    "AD\020\001\022\'\n#DOTA_GAMERULES_STATE_HERO_SELECT"
    "ION\020\002\022&\n\"DOTA_GAMERULES_STATE_STRATEGY_T"
    "IME\020\003\022!\n\035DOTA_GAMERULES_STATE_PRE_GAME\020\004"
    "\022)\n%DOTA_GAMERULES_STATE_GAME_IN_PROGRES"
    "S\020\005\022\"\n\036DOTA_GAMERULES_STATE_POST_GAME\020\006\022"
    "#\n\037DOTA_GAMERULES_STATE_DISCONNECT\020\007\022&\n\""
    "DOTA_GAMERULES_STATE_TEAM_SHOWCASE\020\010\022*\n&"
    "DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP\020\t"
    "\022-\n)DOTA_GAMERULES_STATE_WAIT_FOR_MAP_TO"
    "_LOAD\020\n\022\035\n\031DOTA_GAMERULES_STATE_LAST\020\013*\266"
    "\001\n\014DOTA_GC_TEAM\022\032\n\026DOTA_GC_TEAM_GOOD_GUY"
    "S\020\000\022\031\n\025DOTA_GC_TEAM_BAD_GUYS\020\001\022\034\n\030DOTA_G"
    "C_TEAM_BROADCASTER\020\002\022\032\n\026DOTA_GC_TEAM_SPE"
    "CTATOR\020\003\022\034\n\030DOTA_GC_TEAM_PLAYER_POOL\020\004\022\027"
    "\n\023DOTA_GC_TEAM_NOTEAM\020\005*\350\003\n\006EEvent\022\021\n\rEV"
    "ENT_ID_NONE\020\000\022\025\n\021EVENT_ID_DIRETIDE\020\001\022\034\n\030"
    "EVENT_ID_SPRING_FESTIVAL\020\002\022\033\n\027EVENT_ID_F"
    "ROSTIVUS_2013\020\003\022\034\n\030EVENT_ID_COMPENDIUM_2"
    "014\020\004\022\032\n\026EVENT_ID_NEXON_PC_BANG\020\005\022\032\n\026EVE"
    "NT_ID_PWRD_DAC_2015\020\006\022\033\n\027EVENT_ID_NEW_BL"
    "OOM_2015\020\007\022\037\n\033EVENT_ID_INTERNATIONAL_201"
    "5\020\010\022\034\n\030EVENT_ID_FALL_MAJOR_2015\020\t\022\026\n\022EVE"
    "NT_ID_ORACLE_PA\020\n\022$\n EVENT_ID_NEW_BLOOM_"
    "2015_PREBEAST\020\013\022\026\n\022EVENT_ID_FROSTIVUS\020\014\022"
    "\036\n\032EVENT_ID_WINTER_MAJOR_2016\020\r\022\037\n\033EVENT"
    "_ID_INTERNATIONAL_2016\020\016\022\034\n\030EVENT_ID_FAL"
    "L_MAJOR_2016\020\017\022\022\n\016EVENT_ID_COUNT\020\020*\250\002\n\022D"
    "OTALeaverStatus_t\022\024\n\020DOTA_LEAVER_NONE\020\000\022"
    "\034\n\030DOTA_LEAVER_DISCONNECTED\020\001\022%\n!DOTA_LE"
    "AVER_DISCONNECTED_TOO_LONG\020\002\022\031\n\025DOTA_LEA"
    "VER_ABANDONED\020\003\022\023\n\017DOTA_LEAVER_AFK\020\004\022\037\n\033"
    "DOTA_LEAVER_NEVER_CONNECTED\020\005\022(\n$DOTA_LE"
    "AVER_NEVER_CONNECTED_TOO_LONG\020\006\022\"\n\036DOTA_"
    "LEAVER_FAILED_TO_READY_UP\020\007\022\030\n\024DOTA_LEAV"
    "ER_DECLINED\020\010*\236\002\n\025DOTAConnectionState_t\022"
    "!\n\035DOTA_CONNECTION_STATE_UNKNOWN\020\000\022+\n\'DO"
    "TA_CONNECTION_STATE_NOT_YET_CONNECTED\020\001\022"
    "#\n\037DOTA_CONNECTION_STATE_CONNECTED\020\002\022&\n\""
    "DOTA_CONNECTION_STATE_DISCONNECTED\020\003\022#\n\037"
    "DOTA_CONNECTION_STATE_ABANDONED\020\004\022!\n\035DOT"
    "A_CONNECTION_STATE_LOADING\020\005\022 \n\034DOTA_CON"
    "NECTION_STATE_FAILED\020\006*v\n\rFantasy_Roles\022"
    "\032\n\026FANTASY_ROLE_UNDEFINED\020\000\022\025\n\021FANTASY_R"
    "OLE_CORE\020\001\022\030\n\024FANTASY_ROLE_SUPPORT\020\002\022\030\n\024"
    "FANTASY_ROLE_OFFLANE\020\003*\212\001\n\022Fantasy_Team_"
    "Slots\022\025\n\021FANTASY_SLOT_NONE\020\000\022\025\n\021FANTASY_"
    "SLOT_CORE\020\001\022\030\n\024FANTASY_SLOT_SUPPORT\020\002\022\024\n"
    "\020FANTASY_SLOT_ANY\020\003\022\026\n\022FANTASY_SLOT_BENC"
    "H\020\004*\335\002\n\026Fantasy_Selection_Mode\022\035\n\031FANTAS"
    "Y_SELECTION_INVALID\020\000\022\034\n\030FANTASY_SELECTI"
    "ON_LOCKED\020\001\022\035\n\031FANTASY_SELECTION_SHUFFLE"
    "\020\002\022\037\n\033FANTASY_SELECTION_FREE_PICK\020\003\022\033\n\027F"
    "ANTASY_SELECTION_ENDED\020\004\022 \n\034FANTASY_SELE"
    "CTION_PRE_SEASON\020\005\022\037\n\033FANTASY_SELECTION_"
    "PRE_DRAFT\020\006\022\036\n\032FANTASY_SELECTION_DRAFTIN"
    "G\020\007\022$\n FANTASY_SELECTION_REGULAR_SEASON\020"
    "\010\022 \n\034FANTASY_SELECTION_CARD_BASED\020\t*\242\005\n\025"
    "DOTAChatChannelType_t\022\034\n\030DOTAChannelType"
    "_Regional\020\000\022\032\n\026DOTAChannelType_Custom\020\001\022"
    "\031\n\025DOTAChannelType_Party\020\002\022\031\n\025DOTAChanne"
    "lType_Lobby\020\003\022\030\n\024DOTAChannelType_Team\020\004\022"
    "\031\n\025DOTAChannelType_Guild\020\005\022\033\n\027DOTAChanne"
    "lType_Fantasy\020\006\022\033\n\027DOTAChannelType_Whisp"
    "er\020\007\022\033\n\027DOTAChannelType_Console\020\010\022\027\n\023DOT"
    "AChannelType_Tab\020\t\022\033\n\027DOTAChannelType_In"
    "valid\020\n\022\033\n\027DOTAChannelType_GameAll\020\013\022\036\n\032"
    "DOTAChannelType_GameAllies\020\014\022!\n\035DOTAChan"
    "nelType_GameSpectator\020\r\022 \n\034DOTAChannelTy"
    "pe_GameCoaching\020\016\022\030\n\024DOTAChannelType_Caf"
    "e\020\017\022\036\n\032DOTAChannelType_CustomGame\020\020\022\033\n\027D"
    "OTAChannelType_Private\020\021\022\034\n\030DOTAChannelT"
    "ype_PostGame\020\022\022\035\n\031DOTAChannelType_Battle"
    "Cup\020\023\022!\n\035DOTAChannelType_HLTVSpectator\020\024"
    "\022\036\n\032DOTAChannelType_GameEvents\020\025*\343\001\n\024EPr"
    "ofileCardSlotType\022 \n\034k_EProfileCardSlotT"
    "ype_Empty\020\000\022\037\n\033k_EProfileCardSlotType_St"
    "at\020\001\022!\n\035k_EProfileCardSlotType_Trophy\020\002\022"
    "\037\n\033k_EProfileCardSlotType_Item\020\003\022\037\n\033k_EP"
    "rofileCardSlotType_Hero\020\004\022#\n\037k_EProfileC"
    "ardSlotType_Emoticon\020\005*\225\001\n\027EMatchGroupSe"
    "rverStatus\022 \n\034k_EMatchGroupServerStatus_"
    "OK\020\000\0221\n-k_EMatchGroupServerStatus_Limite"
    "dAvailability\020\001\022%\n!k_EMatchGroupServerSt"
    "atus_Offline\020\002*O\n\014DOTA_CM_PICK\022\022\n\016DOTA_C"
    "M_RANDOM\020\000\022\025\n\021DOTA_CM_GOOD_GUYS\020\001\022\024\n\020DOT"
    "A_CM_BAD_GUYS\020\002*\213\001\n\026DOTALowPriorityBanTy"
    "pe\022!\n\035DOTA_LOW_PRIORITY_BAN_ABANDON\020\000\022!\n"
    "\035DOTA_LOW_PRIORITY_BAN_REPORTS\020\001\022+\n\'DOTA"
    "_LOW_PRIORITY_BAN_SECONDARY_ABANDON\020\002*}\n"
    "\023DOTALobbyReadyState\022\"\n\036DOTALobbyReadySt"
    "ate_UNDECLARED\020\000\022 \n\034DOTALobbyReadyState_"
    "ACCEPTED\020\001\022 \n\034DOTALobbyReadyState_DECLIN"
    "ED\020\002*D\n\017DOTAGameVersion\022\030\n\024GAME_VERSION_"
    "CURRENT\020\000\022\027\n\023GAME_VERSION_STABLE\020\001*\322\003\n\023D"
    "OTAJoinLobbyResult\022\034\n\030DOTA_JOIN_RESULT_S"
    "UCCESS\020\000\022$\n DOTA_JOIN_RESULT_ALREADY_IN_"
    "GAME\020\001\022\"\n\036DOTA_JOIN_RESULT_INVALID_LOBBY"
    "\020\002\022\'\n#DOTA_JOIN_RESULT_INCORRECT_PASSWOR"
    "D\020\003\022\"\n\036DOTA_JOIN_RESULT_ACCESS_DENIED\020\004\022"
    "\"\n\036DOTA_JOIN_RESULT_GENERIC_ERROR\020\005\022&\n\"D"
    "OTA_JOIN_RESULT_INCORRECT_VERSION\020\006\022\"\n\036D"
    "OTA_JOIN_RESULT_IN_TEAM_PARTY\020\007\022#\n\037DOTA_"
    "JOIN_RESULT_NO_LOBBY_FOUND\020\010\022\037\n\033DOTA_JOI"
    "N_RESULT_LOBBY_FULL\020\t\0222\n.DOTA_JOIN_RESUL"
    "T_CUSTOM_GAME_INCORRECT_VERSION\020\n\022\034\n\030DOT"
    "A_JOIN_RESULT_TIMEOUT\020\013*^\n\025SelectionPrio"
    "rityType\022\r\n\tUNDEFINED\020\000\022\013\n\007RADIANT\020\001\022\010\n\004"
    "DIRE\020\002\022\016\n\nFIRST_PICK\020\003\022\017\n\013SECOND_PICK\020\004*"
    "b\n\rDOTAMatchVote\022\031\n\025DOTAMatchVote_INVALI"
    "D\020\000\022\032\n\026DOTAMatchVote_POSITIVE\020\001\022\032\n\026DOTAM"
    "atchVote_NEGATIVE\020\002*\203\002\n\027DOTA_LobbyMember"
    "XPBonus\022#\n\037DOTA_LobbyMemberXPBonus_DEFAU"
    "LT\020\000\022*\n&DOTA_LobbyMemberXPBonus_BATTLE_B"
    "OOSTER\020\001\022\'\n#DOTA_LobbyMemberXPBonus_SHAR"
    "E_BONUS\020\002\022!\n\035DOTA_LobbyMemberXPBonus_PAR"
    "TY\020\003\022\'\n#DOTA_LobbyMemberXPBonus_RECRUITM"
    "ENT\020\004\022\"\n\036DOTA_LobbyMemberXPBonus_PCBANG\020"
    "\005*x\n\023DOTALobbyVisibility\022\036\n\032DOTALobbyVis"
    "ibility_Public\020\000\022\037\n\033DOTALobbyVisibility_"
    "Friends\020\001\022 \n\034DOTALobbyVisibility_Unliste"
    "d\020\002*\347\002\n\022EDOTAPlayerMMRType\022 \n\034k_EDOTAPla"
    "yerMMRType_Invalid\020\000\022&\n\"k_EDOTAPlayerMMR"
    "Type_GeneralHidden\020\001\022#\n\037k_EDOTAPlayerMMR"
    "Type_SoloHidden\020\002\022+\n\'k_EDOTAPlayerMMRTyp"
    "e_GeneralCompetitive\020\003\022(\n$k_EDOTAPlayerM"
    "MRType_SoloCompetitive\020\004\022.\n*k_EDOTAPlaye"
    "rMMRType_1v1Competitive_UNUSED\020\005\022.\n*k_ED"
    "OTAPlayerMMRType_GeneralSeasonalRanked\020\006"
    "\022+\n\'k_EDOTAPlayerMMRType_SoloSeasonalRan"
    "ked\020\007*\207\002\n\tMatchType\022\025\n\021MATCH_TYPE_CASUAL"
    "\020\000\022\030\n\024MATCH_TYPE_COOP_BOTS\020\001\022\032\n\026MATCH_TY"
    "PE_TEAM_RANKED\020\002\022 \n\034MATCH_TYPE_LEGACY_SO"
    "LO_QUEUE\020\003\022\032\n\026MATCH_TYPE_COMPETITIVE\020\004\022\036"
    "\n\032MATCH_TYPE_WEEKEND_TOURNEY\020\005\022\031\n\025MATCH_"
    "TYPE_CASUAL_1V1\020\006\022\024\n\020MATCH_TYPE_EVENT\020\007\022"
    "\036\n\032MATCH_TYPE_SEASONAL_RANKED\020\010*\204\002\n\021DOTA"
    "BotDifficulty\022\032\n\026BOT_DIFFICULTY_PASSIVE\020"
    "\000\022\027\n\023BOT_DIFFICULTY_EASY\020\001\022\031\n\025BOT_DIFFIC"
    "ULTY_MEDIUM\020\002\022\027\n\023BOT_DIFFICULTY_HARD\020\003\022\031"
    "\n\025BOT_DIFFICULTY_UNFAIR\020\004\022\032\n\026BOT_DIFFICU"
    "LTY_INVALID\020\005\022\031\n\025BOT_DIFFICULTY_EXTRA1\020\006"
    "\022\031\n\025BOT_DIFFICULTY_EXTRA2\020\007\022\031\n\025BOT_DIFFI"
    "CULTY_EXTRA3\020\010*\371\005\n\rDOTA_BOT_MODE\022\026\n\022DOTA"
    "_BOT_MODE_NONE\020\000\022\030\n\024DOTA_BOT_MODE_LANING"
    "\020\001\022\030\n\024DOTA_BOT_MODE_ATTACK\020\002\022\026\n\022DOTA_BOT"
    "_MODE_ROAM\020\003\022\031\n\025DOTA_BOT_MODE_RETREAT\020\004\022"
    "\035\n\031DOTA_BOT_MODE_SECRET_SHOP\020\005\022\033\n\027DOTA_B"
    "OT_MODE_SIDE_SHOP\020\006\022\026\n\022DOTA_BOT_MODE_RUN"
    "E\020\007\022 \n\034DOTA_BOT_MODE_PUSH_TOWER_TOP\020\010\022 \n"
    "\034DOTA_BOT_MODE_PUSH_TOWER_MID\020\t\022 \n\034DOTA_"
    "BOT_MODE_PUSH_TOWER_BOT\020\n\022\"\n\036DOTA_BOT_MO"
    "DE_DEFEND_TOWER_TOP\020\013\022\"\n\036DOTA_BOT_MODE_D"
    "EFEND_TOWER_MID\020\014\022\"\n\036DOTA_BOT_MODE_DEFEN"
    "D_TOWER_BOT\020\r\022\032\n\026DOTA_BOT_MODE_ASSEMBLE\020"
    "\016\022&\n\"DOTA_BOT_MODE_ASSEMBLE_WITH_HUMANS\020"
    "\017\022\033\n\027DOTA_BOT_MODE_TEAM_ROAM\020\020\022\026\n\022DOTA_B"
    "OT_MODE_FARM\020\021\022\035\n\031DOTA_BOT_MODE_DEFEND_A"
    "LLY\020\022\022#\n\037DOTA_BOT_MODE_EVASIVE_MANEUVERS"
    "\020\023\022\030\n\024DOTA_BOT_MODE_ROSHAN\020\024\022\026\n\022DOTA_BOT"
    "_MODE_ITEM\020\025\022\026\n\022DOTA_BOT_MODE_WARD\020\026\022\033\n\027"
    "DOTA_BOT_MODE_COMPANION\020\027\022\037\n\033DOTA_BOT_MO"
    "DE_TUTORIAL_BOSS\020\030*\363\001\n\016MatchLanguages\022\032\n"
    "\026MATCH_LANGUAGE_INVALID\020\000\022\032\n\026MATCH_LANGU"
    "AGE_ENGLISH\020\001\022\032\n\026MATCH_LANGUAGE_RUSSIAN\020"
    "\002\022\032\n\026MATCH_LANGUAGE_CHINESE\020\003\022\031\n\025MATCH_L"
    "ANGUAGE_KOREAN\020\004\022\032\n\026MATCH_LANGUAGE_SPANI"
    "SH\020\005\022\035\n\031MATCH_LANGUAGE_PORTUGUESE\020\006\022\033\n\027M"
    "ATCH_LANGUAGE_ENGLISH2\020\007*\330\002\n\032ETourneyQue"
    "ueDeadlineState\022\'\n#k_ETourneyQueueDeadli"
    "neState_Normal\020\000\022\'\n#k_ETourneyQueueDeadl"
    "ineState_Missed\020\001\022*\n&k_ETourneyQueueDead"
    "lineState_ExpiredOK\020\002\022+\n\'k_ETourneyQueue"
    "DeadlineState_SeekingBye\020\003\0222\n.k_ETourney"
    "QueueDeadlineState_EligibleForRefund\020\004\022,"
    "\n\037k_ETourneyQueueDeadlineState_NA\020\377\377\377\377\377\377"
    "\377\377\377\001\022-\n)k_ETourneyQueueDeadlineState_Exp"
    "iringSoon\020e*\307\002\n\rEMatchOutcome\022\033\n\027k_EMatc"
    "hOutcome_Unknown\020\000\022\036\n\032k_EMatchOutcome_Ra"
    "dVictory\020\002\022\037\n\033k_EMatchOutcome_DireVictor"
    "y\020\003\0223\n/k_EMatchOutcome_NotScored_PoorNet"
    "workConditions\020@\022$\n k_EMatchOutcome_NotS"
    "cored_Leaver\020A\022)\n%k_EMatchOutcome_NotSco"
    "red_ServerCrash\020B\022*\n&k_EMatchOutcome_Not"
    "Scored_NeverStarted\020C\022&\n\"k_EMatchOutcome"
    "_NotScored_Canceled\020DB\005H\001\200\001\000", 8748);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_shared_enums.proto", &protobuf_RegisterTypes);
  CDOTAClientHardwareSpecs::default_instance_ = new CDOTAClientHardwareSpecs();
  CDOTASaveGame::default_instance_ = new CDOTASaveGame();
  CDOTASaveGame_Player::default_instance_ = new CDOTASaveGame_Player();
  CDOTASaveGame_SaveInstance::default_instance_ = new CDOTASaveGame_SaveInstance();
  CDOTASaveGame_SaveInstance_PlayerPositions::default_instance_ = new CDOTASaveGame_SaveInstance_PlayerPositions();
  CDOTAClientHardwareSpecs::default_instance_->InitAsDefaultInstance();
  CDOTASaveGame::default_instance_->InitAsDefaultInstance();
  CDOTASaveGame_Player::default_instance_->InitAsDefaultInstance();
  CDOTASaveGame_SaveInstance::default_instance_->InitAsDefaultInstance();
  CDOTASaveGame_SaveInstance_PlayerPositions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dota_5fshared_5fenums_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dota_5fshared_5fenums_2eproto {
  StaticDescriptorInitializer_dota_5fshared_5fenums_2eproto() {
    protobuf_AddDesc_dota_5fshared_5fenums_2eproto();
  }
} static_descriptor_initializer_dota_5fshared_5fenums_2eproto_;
const ::google::protobuf::EnumDescriptor* DOTA_GameMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_GameMode_descriptor_;
}
bool DOTA_GameMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_GameState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_GameState_descriptor_;
}
bool DOTA_GameState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_GC_TEAM_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_GC_TEAM_descriptor_;
}
bool DOTA_GC_TEAM_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EEvent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EEvent_descriptor_;
}
bool EEvent_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTALeaverStatus_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTALeaverStatus_t_descriptor_;
}
bool DOTALeaverStatus_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTAConnectionState_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTAConnectionState_t_descriptor_;
}
bool DOTAConnectionState_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Fantasy_Roles_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fantasy_Roles_descriptor_;
}
bool Fantasy_Roles_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Fantasy_Team_Slots_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fantasy_Team_Slots_descriptor_;
}
bool Fantasy_Team_Slots_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Fantasy_Selection_Mode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fantasy_Selection_Mode_descriptor_;
}
bool Fantasy_Selection_Mode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTAChatChannelType_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTAChatChannelType_t_descriptor_;
}
bool DOTAChatChannelType_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EProfileCardSlotType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EProfileCardSlotType_descriptor_;
}
bool EProfileCardSlotType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMatchGroupServerStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMatchGroupServerStatus_descriptor_;
}
bool EMatchGroupServerStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_CM_PICK_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_CM_PICK_descriptor_;
}
bool DOTA_CM_PICK_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTALowPriorityBanType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTALowPriorityBanType_descriptor_;
}
bool DOTALowPriorityBanType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTALobbyReadyState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTALobbyReadyState_descriptor_;
}
bool DOTALobbyReadyState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTAGameVersion_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTAGameVersion_descriptor_;
}
bool DOTAGameVersion_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTAJoinLobbyResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTAJoinLobbyResult_descriptor_;
}
bool DOTAJoinLobbyResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SelectionPriorityType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectionPriorityType_descriptor_;
}
bool SelectionPriorityType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTAMatchVote_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTAMatchVote_descriptor_;
}
bool DOTAMatchVote_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_LobbyMemberXPBonus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_LobbyMemberXPBonus_descriptor_;
}
bool DOTA_LobbyMemberXPBonus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTALobbyVisibility_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTALobbyVisibility_descriptor_;
}
bool DOTALobbyVisibility_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDOTAPlayerMMRType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDOTAPlayerMMRType_descriptor_;
}
bool EDOTAPlayerMMRType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MatchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchType_descriptor_;
}
bool MatchType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTABotDifficulty_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTABotDifficulty_descriptor_;
}
bool DOTABotDifficulty_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_BOT_MODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_BOT_MODE_descriptor_;
}
bool DOTA_BOT_MODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MatchLanguages_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchLanguages_descriptor_;
}
bool MatchLanguages_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETourneyQueueDeadlineState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETourneyQueueDeadlineState_descriptor_;
}
bool ETourneyQueueDeadlineState_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 101:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMatchOutcome_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMatchOutcome_descriptor_;
}
bool EMatchOutcome_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
    case 3:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientHardwareSpecs::kLogicalProcessorsFieldNumber;
const int CDOTAClientHardwareSpecs::kCpuCyclesPerSecondFieldNumber;
const int CDOTAClientHardwareSpecs::kTotalPhysicalMemoryFieldNumber;
const int CDOTAClientHardwareSpecs::kIs64BitOsFieldNumber;
const int CDOTAClientHardwareSpecs::kUploadMeasurementFieldNumber;
const int CDOTAClientHardwareSpecs::kPreferNotHostFieldNumber;
#endif  // !_MSC_VER

CDOTAClientHardwareSpecs::CDOTAClientHardwareSpecs()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientHardwareSpecs)
}

void CDOTAClientHardwareSpecs::InitAsDefaultInstance() {
}

CDOTAClientHardwareSpecs::CDOTAClientHardwareSpecs(const CDOTAClientHardwareSpecs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientHardwareSpecs)
}

void CDOTAClientHardwareSpecs::SharedCtor() {
  _cached_size_ = 0;
  logical_processors_ = 0u;
  cpu_cycles_per_second_ = GOOGLE_ULONGLONG(0);
  total_physical_memory_ = GOOGLE_ULONGLONG(0);
  is_64_bit_os_ = false;
  upload_measurement_ = GOOGLE_ULONGLONG(0);
  prefer_not_host_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientHardwareSpecs::~CDOTAClientHardwareSpecs() {
  // @@protoc_insertion_point(destructor:CDOTAClientHardwareSpecs)
  SharedDtor();
}

void CDOTAClientHardwareSpecs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientHardwareSpecs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientHardwareSpecs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientHardwareSpecs_descriptor_;
}

const CDOTAClientHardwareSpecs& CDOTAClientHardwareSpecs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fshared_5fenums_2eproto();
  return *default_instance_;
}

CDOTAClientHardwareSpecs* CDOTAClientHardwareSpecs::default_instance_ = NULL;

CDOTAClientHardwareSpecs* CDOTAClientHardwareSpecs::New() const {
  return new CDOTAClientHardwareSpecs;
}

void CDOTAClientHardwareSpecs::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAClientHardwareSpecs*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(cpu_cycles_per_second_, upload_measurement_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientHardwareSpecs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientHardwareSpecs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 logical_processors = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logical_processors_)));
          set_has_logical_processors();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_cpu_cycles_per_second;
        break;
      }

      // optional fixed64 cpu_cycles_per_second = 2;
      case 2: {
        if (tag == 17) {
         parse_cpu_cycles_per_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &cpu_cycles_per_second_)));
          set_has_cpu_cycles_per_second();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_total_physical_memory;
        break;
      }

      // optional fixed64 total_physical_memory = 3;
      case 3: {
        if (tag == 25) {
         parse_total_physical_memory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_physical_memory_)));
          set_has_total_physical_memory();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_64_bit_os;
        break;
      }

      // optional bool is_64_bit_os = 4;
      case 4: {
        if (tag == 32) {
         parse_is_64_bit_os:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_64_bit_os_)));
          set_has_is_64_bit_os();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_upload_measurement;
        break;
      }

      // optional uint64 upload_measurement = 5;
      case 5: {
        if (tag == 40) {
         parse_upload_measurement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &upload_measurement_)));
          set_has_upload_measurement();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_prefer_not_host;
        break;
      }

      // optional bool prefer_not_host = 6;
      case 6: {
        if (tag == 48) {
         parse_prefer_not_host:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prefer_not_host_)));
          set_has_prefer_not_host();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientHardwareSpecs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientHardwareSpecs)
  return false;
#undef DO_
}

void CDOTAClientHardwareSpecs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientHardwareSpecs)
  // optional uint32 logical_processors = 1;
  if (has_logical_processors()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logical_processors(), output);
  }

  // optional fixed64 cpu_cycles_per_second = 2;
  if (has_cpu_cycles_per_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->cpu_cycles_per_second(), output);
  }

  // optional fixed64 total_physical_memory = 3;
  if (has_total_physical_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->total_physical_memory(), output);
  }

  // optional bool is_64_bit_os = 4;
  if (has_is_64_bit_os()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_64_bit_os(), output);
  }

  // optional uint64 upload_measurement = 5;
  if (has_upload_measurement()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->upload_measurement(), output);
  }

  // optional bool prefer_not_host = 6;
  if (has_prefer_not_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->prefer_not_host(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientHardwareSpecs)
}

::google::protobuf::uint8* CDOTAClientHardwareSpecs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientHardwareSpecs)
  // optional uint32 logical_processors = 1;
  if (has_logical_processors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logical_processors(), target);
  }

  // optional fixed64 cpu_cycles_per_second = 2;
  if (has_cpu_cycles_per_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->cpu_cycles_per_second(), target);
  }

  // optional fixed64 total_physical_memory = 3;
  if (has_total_physical_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->total_physical_memory(), target);
  }

  // optional bool is_64_bit_os = 4;
  if (has_is_64_bit_os()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_64_bit_os(), target);
  }

  // optional uint64 upload_measurement = 5;
  if (has_upload_measurement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->upload_measurement(), target);
  }

  // optional bool prefer_not_host = 6;
  if (has_prefer_not_host()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->prefer_not_host(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientHardwareSpecs)
  return target;
}

int CDOTAClientHardwareSpecs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 logical_processors = 1;
    if (has_logical_processors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logical_processors());
    }

    // optional fixed64 cpu_cycles_per_second = 2;
    if (has_cpu_cycles_per_second()) {
      total_size += 1 + 8;
    }

    // optional fixed64 total_physical_memory = 3;
    if (has_total_physical_memory()) {
      total_size += 1 + 8;
    }

    // optional bool is_64_bit_os = 4;
    if (has_is_64_bit_os()) {
      total_size += 1 + 1;
    }

    // optional uint64 upload_measurement = 5;
    if (has_upload_measurement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->upload_measurement());
    }

    // optional bool prefer_not_host = 6;
    if (has_prefer_not_host()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientHardwareSpecs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientHardwareSpecs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientHardwareSpecs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientHardwareSpecs::MergeFrom(const CDOTAClientHardwareSpecs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logical_processors()) {
      set_logical_processors(from.logical_processors());
    }
    if (from.has_cpu_cycles_per_second()) {
      set_cpu_cycles_per_second(from.cpu_cycles_per_second());
    }
    if (from.has_total_physical_memory()) {
      set_total_physical_memory(from.total_physical_memory());
    }
    if (from.has_is_64_bit_os()) {
      set_is_64_bit_os(from.is_64_bit_os());
    }
    if (from.has_upload_measurement()) {
      set_upload_measurement(from.upload_measurement());
    }
    if (from.has_prefer_not_host()) {
      set_prefer_not_host(from.prefer_not_host());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientHardwareSpecs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientHardwareSpecs::CopyFrom(const CDOTAClientHardwareSpecs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientHardwareSpecs::IsInitialized() const {

  return true;
}

void CDOTAClientHardwareSpecs::Swap(CDOTAClientHardwareSpecs* other) {
  if (other != this) {
    std::swap(logical_processors_, other->logical_processors_);
    std::swap(cpu_cycles_per_second_, other->cpu_cycles_per_second_);
    std::swap(total_physical_memory_, other->total_physical_memory_);
    std::swap(is_64_bit_os_, other->is_64_bit_os_);
    std::swap(upload_measurement_, other->upload_measurement_);
    std::swap(prefer_not_host_, other->prefer_not_host_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientHardwareSpecs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientHardwareSpecs_descriptor_;
  metadata.reflection = CDOTAClientHardwareSpecs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTASaveGame_Player::kTeamFieldNumber;
const int CDOTASaveGame_Player::kNameFieldNumber;
const int CDOTASaveGame_Player::kHeroFieldNumber;
#endif  // !_MSC_VER

CDOTASaveGame_Player::CDOTASaveGame_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTASaveGame.Player)
}

void CDOTASaveGame_Player::InitAsDefaultInstance() {
}

CDOTASaveGame_Player::CDOTASaveGame_Player(const CDOTASaveGame_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTASaveGame.Player)
}

void CDOTASaveGame_Player::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  team_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hero_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTASaveGame_Player::~CDOTASaveGame_Player() {
  // @@protoc_insertion_point(destructor:CDOTASaveGame.Player)
  SharedDtor();
}

void CDOTASaveGame_Player::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (hero_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hero_;
  }
  if (this != default_instance_) {
  }
}

void CDOTASaveGame_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTASaveGame_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTASaveGame_Player_descriptor_;
}

const CDOTASaveGame_Player& CDOTASaveGame_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fshared_5fenums_2eproto();
  return *default_instance_;
}

CDOTASaveGame_Player* CDOTASaveGame_Player::default_instance_ = NULL;

CDOTASaveGame_Player* CDOTASaveGame_Player::New() const {
  return new CDOTASaveGame_Player;
}

void CDOTASaveGame_Player::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    team_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_hero()) {
      if (hero_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hero_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTASaveGame_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTASaveGame.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_GC_TEAM_IsValid(value)) {
            set_team(static_cast< ::DOTA_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hero;
        break;
      }

      // optional string hero = 3;
      case 3: {
        if (tag == 26) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hero().data(), this->hero().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hero");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTASaveGame.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTASaveGame.Player)
  return false;
#undef DO_
}

void CDOTASaveGame_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTASaveGame.Player)
  // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->team(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string hero = 3;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero().data(), this->hero().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hero");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hero(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTASaveGame.Player)
}

::google::protobuf::uint8* CDOTASaveGame_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTASaveGame.Player)
  // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->team(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string hero = 3;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero().data(), this->hero().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hero");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hero(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTASaveGame.Player)
  return target;
}

int CDOTASaveGame_Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string hero = 3;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTASaveGame_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTASaveGame_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTASaveGame_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTASaveGame_Player::MergeFrom(const CDOTASaveGame_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_hero()) {
      set_hero(from.hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTASaveGame_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTASaveGame_Player::CopyFrom(const CDOTASaveGame_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTASaveGame_Player::IsInitialized() const {

  return true;
}

void CDOTASaveGame_Player::Swap(CDOTASaveGame_Player* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(name_, other->name_);
    std::swap(hero_, other->hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTASaveGame_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTASaveGame_Player_descriptor_;
  metadata.reflection = CDOTASaveGame_Player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTASaveGame_SaveInstance_PlayerPositions::kXFieldNumber;
const int CDOTASaveGame_SaveInstance_PlayerPositions::kYFieldNumber;
#endif  // !_MSC_VER

CDOTASaveGame_SaveInstance_PlayerPositions::CDOTASaveGame_SaveInstance_PlayerPositions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTASaveGame.SaveInstance.PlayerPositions)
}

void CDOTASaveGame_SaveInstance_PlayerPositions::InitAsDefaultInstance() {
}

CDOTASaveGame_SaveInstance_PlayerPositions::CDOTASaveGame_SaveInstance_PlayerPositions(const CDOTASaveGame_SaveInstance_PlayerPositions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTASaveGame.SaveInstance.PlayerPositions)
}

void CDOTASaveGame_SaveInstance_PlayerPositions::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTASaveGame_SaveInstance_PlayerPositions::~CDOTASaveGame_SaveInstance_PlayerPositions() {
  // @@protoc_insertion_point(destructor:CDOTASaveGame.SaveInstance.PlayerPositions)
  SharedDtor();
}

void CDOTASaveGame_SaveInstance_PlayerPositions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTASaveGame_SaveInstance_PlayerPositions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTASaveGame_SaveInstance_PlayerPositions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTASaveGame_SaveInstance_PlayerPositions_descriptor_;
}

const CDOTASaveGame_SaveInstance_PlayerPositions& CDOTASaveGame_SaveInstance_PlayerPositions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fshared_5fenums_2eproto();
  return *default_instance_;
}

CDOTASaveGame_SaveInstance_PlayerPositions* CDOTASaveGame_SaveInstance_PlayerPositions::default_instance_ = NULL;

CDOTASaveGame_SaveInstance_PlayerPositions* CDOTASaveGame_SaveInstance_PlayerPositions::New() const {
  return new CDOTASaveGame_SaveInstance_PlayerPositions;
}

void CDOTASaveGame_SaveInstance_PlayerPositions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTASaveGame_SaveInstance_PlayerPositions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTASaveGame_SaveInstance_PlayerPositions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTASaveGame.SaveInstance.PlayerPositions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTASaveGame.SaveInstance.PlayerPositions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTASaveGame.SaveInstance.PlayerPositions)
  return false;
#undef DO_
}

void CDOTASaveGame_SaveInstance_PlayerPositions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTASaveGame.SaveInstance.PlayerPositions)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTASaveGame.SaveInstance.PlayerPositions)
}

::google::protobuf::uint8* CDOTASaveGame_SaveInstance_PlayerPositions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTASaveGame.SaveInstance.PlayerPositions)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTASaveGame.SaveInstance.PlayerPositions)
  return target;
}

int CDOTASaveGame_SaveInstance_PlayerPositions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTASaveGame_SaveInstance_PlayerPositions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTASaveGame_SaveInstance_PlayerPositions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTASaveGame_SaveInstance_PlayerPositions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTASaveGame_SaveInstance_PlayerPositions::MergeFrom(const CDOTASaveGame_SaveInstance_PlayerPositions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTASaveGame_SaveInstance_PlayerPositions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTASaveGame_SaveInstance_PlayerPositions::CopyFrom(const CDOTASaveGame_SaveInstance_PlayerPositions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTASaveGame_SaveInstance_PlayerPositions::IsInitialized() const {

  return true;
}

void CDOTASaveGame_SaveInstance_PlayerPositions::Swap(CDOTASaveGame_SaveInstance_PlayerPositions* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTASaveGame_SaveInstance_PlayerPositions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTASaveGame_SaveInstance_PlayerPositions_descriptor_;
  metadata.reflection = CDOTASaveGame_SaveInstance_PlayerPositions_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTASaveGame_SaveInstance::kGameTimeFieldNumber;
const int CDOTASaveGame_SaveInstance::kTeam1ScoreFieldNumber;
const int CDOTASaveGame_SaveInstance::kTeam2ScoreFieldNumber;
const int CDOTASaveGame_SaveInstance::kPlayerPositionsFieldNumber;
const int CDOTASaveGame_SaveInstance::kSaveIdFieldNumber;
const int CDOTASaveGame_SaveInstance::kSaveTimeFieldNumber;
#endif  // !_MSC_VER

CDOTASaveGame_SaveInstance::CDOTASaveGame_SaveInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTASaveGame.SaveInstance)
}

void CDOTASaveGame_SaveInstance::InitAsDefaultInstance() {
}

CDOTASaveGame_SaveInstance::CDOTASaveGame_SaveInstance(const CDOTASaveGame_SaveInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTASaveGame.SaveInstance)
}

void CDOTASaveGame_SaveInstance::SharedCtor() {
  _cached_size_ = 0;
  game_time_ = 0u;
  team1_score_ = 0u;
  team2_score_ = 0u;
  save_id_ = 0u;
  save_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTASaveGame_SaveInstance::~CDOTASaveGame_SaveInstance() {
  // @@protoc_insertion_point(destructor:CDOTASaveGame.SaveInstance)
  SharedDtor();
}

void CDOTASaveGame_SaveInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTASaveGame_SaveInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTASaveGame_SaveInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTASaveGame_SaveInstance_descriptor_;
}

const CDOTASaveGame_SaveInstance& CDOTASaveGame_SaveInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fshared_5fenums_2eproto();
  return *default_instance_;
}

CDOTASaveGame_SaveInstance* CDOTASaveGame_SaveInstance::default_instance_ = NULL;

CDOTASaveGame_SaveInstance* CDOTASaveGame_SaveInstance::New() const {
  return new CDOTASaveGame_SaveInstance;
}

void CDOTASaveGame_SaveInstance::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTASaveGame_SaveInstance*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(game_time_, team1_score_);
    ZR_(team2_score_, save_time_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  player_positions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTASaveGame_SaveInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTASaveGame.SaveInstance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_time = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_time_)));
          set_has_game_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_team1_score;
        break;
      }

      // optional uint32 team1_score = 3;
      case 3: {
        if (tag == 24) {
         parse_team1_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1_score_)));
          set_has_team1_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_team2_score;
        break;
      }

      // optional uint32 team2_score = 4;
      case 4: {
        if (tag == 32) {
         parse_team2_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2_score_)));
          set_has_team2_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_player_positions;
        break;
      }

      // repeated .CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
      case 5: {
        if (tag == 42) {
         parse_player_positions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_positions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_player_positions;
        if (input->ExpectTag(48)) goto parse_save_id;
        break;
      }

      // optional uint32 save_id = 6;
      case 6: {
        if (tag == 48) {
         parse_save_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &save_id_)));
          set_has_save_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_save_time;
        break;
      }

      // optional uint32 save_time = 7;
      case 7: {
        if (tag == 56) {
         parse_save_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &save_time_)));
          set_has_save_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTASaveGame.SaveInstance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTASaveGame.SaveInstance)
  return false;
#undef DO_
}

void CDOTASaveGame_SaveInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTASaveGame.SaveInstance)
  // optional uint32 game_time = 2;
  if (has_game_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_time(), output);
  }

  // optional uint32 team1_score = 3;
  if (has_team1_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team1_score(), output);
  }

  // optional uint32 team2_score = 4;
  if (has_team2_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team2_score(), output);
  }

  // repeated .CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
  for (int i = 0; i < this->player_positions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->player_positions(i), output);
  }

  // optional uint32 save_id = 6;
  if (has_save_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->save_id(), output);
  }

  // optional uint32 save_time = 7;
  if (has_save_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->save_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTASaveGame.SaveInstance)
}

::google::protobuf::uint8* CDOTASaveGame_SaveInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTASaveGame.SaveInstance)
  // optional uint32 game_time = 2;
  if (has_game_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_time(), target);
  }

  // optional uint32 team1_score = 3;
  if (has_team1_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team1_score(), target);
  }

  // optional uint32 team2_score = 4;
  if (has_team2_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team2_score(), target);
  }

  // repeated .CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
  for (int i = 0; i < this->player_positions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->player_positions(i), target);
  }

  // optional uint32 save_id = 6;
  if (has_save_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->save_id(), target);
  }

  // optional uint32 save_time = 7;
  if (has_save_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->save_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTASaveGame.SaveInstance)
  return target;
}

int CDOTASaveGame_SaveInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_time = 2;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_time());
    }

    // optional uint32 team1_score = 3;
    if (has_team1_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1_score());
    }

    // optional uint32 team2_score = 4;
    if (has_team2_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2_score());
    }

    // optional uint32 save_id = 6;
    if (has_save_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->save_id());
    }

    // optional uint32 save_time = 7;
    if (has_save_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->save_time());
    }

  }
  // repeated .CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
  total_size += 1 * this->player_positions_size();
  for (int i = 0; i < this->player_positions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_positions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTASaveGame_SaveInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTASaveGame_SaveInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTASaveGame_SaveInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTASaveGame_SaveInstance::MergeFrom(const CDOTASaveGame_SaveInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_positions_.MergeFrom(from.player_positions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_time()) {
      set_game_time(from.game_time());
    }
    if (from.has_team1_score()) {
      set_team1_score(from.team1_score());
    }
    if (from.has_team2_score()) {
      set_team2_score(from.team2_score());
    }
    if (from.has_save_id()) {
      set_save_id(from.save_id());
    }
    if (from.has_save_time()) {
      set_save_time(from.save_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTASaveGame_SaveInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTASaveGame_SaveInstance::CopyFrom(const CDOTASaveGame_SaveInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTASaveGame_SaveInstance::IsInitialized() const {

  return true;
}

void CDOTASaveGame_SaveInstance::Swap(CDOTASaveGame_SaveInstance* other) {
  if (other != this) {
    std::swap(game_time_, other->game_time_);
    std::swap(team1_score_, other->team1_score_);
    std::swap(team2_score_, other->team2_score_);
    player_positions_.Swap(&other->player_positions_);
    std::swap(save_id_, other->save_id_);
    std::swap(save_time_, other->save_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTASaveGame_SaveInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTASaveGame_SaveInstance_descriptor_;
  metadata.reflection = CDOTASaveGame_SaveInstance_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTASaveGame::kMatchIdFieldNumber;
const int CDOTASaveGame::kSaveTimeFieldNumber;
const int CDOTASaveGame::kPlayersFieldNumber;
const int CDOTASaveGame::kSaveInstancesFieldNumber;
#endif  // !_MSC_VER

CDOTASaveGame::CDOTASaveGame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTASaveGame)
}

void CDOTASaveGame::InitAsDefaultInstance() {
}

CDOTASaveGame::CDOTASaveGame(const CDOTASaveGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTASaveGame)
}

void CDOTASaveGame::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  save_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTASaveGame::~CDOTASaveGame() {
  // @@protoc_insertion_point(destructor:CDOTASaveGame)
  SharedDtor();
}

void CDOTASaveGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTASaveGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTASaveGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTASaveGame_descriptor_;
}

const CDOTASaveGame& CDOTASaveGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fshared_5fenums_2eproto();
  return *default_instance_;
}

CDOTASaveGame* CDOTASaveGame::default_instance_ = NULL;

CDOTASaveGame* CDOTASaveGame::New() const {
  return new CDOTASaveGame;
}

void CDOTASaveGame::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    match_id_ = GOOGLE_ULONGLONG(0);
    save_time_ = 0u;
  }
  players_.Clear();
  save_instances_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTASaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTASaveGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 save_time = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &save_time_)));
          set_has_save_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_players;
        break;
      }

      // repeated .CDOTASaveGame.Player players = 3;
      case 3: {
        if (tag == 26) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_players;
        if (input->ExpectTag(34)) goto parse_save_instances;
        break;
      }

      // repeated .CDOTASaveGame.SaveInstance save_instances = 4;
      case 4: {
        if (tag == 34) {
         parse_save_instances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_save_instances()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_save_instances;
        if (input->ExpectTag(40)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 5;
      case 5: {
        if (tag == 40) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTASaveGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTASaveGame)
  return false;
#undef DO_
}

void CDOTASaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTASaveGame)
  // optional uint32 save_time = 2;
  if (has_save_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->save_time(), output);
  }

  // repeated .CDOTASaveGame.Player players = 3;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->players(i), output);
  }

  // repeated .CDOTASaveGame.SaveInstance save_instances = 4;
  for (int i = 0; i < this->save_instances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->save_instances(i), output);
  }

  // optional uint64 match_id = 5;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->match_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTASaveGame)
}

::google::protobuf::uint8* CDOTASaveGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTASaveGame)
  // optional uint32 save_time = 2;
  if (has_save_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->save_time(), target);
  }

  // repeated .CDOTASaveGame.Player players = 3;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->players(i), target);
  }

  // repeated .CDOTASaveGame.SaveInstance save_instances = 4;
  for (int i = 0; i < this->save_instances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->save_instances(i), target);
  }

  // optional uint64 match_id = 5;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->match_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTASaveGame)
  return target;
}

int CDOTASaveGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 match_id = 5;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 save_time = 2;
    if (has_save_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->save_time());
    }

  }
  // repeated .CDOTASaveGame.Player players = 3;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  // repeated .CDOTASaveGame.SaveInstance save_instances = 4;
  total_size += 1 * this->save_instances_size();
  for (int i = 0; i < this->save_instances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->save_instances(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTASaveGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTASaveGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTASaveGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTASaveGame::MergeFrom(const CDOTASaveGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  save_instances_.MergeFrom(from.save_instances_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_save_time()) {
      set_save_time(from.save_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTASaveGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTASaveGame::CopyFrom(const CDOTASaveGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTASaveGame::IsInitialized() const {

  return true;
}

void CDOTASaveGame::Swap(CDOTASaveGame* other) {
  if (other != this) {
    std::swap(match_id_, other->match_id_);
    std::swap(save_time_, other->save_time_);
    players_.Swap(&other->players_);
    save_instances_.Swap(&other->save_instances_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTASaveGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTASaveGame_descriptor_;
  metadata.reflection = CDOTASaveGame_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
