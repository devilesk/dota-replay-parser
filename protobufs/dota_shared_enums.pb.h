// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_shared_enums.proto

#ifndef PROTOBUF_dota_5fshared_5fenums_2eproto__INCLUDED
#define PROTOBUF_dota_5fshared_5fenums_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dota_5fshared_5fenums_2eproto();
void protobuf_AssignDesc_dota_5fshared_5fenums_2eproto();
void protobuf_ShutdownFile_dota_5fshared_5fenums_2eproto();

class CDOTAClientHardwareSpecs;
class CDOTASaveGame;
class CDOTASaveGame_Player;
class CDOTASaveGame_SaveInstance;
class CDOTASaveGame_SaveInstance_PlayerPositions;

enum DOTA_GameMode {
  DOTA_GAMEMODE_NONE = 0,
  DOTA_GAMEMODE_AP = 1,
  DOTA_GAMEMODE_CM = 2,
  DOTA_GAMEMODE_RD = 3,
  DOTA_GAMEMODE_SD = 4,
  DOTA_GAMEMODE_AR = 5,
  DOTA_GAMEMODE_INTRO = 6,
  DOTA_GAMEMODE_HW = 7,
  DOTA_GAMEMODE_REVERSE_CM = 8,
  DOTA_GAMEMODE_XMAS = 9,
  DOTA_GAMEMODE_TUTORIAL = 10,
  DOTA_GAMEMODE_MO = 11,
  DOTA_GAMEMODE_LP = 12,
  DOTA_GAMEMODE_POOL1 = 13,
  DOTA_GAMEMODE_FH = 14,
  DOTA_GAMEMODE_CUSTOM = 15,
  DOTA_GAMEMODE_CD = 16,
  DOTA_GAMEMODE_BD = 17,
  DOTA_GAMEMODE_ABILITY_DRAFT = 18,
  DOTA_GAMEMODE_EVENT = 19,
  DOTA_GAMEMODE_ARDM = 20,
  DOTA_GAMEMODE_1V1MID = 21,
  DOTA_GAMEMODE_ALL_DRAFT = 22
};
bool DOTA_GameMode_IsValid(int value);
const DOTA_GameMode DOTA_GameMode_MIN = DOTA_GAMEMODE_NONE;
const DOTA_GameMode DOTA_GameMode_MAX = DOTA_GAMEMODE_ALL_DRAFT;
const int DOTA_GameMode_ARRAYSIZE = DOTA_GameMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_GameMode_descriptor();
inline const ::std::string& DOTA_GameMode_Name(DOTA_GameMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_GameMode_descriptor(), value);
}
inline bool DOTA_GameMode_Parse(
    const ::std::string& name, DOTA_GameMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_GameMode>(
    DOTA_GameMode_descriptor(), name, value);
}
enum DOTA_GameState {
  DOTA_GAMERULES_STATE_INIT = 0,
  DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD = 1,
  DOTA_GAMERULES_STATE_HERO_SELECTION = 2,
  DOTA_GAMERULES_STATE_STRATEGY_TIME = 3,
  DOTA_GAMERULES_STATE_PRE_GAME = 4,
  DOTA_GAMERULES_STATE_GAME_IN_PROGRESS = 5,
  DOTA_GAMERULES_STATE_POST_GAME = 6,
  DOTA_GAMERULES_STATE_DISCONNECT = 7,
  DOTA_GAMERULES_STATE_TEAM_SHOWCASE = 8,
  DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP = 9,
  DOTA_GAMERULES_STATE_WAIT_FOR_MAP_TO_LOAD = 10,
  DOTA_GAMERULES_STATE_LAST = 11
};
bool DOTA_GameState_IsValid(int value);
const DOTA_GameState DOTA_GameState_MIN = DOTA_GAMERULES_STATE_INIT;
const DOTA_GameState DOTA_GameState_MAX = DOTA_GAMERULES_STATE_LAST;
const int DOTA_GameState_ARRAYSIZE = DOTA_GameState_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_GameState_descriptor();
inline const ::std::string& DOTA_GameState_Name(DOTA_GameState value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_GameState_descriptor(), value);
}
inline bool DOTA_GameState_Parse(
    const ::std::string& name, DOTA_GameState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_GameState>(
    DOTA_GameState_descriptor(), name, value);
}
enum DOTA_GC_TEAM {
  DOTA_GC_TEAM_GOOD_GUYS = 0,
  DOTA_GC_TEAM_BAD_GUYS = 1,
  DOTA_GC_TEAM_BROADCASTER = 2,
  DOTA_GC_TEAM_SPECTATOR = 3,
  DOTA_GC_TEAM_PLAYER_POOL = 4,
  DOTA_GC_TEAM_NOTEAM = 5
};
bool DOTA_GC_TEAM_IsValid(int value);
const DOTA_GC_TEAM DOTA_GC_TEAM_MIN = DOTA_GC_TEAM_GOOD_GUYS;
const DOTA_GC_TEAM DOTA_GC_TEAM_MAX = DOTA_GC_TEAM_NOTEAM;
const int DOTA_GC_TEAM_ARRAYSIZE = DOTA_GC_TEAM_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_GC_TEAM_descriptor();
inline const ::std::string& DOTA_GC_TEAM_Name(DOTA_GC_TEAM value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_GC_TEAM_descriptor(), value);
}
inline bool DOTA_GC_TEAM_Parse(
    const ::std::string& name, DOTA_GC_TEAM* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_GC_TEAM>(
    DOTA_GC_TEAM_descriptor(), name, value);
}
enum EEvent {
  EVENT_ID_NONE = 0,
  EVENT_ID_DIRETIDE = 1,
  EVENT_ID_SPRING_FESTIVAL = 2,
  EVENT_ID_FROSTIVUS_2013 = 3,
  EVENT_ID_COMPENDIUM_2014 = 4,
  EVENT_ID_NEXON_PC_BANG = 5,
  EVENT_ID_PWRD_DAC_2015 = 6,
  EVENT_ID_NEW_BLOOM_2015 = 7,
  EVENT_ID_INTERNATIONAL_2015 = 8,
  EVENT_ID_FALL_MAJOR_2015 = 9,
  EVENT_ID_ORACLE_PA = 10,
  EVENT_ID_NEW_BLOOM_2015_PREBEAST = 11,
  EVENT_ID_FROSTIVUS = 12,
  EVENT_ID_WINTER_MAJOR_2016 = 13,
  EVENT_ID_INTERNATIONAL_2016 = 14,
  EVENT_ID_FALL_MAJOR_2016 = 15,
  EVENT_ID_COUNT = 16
};
bool EEvent_IsValid(int value);
const EEvent EEvent_MIN = EVENT_ID_NONE;
const EEvent EEvent_MAX = EVENT_ID_COUNT;
const int EEvent_ARRAYSIZE = EEvent_MAX + 1;

const ::google::protobuf::EnumDescriptor* EEvent_descriptor();
inline const ::std::string& EEvent_Name(EEvent value) {
  return ::google::protobuf::internal::NameOfEnum(
    EEvent_descriptor(), value);
}
inline bool EEvent_Parse(
    const ::std::string& name, EEvent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EEvent>(
    EEvent_descriptor(), name, value);
}
enum DOTALeaverStatus_t {
  DOTA_LEAVER_NONE = 0,
  DOTA_LEAVER_DISCONNECTED = 1,
  DOTA_LEAVER_DISCONNECTED_TOO_LONG = 2,
  DOTA_LEAVER_ABANDONED = 3,
  DOTA_LEAVER_AFK = 4,
  DOTA_LEAVER_NEVER_CONNECTED = 5,
  DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG = 6,
  DOTA_LEAVER_FAILED_TO_READY_UP = 7,
  DOTA_LEAVER_DECLINED = 8
};
bool DOTALeaverStatus_t_IsValid(int value);
const DOTALeaverStatus_t DOTALeaverStatus_t_MIN = DOTA_LEAVER_NONE;
const DOTALeaverStatus_t DOTALeaverStatus_t_MAX = DOTA_LEAVER_DECLINED;
const int DOTALeaverStatus_t_ARRAYSIZE = DOTALeaverStatus_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTALeaverStatus_t_descriptor();
inline const ::std::string& DOTALeaverStatus_t_Name(DOTALeaverStatus_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTALeaverStatus_t_descriptor(), value);
}
inline bool DOTALeaverStatus_t_Parse(
    const ::std::string& name, DOTALeaverStatus_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTALeaverStatus_t>(
    DOTALeaverStatus_t_descriptor(), name, value);
}
enum DOTAConnectionState_t {
  DOTA_CONNECTION_STATE_UNKNOWN = 0,
  DOTA_CONNECTION_STATE_NOT_YET_CONNECTED = 1,
  DOTA_CONNECTION_STATE_CONNECTED = 2,
  DOTA_CONNECTION_STATE_DISCONNECTED = 3,
  DOTA_CONNECTION_STATE_ABANDONED = 4,
  DOTA_CONNECTION_STATE_LOADING = 5,
  DOTA_CONNECTION_STATE_FAILED = 6
};
bool DOTAConnectionState_t_IsValid(int value);
const DOTAConnectionState_t DOTAConnectionState_t_MIN = DOTA_CONNECTION_STATE_UNKNOWN;
const DOTAConnectionState_t DOTAConnectionState_t_MAX = DOTA_CONNECTION_STATE_FAILED;
const int DOTAConnectionState_t_ARRAYSIZE = DOTAConnectionState_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTAConnectionState_t_descriptor();
inline const ::std::string& DOTAConnectionState_t_Name(DOTAConnectionState_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTAConnectionState_t_descriptor(), value);
}
inline bool DOTAConnectionState_t_Parse(
    const ::std::string& name, DOTAConnectionState_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTAConnectionState_t>(
    DOTAConnectionState_t_descriptor(), name, value);
}
enum Fantasy_Roles {
  FANTASY_ROLE_UNDEFINED = 0,
  FANTASY_ROLE_CORE = 1,
  FANTASY_ROLE_SUPPORT = 2,
  FANTASY_ROLE_OFFLANE = 3
};
bool Fantasy_Roles_IsValid(int value);
const Fantasy_Roles Fantasy_Roles_MIN = FANTASY_ROLE_UNDEFINED;
const Fantasy_Roles Fantasy_Roles_MAX = FANTASY_ROLE_OFFLANE;
const int Fantasy_Roles_ARRAYSIZE = Fantasy_Roles_MAX + 1;

const ::google::protobuf::EnumDescriptor* Fantasy_Roles_descriptor();
inline const ::std::string& Fantasy_Roles_Name(Fantasy_Roles value) {
  return ::google::protobuf::internal::NameOfEnum(
    Fantasy_Roles_descriptor(), value);
}
inline bool Fantasy_Roles_Parse(
    const ::std::string& name, Fantasy_Roles* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Fantasy_Roles>(
    Fantasy_Roles_descriptor(), name, value);
}
enum Fantasy_Team_Slots {
  FANTASY_SLOT_NONE = 0,
  FANTASY_SLOT_CORE = 1,
  FANTASY_SLOT_SUPPORT = 2,
  FANTASY_SLOT_ANY = 3,
  FANTASY_SLOT_BENCH = 4
};
bool Fantasy_Team_Slots_IsValid(int value);
const Fantasy_Team_Slots Fantasy_Team_Slots_MIN = FANTASY_SLOT_NONE;
const Fantasy_Team_Slots Fantasy_Team_Slots_MAX = FANTASY_SLOT_BENCH;
const int Fantasy_Team_Slots_ARRAYSIZE = Fantasy_Team_Slots_MAX + 1;

const ::google::protobuf::EnumDescriptor* Fantasy_Team_Slots_descriptor();
inline const ::std::string& Fantasy_Team_Slots_Name(Fantasy_Team_Slots value) {
  return ::google::protobuf::internal::NameOfEnum(
    Fantasy_Team_Slots_descriptor(), value);
}
inline bool Fantasy_Team_Slots_Parse(
    const ::std::string& name, Fantasy_Team_Slots* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Fantasy_Team_Slots>(
    Fantasy_Team_Slots_descriptor(), name, value);
}
enum Fantasy_Selection_Mode {
  FANTASY_SELECTION_INVALID = 0,
  FANTASY_SELECTION_LOCKED = 1,
  FANTASY_SELECTION_SHUFFLE = 2,
  FANTASY_SELECTION_FREE_PICK = 3,
  FANTASY_SELECTION_ENDED = 4,
  FANTASY_SELECTION_PRE_SEASON = 5,
  FANTASY_SELECTION_PRE_DRAFT = 6,
  FANTASY_SELECTION_DRAFTING = 7,
  FANTASY_SELECTION_REGULAR_SEASON = 8,
  FANTASY_SELECTION_CARD_BASED = 9
};
bool Fantasy_Selection_Mode_IsValid(int value);
const Fantasy_Selection_Mode Fantasy_Selection_Mode_MIN = FANTASY_SELECTION_INVALID;
const Fantasy_Selection_Mode Fantasy_Selection_Mode_MAX = FANTASY_SELECTION_CARD_BASED;
const int Fantasy_Selection_Mode_ARRAYSIZE = Fantasy_Selection_Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Fantasy_Selection_Mode_descriptor();
inline const ::std::string& Fantasy_Selection_Mode_Name(Fantasy_Selection_Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Fantasy_Selection_Mode_descriptor(), value);
}
inline bool Fantasy_Selection_Mode_Parse(
    const ::std::string& name, Fantasy_Selection_Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Fantasy_Selection_Mode>(
    Fantasy_Selection_Mode_descriptor(), name, value);
}
enum DOTAChatChannelType_t {
  DOTAChannelType_Regional = 0,
  DOTAChannelType_Custom = 1,
  DOTAChannelType_Party = 2,
  DOTAChannelType_Lobby = 3,
  DOTAChannelType_Team = 4,
  DOTAChannelType_Guild = 5,
  DOTAChannelType_Fantasy = 6,
  DOTAChannelType_Whisper = 7,
  DOTAChannelType_Console = 8,
  DOTAChannelType_Tab = 9,
  DOTAChannelType_Invalid = 10,
  DOTAChannelType_GameAll = 11,
  DOTAChannelType_GameAllies = 12,
  DOTAChannelType_GameSpectator = 13,
  DOTAChannelType_GameCoaching = 14,
  DOTAChannelType_Cafe = 15,
  DOTAChannelType_CustomGame = 16,
  DOTAChannelType_Private = 17,
  DOTAChannelType_PostGame = 18,
  DOTAChannelType_BattleCup = 19,
  DOTAChannelType_HLTVSpectator = 20,
  DOTAChannelType_GameEvents = 21
};
bool DOTAChatChannelType_t_IsValid(int value);
const DOTAChatChannelType_t DOTAChatChannelType_t_MIN = DOTAChannelType_Regional;
const DOTAChatChannelType_t DOTAChatChannelType_t_MAX = DOTAChannelType_GameEvents;
const int DOTAChatChannelType_t_ARRAYSIZE = DOTAChatChannelType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTAChatChannelType_t_descriptor();
inline const ::std::string& DOTAChatChannelType_t_Name(DOTAChatChannelType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTAChatChannelType_t_descriptor(), value);
}
inline bool DOTAChatChannelType_t_Parse(
    const ::std::string& name, DOTAChatChannelType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTAChatChannelType_t>(
    DOTAChatChannelType_t_descriptor(), name, value);
}
enum EProfileCardSlotType {
  k_EProfileCardSlotType_Empty = 0,
  k_EProfileCardSlotType_Stat = 1,
  k_EProfileCardSlotType_Trophy = 2,
  k_EProfileCardSlotType_Item = 3,
  k_EProfileCardSlotType_Hero = 4,
  k_EProfileCardSlotType_Emoticon = 5
};
bool EProfileCardSlotType_IsValid(int value);
const EProfileCardSlotType EProfileCardSlotType_MIN = k_EProfileCardSlotType_Empty;
const EProfileCardSlotType EProfileCardSlotType_MAX = k_EProfileCardSlotType_Emoticon;
const int EProfileCardSlotType_ARRAYSIZE = EProfileCardSlotType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EProfileCardSlotType_descriptor();
inline const ::std::string& EProfileCardSlotType_Name(EProfileCardSlotType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EProfileCardSlotType_descriptor(), value);
}
inline bool EProfileCardSlotType_Parse(
    const ::std::string& name, EProfileCardSlotType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EProfileCardSlotType>(
    EProfileCardSlotType_descriptor(), name, value);
}
enum EMatchGroupServerStatus {
  k_EMatchGroupServerStatus_OK = 0,
  k_EMatchGroupServerStatus_LimitedAvailability = 1,
  k_EMatchGroupServerStatus_Offline = 2
};
bool EMatchGroupServerStatus_IsValid(int value);
const EMatchGroupServerStatus EMatchGroupServerStatus_MIN = k_EMatchGroupServerStatus_OK;
const EMatchGroupServerStatus EMatchGroupServerStatus_MAX = k_EMatchGroupServerStatus_Offline;
const int EMatchGroupServerStatus_ARRAYSIZE = EMatchGroupServerStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMatchGroupServerStatus_descriptor();
inline const ::std::string& EMatchGroupServerStatus_Name(EMatchGroupServerStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMatchGroupServerStatus_descriptor(), value);
}
inline bool EMatchGroupServerStatus_Parse(
    const ::std::string& name, EMatchGroupServerStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMatchGroupServerStatus>(
    EMatchGroupServerStatus_descriptor(), name, value);
}
enum DOTA_CM_PICK {
  DOTA_CM_RANDOM = 0,
  DOTA_CM_GOOD_GUYS = 1,
  DOTA_CM_BAD_GUYS = 2
};
bool DOTA_CM_PICK_IsValid(int value);
const DOTA_CM_PICK DOTA_CM_PICK_MIN = DOTA_CM_RANDOM;
const DOTA_CM_PICK DOTA_CM_PICK_MAX = DOTA_CM_BAD_GUYS;
const int DOTA_CM_PICK_ARRAYSIZE = DOTA_CM_PICK_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_CM_PICK_descriptor();
inline const ::std::string& DOTA_CM_PICK_Name(DOTA_CM_PICK value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_CM_PICK_descriptor(), value);
}
inline bool DOTA_CM_PICK_Parse(
    const ::std::string& name, DOTA_CM_PICK* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_CM_PICK>(
    DOTA_CM_PICK_descriptor(), name, value);
}
enum DOTALowPriorityBanType {
  DOTA_LOW_PRIORITY_BAN_ABANDON = 0,
  DOTA_LOW_PRIORITY_BAN_REPORTS = 1,
  DOTA_LOW_PRIORITY_BAN_SECONDARY_ABANDON = 2
};
bool DOTALowPriorityBanType_IsValid(int value);
const DOTALowPriorityBanType DOTALowPriorityBanType_MIN = DOTA_LOW_PRIORITY_BAN_ABANDON;
const DOTALowPriorityBanType DOTALowPriorityBanType_MAX = DOTA_LOW_PRIORITY_BAN_SECONDARY_ABANDON;
const int DOTALowPriorityBanType_ARRAYSIZE = DOTALowPriorityBanType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTALowPriorityBanType_descriptor();
inline const ::std::string& DOTALowPriorityBanType_Name(DOTALowPriorityBanType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTALowPriorityBanType_descriptor(), value);
}
inline bool DOTALowPriorityBanType_Parse(
    const ::std::string& name, DOTALowPriorityBanType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTALowPriorityBanType>(
    DOTALowPriorityBanType_descriptor(), name, value);
}
enum DOTALobbyReadyState {
  DOTALobbyReadyState_UNDECLARED = 0,
  DOTALobbyReadyState_ACCEPTED = 1,
  DOTALobbyReadyState_DECLINED = 2
};
bool DOTALobbyReadyState_IsValid(int value);
const DOTALobbyReadyState DOTALobbyReadyState_MIN = DOTALobbyReadyState_UNDECLARED;
const DOTALobbyReadyState DOTALobbyReadyState_MAX = DOTALobbyReadyState_DECLINED;
const int DOTALobbyReadyState_ARRAYSIZE = DOTALobbyReadyState_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTALobbyReadyState_descriptor();
inline const ::std::string& DOTALobbyReadyState_Name(DOTALobbyReadyState value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTALobbyReadyState_descriptor(), value);
}
inline bool DOTALobbyReadyState_Parse(
    const ::std::string& name, DOTALobbyReadyState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTALobbyReadyState>(
    DOTALobbyReadyState_descriptor(), name, value);
}
enum DOTAGameVersion {
  GAME_VERSION_CURRENT = 0,
  GAME_VERSION_STABLE = 1
};
bool DOTAGameVersion_IsValid(int value);
const DOTAGameVersion DOTAGameVersion_MIN = GAME_VERSION_CURRENT;
const DOTAGameVersion DOTAGameVersion_MAX = GAME_VERSION_STABLE;
const int DOTAGameVersion_ARRAYSIZE = DOTAGameVersion_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTAGameVersion_descriptor();
inline const ::std::string& DOTAGameVersion_Name(DOTAGameVersion value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTAGameVersion_descriptor(), value);
}
inline bool DOTAGameVersion_Parse(
    const ::std::string& name, DOTAGameVersion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTAGameVersion>(
    DOTAGameVersion_descriptor(), name, value);
}
enum DOTAJoinLobbyResult {
  DOTA_JOIN_RESULT_SUCCESS = 0,
  DOTA_JOIN_RESULT_ALREADY_IN_GAME = 1,
  DOTA_JOIN_RESULT_INVALID_LOBBY = 2,
  DOTA_JOIN_RESULT_INCORRECT_PASSWORD = 3,
  DOTA_JOIN_RESULT_ACCESS_DENIED = 4,
  DOTA_JOIN_RESULT_GENERIC_ERROR = 5,
  DOTA_JOIN_RESULT_INCORRECT_VERSION = 6,
  DOTA_JOIN_RESULT_IN_TEAM_PARTY = 7,
  DOTA_JOIN_RESULT_NO_LOBBY_FOUND = 8,
  DOTA_JOIN_RESULT_LOBBY_FULL = 9,
  DOTA_JOIN_RESULT_CUSTOM_GAME_INCORRECT_VERSION = 10,
  DOTA_JOIN_RESULT_TIMEOUT = 11
};
bool DOTAJoinLobbyResult_IsValid(int value);
const DOTAJoinLobbyResult DOTAJoinLobbyResult_MIN = DOTA_JOIN_RESULT_SUCCESS;
const DOTAJoinLobbyResult DOTAJoinLobbyResult_MAX = DOTA_JOIN_RESULT_TIMEOUT;
const int DOTAJoinLobbyResult_ARRAYSIZE = DOTAJoinLobbyResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTAJoinLobbyResult_descriptor();
inline const ::std::string& DOTAJoinLobbyResult_Name(DOTAJoinLobbyResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTAJoinLobbyResult_descriptor(), value);
}
inline bool DOTAJoinLobbyResult_Parse(
    const ::std::string& name, DOTAJoinLobbyResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTAJoinLobbyResult>(
    DOTAJoinLobbyResult_descriptor(), name, value);
}
enum SelectionPriorityType {
  UNDEFINED = 0,
  RADIANT = 1,
  DIRE = 2,
  FIRST_PICK = 3,
  SECOND_PICK = 4
};
bool SelectionPriorityType_IsValid(int value);
const SelectionPriorityType SelectionPriorityType_MIN = UNDEFINED;
const SelectionPriorityType SelectionPriorityType_MAX = SECOND_PICK;
const int SelectionPriorityType_ARRAYSIZE = SelectionPriorityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SelectionPriorityType_descriptor();
inline const ::std::string& SelectionPriorityType_Name(SelectionPriorityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SelectionPriorityType_descriptor(), value);
}
inline bool SelectionPriorityType_Parse(
    const ::std::string& name, SelectionPriorityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SelectionPriorityType>(
    SelectionPriorityType_descriptor(), name, value);
}
enum DOTAMatchVote {
  DOTAMatchVote_INVALID = 0,
  DOTAMatchVote_POSITIVE = 1,
  DOTAMatchVote_NEGATIVE = 2
};
bool DOTAMatchVote_IsValid(int value);
const DOTAMatchVote DOTAMatchVote_MIN = DOTAMatchVote_INVALID;
const DOTAMatchVote DOTAMatchVote_MAX = DOTAMatchVote_NEGATIVE;
const int DOTAMatchVote_ARRAYSIZE = DOTAMatchVote_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTAMatchVote_descriptor();
inline const ::std::string& DOTAMatchVote_Name(DOTAMatchVote value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTAMatchVote_descriptor(), value);
}
inline bool DOTAMatchVote_Parse(
    const ::std::string& name, DOTAMatchVote* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTAMatchVote>(
    DOTAMatchVote_descriptor(), name, value);
}
enum DOTA_LobbyMemberXPBonus {
  DOTA_LobbyMemberXPBonus_DEFAULT = 0,
  DOTA_LobbyMemberXPBonus_BATTLE_BOOSTER = 1,
  DOTA_LobbyMemberXPBonus_SHARE_BONUS = 2,
  DOTA_LobbyMemberXPBonus_PARTY = 3,
  DOTA_LobbyMemberXPBonus_RECRUITMENT = 4,
  DOTA_LobbyMemberXPBonus_PCBANG = 5
};
bool DOTA_LobbyMemberXPBonus_IsValid(int value);
const DOTA_LobbyMemberXPBonus DOTA_LobbyMemberXPBonus_MIN = DOTA_LobbyMemberXPBonus_DEFAULT;
const DOTA_LobbyMemberXPBonus DOTA_LobbyMemberXPBonus_MAX = DOTA_LobbyMemberXPBonus_PCBANG;
const int DOTA_LobbyMemberXPBonus_ARRAYSIZE = DOTA_LobbyMemberXPBonus_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_LobbyMemberXPBonus_descriptor();
inline const ::std::string& DOTA_LobbyMemberXPBonus_Name(DOTA_LobbyMemberXPBonus value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_LobbyMemberXPBonus_descriptor(), value);
}
inline bool DOTA_LobbyMemberXPBonus_Parse(
    const ::std::string& name, DOTA_LobbyMemberXPBonus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_LobbyMemberXPBonus>(
    DOTA_LobbyMemberXPBonus_descriptor(), name, value);
}
enum DOTALobbyVisibility {
  DOTALobbyVisibility_Public = 0,
  DOTALobbyVisibility_Friends = 1,
  DOTALobbyVisibility_Unlisted = 2
};
bool DOTALobbyVisibility_IsValid(int value);
const DOTALobbyVisibility DOTALobbyVisibility_MIN = DOTALobbyVisibility_Public;
const DOTALobbyVisibility DOTALobbyVisibility_MAX = DOTALobbyVisibility_Unlisted;
const int DOTALobbyVisibility_ARRAYSIZE = DOTALobbyVisibility_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTALobbyVisibility_descriptor();
inline const ::std::string& DOTALobbyVisibility_Name(DOTALobbyVisibility value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTALobbyVisibility_descriptor(), value);
}
inline bool DOTALobbyVisibility_Parse(
    const ::std::string& name, DOTALobbyVisibility* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTALobbyVisibility>(
    DOTALobbyVisibility_descriptor(), name, value);
}
enum EDOTAPlayerMMRType {
  k_EDOTAPlayerMMRType_Invalid = 0,
  k_EDOTAPlayerMMRType_GeneralHidden = 1,
  k_EDOTAPlayerMMRType_SoloHidden = 2,
  k_EDOTAPlayerMMRType_GeneralCompetitive = 3,
  k_EDOTAPlayerMMRType_SoloCompetitive = 4,
  k_EDOTAPlayerMMRType_1v1Competitive_UNUSED = 5,
  k_EDOTAPlayerMMRType_GeneralSeasonalRanked = 6,
  k_EDOTAPlayerMMRType_SoloSeasonalRanked = 7
};
bool EDOTAPlayerMMRType_IsValid(int value);
const EDOTAPlayerMMRType EDOTAPlayerMMRType_MIN = k_EDOTAPlayerMMRType_Invalid;
const EDOTAPlayerMMRType EDOTAPlayerMMRType_MAX = k_EDOTAPlayerMMRType_SoloSeasonalRanked;
const int EDOTAPlayerMMRType_ARRAYSIZE = EDOTAPlayerMMRType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDOTAPlayerMMRType_descriptor();
inline const ::std::string& EDOTAPlayerMMRType_Name(EDOTAPlayerMMRType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDOTAPlayerMMRType_descriptor(), value);
}
inline bool EDOTAPlayerMMRType_Parse(
    const ::std::string& name, EDOTAPlayerMMRType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDOTAPlayerMMRType>(
    EDOTAPlayerMMRType_descriptor(), name, value);
}
enum MatchType {
  MATCH_TYPE_CASUAL = 0,
  MATCH_TYPE_COOP_BOTS = 1,
  MATCH_TYPE_TEAM_RANKED = 2,
  MATCH_TYPE_LEGACY_SOLO_QUEUE = 3,
  MATCH_TYPE_COMPETITIVE = 4,
  MATCH_TYPE_WEEKEND_TOURNEY = 5,
  MATCH_TYPE_CASUAL_1V1 = 6,
  MATCH_TYPE_EVENT = 7,
  MATCH_TYPE_SEASONAL_RANKED = 8
};
bool MatchType_IsValid(int value);
const MatchType MatchType_MIN = MATCH_TYPE_CASUAL;
const MatchType MatchType_MAX = MATCH_TYPE_SEASONAL_RANKED;
const int MatchType_ARRAYSIZE = MatchType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MatchType_descriptor();
inline const ::std::string& MatchType_Name(MatchType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MatchType_descriptor(), value);
}
inline bool MatchType_Parse(
    const ::std::string& name, MatchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MatchType>(
    MatchType_descriptor(), name, value);
}
enum DOTABotDifficulty {
  BOT_DIFFICULTY_PASSIVE = 0,
  BOT_DIFFICULTY_EASY = 1,
  BOT_DIFFICULTY_MEDIUM = 2,
  BOT_DIFFICULTY_HARD = 3,
  BOT_DIFFICULTY_UNFAIR = 4,
  BOT_DIFFICULTY_INVALID = 5,
  BOT_DIFFICULTY_EXTRA1 = 6,
  BOT_DIFFICULTY_EXTRA2 = 7,
  BOT_DIFFICULTY_EXTRA3 = 8
};
bool DOTABotDifficulty_IsValid(int value);
const DOTABotDifficulty DOTABotDifficulty_MIN = BOT_DIFFICULTY_PASSIVE;
const DOTABotDifficulty DOTABotDifficulty_MAX = BOT_DIFFICULTY_EXTRA3;
const int DOTABotDifficulty_ARRAYSIZE = DOTABotDifficulty_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTABotDifficulty_descriptor();
inline const ::std::string& DOTABotDifficulty_Name(DOTABotDifficulty value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTABotDifficulty_descriptor(), value);
}
inline bool DOTABotDifficulty_Parse(
    const ::std::string& name, DOTABotDifficulty* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTABotDifficulty>(
    DOTABotDifficulty_descriptor(), name, value);
}
enum DOTA_BOT_MODE {
  DOTA_BOT_MODE_NONE = 0,
  DOTA_BOT_MODE_LANING = 1,
  DOTA_BOT_MODE_ATTACK = 2,
  DOTA_BOT_MODE_ROAM = 3,
  DOTA_BOT_MODE_RETREAT = 4,
  DOTA_BOT_MODE_SECRET_SHOP = 5,
  DOTA_BOT_MODE_SIDE_SHOP = 6,
  DOTA_BOT_MODE_RUNE = 7,
  DOTA_BOT_MODE_PUSH_TOWER_TOP = 8,
  DOTA_BOT_MODE_PUSH_TOWER_MID = 9,
  DOTA_BOT_MODE_PUSH_TOWER_BOT = 10,
  DOTA_BOT_MODE_DEFEND_TOWER_TOP = 11,
  DOTA_BOT_MODE_DEFEND_TOWER_MID = 12,
  DOTA_BOT_MODE_DEFEND_TOWER_BOT = 13,
  DOTA_BOT_MODE_ASSEMBLE = 14,
  DOTA_BOT_MODE_ASSEMBLE_WITH_HUMANS = 15,
  DOTA_BOT_MODE_TEAM_ROAM = 16,
  DOTA_BOT_MODE_FARM = 17,
  DOTA_BOT_MODE_DEFEND_ALLY = 18,
  DOTA_BOT_MODE_EVASIVE_MANEUVERS = 19,
  DOTA_BOT_MODE_ROSHAN = 20,
  DOTA_BOT_MODE_ITEM = 21,
  DOTA_BOT_MODE_WARD = 22,
  DOTA_BOT_MODE_COMPANION = 23,
  DOTA_BOT_MODE_TUTORIAL_BOSS = 24
};
bool DOTA_BOT_MODE_IsValid(int value);
const DOTA_BOT_MODE DOTA_BOT_MODE_MIN = DOTA_BOT_MODE_NONE;
const DOTA_BOT_MODE DOTA_BOT_MODE_MAX = DOTA_BOT_MODE_TUTORIAL_BOSS;
const int DOTA_BOT_MODE_ARRAYSIZE = DOTA_BOT_MODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_BOT_MODE_descriptor();
inline const ::std::string& DOTA_BOT_MODE_Name(DOTA_BOT_MODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_BOT_MODE_descriptor(), value);
}
inline bool DOTA_BOT_MODE_Parse(
    const ::std::string& name, DOTA_BOT_MODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_BOT_MODE>(
    DOTA_BOT_MODE_descriptor(), name, value);
}
enum MatchLanguages {
  MATCH_LANGUAGE_INVALID = 0,
  MATCH_LANGUAGE_ENGLISH = 1,
  MATCH_LANGUAGE_RUSSIAN = 2,
  MATCH_LANGUAGE_CHINESE = 3,
  MATCH_LANGUAGE_KOREAN = 4,
  MATCH_LANGUAGE_SPANISH = 5,
  MATCH_LANGUAGE_PORTUGUESE = 6,
  MATCH_LANGUAGE_ENGLISH2 = 7
};
bool MatchLanguages_IsValid(int value);
const MatchLanguages MatchLanguages_MIN = MATCH_LANGUAGE_INVALID;
const MatchLanguages MatchLanguages_MAX = MATCH_LANGUAGE_ENGLISH2;
const int MatchLanguages_ARRAYSIZE = MatchLanguages_MAX + 1;

const ::google::protobuf::EnumDescriptor* MatchLanguages_descriptor();
inline const ::std::string& MatchLanguages_Name(MatchLanguages value) {
  return ::google::protobuf::internal::NameOfEnum(
    MatchLanguages_descriptor(), value);
}
inline bool MatchLanguages_Parse(
    const ::std::string& name, MatchLanguages* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MatchLanguages>(
    MatchLanguages_descriptor(), name, value);
}
enum ETourneyQueueDeadlineState {
  k_ETourneyQueueDeadlineState_Normal = 0,
  k_ETourneyQueueDeadlineState_Missed = 1,
  k_ETourneyQueueDeadlineState_ExpiredOK = 2,
  k_ETourneyQueueDeadlineState_SeekingBye = 3,
  k_ETourneyQueueDeadlineState_EligibleForRefund = 4,
  k_ETourneyQueueDeadlineState_NA = -1,
  k_ETourneyQueueDeadlineState_ExpiringSoon = 101
};
bool ETourneyQueueDeadlineState_IsValid(int value);
const ETourneyQueueDeadlineState ETourneyQueueDeadlineState_MIN = k_ETourneyQueueDeadlineState_NA;
const ETourneyQueueDeadlineState ETourneyQueueDeadlineState_MAX = k_ETourneyQueueDeadlineState_ExpiringSoon;
const int ETourneyQueueDeadlineState_ARRAYSIZE = ETourneyQueueDeadlineState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETourneyQueueDeadlineState_descriptor();
inline const ::std::string& ETourneyQueueDeadlineState_Name(ETourneyQueueDeadlineState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETourneyQueueDeadlineState_descriptor(), value);
}
inline bool ETourneyQueueDeadlineState_Parse(
    const ::std::string& name, ETourneyQueueDeadlineState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETourneyQueueDeadlineState>(
    ETourneyQueueDeadlineState_descriptor(), name, value);
}
enum EMatchOutcome {
  k_EMatchOutcome_Unknown = 0,
  k_EMatchOutcome_RadVictory = 2,
  k_EMatchOutcome_DireVictory = 3,
  k_EMatchOutcome_NotScored_PoorNetworkConditions = 64,
  k_EMatchOutcome_NotScored_Leaver = 65,
  k_EMatchOutcome_NotScored_ServerCrash = 66,
  k_EMatchOutcome_NotScored_NeverStarted = 67,
  k_EMatchOutcome_NotScored_Canceled = 68
};
bool EMatchOutcome_IsValid(int value);
const EMatchOutcome EMatchOutcome_MIN = k_EMatchOutcome_Unknown;
const EMatchOutcome EMatchOutcome_MAX = k_EMatchOutcome_NotScored_Canceled;
const int EMatchOutcome_ARRAYSIZE = EMatchOutcome_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMatchOutcome_descriptor();
inline const ::std::string& EMatchOutcome_Name(EMatchOutcome value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMatchOutcome_descriptor(), value);
}
inline bool EMatchOutcome_Parse(
    const ::std::string& name, EMatchOutcome* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMatchOutcome>(
    EMatchOutcome_descriptor(), name, value);
}
// ===================================================================

class CDOTAClientHardwareSpecs : public ::google::protobuf::Message {
 public:
  CDOTAClientHardwareSpecs();
  virtual ~CDOTAClientHardwareSpecs();

  CDOTAClientHardwareSpecs(const CDOTAClientHardwareSpecs& from);

  inline CDOTAClientHardwareSpecs& operator=(const CDOTAClientHardwareSpecs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAClientHardwareSpecs& default_instance();

  void Swap(CDOTAClientHardwareSpecs* other);

  // implements Message ----------------------------------------------

  CDOTAClientHardwareSpecs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAClientHardwareSpecs& from);
  void MergeFrom(const CDOTAClientHardwareSpecs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 logical_processors = 1;
  inline bool has_logical_processors() const;
  inline void clear_logical_processors();
  static const int kLogicalProcessorsFieldNumber = 1;
  inline ::google::protobuf::uint32 logical_processors() const;
  inline void set_logical_processors(::google::protobuf::uint32 value);

  // optional fixed64 cpu_cycles_per_second = 2;
  inline bool has_cpu_cycles_per_second() const;
  inline void clear_cpu_cycles_per_second();
  static const int kCpuCyclesPerSecondFieldNumber = 2;
  inline ::google::protobuf::uint64 cpu_cycles_per_second() const;
  inline void set_cpu_cycles_per_second(::google::protobuf::uint64 value);

  // optional fixed64 total_physical_memory = 3;
  inline bool has_total_physical_memory() const;
  inline void clear_total_physical_memory();
  static const int kTotalPhysicalMemoryFieldNumber = 3;
  inline ::google::protobuf::uint64 total_physical_memory() const;
  inline void set_total_physical_memory(::google::protobuf::uint64 value);

  // optional bool is_64_bit_os = 4;
  inline bool has_is_64_bit_os() const;
  inline void clear_is_64_bit_os();
  static const int kIs64BitOsFieldNumber = 4;
  inline bool is_64_bit_os() const;
  inline void set_is_64_bit_os(bool value);

  // optional uint64 upload_measurement = 5;
  inline bool has_upload_measurement() const;
  inline void clear_upload_measurement();
  static const int kUploadMeasurementFieldNumber = 5;
  inline ::google::protobuf::uint64 upload_measurement() const;
  inline void set_upload_measurement(::google::protobuf::uint64 value);

  // optional bool prefer_not_host = 6;
  inline bool has_prefer_not_host() const;
  inline void clear_prefer_not_host();
  static const int kPreferNotHostFieldNumber = 6;
  inline bool prefer_not_host() const;
  inline void set_prefer_not_host(bool value);

  // @@protoc_insertion_point(class_scope:CDOTAClientHardwareSpecs)
 private:
  inline void set_has_logical_processors();
  inline void clear_has_logical_processors();
  inline void set_has_cpu_cycles_per_second();
  inline void clear_has_cpu_cycles_per_second();
  inline void set_has_total_physical_memory();
  inline void clear_has_total_physical_memory();
  inline void set_has_is_64_bit_os();
  inline void clear_has_is_64_bit_os();
  inline void set_has_upload_measurement();
  inline void clear_has_upload_measurement();
  inline void set_has_prefer_not_host();
  inline void clear_has_prefer_not_host();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 cpu_cycles_per_second_;
  ::google::protobuf::uint64 total_physical_memory_;
  ::google::protobuf::uint32 logical_processors_;
  bool is_64_bit_os_;
  bool prefer_not_host_;
  ::google::protobuf::uint64 upload_measurement_;
  friend void  protobuf_AddDesc_dota_5fshared_5fenums_2eproto();
  friend void protobuf_AssignDesc_dota_5fshared_5fenums_2eproto();
  friend void protobuf_ShutdownFile_dota_5fshared_5fenums_2eproto();

  void InitAsDefaultInstance();
  static CDOTAClientHardwareSpecs* default_instance_;
};
// -------------------------------------------------------------------

class CDOTASaveGame_Player : public ::google::protobuf::Message {
 public:
  CDOTASaveGame_Player();
  virtual ~CDOTASaveGame_Player();

  CDOTASaveGame_Player(const CDOTASaveGame_Player& from);

  inline CDOTASaveGame_Player& operator=(const CDOTASaveGame_Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTASaveGame_Player& default_instance();

  void Swap(CDOTASaveGame_Player* other);

  // implements Message ----------------------------------------------

  CDOTASaveGame_Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTASaveGame_Player& from);
  void MergeFrom(const CDOTASaveGame_Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 1;
  inline ::DOTA_GC_TEAM team() const;
  inline void set_team(::DOTA_GC_TEAM value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string hero = 3;
  inline bool has_hero() const;
  inline void clear_hero();
  static const int kHeroFieldNumber = 3;
  inline const ::std::string& hero() const;
  inline void set_hero(const ::std::string& value);
  inline void set_hero(const char* value);
  inline void set_hero(const char* value, size_t size);
  inline ::std::string* mutable_hero();
  inline ::std::string* release_hero();
  inline void set_allocated_hero(::std::string* hero);

  // @@protoc_insertion_point(class_scope:CDOTASaveGame.Player)
 private:
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_hero();
  inline void clear_has_hero();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* hero_;
  int team_;
  friend void  protobuf_AddDesc_dota_5fshared_5fenums_2eproto();
  friend void protobuf_AssignDesc_dota_5fshared_5fenums_2eproto();
  friend void protobuf_ShutdownFile_dota_5fshared_5fenums_2eproto();

  void InitAsDefaultInstance();
  static CDOTASaveGame_Player* default_instance_;
};
// -------------------------------------------------------------------

class CDOTASaveGame_SaveInstance_PlayerPositions : public ::google::protobuf::Message {
 public:
  CDOTASaveGame_SaveInstance_PlayerPositions();
  virtual ~CDOTASaveGame_SaveInstance_PlayerPositions();

  CDOTASaveGame_SaveInstance_PlayerPositions(const CDOTASaveGame_SaveInstance_PlayerPositions& from);

  inline CDOTASaveGame_SaveInstance_PlayerPositions& operator=(const CDOTASaveGame_SaveInstance_PlayerPositions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTASaveGame_SaveInstance_PlayerPositions& default_instance();

  void Swap(CDOTASaveGame_SaveInstance_PlayerPositions* other);

  // implements Message ----------------------------------------------

  CDOTASaveGame_SaveInstance_PlayerPositions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTASaveGame_SaveInstance_PlayerPositions& from);
  void MergeFrom(const CDOTASaveGame_SaveInstance_PlayerPositions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:CDOTASaveGame.SaveInstance.PlayerPositions)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  friend void  protobuf_AddDesc_dota_5fshared_5fenums_2eproto();
  friend void protobuf_AssignDesc_dota_5fshared_5fenums_2eproto();
  friend void protobuf_ShutdownFile_dota_5fshared_5fenums_2eproto();

  void InitAsDefaultInstance();
  static CDOTASaveGame_SaveInstance_PlayerPositions* default_instance_;
};
// -------------------------------------------------------------------

class CDOTASaveGame_SaveInstance : public ::google::protobuf::Message {
 public:
  CDOTASaveGame_SaveInstance();
  virtual ~CDOTASaveGame_SaveInstance();

  CDOTASaveGame_SaveInstance(const CDOTASaveGame_SaveInstance& from);

  inline CDOTASaveGame_SaveInstance& operator=(const CDOTASaveGame_SaveInstance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTASaveGame_SaveInstance& default_instance();

  void Swap(CDOTASaveGame_SaveInstance* other);

  // implements Message ----------------------------------------------

  CDOTASaveGame_SaveInstance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTASaveGame_SaveInstance& from);
  void MergeFrom(const CDOTASaveGame_SaveInstance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CDOTASaveGame_SaveInstance_PlayerPositions PlayerPositions;

  // accessors -------------------------------------------------------

  // optional uint32 game_time = 2;
  inline bool has_game_time() const;
  inline void clear_game_time();
  static const int kGameTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 game_time() const;
  inline void set_game_time(::google::protobuf::uint32 value);

  // optional uint32 team1_score = 3;
  inline bool has_team1_score() const;
  inline void clear_team1_score();
  static const int kTeam1ScoreFieldNumber = 3;
  inline ::google::protobuf::uint32 team1_score() const;
  inline void set_team1_score(::google::protobuf::uint32 value);

  // optional uint32 team2_score = 4;
  inline bool has_team2_score() const;
  inline void clear_team2_score();
  static const int kTeam2ScoreFieldNumber = 4;
  inline ::google::protobuf::uint32 team2_score() const;
  inline void set_team2_score(::google::protobuf::uint32 value);

  // repeated .CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
  inline int player_positions_size() const;
  inline void clear_player_positions();
  static const int kPlayerPositionsFieldNumber = 5;
  inline const ::CDOTASaveGame_SaveInstance_PlayerPositions& player_positions(int index) const;
  inline ::CDOTASaveGame_SaveInstance_PlayerPositions* mutable_player_positions(int index);
  inline ::CDOTASaveGame_SaveInstance_PlayerPositions* add_player_positions();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance_PlayerPositions >&
      player_positions() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance_PlayerPositions >*
      mutable_player_positions();

  // optional uint32 save_id = 6;
  inline bool has_save_id() const;
  inline void clear_save_id();
  static const int kSaveIdFieldNumber = 6;
  inline ::google::protobuf::uint32 save_id() const;
  inline void set_save_id(::google::protobuf::uint32 value);

  // optional uint32 save_time = 7;
  inline bool has_save_time() const;
  inline void clear_save_time();
  static const int kSaveTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 save_time() const;
  inline void set_save_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CDOTASaveGame.SaveInstance)
 private:
  inline void set_has_game_time();
  inline void clear_has_game_time();
  inline void set_has_team1_score();
  inline void clear_has_team1_score();
  inline void set_has_team2_score();
  inline void clear_has_team2_score();
  inline void set_has_save_id();
  inline void clear_has_save_id();
  inline void set_has_save_time();
  inline void clear_has_save_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 game_time_;
  ::google::protobuf::uint32 team1_score_;
  ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance_PlayerPositions > player_positions_;
  ::google::protobuf::uint32 team2_score_;
  ::google::protobuf::uint32 save_id_;
  ::google::protobuf::uint32 save_time_;
  friend void  protobuf_AddDesc_dota_5fshared_5fenums_2eproto();
  friend void protobuf_AssignDesc_dota_5fshared_5fenums_2eproto();
  friend void protobuf_ShutdownFile_dota_5fshared_5fenums_2eproto();

  void InitAsDefaultInstance();
  static CDOTASaveGame_SaveInstance* default_instance_;
};
// -------------------------------------------------------------------

class CDOTASaveGame : public ::google::protobuf::Message {
 public:
  CDOTASaveGame();
  virtual ~CDOTASaveGame();

  CDOTASaveGame(const CDOTASaveGame& from);

  inline CDOTASaveGame& operator=(const CDOTASaveGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTASaveGame& default_instance();

  void Swap(CDOTASaveGame* other);

  // implements Message ----------------------------------------------

  CDOTASaveGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTASaveGame& from);
  void MergeFrom(const CDOTASaveGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CDOTASaveGame_Player Player;
  typedef CDOTASaveGame_SaveInstance SaveInstance;

  // accessors -------------------------------------------------------

  // optional uint64 match_id = 5;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 5;
  inline ::google::protobuf::uint64 match_id() const;
  inline void set_match_id(::google::protobuf::uint64 value);

  // optional uint32 save_time = 2;
  inline bool has_save_time() const;
  inline void clear_save_time();
  static const int kSaveTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 save_time() const;
  inline void set_save_time(::google::protobuf::uint32 value);

  // repeated .CDOTASaveGame.Player players = 3;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 3;
  inline const ::CDOTASaveGame_Player& players(int index) const;
  inline ::CDOTASaveGame_Player* mutable_players(int index);
  inline ::CDOTASaveGame_Player* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_Player >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_Player >*
      mutable_players();

  // repeated .CDOTASaveGame.SaveInstance save_instances = 4;
  inline int save_instances_size() const;
  inline void clear_save_instances();
  static const int kSaveInstancesFieldNumber = 4;
  inline const ::CDOTASaveGame_SaveInstance& save_instances(int index) const;
  inline ::CDOTASaveGame_SaveInstance* mutable_save_instances(int index);
  inline ::CDOTASaveGame_SaveInstance* add_save_instances();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance >&
      save_instances() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance >*
      mutable_save_instances();

  // @@protoc_insertion_point(class_scope:CDOTASaveGame)
 private:
  inline void set_has_match_id();
  inline void clear_has_match_id();
  inline void set_has_save_time();
  inline void clear_has_save_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 match_id_;
  ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_Player > players_;
  ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance > save_instances_;
  ::google::protobuf::uint32 save_time_;
  friend void  protobuf_AddDesc_dota_5fshared_5fenums_2eproto();
  friend void protobuf_AssignDesc_dota_5fshared_5fenums_2eproto();
  friend void protobuf_ShutdownFile_dota_5fshared_5fenums_2eproto();

  void InitAsDefaultInstance();
  static CDOTASaveGame* default_instance_;
};
// ===================================================================


// ===================================================================

// CDOTAClientHardwareSpecs

// optional uint32 logical_processors = 1;
inline bool CDOTAClientHardwareSpecs::has_logical_processors() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAClientHardwareSpecs::set_has_logical_processors() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAClientHardwareSpecs::clear_has_logical_processors() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAClientHardwareSpecs::clear_logical_processors() {
  logical_processors_ = 0u;
  clear_has_logical_processors();
}
inline ::google::protobuf::uint32 CDOTAClientHardwareSpecs::logical_processors() const {
  // @@protoc_insertion_point(field_get:CDOTAClientHardwareSpecs.logical_processors)
  return logical_processors_;
}
inline void CDOTAClientHardwareSpecs::set_logical_processors(::google::protobuf::uint32 value) {
  set_has_logical_processors();
  logical_processors_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientHardwareSpecs.logical_processors)
}

// optional fixed64 cpu_cycles_per_second = 2;
inline bool CDOTAClientHardwareSpecs::has_cpu_cycles_per_second() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAClientHardwareSpecs::set_has_cpu_cycles_per_second() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAClientHardwareSpecs::clear_has_cpu_cycles_per_second() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAClientHardwareSpecs::clear_cpu_cycles_per_second() {
  cpu_cycles_per_second_ = GOOGLE_ULONGLONG(0);
  clear_has_cpu_cycles_per_second();
}
inline ::google::protobuf::uint64 CDOTAClientHardwareSpecs::cpu_cycles_per_second() const {
  // @@protoc_insertion_point(field_get:CDOTAClientHardwareSpecs.cpu_cycles_per_second)
  return cpu_cycles_per_second_;
}
inline void CDOTAClientHardwareSpecs::set_cpu_cycles_per_second(::google::protobuf::uint64 value) {
  set_has_cpu_cycles_per_second();
  cpu_cycles_per_second_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientHardwareSpecs.cpu_cycles_per_second)
}

// optional fixed64 total_physical_memory = 3;
inline bool CDOTAClientHardwareSpecs::has_total_physical_memory() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAClientHardwareSpecs::set_has_total_physical_memory() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAClientHardwareSpecs::clear_has_total_physical_memory() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAClientHardwareSpecs::clear_total_physical_memory() {
  total_physical_memory_ = GOOGLE_ULONGLONG(0);
  clear_has_total_physical_memory();
}
inline ::google::protobuf::uint64 CDOTAClientHardwareSpecs::total_physical_memory() const {
  // @@protoc_insertion_point(field_get:CDOTAClientHardwareSpecs.total_physical_memory)
  return total_physical_memory_;
}
inline void CDOTAClientHardwareSpecs::set_total_physical_memory(::google::protobuf::uint64 value) {
  set_has_total_physical_memory();
  total_physical_memory_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientHardwareSpecs.total_physical_memory)
}

// optional bool is_64_bit_os = 4;
inline bool CDOTAClientHardwareSpecs::has_is_64_bit_os() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAClientHardwareSpecs::set_has_is_64_bit_os() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAClientHardwareSpecs::clear_has_is_64_bit_os() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAClientHardwareSpecs::clear_is_64_bit_os() {
  is_64_bit_os_ = false;
  clear_has_is_64_bit_os();
}
inline bool CDOTAClientHardwareSpecs::is_64_bit_os() const {
  // @@protoc_insertion_point(field_get:CDOTAClientHardwareSpecs.is_64_bit_os)
  return is_64_bit_os_;
}
inline void CDOTAClientHardwareSpecs::set_is_64_bit_os(bool value) {
  set_has_is_64_bit_os();
  is_64_bit_os_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientHardwareSpecs.is_64_bit_os)
}

// optional uint64 upload_measurement = 5;
inline bool CDOTAClientHardwareSpecs::has_upload_measurement() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTAClientHardwareSpecs::set_has_upload_measurement() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTAClientHardwareSpecs::clear_has_upload_measurement() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTAClientHardwareSpecs::clear_upload_measurement() {
  upload_measurement_ = GOOGLE_ULONGLONG(0);
  clear_has_upload_measurement();
}
inline ::google::protobuf::uint64 CDOTAClientHardwareSpecs::upload_measurement() const {
  // @@protoc_insertion_point(field_get:CDOTAClientHardwareSpecs.upload_measurement)
  return upload_measurement_;
}
inline void CDOTAClientHardwareSpecs::set_upload_measurement(::google::protobuf::uint64 value) {
  set_has_upload_measurement();
  upload_measurement_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientHardwareSpecs.upload_measurement)
}

// optional bool prefer_not_host = 6;
inline bool CDOTAClientHardwareSpecs::has_prefer_not_host() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTAClientHardwareSpecs::set_has_prefer_not_host() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDOTAClientHardwareSpecs::clear_has_prefer_not_host() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDOTAClientHardwareSpecs::clear_prefer_not_host() {
  prefer_not_host_ = false;
  clear_has_prefer_not_host();
}
inline bool CDOTAClientHardwareSpecs::prefer_not_host() const {
  // @@protoc_insertion_point(field_get:CDOTAClientHardwareSpecs.prefer_not_host)
  return prefer_not_host_;
}
inline void CDOTAClientHardwareSpecs::set_prefer_not_host(bool value) {
  set_has_prefer_not_host();
  prefer_not_host_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientHardwareSpecs.prefer_not_host)
}

// -------------------------------------------------------------------

// CDOTASaveGame_Player

// optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CDOTASaveGame_Player::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTASaveGame_Player::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTASaveGame_Player::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTASaveGame_Player::clear_team() {
  team_ = 0;
  clear_has_team();
}
inline ::DOTA_GC_TEAM CDOTASaveGame_Player::team() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.Player.team)
  return static_cast< ::DOTA_GC_TEAM >(team_);
}
inline void CDOTASaveGame_Player::set_team(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.Player.team)
}

// optional string name = 2;
inline bool CDOTASaveGame_Player::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTASaveGame_Player::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTASaveGame_Player::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTASaveGame_Player::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CDOTASaveGame_Player::name() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.Player.name)
  return *name_;
}
inline void CDOTASaveGame_Player::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CDOTASaveGame.Player.name)
}
inline void CDOTASaveGame_Player::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CDOTASaveGame.Player.name)
}
inline void CDOTASaveGame_Player::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CDOTASaveGame.Player.name)
}
inline ::std::string* CDOTASaveGame_Player::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CDOTASaveGame.Player.name)
  return name_;
}
inline ::std::string* CDOTASaveGame_Player::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CDOTASaveGame_Player::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTASaveGame.Player.name)
}

// optional string hero = 3;
inline bool CDOTASaveGame_Player::has_hero() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTASaveGame_Player::set_has_hero() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTASaveGame_Player::clear_has_hero() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTASaveGame_Player::clear_hero() {
  if (hero_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hero_->clear();
  }
  clear_has_hero();
}
inline const ::std::string& CDOTASaveGame_Player::hero() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.Player.hero)
  return *hero_;
}
inline void CDOTASaveGame_Player::set_hero(const ::std::string& value) {
  set_has_hero();
  if (hero_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hero_ = new ::std::string;
  }
  hero_->assign(value);
  // @@protoc_insertion_point(field_set:CDOTASaveGame.Player.hero)
}
inline void CDOTASaveGame_Player::set_hero(const char* value) {
  set_has_hero();
  if (hero_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hero_ = new ::std::string;
  }
  hero_->assign(value);
  // @@protoc_insertion_point(field_set_char:CDOTASaveGame.Player.hero)
}
inline void CDOTASaveGame_Player::set_hero(const char* value, size_t size) {
  set_has_hero();
  if (hero_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hero_ = new ::std::string;
  }
  hero_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CDOTASaveGame.Player.hero)
}
inline ::std::string* CDOTASaveGame_Player::mutable_hero() {
  set_has_hero();
  if (hero_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hero_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CDOTASaveGame.Player.hero)
  return hero_;
}
inline ::std::string* CDOTASaveGame_Player::release_hero() {
  clear_has_hero();
  if (hero_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hero_;
    hero_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CDOTASaveGame_Player::set_allocated_hero(::std::string* hero) {
  if (hero_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hero_;
  }
  if (hero) {
    set_has_hero();
    hero_ = hero;
  } else {
    clear_has_hero();
    hero_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTASaveGame.Player.hero)
}

// -------------------------------------------------------------------

// CDOTASaveGame_SaveInstance_PlayerPositions

// optional float x = 1;
inline bool CDOTASaveGame_SaveInstance_PlayerPositions::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float CDOTASaveGame_SaveInstance_PlayerPositions::x() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.SaveInstance.PlayerPositions.x)
  return x_;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.SaveInstance.PlayerPositions.x)
}

// optional float y = 2;
inline bool CDOTASaveGame_SaveInstance_PlayerPositions::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float CDOTASaveGame_SaveInstance_PlayerPositions::y() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.SaveInstance.PlayerPositions.y)
  return y_;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.SaveInstance.PlayerPositions.y)
}

// -------------------------------------------------------------------

// CDOTASaveGame_SaveInstance

// optional uint32 game_time = 2;
inline bool CDOTASaveGame_SaveInstance::has_game_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTASaveGame_SaveInstance::set_has_game_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTASaveGame_SaveInstance::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTASaveGame_SaveInstance::clear_game_time() {
  game_time_ = 0u;
  clear_has_game_time();
}
inline ::google::protobuf::uint32 CDOTASaveGame_SaveInstance::game_time() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.SaveInstance.game_time)
  return game_time_;
}
inline void CDOTASaveGame_SaveInstance::set_game_time(::google::protobuf::uint32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.SaveInstance.game_time)
}

// optional uint32 team1_score = 3;
inline bool CDOTASaveGame_SaveInstance::has_team1_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTASaveGame_SaveInstance::set_has_team1_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTASaveGame_SaveInstance::clear_has_team1_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTASaveGame_SaveInstance::clear_team1_score() {
  team1_score_ = 0u;
  clear_has_team1_score();
}
inline ::google::protobuf::uint32 CDOTASaveGame_SaveInstance::team1_score() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.SaveInstance.team1_score)
  return team1_score_;
}
inline void CDOTASaveGame_SaveInstance::set_team1_score(::google::protobuf::uint32 value) {
  set_has_team1_score();
  team1_score_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.SaveInstance.team1_score)
}

// optional uint32 team2_score = 4;
inline bool CDOTASaveGame_SaveInstance::has_team2_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTASaveGame_SaveInstance::set_has_team2_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTASaveGame_SaveInstance::clear_has_team2_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTASaveGame_SaveInstance::clear_team2_score() {
  team2_score_ = 0u;
  clear_has_team2_score();
}
inline ::google::protobuf::uint32 CDOTASaveGame_SaveInstance::team2_score() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.SaveInstance.team2_score)
  return team2_score_;
}
inline void CDOTASaveGame_SaveInstance::set_team2_score(::google::protobuf::uint32 value) {
  set_has_team2_score();
  team2_score_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.SaveInstance.team2_score)
}

// repeated .CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
inline int CDOTASaveGame_SaveInstance::player_positions_size() const {
  return player_positions_.size();
}
inline void CDOTASaveGame_SaveInstance::clear_player_positions() {
  player_positions_.Clear();
}
inline const ::CDOTASaveGame_SaveInstance_PlayerPositions& CDOTASaveGame_SaveInstance::player_positions(int index) const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.SaveInstance.player_positions)
  return player_positions_.Get(index);
}
inline ::CDOTASaveGame_SaveInstance_PlayerPositions* CDOTASaveGame_SaveInstance::mutable_player_positions(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTASaveGame.SaveInstance.player_positions)
  return player_positions_.Mutable(index);
}
inline ::CDOTASaveGame_SaveInstance_PlayerPositions* CDOTASaveGame_SaveInstance::add_player_positions() {
  // @@protoc_insertion_point(field_add:CDOTASaveGame.SaveInstance.player_positions)
  return player_positions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance_PlayerPositions >&
CDOTASaveGame_SaveInstance::player_positions() const {
  // @@protoc_insertion_point(field_list:CDOTASaveGame.SaveInstance.player_positions)
  return player_positions_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance_PlayerPositions >*
CDOTASaveGame_SaveInstance::mutable_player_positions() {
  // @@protoc_insertion_point(field_mutable_list:CDOTASaveGame.SaveInstance.player_positions)
  return &player_positions_;
}

// optional uint32 save_id = 6;
inline bool CDOTASaveGame_SaveInstance::has_save_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTASaveGame_SaveInstance::set_has_save_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTASaveGame_SaveInstance::clear_has_save_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTASaveGame_SaveInstance::clear_save_id() {
  save_id_ = 0u;
  clear_has_save_id();
}
inline ::google::protobuf::uint32 CDOTASaveGame_SaveInstance::save_id() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.SaveInstance.save_id)
  return save_id_;
}
inline void CDOTASaveGame_SaveInstance::set_save_id(::google::protobuf::uint32 value) {
  set_has_save_id();
  save_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.SaveInstance.save_id)
}

// optional uint32 save_time = 7;
inline bool CDOTASaveGame_SaveInstance::has_save_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTASaveGame_SaveInstance::set_has_save_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDOTASaveGame_SaveInstance::clear_has_save_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDOTASaveGame_SaveInstance::clear_save_time() {
  save_time_ = 0u;
  clear_has_save_time();
}
inline ::google::protobuf::uint32 CDOTASaveGame_SaveInstance::save_time() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.SaveInstance.save_time)
  return save_time_;
}
inline void CDOTASaveGame_SaveInstance::set_save_time(::google::protobuf::uint32 value) {
  set_has_save_time();
  save_time_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.SaveInstance.save_time)
}

// -------------------------------------------------------------------

// CDOTASaveGame

// optional uint64 match_id = 5;
inline bool CDOTASaveGame::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTASaveGame::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTASaveGame::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTASaveGame::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
inline ::google::protobuf::uint64 CDOTASaveGame::match_id() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.match_id)
  return match_id_;
}
inline void CDOTASaveGame::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.match_id)
}

// optional uint32 save_time = 2;
inline bool CDOTASaveGame::has_save_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTASaveGame::set_has_save_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTASaveGame::clear_has_save_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTASaveGame::clear_save_time() {
  save_time_ = 0u;
  clear_has_save_time();
}
inline ::google::protobuf::uint32 CDOTASaveGame::save_time() const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.save_time)
  return save_time_;
}
inline void CDOTASaveGame::set_save_time(::google::protobuf::uint32 value) {
  set_has_save_time();
  save_time_ = value;
  // @@protoc_insertion_point(field_set:CDOTASaveGame.save_time)
}

// repeated .CDOTASaveGame.Player players = 3;
inline int CDOTASaveGame::players_size() const {
  return players_.size();
}
inline void CDOTASaveGame::clear_players() {
  players_.Clear();
}
inline const ::CDOTASaveGame_Player& CDOTASaveGame::players(int index) const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.players)
  return players_.Get(index);
}
inline ::CDOTASaveGame_Player* CDOTASaveGame::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTASaveGame.players)
  return players_.Mutable(index);
}
inline ::CDOTASaveGame_Player* CDOTASaveGame::add_players() {
  // @@protoc_insertion_point(field_add:CDOTASaveGame.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_Player >&
CDOTASaveGame::players() const {
  // @@protoc_insertion_point(field_list:CDOTASaveGame.players)
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_Player >*
CDOTASaveGame::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CDOTASaveGame.players)
  return &players_;
}

// repeated .CDOTASaveGame.SaveInstance save_instances = 4;
inline int CDOTASaveGame::save_instances_size() const {
  return save_instances_.size();
}
inline void CDOTASaveGame::clear_save_instances() {
  save_instances_.Clear();
}
inline const ::CDOTASaveGame_SaveInstance& CDOTASaveGame::save_instances(int index) const {
  // @@protoc_insertion_point(field_get:CDOTASaveGame.save_instances)
  return save_instances_.Get(index);
}
inline ::CDOTASaveGame_SaveInstance* CDOTASaveGame::mutable_save_instances(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTASaveGame.save_instances)
  return save_instances_.Mutable(index);
}
inline ::CDOTASaveGame_SaveInstance* CDOTASaveGame::add_save_instances() {
  // @@protoc_insertion_point(field_add:CDOTASaveGame.save_instances)
  return save_instances_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance >&
CDOTASaveGame::save_instances() const {
  // @@protoc_insertion_point(field_list:CDOTASaveGame.save_instances)
  return save_instances_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance >*
CDOTASaveGame::mutable_save_instances() {
  // @@protoc_insertion_point(field_mutable_list:CDOTASaveGame.save_instances)
  return &save_instances_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::DOTA_GameMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTA_GameMode>() {
  return ::DOTA_GameMode_descriptor();
}
template <> struct is_proto_enum< ::DOTA_GameState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTA_GameState>() {
  return ::DOTA_GameState_descriptor();
}
template <> struct is_proto_enum< ::DOTA_GC_TEAM> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTA_GC_TEAM>() {
  return ::DOTA_GC_TEAM_descriptor();
}
template <> struct is_proto_enum< ::EEvent> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EEvent>() {
  return ::EEvent_descriptor();
}
template <> struct is_proto_enum< ::DOTALeaverStatus_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTALeaverStatus_t>() {
  return ::DOTALeaverStatus_t_descriptor();
}
template <> struct is_proto_enum< ::DOTAConnectionState_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTAConnectionState_t>() {
  return ::DOTAConnectionState_t_descriptor();
}
template <> struct is_proto_enum< ::Fantasy_Roles> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Fantasy_Roles>() {
  return ::Fantasy_Roles_descriptor();
}
template <> struct is_proto_enum< ::Fantasy_Team_Slots> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Fantasy_Team_Slots>() {
  return ::Fantasy_Team_Slots_descriptor();
}
template <> struct is_proto_enum< ::Fantasy_Selection_Mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Fantasy_Selection_Mode>() {
  return ::Fantasy_Selection_Mode_descriptor();
}
template <> struct is_proto_enum< ::DOTAChatChannelType_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTAChatChannelType_t>() {
  return ::DOTAChatChannelType_t_descriptor();
}
template <> struct is_proto_enum< ::EProfileCardSlotType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EProfileCardSlotType>() {
  return ::EProfileCardSlotType_descriptor();
}
template <> struct is_proto_enum< ::EMatchGroupServerStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EMatchGroupServerStatus>() {
  return ::EMatchGroupServerStatus_descriptor();
}
template <> struct is_proto_enum< ::DOTA_CM_PICK> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTA_CM_PICK>() {
  return ::DOTA_CM_PICK_descriptor();
}
template <> struct is_proto_enum< ::DOTALowPriorityBanType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTALowPriorityBanType>() {
  return ::DOTALowPriorityBanType_descriptor();
}
template <> struct is_proto_enum< ::DOTALobbyReadyState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTALobbyReadyState>() {
  return ::DOTALobbyReadyState_descriptor();
}
template <> struct is_proto_enum< ::DOTAGameVersion> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTAGameVersion>() {
  return ::DOTAGameVersion_descriptor();
}
template <> struct is_proto_enum< ::DOTAJoinLobbyResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTAJoinLobbyResult>() {
  return ::DOTAJoinLobbyResult_descriptor();
}
template <> struct is_proto_enum< ::SelectionPriorityType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SelectionPriorityType>() {
  return ::SelectionPriorityType_descriptor();
}
template <> struct is_proto_enum< ::DOTAMatchVote> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTAMatchVote>() {
  return ::DOTAMatchVote_descriptor();
}
template <> struct is_proto_enum< ::DOTA_LobbyMemberXPBonus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTA_LobbyMemberXPBonus>() {
  return ::DOTA_LobbyMemberXPBonus_descriptor();
}
template <> struct is_proto_enum< ::DOTALobbyVisibility> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTALobbyVisibility>() {
  return ::DOTALobbyVisibility_descriptor();
}
template <> struct is_proto_enum< ::EDOTAPlayerMMRType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EDOTAPlayerMMRType>() {
  return ::EDOTAPlayerMMRType_descriptor();
}
template <> struct is_proto_enum< ::MatchType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MatchType>() {
  return ::MatchType_descriptor();
}
template <> struct is_proto_enum< ::DOTABotDifficulty> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTABotDifficulty>() {
  return ::DOTABotDifficulty_descriptor();
}
template <> struct is_proto_enum< ::DOTA_BOT_MODE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTA_BOT_MODE>() {
  return ::DOTA_BOT_MODE_descriptor();
}
template <> struct is_proto_enum< ::MatchLanguages> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MatchLanguages>() {
  return ::MatchLanguages_descriptor();
}
template <> struct is_proto_enum< ::ETourneyQueueDeadlineState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ETourneyQueueDeadlineState>() {
  return ::ETourneyQueueDeadlineState_descriptor();
}
template <> struct is_proto_enum< ::EMatchOutcome> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EMatchOutcome>() {
  return ::EMatchOutcome_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dota_5fshared_5fenums_2eproto__INCLUDED
